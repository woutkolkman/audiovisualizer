// base addressen, te vinden in nios_processor.qsys
// #define ADC_ADDR			(volatile int *) 0x00042020
#define TIMER_0				(volatile int *) 0x00042040
#define AUDIO				(volatile int *) 0x00042070
#define AUDIO_VID_ADDR		(volatile int *) 0x00042060

#define BUFFER_SIZE 128

// includes
#include <stdio.h>
#include "includes.h"
#include "altera_up_avalon_adc.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "system.h"

// stacks
#define	TASK_STACKSIZE	2048

OS_STK	TaskStartStack[TASK_STACKSIZE];
OS_STK  TaskReadAudioDataStack[TASK_STACKSIZE];
OS_STK  TaskTestStack[TASK_STACKSIZE];

// tasks
void TaskStart(void *pdata);
void TaskReadAudioData(void *pdata);
void TaskTest(void *pdata);

int main(void) {

	OSInit(); // initialize ucos-ii
	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
	OSStart(); // start multitasking
	return 0; // never executed
}

void TaskStart(void *pdata) {

    OSTaskCreate(TaskReadAudioData, (void *) 0, &TaskReadAudioDataStack[TASK_STACKSIZE - 1], 6); // create new task
 // OSTaskCreate(TaskTest, (void *) 0, &TaskTestStack[TASK_STACKSIZE - 1], 7); // create new task

    while (1) {

        OSTimeDly(100);
    }
}

void TaskReadAudioData(void *pdata) {

    alt_up_av_config_dev * audio_video_dev; // audio_video device
	audio_video_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0"); // open audio_video device

	alt_up_audio_dev * audio_dev; // audio device
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0"); // open audio device

	unsigned int l_buf; // left buffer
	unsigned int r_buf; // right buffer
	int buffer_size = 0;

	if (audio_video_dev == NULL)
		printf("audio_video_dev is not found.\n");
	else
		printf("audio_video_dev is opened.\n");


	if (!alt_up_av_config_read_ready(audio_video_dev))
		printf("audio_video_dev is not ready.\n");


	if (audio_dev == NULL)
		printf("Error: could not open audio device.\n");
	else
		printf("Opened audio device.\n");

	while (1) {

			int fifospace = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);

			// check if there's data available
			if (fifospace < 0)
				printf("There is no data available.\n");

			alt_up_audio_read_fifo(audio_dev, &r_buf, 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo(audio_dev, &l_buf, 1, ALT_UP_AUDIO_LEFT);

			for (int i = 0; i < fifospace; i++) {
				printf("%i \n", r_buf);
				printf("%i \n", r_buf);
				OSTimeDlyHMSM(0, 0, 1.5, 0);
				alt_up_audio_reset_audio_core(audio_dev); // configure audio chip
				alt_up_av_config_reset(audio_video_dev);
			}

	}
}

void TaskTest(void *pdata) {

		alt_up_audio_dev * audio_dev; // audio device
		audio_dev = alt_up_audio_open_dev ("/dev/audio_0"); // open audio device

		alt_up_av_config_dev * audio_video_dev; // audio_video device
		audio_video_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0"); // open audio_video device

		unsigned int l_buf;
		unsigned int r_buf;

		if (audio_dev == NULL)
			printf("Error: could not open audio device \n");
		else
			printf("Opened audio device \n");

		if (audio_video_dev == NULL)
			printf("audio_video_dev is not found.\n");
		else
			printf("audio_video_dev is opened.\n");


		if (!alt_up_av_config_read_ready(audio_video_dev))
			printf("audio_video_dev is not ready.\n");

		alt_up_audio_reset_audio_core(audio_dev); // configure audio chip
		alt_up_av_config_reset(audio_video_dev);

		while (1) {

			int fifospace = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);

			if (fifospace < 0) {
				printf("No data.\n");
				OSTimeDlyHMSM(0, 0, 1.5, 0);
			}

			// read audio buffer
			alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
			printf("%i \n", r_buf);
			OSTimeDlyHMSM(0, 0, 1.5, 0);

			// write audio buffer
			alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
		}
}

