// base addressen, te vinden in nios_processor.qsys
#define ADC_ADDR			(volatile int *) 0x00042020
#define TIMER_0				(volatile int *) 0x00042040
#define AUDIO				(volatile int *) 0x00042070
// #define AUDIO_VID_ADDR		(volatile int *) 0x00042060

// includes
#include <stdio.h>
#include "includes.h"
#include "altera_up_avalon_adc.h"
#include "altera_up_avalon_audio.h"
#include "altera_up_avalon_audio_and_video_config.h"
#include "system.h"

// stacks
#define	TASK_STACKSIZE	2048

OS_STK	TaskStartStack[TASK_STACKSIZE];
OS_STK	TaskADCStack[TASK_STACKSIZE];
OS_STK  TaskAudioStack[TASK_STACKSIZE];
// OS_STK  TaskAudioVideoStack[TASK_STACKSIZE];

// tasks
void TaskStart(void *pdata);
void TaskADC(void *pdata);
void TaskAudio(void *pdata);
// void TaskAudioVideo(void *pdata);

int main(void) {

	OSInit(); // initialize ucos-ii
	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
	OSStart(); // start multitasking
	return 0; // never executed
}

void TaskStart(void *pdata) {

	OSTaskCreate(TaskADC, (void *) 0, &TaskADCStack[TASK_STACKSIZE - 1], 6); // create new task
    OSTaskCreate(TaskAudio, (void *) 0, &TaskAudioStack[TASK_STACKSIZE - 1], 7); // create new task
 // OSTaskCreate(TaskAudioVideo, (void *) 0, &TaskAudioVideoStack[TASK_STACKSIZE - 1], 8); // create new task
    while (1) {

        OSTimeDly(100);
    }
}

/* void TaskAudioVideo(void *pdata) {

	alt_up_av_config_dev * audio_video_dev;
	audio_video_dev = alt_up_av_config_open_dev("/dev/audio_and_video_config_0"); // open audio_video device

	while (1) {

		if (audio_video_dev == NULL) {
			printf("audio_video_dev is not found.\n");
		}
	}
} */

void TaskAudio(void *pdata) {

	alt_up_audio_dev * audio_dev;
	unsigned int l_buf;
	unsigned int r_buf;
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");

	if (audio_dev == NULL)
		printf("Error: could not open audio device.\n");
	else
		printf("Opened audio device.\n");

	while (1) {

		int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);

		if (fifospace > 0) { // check if data is available

			// read audio buffer
			int right_buffer = alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
			int left_buffer = alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);

			printf("Right buffer : %d \n", right_buffer);
			printf("Left buffer : %d \n", left_buffer);

			OSTimeDlyHMSM(0, 0, 1, 0);

			// write audio buffer
			alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
		    alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);

		} else {
			printf("No data found.\n");
		}
	}
}

void TaskADC(void* pdata) {


    while (1) {

    	alt_up_adc_dev * adc;
    	adc = alt_up_adc_open_dev("/dev/adc_0");
    	int value;

    	if (adc == NULL) {
    		printf("Could not find ADC.\n");
    	} else {
    		alt_up_adc_auto_enable(adc); // enable auto-update adc
    		alt_up_adc_update(adc); // update register
    		OSTimeDlyHMSM(0, 0, 0, 500); // wait 500 ms
    		value = alt_up_adc_read(adc, 0); // read channel 0
    	 // printf("%d \n", value);
    		OSTimeDlyHMSM(0, 0, 0, 500); // wait 500 ms
    	}
    }
}
