
nios_ii.elf:     file format elf32-littlenios2
nios_ii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00019078 memsz 0x00019078 flags r-x
    LOAD off    0x0001a098 vaddr 0x00019098 paddr 0x0001ac38 align 2**12
         filesz 0x00001ba0 memsz 0x00001ba0 flags rw-
    LOAD off    0x0001c7d8 vaddr 0x0001c7d8 paddr 0x0001c7d8 align 2**12
         filesz 0x00000000 memsz 0x000093e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000181ec  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c7c  0001841c  0001841c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba0  00019098  0001ac38  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000093e8  0001c7d8  0001c7d8  0001c7d8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00025bc0  00025bc0  0001bc38  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001bc38  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000010d0  00000000  00000000  0001bc60  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002efc5  00000000  00000000  0001cd30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b33c  00000000  00000000  0004bcf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e2b3  00000000  00000000  00057031  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003354  00000000  00000000  000652e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004cbb  00000000  00000000  00068638  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b69  00000000  00000000  0006d2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00084e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001948  00000000  00000000  00084e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008b2ce  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008b2d4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008b2e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008b2e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0008b2e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0008b2ed  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0008b2f8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0008b303  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0008b311  2**0
                  CONTENTS, READONLY
 26 .jdi          000045ae  00000000  00000000  0008b33b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000444e6  00000000  00000000  0008f8e9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0001841c l    d  .rodata	00000000 .rodata
00019098 l    d  .rwdata	00000000 .rwdata
0001c7d8 l    d  .bss	00000000 .bss
00025bc0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ii_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
0000026c l     F .text	00000110 kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00018cae l     O .rodata	00000010 zeroes.4404
00003bd0 l     F .text	000000bc __sbprintf
00018cbe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003de0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005938 l     F .text	00000008 __fp_unlock
0000594c l     F .text	0000019c __sinit.part.1
00005ae8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000194a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000198e4 l     O .rwdata	00000020 lc_ctype_charset
000198c4 l     O .rwdata	00000020 lc_message_charset
00019904 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00018cf0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008654 l     F .text	000000fc __sprint_r.part.0
00018e14 l     O .rodata	00000010 zeroes.4349
00009c90 l     F .text	000000bc __sbprintf
00018e24 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000dafc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000dc38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000dc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000dd58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000de40 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000df2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0000e100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001abac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e374 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001abb0 l     O .rwdata	00000004 lockid
0001c804 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001abb4 l     O .rwdata	00000004 lockid
0001c80c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0000fdac l     F .text	00000048 OS_InitMisc
0000fdf4 l     F .text	0000006c OS_InitRdyList
0000ff60 l     F .text	000000e4 OS_InitTCBList
0000fccc l     F .text	000000e0 OS_InitEventList
0000fe60 l     F .text	00000080 OS_InitTaskIdle
0000fee0 l     F .text	00000080 OS_InitTaskStat
000101d0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00011ee0 l     F .text	000000f4 OS_FlagTaskRdy
00011ca0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015fb8 l     F .text	00000034 alt_dev_reg
00019ae4 l     O .rwdata	0000106c jtag_uart_0
0001ab50 l     O .rwdata	0000002c adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001633c l     F .text	000002a4 altera_avalon_jtag_uart_irq
000165e0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00016dbc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00016ffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001745c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000175bc l     F .text	0000003c alt_get_errno
000175f8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0001c870 g     O .bss	00000004 alt_instruction_exception_handler
00001700 g     F .text	00000018 putchar
00007b84 g     F .text	00000074 _mprec_log10
0001ac02 g     O .rwdata	00000002 OSTaskNameSize
00007c70 g     F .text	0000008c __any_on
0000a39c g     F .text	00000054 _isatty_r
00018cfc g     O .rodata	00000028 __mprec_tinytens
0000e044 g     F .text	000000bc alt_main
00001718 g     F .text	000000c0 _puts_r
00025ac0 g     O .bss	00000100 alt_irq
0000a3f0 g     F .text	00000060 _lseek_r
00012700 g     F .text	000000d8 OS_MemInit
0001ac38 g       *ABS*	00000000 __flash_rwdata_start
00015f58 g     F .text	00000060 OSTimeSet
0000c4d4 g     F .text	00000088 .hidden __eqdf2
0000ea20 g     F .text	00000610 OSEventPendMulti
00025bc0 g       *ABS*	00000000 __alt_heap_start
00017c34 g     F .text	00000024 OSTaskCreateHook
000016bc g     F .text	0000003c printf
0001abda g     O .rwdata	00000002 OSMboxEn
0001c89c g     O .bss	00002000 TaskADCToFFTStack
0000f088 g     F .text	0000004c OSIntEnter
0000a4b0 g     F .text	0000009c _wcrtomb_r
00008514 g     F .text	0000005c __sseek
00005c98 g     F .text	00000010 __sinit
00009d4c g     F .text	00000140 __swbuf_r
0001abea g     O .rwdata	00000002 OSQEn
0000676c g     F .text	0000007c _setlocale_r
00005af0 g     F .text	00000078 __sfmoreglue
0000e6f4 g     F .text	000000cc __malloc_unlock
00017c9c g     F .text	00000020 OSTaskStatHook
0001c814 g     O .bss	00000001 OSLockNesting
000008d8 g     F .text	00000134 Bel_FFT_Init
0001ac28 g     O .rwdata	00000002 OSDataSize
0001c815 g     O .bss	00000001 OSRunning
00006ae8 g     F .text	0000015c memmove
00017cdc g     F .text	00000020 OSInitHookBegin
0001ac20 g     O .rwdata	00000002 OSTmrSize
00005c80 g     F .text	00000018 _cleanup
00006c44 g     F .text	000000a8 _Balloc
0001c818 g     O .bss	00000004 OSIdleCtr
0000c55c g     F .text	000000dc .hidden __gtdf2
000179e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00017ab4 g       .text	00000000 OSStartTsk
00010500 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
0001ac26 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001abc6 g     O .rwdata	00000002 OSEventSize
0001c81c g     O .bss	00000001 OSPrioHighRdy
0000a340 g     F .text	0000005c _fstat_r
00017c58 g     F .text	00000024 OSTaskDelHook
0001c7e4 g     O .bss	00000004 errno
00008490 g     F .text	00000008 __seofread
00017a94 g       .text	00000000 OSStartHighRdy
000149d8 g     F .text	000001e4 OSTaskCreateExt
000117e8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001ac06 g     O .rwdata	00000002 OSTaskStatStkSize
00010964 g     F .text	00000308 OSFlagAccept
00012d44 g     F .text	000000b8 OSQFlush
000127d8 g     F .text	00000140 OSQAccept
0001c7fc g     O .bss	00000004 alt_argv
00022b7c g       *ABS*	00000000 _gp
0001482c g     F .text	000001ac OSTaskCreate
0001433c g     F .text	000004f0 OSTaskChangePrio
0001c810 g     O .bss	00000004 alt_heapsem
000107d4 g     F .text	00000190 OSDebugInit
00014bbc g     F .text	00000344 OSTaskDel
00019964 g     O .rwdata	00000180 alt_fd_list
0002289c g     O .bss	00000370 OSFlagTbl
000016f8 g     F .text	00000008 _putchar_r
0000faac g     F .text	000000b8 OS_EventTaskRemove
00017d60 g     F .text	00000090 alt_find_dev
0000141c g     F .text	00000148 memcpy
0001abf0 g     O .rwdata	00000002 OSRdyTblSize
00005940 g     F .text	0000000c _cleanup_r
0001e89c g     O .bss	00002000 TaskFFTStack
0000d914 g     F .text	000000dc .hidden __floatsidf
00017540 g     F .text	0000007c alt_io_redirect
0000c638 g     F .text	000000f4 .hidden __ltdf2
0001841c g       *ABS*	00000000 __DTOR_END__
000017d8 g     F .text	00000014 puts
00017fec g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000e7c0 g     F .text	00000120 OSEventNameGet
0001abd4 g     O .rwdata	00000002 OSFlagMax
000083c8 g     F .text	00000074 __fpclassifyd
00007ae0 g     F .text	000000a4 __ratio
0000f0d4 g     F .text	000000f8 OSIntExit
00009c74 g     F .text	0000001c __vfiprintf_internal
0001ac0e g     O .rwdata	00000002 OSTCBSize
0001c81d g     O .bss	00000001 OSPrioCur
0001683c g     F .text	000002bc altera_avalon_jtag_uart_read
00000be8 g     F .text	00000014 malloc
0000168c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000b04 g     F .text	00000064 .hidden __udivsi3
0000dd94 g     F .text	000000ac isatty
0001abf4 g     O .rwdata	00000002 OSStkWidth
00018d4c g     O .rodata	000000c8 __mprec_tens
0001abe8 g     O .rwdata	00000002 OSPtrSize
000067e8 g     F .text	0000000c __locale_charset
0001abc8 g     O .rwdata	00000002 OSEventTblSize
00017a08 g       .text	00000000 OSCtxSw
0001c7e0 g     O .bss	00000004 __malloc_top_pad
0001c820 g     O .bss	00000004 OSTCBList
0001c7f4 g     O .bss	00000004 alt_fd_list_lock
0001ab8c g     O .rwdata	00000004 __mb_cur_max
00006818 g     F .text	0000000c _localeconv_r
0000081c g     F .text	000000bc TaskADCToFFT
00007078 g     F .text	0000003c __i2b
0000611c g     F .text	000004c8 __sfvwrite_r
00022c0c g     O .bss	00000c30 OSMemTbl
0001c824 g     O .bss	00000001 OSTickStepState
000017ec g     F .text	00000054 _sbrk_r
0001abec g     O .rwdata	00000002 OSQMax
0002383c g     O .bss	00000800 OSTaskStatStk
0001233c g     F .text	000000f0 OSMemNameGet
0001abcc g     O .rwdata	00000002 OSFlagEn
0000a450 g     F .text	00000060 _read_r
0001ac12 g     O .rwdata	00000002 OSTimeTickHookEn
0000dc10 g     F .text	00000028 alt_dcache_flush
000131f4 g     F .text	00000168 OSQPost
00011fd4 g     F .text	000000a4 OS_FlagUnlink
0001aba4 g     O .rwdata	00000004 alt_max_fd
00010098 g     F .text	00000068 OS_MemCopy
00010100 g     F .text	000000d0 OS_Sched
0000a034 g     F .text	000000f0 _fclose_r
0001224c g     F .text	000000f0 OSMemGet
000151e8 g     F .text	000001b4 OSTaskNameSet
00005908 g     F .text	00000030 fflush
0000037c g     F .text	00000090 kiss_fft_alloc_twiddles
0001c7dc g     O .bss	00000004 __malloc_max_sbrked_mem
0001c828 g     O .bss	00000004 OSCtxSwCtr
00017cbc g     F .text	00000020 OSTimeTickHook
0001abd6 g     O .rwdata	00000002 OSFlagNameSize
0000fb64 g     F .text	00000100 OS_EventTaskRemoveMulti
0000b258 g     F .text	000008ac .hidden __adddf3
0000f95c g     F .text	00000150 OS_EventTaskWaitMulti
00007888 g     F .text	0000010c __b2d
0001abee g     O .rwdata	00000002 OSQSize
0000ac94 g     F .text	000005c4 .hidden __umoddi3
0000df68 g     F .text	000000dc lseek
00013ca4 g     F .text	0000020c OSSemPend
0001ab84 g     O .rwdata	00000004 _global_impure_ptr
00007e64 g     F .text	00000564 _realloc_r
0001abd8 g     O .rwdata	00000002 OSLowestPrio
00025bc0 g       *ABS*	00000000 __bss_end
0001736c g     F .text	000000f0 alt_iic_isr_register
00017d3c g     F .text	00000024 OSTCBInitHook
0001ac1e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000178dc g     F .text	00000108 alt_tick
0000a698 g     F .text	000005fc .hidden __udivdi3
0000a29c g     F .text	00000024 _fputwc_r
000006c0 g     F .text	0000015c TaskFFT
0001abc0 g     O .rwdata	00000002 OSEventEn
00018d24 g     O .rodata	00000028 __mprec_bigtens
00006e5c g     F .text	00000104 __s2b
0001ac1a g     O .rwdata	00000002 OSTmrCfgNameSize
0000d9f0 g     F .text	000000a8 .hidden __floatunsidf
000075c8 g     F .text	00000060 __mcmp
00005cb8 g     F .text	00000018 __fp_lock_all
00017320 g     F .text	0000004c alt_ic_irq_enabled
00011e00 g     F .text	000000e0 OS_FlagInit
00017840 g     F .text	0000009c alt_alarm_stop
0001abfc g     O .rwdata	00000002 OSTaskIdleStkSize
0001c864 g     O .bss	00000004 alt_irq_active
000138dc g     F .text	000000b0 OSSemAccept
00012540 g     F .text	000000d8 OSMemPut
00012078 g     F .text	000001d4 OSMemCreate
0001c82c g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0001993c g     O .rwdata	00000028 alt_dev_null
0001ac10 g     O .rwdata	00000002 OSTicksPerSec
00017a08 g       .text	00000000 OSIntCtxSw
00016fdc g     F .text	00000020 alt_dcache_flush_all
00006f60 g     F .text	00000068 __hi0bits
0000d894 g     F .text	00000080 .hidden __fixdfsi
0001c830 g     O .bss	00000004 OSTCBFreeList
0001ac38 g       *ABS*	00000000 __ram_rwdata_end
00013eb0 g     F .text	0000016c OSSemPendAbort
0001ab9c g     O .rwdata	00000008 alt_dev_list
0000e3b0 g     F .text	00000100 write
00007cfc g     F .text	000000a0 _putc_r
0001ac14 g     O .rwdata	00000002 OSVersionNbr
0002089c g     O .bss	00002000 TaskStartStack
00019098 g       *ABS*	00000000 __ram_rodata_end
0000dca0 g     F .text	000000b8 fstat
0000c638 g     F .text	000000f4 .hidden __ledf2
0001abbc g     O .rwdata	00000004 OSEndiannessTest
00007340 g     F .text	00000140 __pow5mult
00008768 g     F .text	0000150c ___vfiprintf_internal_r
0001c7f0 g     O .bss	00000004 __nlocale_changed
00000b68 g     F .text	00000058 .hidden __umodsi3
0001abce g     O .rwdata	00000002 OSFlagGrpSize
00025bc0 g       *ABS*	00000000 end
000161f4 g     F .text	00000148 altera_avalon_jtag_uart_init
00010368 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0001841c g       *ABS*	00000000 __CTOR_LIST__
00030d40 g       *ABS*	00000000 __alt_stack_pointer
00016e34 g     F .text	0000007c alt_avalon_timer_sc_init
0000da98 g     F .text	00000064 .hidden __clzsi2
00016af8 g     F .text	000002c4 altera_avalon_jtag_uart_write
00000454 g     F .text	0000017c kiss_fft_stride
00005ca8 g     F .text	00000004 __sfp_lock_acquire
00006a04 g     F .text	000000e4 memchr
00010044 g     F .text	00000054 OS_MemClr
000005d0 g     F .text	00000048 kiss_fft
000018d8 g     F .text	000022dc ___vfprintf_internal_r
00017ad8 g     F .text	0000015c OSTaskStkInit
00005e0c g     F .text	00000310 _free_r
000067f4 g     F .text	00000010 __locale_mb_cur_max
0000f6b4 g     F .text	00000198 OS_EventTaskRdy
00018268 g     F .text	00000180 __call_exitprocs
0001c834 g     O .bss	00000001 OSCPUUsage
0001c7ec g     O .bss	00000004 __mlocale_changed
0001ab7c g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0001c868 g     O .bss	00000004 _alt_tick_rate
00012dfc g     F .text	0000028c OSQPend
00015aa8 g     F .text	00000104 OSTimeDly
00007480 g     F .text	00000148 __lshift
0001c86c g     O .bss	00000004 _alt_nticks
0000e13c g     F .text	00000104 read
00016024 g     F .text	0000006c alt_sys_init
00018150 g     F .text	00000118 __register_exitproc
0001c835 g     O .bss	00000001 OSTaskCtr
00015bac g     F .text	0000017c OSTimeDlyHMSM
000070b4 g     F .text	0000028c __multiply
000166e4 g     F .text	00000068 altera_avalon_jtag_uart_close
00000bc0 g     F .text	00000028 .hidden __mulsi3
00019098 g       *ABS*	00000000 __ram_rwdata_start
0001841c g       *ABS*	00000000 __ram_rodata_start
0001c874 g     O .bss	00000028 __malloc_current_mallinfo
0001abc2 g     O .rwdata	00000002 OSEventMax
00007994 g     F .text	0000014c __d2b
0001401c g     F .text	00000110 OSSemPost
0000f258 g     F .text	000000dc OSSchedUnlock
00016090 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00017ef8 g     F .text	000000f4 alt_get_fd
0001c838 g     O .bss	00000004 OSMemFreeList
0000f3a4 g     F .text	000000b0 OSStatInit
00011bdc g     F .text	000000c4 OSFlagQuery
0001abf8 g     O .rwdata	00000002 OSTaskCreateExtEn
00009f04 g     F .text	00000054 _close_r
000180d4 g     F .text	0000007c memcmp
0000f694 g     F .text	00000020 OS_Dummy
00016150 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00025bc0 g       *ABS*	00000000 __alt_stack_base
000161a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00003c8c g     F .text	00000154 __swsetup_r
0002403c g     O .bss	000001e0 OSQTbl
0000bb04 g     F .text	000009d0 .hidden __divdf3
00005b68 g     F .text	00000118 __sfp
00007bf8 g     F .text	00000078 __copybits
00019098 g     O .rwdata	00000408 __malloc_av_
00005cb4 g     F .text	00000004 __sinit_lock_release
0001c83c g     O .bss	00000004 OSTCBHighRdy
0000c72c g     F .text	0000086c .hidden __muldf3
0000843c g     F .text	00000054 __sread
0001c840 g     O .bss	00000004 OSQFreeList
00017df0 g     F .text	00000108 alt_find_file
00017038 g     F .text	000000a4 alt_dev_llist_insert
0000e5d4 g     F .text	00000120 __malloc_lock
0000e2c4 g     F .text	000000b0 sbrk
0000e8e0 g     F .text	00000140 OSEventNameSet
000058ac g     F .text	0000005c _fflush_r
00009f58 g     F .text	000000dc _calloc_r
0001c844 g     O .bss	00000001 OSRdyGrp
0001c7d8 g       *ABS*	00000000 __bss_start
00001564 g     F .text	00000128 memset
00000638 g     F .text	0000004c main
0001c800 g     O .bss	00000004 alt_envp
0001c7d8 g     O .bss	00000004 __malloc_max_total_mem
000160f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009e8c g     F .text	00000018 __swbuf
00018f54 g     O .rodata	00000100 OSUnMapTbl
0001abf2 g     O .rwdata	00000002 OSSemEn
00011848 g     F .text	00000394 OSFlagPost
00008570 g     F .text	00000008 __sclose
00030d40 g       *ABS*	00000000 __alt_heap_limit
0000a124 g     F .text	00000014 fclose
0000f84c g     F .text	00000110 OS_EventTaskWait
00010434 g     F .text	000000cc OS_TaskStatStkChk
00014f00 g     F .text	00000150 OSTaskDelReq
00004008 g     F .text	00001688 _dtoa_r
00000c10 g     F .text	0000080c _malloc_r
0000a60c g     F .text	00000030 __ascii_wctomb
0001aba8 g     O .rwdata	00000004 alt_errno
0000f334 g     F .text	00000070 OSStart
0000e574 g     F .text	00000060 __env_unlock
000065e4 g     F .text	000000c4 _fwalk
0001539c g     F .text	000001d4 OSTaskResume
00012618 g     F .text	000000e8 OSMemQuery
0001ac04 g     O .rwdata	00000002 OSTaskStatEn
0001abde g     O .rwdata	00000002 OSMemMax
0001335c g     F .text	00000170 OSQPostFront
00007d9c g     F .text	000000c8 putc
00000a0c g     F .text	00000084 .hidden __divsi3
0001c845 g     O .bss	00000003 OSRdyTbl
0001abb8 g     O .rwdata	00000002 OSDebugEn
00005ce8 g     F .text	00000124 _malloc_trim_r
0001841c g       *ABS*	00000000 __CTOR_END__
0001abd0 g     O .rwdata	00000002 OSFlagNodeSize
0001ac18 g     O .rwdata	00000002 OSTmrCfgMax
00008578 g     F .text	000000dc strcmp
00012918 g     F .text	000001ac OSQCreate
00015050 g     F .text	00000198 OSTaskNameGet
0001841c g       *ABS*	00000000 __flash_rodata_start
000134cc g     F .text	0000020c OSQPostOpt
0000f454 g     F .text	00000220 OSTimeTick
0001ac00 g     O .rwdata	00000002 OSTaskMax
0001841c g       *ABS*	00000000 __DTOR_LIST__
0001398c g     F .text	000000d8 OSSemCreate
0001ac24 g     O .rwdata	00000002 OSTmrWheelSize
0000c4d4 g     F .text	00000088 .hidden __nedf2
0001abfa g     O .rwdata	00000002 OSTaskDelEn
0001412c g     F .text	00000110 OSSemQuery
00012ac4 g     F .text	00000280 OSQDel
00013088 g     F .text	0000016c OSQPendAbort
00015fec g     F .text	00000038 alt_irq_init
0000e240 g     F .text	00000084 alt_release_fd
00018e34 g     O .rodata	00000100 .hidden __clz_tab
0001c7e8 g     O .bss	00000004 _PathLocale
00018088 g     F .text	00000014 atexit
00009ea4 g     F .text	00000060 _write_r
0000f1cc g     F .text	0000008c OSSchedLock
00006824 g     F .text	00000018 setlocale
00010c6c g     F .text	00000108 OSFlagCreate
0001ab88 g     O .rwdata	00000004 _impure_ptr
0001c7f8 g     O .bss	00000004 alt_argc
00005690 g     F .text	0000021c __sflush_r
0001713c g     F .text	00000060 _do_dtors
00006810 g     F .text	00000008 __locale_cjk_lang
0001abca g     O .rwdata	00000002 OSEventMultiEn
00010d74 g     F .text	00000248 OSFlagDel
0001c848 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00007824 g     F .text	00000064 __ulp
00011230 g     F .text	000005b8 OSFlagPend
0001ac16 g     O .rwdata	00000002 OSTmrEn
00005cd0 g     F .text	00000018 __fp_unlock_all
0001ab94 g     O .rwdata	00000008 alt_fs_list
00010244 g     F .text	00000074 OS_StrCopy
0001abe0 g     O .rwdata	00000002 OSMemNameSize
00017cfc g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001ac0c g     O .rwdata	00000002 OSTCBPrioTblMax
0000683c g     F .text	0000000c localeconv
0001ac08 g     O .rwdata	00000002 OSTaskStatStkChkEn
000171bc g     F .text	00000050 alt_ic_isr_register
0001abdc g     O .rwdata	00000002 OSMemEn
0001abe6 g     O .rwdata	00000002 OSMutexEn
0001ac38 g       *ABS*	00000000 _edata
00025bc0 g       *ABS*	00000000 _end
0001c84c g     O .bss	00000001 OSIntNesting
0000a138 g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0001674c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00015d28 g     F .text	000001d4 OSTimeDlyResume
000110e4 g     F .text	0000014c OSFlagNameSet
00015570 g     F .text	000001c0 OSTaskStkChk
00017294 g     F .text	0000008c alt_ic_irq_disable
0001abe2 g     O .rwdata	00000002 OSMemSize
00008498 g     F .text	0000007c __swrite
0001ab80 g     O .rwdata	00000004 __malloc_trim_threshold
00006804 g     F .text	0000000c __locale_msgcharset
0001c850 g     O .bss	00000004 OSTCBCur
0001809c g     F .text	00000038 exit
0001abe4 g     O .rwdata	00000002 OSMemTblSize
000066a8 g     F .text	000000c4 _fwalk_reent
00007628 g     F .text	000001fc __mdiff
00000618 g     F .text	00000020 kiss_fft_cleanup
00000a90 g     F .text	00000074 .hidden __modsi3
00030d40 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005cac g     F .text	00000004 __sfp_lock_release
0000f030 g     F .text	00000058 OSInit
00015914 g     F .text	00000124 OSTaskQuery
00013834 g     F .text	000000a8 OS_QInit
00000684 g     F .text	0000003c TaskStart
000102b8 g     F .text	00000054 OS_StrLen
0001242c g     F .text	00000114 OSMemNameSet
0001abfe g     O .rwdata	00000002 OSTaskProfileEn
0001c854 g     O .bss	00000004 OSTime
0002421c g     O .bss	00000800 OSTaskIdleStk
000183e8 g     F .text	00000034 _exit
00016eb0 g     F .text	0000012c alt_alarm_start
00010fbc g     F .text	00000128 OSFlagNameGet
00015efc g     F .text	0000005c OSTimeGet
00006848 g     F .text	000001bc __smakebuf_r
00001840 g     F .text	00000098 strlen
00017c7c g     F .text	00000020 OSTaskSwHook
000176e4 g     F .text	0000015c open
00024a1c g     O .bss	00000b40 OSEventTbl
0000c55c g     F .text	000000dc .hidden __gedf2
0002555c g     O .bss	00000510 OSTCBTbl
0001423c g     F .text	00000100 OSSemSet
0001ab90 g     O .rwdata	00000004 __wctomb
00008750 g     F .text	00000018 __sprint_r
0001719c g     F .text	00000020 alt_icache_flush_all
0001ac2c g     O .rwdata	00000004 alt_priority_mask
00013a64 g     F .text	00000240 OSSemDel
0001c858 g     O .bss	00000004 OSFlagFreeList
0001720c g     F .text	00000088 alt_ic_irq_enable
0001abc4 g     O .rwdata	00000002 OSEventNameSize
00003bb4 g     F .text	0000001c __vfprintf_internal
0001c85c g     O .bss	00000001 OSStatRdy
00025a6c g     O .bss	00000054 OSTCBPrioTbl
0000a63c g     F .text	0000005c _wctomb_r
0000e4b0 g     F .text	000000c4 __env_lock
0001ac0a g     O .rwdata	00000002 OSTaskSwHookEn
0000040c g     F .text	00000048 kiss_fft_alloc
0000cf98 g     F .text	000008fc .hidden __subdf3
00006fc8 g     F .text	000000b0 __lo0bits
0001ac30 g     O .rwdata	00000008 alt_alarm_list
0001abd2 g     O .rwdata	00000002 OSFlagWidth
000170dc g     F .text	00000060 _do_ctors
0000a54c g     F .text	000000c0 wcrtomb
0000db38 g     F .text	000000d8 close
0001c808 g     O .bss	00000004 alt_envsem
0001c860 g     O .bss	00000004 OSIdleCtrRun
0000f674 g     F .text	00000020 OSVersion
0001ac1c g     O .rwdata	00000002 OSTmrCfgWheelSize
0000dea8 g     F .text	00000084 alt_load
00015a38 g     F .text	00000070 OS_TaskStkClr
0001abf6 g     O .rwdata	00000002 OSTaskCreateEn
0000fc64 g     F .text	00000068 OS_EventWaitListInit
0000a2c0 g     F .text	00000080 fputwc
00017d1c g     F .text	00000020 OSTaskIdleHook
00000bfc g     F .text	00000014 free
00005cb0 g     F .text	00000004 __sinit_lock_acquire
00006d14 g     F .text	00000148 __multadd
00015730 g     F .text	000001e4 OSTaskSuspend
00006cec g     F .text	00000028 _Bfree
0001030c g     F .text	0000005c OS_TaskIdle
0001ac22 g     O .rwdata	00000002 OSTmrTblSize
000136d8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	000f0880 	call	f088 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008000b4 	movhi	r2,2
 140:	1096b004 	addi	r2,r2,23232
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000b4 	movhi	r2,2
 158:	1096b004 	addi	r2,r2,23232
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffcf3ec>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffcf3e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	000f0d40 	call	f0d4 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a73d17 	ldw	r2,-25356(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a73d17 	ldw	r2,-25356(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
     238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     23c:	d68adf14 	ori	gp,gp,11132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10b1f614 	ori	r2,r2,51160

    movhi r3, %hi(__bss_end)
     248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     24c:	18d6f014 	ori	r3,r3,23488

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffcf514>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	000dea80 	call	dea8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	000e0440 	call	e044 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffcf528>

0000026c <kf_factor>:
 *  m0 = n
 */

static 
int kf_factor (int n, short int *facbuf)
{
     26c:	defffb04 	addi	sp,sp,-20
     270:	dfc00415 	stw	ra,16(sp)
     274:	df000315 	stw	fp,12(sp)
     278:	df000304 	addi	fp,sp,12
     27c:	e13ffe15 	stw	r4,-8(fp)
     280:	e17fff15 	stw	r5,-4(fp)
    int p = 4;
     284:	00800104 	movi	r2,4
     288:	e0bffd15 	stw	r2,-12(fp)

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     28c:	00001a06 	br	2f8 <kf_factor+0x8c>
            switch (p) {
     290:	e0bffd17 	ldw	r2,-12(fp)
     294:	10c000a0 	cmpeqi	r3,r2,2
     298:	1800051e 	bne	r3,zero,2b0 <kf_factor+0x44>
     29c:	10800120 	cmpeqi	r2,r2,4
     2a0:	10000626 	beq	r2,zero,2bc <kf_factor+0x50>
                case 4: p = 2; break;
     2a4:	00800084 	movi	r2,2
     2a8:	e0bffd15 	stw	r2,-12(fp)
     2ac:	00000706 	br	2cc <kf_factor+0x60>
                case 2: p = 3; break;
     2b0:	008000c4 	movi	r2,3
     2b4:	e0bffd15 	stw	r2,-12(fp)
     2b8:	00000406 	br	2cc <kf_factor+0x60>
                default: p += 2; break;
     2bc:	e0bffd17 	ldw	r2,-12(fp)
     2c0:	10800084 	addi	r2,r2,2
     2c4:	e0bffd15 	stw	r2,-12(fp)
     2c8:	0001883a 	nop
            }
            if (p > 32000 || (int) p *(int) p > n) {
     2cc:	e0bffd17 	ldw	r2,-12(fp)
     2d0:	109f4048 	cmpgei	r2,r2,32001
     2d4:	1000061e 	bne	r2,zero,2f0 <kf_factor+0x84>
     2d8:	e17ffd17 	ldw	r5,-12(fp)
     2dc:	e13ffd17 	ldw	r4,-12(fp)
     2e0:	0000bc00 	call	bc0 <__mulsi3>
     2e4:	1007883a 	mov	r3,r2
     2e8:	e0bffe17 	ldw	r2,-8(fp)
     2ec:	10c0020e 	bge	r2,r3,2f8 <kf_factor+0x8c>
                p = n;          /* no more factors, skip to end */
     2f0:	e0bffe17 	ldw	r2,-8(fp)
     2f4:	e0bffd15 	stw	r2,-12(fp)
{
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     2f8:	e0bffe17 	ldw	r2,-8(fp)
     2fc:	e17ffd17 	ldw	r5,-12(fp)
     300:	1009883a 	mov	r4,r2
     304:	0000a900 	call	a90 <__modsi3>
     308:	103fe11e 	bne	r2,zero,290 <__alt_data_end+0xfffcf550>
            }
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
     30c:	e17ffd17 	ldw	r5,-12(fp)
     310:	e13ffe17 	ldw	r4,-8(fp)
     314:	0000a0c0 	call	a0c <__divsi3>
     318:	e0bffe15 	stw	r2,-8(fp)
        if (p>5) {
     31c:	e0bffd17 	ldw	r2,-12(fp)
     320:	10800190 	cmplti	r2,r2,6
     324:	1000021e 	bne	r2,zero,330 <kf_factor+0xc4>
            return 0;
     328:	0005883a 	mov	r2,zero
     32c:	00000e06 	br	368 <kf_factor+0xfc>
        }
        *facbuf++ = (short int) p;
     330:	e0bfff17 	ldw	r2,-4(fp)
     334:	10c00084 	addi	r3,r2,2
     338:	e0ffff15 	stw	r3,-4(fp)
     33c:	e0fffd17 	ldw	r3,-12(fp)
     340:	10c0000d 	sth	r3,0(r2)
        *facbuf++ = (short int) n;
     344:	e0bfff17 	ldw	r2,-4(fp)
     348:	10c00084 	addi	r3,r2,2
     34c:	e0ffff15 	stw	r3,-4(fp)
     350:	e0fffe17 	ldw	r3,-8(fp)
     354:	10c0000d 	sth	r3,0(r2)
    } while (n > 1);
     358:	e0bffe17 	ldw	r2,-8(fp)
     35c:	10800088 	cmpgei	r2,r2,2
     360:	103fe51e 	bne	r2,zero,2f8 <__alt_data_end+0xfffcf5b8>
    return 1;
     364:	00800044 	movi	r2,1
}
     368:	e037883a 	mov	sp,fp
     36c:	dfc00117 	ldw	ra,4(sp)
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00204 	addi	sp,sp,8
     378:	f800283a 	ret

0000037c <kiss_fft_alloc_twiddles>:
 *
 * The parameters inverse_fft, mem, and lenmem are not used.
 */

kiss_fft_cfg kiss_fft_alloc_twiddles (int nfft, int inverse_fft, void *mem, size_t *lenmem)
{
     37c:	defff904 	addi	sp,sp,-28
     380:	dfc00615 	stw	ra,24(sp)
     384:	df000515 	stw	fp,20(sp)
     388:	df000504 	addi	fp,sp,20
     38c:	e13ffc15 	stw	r4,-16(fp)
     390:	e17ffd15 	stw	r5,-12(fp)
     394:	e1bffe15 	stw	r6,-8(fp)
     398:	e1ffff15 	stw	r7,-4(fp)
    kiss_fft_cfg cfg;

    cfg = (kiss_fft_cfg) malloc (sizeof (struct kiss_fft_state));
     39c:	01002304 	movi	r4,140
     3a0:	0000be80 	call	be8 <malloc>
     3a4:	e0bffb15 	stw	r2,-20(fp)
    if (cfg) {
     3a8:	e0bffb17 	ldw	r2,-20(fp)
     3ac:	10001126 	beq	r2,zero,3f4 <kiss_fft_alloc_twiddles+0x78>
        cfg->nfft = nfft;
     3b0:	e0bffb17 	ldw	r2,-20(fp)
     3b4:	e0fffc17 	ldw	r3,-16(fp)
     3b8:	10c00015 	stw	r3,0(r2)

        cfg->belFftPtr = (struct bel_fft *) BEL_FFT_PROJECT_0_BASE;
     3bc:	e0fffb17 	ldw	r3,-20(fp)
     3c0:	00804034 	movhi	r2,256
     3c4:	10940004 	addi	r2,r2,20480
     3c8:	18802215 	stw	r2,136(r3)
        if (! kf_factor (nfft, cfg->factors)) {
     3cc:	e0bffb17 	ldw	r2,-20(fp)
     3d0:	10800204 	addi	r2,r2,8
     3d4:	100b883a 	mov	r5,r2
     3d8:	e13ffc17 	ldw	r4,-16(fp)
     3dc:	000026c0 	call	26c <kf_factor>
     3e0:	1000041e 	bne	r2,zero,3f4 <kiss_fft_alloc_twiddles+0x78>
            free (cfg);
     3e4:	e13ffb17 	ldw	r4,-20(fp)
     3e8:	0000bfc0 	call	bfc <free>
            return NULL;
     3ec:	0005883a 	mov	r2,zero
     3f0:	00000106 	br	3f8 <kiss_fft_alloc_twiddles+0x7c>
        }
    }
    return cfg;
     3f4:	e0bffb17 	ldw	r2,-20(fp)
}
     3f8:	e037883a 	mov	sp,fp
     3fc:	dfc00117 	ldw	ra,4(sp)
     400:	df000017 	ldw	fp,0(sp)
     404:	dec00204 	addi	sp,sp,8
     408:	f800283a 	ret

0000040c <kiss_fft_alloc>:


kiss_fft_cfg kiss_fft_alloc (int nfft, int inverse_fft, void * mem, size_t * lenmem)
{
     40c:	defffa04 	addi	sp,sp,-24
     410:	dfc00515 	stw	ra,20(sp)
     414:	df000415 	stw	fp,16(sp)
     418:	df000404 	addi	fp,sp,16
     41c:	e13ffc15 	stw	r4,-16(fp)
     420:	e17ffd15 	stw	r5,-12(fp)
     424:	e1bffe15 	stw	r6,-8(fp)
     428:	e1ffff15 	stw	r7,-4(fp)
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
     42c:	e1ffff17 	ldw	r7,-4(fp)
     430:	e1bffe17 	ldw	r6,-8(fp)
     434:	e17ffd17 	ldw	r5,-12(fp)
     438:	e13ffc17 	ldw	r4,-16(fp)
     43c:	000037c0 	call	37c <kiss_fft_alloc_twiddles>
}
     440:	e037883a 	mov	sp,fp
     444:	dfc00117 	ldw	ra,4(sp)
     448:	df000017 	ldw	fp,0(sp)
     44c:	dec00204 	addi	sp,sp,8
     450:	f800283a 	ret

00000454 <kiss_fft_stride>:


void kiss_fft_stride (const kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout, int in_stride)
{
     454:	defff704 	addi	sp,sp,-36
     458:	dfc00815 	stw	ra,32(sp)
     45c:	df000715 	stw	fp,28(sp)
     460:	df000704 	addi	fp,sp,28
     464:	e13ffc15 	stw	r4,-16(fp)
     468:	e17ffd15 	stw	r5,-12(fp)
     46c:	e1bffe15 	stw	r6,-8(fp)
     470:	e1ffff15 	stw	r7,-4(fp)
    
    /*
     *  Set bit 31 to bypass the cache on the NIOSII.
     */

    volatile struct bel_fft * belFftPtr = (struct bel_fft *) (BEL_FFT_PROJECT_0_BASE + 0x80000000);
     474:	00a04034 	movhi	r2,33024
     478:	10940004 	addi	r2,r2,20480
     47c:	e0bffb15 	stw	r2,-20(fp)

    /*
     * Set the size, source and destination address
     */

    belFftPtr->N.N = cfg->nfft;
     480:	e0bffc17 	ldw	r2,-16(fp)
     484:	10800017 	ldw	r2,0(r2)
     488:	1007883a 	mov	r3,r2
     48c:	e0bffb17 	ldw	r2,-20(fp)
     490:	10c0020d 	sth	r3,8(r2)
    belFftPtr->Finadr = fin;
     494:	e0bffb17 	ldw	r2,-20(fp)
     498:	e0fffd17 	ldw	r3,-12(fp)
     49c:	10c00315 	stw	r3,12(r2)
    belFftPtr->Foutadr = fout;
     4a0:	e0bffb17 	ldw	r2,-20(fp)
     4a4:	e0fffe17 	ldw	r3,-8(fp)
     4a8:	10c00415 	stw	r3,16(r2)

    /*
     * Copy the precalculated factors.
     */

    facbuf = cfg->factors;
     4ac:	e0bffc17 	ldw	r2,-16(fp)
     4b0:	10800204 	addi	r2,r2,8
     4b4:	e0bff915 	stw	r2,-28(fp)
    i = 0;
     4b8:	e03ffa15 	stw	zero,-24(fp)
    while (1) {
        belFftPtr->Factors[i].P = *facbuf++;
     4bc:	e0bff917 	ldw	r2,-28(fp)
     4c0:	10c00084 	addi	r3,r2,2
     4c4:	e0fff915 	stw	r3,-28(fp)
     4c8:	10c0000b 	ldhu	r3,0(r2)
     4cc:	e13ffb17 	ldw	r4,-20(fp)
     4d0:	e0bffa17 	ldw	r2,-24(fp)
     4d4:	10800144 	addi	r2,r2,5
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	1085883a 	add	r2,r2,r2
     4e0:	2085883a 	add	r2,r4,r2
     4e4:	10800084 	addi	r2,r2,2
     4e8:	10c0000d 	sth	r3,0(r2)
        belFftPtr->Factors[i].M = *facbuf;
     4ec:	e0bff917 	ldw	r2,-28(fp)
     4f0:	10c0000b 	ldhu	r3,0(r2)
     4f4:	e13ffb17 	ldw	r4,-20(fp)
     4f8:	e0bffa17 	ldw	r2,-24(fp)
     4fc:	10800144 	addi	r2,r2,5
     500:	1085883a 	add	r2,r2,r2
     504:	1085883a 	add	r2,r2,r2
     508:	2085883a 	add	r2,r4,r2
     50c:	10c0000d 	sth	r3,0(r2)
        if (*facbuf++ == 1) {
     510:	e0bff917 	ldw	r2,-28(fp)
     514:	10c00084 	addi	r3,r2,2
     518:	e0fff915 	stw	r3,-28(fp)
     51c:	1080000b 	ldhu	r2,0(r2)
     520:	10bfffcc 	andi	r2,r2,65535
     524:	10a0001c 	xori	r2,r2,32768
     528:	10a00004 	addi	r2,r2,-32768
     52c:	10800058 	cmpnei	r2,r2,1
     530:	10000426 	beq	r2,zero,544 <kiss_fft_stride+0xf0>
            break;
        }
        i++;
     534:	e0bffa17 	ldw	r2,-24(fp)
     538:	10800044 	addi	r2,r2,1
     53c:	e0bffa15 	stw	r2,-24(fp)
    }
     540:	003fde06 	br	4bc <__alt_data_end+0xfffcf77c>
    i = 0;
    while (1) {
        belFftPtr->Factors[i].P = *facbuf++;
        belFftPtr->Factors[i].M = *facbuf;
        if (*facbuf++ == 1) {
            break;
     544:	0001883a 	nop

    /*
     * Flush the data cache for the source and destination region
     */
    
    alt_dcache_flush (fin, cfg->nfft * sizeof (kiss_fft_cpx));
     548:	e0bffc17 	ldw	r2,-16(fp)
     54c:	10800017 	ldw	r2,0(r2)
     550:	100490fa 	slli	r2,r2,3
     554:	100b883a 	mov	r5,r2
     558:	e13ffd17 	ldw	r4,-12(fp)
     55c:	000dc100 	call	dc10 <alt_dcache_flush>
    alt_dcache_flush (fout, cfg->nfft * sizeof (kiss_fft_cpx));
     560:	e0bffc17 	ldw	r2,-16(fp)
     564:	10800017 	ldw	r2,0(r2)
     568:	100490fa 	slli	r2,r2,3
     56c:	100b883a 	mov	r5,r2
     570:	e13ffe17 	ldw	r4,-8(fp)
     574:	000dc100 	call	dc10 <alt_dcache_flush>

    /*
     * Start the FFT
     */

    belFftPtr->Control.Start = 1;
     578:	e0bffb17 	ldw	r2,-20(fp)
     57c:	10c00017 	ldw	r3,0(r2)
     580:	18c00054 	ori	r3,r3,1
     584:	10c00015 	stw	r3,0(r2)
    /*
     * We poll the status register until the FFT is ready. Other implementations 
     * like generation an interrupt are possible.
     */

    while (! belFftPtr->Status.Int) {
     588:	0001883a 	nop
     58c:	e0bffb17 	ldw	r2,-20(fp)
     590:	10800117 	ldw	r2,4(r2)
     594:	1004917a 	slli	r2,r2,5
     598:	10803fcc 	andi	r2,r2,255
     59c:	1080201c 	xori	r2,r2,128
     5a0:	10bfe004 	addi	r2,r2,-128
     5a4:	1005d1fa 	srai	r2,r2,7
     5a8:	10803fcc 	andi	r2,r2,255
     5ac:	1080201c 	xori	r2,r2,128
     5b0:	10bfe004 	addi	r2,r2,-128
     5b4:	103ff526 	beq	r2,zero,58c <__alt_data_end+0xfffcf84c>
    }

}
     5b8:	0001883a 	nop
     5bc:	e037883a 	mov	sp,fp
     5c0:	dfc00117 	ldw	ra,4(sp)
     5c4:	df000017 	ldw	fp,0(sp)
     5c8:	dec00204 	addi	sp,sp,8
     5cc:	f800283a 	ret

000005d0 <kiss_fft>:


void kiss_fft (kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout)
{
     5d0:	defffb04 	addi	sp,sp,-20
     5d4:	dfc00415 	stw	ra,16(sp)
     5d8:	df000315 	stw	fp,12(sp)
     5dc:	df000304 	addi	fp,sp,12
     5e0:	e13ffd15 	stw	r4,-12(fp)
     5e4:	e17ffe15 	stw	r5,-8(fp)
     5e8:	e1bfff15 	stw	r6,-4(fp)
    kiss_fft_stride (cfg, fin, fout, 1);
     5ec:	01c00044 	movi	r7,1
     5f0:	e1bfff17 	ldw	r6,-4(fp)
     5f4:	e17ffe17 	ldw	r5,-8(fp)
     5f8:	e13ffd17 	ldw	r4,-12(fp)
     5fc:	00004540 	call	454 <kiss_fft_stride>
}
     600:	0001883a 	nop
     604:	e037883a 	mov	sp,fp
     608:	dfc00117 	ldw	ra,4(sp)
     60c:	df000017 	ldw	fp,0(sp)
     610:	dec00204 	addi	sp,sp,8
     614:	f800283a 	ret

00000618 <kiss_fft_cleanup>:

/*
 * Empty function, nothing to clean up
 */
void kiss_fft_cleanup (void)
{
     618:	deffff04 	addi	sp,sp,-4
     61c:	df000015 	stw	fp,0(sp)
     620:	d839883a 	mov	fp,sp
}
     624:	0001883a 	nop
     628:	e037883a 	mov	sp,fp
     62c:	df000017 	ldw	fp,0(sp)
     630:	dec00104 	addi	sp,sp,4
     634:	f800283a 	ret

00000638 <main>:
};
//
// =========================================================================================
//

int main(void) {
     638:	defffe04 	addi	sp,sp,-8
     63c:	dfc00115 	stw	ra,4(sp)
     640:	df000015 	stw	fp,0(sp)
     644:	d839883a 	mov	fp,sp
	OSInit(); // initialize ucos-ii
     648:	000f0300 	call	f030 <OSInit>
	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
     64c:	01c00144 	movi	r7,5
     650:	018000b4 	movhi	r6,2
     654:	318a2604 	addi	r6,r6,10392
     658:	000b883a 	mov	r5,zero
     65c:	01000034 	movhi	r4,0
     660:	2101a104 	addi	r4,r4,1668
     664:	001482c0 	call	1482c <OSTaskCreate>
	OSStart(); // start multitasking
     668:	000f3340 	call	f334 <OSStart>
	return 0; // never executed
     66c:	0005883a 	mov	r2,zero
}
     670:	e037883a 	mov	sp,fp
     674:	dfc00117 	ldw	ra,4(sp)
     678:	df000017 	ldw	fp,0(sp)
     67c:	dec00204 	addi	sp,sp,8
     680:	f800283a 	ret

00000684 <TaskStart>:

void TaskStart(void *pdata) {
     684:	defffd04 	addi	sp,sp,-12
     688:	dfc00215 	stw	ra,8(sp)
     68c:	df000115 	stw	fp,4(sp)
     690:	df000104 	addi	fp,sp,4
     694:	e13fff15 	stw	r4,-4(fp)
//	Bel_FFT_Init(); // wordt gedaan in TaskFFT (?)

//    OSTaskCreate(TaskADCToFFT, (void *) 0, &TaskADCToFFTStack[TASK_STACKSIZE - 1], 6); // create new task
    OSTaskCreate(TaskFFT, (void *) 0, &TaskFFTStack[TASK_STACKSIZE - 1], 6); // create new task
     698:	01c00184 	movi	r7,6
     69c:	018000b4 	movhi	r6,2
     6a0:	31822604 	addi	r6,r6,2200
     6a4:	000b883a 	mov	r5,zero
     6a8:	01000034 	movhi	r4,0
     6ac:	2101b004 	addi	r4,r4,1728
     6b0:	001482c0 	call	1482c <OSTaskCreate>

    while (1) {
        OSTimeDly(100);
     6b4:	01001904 	movi	r4,100
     6b8:	0015aa80 	call	15aa8 <OSTimeDly>
    }
     6bc:	003ffd06 	br	6b4 <__alt_data_end+0xfffcf974>

000006c0 <TaskFFT>:
}

void TaskFFT(void* pdata) {
     6c0:	defbfb04 	addi	sp,sp,-4116
     6c4:	dfc40415 	stw	ra,4112(sp)
     6c8:	df040315 	stw	fp,4108(sp)
     6cc:	df040304 	addi	fp,sp,4108
     6d0:	e13fff15 	stw	r4,-4(fp)
	kiss_fft_cfg cfg;
#if 0
	kiss_fft_cpx fin[FFT_LEN];
#else
	kiss_fft_cpx fin[FFT_LEN] = { // test input
     6d4:	008000b4 	movhi	r2,2
     6d8:	10a11904 	addi	r2,r2,-31644
     6dc:	e0fbff04 	addi	r3,fp,-4100
     6e0:	1009883a 	mov	r4,r2
     6e4:	00820004 	movi	r2,2048
     6e8:	100d883a 	mov	r6,r2
     6ec:	200b883a 	mov	r5,r4
     6f0:	1809883a 	mov	r4,r3
     6f4:	000141c0 	call	141c <memcpy>
	int i;

	/*
	 * Initialize the destination memory area to see that the FFT has actually calculated something.
	 */
	for (i = 0; i < FFT_LEN; i++) {
     6f8:	e03bfd15 	stw	zero,-4108(fp)
     6fc:	00001306 	br	74c <TaskFFT+0x8c>
	    fout[i].i = 0xDEADDEAD;
     700:	e0bbfd17 	ldw	r2,-4108(fp)
     704:	100490fa 	slli	r2,r2,3
     708:	e0fbfd04 	addi	r3,fp,-4108
     70c:	1885883a 	add	r2,r3,r2
     710:	10c20304 	addi	r3,r2,2060
     714:	00b7abb4 	movhi	r2,57006
     718:	10b7ab44 	addi	r2,r2,-8531
     71c:	18800015 	stw	r2,0(r3)
	    fout[i].r = 0xDEADDEAD;
     720:	e0bbfd17 	ldw	r2,-4108(fp)
     724:	100490fa 	slli	r2,r2,3
     728:	e13bfd04 	addi	r4,fp,-4108
     72c:	2085883a 	add	r2,r4,r2
     730:	10c20204 	addi	r3,r2,2056
     734:	00b7abb4 	movhi	r2,57006
     738:	10b7ab44 	addi	r2,r2,-8531
     73c:	18800015 	stw	r2,0(r3)
	int i;

	/*
	 * Initialize the destination memory area to see that the FFT has actually calculated something.
	 */
	for (i = 0; i < FFT_LEN; i++) {
     740:	e0bbfd17 	ldw	r2,-4108(fp)
     744:	10800044 	addi	r2,r2,1
     748:	e0bbfd15 	stw	r2,-4108(fp)
     74c:	e0bbfd17 	ldw	r2,-4108(fp)
     750:	10804010 	cmplti	r2,r2,256
     754:	103fea1e 	bne	r2,zero,700 <__alt_data_end+0xfffcf9c0>
	    fout[i].i = 0xDEADDEAD;
	    fout[i].r = 0xDEADDEAD;
	}

	cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
     758:	000f883a 	mov	r7,zero
     75c:	000d883a 	mov	r6,zero
     760:	000b883a 	mov	r5,zero
     764:	01004004 	movi	r4,256
     768:	000040c0 	call	40c <kiss_fft_alloc>
     76c:	e0bbfe15 	stw	r2,-4104(fp)
	if (! cfg) {
     770:	e0bbfe17 	ldw	r2,-4104(fp)
     774:	1000041e 	bne	r2,zero,788 <TaskFFT+0xc8>
		printf ("Error: Cannot allocate memory for FFT control structure.\n");
     778:	010000b4 	movhi	r4,2
     77c:	21210704 	addi	r4,r4,-31716
     780:	00017d80 	call	17d8 <puts>
	    return;
     784:	00002006 	br	808 <TaskFFT+0x148>
	}

	kiss_fft (cfg, fin, fout); // startup
     788:	e0fdff04 	addi	r3,fp,-2052
     78c:	e0bbff04 	addi	r2,fp,-4100
     790:	180d883a 	mov	r6,r3
     794:	100b883a 	mov	r5,r2
     798:	e13bfe17 	ldw	r4,-4104(fp)
     79c:	00005d00 	call	5d0 <kiss_fft>

	/*
	 *  Print out the FFT result.
	 */
	for (i = 0; i < FFT_LEN; i++) {
     7a0:	e03bfd15 	stw	zero,-4108(fp)
     7a4:	00001406 	br	7f8 <TaskFFT+0x138>
		printf ("%X - %X\n", (int) fout[i].r, (int) fout[i].i); // uitlezen real - imaginary (met pythagoras?)
     7a8:	e0bbfd17 	ldw	r2,-4108(fp)
     7ac:	100490fa 	slli	r2,r2,3
     7b0:	e0fbfd04 	addi	r3,fp,-4108
     7b4:	1885883a 	add	r2,r3,r2
     7b8:	10820204 	addi	r2,r2,2056
     7bc:	10c00017 	ldw	r3,0(r2)
     7c0:	e0bbfd17 	ldw	r2,-4108(fp)
     7c4:	100490fa 	slli	r2,r2,3
     7c8:	e13bfd04 	addi	r4,fp,-4108
     7cc:	2085883a 	add	r2,r4,r2
     7d0:	10820304 	addi	r2,r2,2060
     7d4:	10800017 	ldw	r2,0(r2)
     7d8:	100d883a 	mov	r6,r2
     7dc:	180b883a 	mov	r5,r3
     7e0:	010000b4 	movhi	r4,2
     7e4:	21211604 	addi	r4,r4,-31656
     7e8:	00016bc0 	call	16bc <printf>
	kiss_fft (cfg, fin, fout); // startup

	/*
	 *  Print out the FFT result.
	 */
	for (i = 0; i < FFT_LEN; i++) {
     7ec:	e0bbfd17 	ldw	r2,-4108(fp)
     7f0:	10800044 	addi	r2,r2,1
     7f4:	e0bbfd15 	stw	r2,-4108(fp)
     7f8:	e0bbfd17 	ldw	r2,-4108(fp)
     7fc:	10804010 	cmplti	r2,r2,256
     800:	103fe91e 	bne	r2,zero,7a8 <__alt_data_end+0xfffcfa68>
		printf ("%X - %X\n", (int) fout[i].r, (int) fout[i].i); // uitlezen real - imaginary (met pythagoras?)
	}

	while (1) {

	}
     804:	003fff06 	br	804 <__alt_data_end+0xfffcfac4>
}
     808:	e037883a 	mov	sp,fp
     80c:	dfc00117 	ldw	ra,4(sp)
     810:	df000017 	ldw	fp,0(sp)
     814:	dec00204 	addi	sp,sp,8
     818:	f800283a 	ret

0000081c <TaskADCToFFT>:

void TaskADCToFFT(void* pdata) {
     81c:	defff904 	addi	sp,sp,-28
     820:	dfc00615 	stw	ra,24(sp)
     824:	df000515 	stw	fp,20(sp)
     828:	df000504 	addi	fp,sp,20
     82c:	e13fff15 	stw	r4,-4(fp)
	volatile int * adc = (int*)(ADC_ADDR);
     830:	00800134 	movhi	r2,4
     834:	10881004 	addi	r2,r2,8256
     838:	e0bffd15 	stw	r2,-12(fp)
//	volatile int * led = (int*)(LED_ADDR);
	unsigned int data;
	int count;
	int channel;
	data = 0;
     83c:	e03ffe15 	stw	zero,-8(fp)
	count = 0;
     840:	e03ffb15 	stw	zero,-20(fp)
	channel = 0;
     844:	e03ffc15 	stw	zero,-16(fp)

	while (1) {
//		printf("y"); // debug
		OSTimeDlyHMSM(0,0,0,100);
     848:	01c01904 	movi	r7,100
     84c:	000d883a 	mov	r6,zero
     850:	000b883a 	mov	r5,zero
     854:	0009883a 	mov	r4,zero
     858:	0015bac0 	call	15bac <OSTimeDlyHMSM>
#if 1
		*(adc) = 0; //Start the ADC read
     85c:	e0bffd17 	ldw	r2,-12(fp)
     860:	10000015 	stw	zero,0(r2)
		count += 1;
     864:	e0bffb17 	ldw	r2,-20(fp)
     868:	10800044 	addi	r2,r2,1
     86c:	e0bffb15 	stw	r2,-20(fp)
		data = *(adc+channel); //Get the value of the selected channel
     870:	e0bffc17 	ldw	r2,-16(fp)
     874:	1085883a 	add	r2,r2,r2
     878:	1085883a 	add	r2,r2,r2
     87c:	1007883a 	mov	r3,r2
     880:	e0bffd17 	ldw	r2,-12(fp)
     884:	10c5883a 	add	r2,r2,r3
     888:	10800017 	ldw	r2,0(r2)
     88c:	e0bffe15 	stw	r2,-8(fp)
		data = data/16; //Ignore the lowest 4 bits (origineel 12 bits)
     890:	e0bffe17 	ldw	r2,-8(fp)
     894:	1004d13a 	srli	r2,r2,4
     898:	e0bffe15 	stw	r2,-8(fp)
//		*(led) = data; //Display the value on the LEDs // later: verstuur data naar fft
		printf("%d ", data);
     89c:	e17ffe17 	ldw	r5,-8(fp)
     8a0:	010000b4 	movhi	r4,2
     8a4:	21231904 	addi	r4,r4,-29596
     8a8:	00016bc0 	call	16bc <printf>
		if (count==12){
     8ac:	e0bffb17 	ldw	r2,-20(fp)
     8b0:	10800318 	cmpnei	r2,r2,12
     8b4:	103fe41e 	bne	r2,zero,848 <__alt_data_end+0xfffcfb08>
			count = 0;
     8b8:	e03ffb15 	stw	zero,-20(fp)
			channel = !channel;
     8bc:	e0bffc17 	ldw	r2,-16(fp)
     8c0:	1005003a 	cmpeq	r2,r2,zero
     8c4:	10803fcc 	andi	r2,r2,255
     8c8:	e0bffc15 	stw	r2,-16(fp)
			printf("\n");
     8cc:	01000284 	movi	r4,10
     8d0:	00017000 	call	1700 <putchar>
		}
#endif
	}
     8d4:	003fdc06 	br	848 <__alt_data_end+0xfffcfb08>

000008d8 <Bel_FFT_Init>:
}

int Bel_FFT_Init(void) {
     8d8:	defbfb04 	addi	sp,sp,-4116
     8dc:	dfc40415 	stw	ra,4112(sp)
     8e0:	df040315 	stw	fp,4108(sp)
     8e4:	df040304 	addi	fp,sp,4108
	// FFT_BASE is the base address of the FFT co-processor. Set bit 31 to bypass the cache on the NIOSII.

	volatile struct bel_fft * belFftPtr = (struct bel_fft *) (FFT_BASE + 0x80000000);
     8e8:	00a04034 	movhi	r2,33024
     8ec:	10940004 	addi	r2,r2,20480
     8f0:	e0bbff15 	stw	r2,-4100(fp)

	int fin[FFT_LEN * 2] = {
     8f4:	e0bc0004 	addi	r2,fp,-4096
     8f8:	00c20004 	movi	r3,2048
     8fc:	180d883a 	mov	r6,r3
     900:	000b883a 	mov	r5,zero
     904:	1009883a 	mov	r4,r2
     908:	00015640 	call	1564 <memset>
     90c:	008af444 	movi	r2,11217
     910:	e0bc0215 	stw	r2,-4088(fp)
     914:	00903a04 	movi	r2,16616
     918:	e0bc0415 	stw	r2,-4080(fp)
     91c:	008d7384 	movi	r2,13774
     920:	e0bc0615 	stw	r2,-4072(fp)
		0x000040E8, 0x00000000, 0x000035CE, 0x00000000 // ...
	};

	int fout[FFT_LEN * 2];

	belFftPtr->Finadr = fin;
     924:	e0bbff17 	ldw	r2,-4100(fp)
     928:	e0fc0004 	addi	r3,fp,-4096
     92c:	10c00315 	stw	r3,12(r2)

	belFftPtr->Foutadr = fout;
     930:	e0bbff17 	ldw	r2,-4100(fp)
     934:	e0fe0004 	addi	r3,fp,-2048
     938:	10c00415 	stw	r3,16(r2)

	belFftPtr->Factors[0].M = 64;	// geen idee
     93c:	e0bbff17 	ldw	r2,-4100(fp)
     940:	00c01004 	movi	r3,64
     944:	10c0050d 	sth	r3,20(r2)
	belFftPtr->Factors[0].P = 4;	// geen idee
     948:	e0bbff17 	ldw	r2,-4100(fp)
     94c:	00c00104 	movi	r3,4
     950:	10c0058d 	sth	r3,22(r2)
	belFftPtr->Factors[1].M = 16;	// geen idee
     954:	e0bbff17 	ldw	r2,-4100(fp)
     958:	00c00404 	movi	r3,16
     95c:	10c0060d 	sth	r3,24(r2)
	belFftPtr->Factors[1].P = 4;	// geen idee
     960:	e0bbff17 	ldw	r2,-4100(fp)
     964:	00c00104 	movi	r3,4
     968:	10c0068d 	sth	r3,26(r2)
	belFftPtr->Factors[2].M = 4;	// geen idee
     96c:	e0bbff17 	ldw	r2,-4100(fp)
     970:	00c00104 	movi	r3,4
     974:	10c0070d 	sth	r3,28(r2)
	belFftPtr->Factors[2].P = 4;	// geen idee
     978:	e0bbff17 	ldw	r2,-4100(fp)
     97c:	00c00104 	movi	r3,4
     980:	10c0078d 	sth	r3,30(r2)
	belFftPtr->Factors[3].M = 1;	// geen idee
     984:	e0bbff17 	ldw	r2,-4100(fp)
     988:	00c00044 	movi	r3,1
     98c:	10c0080d 	sth	r3,32(r2)
	belFftPtr->Factors[3].P = 4;	// geen idee
     990:	e0bbff17 	ldw	r2,-4100(fp)
     994:	00c00104 	movi	r3,4
     998:	10c0088d 	sth	r3,34(r2)

	belFftPtr->Control.Start = 1;
     99c:	e0bbff17 	ldw	r2,-4100(fp)
     9a0:	10c00017 	ldw	r3,0(r2)
     9a4:	18c00054 	ori	r3,r3,1
     9a8:	10c00015 	stw	r3,0(r2)

#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     9ac:	00800044 	movi	r2,1
     9b0:	e0bbfd15 	stw	r2,-4108(fp)
     9b4:	00000c06 	br	9e8 <Bel_FFT_Init+0x110>
		for (int d=1; d<=32767; d++) {}
     9b8:	00800044 	movi	r2,1
     9bc:	e0bbfe15 	stw	r2,-4104(fp)
     9c0:	00000306 	br	9d0 <Bel_FFT_Init+0xf8>
     9c4:	e0bbfe17 	ldw	r2,-4104(fp)
     9c8:	10800044 	addi	r2,r2,1
     9cc:	e0bbfe15 	stw	r2,-4104(fp)
     9d0:	e0bbfe17 	ldw	r2,-4104(fp)
     9d4:	00dfffc4 	movi	r3,32767
     9d8:	18bffa0e 	bge	r3,r2,9c4 <__alt_data_end+0xfffcfc84>
	belFftPtr->Control.Start = 1;

#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     9dc:	e0bbfd17 	ldw	r2,-4108(fp)
     9e0:	10800044 	addi	r2,r2,1
     9e4:	e0bbfd15 	stw	r2,-4108(fp)
     9e8:	e0bbfd17 	ldw	r2,-4108(fp)
     9ec:	00dfffc4 	movi	r3,32767
     9f0:	18bff10e 	bge	r3,r2,9b8 <__alt_data_end+0xfffcfc78>
		for (int d=1; d<=32767; d++) {}
#endif
	return 0;
     9f4:	0005883a 	mov	r2,zero
}
     9f8:	e037883a 	mov	sp,fp
     9fc:	dfc00117 	ldw	ra,4(sp)
     a00:	df000017 	ldw	fp,0(sp)
     a04:	dec00204 	addi	sp,sp,8
     a08:	f800283a 	ret

00000a0c <__divsi3>:
     a0c:	20001b16 	blt	r4,zero,a7c <__divsi3+0x70>
     a10:	000f883a 	mov	r7,zero
     a14:	28001616 	blt	r5,zero,a70 <__divsi3+0x64>
     a18:	200d883a 	mov	r6,r4
     a1c:	29001a2e 	bgeu	r5,r4,a88 <__divsi3+0x7c>
     a20:	00800804 	movi	r2,32
     a24:	00c00044 	movi	r3,1
     a28:	00000106 	br	a30 <__divsi3+0x24>
     a2c:	10000d26 	beq	r2,zero,a64 <__divsi3+0x58>
     a30:	294b883a 	add	r5,r5,r5
     a34:	10bfffc4 	addi	r2,r2,-1
     a38:	18c7883a 	add	r3,r3,r3
     a3c:	293ffb36 	bltu	r5,r4,a2c <__alt_data_end+0xfffcfcec>
     a40:	0005883a 	mov	r2,zero
     a44:	18000726 	beq	r3,zero,a64 <__divsi3+0x58>
     a48:	0005883a 	mov	r2,zero
     a4c:	31400236 	bltu	r6,r5,a58 <__divsi3+0x4c>
     a50:	314dc83a 	sub	r6,r6,r5
     a54:	10c4b03a 	or	r2,r2,r3
     a58:	1806d07a 	srli	r3,r3,1
     a5c:	280ad07a 	srli	r5,r5,1
     a60:	183ffa1e 	bne	r3,zero,a4c <__alt_data_end+0xfffcfd0c>
     a64:	38000126 	beq	r7,zero,a6c <__divsi3+0x60>
     a68:	0085c83a 	sub	r2,zero,r2
     a6c:	f800283a 	ret
     a70:	014bc83a 	sub	r5,zero,r5
     a74:	39c0005c 	xori	r7,r7,1
     a78:	003fe706 	br	a18 <__alt_data_end+0xfffcfcd8>
     a7c:	0109c83a 	sub	r4,zero,r4
     a80:	01c00044 	movi	r7,1
     a84:	003fe306 	br	a14 <__alt_data_end+0xfffcfcd4>
     a88:	00c00044 	movi	r3,1
     a8c:	003fee06 	br	a48 <__alt_data_end+0xfffcfd08>

00000a90 <__modsi3>:
     a90:	20001716 	blt	r4,zero,af0 <__modsi3+0x60>
     a94:	000f883a 	mov	r7,zero
     a98:	2005883a 	mov	r2,r4
     a9c:	28001216 	blt	r5,zero,ae8 <__modsi3+0x58>
     aa0:	2900162e 	bgeu	r5,r4,afc <__modsi3+0x6c>
     aa4:	01800804 	movi	r6,32
     aa8:	00c00044 	movi	r3,1
     aac:	00000106 	br	ab4 <__modsi3+0x24>
     ab0:	30000a26 	beq	r6,zero,adc <__modsi3+0x4c>
     ab4:	294b883a 	add	r5,r5,r5
     ab8:	31bfffc4 	addi	r6,r6,-1
     abc:	18c7883a 	add	r3,r3,r3
     ac0:	293ffb36 	bltu	r5,r4,ab0 <__alt_data_end+0xfffcfd70>
     ac4:	18000526 	beq	r3,zero,adc <__modsi3+0x4c>
     ac8:	1806d07a 	srli	r3,r3,1
     acc:	11400136 	bltu	r2,r5,ad4 <__modsi3+0x44>
     ad0:	1145c83a 	sub	r2,r2,r5
     ad4:	280ad07a 	srli	r5,r5,1
     ad8:	183ffb1e 	bne	r3,zero,ac8 <__alt_data_end+0xfffcfd88>
     adc:	38000126 	beq	r7,zero,ae4 <__modsi3+0x54>
     ae0:	0085c83a 	sub	r2,zero,r2
     ae4:	f800283a 	ret
     ae8:	014bc83a 	sub	r5,zero,r5
     aec:	003fec06 	br	aa0 <__alt_data_end+0xfffcfd60>
     af0:	0109c83a 	sub	r4,zero,r4
     af4:	01c00044 	movi	r7,1
     af8:	003fe706 	br	a98 <__alt_data_end+0xfffcfd58>
     afc:	00c00044 	movi	r3,1
     b00:	003ff106 	br	ac8 <__alt_data_end+0xfffcfd88>

00000b04 <__udivsi3>:
     b04:	200d883a 	mov	r6,r4
     b08:	2900152e 	bgeu	r5,r4,b60 <__udivsi3+0x5c>
     b0c:	28001416 	blt	r5,zero,b60 <__udivsi3+0x5c>
     b10:	00800804 	movi	r2,32
     b14:	00c00044 	movi	r3,1
     b18:	00000206 	br	b24 <__udivsi3+0x20>
     b1c:	10000e26 	beq	r2,zero,b58 <__udivsi3+0x54>
     b20:	28000516 	blt	r5,zero,b38 <__udivsi3+0x34>
     b24:	294b883a 	add	r5,r5,r5
     b28:	10bfffc4 	addi	r2,r2,-1
     b2c:	18c7883a 	add	r3,r3,r3
     b30:	293ffa36 	bltu	r5,r4,b1c <__alt_data_end+0xfffcfddc>
     b34:	18000826 	beq	r3,zero,b58 <__udivsi3+0x54>
     b38:	0005883a 	mov	r2,zero
     b3c:	31400236 	bltu	r6,r5,b48 <__udivsi3+0x44>
     b40:	314dc83a 	sub	r6,r6,r5
     b44:	10c4b03a 	or	r2,r2,r3
     b48:	1806d07a 	srli	r3,r3,1
     b4c:	280ad07a 	srli	r5,r5,1
     b50:	183ffa1e 	bne	r3,zero,b3c <__alt_data_end+0xfffcfdfc>
     b54:	f800283a 	ret
     b58:	0005883a 	mov	r2,zero
     b5c:	f800283a 	ret
     b60:	00c00044 	movi	r3,1
     b64:	003ff406 	br	b38 <__alt_data_end+0xfffcfdf8>

00000b68 <__umodsi3>:
     b68:	2005883a 	mov	r2,r4
     b6c:	2900122e 	bgeu	r5,r4,bb8 <__umodsi3+0x50>
     b70:	28001116 	blt	r5,zero,bb8 <__umodsi3+0x50>
     b74:	01800804 	movi	r6,32
     b78:	00c00044 	movi	r3,1
     b7c:	00000206 	br	b88 <__umodsi3+0x20>
     b80:	30000c26 	beq	r6,zero,bb4 <__umodsi3+0x4c>
     b84:	28000516 	blt	r5,zero,b9c <__umodsi3+0x34>
     b88:	294b883a 	add	r5,r5,r5
     b8c:	31bfffc4 	addi	r6,r6,-1
     b90:	18c7883a 	add	r3,r3,r3
     b94:	293ffa36 	bltu	r5,r4,b80 <__alt_data_end+0xfffcfe40>
     b98:	18000626 	beq	r3,zero,bb4 <__umodsi3+0x4c>
     b9c:	1806d07a 	srli	r3,r3,1
     ba0:	11400136 	bltu	r2,r5,ba8 <__umodsi3+0x40>
     ba4:	1145c83a 	sub	r2,r2,r5
     ba8:	280ad07a 	srli	r5,r5,1
     bac:	183ffb1e 	bne	r3,zero,b9c <__alt_data_end+0xfffcfe5c>
     bb0:	f800283a 	ret
     bb4:	f800283a 	ret
     bb8:	00c00044 	movi	r3,1
     bbc:	003ff706 	br	b9c <__alt_data_end+0xfffcfe5c>

00000bc0 <__mulsi3>:
     bc0:	0005883a 	mov	r2,zero
     bc4:	20000726 	beq	r4,zero,be4 <__mulsi3+0x24>
     bc8:	20c0004c 	andi	r3,r4,1
     bcc:	2008d07a 	srli	r4,r4,1
     bd0:	18000126 	beq	r3,zero,bd8 <__mulsi3+0x18>
     bd4:	1145883a 	add	r2,r2,r5
     bd8:	294b883a 	add	r5,r5,r5
     bdc:	203ffa1e 	bne	r4,zero,bc8 <__alt_data_end+0xfffcfe88>
     be0:	f800283a 	ret
     be4:	f800283a 	ret

00000be8 <malloc>:
     be8:	008000b4 	movhi	r2,2
     bec:	10aae204 	addi	r2,r2,-21624
     bf0:	200b883a 	mov	r5,r4
     bf4:	11000017 	ldw	r4,0(r2)
     bf8:	0000c101 	jmpi	c10 <_malloc_r>

00000bfc <free>:
     bfc:	008000b4 	movhi	r2,2
     c00:	10aae204 	addi	r2,r2,-21624
     c04:	200b883a 	mov	r5,r4
     c08:	11000017 	ldw	r4,0(r2)
     c0c:	0005e0c1 	jmpi	5e0c <_free_r>

00000c10 <_malloc_r>:
     c10:	defff504 	addi	sp,sp,-44
     c14:	dc800315 	stw	r18,12(sp)
     c18:	dfc00a15 	stw	ra,40(sp)
     c1c:	df000915 	stw	fp,36(sp)
     c20:	ddc00815 	stw	r23,32(sp)
     c24:	dd800715 	stw	r22,28(sp)
     c28:	dd400615 	stw	r21,24(sp)
     c2c:	dd000515 	stw	r20,20(sp)
     c30:	dcc00415 	stw	r19,16(sp)
     c34:	dc400215 	stw	r17,8(sp)
     c38:	dc000115 	stw	r16,4(sp)
     c3c:	288002c4 	addi	r2,r5,11
     c40:	00c00584 	movi	r3,22
     c44:	2025883a 	mov	r18,r4
     c48:	18807f2e 	bgeu	r3,r2,e48 <_malloc_r+0x238>
     c4c:	047ffe04 	movi	r17,-8
     c50:	1462703a 	and	r17,r2,r17
     c54:	8800a316 	blt	r17,zero,ee4 <_malloc_r+0x2d4>
     c58:	8940a236 	bltu	r17,r5,ee4 <_malloc_r+0x2d4>
     c5c:	000e5d40 	call	e5d4 <__malloc_lock>
     c60:	00807dc4 	movi	r2,503
     c64:	1441e92e 	bgeu	r2,r17,140c <_malloc_r+0x7fc>
     c68:	8804d27a 	srli	r2,r17,9
     c6c:	1000a126 	beq	r2,zero,ef4 <_malloc_r+0x2e4>
     c70:	00c00104 	movi	r3,4
     c74:	18811e36 	bltu	r3,r2,10f0 <_malloc_r+0x4e0>
     c78:	8804d1ba 	srli	r2,r17,6
     c7c:	12000e44 	addi	r8,r2,57
     c80:	11c00e04 	addi	r7,r2,56
     c84:	4209883a 	add	r4,r8,r8
     c88:	04c000b4 	movhi	r19,2
     c8c:	2109883a 	add	r4,r4,r4
     c90:	9ce42604 	addi	r19,r19,-28520
     c94:	2109883a 	add	r4,r4,r4
     c98:	9909883a 	add	r4,r19,r4
     c9c:	24000117 	ldw	r16,4(r4)
     ca0:	213ffe04 	addi	r4,r4,-8
     ca4:	24009726 	beq	r4,r16,f04 <_malloc_r+0x2f4>
     ca8:	80800117 	ldw	r2,4(r16)
     cac:	01bfff04 	movi	r6,-4
     cb0:	014003c4 	movi	r5,15
     cb4:	1184703a 	and	r2,r2,r6
     cb8:	1447c83a 	sub	r3,r2,r17
     cbc:	28c00716 	blt	r5,r3,cdc <_malloc_r+0xcc>
     cc0:	1800920e 	bge	r3,zero,f0c <_malloc_r+0x2fc>
     cc4:	84000317 	ldw	r16,12(r16)
     cc8:	24008e26 	beq	r4,r16,f04 <_malloc_r+0x2f4>
     ccc:	80800117 	ldw	r2,4(r16)
     cd0:	1184703a 	and	r2,r2,r6
     cd4:	1447c83a 	sub	r3,r2,r17
     cd8:	28fff90e 	bge	r5,r3,cc0 <__alt_data_end+0xfffcff80>
     cdc:	3809883a 	mov	r4,r7
     ce0:	018000b4 	movhi	r6,2
     ce4:	9c000417 	ldw	r16,16(r19)
     ce8:	31a42604 	addi	r6,r6,-28520
     cec:	32000204 	addi	r8,r6,8
     cf0:	82013426 	beq	r16,r8,11c4 <_malloc_r+0x5b4>
     cf4:	80c00117 	ldw	r3,4(r16)
     cf8:	00bfff04 	movi	r2,-4
     cfc:	188e703a 	and	r7,r3,r2
     d00:	3c45c83a 	sub	r2,r7,r17
     d04:	00c003c4 	movi	r3,15
     d08:	18811f16 	blt	r3,r2,1188 <_malloc_r+0x578>
     d0c:	32000515 	stw	r8,20(r6)
     d10:	32000415 	stw	r8,16(r6)
     d14:	10007f0e 	bge	r2,zero,f14 <_malloc_r+0x304>
     d18:	00807fc4 	movi	r2,511
     d1c:	11c0fd36 	bltu	r2,r7,1114 <_malloc_r+0x504>
     d20:	3806d0fa 	srli	r3,r7,3
     d24:	01c00044 	movi	r7,1
     d28:	30800117 	ldw	r2,4(r6)
     d2c:	19400044 	addi	r5,r3,1
     d30:	294b883a 	add	r5,r5,r5
     d34:	1807d0ba 	srai	r3,r3,2
     d38:	294b883a 	add	r5,r5,r5
     d3c:	294b883a 	add	r5,r5,r5
     d40:	298b883a 	add	r5,r5,r6
     d44:	38c6983a 	sll	r3,r7,r3
     d48:	29c00017 	ldw	r7,0(r5)
     d4c:	2a7ffe04 	addi	r9,r5,-8
     d50:	1886b03a 	or	r3,r3,r2
     d54:	82400315 	stw	r9,12(r16)
     d58:	81c00215 	stw	r7,8(r16)
     d5c:	30c00115 	stw	r3,4(r6)
     d60:	2c000015 	stw	r16,0(r5)
     d64:	3c000315 	stw	r16,12(r7)
     d68:	2005d0ba 	srai	r2,r4,2
     d6c:	01400044 	movi	r5,1
     d70:	288a983a 	sll	r5,r5,r2
     d74:	19406f36 	bltu	r3,r5,f34 <_malloc_r+0x324>
     d78:	28c4703a 	and	r2,r5,r3
     d7c:	10000a1e 	bne	r2,zero,da8 <_malloc_r+0x198>
     d80:	00bfff04 	movi	r2,-4
     d84:	294b883a 	add	r5,r5,r5
     d88:	2088703a 	and	r4,r4,r2
     d8c:	28c4703a 	and	r2,r5,r3
     d90:	21000104 	addi	r4,r4,4
     d94:	1000041e 	bne	r2,zero,da8 <_malloc_r+0x198>
     d98:	294b883a 	add	r5,r5,r5
     d9c:	28c4703a 	and	r2,r5,r3
     da0:	21000104 	addi	r4,r4,4
     da4:	103ffc26 	beq	r2,zero,d98 <__alt_data_end+0xfffd0058>
     da8:	02bfff04 	movi	r10,-4
     dac:	024003c4 	movi	r9,15
     db0:	21800044 	addi	r6,r4,1
     db4:	318d883a 	add	r6,r6,r6
     db8:	318d883a 	add	r6,r6,r6
     dbc:	318d883a 	add	r6,r6,r6
     dc0:	998d883a 	add	r6,r19,r6
     dc4:	333ffe04 	addi	r12,r6,-8
     dc8:	2017883a 	mov	r11,r4
     dcc:	31800104 	addi	r6,r6,4
     dd0:	34000017 	ldw	r16,0(r6)
     dd4:	31fffd04 	addi	r7,r6,-12
     dd8:	81c0041e 	bne	r16,r7,dec <_malloc_r+0x1dc>
     ddc:	0000fb06 	br	11cc <_malloc_r+0x5bc>
     de0:	1801030e 	bge	r3,zero,11f0 <_malloc_r+0x5e0>
     de4:	84000317 	ldw	r16,12(r16)
     de8:	81c0f826 	beq	r16,r7,11cc <_malloc_r+0x5bc>
     dec:	80800117 	ldw	r2,4(r16)
     df0:	1284703a 	and	r2,r2,r10
     df4:	1447c83a 	sub	r3,r2,r17
     df8:	48fff90e 	bge	r9,r3,de0 <__alt_data_end+0xfffd00a0>
     dfc:	80800317 	ldw	r2,12(r16)
     e00:	81000217 	ldw	r4,8(r16)
     e04:	89400054 	ori	r5,r17,1
     e08:	81400115 	stw	r5,4(r16)
     e0c:	20800315 	stw	r2,12(r4)
     e10:	11000215 	stw	r4,8(r2)
     e14:	8463883a 	add	r17,r16,r17
     e18:	9c400515 	stw	r17,20(r19)
     e1c:	9c400415 	stw	r17,16(r19)
     e20:	18800054 	ori	r2,r3,1
     e24:	88800115 	stw	r2,4(r17)
     e28:	8a000315 	stw	r8,12(r17)
     e2c:	8a000215 	stw	r8,8(r17)
     e30:	88e3883a 	add	r17,r17,r3
     e34:	88c00015 	stw	r3,0(r17)
     e38:	9009883a 	mov	r4,r18
     e3c:	000e6f40 	call	e6f4 <__malloc_unlock>
     e40:	80800204 	addi	r2,r16,8
     e44:	00001b06 	br	eb4 <_malloc_r+0x2a4>
     e48:	04400404 	movi	r17,16
     e4c:	89402536 	bltu	r17,r5,ee4 <_malloc_r+0x2d4>
     e50:	000e5d40 	call	e5d4 <__malloc_lock>
     e54:	00800184 	movi	r2,6
     e58:	01000084 	movi	r4,2
     e5c:	04c000b4 	movhi	r19,2
     e60:	1085883a 	add	r2,r2,r2
     e64:	9ce42604 	addi	r19,r19,-28520
     e68:	1085883a 	add	r2,r2,r2
     e6c:	9885883a 	add	r2,r19,r2
     e70:	14000117 	ldw	r16,4(r2)
     e74:	10fffe04 	addi	r3,r2,-8
     e78:	80c0d926 	beq	r16,r3,11e0 <_malloc_r+0x5d0>
     e7c:	80c00117 	ldw	r3,4(r16)
     e80:	81000317 	ldw	r4,12(r16)
     e84:	00bfff04 	movi	r2,-4
     e88:	1884703a 	and	r2,r3,r2
     e8c:	81400217 	ldw	r5,8(r16)
     e90:	8085883a 	add	r2,r16,r2
     e94:	10c00117 	ldw	r3,4(r2)
     e98:	29000315 	stw	r4,12(r5)
     e9c:	21400215 	stw	r5,8(r4)
     ea0:	18c00054 	ori	r3,r3,1
     ea4:	10c00115 	stw	r3,4(r2)
     ea8:	9009883a 	mov	r4,r18
     eac:	000e6f40 	call	e6f4 <__malloc_unlock>
     eb0:	80800204 	addi	r2,r16,8
     eb4:	dfc00a17 	ldw	ra,40(sp)
     eb8:	df000917 	ldw	fp,36(sp)
     ebc:	ddc00817 	ldw	r23,32(sp)
     ec0:	dd800717 	ldw	r22,28(sp)
     ec4:	dd400617 	ldw	r21,24(sp)
     ec8:	dd000517 	ldw	r20,20(sp)
     ecc:	dcc00417 	ldw	r19,16(sp)
     ed0:	dc800317 	ldw	r18,12(sp)
     ed4:	dc400217 	ldw	r17,8(sp)
     ed8:	dc000117 	ldw	r16,4(sp)
     edc:	dec00b04 	addi	sp,sp,44
     ee0:	f800283a 	ret
     ee4:	00800304 	movi	r2,12
     ee8:	90800015 	stw	r2,0(r18)
     eec:	0005883a 	mov	r2,zero
     ef0:	003ff006 	br	eb4 <__alt_data_end+0xfffd0174>
     ef4:	01002004 	movi	r4,128
     ef8:	02001004 	movi	r8,64
     efc:	01c00fc4 	movi	r7,63
     f00:	003f6106 	br	c88 <__alt_data_end+0xfffcff48>
     f04:	4009883a 	mov	r4,r8
     f08:	003f7506 	br	ce0 <__alt_data_end+0xfffcffa0>
     f0c:	81000317 	ldw	r4,12(r16)
     f10:	003fde06 	br	e8c <__alt_data_end+0xfffd014c>
     f14:	81c5883a 	add	r2,r16,r7
     f18:	11400117 	ldw	r5,4(r2)
     f1c:	9009883a 	mov	r4,r18
     f20:	29400054 	ori	r5,r5,1
     f24:	11400115 	stw	r5,4(r2)
     f28:	000e6f40 	call	e6f4 <__malloc_unlock>
     f2c:	80800204 	addi	r2,r16,8
     f30:	003fe006 	br	eb4 <__alt_data_end+0xfffd0174>
     f34:	9c000217 	ldw	r16,8(r19)
     f38:	00bfff04 	movi	r2,-4
     f3c:	85800117 	ldw	r22,4(r16)
     f40:	b0ac703a 	and	r22,r22,r2
     f44:	b4400336 	bltu	r22,r17,f54 <_malloc_r+0x344>
     f48:	b445c83a 	sub	r2,r22,r17
     f4c:	00c003c4 	movi	r3,15
     f50:	18805d16 	blt	r3,r2,10c8 <_malloc_r+0x4b8>
     f54:	05c000b4 	movhi	r23,2
     f58:	008000b4 	movhi	r2,2
     f5c:	10b1f804 	addi	r2,r2,-14368
     f60:	bdeadf04 	addi	r23,r23,-21636
     f64:	15400017 	ldw	r21,0(r2)
     f68:	b8c00017 	ldw	r3,0(r23)
     f6c:	00bfffc4 	movi	r2,-1
     f70:	858d883a 	add	r6,r16,r22
     f74:	8d6b883a 	add	r21,r17,r21
     f78:	1880ea26 	beq	r3,r2,1324 <_malloc_r+0x714>
     f7c:	ad4403c4 	addi	r21,r21,4111
     f80:	00bc0004 	movi	r2,-4096
     f84:	a8aa703a 	and	r21,r21,r2
     f88:	a80b883a 	mov	r5,r21
     f8c:	9009883a 	mov	r4,r18
     f90:	d9800015 	stw	r6,0(sp)
     f94:	00017ec0 	call	17ec <_sbrk_r>
     f98:	1029883a 	mov	r20,r2
     f9c:	00bfffc4 	movi	r2,-1
     fa0:	d9800017 	ldw	r6,0(sp)
     fa4:	a080e826 	beq	r20,r2,1348 <_malloc_r+0x738>
     fa8:	a180a636 	bltu	r20,r6,1244 <_malloc_r+0x634>
     fac:	070000b4 	movhi	fp,2
     fb0:	e7321d04 	addi	fp,fp,-14220
     fb4:	e0800017 	ldw	r2,0(fp)
     fb8:	a887883a 	add	r3,r21,r2
     fbc:	e0c00015 	stw	r3,0(fp)
     fc0:	3500e626 	beq	r6,r20,135c <_malloc_r+0x74c>
     fc4:	b9000017 	ldw	r4,0(r23)
     fc8:	00bfffc4 	movi	r2,-1
     fcc:	2080ee26 	beq	r4,r2,1388 <_malloc_r+0x778>
     fd0:	a185c83a 	sub	r2,r20,r6
     fd4:	10c5883a 	add	r2,r2,r3
     fd8:	e0800015 	stw	r2,0(fp)
     fdc:	a0c001cc 	andi	r3,r20,7
     fe0:	1800bc26 	beq	r3,zero,12d4 <_malloc_r+0x6c4>
     fe4:	a0e9c83a 	sub	r20,r20,r3
     fe8:	00840204 	movi	r2,4104
     fec:	a5000204 	addi	r20,r20,8
     ff0:	10c7c83a 	sub	r3,r2,r3
     ff4:	a545883a 	add	r2,r20,r21
     ff8:	1083ffcc 	andi	r2,r2,4095
     ffc:	18abc83a 	sub	r21,r3,r2
    1000:	a80b883a 	mov	r5,r21
    1004:	9009883a 	mov	r4,r18
    1008:	00017ec0 	call	17ec <_sbrk_r>
    100c:	00ffffc4 	movi	r3,-1
    1010:	10c0e126 	beq	r2,r3,1398 <_malloc_r+0x788>
    1014:	1505c83a 	sub	r2,r2,r20
    1018:	1545883a 	add	r2,r2,r21
    101c:	10800054 	ori	r2,r2,1
    1020:	e0c00017 	ldw	r3,0(fp)
    1024:	9d000215 	stw	r20,8(r19)
    1028:	a0800115 	stw	r2,4(r20)
    102c:	a8c7883a 	add	r3,r21,r3
    1030:	e0c00015 	stw	r3,0(fp)
    1034:	84c00e26 	beq	r16,r19,1070 <_malloc_r+0x460>
    1038:	018003c4 	movi	r6,15
    103c:	3580a72e 	bgeu	r6,r22,12dc <_malloc_r+0x6cc>
    1040:	81400117 	ldw	r5,4(r16)
    1044:	013ffe04 	movi	r4,-8
    1048:	b0bffd04 	addi	r2,r22,-12
    104c:	1104703a 	and	r2,r2,r4
    1050:	2900004c 	andi	r4,r5,1
    1054:	2088b03a 	or	r4,r4,r2
    1058:	81000115 	stw	r4,4(r16)
    105c:	01400144 	movi	r5,5
    1060:	8089883a 	add	r4,r16,r2
    1064:	21400115 	stw	r5,4(r4)
    1068:	21400215 	stw	r5,8(r4)
    106c:	3080cd36 	bltu	r6,r2,13a4 <_malloc_r+0x794>
    1070:	008000b4 	movhi	r2,2
    1074:	10b1f704 	addi	r2,r2,-14372
    1078:	11000017 	ldw	r4,0(r2)
    107c:	20c0012e 	bgeu	r4,r3,1084 <_malloc_r+0x474>
    1080:	10c00015 	stw	r3,0(r2)
    1084:	008000b4 	movhi	r2,2
    1088:	10b1f604 	addi	r2,r2,-14376
    108c:	11000017 	ldw	r4,0(r2)
    1090:	9c000217 	ldw	r16,8(r19)
    1094:	20c0012e 	bgeu	r4,r3,109c <_malloc_r+0x48c>
    1098:	10c00015 	stw	r3,0(r2)
    109c:	80c00117 	ldw	r3,4(r16)
    10a0:	00bfff04 	movi	r2,-4
    10a4:	1886703a 	and	r3,r3,r2
    10a8:	1c45c83a 	sub	r2,r3,r17
    10ac:	1c400236 	bltu	r3,r17,10b8 <_malloc_r+0x4a8>
    10b0:	00c003c4 	movi	r3,15
    10b4:	18800416 	blt	r3,r2,10c8 <_malloc_r+0x4b8>
    10b8:	9009883a 	mov	r4,r18
    10bc:	000e6f40 	call	e6f4 <__malloc_unlock>
    10c0:	0005883a 	mov	r2,zero
    10c4:	003f7b06 	br	eb4 <__alt_data_end+0xfffd0174>
    10c8:	88c00054 	ori	r3,r17,1
    10cc:	80c00115 	stw	r3,4(r16)
    10d0:	8463883a 	add	r17,r16,r17
    10d4:	10800054 	ori	r2,r2,1
    10d8:	9c400215 	stw	r17,8(r19)
    10dc:	88800115 	stw	r2,4(r17)
    10e0:	9009883a 	mov	r4,r18
    10e4:	000e6f40 	call	e6f4 <__malloc_unlock>
    10e8:	80800204 	addi	r2,r16,8
    10ec:	003f7106 	br	eb4 <__alt_data_end+0xfffd0174>
    10f0:	00c00504 	movi	r3,20
    10f4:	18804a2e 	bgeu	r3,r2,1220 <_malloc_r+0x610>
    10f8:	00c01504 	movi	r3,84
    10fc:	18806e36 	bltu	r3,r2,12b8 <_malloc_r+0x6a8>
    1100:	8804d33a 	srli	r2,r17,12
    1104:	12001bc4 	addi	r8,r2,111
    1108:	11c01b84 	addi	r7,r2,110
    110c:	4209883a 	add	r4,r8,r8
    1110:	003edd06 	br	c88 <__alt_data_end+0xfffcff48>
    1114:	3804d27a 	srli	r2,r7,9
    1118:	00c00104 	movi	r3,4
    111c:	1880442e 	bgeu	r3,r2,1230 <_malloc_r+0x620>
    1120:	00c00504 	movi	r3,20
    1124:	18808136 	bltu	r3,r2,132c <_malloc_r+0x71c>
    1128:	11401704 	addi	r5,r2,92
    112c:	10c016c4 	addi	r3,r2,91
    1130:	294b883a 	add	r5,r5,r5
    1134:	294b883a 	add	r5,r5,r5
    1138:	294b883a 	add	r5,r5,r5
    113c:	994b883a 	add	r5,r19,r5
    1140:	28800017 	ldw	r2,0(r5)
    1144:	018000b4 	movhi	r6,2
    1148:	297ffe04 	addi	r5,r5,-8
    114c:	31a42604 	addi	r6,r6,-28520
    1150:	28806526 	beq	r5,r2,12e8 <_malloc_r+0x6d8>
    1154:	01bfff04 	movi	r6,-4
    1158:	10c00117 	ldw	r3,4(r2)
    115c:	1986703a 	and	r3,r3,r6
    1160:	38c0022e 	bgeu	r7,r3,116c <_malloc_r+0x55c>
    1164:	10800217 	ldw	r2,8(r2)
    1168:	28bffb1e 	bne	r5,r2,1158 <__alt_data_end+0xfffd0418>
    116c:	11400317 	ldw	r5,12(r2)
    1170:	98c00117 	ldw	r3,4(r19)
    1174:	81400315 	stw	r5,12(r16)
    1178:	80800215 	stw	r2,8(r16)
    117c:	2c000215 	stw	r16,8(r5)
    1180:	14000315 	stw	r16,12(r2)
    1184:	003ef806 	br	d68 <__alt_data_end+0xfffd0028>
    1188:	88c00054 	ori	r3,r17,1
    118c:	80c00115 	stw	r3,4(r16)
    1190:	8463883a 	add	r17,r16,r17
    1194:	34400515 	stw	r17,20(r6)
    1198:	34400415 	stw	r17,16(r6)
    119c:	10c00054 	ori	r3,r2,1
    11a0:	8a000315 	stw	r8,12(r17)
    11a4:	8a000215 	stw	r8,8(r17)
    11a8:	88c00115 	stw	r3,4(r17)
    11ac:	88a3883a 	add	r17,r17,r2
    11b0:	88800015 	stw	r2,0(r17)
    11b4:	9009883a 	mov	r4,r18
    11b8:	000e6f40 	call	e6f4 <__malloc_unlock>
    11bc:	80800204 	addi	r2,r16,8
    11c0:	003f3c06 	br	eb4 <__alt_data_end+0xfffd0174>
    11c4:	30c00117 	ldw	r3,4(r6)
    11c8:	003ee706 	br	d68 <__alt_data_end+0xfffd0028>
    11cc:	5ac00044 	addi	r11,r11,1
    11d0:	588000cc 	andi	r2,r11,3
    11d4:	31800204 	addi	r6,r6,8
    11d8:	103efd1e 	bne	r2,zero,dd0 <__alt_data_end+0xfffd0090>
    11dc:	00002406 	br	1270 <_malloc_r+0x660>
    11e0:	14000317 	ldw	r16,12(r2)
    11e4:	143f251e 	bne	r2,r16,e7c <__alt_data_end+0xfffd013c>
    11e8:	21000084 	addi	r4,r4,2
    11ec:	003ebc06 	br	ce0 <__alt_data_end+0xfffcffa0>
    11f0:	8085883a 	add	r2,r16,r2
    11f4:	10c00117 	ldw	r3,4(r2)
    11f8:	81000317 	ldw	r4,12(r16)
    11fc:	81400217 	ldw	r5,8(r16)
    1200:	18c00054 	ori	r3,r3,1
    1204:	10c00115 	stw	r3,4(r2)
    1208:	29000315 	stw	r4,12(r5)
    120c:	21400215 	stw	r5,8(r4)
    1210:	9009883a 	mov	r4,r18
    1214:	000e6f40 	call	e6f4 <__malloc_unlock>
    1218:	80800204 	addi	r2,r16,8
    121c:	003f2506 	br	eb4 <__alt_data_end+0xfffd0174>
    1220:	12001704 	addi	r8,r2,92
    1224:	11c016c4 	addi	r7,r2,91
    1228:	4209883a 	add	r4,r8,r8
    122c:	003e9606 	br	c88 <__alt_data_end+0xfffcff48>
    1230:	3804d1ba 	srli	r2,r7,6
    1234:	11400e44 	addi	r5,r2,57
    1238:	10c00e04 	addi	r3,r2,56
    123c:	294b883a 	add	r5,r5,r5
    1240:	003fbc06 	br	1134 <__alt_data_end+0xfffd03f4>
    1244:	84ff5926 	beq	r16,r19,fac <__alt_data_end+0xfffd026c>
    1248:	008000b4 	movhi	r2,2
    124c:	10a42604 	addi	r2,r2,-28520
    1250:	14000217 	ldw	r16,8(r2)
    1254:	00bfff04 	movi	r2,-4
    1258:	80c00117 	ldw	r3,4(r16)
    125c:	1886703a 	and	r3,r3,r2
    1260:	003f9106 	br	10a8 <__alt_data_end+0xfffd0368>
    1264:	60800217 	ldw	r2,8(r12)
    1268:	213fffc4 	addi	r4,r4,-1
    126c:	1300651e 	bne	r2,r12,1404 <_malloc_r+0x7f4>
    1270:	208000cc 	andi	r2,r4,3
    1274:	633ffe04 	addi	r12,r12,-8
    1278:	103ffa1e 	bne	r2,zero,1264 <__alt_data_end+0xfffd0524>
    127c:	98800117 	ldw	r2,4(r19)
    1280:	0146303a 	nor	r3,zero,r5
    1284:	1884703a 	and	r2,r3,r2
    1288:	98800115 	stw	r2,4(r19)
    128c:	294b883a 	add	r5,r5,r5
    1290:	117f2836 	bltu	r2,r5,f34 <__alt_data_end+0xfffd01f4>
    1294:	283f2726 	beq	r5,zero,f34 <__alt_data_end+0xfffd01f4>
    1298:	2886703a 	and	r3,r5,r2
    129c:	5809883a 	mov	r4,r11
    12a0:	183ec31e 	bne	r3,zero,db0 <__alt_data_end+0xfffd0070>
    12a4:	294b883a 	add	r5,r5,r5
    12a8:	2886703a 	and	r3,r5,r2
    12ac:	21000104 	addi	r4,r4,4
    12b0:	183ffc26 	beq	r3,zero,12a4 <__alt_data_end+0xfffd0564>
    12b4:	003ebe06 	br	db0 <__alt_data_end+0xfffd0070>
    12b8:	00c05504 	movi	r3,340
    12bc:	18801236 	bltu	r3,r2,1308 <_malloc_r+0x6f8>
    12c0:	8804d3fa 	srli	r2,r17,15
    12c4:	12001e04 	addi	r8,r2,120
    12c8:	11c01dc4 	addi	r7,r2,119
    12cc:	4209883a 	add	r4,r8,r8
    12d0:	003e6d06 	br	c88 <__alt_data_end+0xfffcff48>
    12d4:	00c40004 	movi	r3,4096
    12d8:	003f4606 	br	ff4 <__alt_data_end+0xfffd02b4>
    12dc:	00800044 	movi	r2,1
    12e0:	a0800115 	stw	r2,4(r20)
    12e4:	003f7406 	br	10b8 <__alt_data_end+0xfffd0378>
    12e8:	1805d0ba 	srai	r2,r3,2
    12ec:	01c00044 	movi	r7,1
    12f0:	30c00117 	ldw	r3,4(r6)
    12f4:	388e983a 	sll	r7,r7,r2
    12f8:	2805883a 	mov	r2,r5
    12fc:	38c6b03a 	or	r3,r7,r3
    1300:	30c00115 	stw	r3,4(r6)
    1304:	003f9b06 	br	1174 <__alt_data_end+0xfffd0434>
    1308:	00c15504 	movi	r3,1364
    130c:	18801a36 	bltu	r3,r2,1378 <_malloc_r+0x768>
    1310:	8804d4ba 	srli	r2,r17,18
    1314:	12001f44 	addi	r8,r2,125
    1318:	11c01f04 	addi	r7,r2,124
    131c:	4209883a 	add	r4,r8,r8
    1320:	003e5906 	br	c88 <__alt_data_end+0xfffcff48>
    1324:	ad400404 	addi	r21,r21,16
    1328:	003f1706 	br	f88 <__alt_data_end+0xfffd0248>
    132c:	00c01504 	movi	r3,84
    1330:	18802336 	bltu	r3,r2,13c0 <_malloc_r+0x7b0>
    1334:	3804d33a 	srli	r2,r7,12
    1338:	11401bc4 	addi	r5,r2,111
    133c:	10c01b84 	addi	r3,r2,110
    1340:	294b883a 	add	r5,r5,r5
    1344:	003f7b06 	br	1134 <__alt_data_end+0xfffd03f4>
    1348:	9c000217 	ldw	r16,8(r19)
    134c:	00bfff04 	movi	r2,-4
    1350:	80c00117 	ldw	r3,4(r16)
    1354:	1886703a 	and	r3,r3,r2
    1358:	003f5306 	br	10a8 <__alt_data_end+0xfffd0368>
    135c:	3083ffcc 	andi	r2,r6,4095
    1360:	103f181e 	bne	r2,zero,fc4 <__alt_data_end+0xfffd0284>
    1364:	99000217 	ldw	r4,8(r19)
    1368:	b545883a 	add	r2,r22,r21
    136c:	10800054 	ori	r2,r2,1
    1370:	20800115 	stw	r2,4(r4)
    1374:	003f3e06 	br	1070 <__alt_data_end+0xfffd0330>
    1378:	01003f84 	movi	r4,254
    137c:	02001fc4 	movi	r8,127
    1380:	01c01f84 	movi	r7,126
    1384:	003e4006 	br	c88 <__alt_data_end+0xfffcff48>
    1388:	008000b4 	movhi	r2,2
    138c:	10aadf04 	addi	r2,r2,-21636
    1390:	15000015 	stw	r20,0(r2)
    1394:	003f1106 	br	fdc <__alt_data_end+0xfffd029c>
    1398:	00800044 	movi	r2,1
    139c:	002b883a 	mov	r21,zero
    13a0:	003f1f06 	br	1020 <__alt_data_end+0xfffd02e0>
    13a4:	81400204 	addi	r5,r16,8
    13a8:	9009883a 	mov	r4,r18
    13ac:	0005e0c0 	call	5e0c <_free_r>
    13b0:	008000b4 	movhi	r2,2
    13b4:	10b21d04 	addi	r2,r2,-14220
    13b8:	10c00017 	ldw	r3,0(r2)
    13bc:	003f2c06 	br	1070 <__alt_data_end+0xfffd0330>
    13c0:	00c05504 	movi	r3,340
    13c4:	18800536 	bltu	r3,r2,13dc <_malloc_r+0x7cc>
    13c8:	3804d3fa 	srli	r2,r7,15
    13cc:	11401e04 	addi	r5,r2,120
    13d0:	10c01dc4 	addi	r3,r2,119
    13d4:	294b883a 	add	r5,r5,r5
    13d8:	003f5606 	br	1134 <__alt_data_end+0xfffd03f4>
    13dc:	00c15504 	movi	r3,1364
    13e0:	18800536 	bltu	r3,r2,13f8 <_malloc_r+0x7e8>
    13e4:	3804d4ba 	srli	r2,r7,18
    13e8:	11401f44 	addi	r5,r2,125
    13ec:	10c01f04 	addi	r3,r2,124
    13f0:	294b883a 	add	r5,r5,r5
    13f4:	003f4f06 	br	1134 <__alt_data_end+0xfffd03f4>
    13f8:	01403f84 	movi	r5,254
    13fc:	00c01f84 	movi	r3,126
    1400:	003f4c06 	br	1134 <__alt_data_end+0xfffd03f4>
    1404:	98800117 	ldw	r2,4(r19)
    1408:	003fa006 	br	128c <__alt_data_end+0xfffd054c>
    140c:	8808d0fa 	srli	r4,r17,3
    1410:	20800044 	addi	r2,r4,1
    1414:	1085883a 	add	r2,r2,r2
    1418:	003e9006 	br	e5c <__alt_data_end+0xfffd011c>

0000141c <memcpy>:
    141c:	defffd04 	addi	sp,sp,-12
    1420:	dfc00215 	stw	ra,8(sp)
    1424:	dc400115 	stw	r17,4(sp)
    1428:	dc000015 	stw	r16,0(sp)
    142c:	00c003c4 	movi	r3,15
    1430:	2005883a 	mov	r2,r4
    1434:	1980452e 	bgeu	r3,r6,154c <memcpy+0x130>
    1438:	2906b03a 	or	r3,r5,r4
    143c:	18c000cc 	andi	r3,r3,3
    1440:	1800441e 	bne	r3,zero,1554 <memcpy+0x138>
    1444:	347ffc04 	addi	r17,r6,-16
    1448:	8822d13a 	srli	r17,r17,4
    144c:	28c00104 	addi	r3,r5,4
    1450:	23400104 	addi	r13,r4,4
    1454:	8820913a 	slli	r16,r17,4
    1458:	2b000204 	addi	r12,r5,8
    145c:	22c00204 	addi	r11,r4,8
    1460:	84000504 	addi	r16,r16,20
    1464:	2a800304 	addi	r10,r5,12
    1468:	22400304 	addi	r9,r4,12
    146c:	2c21883a 	add	r16,r5,r16
    1470:	2811883a 	mov	r8,r5
    1474:	200f883a 	mov	r7,r4
    1478:	41000017 	ldw	r4,0(r8)
    147c:	1fc00017 	ldw	ra,0(r3)
    1480:	63c00017 	ldw	r15,0(r12)
    1484:	39000015 	stw	r4,0(r7)
    1488:	53800017 	ldw	r14,0(r10)
    148c:	6fc00015 	stw	ra,0(r13)
    1490:	5bc00015 	stw	r15,0(r11)
    1494:	4b800015 	stw	r14,0(r9)
    1498:	18c00404 	addi	r3,r3,16
    149c:	39c00404 	addi	r7,r7,16
    14a0:	42000404 	addi	r8,r8,16
    14a4:	6b400404 	addi	r13,r13,16
    14a8:	63000404 	addi	r12,r12,16
    14ac:	5ac00404 	addi	r11,r11,16
    14b0:	52800404 	addi	r10,r10,16
    14b4:	4a400404 	addi	r9,r9,16
    14b8:	1c3fef1e 	bne	r3,r16,1478 <__alt_data_end+0xfffd0738>
    14bc:	89c00044 	addi	r7,r17,1
    14c0:	380e913a 	slli	r7,r7,4
    14c4:	310003cc 	andi	r4,r6,15
    14c8:	02c000c4 	movi	r11,3
    14cc:	11c7883a 	add	r3,r2,r7
    14d0:	29cb883a 	add	r5,r5,r7
    14d4:	5900212e 	bgeu	r11,r4,155c <memcpy+0x140>
    14d8:	1813883a 	mov	r9,r3
    14dc:	2811883a 	mov	r8,r5
    14e0:	200f883a 	mov	r7,r4
    14e4:	42800017 	ldw	r10,0(r8)
    14e8:	4a400104 	addi	r9,r9,4
    14ec:	39ffff04 	addi	r7,r7,-4
    14f0:	4abfff15 	stw	r10,-4(r9)
    14f4:	42000104 	addi	r8,r8,4
    14f8:	59fffa36 	bltu	r11,r7,14e4 <__alt_data_end+0xfffd07a4>
    14fc:	213fff04 	addi	r4,r4,-4
    1500:	2008d0ba 	srli	r4,r4,2
    1504:	318000cc 	andi	r6,r6,3
    1508:	21000044 	addi	r4,r4,1
    150c:	2109883a 	add	r4,r4,r4
    1510:	2109883a 	add	r4,r4,r4
    1514:	1907883a 	add	r3,r3,r4
    1518:	290b883a 	add	r5,r5,r4
    151c:	30000626 	beq	r6,zero,1538 <memcpy+0x11c>
    1520:	198d883a 	add	r6,r3,r6
    1524:	29c00003 	ldbu	r7,0(r5)
    1528:	18c00044 	addi	r3,r3,1
    152c:	29400044 	addi	r5,r5,1
    1530:	19ffffc5 	stb	r7,-1(r3)
    1534:	19bffb1e 	bne	r3,r6,1524 <__alt_data_end+0xfffd07e4>
    1538:	dfc00217 	ldw	ra,8(sp)
    153c:	dc400117 	ldw	r17,4(sp)
    1540:	dc000017 	ldw	r16,0(sp)
    1544:	dec00304 	addi	sp,sp,12
    1548:	f800283a 	ret
    154c:	2007883a 	mov	r3,r4
    1550:	003ff206 	br	151c <__alt_data_end+0xfffd07dc>
    1554:	2007883a 	mov	r3,r4
    1558:	003ff106 	br	1520 <__alt_data_end+0xfffd07e0>
    155c:	200d883a 	mov	r6,r4
    1560:	003fee06 	br	151c <__alt_data_end+0xfffd07dc>

00001564 <memset>:
    1564:	20c000cc 	andi	r3,r4,3
    1568:	2005883a 	mov	r2,r4
    156c:	18004426 	beq	r3,zero,1680 <memset+0x11c>
    1570:	31ffffc4 	addi	r7,r6,-1
    1574:	30004026 	beq	r6,zero,1678 <memset+0x114>
    1578:	2813883a 	mov	r9,r5
    157c:	200d883a 	mov	r6,r4
    1580:	2007883a 	mov	r3,r4
    1584:	00000406 	br	1598 <memset+0x34>
    1588:	3a3fffc4 	addi	r8,r7,-1
    158c:	31800044 	addi	r6,r6,1
    1590:	38003926 	beq	r7,zero,1678 <memset+0x114>
    1594:	400f883a 	mov	r7,r8
    1598:	18c00044 	addi	r3,r3,1
    159c:	32400005 	stb	r9,0(r6)
    15a0:	1a0000cc 	andi	r8,r3,3
    15a4:	403ff81e 	bne	r8,zero,1588 <__alt_data_end+0xfffd0848>
    15a8:	010000c4 	movi	r4,3
    15ac:	21c02d2e 	bgeu	r4,r7,1664 <memset+0x100>
    15b0:	29003fcc 	andi	r4,r5,255
    15b4:	200c923a 	slli	r6,r4,8
    15b8:	3108b03a 	or	r4,r6,r4
    15bc:	200c943a 	slli	r6,r4,16
    15c0:	218cb03a 	or	r6,r4,r6
    15c4:	010003c4 	movi	r4,15
    15c8:	21c0182e 	bgeu	r4,r7,162c <memset+0xc8>
    15cc:	3b3ffc04 	addi	r12,r7,-16
    15d0:	6018d13a 	srli	r12,r12,4
    15d4:	1a000104 	addi	r8,r3,4
    15d8:	1ac00204 	addi	r11,r3,8
    15dc:	6008913a 	slli	r4,r12,4
    15e0:	1a800304 	addi	r10,r3,12
    15e4:	1813883a 	mov	r9,r3
    15e8:	21000504 	addi	r4,r4,20
    15ec:	1909883a 	add	r4,r3,r4
    15f0:	49800015 	stw	r6,0(r9)
    15f4:	41800015 	stw	r6,0(r8)
    15f8:	59800015 	stw	r6,0(r11)
    15fc:	51800015 	stw	r6,0(r10)
    1600:	42000404 	addi	r8,r8,16
    1604:	4a400404 	addi	r9,r9,16
    1608:	5ac00404 	addi	r11,r11,16
    160c:	52800404 	addi	r10,r10,16
    1610:	413ff71e 	bne	r8,r4,15f0 <__alt_data_end+0xfffd08b0>
    1614:	63000044 	addi	r12,r12,1
    1618:	6018913a 	slli	r12,r12,4
    161c:	39c003cc 	andi	r7,r7,15
    1620:	010000c4 	movi	r4,3
    1624:	1b07883a 	add	r3,r3,r12
    1628:	21c00e2e 	bgeu	r4,r7,1664 <memset+0x100>
    162c:	1813883a 	mov	r9,r3
    1630:	3811883a 	mov	r8,r7
    1634:	010000c4 	movi	r4,3
    1638:	49800015 	stw	r6,0(r9)
    163c:	423fff04 	addi	r8,r8,-4
    1640:	4a400104 	addi	r9,r9,4
    1644:	223ffc36 	bltu	r4,r8,1638 <__alt_data_end+0xfffd08f8>
    1648:	393fff04 	addi	r4,r7,-4
    164c:	2008d0ba 	srli	r4,r4,2
    1650:	39c000cc 	andi	r7,r7,3
    1654:	21000044 	addi	r4,r4,1
    1658:	2109883a 	add	r4,r4,r4
    165c:	2109883a 	add	r4,r4,r4
    1660:	1907883a 	add	r3,r3,r4
    1664:	38000526 	beq	r7,zero,167c <memset+0x118>
    1668:	19cf883a 	add	r7,r3,r7
    166c:	19400005 	stb	r5,0(r3)
    1670:	18c00044 	addi	r3,r3,1
    1674:	38fffd1e 	bne	r7,r3,166c <__alt_data_end+0xfffd092c>
    1678:	f800283a 	ret
    167c:	f800283a 	ret
    1680:	2007883a 	mov	r3,r4
    1684:	300f883a 	mov	r7,r6
    1688:	003fc706 	br	15a8 <__alt_data_end+0xfffd0868>

0000168c <_printf_r>:
    168c:	defffd04 	addi	sp,sp,-12
    1690:	2805883a 	mov	r2,r5
    1694:	dfc00015 	stw	ra,0(sp)
    1698:	d9800115 	stw	r6,4(sp)
    169c:	d9c00215 	stw	r7,8(sp)
    16a0:	21400217 	ldw	r5,8(r4)
    16a4:	d9c00104 	addi	r7,sp,4
    16a8:	100d883a 	mov	r6,r2
    16ac:	00018d80 	call	18d8 <___vfprintf_internal_r>
    16b0:	dfc00017 	ldw	ra,0(sp)
    16b4:	dec00304 	addi	sp,sp,12
    16b8:	f800283a 	ret

000016bc <printf>:
    16bc:	defffc04 	addi	sp,sp,-16
    16c0:	dfc00015 	stw	ra,0(sp)
    16c4:	d9400115 	stw	r5,4(sp)
    16c8:	d9800215 	stw	r6,8(sp)
    16cc:	d9c00315 	stw	r7,12(sp)
    16d0:	008000b4 	movhi	r2,2
    16d4:	10aae204 	addi	r2,r2,-21624
    16d8:	10800017 	ldw	r2,0(r2)
    16dc:	200b883a 	mov	r5,r4
    16e0:	d9800104 	addi	r6,sp,4
    16e4:	11000217 	ldw	r4,8(r2)
    16e8:	0003bb40 	call	3bb4 <__vfprintf_internal>
    16ec:	dfc00017 	ldw	ra,0(sp)
    16f0:	dec00404 	addi	sp,sp,16
    16f4:	f800283a 	ret

000016f8 <_putchar_r>:
    16f8:	21800217 	ldw	r6,8(r4)
    16fc:	0007cfc1 	jmpi	7cfc <_putc_r>

00001700 <putchar>:
    1700:	008000b4 	movhi	r2,2
    1704:	10aae204 	addi	r2,r2,-21624
    1708:	200b883a 	mov	r5,r4
    170c:	11000017 	ldw	r4,0(r2)
    1710:	21800217 	ldw	r6,8(r4)
    1714:	0007cfc1 	jmpi	7cfc <_putc_r>

00001718 <_puts_r>:
    1718:	defff604 	addi	sp,sp,-40
    171c:	dc000715 	stw	r16,28(sp)
    1720:	2021883a 	mov	r16,r4
    1724:	2809883a 	mov	r4,r5
    1728:	dc400815 	stw	r17,32(sp)
    172c:	dfc00915 	stw	ra,36(sp)
    1730:	2823883a 	mov	r17,r5
    1734:	00018400 	call	1840 <strlen>
    1738:	10c00044 	addi	r3,r2,1
    173c:	d8800115 	stw	r2,4(sp)
    1740:	008000b4 	movhi	r2,2
    1744:	10a31a04 	addi	r2,r2,-29592
    1748:	d8800215 	stw	r2,8(sp)
    174c:	00800044 	movi	r2,1
    1750:	d8800315 	stw	r2,12(sp)
    1754:	00800084 	movi	r2,2
    1758:	dc400015 	stw	r17,0(sp)
    175c:	d8c00615 	stw	r3,24(sp)
    1760:	dec00415 	stw	sp,16(sp)
    1764:	d8800515 	stw	r2,20(sp)
    1768:	80000226 	beq	r16,zero,1774 <_puts_r+0x5c>
    176c:	80800e17 	ldw	r2,56(r16)
    1770:	10001426 	beq	r2,zero,17c4 <_puts_r+0xac>
    1774:	81400217 	ldw	r5,8(r16)
    1778:	2880030b 	ldhu	r2,12(r5)
    177c:	10c8000c 	andi	r3,r2,8192
    1780:	1800061e 	bne	r3,zero,179c <_puts_r+0x84>
    1784:	29001917 	ldw	r4,100(r5)
    1788:	00f7ffc4 	movi	r3,-8193
    178c:	10880014 	ori	r2,r2,8192
    1790:	20c6703a 	and	r3,r4,r3
    1794:	2880030d 	sth	r2,12(r5)
    1798:	28c01915 	stw	r3,100(r5)
    179c:	d9800404 	addi	r6,sp,16
    17a0:	8009883a 	mov	r4,r16
    17a4:	000611c0 	call	611c <__sfvwrite_r>
    17a8:	1000091e 	bne	r2,zero,17d0 <_puts_r+0xb8>
    17ac:	00800284 	movi	r2,10
    17b0:	dfc00917 	ldw	ra,36(sp)
    17b4:	dc400817 	ldw	r17,32(sp)
    17b8:	dc000717 	ldw	r16,28(sp)
    17bc:	dec00a04 	addi	sp,sp,40
    17c0:	f800283a 	ret
    17c4:	8009883a 	mov	r4,r16
    17c8:	0005c980 	call	5c98 <__sinit>
    17cc:	003fe906 	br	1774 <__alt_data_end+0xfffd0a34>
    17d0:	00bfffc4 	movi	r2,-1
    17d4:	003ff606 	br	17b0 <__alt_data_end+0xfffd0a70>

000017d8 <puts>:
    17d8:	008000b4 	movhi	r2,2
    17dc:	10aae204 	addi	r2,r2,-21624
    17e0:	200b883a 	mov	r5,r4
    17e4:	11000017 	ldw	r4,0(r2)
    17e8:	00017181 	jmpi	1718 <_puts_r>

000017ec <_sbrk_r>:
    17ec:	defffd04 	addi	sp,sp,-12
    17f0:	dc000015 	stw	r16,0(sp)
    17f4:	040000b4 	movhi	r16,2
    17f8:	dc400115 	stw	r17,4(sp)
    17fc:	8431f904 	addi	r16,r16,-14364
    1800:	2023883a 	mov	r17,r4
    1804:	2809883a 	mov	r4,r5
    1808:	dfc00215 	stw	ra,8(sp)
    180c:	80000015 	stw	zero,0(r16)
    1810:	000e2c40 	call	e2c4 <sbrk>
    1814:	00ffffc4 	movi	r3,-1
    1818:	10c00526 	beq	r2,r3,1830 <_sbrk_r+0x44>
    181c:	dfc00217 	ldw	ra,8(sp)
    1820:	dc400117 	ldw	r17,4(sp)
    1824:	dc000017 	ldw	r16,0(sp)
    1828:	dec00304 	addi	sp,sp,12
    182c:	f800283a 	ret
    1830:	80c00017 	ldw	r3,0(r16)
    1834:	183ff926 	beq	r3,zero,181c <__alt_data_end+0xfffd0adc>
    1838:	88c00015 	stw	r3,0(r17)
    183c:	003ff706 	br	181c <__alt_data_end+0xfffd0adc>

00001840 <strlen>:
    1840:	208000cc 	andi	r2,r4,3
    1844:	10002026 	beq	r2,zero,18c8 <strlen+0x88>
    1848:	20800007 	ldb	r2,0(r4)
    184c:	10002026 	beq	r2,zero,18d0 <strlen+0x90>
    1850:	2005883a 	mov	r2,r4
    1854:	00000206 	br	1860 <strlen+0x20>
    1858:	10c00007 	ldb	r3,0(r2)
    185c:	18001826 	beq	r3,zero,18c0 <strlen+0x80>
    1860:	10800044 	addi	r2,r2,1
    1864:	10c000cc 	andi	r3,r2,3
    1868:	183ffb1e 	bne	r3,zero,1858 <__alt_data_end+0xfffd0b18>
    186c:	10c00017 	ldw	r3,0(r2)
    1870:	01ffbff4 	movhi	r7,65279
    1874:	39ffbfc4 	addi	r7,r7,-257
    1878:	00ca303a 	nor	r5,zero,r3
    187c:	01a02074 	movhi	r6,32897
    1880:	19c7883a 	add	r3,r3,r7
    1884:	31a02004 	addi	r6,r6,-32640
    1888:	1946703a 	and	r3,r3,r5
    188c:	1986703a 	and	r3,r3,r6
    1890:	1800091e 	bne	r3,zero,18b8 <strlen+0x78>
    1894:	10800104 	addi	r2,r2,4
    1898:	10c00017 	ldw	r3,0(r2)
    189c:	19cb883a 	add	r5,r3,r7
    18a0:	00c6303a 	nor	r3,zero,r3
    18a4:	28c6703a 	and	r3,r5,r3
    18a8:	1986703a 	and	r3,r3,r6
    18ac:	183ff926 	beq	r3,zero,1894 <__alt_data_end+0xfffd0b54>
    18b0:	00000106 	br	18b8 <strlen+0x78>
    18b4:	10800044 	addi	r2,r2,1
    18b8:	10c00007 	ldb	r3,0(r2)
    18bc:	183ffd1e 	bne	r3,zero,18b4 <__alt_data_end+0xfffd0b74>
    18c0:	1105c83a 	sub	r2,r2,r4
    18c4:	f800283a 	ret
    18c8:	2005883a 	mov	r2,r4
    18cc:	003fe706 	br	186c <__alt_data_end+0xfffd0b2c>
    18d0:	0005883a 	mov	r2,zero
    18d4:	f800283a 	ret

000018d8 <___vfprintf_internal_r>:
    18d8:	deffb804 	addi	sp,sp,-288
    18dc:	dfc04715 	stw	ra,284(sp)
    18e0:	ddc04515 	stw	r23,276(sp)
    18e4:	dd404315 	stw	r21,268(sp)
    18e8:	d9002d15 	stw	r4,180(sp)
    18ec:	282f883a 	mov	r23,r5
    18f0:	302b883a 	mov	r21,r6
    18f4:	d9c02e15 	stw	r7,184(sp)
    18f8:	df004615 	stw	fp,280(sp)
    18fc:	dd804415 	stw	r22,272(sp)
    1900:	dd004215 	stw	r20,264(sp)
    1904:	dcc04115 	stw	r19,260(sp)
    1908:	dc804015 	stw	r18,256(sp)
    190c:	dc403f15 	stw	r17,252(sp)
    1910:	dc003e15 	stw	r16,248(sp)
    1914:	00068180 	call	6818 <_localeconv_r>
    1918:	10800017 	ldw	r2,0(r2)
    191c:	1009883a 	mov	r4,r2
    1920:	d8803415 	stw	r2,208(sp)
    1924:	00018400 	call	1840 <strlen>
    1928:	d8803715 	stw	r2,220(sp)
    192c:	d8802d17 	ldw	r2,180(sp)
    1930:	10000226 	beq	r2,zero,193c <___vfprintf_internal_r+0x64>
    1934:	10800e17 	ldw	r2,56(r2)
    1938:	1000fb26 	beq	r2,zero,1d28 <___vfprintf_internal_r+0x450>
    193c:	b880030b 	ldhu	r2,12(r23)
    1940:	10c8000c 	andi	r3,r2,8192
    1944:	1800061e 	bne	r3,zero,1960 <___vfprintf_internal_r+0x88>
    1948:	b9001917 	ldw	r4,100(r23)
    194c:	00f7ffc4 	movi	r3,-8193
    1950:	10880014 	ori	r2,r2,8192
    1954:	20c6703a 	and	r3,r4,r3
    1958:	b880030d 	sth	r2,12(r23)
    195c:	b8c01915 	stw	r3,100(r23)
    1960:	10c0020c 	andi	r3,r2,8
    1964:	1800c326 	beq	r3,zero,1c74 <___vfprintf_internal_r+0x39c>
    1968:	b8c00417 	ldw	r3,16(r23)
    196c:	1800c126 	beq	r3,zero,1c74 <___vfprintf_internal_r+0x39c>
    1970:	1080068c 	andi	r2,r2,26
    1974:	00c00284 	movi	r3,10
    1978:	10c0c626 	beq	r2,r3,1c94 <___vfprintf_internal_r+0x3bc>
    197c:	d8c00404 	addi	r3,sp,16
    1980:	050000b4 	movhi	r20,2
    1984:	d9001e04 	addi	r4,sp,120
    1988:	a5232b84 	addi	r20,r20,-29522
    198c:	d8c01e15 	stw	r3,120(sp)
    1990:	d8002015 	stw	zero,128(sp)
    1994:	d8001f15 	stw	zero,124(sp)
    1998:	d8003315 	stw	zero,204(sp)
    199c:	d8003615 	stw	zero,216(sp)
    19a0:	d8003815 	stw	zero,224(sp)
    19a4:	1811883a 	mov	r8,r3
    19a8:	d8003915 	stw	zero,228(sp)
    19ac:	d8003a15 	stw	zero,232(sp)
    19b0:	d8002f15 	stw	zero,188(sp)
    19b4:	d9002815 	stw	r4,160(sp)
    19b8:	a8800007 	ldb	r2,0(r21)
    19bc:	10028b26 	beq	r2,zero,23ec <___vfprintf_internal_r+0xb14>
    19c0:	00c00944 	movi	r3,37
    19c4:	a823883a 	mov	r17,r21
    19c8:	10c0021e 	bne	r2,r3,19d4 <___vfprintf_internal_r+0xfc>
    19cc:	00001406 	br	1a20 <___vfprintf_internal_r+0x148>
    19d0:	10c00326 	beq	r2,r3,19e0 <___vfprintf_internal_r+0x108>
    19d4:	8c400044 	addi	r17,r17,1
    19d8:	88800007 	ldb	r2,0(r17)
    19dc:	103ffc1e 	bne	r2,zero,19d0 <__alt_data_end+0xfffd0c90>
    19e0:	8d61c83a 	sub	r16,r17,r21
    19e4:	80000e26 	beq	r16,zero,1a20 <___vfprintf_internal_r+0x148>
    19e8:	d8c02017 	ldw	r3,128(sp)
    19ec:	d8801f17 	ldw	r2,124(sp)
    19f0:	45400015 	stw	r21,0(r8)
    19f4:	1c07883a 	add	r3,r3,r16
    19f8:	10800044 	addi	r2,r2,1
    19fc:	d8c02015 	stw	r3,128(sp)
    1a00:	44000115 	stw	r16,4(r8)
    1a04:	d8801f15 	stw	r2,124(sp)
    1a08:	00c001c4 	movi	r3,7
    1a0c:	1880a916 	blt	r3,r2,1cb4 <___vfprintf_internal_r+0x3dc>
    1a10:	42000204 	addi	r8,r8,8
    1a14:	d9402f17 	ldw	r5,188(sp)
    1a18:	2c0b883a 	add	r5,r5,r16
    1a1c:	d9402f15 	stw	r5,188(sp)
    1a20:	88800007 	ldb	r2,0(r17)
    1a24:	1000aa26 	beq	r2,zero,1cd0 <___vfprintf_internal_r+0x3f8>
    1a28:	8d400044 	addi	r21,r17,1
    1a2c:	8c400047 	ldb	r17,1(r17)
    1a30:	0021883a 	mov	r16,zero
    1a34:	00bfffc4 	movi	r2,-1
    1a38:	0025883a 	mov	r18,zero
    1a3c:	dc002905 	stb	r16,164(sp)
    1a40:	d8002785 	stb	zero,158(sp)
    1a44:	d8002b05 	stb	zero,172(sp)
    1a48:	d8802a15 	stw	r2,168(sp)
    1a4c:	d8003115 	stw	zero,196(sp)
    1a50:	04c01604 	movi	r19,88
    1a54:	05800244 	movi	r22,9
    1a58:	9021883a 	mov	r16,r18
    1a5c:	4039883a 	mov	fp,r8
    1a60:	ad400044 	addi	r21,r21,1
    1a64:	88bff804 	addi	r2,r17,-32
    1a68:	98833236 	bltu	r19,r2,2734 <___vfprintf_internal_r+0xe5c>
    1a6c:	100490ba 	slli	r2,r2,2
    1a70:	00c00034 	movhi	r3,0
    1a74:	18c6a104 	addi	r3,r3,6788
    1a78:	10c5883a 	add	r2,r2,r3
    1a7c:	10800017 	ldw	r2,0(r2)
    1a80:	1000683a 	jmp	r2
    1a84:	0000262c 	andhi	zero,zero,152
    1a88:	00002734 	movhi	zero,156
    1a8c:	00002734 	movhi	zero,156
    1a90:	0000264c 	andi	zero,zero,153
    1a94:	00002734 	movhi	zero,156
    1a98:	00002734 	movhi	zero,156
    1a9c:	00002734 	movhi	zero,156
    1aa0:	00002734 	movhi	zero,156
    1aa4:	00002734 	movhi	zero,156
    1aa8:	00002734 	movhi	zero,156
    1aac:	00001d34 	movhi	zero,116
    1ab0:	0000253c 	xorhi	zero,zero,148
    1ab4:	00002734 	movhi	zero,156
    1ab8:	00001bf8 	rdprs	zero,zero,111
    1abc:	00001d58 	cmpnei	zero,zero,117
    1ac0:	00002734 	movhi	zero,156
    1ac4:	00001da8 	cmpgeui	zero,zero,118
    1ac8:	00001db4 	movhi	zero,118
    1acc:	00001db4 	movhi	zero,118
    1ad0:	00001db4 	movhi	zero,118
    1ad4:	00001db4 	movhi	zero,118
    1ad8:	00001db4 	movhi	zero,118
    1adc:	00001db4 	movhi	zero,118
    1ae0:	00001db4 	movhi	zero,118
    1ae4:	00001db4 	movhi	zero,118
    1ae8:	00001db4 	movhi	zero,118
    1aec:	00002734 	movhi	zero,156
    1af0:	00002734 	movhi	zero,156
    1af4:	00002734 	movhi	zero,156
    1af8:	00002734 	movhi	zero,156
    1afc:	00002734 	movhi	zero,156
    1b00:	00002734 	movhi	zero,156
    1b04:	00002734 	movhi	zero,156
    1b08:	00002734 	movhi	zero,156
    1b0c:	00002734 	movhi	zero,156
    1b10:	00002734 	movhi	zero,156
    1b14:	00001df0 	cmpltui	zero,zero,119
    1b18:	00001eb8 	rdprs	zero,zero,122
    1b1c:	00002734 	movhi	zero,156
    1b20:	00001eb8 	rdprs	zero,zero,122
    1b24:	00002734 	movhi	zero,156
    1b28:	00002734 	movhi	zero,156
    1b2c:	00002734 	movhi	zero,156
    1b30:	00002734 	movhi	zero,156
    1b34:	00001f64 	muli	zero,zero,125
    1b38:	00002734 	movhi	zero,156
    1b3c:	00002734 	movhi	zero,156
    1b40:	00001f70 	cmpltui	zero,zero,125
    1b44:	00002734 	movhi	zero,156
    1b48:	00002734 	movhi	zero,156
    1b4c:	00002734 	movhi	zero,156
    1b50:	00002734 	movhi	zero,156
    1b54:	00002734 	movhi	zero,156
    1b58:	000023f4 	movhi	zero,143
    1b5c:	00002734 	movhi	zero,156
    1b60:	00002734 	movhi	zero,156
    1b64:	00002460 	cmpeqi	zero,zero,145
    1b68:	00002734 	movhi	zero,156
    1b6c:	00002734 	movhi	zero,156
    1b70:	00002734 	movhi	zero,156
    1b74:	00002734 	movhi	zero,156
    1b78:	00002734 	movhi	zero,156
    1b7c:	00002734 	movhi	zero,156
    1b80:	00002734 	movhi	zero,156
    1b84:	00002734 	movhi	zero,156
    1b88:	00002734 	movhi	zero,156
    1b8c:	00002734 	movhi	zero,156
    1b90:	000026d8 	cmpnei	zero,zero,155
    1b94:	00002658 	cmpnei	zero,zero,153
    1b98:	00001eb8 	rdprs	zero,zero,122
    1b9c:	00001eb8 	rdprs	zero,zero,122
    1ba0:	00001eb8 	rdprs	zero,zero,122
    1ba4:	00002678 	rdprs	zero,zero,153
    1ba8:	00002658 	cmpnei	zero,zero,153
    1bac:	00002734 	movhi	zero,156
    1bb0:	00002734 	movhi	zero,156
    1bb4:	00002684 	movi	zero,154
    1bb8:	00002734 	movhi	zero,156
    1bbc:	00002698 	cmpnei	zero,zero,154
    1bc0:	0000251c 	xori	zero,zero,148
    1bc4:	00001c04 	movi	zero,112
    1bc8:	00002554 	movui	zero,149
    1bcc:	00002734 	movhi	zero,156
    1bd0:	00002560 	cmpeqi	zero,zero,149
    1bd4:	00002734 	movhi	zero,156
    1bd8:	000025c4 	movi	zero,151
    1bdc:	00002734 	movhi	zero,156
    1be0:	00002734 	movhi	zero,156
    1be4:	000025e4 	muli	zero,zero,151
    1be8:	d8c03117 	ldw	r3,196(sp)
    1bec:	d8802e15 	stw	r2,184(sp)
    1bf0:	00c7c83a 	sub	r3,zero,r3
    1bf4:	d8c03115 	stw	r3,196(sp)
    1bf8:	84000114 	ori	r16,r16,4
    1bfc:	ac400007 	ldb	r17,0(r21)
    1c00:	003f9706 	br	1a60 <__alt_data_end+0xfffd0d20>
    1c04:	00800c04 	movi	r2,48
    1c08:	d8802705 	stb	r2,156(sp)
    1c0c:	00801e04 	movi	r2,120
    1c10:	d8802745 	stb	r2,157(sp)
    1c14:	d9002a17 	ldw	r4,168(sp)
    1c18:	d8802e17 	ldw	r2,184(sp)
    1c1c:	d8002785 	stb	zero,158(sp)
    1c20:	e011883a 	mov	r8,fp
    1c24:	10c00104 	addi	r3,r2,4
    1c28:	14c00017 	ldw	r19,0(r2)
    1c2c:	002d883a 	mov	r22,zero
    1c30:	80800094 	ori	r2,r16,2
    1c34:	2002ca16 	blt	r4,zero,2760 <___vfprintf_internal_r+0xe88>
    1c38:	00bfdfc4 	movi	r2,-129
    1c3c:	80a4703a 	and	r18,r16,r2
    1c40:	d8c02e15 	stw	r3,184(sp)
    1c44:	94800094 	ori	r18,r18,2
    1c48:	9802b41e 	bne	r19,zero,271c <___vfprintf_internal_r+0xe44>
    1c4c:	014000b4 	movhi	r5,2
    1c50:	29632404 	addi	r5,r5,-29552
    1c54:	d9403915 	stw	r5,228(sp)
    1c58:	04401e04 	movi	r17,120
    1c5c:	d8802a17 	ldw	r2,168(sp)
    1c60:	0039883a 	mov	fp,zero
    1c64:	1001fa26 	beq	r2,zero,2450 <___vfprintf_internal_r+0xb78>
    1c68:	0027883a 	mov	r19,zero
    1c6c:	002d883a 	mov	r22,zero
    1c70:	00021906 	br	24d8 <___vfprintf_internal_r+0xc00>
    1c74:	d9002d17 	ldw	r4,180(sp)
    1c78:	b80b883a 	mov	r5,r23
    1c7c:	0003c8c0 	call	3c8c <__swsetup_r>
    1c80:	1005dc1e 	bne	r2,zero,33f4 <___vfprintf_internal_r+0x1b1c>
    1c84:	b880030b 	ldhu	r2,12(r23)
    1c88:	00c00284 	movi	r3,10
    1c8c:	1080068c 	andi	r2,r2,26
    1c90:	10ff3a1e 	bne	r2,r3,197c <__alt_data_end+0xfffd0c3c>
    1c94:	b880038f 	ldh	r2,14(r23)
    1c98:	103f3816 	blt	r2,zero,197c <__alt_data_end+0xfffd0c3c>
    1c9c:	d9c02e17 	ldw	r7,184(sp)
    1ca0:	d9002d17 	ldw	r4,180(sp)
    1ca4:	a80d883a 	mov	r6,r21
    1ca8:	b80b883a 	mov	r5,r23
    1cac:	0003bd00 	call	3bd0 <__sbprintf>
    1cb0:	00001106 	br	1cf8 <___vfprintf_internal_r+0x420>
    1cb4:	d9002d17 	ldw	r4,180(sp)
    1cb8:	d9801e04 	addi	r6,sp,120
    1cbc:	b80b883a 	mov	r5,r23
    1cc0:	00087500 	call	8750 <__sprint_r>
    1cc4:	1000081e 	bne	r2,zero,1ce8 <___vfprintf_internal_r+0x410>
    1cc8:	da000404 	addi	r8,sp,16
    1ccc:	003f5106 	br	1a14 <__alt_data_end+0xfffd0cd4>
    1cd0:	d8802017 	ldw	r2,128(sp)
    1cd4:	10000426 	beq	r2,zero,1ce8 <___vfprintf_internal_r+0x410>
    1cd8:	d9002d17 	ldw	r4,180(sp)
    1cdc:	d9801e04 	addi	r6,sp,120
    1ce0:	b80b883a 	mov	r5,r23
    1ce4:	00087500 	call	8750 <__sprint_r>
    1ce8:	b880030b 	ldhu	r2,12(r23)
    1cec:	1080100c 	andi	r2,r2,64
    1cf0:	1005c01e 	bne	r2,zero,33f4 <___vfprintf_internal_r+0x1b1c>
    1cf4:	d8802f17 	ldw	r2,188(sp)
    1cf8:	dfc04717 	ldw	ra,284(sp)
    1cfc:	df004617 	ldw	fp,280(sp)
    1d00:	ddc04517 	ldw	r23,276(sp)
    1d04:	dd804417 	ldw	r22,272(sp)
    1d08:	dd404317 	ldw	r21,268(sp)
    1d0c:	dd004217 	ldw	r20,264(sp)
    1d10:	dcc04117 	ldw	r19,260(sp)
    1d14:	dc804017 	ldw	r18,256(sp)
    1d18:	dc403f17 	ldw	r17,252(sp)
    1d1c:	dc003e17 	ldw	r16,248(sp)
    1d20:	dec04804 	addi	sp,sp,288
    1d24:	f800283a 	ret
    1d28:	d9002d17 	ldw	r4,180(sp)
    1d2c:	0005c980 	call	5c98 <__sinit>
    1d30:	003f0206 	br	193c <__alt_data_end+0xfffd0bfc>
    1d34:	d9002e17 	ldw	r4,184(sp)
    1d38:	d9402e17 	ldw	r5,184(sp)
    1d3c:	21000017 	ldw	r4,0(r4)
    1d40:	28800104 	addi	r2,r5,4
    1d44:	d9003115 	stw	r4,196(sp)
    1d48:	203fa716 	blt	r4,zero,1be8 <__alt_data_end+0xfffd0ea8>
    1d4c:	d8802e15 	stw	r2,184(sp)
    1d50:	ac400007 	ldb	r17,0(r21)
    1d54:	003f4206 	br	1a60 <__alt_data_end+0xfffd0d20>
    1d58:	ac400007 	ldb	r17,0(r21)
    1d5c:	01000a84 	movi	r4,42
    1d60:	a8c00044 	addi	r3,r21,1
    1d64:	89075826 	beq	r17,r4,3ac8 <___vfprintf_internal_r+0x21f0>
    1d68:	8cbff404 	addi	r18,r17,-48
    1d6c:	b486ae36 	bltu	r22,r18,3828 <___vfprintf_internal_r+0x1f50>
    1d70:	0009883a 	mov	r4,zero
    1d74:	1823883a 	mov	r17,r3
    1d78:	01400284 	movi	r5,10
    1d7c:	0000bc00 	call	bc0 <__mulsi3>
    1d80:	88c00007 	ldb	r3,0(r17)
    1d84:	1489883a 	add	r4,r2,r18
    1d88:	8d400044 	addi	r21,r17,1
    1d8c:	1cbff404 	addi	r18,r3,-48
    1d90:	a823883a 	mov	r17,r21
    1d94:	b4bff82e 	bgeu	r22,r18,1d78 <__alt_data_end+0xfffd1038>
    1d98:	1823883a 	mov	r17,r3
    1d9c:	2005f616 	blt	r4,zero,3578 <___vfprintf_internal_r+0x1ca0>
    1da0:	d9002a15 	stw	r4,168(sp)
    1da4:	003f2f06 	br	1a64 <__alt_data_end+0xfffd0d24>
    1da8:	84002014 	ori	r16,r16,128
    1dac:	ac400007 	ldb	r17,0(r21)
    1db0:	003f2b06 	br	1a60 <__alt_data_end+0xfffd0d20>
    1db4:	8cbff404 	addi	r18,r17,-48
    1db8:	d8003115 	stw	zero,196(sp)
    1dbc:	0009883a 	mov	r4,zero
    1dc0:	a823883a 	mov	r17,r21
    1dc4:	01400284 	movi	r5,10
    1dc8:	0000bc00 	call	bc0 <__mulsi3>
    1dcc:	88c00007 	ldb	r3,0(r17)
    1dd0:	9089883a 	add	r4,r18,r2
    1dd4:	ad400044 	addi	r21,r21,1
    1dd8:	1cbff404 	addi	r18,r3,-48
    1ddc:	a823883a 	mov	r17,r21
    1de0:	b4bff82e 	bgeu	r22,r18,1dc4 <__alt_data_end+0xfffd1084>
    1de4:	1823883a 	mov	r17,r3
    1de8:	d9003115 	stw	r4,196(sp)
    1dec:	003f1d06 	br	1a64 <__alt_data_end+0xfffd0d24>
    1df0:	8025883a 	mov	r18,r16
    1df4:	dc002903 	ldbu	r16,164(sp)
    1df8:	e011883a 	mov	r8,fp
    1dfc:	84003fcc 	andi	r16,r16,255
    1e00:	8007531e 	bne	r16,zero,3b50 <___vfprintf_internal_r+0x2278>
    1e04:	94800414 	ori	r18,r18,16
    1e08:	9080080c 	andi	r2,r18,32
    1e0c:	1003a326 	beq	r2,zero,2c9c <___vfprintf_internal_r+0x13c4>
    1e10:	d9002e17 	ldw	r4,184(sp)
    1e14:	20800117 	ldw	r2,4(r4)
    1e18:	24c00017 	ldw	r19,0(r4)
    1e1c:	21000204 	addi	r4,r4,8
    1e20:	d9002e15 	stw	r4,184(sp)
    1e24:	102d883a 	mov	r22,r2
    1e28:	10047316 	blt	r2,zero,2ff8 <___vfprintf_internal_r+0x1720>
    1e2c:	d9002a17 	ldw	r4,168(sp)
    1e30:	df002783 	ldbu	fp,158(sp)
    1e34:	2003e416 	blt	r4,zero,2dc8 <___vfprintf_internal_r+0x14f0>
    1e38:	00ffdfc4 	movi	r3,-129
    1e3c:	9d84b03a 	or	r2,r19,r22
    1e40:	90e4703a 	and	r18,r18,r3
    1e44:	10018026 	beq	r2,zero,2448 <___vfprintf_internal_r+0xb70>
    1e48:	b003ab26 	beq	r22,zero,2cf8 <___vfprintf_internal_r+0x1420>
    1e4c:	dc402915 	stw	r17,164(sp)
    1e50:	dc001e04 	addi	r16,sp,120
    1e54:	b023883a 	mov	r17,r22
    1e58:	402d883a 	mov	r22,r8
    1e5c:	9809883a 	mov	r4,r19
    1e60:	880b883a 	mov	r5,r17
    1e64:	01800284 	movi	r6,10
    1e68:	000f883a 	mov	r7,zero
    1e6c:	000ac940 	call	ac94 <__umoddi3>
    1e70:	10800c04 	addi	r2,r2,48
    1e74:	843fffc4 	addi	r16,r16,-1
    1e78:	9809883a 	mov	r4,r19
    1e7c:	880b883a 	mov	r5,r17
    1e80:	80800005 	stb	r2,0(r16)
    1e84:	01800284 	movi	r6,10
    1e88:	000f883a 	mov	r7,zero
    1e8c:	000a6980 	call	a698 <__udivdi3>
    1e90:	1027883a 	mov	r19,r2
    1e94:	10c4b03a 	or	r2,r2,r3
    1e98:	1823883a 	mov	r17,r3
    1e9c:	103fef1e 	bne	r2,zero,1e5c <__alt_data_end+0xfffd111c>
    1ea0:	d8c02817 	ldw	r3,160(sp)
    1ea4:	dc402917 	ldw	r17,164(sp)
    1ea8:	b011883a 	mov	r8,r22
    1eac:	1c07c83a 	sub	r3,r3,r16
    1eb0:	d8c02b15 	stw	r3,172(sp)
    1eb4:	00005f06 	br	2034 <___vfprintf_internal_r+0x75c>
    1eb8:	8025883a 	mov	r18,r16
    1ebc:	dc002903 	ldbu	r16,164(sp)
    1ec0:	e011883a 	mov	r8,fp
    1ec4:	84003fcc 	andi	r16,r16,255
    1ec8:	80071e1e 	bne	r16,zero,3b44 <___vfprintf_internal_r+0x226c>
    1ecc:	9080020c 	andi	r2,r18,8
    1ed0:	1004af26 	beq	r2,zero,3190 <___vfprintf_internal_r+0x18b8>
    1ed4:	d9002e17 	ldw	r4,184(sp)
    1ed8:	d9402e17 	ldw	r5,184(sp)
    1edc:	d8802e17 	ldw	r2,184(sp)
    1ee0:	21000017 	ldw	r4,0(r4)
    1ee4:	29400117 	ldw	r5,4(r5)
    1ee8:	10800204 	addi	r2,r2,8
    1eec:	d9003615 	stw	r4,216(sp)
    1ef0:	d9403815 	stw	r5,224(sp)
    1ef4:	d8802e15 	stw	r2,184(sp)
    1ef8:	d9003617 	ldw	r4,216(sp)
    1efc:	d9403817 	ldw	r5,224(sp)
    1f00:	da003d15 	stw	r8,244(sp)
    1f04:	04000044 	movi	r16,1
    1f08:	00083c80 	call	83c8 <__fpclassifyd>
    1f0c:	da003d17 	ldw	r8,244(sp)
    1f10:	1404441e 	bne	r2,r16,3024 <___vfprintf_internal_r+0x174c>
    1f14:	d9003617 	ldw	r4,216(sp)
    1f18:	d9403817 	ldw	r5,224(sp)
    1f1c:	000d883a 	mov	r6,zero
    1f20:	000f883a 	mov	r7,zero
    1f24:	000c6380 	call	c638 <__ledf2>
    1f28:	da003d17 	ldw	r8,244(sp)
    1f2c:	1005e316 	blt	r2,zero,36bc <___vfprintf_internal_r+0x1de4>
    1f30:	df002783 	ldbu	fp,158(sp)
    1f34:	008011c4 	movi	r2,71
    1f38:	1445580e 	bge	r2,r17,349c <___vfprintf_internal_r+0x1bc4>
    1f3c:	040000b4 	movhi	r16,2
    1f40:	84231c04 	addi	r16,r16,-29584
    1f44:	00c000c4 	movi	r3,3
    1f48:	00bfdfc4 	movi	r2,-129
    1f4c:	d8c02915 	stw	r3,164(sp)
    1f50:	90a4703a 	and	r18,r18,r2
    1f54:	d8c02b15 	stw	r3,172(sp)
    1f58:	d8002a15 	stw	zero,168(sp)
    1f5c:	d8003215 	stw	zero,200(sp)
    1f60:	00003a06 	br	204c <___vfprintf_internal_r+0x774>
    1f64:	84000214 	ori	r16,r16,8
    1f68:	ac400007 	ldb	r17,0(r21)
    1f6c:	003ebc06 	br	1a60 <__alt_data_end+0xfffd0d20>
    1f70:	8025883a 	mov	r18,r16
    1f74:	dc002903 	ldbu	r16,164(sp)
    1f78:	e011883a 	mov	r8,fp
    1f7c:	84003fcc 	andi	r16,r16,255
    1f80:	8007001e 	bne	r16,zero,3b84 <___vfprintf_internal_r+0x22ac>
    1f84:	94800414 	ori	r18,r18,16
    1f88:	9080080c 	andi	r2,r18,32
    1f8c:	1002fa26 	beq	r2,zero,2b78 <___vfprintf_internal_r+0x12a0>
    1f90:	d9002e17 	ldw	r4,184(sp)
    1f94:	d9402a17 	ldw	r5,168(sp)
    1f98:	d8002785 	stb	zero,158(sp)
    1f9c:	20800204 	addi	r2,r4,8
    1fa0:	24c00017 	ldw	r19,0(r4)
    1fa4:	25800117 	ldw	r22,4(r4)
    1fa8:	2804b116 	blt	r5,zero,3270 <___vfprintf_internal_r+0x1998>
    1fac:	013fdfc4 	movi	r4,-129
    1fb0:	9d86b03a 	or	r3,r19,r22
    1fb4:	d8802e15 	stw	r2,184(sp)
    1fb8:	9124703a 	and	r18,r18,r4
    1fbc:	1802fb1e 	bne	r3,zero,2bac <___vfprintf_internal_r+0x12d4>
    1fc0:	d8c02a17 	ldw	r3,168(sp)
    1fc4:	0039883a 	mov	fp,zero
    1fc8:	1805e526 	beq	r3,zero,3760 <___vfprintf_internal_r+0x1e88>
    1fcc:	0027883a 	mov	r19,zero
    1fd0:	002d883a 	mov	r22,zero
    1fd4:	dc001e04 	addi	r16,sp,120
    1fd8:	9806d0fa 	srli	r3,r19,3
    1fdc:	b008977a 	slli	r4,r22,29
    1fe0:	b02cd0fa 	srli	r22,r22,3
    1fe4:	9cc001cc 	andi	r19,r19,7
    1fe8:	98800c04 	addi	r2,r19,48
    1fec:	843fffc4 	addi	r16,r16,-1
    1ff0:	20e6b03a 	or	r19,r4,r3
    1ff4:	80800005 	stb	r2,0(r16)
    1ff8:	9d86b03a 	or	r3,r19,r22
    1ffc:	183ff61e 	bne	r3,zero,1fd8 <__alt_data_end+0xfffd1298>
    2000:	90c0004c 	andi	r3,r18,1
    2004:	18014126 	beq	r3,zero,250c <___vfprintf_internal_r+0xc34>
    2008:	10803fcc 	andi	r2,r2,255
    200c:	1080201c 	xori	r2,r2,128
    2010:	10bfe004 	addi	r2,r2,-128
    2014:	00c00c04 	movi	r3,48
    2018:	10c13c26 	beq	r2,r3,250c <___vfprintf_internal_r+0xc34>
    201c:	80ffffc5 	stb	r3,-1(r16)
    2020:	d8c02817 	ldw	r3,160(sp)
    2024:	80bfffc4 	addi	r2,r16,-1
    2028:	1021883a 	mov	r16,r2
    202c:	1887c83a 	sub	r3,r3,r2
    2030:	d8c02b15 	stw	r3,172(sp)
    2034:	d8802b17 	ldw	r2,172(sp)
    2038:	d9002a17 	ldw	r4,168(sp)
    203c:	1100010e 	bge	r2,r4,2044 <___vfprintf_internal_r+0x76c>
    2040:	2005883a 	mov	r2,r4
    2044:	d8802915 	stw	r2,164(sp)
    2048:	d8003215 	stw	zero,200(sp)
    204c:	e7003fcc 	andi	fp,fp,255
    2050:	e700201c 	xori	fp,fp,128
    2054:	e73fe004 	addi	fp,fp,-128
    2058:	e0000326 	beq	fp,zero,2068 <___vfprintf_internal_r+0x790>
    205c:	d8c02917 	ldw	r3,164(sp)
    2060:	18c00044 	addi	r3,r3,1
    2064:	d8c02915 	stw	r3,164(sp)
    2068:	90c0008c 	andi	r3,r18,2
    206c:	d8c02c15 	stw	r3,176(sp)
    2070:	18000326 	beq	r3,zero,2080 <___vfprintf_internal_r+0x7a8>
    2074:	d8c02917 	ldw	r3,164(sp)
    2078:	18c00084 	addi	r3,r3,2
    207c:	d8c02915 	stw	r3,164(sp)
    2080:	90c0210c 	andi	r3,r18,132
    2084:	d8c03015 	stw	r3,192(sp)
    2088:	1801c51e 	bne	r3,zero,27a0 <___vfprintf_internal_r+0xec8>
    208c:	d9003117 	ldw	r4,196(sp)
    2090:	d8c02917 	ldw	r3,164(sp)
    2094:	20e7c83a 	sub	r19,r4,r3
    2098:	04c1c10e 	bge	zero,r19,27a0 <___vfprintf_internal_r+0xec8>
    209c:	02400404 	movi	r9,16
    20a0:	d8c02017 	ldw	r3,128(sp)
    20a4:	d8801f17 	ldw	r2,124(sp)
    20a8:	4cc52f0e 	bge	r9,r19,3568 <___vfprintf_internal_r+0x1c90>
    20ac:	014000b4 	movhi	r5,2
    20b0:	29632f84 	addi	r5,r5,-29506
    20b4:	dc403b15 	stw	r17,236(sp)
    20b8:	d9403515 	stw	r5,212(sp)
    20bc:	9823883a 	mov	r17,r19
    20c0:	482d883a 	mov	r22,r9
    20c4:	9027883a 	mov	r19,r18
    20c8:	070001c4 	movi	fp,7
    20cc:	8025883a 	mov	r18,r16
    20d0:	dc002d17 	ldw	r16,180(sp)
    20d4:	00000306 	br	20e4 <___vfprintf_internal_r+0x80c>
    20d8:	8c7ffc04 	addi	r17,r17,-16
    20dc:	42000204 	addi	r8,r8,8
    20e0:	b440130e 	bge	r22,r17,2130 <___vfprintf_internal_r+0x858>
    20e4:	010000b4 	movhi	r4,2
    20e8:	18c00404 	addi	r3,r3,16
    20ec:	10800044 	addi	r2,r2,1
    20f0:	21232f84 	addi	r4,r4,-29506
    20f4:	41000015 	stw	r4,0(r8)
    20f8:	45800115 	stw	r22,4(r8)
    20fc:	d8c02015 	stw	r3,128(sp)
    2100:	d8801f15 	stw	r2,124(sp)
    2104:	e0bff40e 	bge	fp,r2,20d8 <__alt_data_end+0xfffd1398>
    2108:	d9801e04 	addi	r6,sp,120
    210c:	b80b883a 	mov	r5,r23
    2110:	8009883a 	mov	r4,r16
    2114:	00087500 	call	8750 <__sprint_r>
    2118:	103ef31e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    211c:	8c7ffc04 	addi	r17,r17,-16
    2120:	d8c02017 	ldw	r3,128(sp)
    2124:	d8801f17 	ldw	r2,124(sp)
    2128:	da000404 	addi	r8,sp,16
    212c:	b47fed16 	blt	r22,r17,20e4 <__alt_data_end+0xfffd13a4>
    2130:	9021883a 	mov	r16,r18
    2134:	9825883a 	mov	r18,r19
    2138:	8827883a 	mov	r19,r17
    213c:	dc403b17 	ldw	r17,236(sp)
    2140:	d9403517 	ldw	r5,212(sp)
    2144:	98c7883a 	add	r3,r19,r3
    2148:	10800044 	addi	r2,r2,1
    214c:	41400015 	stw	r5,0(r8)
    2150:	44c00115 	stw	r19,4(r8)
    2154:	d8c02015 	stw	r3,128(sp)
    2158:	d8801f15 	stw	r2,124(sp)
    215c:	010001c4 	movi	r4,7
    2160:	2082c516 	blt	r4,r2,2c78 <___vfprintf_internal_r+0x13a0>
    2164:	df002787 	ldb	fp,158(sp)
    2168:	42000204 	addi	r8,r8,8
    216c:	e0000c26 	beq	fp,zero,21a0 <___vfprintf_internal_r+0x8c8>
    2170:	d8801f17 	ldw	r2,124(sp)
    2174:	d9002784 	addi	r4,sp,158
    2178:	18c00044 	addi	r3,r3,1
    217c:	10800044 	addi	r2,r2,1
    2180:	41000015 	stw	r4,0(r8)
    2184:	01000044 	movi	r4,1
    2188:	41000115 	stw	r4,4(r8)
    218c:	d8c02015 	stw	r3,128(sp)
    2190:	d8801f15 	stw	r2,124(sp)
    2194:	010001c4 	movi	r4,7
    2198:	20825e16 	blt	r4,r2,2b14 <___vfprintf_internal_r+0x123c>
    219c:	42000204 	addi	r8,r8,8
    21a0:	d8802c17 	ldw	r2,176(sp)
    21a4:	10000c26 	beq	r2,zero,21d8 <___vfprintf_internal_r+0x900>
    21a8:	d8801f17 	ldw	r2,124(sp)
    21ac:	d9002704 	addi	r4,sp,156
    21b0:	18c00084 	addi	r3,r3,2
    21b4:	10800044 	addi	r2,r2,1
    21b8:	41000015 	stw	r4,0(r8)
    21bc:	01000084 	movi	r4,2
    21c0:	41000115 	stw	r4,4(r8)
    21c4:	d8c02015 	stw	r3,128(sp)
    21c8:	d8801f15 	stw	r2,124(sp)
    21cc:	010001c4 	movi	r4,7
    21d0:	20825816 	blt	r4,r2,2b34 <___vfprintf_internal_r+0x125c>
    21d4:	42000204 	addi	r8,r8,8
    21d8:	d9003017 	ldw	r4,192(sp)
    21dc:	00802004 	movi	r2,128
    21e0:	2081bb26 	beq	r4,r2,28d0 <___vfprintf_internal_r+0xff8>
    21e4:	d9402a17 	ldw	r5,168(sp)
    21e8:	d8802b17 	ldw	r2,172(sp)
    21ec:	28adc83a 	sub	r22,r5,r2
    21f0:	0580310e 	bge	zero,r22,22b8 <___vfprintf_internal_r+0x9e0>
    21f4:	07000404 	movi	fp,16
    21f8:	d8801f17 	ldw	r2,124(sp)
    21fc:	e584360e 	bge	fp,r22,32d8 <___vfprintf_internal_r+0x1a00>
    2200:	014000b4 	movhi	r5,2
    2204:	29632b84 	addi	r5,r5,-29522
    2208:	dc402a15 	stw	r17,168(sp)
    220c:	d9402c15 	stw	r5,176(sp)
    2210:	b023883a 	mov	r17,r22
    2214:	04c001c4 	movi	r19,7
    2218:	a82d883a 	mov	r22,r21
    221c:	902b883a 	mov	r21,r18
    2220:	8025883a 	mov	r18,r16
    2224:	dc002d17 	ldw	r16,180(sp)
    2228:	00000306 	br	2238 <___vfprintf_internal_r+0x960>
    222c:	8c7ffc04 	addi	r17,r17,-16
    2230:	42000204 	addi	r8,r8,8
    2234:	e440110e 	bge	fp,r17,227c <___vfprintf_internal_r+0x9a4>
    2238:	18c00404 	addi	r3,r3,16
    223c:	10800044 	addi	r2,r2,1
    2240:	45000015 	stw	r20,0(r8)
    2244:	47000115 	stw	fp,4(r8)
    2248:	d8c02015 	stw	r3,128(sp)
    224c:	d8801f15 	stw	r2,124(sp)
    2250:	98bff60e 	bge	r19,r2,222c <__alt_data_end+0xfffd14ec>
    2254:	d9801e04 	addi	r6,sp,120
    2258:	b80b883a 	mov	r5,r23
    225c:	8009883a 	mov	r4,r16
    2260:	00087500 	call	8750 <__sprint_r>
    2264:	103ea01e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2268:	8c7ffc04 	addi	r17,r17,-16
    226c:	d8c02017 	ldw	r3,128(sp)
    2270:	d8801f17 	ldw	r2,124(sp)
    2274:	da000404 	addi	r8,sp,16
    2278:	e47fef16 	blt	fp,r17,2238 <__alt_data_end+0xfffd14f8>
    227c:	9021883a 	mov	r16,r18
    2280:	a825883a 	mov	r18,r21
    2284:	b02b883a 	mov	r21,r22
    2288:	882d883a 	mov	r22,r17
    228c:	dc402a17 	ldw	r17,168(sp)
    2290:	d9002c17 	ldw	r4,176(sp)
    2294:	1d87883a 	add	r3,r3,r22
    2298:	10800044 	addi	r2,r2,1
    229c:	41000015 	stw	r4,0(r8)
    22a0:	45800115 	stw	r22,4(r8)
    22a4:	d8c02015 	stw	r3,128(sp)
    22a8:	d8801f15 	stw	r2,124(sp)
    22ac:	010001c4 	movi	r4,7
    22b0:	20821016 	blt	r4,r2,2af4 <___vfprintf_internal_r+0x121c>
    22b4:	42000204 	addi	r8,r8,8
    22b8:	9080400c 	andi	r2,r18,256
    22bc:	10013a1e 	bne	r2,zero,27a8 <___vfprintf_internal_r+0xed0>
    22c0:	d9402b17 	ldw	r5,172(sp)
    22c4:	d8801f17 	ldw	r2,124(sp)
    22c8:	44000015 	stw	r16,0(r8)
    22cc:	1947883a 	add	r3,r3,r5
    22d0:	10800044 	addi	r2,r2,1
    22d4:	41400115 	stw	r5,4(r8)
    22d8:	d8c02015 	stw	r3,128(sp)
    22dc:	d8801f15 	stw	r2,124(sp)
    22e0:	010001c4 	movi	r4,7
    22e4:	2081f516 	blt	r4,r2,2abc <___vfprintf_internal_r+0x11e4>
    22e8:	42000204 	addi	r8,r8,8
    22ec:	9480010c 	andi	r18,r18,4
    22f0:	90003226 	beq	r18,zero,23bc <___vfprintf_internal_r+0xae4>
    22f4:	d9403117 	ldw	r5,196(sp)
    22f8:	d8802917 	ldw	r2,164(sp)
    22fc:	28a1c83a 	sub	r16,r5,r2
    2300:	04002e0e 	bge	zero,r16,23bc <___vfprintf_internal_r+0xae4>
    2304:	04400404 	movi	r17,16
    2308:	d8801f17 	ldw	r2,124(sp)
    230c:	8c04c40e 	bge	r17,r16,3620 <___vfprintf_internal_r+0x1d48>
    2310:	014000b4 	movhi	r5,2
    2314:	29632f84 	addi	r5,r5,-29506
    2318:	d9403515 	stw	r5,212(sp)
    231c:	048001c4 	movi	r18,7
    2320:	dcc02d17 	ldw	r19,180(sp)
    2324:	00000306 	br	2334 <___vfprintf_internal_r+0xa5c>
    2328:	843ffc04 	addi	r16,r16,-16
    232c:	42000204 	addi	r8,r8,8
    2330:	8c00130e 	bge	r17,r16,2380 <___vfprintf_internal_r+0xaa8>
    2334:	010000b4 	movhi	r4,2
    2338:	18c00404 	addi	r3,r3,16
    233c:	10800044 	addi	r2,r2,1
    2340:	21232f84 	addi	r4,r4,-29506
    2344:	41000015 	stw	r4,0(r8)
    2348:	44400115 	stw	r17,4(r8)
    234c:	d8c02015 	stw	r3,128(sp)
    2350:	d8801f15 	stw	r2,124(sp)
    2354:	90bff40e 	bge	r18,r2,2328 <__alt_data_end+0xfffd15e8>
    2358:	d9801e04 	addi	r6,sp,120
    235c:	b80b883a 	mov	r5,r23
    2360:	9809883a 	mov	r4,r19
    2364:	00087500 	call	8750 <__sprint_r>
    2368:	103e5f1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    236c:	843ffc04 	addi	r16,r16,-16
    2370:	d8c02017 	ldw	r3,128(sp)
    2374:	d8801f17 	ldw	r2,124(sp)
    2378:	da000404 	addi	r8,sp,16
    237c:	8c3fed16 	blt	r17,r16,2334 <__alt_data_end+0xfffd15f4>
    2380:	d9403517 	ldw	r5,212(sp)
    2384:	1c07883a 	add	r3,r3,r16
    2388:	10800044 	addi	r2,r2,1
    238c:	41400015 	stw	r5,0(r8)
    2390:	44000115 	stw	r16,4(r8)
    2394:	d8c02015 	stw	r3,128(sp)
    2398:	d8801f15 	stw	r2,124(sp)
    239c:	010001c4 	movi	r4,7
    23a0:	2080060e 	bge	r4,r2,23bc <___vfprintf_internal_r+0xae4>
    23a4:	d9002d17 	ldw	r4,180(sp)
    23a8:	d9801e04 	addi	r6,sp,120
    23ac:	b80b883a 	mov	r5,r23
    23b0:	00087500 	call	8750 <__sprint_r>
    23b4:	103e4c1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    23b8:	d8c02017 	ldw	r3,128(sp)
    23bc:	d8803117 	ldw	r2,196(sp)
    23c0:	d9002917 	ldw	r4,164(sp)
    23c4:	1100010e 	bge	r2,r4,23cc <___vfprintf_internal_r+0xaf4>
    23c8:	2005883a 	mov	r2,r4
    23cc:	d9402f17 	ldw	r5,188(sp)
    23d0:	288b883a 	add	r5,r5,r2
    23d4:	d9402f15 	stw	r5,188(sp)
    23d8:	1801c01e 	bne	r3,zero,2adc <___vfprintf_internal_r+0x1204>
    23dc:	a8800007 	ldb	r2,0(r21)
    23e0:	d8001f15 	stw	zero,124(sp)
    23e4:	da000404 	addi	r8,sp,16
    23e8:	103d751e 	bne	r2,zero,19c0 <__alt_data_end+0xfffd0c80>
    23ec:	a823883a 	mov	r17,r21
    23f0:	003d8b06 	br	1a20 <__alt_data_end+0xfffd0ce0>
    23f4:	8025883a 	mov	r18,r16
    23f8:	dc002903 	ldbu	r16,164(sp)
    23fc:	e011883a 	mov	r8,fp
    2400:	84003fcc 	andi	r16,r16,255
    2404:	8005e51e 	bne	r16,zero,3b9c <___vfprintf_internal_r+0x22c4>
    2408:	94800414 	ori	r18,r18,16
    240c:	9080080c 	andi	r2,r18,32
    2410:	10022b26 	beq	r2,zero,2cc0 <___vfprintf_internal_r+0x13e8>
    2414:	d9002e17 	ldw	r4,184(sp)
    2418:	d9402a17 	ldw	r5,168(sp)
    241c:	d8002785 	stb	zero,158(sp)
    2420:	20c00204 	addi	r3,r4,8
    2424:	24c00017 	ldw	r19,0(r4)
    2428:	25800117 	ldw	r22,4(r4)
    242c:	28042e16 	blt	r5,zero,34e8 <___vfprintf_internal_r+0x1c10>
    2430:	013fdfc4 	movi	r4,-129
    2434:	9d84b03a 	or	r2,r19,r22
    2438:	d8c02e15 	stw	r3,184(sp)
    243c:	9124703a 	and	r18,r18,r4
    2440:	0039883a 	mov	fp,zero
    2444:	103e801e 	bne	r2,zero,1e48 <__alt_data_end+0xfffd1108>
    2448:	d9002a17 	ldw	r4,168(sp)
    244c:	2002e01e 	bne	r4,zero,2fd0 <___vfprintf_internal_r+0x16f8>
    2450:	d8002a15 	stw	zero,168(sp)
    2454:	d8002b15 	stw	zero,172(sp)
    2458:	dc001e04 	addi	r16,sp,120
    245c:	003ef506 	br	2034 <__alt_data_end+0xfffd12f4>
    2460:	8025883a 	mov	r18,r16
    2464:	dc002903 	ldbu	r16,164(sp)
    2468:	e011883a 	mov	r8,fp
    246c:	84003fcc 	andi	r16,r16,255
    2470:	8005ba1e 	bne	r16,zero,3b5c <___vfprintf_internal_r+0x2284>
    2474:	010000b4 	movhi	r4,2
    2478:	21231f04 	addi	r4,r4,-29572
    247c:	d9003915 	stw	r4,228(sp)
    2480:	9080080c 	andi	r2,r18,32
    2484:	10006126 	beq	r2,zero,260c <___vfprintf_internal_r+0xd34>
    2488:	d9402e17 	ldw	r5,184(sp)
    248c:	2cc00017 	ldw	r19,0(r5)
    2490:	2d800117 	ldw	r22,4(r5)
    2494:	29400204 	addi	r5,r5,8
    2498:	d9402e15 	stw	r5,184(sp)
    249c:	9080004c 	andi	r2,r18,1
    24a0:	1001ac26 	beq	r2,zero,2b54 <___vfprintf_internal_r+0x127c>
    24a4:	9d84b03a 	or	r2,r19,r22
    24a8:	10038526 	beq	r2,zero,32c0 <___vfprintf_internal_r+0x19e8>
    24ac:	d8c02a17 	ldw	r3,168(sp)
    24b0:	00800c04 	movi	r2,48
    24b4:	d8802705 	stb	r2,156(sp)
    24b8:	dc402745 	stb	r17,157(sp)
    24bc:	d8002785 	stb	zero,158(sp)
    24c0:	90800094 	ori	r2,r18,2
    24c4:	18047916 	blt	r3,zero,36ac <___vfprintf_internal_r+0x1dd4>
    24c8:	00bfdfc4 	movi	r2,-129
    24cc:	90a4703a 	and	r18,r18,r2
    24d0:	94800094 	ori	r18,r18,2
    24d4:	0039883a 	mov	fp,zero
    24d8:	d9003917 	ldw	r4,228(sp)
    24dc:	dc001e04 	addi	r16,sp,120
    24e0:	988003cc 	andi	r2,r19,15
    24e4:	b006973a 	slli	r3,r22,28
    24e8:	2085883a 	add	r2,r4,r2
    24ec:	9826d13a 	srli	r19,r19,4
    24f0:	10800003 	ldbu	r2,0(r2)
    24f4:	b02cd13a 	srli	r22,r22,4
    24f8:	843fffc4 	addi	r16,r16,-1
    24fc:	1ce6b03a 	or	r19,r3,r19
    2500:	80800005 	stb	r2,0(r16)
    2504:	9d84b03a 	or	r2,r19,r22
    2508:	103ff51e 	bne	r2,zero,24e0 <__alt_data_end+0xfffd17a0>
    250c:	d8c02817 	ldw	r3,160(sp)
    2510:	1c07c83a 	sub	r3,r3,r16
    2514:	d8c02b15 	stw	r3,172(sp)
    2518:	003ec606 	br	2034 <__alt_data_end+0xfffd12f4>
    251c:	8025883a 	mov	r18,r16
    2520:	dc002903 	ldbu	r16,164(sp)
    2524:	e011883a 	mov	r8,fp
    2528:	84003fcc 	andi	r16,r16,255
    252c:	803e9626 	beq	r16,zero,1f88 <__alt_data_end+0xfffd1248>
    2530:	d8c02b03 	ldbu	r3,172(sp)
    2534:	d8c02785 	stb	r3,158(sp)
    2538:	003e9306 	br	1f88 <__alt_data_end+0xfffd1248>
    253c:	00c00044 	movi	r3,1
    2540:	d8c02905 	stb	r3,164(sp)
    2544:	00c00ac4 	movi	r3,43
    2548:	d8c02b05 	stb	r3,172(sp)
    254c:	ac400007 	ldb	r17,0(r21)
    2550:	003d4306 	br	1a60 <__alt_data_end+0xfffd0d20>
    2554:	84000814 	ori	r16,r16,32
    2558:	ac400007 	ldb	r17,0(r21)
    255c:	003d4006 	br	1a60 <__alt_data_end+0xfffd0d20>
    2560:	d8802e17 	ldw	r2,184(sp)
    2564:	8025883a 	mov	r18,r16
    2568:	d8002785 	stb	zero,158(sp)
    256c:	14000017 	ldw	r16,0(r2)
    2570:	e011883a 	mov	r8,fp
    2574:	14c00104 	addi	r19,r2,4
    2578:	80042d26 	beq	r16,zero,3630 <___vfprintf_internal_r+0x1d58>
    257c:	d8c02a17 	ldw	r3,168(sp)
    2580:	1803e416 	blt	r3,zero,3514 <___vfprintf_internal_r+0x1c3c>
    2584:	180d883a 	mov	r6,r3
    2588:	000b883a 	mov	r5,zero
    258c:	8009883a 	mov	r4,r16
    2590:	df003d15 	stw	fp,244(sp)
    2594:	0006a040 	call	6a04 <memchr>
    2598:	da003d17 	ldw	r8,244(sp)
    259c:	10046826 	beq	r2,zero,3740 <___vfprintf_internal_r+0x1e68>
    25a0:	1405c83a 	sub	r2,r2,r16
    25a4:	d8802b15 	stw	r2,172(sp)
    25a8:	1003e016 	blt	r2,zero,352c <___vfprintf_internal_r+0x1c54>
    25ac:	df002783 	ldbu	fp,158(sp)
    25b0:	d8802915 	stw	r2,164(sp)
    25b4:	dcc02e15 	stw	r19,184(sp)
    25b8:	d8002a15 	stw	zero,168(sp)
    25bc:	d8003215 	stw	zero,200(sp)
    25c0:	003ea206 	br	204c <__alt_data_end+0xfffd130c>
    25c4:	8025883a 	mov	r18,r16
    25c8:	dc002903 	ldbu	r16,164(sp)
    25cc:	e011883a 	mov	r8,fp
    25d0:	84003fcc 	andi	r16,r16,255
    25d4:	803f8d26 	beq	r16,zero,240c <__alt_data_end+0xfffd16cc>
    25d8:	d8c02b03 	ldbu	r3,172(sp)
    25dc:	d8c02785 	stb	r3,158(sp)
    25e0:	003f8a06 	br	240c <__alt_data_end+0xfffd16cc>
    25e4:	8025883a 	mov	r18,r16
    25e8:	dc002903 	ldbu	r16,164(sp)
    25ec:	e011883a 	mov	r8,fp
    25f0:	84003fcc 	andi	r16,r16,255
    25f4:	8005661e 	bne	r16,zero,3b90 <___vfprintf_internal_r+0x22b8>
    25f8:	010000b4 	movhi	r4,2
    25fc:	21232404 	addi	r4,r4,-29552
    2600:	d9003915 	stw	r4,228(sp)
    2604:	9080080c 	andi	r2,r18,32
    2608:	103f9f1e 	bne	r2,zero,2488 <__alt_data_end+0xfffd1748>
    260c:	9080040c 	andi	r2,r18,16
    2610:	1002eb26 	beq	r2,zero,31c0 <___vfprintf_internal_r+0x18e8>
    2614:	d8802e17 	ldw	r2,184(sp)
    2618:	002d883a 	mov	r22,zero
    261c:	14c00017 	ldw	r19,0(r2)
    2620:	10800104 	addi	r2,r2,4
    2624:	d8802e15 	stw	r2,184(sp)
    2628:	003f9c06 	br	249c <__alt_data_end+0xfffd175c>
    262c:	d8802b07 	ldb	r2,172(sp)
    2630:	1002e11e 	bne	r2,zero,31b8 <___vfprintf_internal_r+0x18e0>
    2634:	00c00044 	movi	r3,1
    2638:	d8c02905 	stb	r3,164(sp)
    263c:	00c00804 	movi	r3,32
    2640:	d8c02b05 	stb	r3,172(sp)
    2644:	ac400007 	ldb	r17,0(r21)
    2648:	003d0506 	br	1a60 <__alt_data_end+0xfffd0d20>
    264c:	84000054 	ori	r16,r16,1
    2650:	ac400007 	ldb	r17,0(r21)
    2654:	003d0206 	br	1a60 <__alt_data_end+0xfffd0d20>
    2658:	8025883a 	mov	r18,r16
    265c:	dc002903 	ldbu	r16,164(sp)
    2660:	e011883a 	mov	r8,fp
    2664:	84003fcc 	andi	r16,r16,255
    2668:	803de726 	beq	r16,zero,1e08 <__alt_data_end+0xfffd10c8>
    266c:	d8c02b03 	ldbu	r3,172(sp)
    2670:	d8c02785 	stb	r3,158(sp)
    2674:	003de406 	br	1e08 <__alt_data_end+0xfffd10c8>
    2678:	84001014 	ori	r16,r16,64
    267c:	ac400007 	ldb	r17,0(r21)
    2680:	003cf706 	br	1a60 <__alt_data_end+0xfffd0d20>
    2684:	ac400007 	ldb	r17,0(r21)
    2688:	00801b04 	movi	r2,108
    268c:	88838f26 	beq	r17,r2,34cc <___vfprintf_internal_r+0x1bf4>
    2690:	84000414 	ori	r16,r16,16
    2694:	003cf206 	br	1a60 <__alt_data_end+0xfffd0d20>
    2698:	8025883a 	mov	r18,r16
    269c:	dc002903 	ldbu	r16,164(sp)
    26a0:	e011883a 	mov	r8,fp
    26a4:	84003fcc 	andi	r16,r16,255
    26a8:	80053f1e 	bne	r16,zero,3ba8 <___vfprintf_internal_r+0x22d0>
    26ac:	9080080c 	andi	r2,r18,32
    26b0:	1002d226 	beq	r2,zero,31fc <___vfprintf_internal_r+0x1924>
    26b4:	d9002e17 	ldw	r4,184(sp)
    26b8:	d9402f17 	ldw	r5,188(sp)
    26bc:	20800017 	ldw	r2,0(r4)
    26c0:	2807d7fa 	srai	r3,r5,31
    26c4:	21000104 	addi	r4,r4,4
    26c8:	d9002e15 	stw	r4,184(sp)
    26cc:	11400015 	stw	r5,0(r2)
    26d0:	10c00115 	stw	r3,4(r2)
    26d4:	003cb806 	br	19b8 <__alt_data_end+0xfffd0c78>
    26d8:	d8c02e17 	ldw	r3,184(sp)
    26dc:	d9002e17 	ldw	r4,184(sp)
    26e0:	8025883a 	mov	r18,r16
    26e4:	18800017 	ldw	r2,0(r3)
    26e8:	21000104 	addi	r4,r4,4
    26ec:	00c00044 	movi	r3,1
    26f0:	e011883a 	mov	r8,fp
    26f4:	d8c02915 	stw	r3,164(sp)
    26f8:	d8002785 	stb	zero,158(sp)
    26fc:	d8801405 	stb	r2,80(sp)
    2700:	d9002e15 	stw	r4,184(sp)
    2704:	d8c02b15 	stw	r3,172(sp)
    2708:	d8002a15 	stw	zero,168(sp)
    270c:	d8003215 	stw	zero,200(sp)
    2710:	dc001404 	addi	r16,sp,80
    2714:	0039883a 	mov	fp,zero
    2718:	003e5306 	br	2068 <__alt_data_end+0xfffd1328>
    271c:	010000b4 	movhi	r4,2
    2720:	21232404 	addi	r4,r4,-29552
    2724:	0039883a 	mov	fp,zero
    2728:	d9003915 	stw	r4,228(sp)
    272c:	04401e04 	movi	r17,120
    2730:	003f6906 	br	24d8 <__alt_data_end+0xfffd1798>
    2734:	8025883a 	mov	r18,r16
    2738:	dc002903 	ldbu	r16,164(sp)
    273c:	e011883a 	mov	r8,fp
    2740:	84003fcc 	andi	r16,r16,255
    2744:	8005081e 	bne	r16,zero,3b68 <___vfprintf_internal_r+0x2290>
    2748:	883d6126 	beq	r17,zero,1cd0 <__alt_data_end+0xfffd0f90>
    274c:	00c00044 	movi	r3,1
    2750:	d8c02915 	stw	r3,164(sp)
    2754:	dc401405 	stb	r17,80(sp)
    2758:	d8002785 	stb	zero,158(sp)
    275c:	003fe906 	br	2704 <__alt_data_end+0xfffd19c4>
    2760:	014000b4 	movhi	r5,2
    2764:	29632404 	addi	r5,r5,-29552
    2768:	d9403915 	stw	r5,228(sp)
    276c:	d8c02e15 	stw	r3,184(sp)
    2770:	1025883a 	mov	r18,r2
    2774:	04401e04 	movi	r17,120
    2778:	9d84b03a 	or	r2,r19,r22
    277c:	1000fc1e 	bne	r2,zero,2b70 <___vfprintf_internal_r+0x1298>
    2780:	0039883a 	mov	fp,zero
    2784:	00800084 	movi	r2,2
    2788:	10803fcc 	andi	r2,r2,255
    278c:	00c00044 	movi	r3,1
    2790:	10c20f26 	beq	r2,r3,2fd0 <___vfprintf_internal_r+0x16f8>
    2794:	00c00084 	movi	r3,2
    2798:	10fd3326 	beq	r2,r3,1c68 <__alt_data_end+0xfffd0f28>
    279c:	003e0b06 	br	1fcc <__alt_data_end+0xfffd128c>
    27a0:	d8c02017 	ldw	r3,128(sp)
    27a4:	003e7106 	br	216c <__alt_data_end+0xfffd142c>
    27a8:	00801944 	movi	r2,101
    27ac:	14407e0e 	bge	r2,r17,29a8 <___vfprintf_internal_r+0x10d0>
    27b0:	d9003617 	ldw	r4,216(sp)
    27b4:	d9403817 	ldw	r5,224(sp)
    27b8:	000d883a 	mov	r6,zero
    27bc:	000f883a 	mov	r7,zero
    27c0:	d8c03c15 	stw	r3,240(sp)
    27c4:	da003d15 	stw	r8,244(sp)
    27c8:	000c4d40 	call	c4d4 <__eqdf2>
    27cc:	d8c03c17 	ldw	r3,240(sp)
    27d0:	da003d17 	ldw	r8,244(sp)
    27d4:	1000f71e 	bne	r2,zero,2bb4 <___vfprintf_internal_r+0x12dc>
    27d8:	d8801f17 	ldw	r2,124(sp)
    27dc:	010000b4 	movhi	r4,2
    27e0:	21232b04 	addi	r4,r4,-29524
    27e4:	18c00044 	addi	r3,r3,1
    27e8:	10800044 	addi	r2,r2,1
    27ec:	41000015 	stw	r4,0(r8)
    27f0:	01000044 	movi	r4,1
    27f4:	41000115 	stw	r4,4(r8)
    27f8:	d8c02015 	stw	r3,128(sp)
    27fc:	d8801f15 	stw	r2,124(sp)
    2800:	010001c4 	movi	r4,7
    2804:	2082b816 	blt	r4,r2,32e8 <___vfprintf_internal_r+0x1a10>
    2808:	42000204 	addi	r8,r8,8
    280c:	d8802617 	ldw	r2,152(sp)
    2810:	d9403317 	ldw	r5,204(sp)
    2814:	11400216 	blt	r2,r5,2820 <___vfprintf_internal_r+0xf48>
    2818:	9080004c 	andi	r2,r18,1
    281c:	103eb326 	beq	r2,zero,22ec <__alt_data_end+0xfffd15ac>
    2820:	d8803717 	ldw	r2,220(sp)
    2824:	d9003417 	ldw	r4,208(sp)
    2828:	d9403717 	ldw	r5,220(sp)
    282c:	1887883a 	add	r3,r3,r2
    2830:	d8801f17 	ldw	r2,124(sp)
    2834:	41000015 	stw	r4,0(r8)
    2838:	41400115 	stw	r5,4(r8)
    283c:	10800044 	addi	r2,r2,1
    2840:	d8c02015 	stw	r3,128(sp)
    2844:	d8801f15 	stw	r2,124(sp)
    2848:	010001c4 	movi	r4,7
    284c:	20832916 	blt	r4,r2,34f4 <___vfprintf_internal_r+0x1c1c>
    2850:	42000204 	addi	r8,r8,8
    2854:	d8803317 	ldw	r2,204(sp)
    2858:	143fffc4 	addi	r16,r2,-1
    285c:	043ea30e 	bge	zero,r16,22ec <__alt_data_end+0xfffd15ac>
    2860:	04400404 	movi	r17,16
    2864:	d8801f17 	ldw	r2,124(sp)
    2868:	8c00880e 	bge	r17,r16,2a8c <___vfprintf_internal_r+0x11b4>
    286c:	014000b4 	movhi	r5,2
    2870:	29632b84 	addi	r5,r5,-29522
    2874:	d9402c15 	stw	r5,176(sp)
    2878:	058001c4 	movi	r22,7
    287c:	dcc02d17 	ldw	r19,180(sp)
    2880:	00000306 	br	2890 <___vfprintf_internal_r+0xfb8>
    2884:	42000204 	addi	r8,r8,8
    2888:	843ffc04 	addi	r16,r16,-16
    288c:	8c00820e 	bge	r17,r16,2a98 <___vfprintf_internal_r+0x11c0>
    2890:	18c00404 	addi	r3,r3,16
    2894:	10800044 	addi	r2,r2,1
    2898:	45000015 	stw	r20,0(r8)
    289c:	44400115 	stw	r17,4(r8)
    28a0:	d8c02015 	stw	r3,128(sp)
    28a4:	d8801f15 	stw	r2,124(sp)
    28a8:	b0bff60e 	bge	r22,r2,2884 <__alt_data_end+0xfffd1b44>
    28ac:	d9801e04 	addi	r6,sp,120
    28b0:	b80b883a 	mov	r5,r23
    28b4:	9809883a 	mov	r4,r19
    28b8:	00087500 	call	8750 <__sprint_r>
    28bc:	103d0a1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    28c0:	d8c02017 	ldw	r3,128(sp)
    28c4:	d8801f17 	ldw	r2,124(sp)
    28c8:	da000404 	addi	r8,sp,16
    28cc:	003fee06 	br	2888 <__alt_data_end+0xfffd1b48>
    28d0:	d9403117 	ldw	r5,196(sp)
    28d4:	d8802917 	ldw	r2,164(sp)
    28d8:	28adc83a 	sub	r22,r5,r2
    28dc:	05be410e 	bge	zero,r22,21e4 <__alt_data_end+0xfffd14a4>
    28e0:	07000404 	movi	fp,16
    28e4:	d8801f17 	ldw	r2,124(sp)
    28e8:	e5838f0e 	bge	fp,r22,3728 <___vfprintf_internal_r+0x1e50>
    28ec:	014000b4 	movhi	r5,2
    28f0:	29632b84 	addi	r5,r5,-29522
    28f4:	dc403015 	stw	r17,192(sp)
    28f8:	d9402c15 	stw	r5,176(sp)
    28fc:	b023883a 	mov	r17,r22
    2900:	04c001c4 	movi	r19,7
    2904:	a82d883a 	mov	r22,r21
    2908:	902b883a 	mov	r21,r18
    290c:	8025883a 	mov	r18,r16
    2910:	dc002d17 	ldw	r16,180(sp)
    2914:	00000306 	br	2924 <___vfprintf_internal_r+0x104c>
    2918:	8c7ffc04 	addi	r17,r17,-16
    291c:	42000204 	addi	r8,r8,8
    2920:	e440110e 	bge	fp,r17,2968 <___vfprintf_internal_r+0x1090>
    2924:	18c00404 	addi	r3,r3,16
    2928:	10800044 	addi	r2,r2,1
    292c:	45000015 	stw	r20,0(r8)
    2930:	47000115 	stw	fp,4(r8)
    2934:	d8c02015 	stw	r3,128(sp)
    2938:	d8801f15 	stw	r2,124(sp)
    293c:	98bff60e 	bge	r19,r2,2918 <__alt_data_end+0xfffd1bd8>
    2940:	d9801e04 	addi	r6,sp,120
    2944:	b80b883a 	mov	r5,r23
    2948:	8009883a 	mov	r4,r16
    294c:	00087500 	call	8750 <__sprint_r>
    2950:	103ce51e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2954:	8c7ffc04 	addi	r17,r17,-16
    2958:	d8c02017 	ldw	r3,128(sp)
    295c:	d8801f17 	ldw	r2,124(sp)
    2960:	da000404 	addi	r8,sp,16
    2964:	e47fef16 	blt	fp,r17,2924 <__alt_data_end+0xfffd1be4>
    2968:	9021883a 	mov	r16,r18
    296c:	a825883a 	mov	r18,r21
    2970:	b02b883a 	mov	r21,r22
    2974:	882d883a 	mov	r22,r17
    2978:	dc403017 	ldw	r17,192(sp)
    297c:	d9002c17 	ldw	r4,176(sp)
    2980:	1d87883a 	add	r3,r3,r22
    2984:	10800044 	addi	r2,r2,1
    2988:	41000015 	stw	r4,0(r8)
    298c:	45800115 	stw	r22,4(r8)
    2990:	d8c02015 	stw	r3,128(sp)
    2994:	d8801f15 	stw	r2,124(sp)
    2998:	010001c4 	movi	r4,7
    299c:	20818e16 	blt	r4,r2,2fd8 <___vfprintf_internal_r+0x1700>
    29a0:	42000204 	addi	r8,r8,8
    29a4:	003e0f06 	br	21e4 <__alt_data_end+0xfffd14a4>
    29a8:	d9403317 	ldw	r5,204(sp)
    29ac:	00800044 	movi	r2,1
    29b0:	18c00044 	addi	r3,r3,1
    29b4:	1141530e 	bge	r2,r5,2f04 <___vfprintf_internal_r+0x162c>
    29b8:	dc401f17 	ldw	r17,124(sp)
    29bc:	00800044 	movi	r2,1
    29c0:	40800115 	stw	r2,4(r8)
    29c4:	8c400044 	addi	r17,r17,1
    29c8:	44000015 	stw	r16,0(r8)
    29cc:	d8c02015 	stw	r3,128(sp)
    29d0:	dc401f15 	stw	r17,124(sp)
    29d4:	008001c4 	movi	r2,7
    29d8:	14416b16 	blt	r2,r17,2f88 <___vfprintf_internal_r+0x16b0>
    29dc:	42000204 	addi	r8,r8,8
    29e0:	d8803717 	ldw	r2,220(sp)
    29e4:	d9003417 	ldw	r4,208(sp)
    29e8:	8c400044 	addi	r17,r17,1
    29ec:	10c7883a 	add	r3,r2,r3
    29f0:	40800115 	stw	r2,4(r8)
    29f4:	41000015 	stw	r4,0(r8)
    29f8:	d8c02015 	stw	r3,128(sp)
    29fc:	dc401f15 	stw	r17,124(sp)
    2a00:	008001c4 	movi	r2,7
    2a04:	14416916 	blt	r2,r17,2fac <___vfprintf_internal_r+0x16d4>
    2a08:	45800204 	addi	r22,r8,8
    2a0c:	d9003617 	ldw	r4,216(sp)
    2a10:	d9403817 	ldw	r5,224(sp)
    2a14:	000d883a 	mov	r6,zero
    2a18:	000f883a 	mov	r7,zero
    2a1c:	d8c03c15 	stw	r3,240(sp)
    2a20:	000c4d40 	call	c4d4 <__eqdf2>
    2a24:	d8c03c17 	ldw	r3,240(sp)
    2a28:	1000bc26 	beq	r2,zero,2d1c <___vfprintf_internal_r+0x1444>
    2a2c:	d9403317 	ldw	r5,204(sp)
    2a30:	84000044 	addi	r16,r16,1
    2a34:	8c400044 	addi	r17,r17,1
    2a38:	28bfffc4 	addi	r2,r5,-1
    2a3c:	1887883a 	add	r3,r3,r2
    2a40:	b0800115 	stw	r2,4(r22)
    2a44:	b4000015 	stw	r16,0(r22)
    2a48:	d8c02015 	stw	r3,128(sp)
    2a4c:	dc401f15 	stw	r17,124(sp)
    2a50:	008001c4 	movi	r2,7
    2a54:	14414316 	blt	r2,r17,2f64 <___vfprintf_internal_r+0x168c>
    2a58:	b5800204 	addi	r22,r22,8
    2a5c:	d9003a17 	ldw	r4,232(sp)
    2a60:	df0022c4 	addi	fp,sp,139
    2a64:	8c400044 	addi	r17,r17,1
    2a68:	20c7883a 	add	r3,r4,r3
    2a6c:	b7000015 	stw	fp,0(r22)
    2a70:	b1000115 	stw	r4,4(r22)
    2a74:	d8c02015 	stw	r3,128(sp)
    2a78:	dc401f15 	stw	r17,124(sp)
    2a7c:	008001c4 	movi	r2,7
    2a80:	14400e16 	blt	r2,r17,2abc <___vfprintf_internal_r+0x11e4>
    2a84:	b2000204 	addi	r8,r22,8
    2a88:	003e1806 	br	22ec <__alt_data_end+0xfffd15ac>
    2a8c:	010000b4 	movhi	r4,2
    2a90:	21232b84 	addi	r4,r4,-29522
    2a94:	d9002c15 	stw	r4,176(sp)
    2a98:	d9002c17 	ldw	r4,176(sp)
    2a9c:	1c07883a 	add	r3,r3,r16
    2aa0:	44000115 	stw	r16,4(r8)
    2aa4:	41000015 	stw	r4,0(r8)
    2aa8:	10800044 	addi	r2,r2,1
    2aac:	d8c02015 	stw	r3,128(sp)
    2ab0:	d8801f15 	stw	r2,124(sp)
    2ab4:	010001c4 	movi	r4,7
    2ab8:	20be0b0e 	bge	r4,r2,22e8 <__alt_data_end+0xfffd15a8>
    2abc:	d9002d17 	ldw	r4,180(sp)
    2ac0:	d9801e04 	addi	r6,sp,120
    2ac4:	b80b883a 	mov	r5,r23
    2ac8:	00087500 	call	8750 <__sprint_r>
    2acc:	103c861e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2ad0:	d8c02017 	ldw	r3,128(sp)
    2ad4:	da000404 	addi	r8,sp,16
    2ad8:	003e0406 	br	22ec <__alt_data_end+0xfffd15ac>
    2adc:	d9002d17 	ldw	r4,180(sp)
    2ae0:	d9801e04 	addi	r6,sp,120
    2ae4:	b80b883a 	mov	r5,r23
    2ae8:	00087500 	call	8750 <__sprint_r>
    2aec:	103e3b26 	beq	r2,zero,23dc <__alt_data_end+0xfffd169c>
    2af0:	003c7d06 	br	1ce8 <__alt_data_end+0xfffd0fa8>
    2af4:	d9002d17 	ldw	r4,180(sp)
    2af8:	d9801e04 	addi	r6,sp,120
    2afc:	b80b883a 	mov	r5,r23
    2b00:	00087500 	call	8750 <__sprint_r>
    2b04:	103c781e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2b08:	d8c02017 	ldw	r3,128(sp)
    2b0c:	da000404 	addi	r8,sp,16
    2b10:	003de906 	br	22b8 <__alt_data_end+0xfffd1578>
    2b14:	d9002d17 	ldw	r4,180(sp)
    2b18:	d9801e04 	addi	r6,sp,120
    2b1c:	b80b883a 	mov	r5,r23
    2b20:	00087500 	call	8750 <__sprint_r>
    2b24:	103c701e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2b28:	d8c02017 	ldw	r3,128(sp)
    2b2c:	da000404 	addi	r8,sp,16
    2b30:	003d9b06 	br	21a0 <__alt_data_end+0xfffd1460>
    2b34:	d9002d17 	ldw	r4,180(sp)
    2b38:	d9801e04 	addi	r6,sp,120
    2b3c:	b80b883a 	mov	r5,r23
    2b40:	00087500 	call	8750 <__sprint_r>
    2b44:	103c681e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2b48:	d8c02017 	ldw	r3,128(sp)
    2b4c:	da000404 	addi	r8,sp,16
    2b50:	003da106 	br	21d8 <__alt_data_end+0xfffd1498>
    2b54:	d9402a17 	ldw	r5,168(sp)
    2b58:	d8002785 	stb	zero,158(sp)
    2b5c:	283f0616 	blt	r5,zero,2778 <__alt_data_end+0xfffd1a38>
    2b60:	00ffdfc4 	movi	r3,-129
    2b64:	9d84b03a 	or	r2,r19,r22
    2b68:	90e4703a 	and	r18,r18,r3
    2b6c:	103c3b26 	beq	r2,zero,1c5c <__alt_data_end+0xfffd0f1c>
    2b70:	0039883a 	mov	fp,zero
    2b74:	003e5806 	br	24d8 <__alt_data_end+0xfffd1798>
    2b78:	9080040c 	andi	r2,r18,16
    2b7c:	1001b326 	beq	r2,zero,324c <___vfprintf_internal_r+0x1974>
    2b80:	d8c02e17 	ldw	r3,184(sp)
    2b84:	d9002a17 	ldw	r4,168(sp)
    2b88:	d8002785 	stb	zero,158(sp)
    2b8c:	18800104 	addi	r2,r3,4
    2b90:	1cc00017 	ldw	r19,0(r3)
    2b94:	002d883a 	mov	r22,zero
    2b98:	2001b516 	blt	r4,zero,3270 <___vfprintf_internal_r+0x1998>
    2b9c:	00ffdfc4 	movi	r3,-129
    2ba0:	d8802e15 	stw	r2,184(sp)
    2ba4:	90e4703a 	and	r18,r18,r3
    2ba8:	983d0526 	beq	r19,zero,1fc0 <__alt_data_end+0xfffd1280>
    2bac:	0039883a 	mov	fp,zero
    2bb0:	003d0806 	br	1fd4 <__alt_data_end+0xfffd1294>
    2bb4:	dc402617 	ldw	r17,152(sp)
    2bb8:	0441d30e 	bge	zero,r17,3308 <___vfprintf_internal_r+0x1a30>
    2bbc:	dc403217 	ldw	r17,200(sp)
    2bc0:	d8803317 	ldw	r2,204(sp)
    2bc4:	1440010e 	bge	r2,r17,2bcc <___vfprintf_internal_r+0x12f4>
    2bc8:	1023883a 	mov	r17,r2
    2bcc:	04400a0e 	bge	zero,r17,2bf8 <___vfprintf_internal_r+0x1320>
    2bd0:	d8801f17 	ldw	r2,124(sp)
    2bd4:	1c47883a 	add	r3,r3,r17
    2bd8:	44000015 	stw	r16,0(r8)
    2bdc:	10800044 	addi	r2,r2,1
    2be0:	44400115 	stw	r17,4(r8)
    2be4:	d8c02015 	stw	r3,128(sp)
    2be8:	d8801f15 	stw	r2,124(sp)
    2bec:	010001c4 	movi	r4,7
    2bf0:	20826516 	blt	r4,r2,3588 <___vfprintf_internal_r+0x1cb0>
    2bf4:	42000204 	addi	r8,r8,8
    2bf8:	88026116 	blt	r17,zero,3580 <___vfprintf_internal_r+0x1ca8>
    2bfc:	d9003217 	ldw	r4,200(sp)
    2c00:	2463c83a 	sub	r17,r4,r17
    2c04:	04407b0e 	bge	zero,r17,2df4 <___vfprintf_internal_r+0x151c>
    2c08:	05800404 	movi	r22,16
    2c0c:	d8801f17 	ldw	r2,124(sp)
    2c10:	b4419d0e 	bge	r22,r17,3288 <___vfprintf_internal_r+0x19b0>
    2c14:	010000b4 	movhi	r4,2
    2c18:	21232b84 	addi	r4,r4,-29522
    2c1c:	d9002c15 	stw	r4,176(sp)
    2c20:	070001c4 	movi	fp,7
    2c24:	dcc02d17 	ldw	r19,180(sp)
    2c28:	00000306 	br	2c38 <___vfprintf_internal_r+0x1360>
    2c2c:	42000204 	addi	r8,r8,8
    2c30:	8c7ffc04 	addi	r17,r17,-16
    2c34:	b441970e 	bge	r22,r17,3294 <___vfprintf_internal_r+0x19bc>
    2c38:	18c00404 	addi	r3,r3,16
    2c3c:	10800044 	addi	r2,r2,1
    2c40:	45000015 	stw	r20,0(r8)
    2c44:	45800115 	stw	r22,4(r8)
    2c48:	d8c02015 	stw	r3,128(sp)
    2c4c:	d8801f15 	stw	r2,124(sp)
    2c50:	e0bff60e 	bge	fp,r2,2c2c <__alt_data_end+0xfffd1eec>
    2c54:	d9801e04 	addi	r6,sp,120
    2c58:	b80b883a 	mov	r5,r23
    2c5c:	9809883a 	mov	r4,r19
    2c60:	00087500 	call	8750 <__sprint_r>
    2c64:	103c201e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2c68:	d8c02017 	ldw	r3,128(sp)
    2c6c:	d8801f17 	ldw	r2,124(sp)
    2c70:	da000404 	addi	r8,sp,16
    2c74:	003fee06 	br	2c30 <__alt_data_end+0xfffd1ef0>
    2c78:	d9002d17 	ldw	r4,180(sp)
    2c7c:	d9801e04 	addi	r6,sp,120
    2c80:	b80b883a 	mov	r5,r23
    2c84:	00087500 	call	8750 <__sprint_r>
    2c88:	103c171e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2c8c:	d8c02017 	ldw	r3,128(sp)
    2c90:	df002787 	ldb	fp,158(sp)
    2c94:	da000404 	addi	r8,sp,16
    2c98:	003d3406 	br	216c <__alt_data_end+0xfffd142c>
    2c9c:	9080040c 	andi	r2,r18,16
    2ca0:	10016126 	beq	r2,zero,3228 <___vfprintf_internal_r+0x1950>
    2ca4:	d9402e17 	ldw	r5,184(sp)
    2ca8:	2cc00017 	ldw	r19,0(r5)
    2cac:	29400104 	addi	r5,r5,4
    2cb0:	d9402e15 	stw	r5,184(sp)
    2cb4:	982dd7fa 	srai	r22,r19,31
    2cb8:	b005883a 	mov	r2,r22
    2cbc:	003c5a06 	br	1e28 <__alt_data_end+0xfffd10e8>
    2cc0:	9080040c 	andi	r2,r18,16
    2cc4:	10003526 	beq	r2,zero,2d9c <___vfprintf_internal_r+0x14c4>
    2cc8:	d8c02e17 	ldw	r3,184(sp)
    2ccc:	d9002a17 	ldw	r4,168(sp)
    2cd0:	d8002785 	stb	zero,158(sp)
    2cd4:	18800104 	addi	r2,r3,4
    2cd8:	1cc00017 	ldw	r19,0(r3)
    2cdc:	002d883a 	mov	r22,zero
    2ce0:	20003716 	blt	r4,zero,2dc0 <___vfprintf_internal_r+0x14e8>
    2ce4:	00ffdfc4 	movi	r3,-129
    2ce8:	d8802e15 	stw	r2,184(sp)
    2cec:	90e4703a 	and	r18,r18,r3
    2cf0:	0039883a 	mov	fp,zero
    2cf4:	983dd426 	beq	r19,zero,2448 <__alt_data_end+0xfffd1708>
    2cf8:	00800244 	movi	r2,9
    2cfc:	14fc5336 	bltu	r2,r19,1e4c <__alt_data_end+0xfffd110c>
    2d00:	d8c02817 	ldw	r3,160(sp)
    2d04:	dc001dc4 	addi	r16,sp,119
    2d08:	9cc00c04 	addi	r19,r19,48
    2d0c:	1c07c83a 	sub	r3,r3,r16
    2d10:	dcc01dc5 	stb	r19,119(sp)
    2d14:	d8c02b15 	stw	r3,172(sp)
    2d18:	003cc606 	br	2034 <__alt_data_end+0xfffd12f4>
    2d1c:	d8803317 	ldw	r2,204(sp)
    2d20:	143fffc4 	addi	r16,r2,-1
    2d24:	043f4d0e 	bge	zero,r16,2a5c <__alt_data_end+0xfffd1d1c>
    2d28:	07000404 	movi	fp,16
    2d2c:	e400810e 	bge	fp,r16,2f34 <___vfprintf_internal_r+0x165c>
    2d30:	014000b4 	movhi	r5,2
    2d34:	29632b84 	addi	r5,r5,-29522
    2d38:	d9402c15 	stw	r5,176(sp)
    2d3c:	01c001c4 	movi	r7,7
    2d40:	dcc02d17 	ldw	r19,180(sp)
    2d44:	00000306 	br	2d54 <___vfprintf_internal_r+0x147c>
    2d48:	b5800204 	addi	r22,r22,8
    2d4c:	843ffc04 	addi	r16,r16,-16
    2d50:	e4007b0e 	bge	fp,r16,2f40 <___vfprintf_internal_r+0x1668>
    2d54:	18c00404 	addi	r3,r3,16
    2d58:	8c400044 	addi	r17,r17,1
    2d5c:	b5000015 	stw	r20,0(r22)
    2d60:	b7000115 	stw	fp,4(r22)
    2d64:	d8c02015 	stw	r3,128(sp)
    2d68:	dc401f15 	stw	r17,124(sp)
    2d6c:	3c7ff60e 	bge	r7,r17,2d48 <__alt_data_end+0xfffd2008>
    2d70:	d9801e04 	addi	r6,sp,120
    2d74:	b80b883a 	mov	r5,r23
    2d78:	9809883a 	mov	r4,r19
    2d7c:	d9c03c15 	stw	r7,240(sp)
    2d80:	00087500 	call	8750 <__sprint_r>
    2d84:	d9c03c17 	ldw	r7,240(sp)
    2d88:	103bd71e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2d8c:	d8c02017 	ldw	r3,128(sp)
    2d90:	dc401f17 	ldw	r17,124(sp)
    2d94:	dd800404 	addi	r22,sp,16
    2d98:	003fec06 	br	2d4c <__alt_data_end+0xfffd200c>
    2d9c:	9080100c 	andi	r2,r18,64
    2da0:	d8002785 	stb	zero,158(sp)
    2da4:	10010e26 	beq	r2,zero,31e0 <___vfprintf_internal_r+0x1908>
    2da8:	d9402e17 	ldw	r5,184(sp)
    2dac:	d8c02a17 	ldw	r3,168(sp)
    2db0:	002d883a 	mov	r22,zero
    2db4:	28800104 	addi	r2,r5,4
    2db8:	2cc0000b 	ldhu	r19,0(r5)
    2dbc:	183fc90e 	bge	r3,zero,2ce4 <__alt_data_end+0xfffd1fa4>
    2dc0:	d8802e15 	stw	r2,184(sp)
    2dc4:	0039883a 	mov	fp,zero
    2dc8:	9d84b03a 	or	r2,r19,r22
    2dcc:	103c1e1e 	bne	r2,zero,1e48 <__alt_data_end+0xfffd1108>
    2dd0:	00800044 	movi	r2,1
    2dd4:	003e6c06 	br	2788 <__alt_data_end+0xfffd1a48>
    2dd8:	d9002d17 	ldw	r4,180(sp)
    2ddc:	d9801e04 	addi	r6,sp,120
    2de0:	b80b883a 	mov	r5,r23
    2de4:	00087500 	call	8750 <__sprint_r>
    2de8:	103bbf1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2dec:	d8c02017 	ldw	r3,128(sp)
    2df0:	da000404 	addi	r8,sp,16
    2df4:	d9003217 	ldw	r4,200(sp)
    2df8:	d8802617 	ldw	r2,152(sp)
    2dfc:	d9403317 	ldw	r5,204(sp)
    2e00:	8123883a 	add	r17,r16,r4
    2e04:	11400216 	blt	r2,r5,2e10 <___vfprintf_internal_r+0x1538>
    2e08:	9100004c 	andi	r4,r18,1
    2e0c:	20000d26 	beq	r4,zero,2e44 <___vfprintf_internal_r+0x156c>
    2e10:	d9003717 	ldw	r4,220(sp)
    2e14:	d9403417 	ldw	r5,208(sp)
    2e18:	1907883a 	add	r3,r3,r4
    2e1c:	d9001f17 	ldw	r4,124(sp)
    2e20:	41400015 	stw	r5,0(r8)
    2e24:	d9403717 	ldw	r5,220(sp)
    2e28:	21000044 	addi	r4,r4,1
    2e2c:	d8c02015 	stw	r3,128(sp)
    2e30:	41400115 	stw	r5,4(r8)
    2e34:	d9001f15 	stw	r4,124(sp)
    2e38:	014001c4 	movi	r5,7
    2e3c:	2901e816 	blt	r5,r4,35e0 <___vfprintf_internal_r+0x1d08>
    2e40:	42000204 	addi	r8,r8,8
    2e44:	d9003317 	ldw	r4,204(sp)
    2e48:	8121883a 	add	r16,r16,r4
    2e4c:	2085c83a 	sub	r2,r4,r2
    2e50:	8461c83a 	sub	r16,r16,r17
    2e54:	1400010e 	bge	r2,r16,2e5c <___vfprintf_internal_r+0x1584>
    2e58:	1021883a 	mov	r16,r2
    2e5c:	04000a0e 	bge	zero,r16,2e88 <___vfprintf_internal_r+0x15b0>
    2e60:	d9001f17 	ldw	r4,124(sp)
    2e64:	1c07883a 	add	r3,r3,r16
    2e68:	44400015 	stw	r17,0(r8)
    2e6c:	21000044 	addi	r4,r4,1
    2e70:	44000115 	stw	r16,4(r8)
    2e74:	d8c02015 	stw	r3,128(sp)
    2e78:	d9001f15 	stw	r4,124(sp)
    2e7c:	014001c4 	movi	r5,7
    2e80:	2901fb16 	blt	r5,r4,3670 <___vfprintf_internal_r+0x1d98>
    2e84:	42000204 	addi	r8,r8,8
    2e88:	8001f716 	blt	r16,zero,3668 <___vfprintf_internal_r+0x1d90>
    2e8c:	1421c83a 	sub	r16,r2,r16
    2e90:	043d160e 	bge	zero,r16,22ec <__alt_data_end+0xfffd15ac>
    2e94:	04400404 	movi	r17,16
    2e98:	d8801f17 	ldw	r2,124(sp)
    2e9c:	8c3efb0e 	bge	r17,r16,2a8c <__alt_data_end+0xfffd1d4c>
    2ea0:	014000b4 	movhi	r5,2
    2ea4:	29632b84 	addi	r5,r5,-29522
    2ea8:	d9402c15 	stw	r5,176(sp)
    2eac:	058001c4 	movi	r22,7
    2eb0:	dcc02d17 	ldw	r19,180(sp)
    2eb4:	00000306 	br	2ec4 <___vfprintf_internal_r+0x15ec>
    2eb8:	42000204 	addi	r8,r8,8
    2ebc:	843ffc04 	addi	r16,r16,-16
    2ec0:	8c3ef50e 	bge	r17,r16,2a98 <__alt_data_end+0xfffd1d58>
    2ec4:	18c00404 	addi	r3,r3,16
    2ec8:	10800044 	addi	r2,r2,1
    2ecc:	45000015 	stw	r20,0(r8)
    2ed0:	44400115 	stw	r17,4(r8)
    2ed4:	d8c02015 	stw	r3,128(sp)
    2ed8:	d8801f15 	stw	r2,124(sp)
    2edc:	b0bff60e 	bge	r22,r2,2eb8 <__alt_data_end+0xfffd2178>
    2ee0:	d9801e04 	addi	r6,sp,120
    2ee4:	b80b883a 	mov	r5,r23
    2ee8:	9809883a 	mov	r4,r19
    2eec:	00087500 	call	8750 <__sprint_r>
    2ef0:	103b7d1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2ef4:	d8c02017 	ldw	r3,128(sp)
    2ef8:	d8801f17 	ldw	r2,124(sp)
    2efc:	da000404 	addi	r8,sp,16
    2f00:	003fee06 	br	2ebc <__alt_data_end+0xfffd217c>
    2f04:	9088703a 	and	r4,r18,r2
    2f08:	203eab1e 	bne	r4,zero,29b8 <__alt_data_end+0xfffd1c78>
    2f0c:	dc401f17 	ldw	r17,124(sp)
    2f10:	40800115 	stw	r2,4(r8)
    2f14:	44000015 	stw	r16,0(r8)
    2f18:	8c400044 	addi	r17,r17,1
    2f1c:	d8c02015 	stw	r3,128(sp)
    2f20:	dc401f15 	stw	r17,124(sp)
    2f24:	008001c4 	movi	r2,7
    2f28:	14400e16 	blt	r2,r17,2f64 <___vfprintf_internal_r+0x168c>
    2f2c:	45800204 	addi	r22,r8,8
    2f30:	003eca06 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2f34:	010000b4 	movhi	r4,2
    2f38:	21232b84 	addi	r4,r4,-29522
    2f3c:	d9002c15 	stw	r4,176(sp)
    2f40:	d8802c17 	ldw	r2,176(sp)
    2f44:	1c07883a 	add	r3,r3,r16
    2f48:	8c400044 	addi	r17,r17,1
    2f4c:	b0800015 	stw	r2,0(r22)
    2f50:	b4000115 	stw	r16,4(r22)
    2f54:	d8c02015 	stw	r3,128(sp)
    2f58:	dc401f15 	stw	r17,124(sp)
    2f5c:	008001c4 	movi	r2,7
    2f60:	147ebd0e 	bge	r2,r17,2a58 <__alt_data_end+0xfffd1d18>
    2f64:	d9002d17 	ldw	r4,180(sp)
    2f68:	d9801e04 	addi	r6,sp,120
    2f6c:	b80b883a 	mov	r5,r23
    2f70:	00087500 	call	8750 <__sprint_r>
    2f74:	103b5c1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2f78:	d8c02017 	ldw	r3,128(sp)
    2f7c:	dc401f17 	ldw	r17,124(sp)
    2f80:	dd800404 	addi	r22,sp,16
    2f84:	003eb506 	br	2a5c <__alt_data_end+0xfffd1d1c>
    2f88:	d9002d17 	ldw	r4,180(sp)
    2f8c:	d9801e04 	addi	r6,sp,120
    2f90:	b80b883a 	mov	r5,r23
    2f94:	00087500 	call	8750 <__sprint_r>
    2f98:	103b531e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2f9c:	d8c02017 	ldw	r3,128(sp)
    2fa0:	dc401f17 	ldw	r17,124(sp)
    2fa4:	da000404 	addi	r8,sp,16
    2fa8:	003e8d06 	br	29e0 <__alt_data_end+0xfffd1ca0>
    2fac:	d9002d17 	ldw	r4,180(sp)
    2fb0:	d9801e04 	addi	r6,sp,120
    2fb4:	b80b883a 	mov	r5,r23
    2fb8:	00087500 	call	8750 <__sprint_r>
    2fbc:	103b4a1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2fc0:	d8c02017 	ldw	r3,128(sp)
    2fc4:	dc401f17 	ldw	r17,124(sp)
    2fc8:	dd800404 	addi	r22,sp,16
    2fcc:	003e8f06 	br	2a0c <__alt_data_end+0xfffd1ccc>
    2fd0:	0027883a 	mov	r19,zero
    2fd4:	003f4a06 	br	2d00 <__alt_data_end+0xfffd1fc0>
    2fd8:	d9002d17 	ldw	r4,180(sp)
    2fdc:	d9801e04 	addi	r6,sp,120
    2fe0:	b80b883a 	mov	r5,r23
    2fe4:	00087500 	call	8750 <__sprint_r>
    2fe8:	103b3f1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    2fec:	d8c02017 	ldw	r3,128(sp)
    2ff0:	da000404 	addi	r8,sp,16
    2ff4:	003c7b06 	br	21e4 <__alt_data_end+0xfffd14a4>
    2ff8:	d9402a17 	ldw	r5,168(sp)
    2ffc:	04e7c83a 	sub	r19,zero,r19
    3000:	07000b44 	movi	fp,45
    3004:	9804c03a 	cmpne	r2,r19,zero
    3008:	05adc83a 	sub	r22,zero,r22
    300c:	df002785 	stb	fp,158(sp)
    3010:	b0adc83a 	sub	r22,r22,r2
    3014:	28017b16 	blt	r5,zero,3604 <___vfprintf_internal_r+0x1d2c>
    3018:	00bfdfc4 	movi	r2,-129
    301c:	90a4703a 	and	r18,r18,r2
    3020:	003b8906 	br	1e48 <__alt_data_end+0xfffd1108>
    3024:	d9003617 	ldw	r4,216(sp)
    3028:	d9403817 	ldw	r5,224(sp)
    302c:	da003d15 	stw	r8,244(sp)
    3030:	00083c80 	call	83c8 <__fpclassifyd>
    3034:	da003d17 	ldw	r8,244(sp)
    3038:	1000f026 	beq	r2,zero,33fc <___vfprintf_internal_r+0x1b24>
    303c:	d9002a17 	ldw	r4,168(sp)
    3040:	05bff7c4 	movi	r22,-33
    3044:	00bfffc4 	movi	r2,-1
    3048:	8dac703a 	and	r22,r17,r22
    304c:	20820026 	beq	r4,r2,3850 <___vfprintf_internal_r+0x1f78>
    3050:	008011c4 	movi	r2,71
    3054:	b081f726 	beq	r22,r2,3834 <___vfprintf_internal_r+0x1f5c>
    3058:	d9003817 	ldw	r4,224(sp)
    305c:	90c04014 	ori	r3,r18,256
    3060:	d8c02c15 	stw	r3,176(sp)
    3064:	20021516 	blt	r4,zero,38bc <___vfprintf_internal_r+0x1fe4>
    3068:	dcc03817 	ldw	r19,224(sp)
    306c:	d8002905 	stb	zero,164(sp)
    3070:	00801984 	movi	r2,102
    3074:	8881f926 	beq	r17,r2,385c <___vfprintf_internal_r+0x1f84>
    3078:	00801184 	movi	r2,70
    307c:	88821c26 	beq	r17,r2,38f0 <___vfprintf_internal_r+0x2018>
    3080:	00801144 	movi	r2,69
    3084:	b081ef26 	beq	r22,r2,3844 <___vfprintf_internal_r+0x1f6c>
    3088:	d8c02a17 	ldw	r3,168(sp)
    308c:	d8802104 	addi	r2,sp,132
    3090:	d8800315 	stw	r2,12(sp)
    3094:	d9403617 	ldw	r5,216(sp)
    3098:	d8802504 	addi	r2,sp,148
    309c:	d9002d17 	ldw	r4,180(sp)
    30a0:	d8800215 	stw	r2,8(sp)
    30a4:	d8802604 	addi	r2,sp,152
    30a8:	d8c00015 	stw	r3,0(sp)
    30ac:	d8800115 	stw	r2,4(sp)
    30b0:	01c00084 	movi	r7,2
    30b4:	980d883a 	mov	r6,r19
    30b8:	d8c03c15 	stw	r3,240(sp)
    30bc:	da003d15 	stw	r8,244(sp)
    30c0:	00040080 	call	4008 <_dtoa_r>
    30c4:	1021883a 	mov	r16,r2
    30c8:	008019c4 	movi	r2,103
    30cc:	d8c03c17 	ldw	r3,240(sp)
    30d0:	da003d17 	ldw	r8,244(sp)
    30d4:	88817126 	beq	r17,r2,369c <___vfprintf_internal_r+0x1dc4>
    30d8:	008011c4 	movi	r2,71
    30dc:	88829126 	beq	r17,r2,3b24 <___vfprintf_internal_r+0x224c>
    30e0:	80f9883a 	add	fp,r16,r3
    30e4:	d9003617 	ldw	r4,216(sp)
    30e8:	000d883a 	mov	r6,zero
    30ec:	000f883a 	mov	r7,zero
    30f0:	980b883a 	mov	r5,r19
    30f4:	da003d15 	stw	r8,244(sp)
    30f8:	000c4d40 	call	c4d4 <__eqdf2>
    30fc:	da003d17 	ldw	r8,244(sp)
    3100:	10018d26 	beq	r2,zero,3738 <___vfprintf_internal_r+0x1e60>
    3104:	d8802117 	ldw	r2,132(sp)
    3108:	1700062e 	bgeu	r2,fp,3124 <___vfprintf_internal_r+0x184c>
    310c:	01000c04 	movi	r4,48
    3110:	10c00044 	addi	r3,r2,1
    3114:	d8c02115 	stw	r3,132(sp)
    3118:	11000005 	stb	r4,0(r2)
    311c:	d8802117 	ldw	r2,132(sp)
    3120:	173ffb36 	bltu	r2,fp,3110 <__alt_data_end+0xfffd23d0>
    3124:	1405c83a 	sub	r2,r2,r16
    3128:	d8803315 	stw	r2,204(sp)
    312c:	008011c4 	movi	r2,71
    3130:	b0817626 	beq	r22,r2,370c <___vfprintf_internal_r+0x1e34>
    3134:	00801944 	movi	r2,101
    3138:	1442800e 	bge	r2,r17,3b3c <___vfprintf_internal_r+0x2264>
    313c:	d8c02617 	ldw	r3,152(sp)
    3140:	00801984 	movi	r2,102
    3144:	d8c03215 	stw	r3,200(sp)
    3148:	8881fe26 	beq	r17,r2,3944 <___vfprintf_internal_r+0x206c>
    314c:	d8c03217 	ldw	r3,200(sp)
    3150:	d9003317 	ldw	r4,204(sp)
    3154:	1901dd16 	blt	r3,r4,38cc <___vfprintf_internal_r+0x1ff4>
    3158:	9480004c 	andi	r18,r18,1
    315c:	90022b1e 	bne	r18,zero,3a0c <___vfprintf_internal_r+0x2134>
    3160:	1805883a 	mov	r2,r3
    3164:	18028316 	blt	r3,zero,3b74 <___vfprintf_internal_r+0x229c>
    3168:	d8c03217 	ldw	r3,200(sp)
    316c:	044019c4 	movi	r17,103
    3170:	d8c02b15 	stw	r3,172(sp)
    3174:	df002907 	ldb	fp,164(sp)
    3178:	e001531e 	bne	fp,zero,36c8 <___vfprintf_internal_r+0x1df0>
    317c:	df002783 	ldbu	fp,158(sp)
    3180:	d8802915 	stw	r2,164(sp)
    3184:	dc802c17 	ldw	r18,176(sp)
    3188:	d8002a15 	stw	zero,168(sp)
    318c:	003baf06 	br	204c <__alt_data_end+0xfffd130c>
    3190:	d8c02e17 	ldw	r3,184(sp)
    3194:	d9002e17 	ldw	r4,184(sp)
    3198:	d9402e17 	ldw	r5,184(sp)
    319c:	18c00017 	ldw	r3,0(r3)
    31a0:	21000117 	ldw	r4,4(r4)
    31a4:	29400204 	addi	r5,r5,8
    31a8:	d8c03615 	stw	r3,216(sp)
    31ac:	d9003815 	stw	r4,224(sp)
    31b0:	d9402e15 	stw	r5,184(sp)
    31b4:	003b5006 	br	1ef8 <__alt_data_end+0xfffd11b8>
    31b8:	ac400007 	ldb	r17,0(r21)
    31bc:	003a2806 	br	1a60 <__alt_data_end+0xfffd0d20>
    31c0:	9080100c 	andi	r2,r18,64
    31c4:	1000a826 	beq	r2,zero,3468 <___vfprintf_internal_r+0x1b90>
    31c8:	d8c02e17 	ldw	r3,184(sp)
    31cc:	002d883a 	mov	r22,zero
    31d0:	1cc0000b 	ldhu	r19,0(r3)
    31d4:	18c00104 	addi	r3,r3,4
    31d8:	d8c02e15 	stw	r3,184(sp)
    31dc:	003caf06 	br	249c <__alt_data_end+0xfffd175c>
    31e0:	d9002e17 	ldw	r4,184(sp)
    31e4:	d9402a17 	ldw	r5,168(sp)
    31e8:	002d883a 	mov	r22,zero
    31ec:	20800104 	addi	r2,r4,4
    31f0:	24c00017 	ldw	r19,0(r4)
    31f4:	283ebb0e 	bge	r5,zero,2ce4 <__alt_data_end+0xfffd1fa4>
    31f8:	003ef106 	br	2dc0 <__alt_data_end+0xfffd2080>
    31fc:	9080040c 	andi	r2,r18,16
    3200:	1000921e 	bne	r2,zero,344c <___vfprintf_internal_r+0x1b74>
    3204:	9480100c 	andi	r18,r18,64
    3208:	90013926 	beq	r18,zero,36f0 <___vfprintf_internal_r+0x1e18>
    320c:	d9402e17 	ldw	r5,184(sp)
    3210:	d8c02f17 	ldw	r3,188(sp)
    3214:	28800017 	ldw	r2,0(r5)
    3218:	29400104 	addi	r5,r5,4
    321c:	d9402e15 	stw	r5,184(sp)
    3220:	10c0000d 	sth	r3,0(r2)
    3224:	0039e406 	br	19b8 <__alt_data_end+0xfffd0c78>
    3228:	9080100c 	andi	r2,r18,64
    322c:	10008026 	beq	r2,zero,3430 <___vfprintf_internal_r+0x1b58>
    3230:	d8802e17 	ldw	r2,184(sp)
    3234:	14c0000f 	ldh	r19,0(r2)
    3238:	10800104 	addi	r2,r2,4
    323c:	d8802e15 	stw	r2,184(sp)
    3240:	982dd7fa 	srai	r22,r19,31
    3244:	b005883a 	mov	r2,r22
    3248:	003af706 	br	1e28 <__alt_data_end+0xfffd10e8>
    324c:	9080100c 	andi	r2,r18,64
    3250:	d8002785 	stb	zero,158(sp)
    3254:	10008a1e 	bne	r2,zero,3480 <___vfprintf_internal_r+0x1ba8>
    3258:	d9002e17 	ldw	r4,184(sp)
    325c:	d9402a17 	ldw	r5,168(sp)
    3260:	002d883a 	mov	r22,zero
    3264:	20800104 	addi	r2,r4,4
    3268:	24c00017 	ldw	r19,0(r4)
    326c:	283e4b0e 	bge	r5,zero,2b9c <__alt_data_end+0xfffd1e5c>
    3270:	9d86b03a 	or	r3,r19,r22
    3274:	d8802e15 	stw	r2,184(sp)
    3278:	183e4c1e 	bne	r3,zero,2bac <__alt_data_end+0xfffd1e6c>
    327c:	0039883a 	mov	fp,zero
    3280:	0005883a 	mov	r2,zero
    3284:	003d4006 	br	2788 <__alt_data_end+0xfffd1a48>
    3288:	014000b4 	movhi	r5,2
    328c:	29632b84 	addi	r5,r5,-29522
    3290:	d9402c15 	stw	r5,176(sp)
    3294:	d9402c17 	ldw	r5,176(sp)
    3298:	1c47883a 	add	r3,r3,r17
    329c:	10800044 	addi	r2,r2,1
    32a0:	41400015 	stw	r5,0(r8)
    32a4:	44400115 	stw	r17,4(r8)
    32a8:	d8c02015 	stw	r3,128(sp)
    32ac:	d8801f15 	stw	r2,124(sp)
    32b0:	010001c4 	movi	r4,7
    32b4:	20bec816 	blt	r4,r2,2dd8 <__alt_data_end+0xfffd2098>
    32b8:	42000204 	addi	r8,r8,8
    32bc:	003ecd06 	br	2df4 <__alt_data_end+0xfffd20b4>
    32c0:	d9002a17 	ldw	r4,168(sp)
    32c4:	d8002785 	stb	zero,158(sp)
    32c8:	203d2d16 	blt	r4,zero,2780 <__alt_data_end+0xfffd1a40>
    32cc:	00bfdfc4 	movi	r2,-129
    32d0:	90a4703a 	and	r18,r18,r2
    32d4:	003a6106 	br	1c5c <__alt_data_end+0xfffd0f1c>
    32d8:	010000b4 	movhi	r4,2
    32dc:	21232b84 	addi	r4,r4,-29522
    32e0:	d9002c15 	stw	r4,176(sp)
    32e4:	003bea06 	br	2290 <__alt_data_end+0xfffd1550>
    32e8:	d9002d17 	ldw	r4,180(sp)
    32ec:	d9801e04 	addi	r6,sp,120
    32f0:	b80b883a 	mov	r5,r23
    32f4:	00087500 	call	8750 <__sprint_r>
    32f8:	103a7b1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    32fc:	d8c02017 	ldw	r3,128(sp)
    3300:	da000404 	addi	r8,sp,16
    3304:	003d4106 	br	280c <__alt_data_end+0xfffd1acc>
    3308:	d8801f17 	ldw	r2,124(sp)
    330c:	014000b4 	movhi	r5,2
    3310:	01000044 	movi	r4,1
    3314:	18c00044 	addi	r3,r3,1
    3318:	10800044 	addi	r2,r2,1
    331c:	29632b04 	addi	r5,r5,-29524
    3320:	41000115 	stw	r4,4(r8)
    3324:	41400015 	stw	r5,0(r8)
    3328:	d8c02015 	stw	r3,128(sp)
    332c:	d8801f15 	stw	r2,124(sp)
    3330:	010001c4 	movi	r4,7
    3334:	20805c16 	blt	r4,r2,34a8 <___vfprintf_internal_r+0x1bd0>
    3338:	42000204 	addi	r8,r8,8
    333c:	8800041e 	bne	r17,zero,3350 <___vfprintf_internal_r+0x1a78>
    3340:	d8803317 	ldw	r2,204(sp)
    3344:	1000021e 	bne	r2,zero,3350 <___vfprintf_internal_r+0x1a78>
    3348:	9080004c 	andi	r2,r18,1
    334c:	103be726 	beq	r2,zero,22ec <__alt_data_end+0xfffd15ac>
    3350:	d9003717 	ldw	r4,220(sp)
    3354:	d8801f17 	ldw	r2,124(sp)
    3358:	d9403417 	ldw	r5,208(sp)
    335c:	20c7883a 	add	r3,r4,r3
    3360:	10800044 	addi	r2,r2,1
    3364:	41000115 	stw	r4,4(r8)
    3368:	41400015 	stw	r5,0(r8)
    336c:	d8c02015 	stw	r3,128(sp)
    3370:	d8801f15 	stw	r2,124(sp)
    3374:	010001c4 	movi	r4,7
    3378:	20812116 	blt	r4,r2,3800 <___vfprintf_internal_r+0x1f28>
    337c:	42000204 	addi	r8,r8,8
    3380:	0463c83a 	sub	r17,zero,r17
    3384:	0440730e 	bge	zero,r17,3554 <___vfprintf_internal_r+0x1c7c>
    3388:	05800404 	movi	r22,16
    338c:	b440860e 	bge	r22,r17,35a8 <___vfprintf_internal_r+0x1cd0>
    3390:	014000b4 	movhi	r5,2
    3394:	29632b84 	addi	r5,r5,-29522
    3398:	d9402c15 	stw	r5,176(sp)
    339c:	070001c4 	movi	fp,7
    33a0:	dcc02d17 	ldw	r19,180(sp)
    33a4:	00000306 	br	33b4 <___vfprintf_internal_r+0x1adc>
    33a8:	42000204 	addi	r8,r8,8
    33ac:	8c7ffc04 	addi	r17,r17,-16
    33b0:	b440800e 	bge	r22,r17,35b4 <___vfprintf_internal_r+0x1cdc>
    33b4:	18c00404 	addi	r3,r3,16
    33b8:	10800044 	addi	r2,r2,1
    33bc:	45000015 	stw	r20,0(r8)
    33c0:	45800115 	stw	r22,4(r8)
    33c4:	d8c02015 	stw	r3,128(sp)
    33c8:	d8801f15 	stw	r2,124(sp)
    33cc:	e0bff60e 	bge	fp,r2,33a8 <__alt_data_end+0xfffd2668>
    33d0:	d9801e04 	addi	r6,sp,120
    33d4:	b80b883a 	mov	r5,r23
    33d8:	9809883a 	mov	r4,r19
    33dc:	00087500 	call	8750 <__sprint_r>
    33e0:	103a411e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    33e4:	d8c02017 	ldw	r3,128(sp)
    33e8:	d8801f17 	ldw	r2,124(sp)
    33ec:	da000404 	addi	r8,sp,16
    33f0:	003fee06 	br	33ac <__alt_data_end+0xfffd266c>
    33f4:	00bfffc4 	movi	r2,-1
    33f8:	003a3f06 	br	1cf8 <__alt_data_end+0xfffd0fb8>
    33fc:	008011c4 	movi	r2,71
    3400:	1440b816 	blt	r2,r17,36e4 <___vfprintf_internal_r+0x1e0c>
    3404:	040000b4 	movhi	r16,2
    3408:	84231d04 	addi	r16,r16,-29580
    340c:	00c000c4 	movi	r3,3
    3410:	00bfdfc4 	movi	r2,-129
    3414:	d8c02915 	stw	r3,164(sp)
    3418:	90a4703a 	and	r18,r18,r2
    341c:	df002783 	ldbu	fp,158(sp)
    3420:	d8c02b15 	stw	r3,172(sp)
    3424:	d8002a15 	stw	zero,168(sp)
    3428:	d8003215 	stw	zero,200(sp)
    342c:	003b0706 	br	204c <__alt_data_end+0xfffd130c>
    3430:	d8c02e17 	ldw	r3,184(sp)
    3434:	1cc00017 	ldw	r19,0(r3)
    3438:	18c00104 	addi	r3,r3,4
    343c:	d8c02e15 	stw	r3,184(sp)
    3440:	982dd7fa 	srai	r22,r19,31
    3444:	b005883a 	mov	r2,r22
    3448:	003a7706 	br	1e28 <__alt_data_end+0xfffd10e8>
    344c:	d8c02e17 	ldw	r3,184(sp)
    3450:	d9002f17 	ldw	r4,188(sp)
    3454:	18800017 	ldw	r2,0(r3)
    3458:	18c00104 	addi	r3,r3,4
    345c:	d8c02e15 	stw	r3,184(sp)
    3460:	11000015 	stw	r4,0(r2)
    3464:	00395406 	br	19b8 <__alt_data_end+0xfffd0c78>
    3468:	d9002e17 	ldw	r4,184(sp)
    346c:	002d883a 	mov	r22,zero
    3470:	24c00017 	ldw	r19,0(r4)
    3474:	21000104 	addi	r4,r4,4
    3478:	d9002e15 	stw	r4,184(sp)
    347c:	003c0706 	br	249c <__alt_data_end+0xfffd175c>
    3480:	d9402e17 	ldw	r5,184(sp)
    3484:	d8c02a17 	ldw	r3,168(sp)
    3488:	002d883a 	mov	r22,zero
    348c:	28800104 	addi	r2,r5,4
    3490:	2cc0000b 	ldhu	r19,0(r5)
    3494:	183dc10e 	bge	r3,zero,2b9c <__alt_data_end+0xfffd1e5c>
    3498:	003f7506 	br	3270 <__alt_data_end+0xfffd2530>
    349c:	040000b4 	movhi	r16,2
    34a0:	84231b04 	addi	r16,r16,-29588
    34a4:	003aa706 	br	1f44 <__alt_data_end+0xfffd1204>
    34a8:	d9002d17 	ldw	r4,180(sp)
    34ac:	d9801e04 	addi	r6,sp,120
    34b0:	b80b883a 	mov	r5,r23
    34b4:	00087500 	call	8750 <__sprint_r>
    34b8:	103a0b1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    34bc:	dc402617 	ldw	r17,152(sp)
    34c0:	d8c02017 	ldw	r3,128(sp)
    34c4:	da000404 	addi	r8,sp,16
    34c8:	003f9c06 	br	333c <__alt_data_end+0xfffd25fc>
    34cc:	ac400043 	ldbu	r17,1(r21)
    34d0:	84000814 	ori	r16,r16,32
    34d4:	ad400044 	addi	r21,r21,1
    34d8:	8c403fcc 	andi	r17,r17,255
    34dc:	8c40201c 	xori	r17,r17,128
    34e0:	8c7fe004 	addi	r17,r17,-128
    34e4:	00395e06 	br	1a60 <__alt_data_end+0xfffd0d20>
    34e8:	d8c02e15 	stw	r3,184(sp)
    34ec:	0039883a 	mov	fp,zero
    34f0:	003e3506 	br	2dc8 <__alt_data_end+0xfffd2088>
    34f4:	d9002d17 	ldw	r4,180(sp)
    34f8:	d9801e04 	addi	r6,sp,120
    34fc:	b80b883a 	mov	r5,r23
    3500:	00087500 	call	8750 <__sprint_r>
    3504:	1039f81e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    3508:	d8c02017 	ldw	r3,128(sp)
    350c:	da000404 	addi	r8,sp,16
    3510:	003cd006 	br	2854 <__alt_data_end+0xfffd1b14>
    3514:	8009883a 	mov	r4,r16
    3518:	df003d15 	stw	fp,244(sp)
    351c:	00018400 	call	1840 <strlen>
    3520:	d8802b15 	stw	r2,172(sp)
    3524:	da003d17 	ldw	r8,244(sp)
    3528:	103c200e 	bge	r2,zero,25ac <__alt_data_end+0xfffd186c>
    352c:	0005883a 	mov	r2,zero
    3530:	003c1e06 	br	25ac <__alt_data_end+0xfffd186c>
    3534:	d9002d17 	ldw	r4,180(sp)
    3538:	d9801e04 	addi	r6,sp,120
    353c:	b80b883a 	mov	r5,r23
    3540:	00087500 	call	8750 <__sprint_r>
    3544:	1039e81e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    3548:	d8c02017 	ldw	r3,128(sp)
    354c:	d8801f17 	ldw	r2,124(sp)
    3550:	da000404 	addi	r8,sp,16
    3554:	d9403317 	ldw	r5,204(sp)
    3558:	10800044 	addi	r2,r2,1
    355c:	44000015 	stw	r16,0(r8)
    3560:	28c7883a 	add	r3,r5,r3
    3564:	003b5b06 	br	22d4 <__alt_data_end+0xfffd1594>
    3568:	010000b4 	movhi	r4,2
    356c:	21232f84 	addi	r4,r4,-29506
    3570:	d9003515 	stw	r4,212(sp)
    3574:	003af206 	br	2140 <__alt_data_end+0xfffd1400>
    3578:	013fffc4 	movi	r4,-1
    357c:	003a0806 	br	1da0 <__alt_data_end+0xfffd1060>
    3580:	0023883a 	mov	r17,zero
    3584:	003d9d06 	br	2bfc <__alt_data_end+0xfffd1ebc>
    3588:	d9002d17 	ldw	r4,180(sp)
    358c:	d9801e04 	addi	r6,sp,120
    3590:	b80b883a 	mov	r5,r23
    3594:	00087500 	call	8750 <__sprint_r>
    3598:	1039d31e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    359c:	d8c02017 	ldw	r3,128(sp)
    35a0:	da000404 	addi	r8,sp,16
    35a4:	003d9406 	br	2bf8 <__alt_data_end+0xfffd1eb8>
    35a8:	010000b4 	movhi	r4,2
    35ac:	21232b84 	addi	r4,r4,-29522
    35b0:	d9002c15 	stw	r4,176(sp)
    35b4:	d9002c17 	ldw	r4,176(sp)
    35b8:	1c47883a 	add	r3,r3,r17
    35bc:	10800044 	addi	r2,r2,1
    35c0:	41000015 	stw	r4,0(r8)
    35c4:	44400115 	stw	r17,4(r8)
    35c8:	d8c02015 	stw	r3,128(sp)
    35cc:	d8801f15 	stw	r2,124(sp)
    35d0:	010001c4 	movi	r4,7
    35d4:	20bfd716 	blt	r4,r2,3534 <__alt_data_end+0xfffd27f4>
    35d8:	42000204 	addi	r8,r8,8
    35dc:	003fdd06 	br	3554 <__alt_data_end+0xfffd2814>
    35e0:	d9002d17 	ldw	r4,180(sp)
    35e4:	d9801e04 	addi	r6,sp,120
    35e8:	b80b883a 	mov	r5,r23
    35ec:	00087500 	call	8750 <__sprint_r>
    35f0:	1039bd1e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    35f4:	d8802617 	ldw	r2,152(sp)
    35f8:	d8c02017 	ldw	r3,128(sp)
    35fc:	da000404 	addi	r8,sp,16
    3600:	003e1006 	br	2e44 <__alt_data_end+0xfffd2104>
    3604:	00800044 	movi	r2,1
    3608:	10803fcc 	andi	r2,r2,255
    360c:	00c00044 	movi	r3,1
    3610:	10fa0d26 	beq	r2,r3,1e48 <__alt_data_end+0xfffd1108>
    3614:	00c00084 	movi	r3,2
    3618:	10fbaf26 	beq	r2,r3,24d8 <__alt_data_end+0xfffd1798>
    361c:	003a6d06 	br	1fd4 <__alt_data_end+0xfffd1294>
    3620:	010000b4 	movhi	r4,2
    3624:	21232f84 	addi	r4,r4,-29506
    3628:	d9003515 	stw	r4,212(sp)
    362c:	003b5406 	br	2380 <__alt_data_end+0xfffd1640>
    3630:	d8802a17 	ldw	r2,168(sp)
    3634:	00c00184 	movi	r3,6
    3638:	1880012e 	bgeu	r3,r2,3640 <___vfprintf_internal_r+0x1d68>
    363c:	1805883a 	mov	r2,r3
    3640:	d8802b15 	stw	r2,172(sp)
    3644:	1000ef16 	blt	r2,zero,3a04 <___vfprintf_internal_r+0x212c>
    3648:	040000b4 	movhi	r16,2
    364c:	d8802915 	stw	r2,164(sp)
    3650:	dcc02e15 	stw	r19,184(sp)
    3654:	d8002a15 	stw	zero,168(sp)
    3658:	d8003215 	stw	zero,200(sp)
    365c:	84232904 	addi	r16,r16,-29532
    3660:	0039883a 	mov	fp,zero
    3664:	003a8006 	br	2068 <__alt_data_end+0xfffd1328>
    3668:	0021883a 	mov	r16,zero
    366c:	003e0706 	br	2e8c <__alt_data_end+0xfffd214c>
    3670:	d9002d17 	ldw	r4,180(sp)
    3674:	d9801e04 	addi	r6,sp,120
    3678:	b80b883a 	mov	r5,r23
    367c:	00087500 	call	8750 <__sprint_r>
    3680:	1039991e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    3684:	d8802617 	ldw	r2,152(sp)
    3688:	d9403317 	ldw	r5,204(sp)
    368c:	d8c02017 	ldw	r3,128(sp)
    3690:	da000404 	addi	r8,sp,16
    3694:	2885c83a 	sub	r2,r5,r2
    3698:	003dfb06 	br	2e88 <__alt_data_end+0xfffd2148>
    369c:	9080004c 	andi	r2,r18,1
    36a0:	103e8f1e 	bne	r2,zero,30e0 <__alt_data_end+0xfffd23a0>
    36a4:	d8802117 	ldw	r2,132(sp)
    36a8:	003e9e06 	br	3124 <__alt_data_end+0xfffd23e4>
    36ac:	1025883a 	mov	r18,r2
    36b0:	0039883a 	mov	fp,zero
    36b4:	00800084 	movi	r2,2
    36b8:	003fd306 	br	3608 <__alt_data_end+0xfffd28c8>
    36bc:	07000b44 	movi	fp,45
    36c0:	df002785 	stb	fp,158(sp)
    36c4:	003a1b06 	br	1f34 <__alt_data_end+0xfffd11f4>
    36c8:	00c00b44 	movi	r3,45
    36cc:	d8c02785 	stb	r3,158(sp)
    36d0:	d8802915 	stw	r2,164(sp)
    36d4:	dc802c17 	ldw	r18,176(sp)
    36d8:	d8002a15 	stw	zero,168(sp)
    36dc:	07000b44 	movi	fp,45
    36e0:	003a5e06 	br	205c <__alt_data_end+0xfffd131c>
    36e4:	040000b4 	movhi	r16,2
    36e8:	84231e04 	addi	r16,r16,-29576
    36ec:	003f4706 	br	340c <__alt_data_end+0xfffd26cc>
    36f0:	d9002e17 	ldw	r4,184(sp)
    36f4:	d9402f17 	ldw	r5,188(sp)
    36f8:	20800017 	ldw	r2,0(r4)
    36fc:	21000104 	addi	r4,r4,4
    3700:	d9002e15 	stw	r4,184(sp)
    3704:	11400015 	stw	r5,0(r2)
    3708:	0038ab06 	br	19b8 <__alt_data_end+0xfffd0c78>
    370c:	dd802617 	ldw	r22,152(sp)
    3710:	00bfff44 	movi	r2,-3
    3714:	b0801c16 	blt	r22,r2,3788 <___vfprintf_internal_r+0x1eb0>
    3718:	d9402a17 	ldw	r5,168(sp)
    371c:	2d801a16 	blt	r5,r22,3788 <___vfprintf_internal_r+0x1eb0>
    3720:	dd803215 	stw	r22,200(sp)
    3724:	003e8906 	br	314c <__alt_data_end+0xfffd240c>
    3728:	010000b4 	movhi	r4,2
    372c:	21232b84 	addi	r4,r4,-29522
    3730:	d9002c15 	stw	r4,176(sp)
    3734:	003c9106 	br	297c <__alt_data_end+0xfffd1c3c>
    3738:	e005883a 	mov	r2,fp
    373c:	003e7906 	br	3124 <__alt_data_end+0xfffd23e4>
    3740:	d9002a17 	ldw	r4,168(sp)
    3744:	df002783 	ldbu	fp,158(sp)
    3748:	dcc02e15 	stw	r19,184(sp)
    374c:	d9002915 	stw	r4,164(sp)
    3750:	d9002b15 	stw	r4,172(sp)
    3754:	d8002a15 	stw	zero,168(sp)
    3758:	d8003215 	stw	zero,200(sp)
    375c:	003a3b06 	br	204c <__alt_data_end+0xfffd130c>
    3760:	9080004c 	andi	r2,r18,1
    3764:	0039883a 	mov	fp,zero
    3768:	10000426 	beq	r2,zero,377c <___vfprintf_internal_r+0x1ea4>
    376c:	00800c04 	movi	r2,48
    3770:	dc001dc4 	addi	r16,sp,119
    3774:	d8801dc5 	stb	r2,119(sp)
    3778:	003b6406 	br	250c <__alt_data_end+0xfffd17cc>
    377c:	d8002b15 	stw	zero,172(sp)
    3780:	dc001e04 	addi	r16,sp,120
    3784:	003a2b06 	br	2034 <__alt_data_end+0xfffd12f4>
    3788:	8c7fff84 	addi	r17,r17,-2
    378c:	b5bfffc4 	addi	r22,r22,-1
    3790:	dd802615 	stw	r22,152(sp)
    3794:	dc4022c5 	stb	r17,139(sp)
    3798:	b000bf16 	blt	r22,zero,3a98 <___vfprintf_internal_r+0x21c0>
    379c:	00800ac4 	movi	r2,43
    37a0:	d8802305 	stb	r2,140(sp)
    37a4:	00800244 	movi	r2,9
    37a8:	15807016 	blt	r2,r22,396c <___vfprintf_internal_r+0x2094>
    37ac:	00800c04 	movi	r2,48
    37b0:	b5800c04 	addi	r22,r22,48
    37b4:	d8802345 	stb	r2,141(sp)
    37b8:	dd802385 	stb	r22,142(sp)
    37bc:	d88023c4 	addi	r2,sp,143
    37c0:	df0022c4 	addi	fp,sp,139
    37c4:	d8c03317 	ldw	r3,204(sp)
    37c8:	1739c83a 	sub	fp,r2,fp
    37cc:	d9003317 	ldw	r4,204(sp)
    37d0:	e0c7883a 	add	r3,fp,r3
    37d4:	df003a15 	stw	fp,232(sp)
    37d8:	d8c02b15 	stw	r3,172(sp)
    37dc:	00800044 	movi	r2,1
    37e0:	1100b30e 	bge	r2,r4,3ab0 <___vfprintf_internal_r+0x21d8>
    37e4:	d8c02b17 	ldw	r3,172(sp)
    37e8:	18c00044 	addi	r3,r3,1
    37ec:	d8c02b15 	stw	r3,172(sp)
    37f0:	1805883a 	mov	r2,r3
    37f4:	1800ac16 	blt	r3,zero,3aa8 <___vfprintf_internal_r+0x21d0>
    37f8:	d8003215 	stw	zero,200(sp)
    37fc:	003e5d06 	br	3174 <__alt_data_end+0xfffd2434>
    3800:	d9002d17 	ldw	r4,180(sp)
    3804:	d9801e04 	addi	r6,sp,120
    3808:	b80b883a 	mov	r5,r23
    380c:	00087500 	call	8750 <__sprint_r>
    3810:	1039351e 	bne	r2,zero,1ce8 <__alt_data_end+0xfffd0fa8>
    3814:	dc402617 	ldw	r17,152(sp)
    3818:	d8c02017 	ldw	r3,128(sp)
    381c:	d8801f17 	ldw	r2,124(sp)
    3820:	da000404 	addi	r8,sp,16
    3824:	003ed606 	br	3380 <__alt_data_end+0xfffd2640>
    3828:	182b883a 	mov	r21,r3
    382c:	d8002a15 	stw	zero,168(sp)
    3830:	00388c06 	br	1a64 <__alt_data_end+0xfffd0d24>
    3834:	d8802a17 	ldw	r2,168(sp)
    3838:	103e071e 	bne	r2,zero,3058 <__alt_data_end+0xfffd2318>
    383c:	dc002a15 	stw	r16,168(sp)
    3840:	003e0506 	br	3058 <__alt_data_end+0xfffd2318>
    3844:	d9002a17 	ldw	r4,168(sp)
    3848:	20c00044 	addi	r3,r4,1
    384c:	003e0f06 	br	308c <__alt_data_end+0xfffd234c>
    3850:	01400184 	movi	r5,6
    3854:	d9402a15 	stw	r5,168(sp)
    3858:	003dff06 	br	3058 <__alt_data_end+0xfffd2318>
    385c:	d8802104 	addi	r2,sp,132
    3860:	d8800315 	stw	r2,12(sp)
    3864:	d8802504 	addi	r2,sp,148
    3868:	d8800215 	stw	r2,8(sp)
    386c:	d8802604 	addi	r2,sp,152
    3870:	d8800115 	stw	r2,4(sp)
    3874:	d8802a17 	ldw	r2,168(sp)
    3878:	d9403617 	ldw	r5,216(sp)
    387c:	d9002d17 	ldw	r4,180(sp)
    3880:	d8800015 	stw	r2,0(sp)
    3884:	01c000c4 	movi	r7,3
    3888:	980d883a 	mov	r6,r19
    388c:	da003d15 	stw	r8,244(sp)
    3890:	00040080 	call	4008 <_dtoa_r>
    3894:	d8c02a17 	ldw	r3,168(sp)
    3898:	da003d17 	ldw	r8,244(sp)
    389c:	1021883a 	mov	r16,r2
    38a0:	10f9883a 	add	fp,r2,r3
    38a4:	81000007 	ldb	r4,0(r16)
    38a8:	00800c04 	movi	r2,48
    38ac:	20805e26 	beq	r4,r2,3a28 <___vfprintf_internal_r+0x2150>
    38b0:	d8c02617 	ldw	r3,152(sp)
    38b4:	e0f9883a 	add	fp,fp,r3
    38b8:	003e0a06 	br	30e4 <__alt_data_end+0xfffd23a4>
    38bc:	00c00b44 	movi	r3,45
    38c0:	24e0003c 	xorhi	r19,r4,32768
    38c4:	d8c02905 	stb	r3,164(sp)
    38c8:	003de906 	br	3070 <__alt_data_end+0xfffd2330>
    38cc:	d8c03217 	ldw	r3,200(sp)
    38d0:	00c07a0e 	bge	zero,r3,3abc <___vfprintf_internal_r+0x21e4>
    38d4:	00800044 	movi	r2,1
    38d8:	d9003317 	ldw	r4,204(sp)
    38dc:	1105883a 	add	r2,r2,r4
    38e0:	d8802b15 	stw	r2,172(sp)
    38e4:	10004e16 	blt	r2,zero,3a20 <___vfprintf_internal_r+0x2148>
    38e8:	044019c4 	movi	r17,103
    38ec:	003e2106 	br	3174 <__alt_data_end+0xfffd2434>
    38f0:	d9002a17 	ldw	r4,168(sp)
    38f4:	d8802104 	addi	r2,sp,132
    38f8:	d8800315 	stw	r2,12(sp)
    38fc:	d9000015 	stw	r4,0(sp)
    3900:	d8802504 	addi	r2,sp,148
    3904:	d9403617 	ldw	r5,216(sp)
    3908:	d9002d17 	ldw	r4,180(sp)
    390c:	d8800215 	stw	r2,8(sp)
    3910:	d8802604 	addi	r2,sp,152
    3914:	d8800115 	stw	r2,4(sp)
    3918:	01c000c4 	movi	r7,3
    391c:	980d883a 	mov	r6,r19
    3920:	da003d15 	stw	r8,244(sp)
    3924:	00040080 	call	4008 <_dtoa_r>
    3928:	d8c02a17 	ldw	r3,168(sp)
    392c:	da003d17 	ldw	r8,244(sp)
    3930:	1021883a 	mov	r16,r2
    3934:	00801184 	movi	r2,70
    3938:	80f9883a 	add	fp,r16,r3
    393c:	88bfd926 	beq	r17,r2,38a4 <__alt_data_end+0xfffd2b64>
    3940:	003de806 	br	30e4 <__alt_data_end+0xfffd23a4>
    3944:	d9002a17 	ldw	r4,168(sp)
    3948:	00c04d0e 	bge	zero,r3,3a80 <___vfprintf_internal_r+0x21a8>
    394c:	2000441e 	bne	r4,zero,3a60 <___vfprintf_internal_r+0x2188>
    3950:	9480004c 	andi	r18,r18,1
    3954:	9000421e 	bne	r18,zero,3a60 <___vfprintf_internal_r+0x2188>
    3958:	1805883a 	mov	r2,r3
    395c:	18006f16 	blt	r3,zero,3b1c <___vfprintf_internal_r+0x2244>
    3960:	d8c03217 	ldw	r3,200(sp)
    3964:	d8c02b15 	stw	r3,172(sp)
    3968:	003e0206 	br	3174 <__alt_data_end+0xfffd2434>
    396c:	df0022c4 	addi	fp,sp,139
    3970:	dc002a15 	stw	r16,168(sp)
    3974:	4027883a 	mov	r19,r8
    3978:	e021883a 	mov	r16,fp
    397c:	b009883a 	mov	r4,r22
    3980:	01400284 	movi	r5,10
    3984:	0000a900 	call	a90 <__modsi3>
    3988:	10800c04 	addi	r2,r2,48
    398c:	843fffc4 	addi	r16,r16,-1
    3990:	b009883a 	mov	r4,r22
    3994:	01400284 	movi	r5,10
    3998:	80800005 	stb	r2,0(r16)
    399c:	0000a0c0 	call	a0c <__divsi3>
    39a0:	102d883a 	mov	r22,r2
    39a4:	00800244 	movi	r2,9
    39a8:	15bff416 	blt	r2,r22,397c <__alt_data_end+0xfffd2c3c>
    39ac:	9811883a 	mov	r8,r19
    39b0:	b0800c04 	addi	r2,r22,48
    39b4:	8027883a 	mov	r19,r16
    39b8:	997fffc4 	addi	r5,r19,-1
    39bc:	98bfffc5 	stb	r2,-1(r19)
    39c0:	dc002a17 	ldw	r16,168(sp)
    39c4:	2f006d2e 	bgeu	r5,fp,3b7c <___vfprintf_internal_r+0x22a4>
    39c8:	d9c02384 	addi	r7,sp,142
    39cc:	3ccfc83a 	sub	r7,r7,r19
    39d0:	d9002344 	addi	r4,sp,141
    39d4:	e1cf883a 	add	r7,fp,r7
    39d8:	00000106 	br	39e0 <___vfprintf_internal_r+0x2108>
    39dc:	28800003 	ldbu	r2,0(r5)
    39e0:	20800005 	stb	r2,0(r4)
    39e4:	21000044 	addi	r4,r4,1
    39e8:	29400044 	addi	r5,r5,1
    39ec:	393ffb1e 	bne	r7,r4,39dc <__alt_data_end+0xfffd2c9c>
    39f0:	d8802304 	addi	r2,sp,140
    39f4:	14c5c83a 	sub	r2,r2,r19
    39f8:	d8c02344 	addi	r3,sp,141
    39fc:	1885883a 	add	r2,r3,r2
    3a00:	003f7006 	br	37c4 <__alt_data_end+0xfffd2a84>
    3a04:	0005883a 	mov	r2,zero
    3a08:	003f0f06 	br	3648 <__alt_data_end+0xfffd2908>
    3a0c:	d8c03217 	ldw	r3,200(sp)
    3a10:	18c00044 	addi	r3,r3,1
    3a14:	d8c02b15 	stw	r3,172(sp)
    3a18:	1805883a 	mov	r2,r3
    3a1c:	183fb20e 	bge	r3,zero,38e8 <__alt_data_end+0xfffd2ba8>
    3a20:	0005883a 	mov	r2,zero
    3a24:	003fb006 	br	38e8 <__alt_data_end+0xfffd2ba8>
    3a28:	d9003617 	ldw	r4,216(sp)
    3a2c:	000d883a 	mov	r6,zero
    3a30:	000f883a 	mov	r7,zero
    3a34:	980b883a 	mov	r5,r19
    3a38:	d8c03c15 	stw	r3,240(sp)
    3a3c:	da003d15 	stw	r8,244(sp)
    3a40:	000c4d40 	call	c4d4 <__eqdf2>
    3a44:	d8c03c17 	ldw	r3,240(sp)
    3a48:	da003d17 	ldw	r8,244(sp)
    3a4c:	103f9826 	beq	r2,zero,38b0 <__alt_data_end+0xfffd2b70>
    3a50:	00800044 	movi	r2,1
    3a54:	10c7c83a 	sub	r3,r2,r3
    3a58:	d8c02615 	stw	r3,152(sp)
    3a5c:	003f9506 	br	38b4 <__alt_data_end+0xfffd2b74>
    3a60:	d9002a17 	ldw	r4,168(sp)
    3a64:	d8c03217 	ldw	r3,200(sp)
    3a68:	20800044 	addi	r2,r4,1
    3a6c:	1885883a 	add	r2,r3,r2
    3a70:	d8802b15 	stw	r2,172(sp)
    3a74:	103dbf0e 	bge	r2,zero,3174 <__alt_data_end+0xfffd2434>
    3a78:	0005883a 	mov	r2,zero
    3a7c:	003dbd06 	br	3174 <__alt_data_end+0xfffd2434>
    3a80:	2000201e 	bne	r4,zero,3b04 <___vfprintf_internal_r+0x222c>
    3a84:	9480004c 	andi	r18,r18,1
    3a88:	90001e1e 	bne	r18,zero,3b04 <___vfprintf_internal_r+0x222c>
    3a8c:	00800044 	movi	r2,1
    3a90:	d8802b15 	stw	r2,172(sp)
    3a94:	003db706 	br	3174 <__alt_data_end+0xfffd2434>
    3a98:	00800b44 	movi	r2,45
    3a9c:	05adc83a 	sub	r22,zero,r22
    3aa0:	d8802305 	stb	r2,140(sp)
    3aa4:	003f3f06 	br	37a4 <__alt_data_end+0xfffd2a64>
    3aa8:	0005883a 	mov	r2,zero
    3aac:	003f5206 	br	37f8 <__alt_data_end+0xfffd2ab8>
    3ab0:	90a4703a 	and	r18,r18,r2
    3ab4:	903f4e26 	beq	r18,zero,37f0 <__alt_data_end+0xfffd2ab0>
    3ab8:	003f4a06 	br	37e4 <__alt_data_end+0xfffd2aa4>
    3abc:	00800084 	movi	r2,2
    3ac0:	10c5c83a 	sub	r2,r2,r3
    3ac4:	003f8406 	br	38d8 <__alt_data_end+0xfffd2b98>
    3ac8:	d9402e17 	ldw	r5,184(sp)
    3acc:	d9002e17 	ldw	r4,184(sp)
    3ad0:	ac400043 	ldbu	r17,1(r21)
    3ad4:	29400017 	ldw	r5,0(r5)
    3ad8:	20800104 	addi	r2,r4,4
    3adc:	d8802e15 	stw	r2,184(sp)
    3ae0:	d9402a15 	stw	r5,168(sp)
    3ae4:	182b883a 	mov	r21,r3
    3ae8:	283e7b0e 	bge	r5,zero,34d8 <__alt_data_end+0xfffd2798>
    3aec:	8c403fcc 	andi	r17,r17,255
    3af0:	017fffc4 	movi	r5,-1
    3af4:	8c40201c 	xori	r17,r17,128
    3af8:	d9402a15 	stw	r5,168(sp)
    3afc:	8c7fe004 	addi	r17,r17,-128
    3b00:	0037d706 	br	1a60 <__alt_data_end+0xfffd0d20>
    3b04:	d8c02a17 	ldw	r3,168(sp)
    3b08:	18c00084 	addi	r3,r3,2
    3b0c:	d8c02b15 	stw	r3,172(sp)
    3b10:	1805883a 	mov	r2,r3
    3b14:	183d970e 	bge	r3,zero,3174 <__alt_data_end+0xfffd2434>
    3b18:	003fd706 	br	3a78 <__alt_data_end+0xfffd2d38>
    3b1c:	0005883a 	mov	r2,zero
    3b20:	003f8f06 	br	3960 <__alt_data_end+0xfffd2c20>
    3b24:	9080004c 	andi	r2,r18,1
    3b28:	103f821e 	bne	r2,zero,3934 <__alt_data_end+0xfffd2bf4>
    3b2c:	d8802117 	ldw	r2,132(sp)
    3b30:	1405c83a 	sub	r2,r2,r16
    3b34:	d8803315 	stw	r2,204(sp)
    3b38:	b47ef426 	beq	r22,r17,370c <__alt_data_end+0xfffd29cc>
    3b3c:	dd802617 	ldw	r22,152(sp)
    3b40:	003f1206 	br	378c <__alt_data_end+0xfffd2a4c>
    3b44:	d8c02b03 	ldbu	r3,172(sp)
    3b48:	d8c02785 	stb	r3,158(sp)
    3b4c:	0038df06 	br	1ecc <__alt_data_end+0xfffd118c>
    3b50:	d8c02b03 	ldbu	r3,172(sp)
    3b54:	d8c02785 	stb	r3,158(sp)
    3b58:	0038aa06 	br	1e04 <__alt_data_end+0xfffd10c4>
    3b5c:	d8c02b03 	ldbu	r3,172(sp)
    3b60:	d8c02785 	stb	r3,158(sp)
    3b64:	003a4306 	br	2474 <__alt_data_end+0xfffd1734>
    3b68:	d8c02b03 	ldbu	r3,172(sp)
    3b6c:	d8c02785 	stb	r3,158(sp)
    3b70:	003af506 	br	2748 <__alt_data_end+0xfffd1a08>
    3b74:	0005883a 	mov	r2,zero
    3b78:	003d7b06 	br	3168 <__alt_data_end+0xfffd2428>
    3b7c:	d8802344 	addi	r2,sp,141
    3b80:	003f1006 	br	37c4 <__alt_data_end+0xfffd2a84>
    3b84:	d8c02b03 	ldbu	r3,172(sp)
    3b88:	d8c02785 	stb	r3,158(sp)
    3b8c:	0038fd06 	br	1f84 <__alt_data_end+0xfffd1244>
    3b90:	d8c02b03 	ldbu	r3,172(sp)
    3b94:	d8c02785 	stb	r3,158(sp)
    3b98:	003a9706 	br	25f8 <__alt_data_end+0xfffd18b8>
    3b9c:	d8c02b03 	ldbu	r3,172(sp)
    3ba0:	d8c02785 	stb	r3,158(sp)
    3ba4:	003a1806 	br	2408 <__alt_data_end+0xfffd16c8>
    3ba8:	d8c02b03 	ldbu	r3,172(sp)
    3bac:	d8c02785 	stb	r3,158(sp)
    3bb0:	003abe06 	br	26ac <__alt_data_end+0xfffd196c>

00003bb4 <__vfprintf_internal>:
    3bb4:	008000b4 	movhi	r2,2
    3bb8:	10aae204 	addi	r2,r2,-21624
    3bbc:	300f883a 	mov	r7,r6
    3bc0:	280d883a 	mov	r6,r5
    3bc4:	200b883a 	mov	r5,r4
    3bc8:	11000017 	ldw	r4,0(r2)
    3bcc:	00018d81 	jmpi	18d8 <___vfprintf_internal_r>

00003bd0 <__sbprintf>:
    3bd0:	2880030b 	ldhu	r2,12(r5)
    3bd4:	2ac01917 	ldw	r11,100(r5)
    3bd8:	2a80038b 	ldhu	r10,14(r5)
    3bdc:	2a400717 	ldw	r9,28(r5)
    3be0:	2a000917 	ldw	r8,36(r5)
    3be4:	defee204 	addi	sp,sp,-1144
    3be8:	00c10004 	movi	r3,1024
    3bec:	dc011a15 	stw	r16,1128(sp)
    3bf0:	10bfff4c 	andi	r2,r2,65533
    3bf4:	2821883a 	mov	r16,r5
    3bf8:	d8cb883a 	add	r5,sp,r3
    3bfc:	dc811c15 	stw	r18,1136(sp)
    3c00:	dc411b15 	stw	r17,1132(sp)
    3c04:	dfc11d15 	stw	ra,1140(sp)
    3c08:	2025883a 	mov	r18,r4
    3c0c:	d881030d 	sth	r2,1036(sp)
    3c10:	dac11915 	stw	r11,1124(sp)
    3c14:	da81038d 	sth	r10,1038(sp)
    3c18:	da410715 	stw	r9,1052(sp)
    3c1c:	da010915 	stw	r8,1060(sp)
    3c20:	dec10015 	stw	sp,1024(sp)
    3c24:	dec10415 	stw	sp,1040(sp)
    3c28:	d8c10215 	stw	r3,1032(sp)
    3c2c:	d8c10515 	stw	r3,1044(sp)
    3c30:	d8010615 	stw	zero,1048(sp)
    3c34:	00018d80 	call	18d8 <___vfprintf_internal_r>
    3c38:	1023883a 	mov	r17,r2
    3c3c:	10000416 	blt	r2,zero,3c50 <__sbprintf+0x80>
    3c40:	d9410004 	addi	r5,sp,1024
    3c44:	9009883a 	mov	r4,r18
    3c48:	00058ac0 	call	58ac <_fflush_r>
    3c4c:	10000d1e 	bne	r2,zero,3c84 <__sbprintf+0xb4>
    3c50:	d881030b 	ldhu	r2,1036(sp)
    3c54:	1080100c 	andi	r2,r2,64
    3c58:	10000326 	beq	r2,zero,3c68 <__sbprintf+0x98>
    3c5c:	8080030b 	ldhu	r2,12(r16)
    3c60:	10801014 	ori	r2,r2,64
    3c64:	8080030d 	sth	r2,12(r16)
    3c68:	8805883a 	mov	r2,r17
    3c6c:	dfc11d17 	ldw	ra,1140(sp)
    3c70:	dc811c17 	ldw	r18,1136(sp)
    3c74:	dc411b17 	ldw	r17,1132(sp)
    3c78:	dc011a17 	ldw	r16,1128(sp)
    3c7c:	dec11e04 	addi	sp,sp,1144
    3c80:	f800283a 	ret
    3c84:	047fffc4 	movi	r17,-1
    3c88:	003ff106 	br	3c50 <__alt_data_end+0xfffd2f10>

00003c8c <__swsetup_r>:
    3c8c:	008000b4 	movhi	r2,2
    3c90:	defffd04 	addi	sp,sp,-12
    3c94:	10aae204 	addi	r2,r2,-21624
    3c98:	dc400115 	stw	r17,4(sp)
    3c9c:	2023883a 	mov	r17,r4
    3ca0:	11000017 	ldw	r4,0(r2)
    3ca4:	dc000015 	stw	r16,0(sp)
    3ca8:	dfc00215 	stw	ra,8(sp)
    3cac:	2821883a 	mov	r16,r5
    3cb0:	20000226 	beq	r4,zero,3cbc <__swsetup_r+0x30>
    3cb4:	20800e17 	ldw	r2,56(r4)
    3cb8:	10003126 	beq	r2,zero,3d80 <__swsetup_r+0xf4>
    3cbc:	8080030b 	ldhu	r2,12(r16)
    3cc0:	10c0020c 	andi	r3,r2,8
    3cc4:	1009883a 	mov	r4,r2
    3cc8:	18000f26 	beq	r3,zero,3d08 <__swsetup_r+0x7c>
    3ccc:	80c00417 	ldw	r3,16(r16)
    3cd0:	18001526 	beq	r3,zero,3d28 <__swsetup_r+0x9c>
    3cd4:	1100004c 	andi	r4,r2,1
    3cd8:	20001c1e 	bne	r4,zero,3d4c <__swsetup_r+0xc0>
    3cdc:	1080008c 	andi	r2,r2,2
    3ce0:	1000291e 	bne	r2,zero,3d88 <__swsetup_r+0xfc>
    3ce4:	80800517 	ldw	r2,20(r16)
    3ce8:	80800215 	stw	r2,8(r16)
    3cec:	18001c26 	beq	r3,zero,3d60 <__swsetup_r+0xd4>
    3cf0:	0005883a 	mov	r2,zero
    3cf4:	dfc00217 	ldw	ra,8(sp)
    3cf8:	dc400117 	ldw	r17,4(sp)
    3cfc:	dc000017 	ldw	r16,0(sp)
    3d00:	dec00304 	addi	sp,sp,12
    3d04:	f800283a 	ret
    3d08:	2080040c 	andi	r2,r4,16
    3d0c:	10002e26 	beq	r2,zero,3dc8 <__swsetup_r+0x13c>
    3d10:	2080010c 	andi	r2,r4,4
    3d14:	10001e1e 	bne	r2,zero,3d90 <__swsetup_r+0x104>
    3d18:	80c00417 	ldw	r3,16(r16)
    3d1c:	20800214 	ori	r2,r4,8
    3d20:	8080030d 	sth	r2,12(r16)
    3d24:	183feb1e 	bne	r3,zero,3cd4 <__alt_data_end+0xfffd2f94>
    3d28:	1100a00c 	andi	r4,r2,640
    3d2c:	01408004 	movi	r5,512
    3d30:	217fe826 	beq	r4,r5,3cd4 <__alt_data_end+0xfffd2f94>
    3d34:	800b883a 	mov	r5,r16
    3d38:	8809883a 	mov	r4,r17
    3d3c:	00068480 	call	6848 <__smakebuf_r>
    3d40:	8080030b 	ldhu	r2,12(r16)
    3d44:	80c00417 	ldw	r3,16(r16)
    3d48:	003fe206 	br	3cd4 <__alt_data_end+0xfffd2f94>
    3d4c:	80800517 	ldw	r2,20(r16)
    3d50:	80000215 	stw	zero,8(r16)
    3d54:	0085c83a 	sub	r2,zero,r2
    3d58:	80800615 	stw	r2,24(r16)
    3d5c:	183fe41e 	bne	r3,zero,3cf0 <__alt_data_end+0xfffd2fb0>
    3d60:	80c0030b 	ldhu	r3,12(r16)
    3d64:	0005883a 	mov	r2,zero
    3d68:	1900200c 	andi	r4,r3,128
    3d6c:	203fe126 	beq	r4,zero,3cf4 <__alt_data_end+0xfffd2fb4>
    3d70:	18c01014 	ori	r3,r3,64
    3d74:	80c0030d 	sth	r3,12(r16)
    3d78:	00bfffc4 	movi	r2,-1
    3d7c:	003fdd06 	br	3cf4 <__alt_data_end+0xfffd2fb4>
    3d80:	0005c980 	call	5c98 <__sinit>
    3d84:	003fcd06 	br	3cbc <__alt_data_end+0xfffd2f7c>
    3d88:	0005883a 	mov	r2,zero
    3d8c:	003fd606 	br	3ce8 <__alt_data_end+0xfffd2fa8>
    3d90:	81400c17 	ldw	r5,48(r16)
    3d94:	28000626 	beq	r5,zero,3db0 <__swsetup_r+0x124>
    3d98:	80801004 	addi	r2,r16,64
    3d9c:	28800326 	beq	r5,r2,3dac <__swsetup_r+0x120>
    3da0:	8809883a 	mov	r4,r17
    3da4:	0005e0c0 	call	5e0c <_free_r>
    3da8:	8100030b 	ldhu	r4,12(r16)
    3dac:	80000c15 	stw	zero,48(r16)
    3db0:	80c00417 	ldw	r3,16(r16)
    3db4:	00bff6c4 	movi	r2,-37
    3db8:	1108703a 	and	r4,r2,r4
    3dbc:	80000115 	stw	zero,4(r16)
    3dc0:	80c00015 	stw	r3,0(r16)
    3dc4:	003fd506 	br	3d1c <__alt_data_end+0xfffd2fdc>
    3dc8:	00800244 	movi	r2,9
    3dcc:	88800015 	stw	r2,0(r17)
    3dd0:	20801014 	ori	r2,r4,64
    3dd4:	8080030d 	sth	r2,12(r16)
    3dd8:	00bfffc4 	movi	r2,-1
    3ddc:	003fc506 	br	3cf4 <__alt_data_end+0xfffd2fb4>

00003de0 <quorem>:
    3de0:	defff204 	addi	sp,sp,-56
    3de4:	ddc00b15 	stw	r23,44(sp)
    3de8:	20800417 	ldw	r2,16(r4)
    3dec:	2dc00417 	ldw	r23,16(r5)
    3df0:	dfc00d15 	stw	ra,52(sp)
    3df4:	df000c15 	stw	fp,48(sp)
    3df8:	dd800a15 	stw	r22,40(sp)
    3dfc:	dd400915 	stw	r21,36(sp)
    3e00:	dd000815 	stw	r20,32(sp)
    3e04:	dcc00715 	stw	r19,28(sp)
    3e08:	dc800615 	stw	r18,24(sp)
    3e0c:	dc400515 	stw	r17,20(sp)
    3e10:	dc000415 	stw	r16,16(sp)
    3e14:	15c07a16 	blt	r2,r23,4000 <quorem+0x220>
    3e18:	bdffffc4 	addi	r23,r23,-1
    3e1c:	bde9883a 	add	r20,r23,r23
    3e20:	28c00504 	addi	r3,r5,20
    3e24:	a529883a 	add	r20,r20,r20
    3e28:	1d39883a 	add	fp,r3,r20
    3e2c:	24c00504 	addi	r19,r4,20
    3e30:	d9400215 	stw	r5,8(sp)
    3e34:	9d29883a 	add	r20,r19,r20
    3e38:	e1400017 	ldw	r5,0(fp)
    3e3c:	d9000015 	stw	r4,0(sp)
    3e40:	a1000017 	ldw	r4,0(r20)
    3e44:	29400044 	addi	r5,r5,1
    3e48:	d8c00115 	stw	r3,4(sp)
    3e4c:	dd000315 	stw	r20,12(sp)
    3e50:	0000b040 	call	b04 <__udivsi3>
    3e54:	1025883a 	mov	r18,r2
    3e58:	10003026 	beq	r2,zero,3f1c <quorem+0x13c>
    3e5c:	dc400117 	ldw	r17,4(sp)
    3e60:	9829883a 	mov	r20,r19
    3e64:	002d883a 	mov	r22,zero
    3e68:	0021883a 	mov	r16,zero
    3e6c:	8d400017 	ldw	r21,0(r17)
    3e70:	900b883a 	mov	r5,r18
    3e74:	8c400104 	addi	r17,r17,4
    3e78:	a93fffcc 	andi	r4,r21,65535
    3e7c:	0000bc00 	call	bc0 <__mulsi3>
    3e80:	a808d43a 	srli	r4,r21,16
    3e84:	900b883a 	mov	r5,r18
    3e88:	15ad883a 	add	r22,r2,r22
    3e8c:	0000bc00 	call	bc0 <__mulsi3>
    3e90:	a1000017 	ldw	r4,0(r20)
    3e94:	b00cd43a 	srli	r6,r22,16
    3e98:	b0ffffcc 	andi	r3,r22,65535
    3e9c:	217fffcc 	andi	r5,r4,65535
    3ea0:	2c21883a 	add	r16,r5,r16
    3ea4:	80c7c83a 	sub	r3,r16,r3
    3ea8:	2008d43a 	srli	r4,r4,16
    3eac:	1185883a 	add	r2,r2,r6
    3eb0:	1821d43a 	srai	r16,r3,16
    3eb4:	117fffcc 	andi	r5,r2,65535
    3eb8:	2149c83a 	sub	r4,r4,r5
    3ebc:	2421883a 	add	r16,r4,r16
    3ec0:	8008943a 	slli	r4,r16,16
    3ec4:	18ffffcc 	andi	r3,r3,65535
    3ec8:	102cd43a 	srli	r22,r2,16
    3ecc:	20c8b03a 	or	r4,r4,r3
    3ed0:	a1000015 	stw	r4,0(r20)
    3ed4:	8021d43a 	srai	r16,r16,16
    3ed8:	a5000104 	addi	r20,r20,4
    3edc:	e47fe32e 	bgeu	fp,r17,3e6c <__alt_data_end+0xfffd312c>
    3ee0:	d8c00317 	ldw	r3,12(sp)
    3ee4:	18800017 	ldw	r2,0(r3)
    3ee8:	10000c1e 	bne	r2,zero,3f1c <quorem+0x13c>
    3eec:	18bfff04 	addi	r2,r3,-4
    3ef0:	9880082e 	bgeu	r19,r2,3f14 <quorem+0x134>
    3ef4:	18ffff17 	ldw	r3,-4(r3)
    3ef8:	18000326 	beq	r3,zero,3f08 <quorem+0x128>
    3efc:	00000506 	br	3f14 <quorem+0x134>
    3f00:	10c00017 	ldw	r3,0(r2)
    3f04:	1800031e 	bne	r3,zero,3f14 <quorem+0x134>
    3f08:	10bfff04 	addi	r2,r2,-4
    3f0c:	bdffffc4 	addi	r23,r23,-1
    3f10:	98bffb36 	bltu	r19,r2,3f00 <__alt_data_end+0xfffd31c0>
    3f14:	d8c00017 	ldw	r3,0(sp)
    3f18:	1dc00415 	stw	r23,16(r3)
    3f1c:	d9400217 	ldw	r5,8(sp)
    3f20:	d9000017 	ldw	r4,0(sp)
    3f24:	00075c80 	call	75c8 <__mcmp>
    3f28:	10002816 	blt	r2,zero,3fcc <quorem+0x1ec>
    3f2c:	dc400117 	ldw	r17,4(sp)
    3f30:	94800044 	addi	r18,r18,1
    3f34:	980d883a 	mov	r6,r19
    3f38:	0007883a 	mov	r3,zero
    3f3c:	31000017 	ldw	r4,0(r6)
    3f40:	89400017 	ldw	r5,0(r17)
    3f44:	31800104 	addi	r6,r6,4
    3f48:	20bfffcc 	andi	r2,r4,65535
    3f4c:	10c7883a 	add	r3,r2,r3
    3f50:	28bfffcc 	andi	r2,r5,65535
    3f54:	1885c83a 	sub	r2,r3,r2
    3f58:	280ad43a 	srli	r5,r5,16
    3f5c:	2008d43a 	srli	r4,r4,16
    3f60:	1007d43a 	srai	r3,r2,16
    3f64:	10bfffcc 	andi	r2,r2,65535
    3f68:	2149c83a 	sub	r4,r4,r5
    3f6c:	20c9883a 	add	r4,r4,r3
    3f70:	200a943a 	slli	r5,r4,16
    3f74:	8c400104 	addi	r17,r17,4
    3f78:	2007d43a 	srai	r3,r4,16
    3f7c:	2884b03a 	or	r2,r5,r2
    3f80:	30bfff15 	stw	r2,-4(r6)
    3f84:	e47fed2e 	bgeu	fp,r17,3f3c <__alt_data_end+0xfffd31fc>
    3f88:	bdc5883a 	add	r2,r23,r23
    3f8c:	1085883a 	add	r2,r2,r2
    3f90:	9887883a 	add	r3,r19,r2
    3f94:	18800017 	ldw	r2,0(r3)
    3f98:	10000c1e 	bne	r2,zero,3fcc <quorem+0x1ec>
    3f9c:	18bfff04 	addi	r2,r3,-4
    3fa0:	9880082e 	bgeu	r19,r2,3fc4 <quorem+0x1e4>
    3fa4:	18ffff17 	ldw	r3,-4(r3)
    3fa8:	18000326 	beq	r3,zero,3fb8 <quorem+0x1d8>
    3fac:	00000506 	br	3fc4 <quorem+0x1e4>
    3fb0:	10c00017 	ldw	r3,0(r2)
    3fb4:	1800031e 	bne	r3,zero,3fc4 <quorem+0x1e4>
    3fb8:	10bfff04 	addi	r2,r2,-4
    3fbc:	bdffffc4 	addi	r23,r23,-1
    3fc0:	98bffb36 	bltu	r19,r2,3fb0 <__alt_data_end+0xfffd3270>
    3fc4:	d8c00017 	ldw	r3,0(sp)
    3fc8:	1dc00415 	stw	r23,16(r3)
    3fcc:	9005883a 	mov	r2,r18
    3fd0:	dfc00d17 	ldw	ra,52(sp)
    3fd4:	df000c17 	ldw	fp,48(sp)
    3fd8:	ddc00b17 	ldw	r23,44(sp)
    3fdc:	dd800a17 	ldw	r22,40(sp)
    3fe0:	dd400917 	ldw	r21,36(sp)
    3fe4:	dd000817 	ldw	r20,32(sp)
    3fe8:	dcc00717 	ldw	r19,28(sp)
    3fec:	dc800617 	ldw	r18,24(sp)
    3ff0:	dc400517 	ldw	r17,20(sp)
    3ff4:	dc000417 	ldw	r16,16(sp)
    3ff8:	dec00e04 	addi	sp,sp,56
    3ffc:	f800283a 	ret
    4000:	0005883a 	mov	r2,zero
    4004:	003ff206 	br	3fd0 <__alt_data_end+0xfffd3290>

00004008 <_dtoa_r>:
    4008:	20801017 	ldw	r2,64(r4)
    400c:	deffde04 	addi	sp,sp,-136
    4010:	df002015 	stw	fp,128(sp)
    4014:	dcc01b15 	stw	r19,108(sp)
    4018:	dc801a15 	stw	r18,104(sp)
    401c:	dc401915 	stw	r17,100(sp)
    4020:	dc001815 	stw	r16,96(sp)
    4024:	dfc02115 	stw	ra,132(sp)
    4028:	ddc01f15 	stw	r23,124(sp)
    402c:	dd801e15 	stw	r22,120(sp)
    4030:	dd401d15 	stw	r21,116(sp)
    4034:	dd001c15 	stw	r20,112(sp)
    4038:	d9c00315 	stw	r7,12(sp)
    403c:	2039883a 	mov	fp,r4
    4040:	3023883a 	mov	r17,r6
    4044:	2825883a 	mov	r18,r5
    4048:	dc002417 	ldw	r16,144(sp)
    404c:	3027883a 	mov	r19,r6
    4050:	10000826 	beq	r2,zero,4074 <_dtoa_r+0x6c>
    4054:	21801117 	ldw	r6,68(r4)
    4058:	00c00044 	movi	r3,1
    405c:	100b883a 	mov	r5,r2
    4060:	1986983a 	sll	r3,r3,r6
    4064:	11800115 	stw	r6,4(r2)
    4068:	10c00215 	stw	r3,8(r2)
    406c:	0006cec0 	call	6cec <_Bfree>
    4070:	e0001015 	stw	zero,64(fp)
    4074:	88002e16 	blt	r17,zero,4130 <_dtoa_r+0x128>
    4078:	80000015 	stw	zero,0(r16)
    407c:	889ffc2c 	andhi	r2,r17,32752
    4080:	00dffc34 	movhi	r3,32752
    4084:	10c01c26 	beq	r2,r3,40f8 <_dtoa_r+0xf0>
    4088:	000d883a 	mov	r6,zero
    408c:	000f883a 	mov	r7,zero
    4090:	9009883a 	mov	r4,r18
    4094:	980b883a 	mov	r5,r19
    4098:	000c4d40 	call	c4d4 <__eqdf2>
    409c:	10002b1e 	bne	r2,zero,414c <_dtoa_r+0x144>
    40a0:	d9c02317 	ldw	r7,140(sp)
    40a4:	00800044 	movi	r2,1
    40a8:	38800015 	stw	r2,0(r7)
    40ac:	d8802517 	ldw	r2,148(sp)
    40b0:	10019e26 	beq	r2,zero,472c <_dtoa_r+0x724>
    40b4:	d8c02517 	ldw	r3,148(sp)
    40b8:	008000b4 	movhi	r2,2
    40bc:	10a32b44 	addi	r2,r2,-29523
    40c0:	18800015 	stw	r2,0(r3)
    40c4:	10bfffc4 	addi	r2,r2,-1
    40c8:	dfc02117 	ldw	ra,132(sp)
    40cc:	df002017 	ldw	fp,128(sp)
    40d0:	ddc01f17 	ldw	r23,124(sp)
    40d4:	dd801e17 	ldw	r22,120(sp)
    40d8:	dd401d17 	ldw	r21,116(sp)
    40dc:	dd001c17 	ldw	r20,112(sp)
    40e0:	dcc01b17 	ldw	r19,108(sp)
    40e4:	dc801a17 	ldw	r18,104(sp)
    40e8:	dc401917 	ldw	r17,100(sp)
    40ec:	dc001817 	ldw	r16,96(sp)
    40f0:	dec02204 	addi	sp,sp,136
    40f4:	f800283a 	ret
    40f8:	d8c02317 	ldw	r3,140(sp)
    40fc:	0089c3c4 	movi	r2,9999
    4100:	18800015 	stw	r2,0(r3)
    4104:	90017726 	beq	r18,zero,46e4 <_dtoa_r+0x6dc>
    4108:	008000b4 	movhi	r2,2
    410c:	10a33704 	addi	r2,r2,-29476
    4110:	d9002517 	ldw	r4,148(sp)
    4114:	203fec26 	beq	r4,zero,40c8 <__alt_data_end+0xfffd3388>
    4118:	10c000c7 	ldb	r3,3(r2)
    411c:	1801781e 	bne	r3,zero,4700 <_dtoa_r+0x6f8>
    4120:	10c000c4 	addi	r3,r2,3
    4124:	d9802517 	ldw	r6,148(sp)
    4128:	30c00015 	stw	r3,0(r6)
    412c:	003fe606 	br	40c8 <__alt_data_end+0xfffd3388>
    4130:	04e00034 	movhi	r19,32768
    4134:	9cffffc4 	addi	r19,r19,-1
    4138:	00800044 	movi	r2,1
    413c:	8ce6703a 	and	r19,r17,r19
    4140:	80800015 	stw	r2,0(r16)
    4144:	9823883a 	mov	r17,r19
    4148:	003fcc06 	br	407c <__alt_data_end+0xfffd333c>
    414c:	d8800204 	addi	r2,sp,8
    4150:	d8800015 	stw	r2,0(sp)
    4154:	d9c00104 	addi	r7,sp,4
    4158:	900b883a 	mov	r5,r18
    415c:	980d883a 	mov	r6,r19
    4160:	e009883a 	mov	r4,fp
    4164:	8820d53a 	srli	r16,r17,20
    4168:	00079940 	call	7994 <__d2b>
    416c:	d8800915 	stw	r2,36(sp)
    4170:	8001651e 	bne	r16,zero,4708 <_dtoa_r+0x700>
    4174:	dd800217 	ldw	r22,8(sp)
    4178:	dc000117 	ldw	r16,4(sp)
    417c:	00800804 	movi	r2,32
    4180:	b421883a 	add	r16,r22,r16
    4184:	80c10c84 	addi	r3,r16,1074
    4188:	10c2d10e 	bge	r2,r3,4cd0 <_dtoa_r+0xcc8>
    418c:	00801004 	movi	r2,64
    4190:	81010484 	addi	r4,r16,1042
    4194:	10c7c83a 	sub	r3,r2,r3
    4198:	9108d83a 	srl	r4,r18,r4
    419c:	88e2983a 	sll	r17,r17,r3
    41a0:	2448b03a 	or	r4,r4,r17
    41a4:	000d9f00 	call	d9f0 <__floatunsidf>
    41a8:	017f8434 	movhi	r5,65040
    41ac:	01800044 	movi	r6,1
    41b0:	1009883a 	mov	r4,r2
    41b4:	194b883a 	add	r5,r3,r5
    41b8:	843fffc4 	addi	r16,r16,-1
    41bc:	d9801115 	stw	r6,68(sp)
    41c0:	000d883a 	mov	r6,zero
    41c4:	01cffe34 	movhi	r7,16376
    41c8:	000cf980 	call	cf98 <__subdf3>
    41cc:	0198dbf4 	movhi	r6,25455
    41d0:	01cff4f4 	movhi	r7,16339
    41d4:	3190d844 	addi	r6,r6,17249
    41d8:	39e1e9c4 	addi	r7,r7,-30809
    41dc:	1009883a 	mov	r4,r2
    41e0:	180b883a 	mov	r5,r3
    41e4:	000c72c0 	call	c72c <__muldf3>
    41e8:	01a2d874 	movhi	r6,35681
    41ec:	01cff1f4 	movhi	r7,16327
    41f0:	31b22cc4 	addi	r6,r6,-14157
    41f4:	39e28a04 	addi	r7,r7,-30168
    41f8:	180b883a 	mov	r5,r3
    41fc:	1009883a 	mov	r4,r2
    4200:	000b2580 	call	b258 <__adddf3>
    4204:	8009883a 	mov	r4,r16
    4208:	1029883a 	mov	r20,r2
    420c:	1823883a 	mov	r17,r3
    4210:	000d9140 	call	d914 <__floatsidf>
    4214:	019427f4 	movhi	r6,20639
    4218:	01cff4f4 	movhi	r7,16339
    421c:	319e7ec4 	addi	r6,r6,31227
    4220:	39d104c4 	addi	r7,r7,17427
    4224:	1009883a 	mov	r4,r2
    4228:	180b883a 	mov	r5,r3
    422c:	000c72c0 	call	c72c <__muldf3>
    4230:	100d883a 	mov	r6,r2
    4234:	180f883a 	mov	r7,r3
    4238:	a009883a 	mov	r4,r20
    423c:	880b883a 	mov	r5,r17
    4240:	000b2580 	call	b258 <__adddf3>
    4244:	1009883a 	mov	r4,r2
    4248:	180b883a 	mov	r5,r3
    424c:	1029883a 	mov	r20,r2
    4250:	1823883a 	mov	r17,r3
    4254:	000d8940 	call	d894 <__fixdfsi>
    4258:	000d883a 	mov	r6,zero
    425c:	000f883a 	mov	r7,zero
    4260:	a009883a 	mov	r4,r20
    4264:	880b883a 	mov	r5,r17
    4268:	d8800515 	stw	r2,20(sp)
    426c:	000c6380 	call	c638 <__ledf2>
    4270:	10028716 	blt	r2,zero,4c90 <_dtoa_r+0xc88>
    4274:	d8c00517 	ldw	r3,20(sp)
    4278:	00800584 	movi	r2,22
    427c:	10c27536 	bltu	r2,r3,4c54 <_dtoa_r+0xc4c>
    4280:	180490fa 	slli	r2,r3,3
    4284:	00c000b4 	movhi	r3,2
    4288:	18e35304 	addi	r3,r3,-29364
    428c:	1885883a 	add	r2,r3,r2
    4290:	11000017 	ldw	r4,0(r2)
    4294:	11400117 	ldw	r5,4(r2)
    4298:	900d883a 	mov	r6,r18
    429c:	980f883a 	mov	r7,r19
    42a0:	000c55c0 	call	c55c <__gedf2>
    42a4:	00828d0e 	bge	zero,r2,4cdc <_dtoa_r+0xcd4>
    42a8:	d9000517 	ldw	r4,20(sp)
    42ac:	d8000e15 	stw	zero,56(sp)
    42b0:	213fffc4 	addi	r4,r4,-1
    42b4:	d9000515 	stw	r4,20(sp)
    42b8:	b42dc83a 	sub	r22,r22,r16
    42bc:	b5bfffc4 	addi	r22,r22,-1
    42c0:	b0026f16 	blt	r22,zero,4c80 <_dtoa_r+0xc78>
    42c4:	d8000815 	stw	zero,32(sp)
    42c8:	d9c00517 	ldw	r7,20(sp)
    42cc:	38026416 	blt	r7,zero,4c60 <_dtoa_r+0xc58>
    42d0:	b1ed883a 	add	r22,r22,r7
    42d4:	d9c00d15 	stw	r7,52(sp)
    42d8:	d8000a15 	stw	zero,40(sp)
    42dc:	d9800317 	ldw	r6,12(sp)
    42e0:	00800244 	movi	r2,9
    42e4:	11811436 	bltu	r2,r6,4738 <_dtoa_r+0x730>
    42e8:	00800144 	movi	r2,5
    42ec:	1184e10e 	bge	r2,r6,5674 <_dtoa_r+0x166c>
    42f0:	31bfff04 	addi	r6,r6,-4
    42f4:	d9800315 	stw	r6,12(sp)
    42f8:	0023883a 	mov	r17,zero
    42fc:	d9800317 	ldw	r6,12(sp)
    4300:	008000c4 	movi	r2,3
    4304:	30836726 	beq	r6,r2,50a4 <_dtoa_r+0x109c>
    4308:	1183410e 	bge	r2,r6,5010 <_dtoa_r+0x1008>
    430c:	d9c00317 	ldw	r7,12(sp)
    4310:	00800104 	movi	r2,4
    4314:	38827c26 	beq	r7,r2,4d08 <_dtoa_r+0xd00>
    4318:	00800144 	movi	r2,5
    431c:	3884c41e 	bne	r7,r2,5630 <_dtoa_r+0x1628>
    4320:	00800044 	movi	r2,1
    4324:	d8800b15 	stw	r2,44(sp)
    4328:	d8c00517 	ldw	r3,20(sp)
    432c:	d9002217 	ldw	r4,136(sp)
    4330:	1907883a 	add	r3,r3,r4
    4334:	19800044 	addi	r6,r3,1
    4338:	d8c00c15 	stw	r3,48(sp)
    433c:	d9800615 	stw	r6,24(sp)
    4340:	0183a40e 	bge	zero,r6,51d4 <_dtoa_r+0x11cc>
    4344:	d9800617 	ldw	r6,24(sp)
    4348:	3021883a 	mov	r16,r6
    434c:	e0001115 	stw	zero,68(fp)
    4350:	008005c4 	movi	r2,23
    4354:	1184c92e 	bgeu	r2,r6,567c <_dtoa_r+0x1674>
    4358:	00c00044 	movi	r3,1
    435c:	00800104 	movi	r2,4
    4360:	1085883a 	add	r2,r2,r2
    4364:	11000504 	addi	r4,r2,20
    4368:	180b883a 	mov	r5,r3
    436c:	18c00044 	addi	r3,r3,1
    4370:	313ffb2e 	bgeu	r6,r4,4360 <__alt_data_end+0xfffd3620>
    4374:	e1401115 	stw	r5,68(fp)
    4378:	e009883a 	mov	r4,fp
    437c:	0006c440 	call	6c44 <_Balloc>
    4380:	d8800715 	stw	r2,28(sp)
    4384:	e0801015 	stw	r2,64(fp)
    4388:	00800384 	movi	r2,14
    438c:	1400f736 	bltu	r2,r16,476c <_dtoa_r+0x764>
    4390:	8800f626 	beq	r17,zero,476c <_dtoa_r+0x764>
    4394:	d9c00517 	ldw	r7,20(sp)
    4398:	01c39a0e 	bge	zero,r7,5204 <_dtoa_r+0x11fc>
    439c:	388003cc 	andi	r2,r7,15
    43a0:	100490fa 	slli	r2,r2,3
    43a4:	382bd13a 	srai	r21,r7,4
    43a8:	00c000b4 	movhi	r3,2
    43ac:	18e35304 	addi	r3,r3,-29364
    43b0:	1885883a 	add	r2,r3,r2
    43b4:	a8c0040c 	andi	r3,r21,16
    43b8:	12400017 	ldw	r9,0(r2)
    43bc:	12000117 	ldw	r8,4(r2)
    43c0:	18037926 	beq	r3,zero,51a8 <_dtoa_r+0x11a0>
    43c4:	008000b4 	movhi	r2,2
    43c8:	10a34904 	addi	r2,r2,-29404
    43cc:	11800817 	ldw	r6,32(r2)
    43d0:	11c00917 	ldw	r7,36(r2)
    43d4:	9009883a 	mov	r4,r18
    43d8:	980b883a 	mov	r5,r19
    43dc:	da001715 	stw	r8,92(sp)
    43e0:	da401615 	stw	r9,88(sp)
    43e4:	000bb040 	call	bb04 <__divdf3>
    43e8:	da001717 	ldw	r8,92(sp)
    43ec:	da401617 	ldw	r9,88(sp)
    43f0:	ad4003cc 	andi	r21,r21,15
    43f4:	040000c4 	movi	r16,3
    43f8:	1023883a 	mov	r17,r2
    43fc:	1829883a 	mov	r20,r3
    4400:	a8001126 	beq	r21,zero,4448 <_dtoa_r+0x440>
    4404:	05c000b4 	movhi	r23,2
    4408:	bde34904 	addi	r23,r23,-29404
    440c:	4805883a 	mov	r2,r9
    4410:	4007883a 	mov	r3,r8
    4414:	a980004c 	andi	r6,r21,1
    4418:	1009883a 	mov	r4,r2
    441c:	a82bd07a 	srai	r21,r21,1
    4420:	180b883a 	mov	r5,r3
    4424:	30000426 	beq	r6,zero,4438 <_dtoa_r+0x430>
    4428:	b9800017 	ldw	r6,0(r23)
    442c:	b9c00117 	ldw	r7,4(r23)
    4430:	84000044 	addi	r16,r16,1
    4434:	000c72c0 	call	c72c <__muldf3>
    4438:	bdc00204 	addi	r23,r23,8
    443c:	a83ff51e 	bne	r21,zero,4414 <__alt_data_end+0xfffd36d4>
    4440:	1013883a 	mov	r9,r2
    4444:	1811883a 	mov	r8,r3
    4448:	480d883a 	mov	r6,r9
    444c:	400f883a 	mov	r7,r8
    4450:	8809883a 	mov	r4,r17
    4454:	a00b883a 	mov	r5,r20
    4458:	000bb040 	call	bb04 <__divdf3>
    445c:	d8800f15 	stw	r2,60(sp)
    4460:	d8c01015 	stw	r3,64(sp)
    4464:	d8c00e17 	ldw	r3,56(sp)
    4468:	18000626 	beq	r3,zero,4484 <_dtoa_r+0x47c>
    446c:	d9000f17 	ldw	r4,60(sp)
    4470:	d9401017 	ldw	r5,64(sp)
    4474:	000d883a 	mov	r6,zero
    4478:	01cffc34 	movhi	r7,16368
    447c:	000c6380 	call	c638 <__ledf2>
    4480:	10040b16 	blt	r2,zero,54b0 <_dtoa_r+0x14a8>
    4484:	8009883a 	mov	r4,r16
    4488:	000d9140 	call	d914 <__floatsidf>
    448c:	d9800f17 	ldw	r6,60(sp)
    4490:	d9c01017 	ldw	r7,64(sp)
    4494:	1009883a 	mov	r4,r2
    4498:	180b883a 	mov	r5,r3
    449c:	000c72c0 	call	c72c <__muldf3>
    44a0:	000d883a 	mov	r6,zero
    44a4:	01d00734 	movhi	r7,16412
    44a8:	1009883a 	mov	r4,r2
    44ac:	180b883a 	mov	r5,r3
    44b0:	000b2580 	call	b258 <__adddf3>
    44b4:	1021883a 	mov	r16,r2
    44b8:	d8800617 	ldw	r2,24(sp)
    44bc:	047f3034 	movhi	r17,64704
    44c0:	1c63883a 	add	r17,r3,r17
    44c4:	10031826 	beq	r2,zero,5128 <_dtoa_r+0x1120>
    44c8:	d8c00517 	ldw	r3,20(sp)
    44cc:	db000617 	ldw	r12,24(sp)
    44d0:	d8c01315 	stw	r3,76(sp)
    44d4:	d9000b17 	ldw	r4,44(sp)
    44d8:	20038f26 	beq	r4,zero,5318 <_dtoa_r+0x1310>
    44dc:	60bfffc4 	addi	r2,r12,-1
    44e0:	100490fa 	slli	r2,r2,3
    44e4:	00c000b4 	movhi	r3,2
    44e8:	18e35304 	addi	r3,r3,-29364
    44ec:	1885883a 	add	r2,r3,r2
    44f0:	11800017 	ldw	r6,0(r2)
    44f4:	11c00117 	ldw	r7,4(r2)
    44f8:	d8800717 	ldw	r2,28(sp)
    44fc:	0009883a 	mov	r4,zero
    4500:	014ff834 	movhi	r5,16352
    4504:	db001615 	stw	r12,88(sp)
    4508:	15c00044 	addi	r23,r2,1
    450c:	000bb040 	call	bb04 <__divdf3>
    4510:	800d883a 	mov	r6,r16
    4514:	880f883a 	mov	r7,r17
    4518:	1009883a 	mov	r4,r2
    451c:	180b883a 	mov	r5,r3
    4520:	000cf980 	call	cf98 <__subdf3>
    4524:	d9401017 	ldw	r5,64(sp)
    4528:	d9000f17 	ldw	r4,60(sp)
    452c:	102b883a 	mov	r21,r2
    4530:	d8c01215 	stw	r3,72(sp)
    4534:	000d8940 	call	d894 <__fixdfsi>
    4538:	1009883a 	mov	r4,r2
    453c:	1029883a 	mov	r20,r2
    4540:	000d9140 	call	d914 <__floatsidf>
    4544:	d9000f17 	ldw	r4,60(sp)
    4548:	d9401017 	ldw	r5,64(sp)
    454c:	100d883a 	mov	r6,r2
    4550:	180f883a 	mov	r7,r3
    4554:	000cf980 	call	cf98 <__subdf3>
    4558:	1823883a 	mov	r17,r3
    455c:	d8c00717 	ldw	r3,28(sp)
    4560:	d9401217 	ldw	r5,72(sp)
    4564:	a2000c04 	addi	r8,r20,48
    4568:	1021883a 	mov	r16,r2
    456c:	1a000005 	stb	r8,0(r3)
    4570:	800d883a 	mov	r6,r16
    4574:	880f883a 	mov	r7,r17
    4578:	a809883a 	mov	r4,r21
    457c:	4029883a 	mov	r20,r8
    4580:	000c55c0 	call	c55c <__gedf2>
    4584:	00841d16 	blt	zero,r2,55fc <_dtoa_r+0x15f4>
    4588:	800d883a 	mov	r6,r16
    458c:	880f883a 	mov	r7,r17
    4590:	0009883a 	mov	r4,zero
    4594:	014ffc34 	movhi	r5,16368
    4598:	000cf980 	call	cf98 <__subdf3>
    459c:	d9401217 	ldw	r5,72(sp)
    45a0:	100d883a 	mov	r6,r2
    45a4:	180f883a 	mov	r7,r3
    45a8:	a809883a 	mov	r4,r21
    45ac:	000c55c0 	call	c55c <__gedf2>
    45b0:	db001617 	ldw	r12,88(sp)
    45b4:	00840e16 	blt	zero,r2,55f0 <_dtoa_r+0x15e8>
    45b8:	00800044 	movi	r2,1
    45bc:	13006b0e 	bge	r2,r12,476c <_dtoa_r+0x764>
    45c0:	d9000717 	ldw	r4,28(sp)
    45c4:	dd800f15 	stw	r22,60(sp)
    45c8:	dcc01015 	stw	r19,64(sp)
    45cc:	2319883a 	add	r12,r4,r12
    45d0:	dcc01217 	ldw	r19,72(sp)
    45d4:	602d883a 	mov	r22,r12
    45d8:	dc801215 	stw	r18,72(sp)
    45dc:	b825883a 	mov	r18,r23
    45e0:	00000906 	br	4608 <_dtoa_r+0x600>
    45e4:	000cf980 	call	cf98 <__subdf3>
    45e8:	a80d883a 	mov	r6,r21
    45ec:	980f883a 	mov	r7,r19
    45f0:	1009883a 	mov	r4,r2
    45f4:	180b883a 	mov	r5,r3
    45f8:	000c6380 	call	c638 <__ledf2>
    45fc:	1003e816 	blt	r2,zero,55a0 <_dtoa_r+0x1598>
    4600:	b825883a 	mov	r18,r23
    4604:	bd83e926 	beq	r23,r22,55ac <_dtoa_r+0x15a4>
    4608:	a809883a 	mov	r4,r21
    460c:	980b883a 	mov	r5,r19
    4610:	000d883a 	mov	r6,zero
    4614:	01d00934 	movhi	r7,16420
    4618:	000c72c0 	call	c72c <__muldf3>
    461c:	000d883a 	mov	r6,zero
    4620:	01d00934 	movhi	r7,16420
    4624:	8009883a 	mov	r4,r16
    4628:	880b883a 	mov	r5,r17
    462c:	102b883a 	mov	r21,r2
    4630:	1827883a 	mov	r19,r3
    4634:	000c72c0 	call	c72c <__muldf3>
    4638:	180b883a 	mov	r5,r3
    463c:	1009883a 	mov	r4,r2
    4640:	1821883a 	mov	r16,r3
    4644:	1023883a 	mov	r17,r2
    4648:	000d8940 	call	d894 <__fixdfsi>
    464c:	1009883a 	mov	r4,r2
    4650:	1029883a 	mov	r20,r2
    4654:	000d9140 	call	d914 <__floatsidf>
    4658:	8809883a 	mov	r4,r17
    465c:	800b883a 	mov	r5,r16
    4660:	100d883a 	mov	r6,r2
    4664:	180f883a 	mov	r7,r3
    4668:	000cf980 	call	cf98 <__subdf3>
    466c:	a5000c04 	addi	r20,r20,48
    4670:	a80d883a 	mov	r6,r21
    4674:	980f883a 	mov	r7,r19
    4678:	1009883a 	mov	r4,r2
    467c:	180b883a 	mov	r5,r3
    4680:	95000005 	stb	r20,0(r18)
    4684:	1021883a 	mov	r16,r2
    4688:	1823883a 	mov	r17,r3
    468c:	000c6380 	call	c638 <__ledf2>
    4690:	bdc00044 	addi	r23,r23,1
    4694:	800d883a 	mov	r6,r16
    4698:	880f883a 	mov	r7,r17
    469c:	0009883a 	mov	r4,zero
    46a0:	014ffc34 	movhi	r5,16368
    46a4:	103fcf0e 	bge	r2,zero,45e4 <__alt_data_end+0xfffd38a4>
    46a8:	d8c01317 	ldw	r3,76(sp)
    46ac:	d8c00515 	stw	r3,20(sp)
    46b0:	d9400917 	ldw	r5,36(sp)
    46b4:	e009883a 	mov	r4,fp
    46b8:	0006cec0 	call	6cec <_Bfree>
    46bc:	d9000517 	ldw	r4,20(sp)
    46c0:	d9802317 	ldw	r6,140(sp)
    46c4:	d9c02517 	ldw	r7,148(sp)
    46c8:	b8000005 	stb	zero,0(r23)
    46cc:	20800044 	addi	r2,r4,1
    46d0:	30800015 	stw	r2,0(r6)
    46d4:	3802aa26 	beq	r7,zero,5180 <_dtoa_r+0x1178>
    46d8:	3dc00015 	stw	r23,0(r7)
    46dc:	d8800717 	ldw	r2,28(sp)
    46e0:	003e7906 	br	40c8 <__alt_data_end+0xfffd3388>
    46e4:	00800434 	movhi	r2,16
    46e8:	10bfffc4 	addi	r2,r2,-1
    46ec:	88a2703a 	and	r17,r17,r2
    46f0:	883e851e 	bne	r17,zero,4108 <__alt_data_end+0xfffd33c8>
    46f4:	008000b4 	movhi	r2,2
    46f8:	10a33404 	addi	r2,r2,-29488
    46fc:	003e8406 	br	4110 <__alt_data_end+0xfffd33d0>
    4700:	10c00204 	addi	r3,r2,8
    4704:	003e8706 	br	4124 <__alt_data_end+0xfffd33e4>
    4708:	01400434 	movhi	r5,16
    470c:	297fffc4 	addi	r5,r5,-1
    4710:	994a703a 	and	r5,r19,r5
    4714:	9009883a 	mov	r4,r18
    4718:	843f0044 	addi	r16,r16,-1023
    471c:	294ffc34 	orhi	r5,r5,16368
    4720:	dd800217 	ldw	r22,8(sp)
    4724:	d8001115 	stw	zero,68(sp)
    4728:	003ea506 	br	41c0 <__alt_data_end+0xfffd3480>
    472c:	008000b4 	movhi	r2,2
    4730:	10a32b04 	addi	r2,r2,-29524
    4734:	003e6406 	br	40c8 <__alt_data_end+0xfffd3388>
    4738:	e0001115 	stw	zero,68(fp)
    473c:	000b883a 	mov	r5,zero
    4740:	e009883a 	mov	r4,fp
    4744:	0006c440 	call	6c44 <_Balloc>
    4748:	01bfffc4 	movi	r6,-1
    474c:	01c00044 	movi	r7,1
    4750:	d8800715 	stw	r2,28(sp)
    4754:	d9800c15 	stw	r6,48(sp)
    4758:	e0801015 	stw	r2,64(fp)
    475c:	d8000315 	stw	zero,12(sp)
    4760:	d9c00b15 	stw	r7,44(sp)
    4764:	d9800615 	stw	r6,24(sp)
    4768:	d8002215 	stw	zero,136(sp)
    476c:	d8800117 	ldw	r2,4(sp)
    4770:	10008916 	blt	r2,zero,4998 <_dtoa_r+0x990>
    4774:	d9000517 	ldw	r4,20(sp)
    4778:	00c00384 	movi	r3,14
    477c:	19008616 	blt	r3,r4,4998 <_dtoa_r+0x990>
    4780:	200490fa 	slli	r2,r4,3
    4784:	00c000b4 	movhi	r3,2
    4788:	d9802217 	ldw	r6,136(sp)
    478c:	18e35304 	addi	r3,r3,-29364
    4790:	1885883a 	add	r2,r3,r2
    4794:	14000017 	ldw	r16,0(r2)
    4798:	14400117 	ldw	r17,4(r2)
    479c:	30016316 	blt	r6,zero,4d2c <_dtoa_r+0xd24>
    47a0:	800d883a 	mov	r6,r16
    47a4:	880f883a 	mov	r7,r17
    47a8:	9009883a 	mov	r4,r18
    47ac:	980b883a 	mov	r5,r19
    47b0:	000bb040 	call	bb04 <__divdf3>
    47b4:	180b883a 	mov	r5,r3
    47b8:	1009883a 	mov	r4,r2
    47bc:	000d8940 	call	d894 <__fixdfsi>
    47c0:	1009883a 	mov	r4,r2
    47c4:	102b883a 	mov	r21,r2
    47c8:	000d9140 	call	d914 <__floatsidf>
    47cc:	800d883a 	mov	r6,r16
    47d0:	880f883a 	mov	r7,r17
    47d4:	1009883a 	mov	r4,r2
    47d8:	180b883a 	mov	r5,r3
    47dc:	000c72c0 	call	c72c <__muldf3>
    47e0:	100d883a 	mov	r6,r2
    47e4:	180f883a 	mov	r7,r3
    47e8:	9009883a 	mov	r4,r18
    47ec:	980b883a 	mov	r5,r19
    47f0:	000cf980 	call	cf98 <__subdf3>
    47f4:	d9c00717 	ldw	r7,28(sp)
    47f8:	1009883a 	mov	r4,r2
    47fc:	a8800c04 	addi	r2,r21,48
    4800:	38800005 	stb	r2,0(r7)
    4804:	3dc00044 	addi	r23,r7,1
    4808:	d9c00617 	ldw	r7,24(sp)
    480c:	01800044 	movi	r6,1
    4810:	180b883a 	mov	r5,r3
    4814:	2005883a 	mov	r2,r4
    4818:	39803826 	beq	r7,r6,48fc <_dtoa_r+0x8f4>
    481c:	000d883a 	mov	r6,zero
    4820:	01d00934 	movhi	r7,16420
    4824:	000c72c0 	call	c72c <__muldf3>
    4828:	000d883a 	mov	r6,zero
    482c:	000f883a 	mov	r7,zero
    4830:	1009883a 	mov	r4,r2
    4834:	180b883a 	mov	r5,r3
    4838:	1025883a 	mov	r18,r2
    483c:	1827883a 	mov	r19,r3
    4840:	000c4d40 	call	c4d4 <__eqdf2>
    4844:	103f9a26 	beq	r2,zero,46b0 <__alt_data_end+0xfffd3970>
    4848:	d9c00617 	ldw	r7,24(sp)
    484c:	d8c00717 	ldw	r3,28(sp)
    4850:	b829883a 	mov	r20,r23
    4854:	38bfffc4 	addi	r2,r7,-1
    4858:	18ad883a 	add	r22,r3,r2
    485c:	00000a06 	br	4888 <_dtoa_r+0x880>
    4860:	000c72c0 	call	c72c <__muldf3>
    4864:	000d883a 	mov	r6,zero
    4868:	000f883a 	mov	r7,zero
    486c:	1009883a 	mov	r4,r2
    4870:	180b883a 	mov	r5,r3
    4874:	1025883a 	mov	r18,r2
    4878:	1827883a 	mov	r19,r3
    487c:	b829883a 	mov	r20,r23
    4880:	000c4d40 	call	c4d4 <__eqdf2>
    4884:	103f8a26 	beq	r2,zero,46b0 <__alt_data_end+0xfffd3970>
    4888:	800d883a 	mov	r6,r16
    488c:	880f883a 	mov	r7,r17
    4890:	9009883a 	mov	r4,r18
    4894:	980b883a 	mov	r5,r19
    4898:	000bb040 	call	bb04 <__divdf3>
    489c:	180b883a 	mov	r5,r3
    48a0:	1009883a 	mov	r4,r2
    48a4:	000d8940 	call	d894 <__fixdfsi>
    48a8:	1009883a 	mov	r4,r2
    48ac:	102b883a 	mov	r21,r2
    48b0:	000d9140 	call	d914 <__floatsidf>
    48b4:	800d883a 	mov	r6,r16
    48b8:	880f883a 	mov	r7,r17
    48bc:	1009883a 	mov	r4,r2
    48c0:	180b883a 	mov	r5,r3
    48c4:	000c72c0 	call	c72c <__muldf3>
    48c8:	100d883a 	mov	r6,r2
    48cc:	180f883a 	mov	r7,r3
    48d0:	9009883a 	mov	r4,r18
    48d4:	980b883a 	mov	r5,r19
    48d8:	000cf980 	call	cf98 <__subdf3>
    48dc:	aa000c04 	addi	r8,r21,48
    48e0:	a2000005 	stb	r8,0(r20)
    48e4:	000d883a 	mov	r6,zero
    48e8:	01d00934 	movhi	r7,16420
    48ec:	1009883a 	mov	r4,r2
    48f0:	180b883a 	mov	r5,r3
    48f4:	a5c00044 	addi	r23,r20,1
    48f8:	b53fd91e 	bne	r22,r20,4860 <__alt_data_end+0xfffd3b20>
    48fc:	100d883a 	mov	r6,r2
    4900:	180f883a 	mov	r7,r3
    4904:	1009883a 	mov	r4,r2
    4908:	180b883a 	mov	r5,r3
    490c:	000b2580 	call	b258 <__adddf3>
    4910:	100d883a 	mov	r6,r2
    4914:	180f883a 	mov	r7,r3
    4918:	8009883a 	mov	r4,r16
    491c:	880b883a 	mov	r5,r17
    4920:	1027883a 	mov	r19,r2
    4924:	1825883a 	mov	r18,r3
    4928:	000c6380 	call	c638 <__ledf2>
    492c:	10000816 	blt	r2,zero,4950 <_dtoa_r+0x948>
    4930:	980d883a 	mov	r6,r19
    4934:	900f883a 	mov	r7,r18
    4938:	8009883a 	mov	r4,r16
    493c:	880b883a 	mov	r5,r17
    4940:	000c4d40 	call	c4d4 <__eqdf2>
    4944:	103f5a1e 	bne	r2,zero,46b0 <__alt_data_end+0xfffd3970>
    4948:	ad40004c 	andi	r21,r21,1
    494c:	a83f5826 	beq	r21,zero,46b0 <__alt_data_end+0xfffd3970>
    4950:	bd3fffc3 	ldbu	r20,-1(r23)
    4954:	b8bfffc4 	addi	r2,r23,-1
    4958:	1007883a 	mov	r3,r2
    495c:	01400e44 	movi	r5,57
    4960:	d9800717 	ldw	r6,28(sp)
    4964:	00000506 	br	497c <_dtoa_r+0x974>
    4968:	18ffffc4 	addi	r3,r3,-1
    496c:	11824726 	beq	r2,r6,528c <_dtoa_r+0x1284>
    4970:	1d000003 	ldbu	r20,0(r3)
    4974:	102f883a 	mov	r23,r2
    4978:	10bfffc4 	addi	r2,r2,-1
    497c:	a1003fcc 	andi	r4,r20,255
    4980:	2100201c 	xori	r4,r4,128
    4984:	213fe004 	addi	r4,r4,-128
    4988:	217ff726 	beq	r4,r5,4968 <__alt_data_end+0xfffd3c28>
    498c:	a2000044 	addi	r8,r20,1
    4990:	12000005 	stb	r8,0(r2)
    4994:	003f4606 	br	46b0 <__alt_data_end+0xfffd3970>
    4998:	d9000b17 	ldw	r4,44(sp)
    499c:	2000c826 	beq	r4,zero,4cc0 <_dtoa_r+0xcb8>
    49a0:	d9800317 	ldw	r6,12(sp)
    49a4:	00c00044 	movi	r3,1
    49a8:	1980f90e 	bge	r3,r6,4d90 <_dtoa_r+0xd88>
    49ac:	d8800617 	ldw	r2,24(sp)
    49b0:	d8c00a17 	ldw	r3,40(sp)
    49b4:	157fffc4 	addi	r21,r2,-1
    49b8:	1d41f316 	blt	r3,r21,5188 <_dtoa_r+0x1180>
    49bc:	1d6bc83a 	sub	r21,r3,r21
    49c0:	d9c00617 	ldw	r7,24(sp)
    49c4:	3802aa16 	blt	r7,zero,5470 <_dtoa_r+0x1468>
    49c8:	dd000817 	ldw	r20,32(sp)
    49cc:	d8800617 	ldw	r2,24(sp)
    49d0:	d8c00817 	ldw	r3,32(sp)
    49d4:	01400044 	movi	r5,1
    49d8:	e009883a 	mov	r4,fp
    49dc:	1887883a 	add	r3,r3,r2
    49e0:	d8c00815 	stw	r3,32(sp)
    49e4:	b0ad883a 	add	r22,r22,r2
    49e8:	00070780 	call	7078 <__i2b>
    49ec:	1023883a 	mov	r17,r2
    49f0:	a0000826 	beq	r20,zero,4a14 <_dtoa_r+0xa0c>
    49f4:	0580070e 	bge	zero,r22,4a14 <_dtoa_r+0xa0c>
    49f8:	a005883a 	mov	r2,r20
    49fc:	b500b916 	blt	r22,r20,4ce4 <_dtoa_r+0xcdc>
    4a00:	d9000817 	ldw	r4,32(sp)
    4a04:	a0a9c83a 	sub	r20,r20,r2
    4a08:	b0adc83a 	sub	r22,r22,r2
    4a0c:	2089c83a 	sub	r4,r4,r2
    4a10:	d9000815 	stw	r4,32(sp)
    4a14:	d9800a17 	ldw	r6,40(sp)
    4a18:	0181810e 	bge	zero,r6,5020 <_dtoa_r+0x1018>
    4a1c:	d9c00b17 	ldw	r7,44(sp)
    4a20:	3800b326 	beq	r7,zero,4cf0 <_dtoa_r+0xce8>
    4a24:	a800b226 	beq	r21,zero,4cf0 <_dtoa_r+0xce8>
    4a28:	880b883a 	mov	r5,r17
    4a2c:	a80d883a 	mov	r6,r21
    4a30:	e009883a 	mov	r4,fp
    4a34:	00073400 	call	7340 <__pow5mult>
    4a38:	d9800917 	ldw	r6,36(sp)
    4a3c:	100b883a 	mov	r5,r2
    4a40:	e009883a 	mov	r4,fp
    4a44:	1023883a 	mov	r17,r2
    4a48:	00070b40 	call	70b4 <__multiply>
    4a4c:	1021883a 	mov	r16,r2
    4a50:	d8800a17 	ldw	r2,40(sp)
    4a54:	d9400917 	ldw	r5,36(sp)
    4a58:	e009883a 	mov	r4,fp
    4a5c:	1545c83a 	sub	r2,r2,r21
    4a60:	d8800a15 	stw	r2,40(sp)
    4a64:	0006cec0 	call	6cec <_Bfree>
    4a68:	d8c00a17 	ldw	r3,40(sp)
    4a6c:	18009f1e 	bne	r3,zero,4cec <_dtoa_r+0xce4>
    4a70:	05c00044 	movi	r23,1
    4a74:	e009883a 	mov	r4,fp
    4a78:	b80b883a 	mov	r5,r23
    4a7c:	00070780 	call	7078 <__i2b>
    4a80:	d9000d17 	ldw	r4,52(sp)
    4a84:	102b883a 	mov	r21,r2
    4a88:	2000ce26 	beq	r4,zero,4dc4 <_dtoa_r+0xdbc>
    4a8c:	200d883a 	mov	r6,r4
    4a90:	100b883a 	mov	r5,r2
    4a94:	e009883a 	mov	r4,fp
    4a98:	00073400 	call	7340 <__pow5mult>
    4a9c:	d9800317 	ldw	r6,12(sp)
    4aa0:	102b883a 	mov	r21,r2
    4aa4:	b981810e 	bge	r23,r6,50ac <_dtoa_r+0x10a4>
    4aa8:	0027883a 	mov	r19,zero
    4aac:	a8800417 	ldw	r2,16(r21)
    4ab0:	05c00804 	movi	r23,32
    4ab4:	10800104 	addi	r2,r2,4
    4ab8:	1085883a 	add	r2,r2,r2
    4abc:	1085883a 	add	r2,r2,r2
    4ac0:	a885883a 	add	r2,r21,r2
    4ac4:	11000017 	ldw	r4,0(r2)
    4ac8:	0006f600 	call	6f60 <__hi0bits>
    4acc:	b885c83a 	sub	r2,r23,r2
    4ad0:	1585883a 	add	r2,r2,r22
    4ad4:	108007cc 	andi	r2,r2,31
    4ad8:	1000b326 	beq	r2,zero,4da8 <_dtoa_r+0xda0>
    4adc:	00c00804 	movi	r3,32
    4ae0:	1887c83a 	sub	r3,r3,r2
    4ae4:	01000104 	movi	r4,4
    4ae8:	20c2cd0e 	bge	r4,r3,5620 <_dtoa_r+0x1618>
    4aec:	00c00704 	movi	r3,28
    4af0:	1885c83a 	sub	r2,r3,r2
    4af4:	d8c00817 	ldw	r3,32(sp)
    4af8:	a0a9883a 	add	r20,r20,r2
    4afc:	b0ad883a 	add	r22,r22,r2
    4b00:	1887883a 	add	r3,r3,r2
    4b04:	d8c00815 	stw	r3,32(sp)
    4b08:	d9800817 	ldw	r6,32(sp)
    4b0c:	0180040e 	bge	zero,r6,4b20 <_dtoa_r+0xb18>
    4b10:	800b883a 	mov	r5,r16
    4b14:	e009883a 	mov	r4,fp
    4b18:	00074800 	call	7480 <__lshift>
    4b1c:	1021883a 	mov	r16,r2
    4b20:	0580050e 	bge	zero,r22,4b38 <_dtoa_r+0xb30>
    4b24:	a80b883a 	mov	r5,r21
    4b28:	b00d883a 	mov	r6,r22
    4b2c:	e009883a 	mov	r4,fp
    4b30:	00074800 	call	7480 <__lshift>
    4b34:	102b883a 	mov	r21,r2
    4b38:	d9c00e17 	ldw	r7,56(sp)
    4b3c:	3801211e 	bne	r7,zero,4fc4 <_dtoa_r+0xfbc>
    4b40:	d9800617 	ldw	r6,24(sp)
    4b44:	0181380e 	bge	zero,r6,5028 <_dtoa_r+0x1020>
    4b48:	d8c00b17 	ldw	r3,44(sp)
    4b4c:	1800ab1e 	bne	r3,zero,4dfc <_dtoa_r+0xdf4>
    4b50:	dc800717 	ldw	r18,28(sp)
    4b54:	dcc00617 	ldw	r19,24(sp)
    4b58:	9029883a 	mov	r20,r18
    4b5c:	00000206 	br	4b68 <_dtoa_r+0xb60>
    4b60:	0006d140 	call	6d14 <__multadd>
    4b64:	1021883a 	mov	r16,r2
    4b68:	a80b883a 	mov	r5,r21
    4b6c:	8009883a 	mov	r4,r16
    4b70:	0003de00 	call	3de0 <quorem>
    4b74:	10800c04 	addi	r2,r2,48
    4b78:	90800005 	stb	r2,0(r18)
    4b7c:	94800044 	addi	r18,r18,1
    4b80:	9507c83a 	sub	r3,r18,r20
    4b84:	000f883a 	mov	r7,zero
    4b88:	01800284 	movi	r6,10
    4b8c:	800b883a 	mov	r5,r16
    4b90:	e009883a 	mov	r4,fp
    4b94:	1cfff216 	blt	r3,r19,4b60 <__alt_data_end+0xfffd3e20>
    4b98:	1011883a 	mov	r8,r2
    4b9c:	d8800617 	ldw	r2,24(sp)
    4ba0:	0082370e 	bge	zero,r2,5480 <_dtoa_r+0x1478>
    4ba4:	d9000717 	ldw	r4,28(sp)
    4ba8:	0025883a 	mov	r18,zero
    4bac:	20af883a 	add	r23,r4,r2
    4bb0:	01800044 	movi	r6,1
    4bb4:	800b883a 	mov	r5,r16
    4bb8:	e009883a 	mov	r4,fp
    4bbc:	da001715 	stw	r8,92(sp)
    4bc0:	00074800 	call	7480 <__lshift>
    4bc4:	a80b883a 	mov	r5,r21
    4bc8:	1009883a 	mov	r4,r2
    4bcc:	d8800915 	stw	r2,36(sp)
    4bd0:	00075c80 	call	75c8 <__mcmp>
    4bd4:	da001717 	ldw	r8,92(sp)
    4bd8:	0081800e 	bge	zero,r2,51dc <_dtoa_r+0x11d4>
    4bdc:	b93fffc3 	ldbu	r4,-1(r23)
    4be0:	b8bfffc4 	addi	r2,r23,-1
    4be4:	1007883a 	mov	r3,r2
    4be8:	01800e44 	movi	r6,57
    4bec:	d9c00717 	ldw	r7,28(sp)
    4bf0:	00000506 	br	4c08 <_dtoa_r+0xc00>
    4bf4:	18ffffc4 	addi	r3,r3,-1
    4bf8:	11c12326 	beq	r2,r7,5088 <_dtoa_r+0x1080>
    4bfc:	19000003 	ldbu	r4,0(r3)
    4c00:	102f883a 	mov	r23,r2
    4c04:	10bfffc4 	addi	r2,r2,-1
    4c08:	21403fcc 	andi	r5,r4,255
    4c0c:	2940201c 	xori	r5,r5,128
    4c10:	297fe004 	addi	r5,r5,-128
    4c14:	29bff726 	beq	r5,r6,4bf4 <__alt_data_end+0xfffd3eb4>
    4c18:	21000044 	addi	r4,r4,1
    4c1c:	11000005 	stb	r4,0(r2)
    4c20:	a80b883a 	mov	r5,r21
    4c24:	e009883a 	mov	r4,fp
    4c28:	0006cec0 	call	6cec <_Bfree>
    4c2c:	883ea026 	beq	r17,zero,46b0 <__alt_data_end+0xfffd3970>
    4c30:	90000426 	beq	r18,zero,4c44 <_dtoa_r+0xc3c>
    4c34:	94400326 	beq	r18,r17,4c44 <_dtoa_r+0xc3c>
    4c38:	900b883a 	mov	r5,r18
    4c3c:	e009883a 	mov	r4,fp
    4c40:	0006cec0 	call	6cec <_Bfree>
    4c44:	880b883a 	mov	r5,r17
    4c48:	e009883a 	mov	r4,fp
    4c4c:	0006cec0 	call	6cec <_Bfree>
    4c50:	003e9706 	br	46b0 <__alt_data_end+0xfffd3970>
    4c54:	01800044 	movi	r6,1
    4c58:	d9800e15 	stw	r6,56(sp)
    4c5c:	003d9606 	br	42b8 <__alt_data_end+0xfffd3578>
    4c60:	d8800817 	ldw	r2,32(sp)
    4c64:	d8c00517 	ldw	r3,20(sp)
    4c68:	d8000d15 	stw	zero,52(sp)
    4c6c:	10c5c83a 	sub	r2,r2,r3
    4c70:	00c9c83a 	sub	r4,zero,r3
    4c74:	d8800815 	stw	r2,32(sp)
    4c78:	d9000a15 	stw	r4,40(sp)
    4c7c:	003d9706 	br	42dc <__alt_data_end+0xfffd359c>
    4c80:	05adc83a 	sub	r22,zero,r22
    4c84:	dd800815 	stw	r22,32(sp)
    4c88:	002d883a 	mov	r22,zero
    4c8c:	003d8e06 	br	42c8 <__alt_data_end+0xfffd3588>
    4c90:	d9000517 	ldw	r4,20(sp)
    4c94:	000d9140 	call	d914 <__floatsidf>
    4c98:	100d883a 	mov	r6,r2
    4c9c:	180f883a 	mov	r7,r3
    4ca0:	a009883a 	mov	r4,r20
    4ca4:	880b883a 	mov	r5,r17
    4ca8:	000c4d40 	call	c4d4 <__eqdf2>
    4cac:	103d7126 	beq	r2,zero,4274 <__alt_data_end+0xfffd3534>
    4cb0:	d9c00517 	ldw	r7,20(sp)
    4cb4:	39ffffc4 	addi	r7,r7,-1
    4cb8:	d9c00515 	stw	r7,20(sp)
    4cbc:	003d6d06 	br	4274 <__alt_data_end+0xfffd3534>
    4cc0:	dd400a17 	ldw	r21,40(sp)
    4cc4:	dd000817 	ldw	r20,32(sp)
    4cc8:	0023883a 	mov	r17,zero
    4ccc:	003f4806 	br	49f0 <__alt_data_end+0xfffd3cb0>
    4cd0:	10e3c83a 	sub	r17,r2,r3
    4cd4:	9448983a 	sll	r4,r18,r17
    4cd8:	003d3206 	br	41a4 <__alt_data_end+0xfffd3464>
    4cdc:	d8000e15 	stw	zero,56(sp)
    4ce0:	003d7506 	br	42b8 <__alt_data_end+0xfffd3578>
    4ce4:	b005883a 	mov	r2,r22
    4ce8:	003f4506 	br	4a00 <__alt_data_end+0xfffd3cc0>
    4cec:	dc000915 	stw	r16,36(sp)
    4cf0:	d9800a17 	ldw	r6,40(sp)
    4cf4:	d9400917 	ldw	r5,36(sp)
    4cf8:	e009883a 	mov	r4,fp
    4cfc:	00073400 	call	7340 <__pow5mult>
    4d00:	1021883a 	mov	r16,r2
    4d04:	003f5a06 	br	4a70 <__alt_data_end+0xfffd3d30>
    4d08:	01c00044 	movi	r7,1
    4d0c:	d9c00b15 	stw	r7,44(sp)
    4d10:	d8802217 	ldw	r2,136(sp)
    4d14:	0081280e 	bge	zero,r2,51b8 <_dtoa_r+0x11b0>
    4d18:	100d883a 	mov	r6,r2
    4d1c:	1021883a 	mov	r16,r2
    4d20:	d8800c15 	stw	r2,48(sp)
    4d24:	d8800615 	stw	r2,24(sp)
    4d28:	003d8806 	br	434c <__alt_data_end+0xfffd360c>
    4d2c:	d8800617 	ldw	r2,24(sp)
    4d30:	00be9b16 	blt	zero,r2,47a0 <__alt_data_end+0xfffd3a60>
    4d34:	10010f1e 	bne	r2,zero,5174 <_dtoa_r+0x116c>
    4d38:	880b883a 	mov	r5,r17
    4d3c:	000d883a 	mov	r6,zero
    4d40:	01d00534 	movhi	r7,16404
    4d44:	8009883a 	mov	r4,r16
    4d48:	000c72c0 	call	c72c <__muldf3>
    4d4c:	900d883a 	mov	r6,r18
    4d50:	980f883a 	mov	r7,r19
    4d54:	1009883a 	mov	r4,r2
    4d58:	180b883a 	mov	r5,r3
    4d5c:	000c55c0 	call	c55c <__gedf2>
    4d60:	002b883a 	mov	r21,zero
    4d64:	0023883a 	mov	r17,zero
    4d68:	1000bf16 	blt	r2,zero,5068 <_dtoa_r+0x1060>
    4d6c:	d9802217 	ldw	r6,136(sp)
    4d70:	ddc00717 	ldw	r23,28(sp)
    4d74:	018c303a 	nor	r6,zero,r6
    4d78:	d9800515 	stw	r6,20(sp)
    4d7c:	a80b883a 	mov	r5,r21
    4d80:	e009883a 	mov	r4,fp
    4d84:	0006cec0 	call	6cec <_Bfree>
    4d88:	883e4926 	beq	r17,zero,46b0 <__alt_data_end+0xfffd3970>
    4d8c:	003fad06 	br	4c44 <__alt_data_end+0xfffd3f04>
    4d90:	d9c01117 	ldw	r7,68(sp)
    4d94:	3801bc26 	beq	r7,zero,5488 <_dtoa_r+0x1480>
    4d98:	10810cc4 	addi	r2,r2,1075
    4d9c:	dd400a17 	ldw	r21,40(sp)
    4da0:	dd000817 	ldw	r20,32(sp)
    4da4:	003f0a06 	br	49d0 <__alt_data_end+0xfffd3c90>
    4da8:	00800704 	movi	r2,28
    4dac:	d9000817 	ldw	r4,32(sp)
    4db0:	a0a9883a 	add	r20,r20,r2
    4db4:	b0ad883a 	add	r22,r22,r2
    4db8:	2089883a 	add	r4,r4,r2
    4dbc:	d9000815 	stw	r4,32(sp)
    4dc0:	003f5106 	br	4b08 <__alt_data_end+0xfffd3dc8>
    4dc4:	d8c00317 	ldw	r3,12(sp)
    4dc8:	b8c1fc0e 	bge	r23,r3,55bc <_dtoa_r+0x15b4>
    4dcc:	0027883a 	mov	r19,zero
    4dd0:	b805883a 	mov	r2,r23
    4dd4:	003f3e06 	br	4ad0 <__alt_data_end+0xfffd3d90>
    4dd8:	880b883a 	mov	r5,r17
    4ddc:	e009883a 	mov	r4,fp
    4de0:	000f883a 	mov	r7,zero
    4de4:	01800284 	movi	r6,10
    4de8:	0006d140 	call	6d14 <__multadd>
    4dec:	d9000c17 	ldw	r4,48(sp)
    4df0:	1023883a 	mov	r17,r2
    4df4:	0102040e 	bge	zero,r4,5608 <_dtoa_r+0x1600>
    4df8:	d9000615 	stw	r4,24(sp)
    4dfc:	0500050e 	bge	zero,r20,4e14 <_dtoa_r+0xe0c>
    4e00:	880b883a 	mov	r5,r17
    4e04:	a00d883a 	mov	r6,r20
    4e08:	e009883a 	mov	r4,fp
    4e0c:	00074800 	call	7480 <__lshift>
    4e10:	1023883a 	mov	r17,r2
    4e14:	9801241e 	bne	r19,zero,52a8 <_dtoa_r+0x12a0>
    4e18:	8829883a 	mov	r20,r17
    4e1c:	d9000617 	ldw	r4,24(sp)
    4e20:	dcc00717 	ldw	r19,28(sp)
    4e24:	9480004c 	andi	r18,r18,1
    4e28:	20bfffc4 	addi	r2,r4,-1
    4e2c:	9885883a 	add	r2,r19,r2
    4e30:	d8800415 	stw	r2,16(sp)
    4e34:	dc800615 	stw	r18,24(sp)
    4e38:	a80b883a 	mov	r5,r21
    4e3c:	8009883a 	mov	r4,r16
    4e40:	0003de00 	call	3de0 <quorem>
    4e44:	880b883a 	mov	r5,r17
    4e48:	8009883a 	mov	r4,r16
    4e4c:	102f883a 	mov	r23,r2
    4e50:	00075c80 	call	75c8 <__mcmp>
    4e54:	a80b883a 	mov	r5,r21
    4e58:	a00d883a 	mov	r6,r20
    4e5c:	e009883a 	mov	r4,fp
    4e60:	102d883a 	mov	r22,r2
    4e64:	00076280 	call	7628 <__mdiff>
    4e68:	1007883a 	mov	r3,r2
    4e6c:	10800317 	ldw	r2,12(r2)
    4e70:	bc800c04 	addi	r18,r23,48
    4e74:	180b883a 	mov	r5,r3
    4e78:	10004e1e 	bne	r2,zero,4fb4 <_dtoa_r+0xfac>
    4e7c:	8009883a 	mov	r4,r16
    4e80:	d8c01615 	stw	r3,88(sp)
    4e84:	00075c80 	call	75c8 <__mcmp>
    4e88:	d8c01617 	ldw	r3,88(sp)
    4e8c:	e009883a 	mov	r4,fp
    4e90:	d8801615 	stw	r2,88(sp)
    4e94:	180b883a 	mov	r5,r3
    4e98:	0006cec0 	call	6cec <_Bfree>
    4e9c:	d8801617 	ldw	r2,88(sp)
    4ea0:	1000041e 	bne	r2,zero,4eb4 <_dtoa_r+0xeac>
    4ea4:	d9800317 	ldw	r6,12(sp)
    4ea8:	3000021e 	bne	r6,zero,4eb4 <_dtoa_r+0xeac>
    4eac:	d8c00617 	ldw	r3,24(sp)
    4eb0:	18003726 	beq	r3,zero,4f90 <_dtoa_r+0xf88>
    4eb4:	b0002016 	blt	r22,zero,4f38 <_dtoa_r+0xf30>
    4eb8:	b000041e 	bne	r22,zero,4ecc <_dtoa_r+0xec4>
    4ebc:	d9000317 	ldw	r4,12(sp)
    4ec0:	2000021e 	bne	r4,zero,4ecc <_dtoa_r+0xec4>
    4ec4:	d8c00617 	ldw	r3,24(sp)
    4ec8:	18001b26 	beq	r3,zero,4f38 <_dtoa_r+0xf30>
    4ecc:	00810716 	blt	zero,r2,52ec <_dtoa_r+0x12e4>
    4ed0:	d8c00417 	ldw	r3,16(sp)
    4ed4:	9d800044 	addi	r22,r19,1
    4ed8:	9c800005 	stb	r18,0(r19)
    4edc:	b02f883a 	mov	r23,r22
    4ee0:	98c10626 	beq	r19,r3,52fc <_dtoa_r+0x12f4>
    4ee4:	800b883a 	mov	r5,r16
    4ee8:	000f883a 	mov	r7,zero
    4eec:	01800284 	movi	r6,10
    4ef0:	e009883a 	mov	r4,fp
    4ef4:	0006d140 	call	6d14 <__multadd>
    4ef8:	1021883a 	mov	r16,r2
    4efc:	000f883a 	mov	r7,zero
    4f00:	01800284 	movi	r6,10
    4f04:	880b883a 	mov	r5,r17
    4f08:	e009883a 	mov	r4,fp
    4f0c:	8d002526 	beq	r17,r20,4fa4 <_dtoa_r+0xf9c>
    4f10:	0006d140 	call	6d14 <__multadd>
    4f14:	a00b883a 	mov	r5,r20
    4f18:	000f883a 	mov	r7,zero
    4f1c:	01800284 	movi	r6,10
    4f20:	e009883a 	mov	r4,fp
    4f24:	1023883a 	mov	r17,r2
    4f28:	0006d140 	call	6d14 <__multadd>
    4f2c:	1029883a 	mov	r20,r2
    4f30:	b027883a 	mov	r19,r22
    4f34:	003fc006 	br	4e38 <__alt_data_end+0xfffd40f8>
    4f38:	9011883a 	mov	r8,r18
    4f3c:	00800e0e 	bge	zero,r2,4f78 <_dtoa_r+0xf70>
    4f40:	800b883a 	mov	r5,r16
    4f44:	01800044 	movi	r6,1
    4f48:	e009883a 	mov	r4,fp
    4f4c:	da001715 	stw	r8,92(sp)
    4f50:	00074800 	call	7480 <__lshift>
    4f54:	a80b883a 	mov	r5,r21
    4f58:	1009883a 	mov	r4,r2
    4f5c:	1021883a 	mov	r16,r2
    4f60:	00075c80 	call	75c8 <__mcmp>
    4f64:	da001717 	ldw	r8,92(sp)
    4f68:	0081960e 	bge	zero,r2,55c4 <_dtoa_r+0x15bc>
    4f6c:	00800e44 	movi	r2,57
    4f70:	40817026 	beq	r8,r2,5534 <_dtoa_r+0x152c>
    4f74:	ba000c44 	addi	r8,r23,49
    4f78:	8825883a 	mov	r18,r17
    4f7c:	9dc00044 	addi	r23,r19,1
    4f80:	9a000005 	stb	r8,0(r19)
    4f84:	a023883a 	mov	r17,r20
    4f88:	dc000915 	stw	r16,36(sp)
    4f8c:	003f2406 	br	4c20 <__alt_data_end+0xfffd3ee0>
    4f90:	00800e44 	movi	r2,57
    4f94:	9011883a 	mov	r8,r18
    4f98:	90816626 	beq	r18,r2,5534 <_dtoa_r+0x152c>
    4f9c:	05bff516 	blt	zero,r22,4f74 <__alt_data_end+0xfffd4234>
    4fa0:	003ff506 	br	4f78 <__alt_data_end+0xfffd4238>
    4fa4:	0006d140 	call	6d14 <__multadd>
    4fa8:	1023883a 	mov	r17,r2
    4fac:	1029883a 	mov	r20,r2
    4fb0:	003fdf06 	br	4f30 <__alt_data_end+0xfffd41f0>
    4fb4:	e009883a 	mov	r4,fp
    4fb8:	0006cec0 	call	6cec <_Bfree>
    4fbc:	00800044 	movi	r2,1
    4fc0:	003fbc06 	br	4eb4 <__alt_data_end+0xfffd4174>
    4fc4:	a80b883a 	mov	r5,r21
    4fc8:	8009883a 	mov	r4,r16
    4fcc:	00075c80 	call	75c8 <__mcmp>
    4fd0:	103edb0e 	bge	r2,zero,4b40 <__alt_data_end+0xfffd3e00>
    4fd4:	800b883a 	mov	r5,r16
    4fd8:	000f883a 	mov	r7,zero
    4fdc:	01800284 	movi	r6,10
    4fe0:	e009883a 	mov	r4,fp
    4fe4:	0006d140 	call	6d14 <__multadd>
    4fe8:	1021883a 	mov	r16,r2
    4fec:	d8800517 	ldw	r2,20(sp)
    4ff0:	d8c00b17 	ldw	r3,44(sp)
    4ff4:	10bfffc4 	addi	r2,r2,-1
    4ff8:	d8800515 	stw	r2,20(sp)
    4ffc:	183f761e 	bne	r3,zero,4dd8 <__alt_data_end+0xfffd4098>
    5000:	d9000c17 	ldw	r4,48(sp)
    5004:	0101730e 	bge	zero,r4,55d4 <_dtoa_r+0x15cc>
    5008:	d9000615 	stw	r4,24(sp)
    500c:	003ed006 	br	4b50 <__alt_data_end+0xfffd3e10>
    5010:	00800084 	movi	r2,2
    5014:	3081861e 	bne	r6,r2,5630 <_dtoa_r+0x1628>
    5018:	d8000b15 	stw	zero,44(sp)
    501c:	003f3c06 	br	4d10 <__alt_data_end+0xfffd3fd0>
    5020:	dc000917 	ldw	r16,36(sp)
    5024:	003e9206 	br	4a70 <__alt_data_end+0xfffd3d30>
    5028:	d9c00317 	ldw	r7,12(sp)
    502c:	00800084 	movi	r2,2
    5030:	11fec50e 	bge	r2,r7,4b48 <__alt_data_end+0xfffd3e08>
    5034:	d9000617 	ldw	r4,24(sp)
    5038:	20013c1e 	bne	r4,zero,552c <_dtoa_r+0x1524>
    503c:	a80b883a 	mov	r5,r21
    5040:	000f883a 	mov	r7,zero
    5044:	01800144 	movi	r6,5
    5048:	e009883a 	mov	r4,fp
    504c:	0006d140 	call	6d14 <__multadd>
    5050:	100b883a 	mov	r5,r2
    5054:	8009883a 	mov	r4,r16
    5058:	102b883a 	mov	r21,r2
    505c:	00075c80 	call	75c8 <__mcmp>
    5060:	dc000915 	stw	r16,36(sp)
    5064:	00bf410e 	bge	zero,r2,4d6c <__alt_data_end+0xfffd402c>
    5068:	d9c00717 	ldw	r7,28(sp)
    506c:	00800c44 	movi	r2,49
    5070:	38800005 	stb	r2,0(r7)
    5074:	d8800517 	ldw	r2,20(sp)
    5078:	3dc00044 	addi	r23,r7,1
    507c:	10800044 	addi	r2,r2,1
    5080:	d8800515 	stw	r2,20(sp)
    5084:	003f3d06 	br	4d7c <__alt_data_end+0xfffd403c>
    5088:	d9800517 	ldw	r6,20(sp)
    508c:	d9c00717 	ldw	r7,28(sp)
    5090:	00800c44 	movi	r2,49
    5094:	31800044 	addi	r6,r6,1
    5098:	d9800515 	stw	r6,20(sp)
    509c:	38800005 	stb	r2,0(r7)
    50a0:	003edf06 	br	4c20 <__alt_data_end+0xfffd3ee0>
    50a4:	d8000b15 	stw	zero,44(sp)
    50a8:	003c9f06 	br	4328 <__alt_data_end+0xfffd35e8>
    50ac:	903e7e1e 	bne	r18,zero,4aa8 <__alt_data_end+0xfffd3d68>
    50b0:	00800434 	movhi	r2,16
    50b4:	10bfffc4 	addi	r2,r2,-1
    50b8:	9884703a 	and	r2,r19,r2
    50bc:	1000ea1e 	bne	r2,zero,5468 <_dtoa_r+0x1460>
    50c0:	9cdffc2c 	andhi	r19,r19,32752
    50c4:	9800e826 	beq	r19,zero,5468 <_dtoa_r+0x1460>
    50c8:	d9c00817 	ldw	r7,32(sp)
    50cc:	b5800044 	addi	r22,r22,1
    50d0:	04c00044 	movi	r19,1
    50d4:	39c00044 	addi	r7,r7,1
    50d8:	d9c00815 	stw	r7,32(sp)
    50dc:	d8800d17 	ldw	r2,52(sp)
    50e0:	103e721e 	bne	r2,zero,4aac <__alt_data_end+0xfffd3d6c>
    50e4:	00800044 	movi	r2,1
    50e8:	003e7906 	br	4ad0 <__alt_data_end+0xfffd3d90>
    50ec:	8009883a 	mov	r4,r16
    50f0:	000d9140 	call	d914 <__floatsidf>
    50f4:	d9800f17 	ldw	r6,60(sp)
    50f8:	d9c01017 	ldw	r7,64(sp)
    50fc:	1009883a 	mov	r4,r2
    5100:	180b883a 	mov	r5,r3
    5104:	000c72c0 	call	c72c <__muldf3>
    5108:	000d883a 	mov	r6,zero
    510c:	01d00734 	movhi	r7,16412
    5110:	1009883a 	mov	r4,r2
    5114:	180b883a 	mov	r5,r3
    5118:	000b2580 	call	b258 <__adddf3>
    511c:	047f3034 	movhi	r17,64704
    5120:	1021883a 	mov	r16,r2
    5124:	1c63883a 	add	r17,r3,r17
    5128:	d9000f17 	ldw	r4,60(sp)
    512c:	d9401017 	ldw	r5,64(sp)
    5130:	000d883a 	mov	r6,zero
    5134:	01d00534 	movhi	r7,16404
    5138:	000cf980 	call	cf98 <__subdf3>
    513c:	800d883a 	mov	r6,r16
    5140:	880f883a 	mov	r7,r17
    5144:	1009883a 	mov	r4,r2
    5148:	180b883a 	mov	r5,r3
    514c:	102b883a 	mov	r21,r2
    5150:	1829883a 	mov	r20,r3
    5154:	000c55c0 	call	c55c <__gedf2>
    5158:	00806c16 	blt	zero,r2,530c <_dtoa_r+0x1304>
    515c:	89e0003c 	xorhi	r7,r17,32768
    5160:	800d883a 	mov	r6,r16
    5164:	a809883a 	mov	r4,r21
    5168:	a00b883a 	mov	r5,r20
    516c:	000c6380 	call	c638 <__ledf2>
    5170:	103d7e0e 	bge	r2,zero,476c <__alt_data_end+0xfffd3a2c>
    5174:	002b883a 	mov	r21,zero
    5178:	0023883a 	mov	r17,zero
    517c:	003efb06 	br	4d6c <__alt_data_end+0xfffd402c>
    5180:	d8800717 	ldw	r2,28(sp)
    5184:	003bd006 	br	40c8 <__alt_data_end+0xfffd3388>
    5188:	d9000a17 	ldw	r4,40(sp)
    518c:	d9800d17 	ldw	r6,52(sp)
    5190:	dd400a15 	stw	r21,40(sp)
    5194:	a905c83a 	sub	r2,r21,r4
    5198:	308d883a 	add	r6,r6,r2
    519c:	d9800d15 	stw	r6,52(sp)
    51a0:	002b883a 	mov	r21,zero
    51a4:	003e0606 	br	49c0 <__alt_data_end+0xfffd3c80>
    51a8:	9023883a 	mov	r17,r18
    51ac:	9829883a 	mov	r20,r19
    51b0:	04000084 	movi	r16,2
    51b4:	003c9206 	br	4400 <__alt_data_end+0xfffd36c0>
    51b8:	04000044 	movi	r16,1
    51bc:	dc000c15 	stw	r16,48(sp)
    51c0:	dc000615 	stw	r16,24(sp)
    51c4:	dc002215 	stw	r16,136(sp)
    51c8:	e0001115 	stw	zero,68(fp)
    51cc:	000b883a 	mov	r5,zero
    51d0:	003c6906 	br	4378 <__alt_data_end+0xfffd3638>
    51d4:	3021883a 	mov	r16,r6
    51d8:	003ffb06 	br	51c8 <__alt_data_end+0xfffd4488>
    51dc:	1000021e 	bne	r2,zero,51e8 <_dtoa_r+0x11e0>
    51e0:	4200004c 	andi	r8,r8,1
    51e4:	403e7d1e 	bne	r8,zero,4bdc <__alt_data_end+0xfffd3e9c>
    51e8:	01000c04 	movi	r4,48
    51ec:	00000106 	br	51f4 <_dtoa_r+0x11ec>
    51f0:	102f883a 	mov	r23,r2
    51f4:	b8bfffc4 	addi	r2,r23,-1
    51f8:	10c00007 	ldb	r3,0(r2)
    51fc:	193ffc26 	beq	r3,r4,51f0 <__alt_data_end+0xfffd44b0>
    5200:	003e8706 	br	4c20 <__alt_data_end+0xfffd3ee0>
    5204:	d8800517 	ldw	r2,20(sp)
    5208:	00a3c83a 	sub	r17,zero,r2
    520c:	8800a426 	beq	r17,zero,54a0 <_dtoa_r+0x1498>
    5210:	888003cc 	andi	r2,r17,15
    5214:	100490fa 	slli	r2,r2,3
    5218:	00c000b4 	movhi	r3,2
    521c:	18e35304 	addi	r3,r3,-29364
    5220:	1885883a 	add	r2,r3,r2
    5224:	11800017 	ldw	r6,0(r2)
    5228:	11c00117 	ldw	r7,4(r2)
    522c:	9009883a 	mov	r4,r18
    5230:	980b883a 	mov	r5,r19
    5234:	8823d13a 	srai	r17,r17,4
    5238:	000c72c0 	call	c72c <__muldf3>
    523c:	d8800f15 	stw	r2,60(sp)
    5240:	d8c01015 	stw	r3,64(sp)
    5244:	8800e826 	beq	r17,zero,55e8 <_dtoa_r+0x15e0>
    5248:	050000b4 	movhi	r20,2
    524c:	a5234904 	addi	r20,r20,-29404
    5250:	04000084 	movi	r16,2
    5254:	8980004c 	andi	r6,r17,1
    5258:	1009883a 	mov	r4,r2
    525c:	8823d07a 	srai	r17,r17,1
    5260:	180b883a 	mov	r5,r3
    5264:	30000426 	beq	r6,zero,5278 <_dtoa_r+0x1270>
    5268:	a1800017 	ldw	r6,0(r20)
    526c:	a1c00117 	ldw	r7,4(r20)
    5270:	84000044 	addi	r16,r16,1
    5274:	000c72c0 	call	c72c <__muldf3>
    5278:	a5000204 	addi	r20,r20,8
    527c:	883ff51e 	bne	r17,zero,5254 <__alt_data_end+0xfffd4514>
    5280:	d8800f15 	stw	r2,60(sp)
    5284:	d8c01015 	stw	r3,64(sp)
    5288:	003c7606 	br	4464 <__alt_data_end+0xfffd3724>
    528c:	00c00c04 	movi	r3,48
    5290:	10c00005 	stb	r3,0(r2)
    5294:	d8c00517 	ldw	r3,20(sp)
    5298:	bd3fffc3 	ldbu	r20,-1(r23)
    529c:	18c00044 	addi	r3,r3,1
    52a0:	d8c00515 	stw	r3,20(sp)
    52a4:	003db906 	br	498c <__alt_data_end+0xfffd3c4c>
    52a8:	89400117 	ldw	r5,4(r17)
    52ac:	e009883a 	mov	r4,fp
    52b0:	0006c440 	call	6c44 <_Balloc>
    52b4:	89800417 	ldw	r6,16(r17)
    52b8:	89400304 	addi	r5,r17,12
    52bc:	11000304 	addi	r4,r2,12
    52c0:	31800084 	addi	r6,r6,2
    52c4:	318d883a 	add	r6,r6,r6
    52c8:	318d883a 	add	r6,r6,r6
    52cc:	1027883a 	mov	r19,r2
    52d0:	000141c0 	call	141c <memcpy>
    52d4:	01800044 	movi	r6,1
    52d8:	980b883a 	mov	r5,r19
    52dc:	e009883a 	mov	r4,fp
    52e0:	00074800 	call	7480 <__lshift>
    52e4:	1029883a 	mov	r20,r2
    52e8:	003ecc06 	br	4e1c <__alt_data_end+0xfffd40dc>
    52ec:	00800e44 	movi	r2,57
    52f0:	90809026 	beq	r18,r2,5534 <_dtoa_r+0x152c>
    52f4:	92000044 	addi	r8,r18,1
    52f8:	003f1f06 	br	4f78 <__alt_data_end+0xfffd4238>
    52fc:	9011883a 	mov	r8,r18
    5300:	8825883a 	mov	r18,r17
    5304:	a023883a 	mov	r17,r20
    5308:	003e2906 	br	4bb0 <__alt_data_end+0xfffd3e70>
    530c:	002b883a 	mov	r21,zero
    5310:	0023883a 	mov	r17,zero
    5314:	003f5406 	br	5068 <__alt_data_end+0xfffd4328>
    5318:	61bfffc4 	addi	r6,r12,-1
    531c:	300490fa 	slli	r2,r6,3
    5320:	00c000b4 	movhi	r3,2
    5324:	18e35304 	addi	r3,r3,-29364
    5328:	1885883a 	add	r2,r3,r2
    532c:	11000017 	ldw	r4,0(r2)
    5330:	11400117 	ldw	r5,4(r2)
    5334:	d8800717 	ldw	r2,28(sp)
    5338:	880f883a 	mov	r7,r17
    533c:	d9801215 	stw	r6,72(sp)
    5340:	800d883a 	mov	r6,r16
    5344:	db001615 	stw	r12,88(sp)
    5348:	15c00044 	addi	r23,r2,1
    534c:	000c72c0 	call	c72c <__muldf3>
    5350:	d9401017 	ldw	r5,64(sp)
    5354:	d9000f17 	ldw	r4,60(sp)
    5358:	d8c01515 	stw	r3,84(sp)
    535c:	d8801415 	stw	r2,80(sp)
    5360:	000d8940 	call	d894 <__fixdfsi>
    5364:	1009883a 	mov	r4,r2
    5368:	1021883a 	mov	r16,r2
    536c:	000d9140 	call	d914 <__floatsidf>
    5370:	d9000f17 	ldw	r4,60(sp)
    5374:	d9401017 	ldw	r5,64(sp)
    5378:	100d883a 	mov	r6,r2
    537c:	180f883a 	mov	r7,r3
    5380:	000cf980 	call	cf98 <__subdf3>
    5384:	1829883a 	mov	r20,r3
    5388:	d8c00717 	ldw	r3,28(sp)
    538c:	84000c04 	addi	r16,r16,48
    5390:	1023883a 	mov	r17,r2
    5394:	1c000005 	stb	r16,0(r3)
    5398:	db001617 	ldw	r12,88(sp)
    539c:	00800044 	movi	r2,1
    53a0:	60802226 	beq	r12,r2,542c <_dtoa_r+0x1424>
    53a4:	d9c00717 	ldw	r7,28(sp)
    53a8:	8805883a 	mov	r2,r17
    53ac:	b82b883a 	mov	r21,r23
    53b0:	3b19883a 	add	r12,r7,r12
    53b4:	6023883a 	mov	r17,r12
    53b8:	a007883a 	mov	r3,r20
    53bc:	dc800f15 	stw	r18,60(sp)
    53c0:	000d883a 	mov	r6,zero
    53c4:	01d00934 	movhi	r7,16420
    53c8:	1009883a 	mov	r4,r2
    53cc:	180b883a 	mov	r5,r3
    53d0:	000c72c0 	call	c72c <__muldf3>
    53d4:	180b883a 	mov	r5,r3
    53d8:	1009883a 	mov	r4,r2
    53dc:	1829883a 	mov	r20,r3
    53e0:	1025883a 	mov	r18,r2
    53e4:	000d8940 	call	d894 <__fixdfsi>
    53e8:	1009883a 	mov	r4,r2
    53ec:	1021883a 	mov	r16,r2
    53f0:	000d9140 	call	d914 <__floatsidf>
    53f4:	100d883a 	mov	r6,r2
    53f8:	180f883a 	mov	r7,r3
    53fc:	9009883a 	mov	r4,r18
    5400:	a00b883a 	mov	r5,r20
    5404:	84000c04 	addi	r16,r16,48
    5408:	000cf980 	call	cf98 <__subdf3>
    540c:	ad400044 	addi	r21,r21,1
    5410:	ac3fffc5 	stb	r16,-1(r21)
    5414:	ac7fea1e 	bne	r21,r17,53c0 <__alt_data_end+0xfffd4680>
    5418:	1023883a 	mov	r17,r2
    541c:	d8801217 	ldw	r2,72(sp)
    5420:	dc800f17 	ldw	r18,60(sp)
    5424:	1829883a 	mov	r20,r3
    5428:	b8af883a 	add	r23,r23,r2
    542c:	d9001417 	ldw	r4,80(sp)
    5430:	d9401517 	ldw	r5,84(sp)
    5434:	000d883a 	mov	r6,zero
    5438:	01cff834 	movhi	r7,16352
    543c:	000b2580 	call	b258 <__adddf3>
    5440:	880d883a 	mov	r6,r17
    5444:	a00f883a 	mov	r7,r20
    5448:	1009883a 	mov	r4,r2
    544c:	180b883a 	mov	r5,r3
    5450:	000c6380 	call	c638 <__ledf2>
    5454:	10003e0e 	bge	r2,zero,5550 <_dtoa_r+0x1548>
    5458:	d9001317 	ldw	r4,76(sp)
    545c:	bd3fffc3 	ldbu	r20,-1(r23)
    5460:	d9000515 	stw	r4,20(sp)
    5464:	003d3b06 	br	4954 <__alt_data_end+0xfffd3c14>
    5468:	0027883a 	mov	r19,zero
    546c:	003f1b06 	br	50dc <__alt_data_end+0xfffd439c>
    5470:	d8800817 	ldw	r2,32(sp)
    5474:	11e9c83a 	sub	r20,r2,r7
    5478:	0005883a 	mov	r2,zero
    547c:	003d5406 	br	49d0 <__alt_data_end+0xfffd3c90>
    5480:	00800044 	movi	r2,1
    5484:	003dc706 	br	4ba4 <__alt_data_end+0xfffd3e64>
    5488:	d8c00217 	ldw	r3,8(sp)
    548c:	00800d84 	movi	r2,54
    5490:	dd400a17 	ldw	r21,40(sp)
    5494:	10c5c83a 	sub	r2,r2,r3
    5498:	dd000817 	ldw	r20,32(sp)
    549c:	003d4c06 	br	49d0 <__alt_data_end+0xfffd3c90>
    54a0:	dc800f15 	stw	r18,60(sp)
    54a4:	dcc01015 	stw	r19,64(sp)
    54a8:	04000084 	movi	r16,2
    54ac:	003bed06 	br	4464 <__alt_data_end+0xfffd3724>
    54b0:	d9000617 	ldw	r4,24(sp)
    54b4:	203f0d26 	beq	r4,zero,50ec <__alt_data_end+0xfffd43ac>
    54b8:	d9800c17 	ldw	r6,48(sp)
    54bc:	01bcab0e 	bge	zero,r6,476c <__alt_data_end+0xfffd3a2c>
    54c0:	d9401017 	ldw	r5,64(sp)
    54c4:	d9000f17 	ldw	r4,60(sp)
    54c8:	000d883a 	mov	r6,zero
    54cc:	01d00934 	movhi	r7,16420
    54d0:	000c72c0 	call	c72c <__muldf3>
    54d4:	81000044 	addi	r4,r16,1
    54d8:	d8800f15 	stw	r2,60(sp)
    54dc:	d8c01015 	stw	r3,64(sp)
    54e0:	000d9140 	call	d914 <__floatsidf>
    54e4:	d9800f17 	ldw	r6,60(sp)
    54e8:	d9c01017 	ldw	r7,64(sp)
    54ec:	1009883a 	mov	r4,r2
    54f0:	180b883a 	mov	r5,r3
    54f4:	000c72c0 	call	c72c <__muldf3>
    54f8:	01d00734 	movhi	r7,16412
    54fc:	000d883a 	mov	r6,zero
    5500:	1009883a 	mov	r4,r2
    5504:	180b883a 	mov	r5,r3
    5508:	000b2580 	call	b258 <__adddf3>
    550c:	d9c00517 	ldw	r7,20(sp)
    5510:	047f3034 	movhi	r17,64704
    5514:	1021883a 	mov	r16,r2
    5518:	39ffffc4 	addi	r7,r7,-1
    551c:	d9c01315 	stw	r7,76(sp)
    5520:	1c63883a 	add	r17,r3,r17
    5524:	db000c17 	ldw	r12,48(sp)
    5528:	003bea06 	br	44d4 <__alt_data_end+0xfffd3794>
    552c:	dc000915 	stw	r16,36(sp)
    5530:	003e0e06 	br	4d6c <__alt_data_end+0xfffd402c>
    5534:	01000e44 	movi	r4,57
    5538:	8825883a 	mov	r18,r17
    553c:	9dc00044 	addi	r23,r19,1
    5540:	99000005 	stb	r4,0(r19)
    5544:	a023883a 	mov	r17,r20
    5548:	dc000915 	stw	r16,36(sp)
    554c:	003da406 	br	4be0 <__alt_data_end+0xfffd3ea0>
    5550:	d9801417 	ldw	r6,80(sp)
    5554:	d9c01517 	ldw	r7,84(sp)
    5558:	0009883a 	mov	r4,zero
    555c:	014ff834 	movhi	r5,16352
    5560:	000cf980 	call	cf98 <__subdf3>
    5564:	880d883a 	mov	r6,r17
    5568:	a00f883a 	mov	r7,r20
    556c:	1009883a 	mov	r4,r2
    5570:	180b883a 	mov	r5,r3
    5574:	000c55c0 	call	c55c <__gedf2>
    5578:	00bc7c0e 	bge	zero,r2,476c <__alt_data_end+0xfffd3a2c>
    557c:	01000c04 	movi	r4,48
    5580:	00000106 	br	5588 <_dtoa_r+0x1580>
    5584:	102f883a 	mov	r23,r2
    5588:	b8bfffc4 	addi	r2,r23,-1
    558c:	10c00007 	ldb	r3,0(r2)
    5590:	193ffc26 	beq	r3,r4,5584 <__alt_data_end+0xfffd4844>
    5594:	d9801317 	ldw	r6,76(sp)
    5598:	d9800515 	stw	r6,20(sp)
    559c:	003c4406 	br	46b0 <__alt_data_end+0xfffd3970>
    55a0:	d9801317 	ldw	r6,76(sp)
    55a4:	d9800515 	stw	r6,20(sp)
    55a8:	003cea06 	br	4954 <__alt_data_end+0xfffd3c14>
    55ac:	dd800f17 	ldw	r22,60(sp)
    55b0:	dcc01017 	ldw	r19,64(sp)
    55b4:	dc801217 	ldw	r18,72(sp)
    55b8:	003c6c06 	br	476c <__alt_data_end+0xfffd3a2c>
    55bc:	903e031e 	bne	r18,zero,4dcc <__alt_data_end+0xfffd408c>
    55c0:	003ebb06 	br	50b0 <__alt_data_end+0xfffd4370>
    55c4:	103e6c1e 	bne	r2,zero,4f78 <__alt_data_end+0xfffd4238>
    55c8:	4080004c 	andi	r2,r8,1
    55cc:	103e6a26 	beq	r2,zero,4f78 <__alt_data_end+0xfffd4238>
    55d0:	003e6606 	br	4f6c <__alt_data_end+0xfffd422c>
    55d4:	d8c00317 	ldw	r3,12(sp)
    55d8:	00800084 	movi	r2,2
    55dc:	10c02916 	blt	r2,r3,5684 <_dtoa_r+0x167c>
    55e0:	d9000c17 	ldw	r4,48(sp)
    55e4:	003e8806 	br	5008 <__alt_data_end+0xfffd42c8>
    55e8:	04000084 	movi	r16,2
    55ec:	003b9d06 	br	4464 <__alt_data_end+0xfffd3724>
    55f0:	d9001317 	ldw	r4,76(sp)
    55f4:	d9000515 	stw	r4,20(sp)
    55f8:	003cd606 	br	4954 <__alt_data_end+0xfffd3c14>
    55fc:	d8801317 	ldw	r2,76(sp)
    5600:	d8800515 	stw	r2,20(sp)
    5604:	003c2a06 	br	46b0 <__alt_data_end+0xfffd3970>
    5608:	d9800317 	ldw	r6,12(sp)
    560c:	00800084 	movi	r2,2
    5610:	11801516 	blt	r2,r6,5668 <_dtoa_r+0x1660>
    5614:	d9c00c17 	ldw	r7,48(sp)
    5618:	d9c00615 	stw	r7,24(sp)
    561c:	003df706 	br	4dfc <__alt_data_end+0xfffd40bc>
    5620:	193d3926 	beq	r3,r4,4b08 <__alt_data_end+0xfffd3dc8>
    5624:	00c00f04 	movi	r3,60
    5628:	1885c83a 	sub	r2,r3,r2
    562c:	003ddf06 	br	4dac <__alt_data_end+0xfffd406c>
    5630:	e009883a 	mov	r4,fp
    5634:	e0001115 	stw	zero,68(fp)
    5638:	000b883a 	mov	r5,zero
    563c:	0006c440 	call	6c44 <_Balloc>
    5640:	d8800715 	stw	r2,28(sp)
    5644:	d8c00717 	ldw	r3,28(sp)
    5648:	00bfffc4 	movi	r2,-1
    564c:	01000044 	movi	r4,1
    5650:	d8800c15 	stw	r2,48(sp)
    5654:	e0c01015 	stw	r3,64(fp)
    5658:	d9000b15 	stw	r4,44(sp)
    565c:	d8800615 	stw	r2,24(sp)
    5660:	d8002215 	stw	zero,136(sp)
    5664:	003c4106 	br	476c <__alt_data_end+0xfffd3a2c>
    5668:	d8c00c17 	ldw	r3,48(sp)
    566c:	d8c00615 	stw	r3,24(sp)
    5670:	003e7006 	br	5034 <__alt_data_end+0xfffd42f4>
    5674:	04400044 	movi	r17,1
    5678:	003b2006 	br	42fc <__alt_data_end+0xfffd35bc>
    567c:	000b883a 	mov	r5,zero
    5680:	003b3d06 	br	4378 <__alt_data_end+0xfffd3638>
    5684:	d8800c17 	ldw	r2,48(sp)
    5688:	d8800615 	stw	r2,24(sp)
    568c:	003e6906 	br	5034 <__alt_data_end+0xfffd42f4>

00005690 <__sflush_r>:
    5690:	2880030b 	ldhu	r2,12(r5)
    5694:	defffb04 	addi	sp,sp,-20
    5698:	dcc00315 	stw	r19,12(sp)
    569c:	dc400115 	stw	r17,4(sp)
    56a0:	dfc00415 	stw	ra,16(sp)
    56a4:	dc800215 	stw	r18,8(sp)
    56a8:	dc000015 	stw	r16,0(sp)
    56ac:	10c0020c 	andi	r3,r2,8
    56b0:	2823883a 	mov	r17,r5
    56b4:	2027883a 	mov	r19,r4
    56b8:	1800311e 	bne	r3,zero,5780 <__sflush_r+0xf0>
    56bc:	28c00117 	ldw	r3,4(r5)
    56c0:	10820014 	ori	r2,r2,2048
    56c4:	2880030d 	sth	r2,12(r5)
    56c8:	00c04b0e 	bge	zero,r3,57f8 <__sflush_r+0x168>
    56cc:	8a000a17 	ldw	r8,40(r17)
    56d0:	40002326 	beq	r8,zero,5760 <__sflush_r+0xd0>
    56d4:	9c000017 	ldw	r16,0(r19)
    56d8:	10c4000c 	andi	r3,r2,4096
    56dc:	98000015 	stw	zero,0(r19)
    56e0:	18004826 	beq	r3,zero,5804 <__sflush_r+0x174>
    56e4:	89801417 	ldw	r6,80(r17)
    56e8:	10c0010c 	andi	r3,r2,4
    56ec:	18000626 	beq	r3,zero,5708 <__sflush_r+0x78>
    56f0:	88c00117 	ldw	r3,4(r17)
    56f4:	88800c17 	ldw	r2,48(r17)
    56f8:	30cdc83a 	sub	r6,r6,r3
    56fc:	10000226 	beq	r2,zero,5708 <__sflush_r+0x78>
    5700:	88800f17 	ldw	r2,60(r17)
    5704:	308dc83a 	sub	r6,r6,r2
    5708:	89400717 	ldw	r5,28(r17)
    570c:	000f883a 	mov	r7,zero
    5710:	9809883a 	mov	r4,r19
    5714:	403ee83a 	callr	r8
    5718:	00ffffc4 	movi	r3,-1
    571c:	10c04426 	beq	r2,r3,5830 <__sflush_r+0x1a0>
    5720:	88c0030b 	ldhu	r3,12(r17)
    5724:	89000417 	ldw	r4,16(r17)
    5728:	88000115 	stw	zero,4(r17)
    572c:	197dffcc 	andi	r5,r3,63487
    5730:	8940030d 	sth	r5,12(r17)
    5734:	89000015 	stw	r4,0(r17)
    5738:	18c4000c 	andi	r3,r3,4096
    573c:	18002c1e 	bne	r3,zero,57f0 <__sflush_r+0x160>
    5740:	89400c17 	ldw	r5,48(r17)
    5744:	9c000015 	stw	r16,0(r19)
    5748:	28000526 	beq	r5,zero,5760 <__sflush_r+0xd0>
    574c:	88801004 	addi	r2,r17,64
    5750:	28800226 	beq	r5,r2,575c <__sflush_r+0xcc>
    5754:	9809883a 	mov	r4,r19
    5758:	0005e0c0 	call	5e0c <_free_r>
    575c:	88000c15 	stw	zero,48(r17)
    5760:	0005883a 	mov	r2,zero
    5764:	dfc00417 	ldw	ra,16(sp)
    5768:	dcc00317 	ldw	r19,12(sp)
    576c:	dc800217 	ldw	r18,8(sp)
    5770:	dc400117 	ldw	r17,4(sp)
    5774:	dc000017 	ldw	r16,0(sp)
    5778:	dec00504 	addi	sp,sp,20
    577c:	f800283a 	ret
    5780:	2c800417 	ldw	r18,16(r5)
    5784:	903ff626 	beq	r18,zero,5760 <__alt_data_end+0xfffd4a20>
    5788:	2c000017 	ldw	r16,0(r5)
    578c:	108000cc 	andi	r2,r2,3
    5790:	2c800015 	stw	r18,0(r5)
    5794:	84a1c83a 	sub	r16,r16,r18
    5798:	1000131e 	bne	r2,zero,57e8 <__sflush_r+0x158>
    579c:	28800517 	ldw	r2,20(r5)
    57a0:	88800215 	stw	r2,8(r17)
    57a4:	04000316 	blt	zero,r16,57b4 <__sflush_r+0x124>
    57a8:	003fed06 	br	5760 <__alt_data_end+0xfffd4a20>
    57ac:	90a5883a 	add	r18,r18,r2
    57b0:	043feb0e 	bge	zero,r16,5760 <__alt_data_end+0xfffd4a20>
    57b4:	88800917 	ldw	r2,36(r17)
    57b8:	89400717 	ldw	r5,28(r17)
    57bc:	800f883a 	mov	r7,r16
    57c0:	900d883a 	mov	r6,r18
    57c4:	9809883a 	mov	r4,r19
    57c8:	103ee83a 	callr	r2
    57cc:	80a1c83a 	sub	r16,r16,r2
    57d0:	00bff616 	blt	zero,r2,57ac <__alt_data_end+0xfffd4a6c>
    57d4:	88c0030b 	ldhu	r3,12(r17)
    57d8:	00bfffc4 	movi	r2,-1
    57dc:	18c01014 	ori	r3,r3,64
    57e0:	88c0030d 	sth	r3,12(r17)
    57e4:	003fdf06 	br	5764 <__alt_data_end+0xfffd4a24>
    57e8:	0005883a 	mov	r2,zero
    57ec:	003fec06 	br	57a0 <__alt_data_end+0xfffd4a60>
    57f0:	88801415 	stw	r2,80(r17)
    57f4:	003fd206 	br	5740 <__alt_data_end+0xfffd4a00>
    57f8:	28c00f17 	ldw	r3,60(r5)
    57fc:	00ffb316 	blt	zero,r3,56cc <__alt_data_end+0xfffd498c>
    5800:	003fd706 	br	5760 <__alt_data_end+0xfffd4a20>
    5804:	89400717 	ldw	r5,28(r17)
    5808:	000d883a 	mov	r6,zero
    580c:	01c00044 	movi	r7,1
    5810:	9809883a 	mov	r4,r19
    5814:	403ee83a 	callr	r8
    5818:	100d883a 	mov	r6,r2
    581c:	00bfffc4 	movi	r2,-1
    5820:	30801426 	beq	r6,r2,5874 <__sflush_r+0x1e4>
    5824:	8880030b 	ldhu	r2,12(r17)
    5828:	8a000a17 	ldw	r8,40(r17)
    582c:	003fae06 	br	56e8 <__alt_data_end+0xfffd49a8>
    5830:	98c00017 	ldw	r3,0(r19)
    5834:	183fba26 	beq	r3,zero,5720 <__alt_data_end+0xfffd49e0>
    5838:	01000744 	movi	r4,29
    583c:	19000626 	beq	r3,r4,5858 <__sflush_r+0x1c8>
    5840:	01000584 	movi	r4,22
    5844:	19000426 	beq	r3,r4,5858 <__sflush_r+0x1c8>
    5848:	88c0030b 	ldhu	r3,12(r17)
    584c:	18c01014 	ori	r3,r3,64
    5850:	88c0030d 	sth	r3,12(r17)
    5854:	003fc306 	br	5764 <__alt_data_end+0xfffd4a24>
    5858:	8880030b 	ldhu	r2,12(r17)
    585c:	88c00417 	ldw	r3,16(r17)
    5860:	88000115 	stw	zero,4(r17)
    5864:	10bdffcc 	andi	r2,r2,63487
    5868:	8880030d 	sth	r2,12(r17)
    586c:	88c00015 	stw	r3,0(r17)
    5870:	003fb306 	br	5740 <__alt_data_end+0xfffd4a00>
    5874:	98800017 	ldw	r2,0(r19)
    5878:	103fea26 	beq	r2,zero,5824 <__alt_data_end+0xfffd4ae4>
    587c:	00c00744 	movi	r3,29
    5880:	10c00226 	beq	r2,r3,588c <__sflush_r+0x1fc>
    5884:	00c00584 	movi	r3,22
    5888:	10c0031e 	bne	r2,r3,5898 <__sflush_r+0x208>
    588c:	9c000015 	stw	r16,0(r19)
    5890:	0005883a 	mov	r2,zero
    5894:	003fb306 	br	5764 <__alt_data_end+0xfffd4a24>
    5898:	88c0030b 	ldhu	r3,12(r17)
    589c:	3005883a 	mov	r2,r6
    58a0:	18c01014 	ori	r3,r3,64
    58a4:	88c0030d 	sth	r3,12(r17)
    58a8:	003fae06 	br	5764 <__alt_data_end+0xfffd4a24>

000058ac <_fflush_r>:
    58ac:	defffd04 	addi	sp,sp,-12
    58b0:	dc000115 	stw	r16,4(sp)
    58b4:	dfc00215 	stw	ra,8(sp)
    58b8:	2021883a 	mov	r16,r4
    58bc:	20000226 	beq	r4,zero,58c8 <_fflush_r+0x1c>
    58c0:	20800e17 	ldw	r2,56(r4)
    58c4:	10000c26 	beq	r2,zero,58f8 <_fflush_r+0x4c>
    58c8:	2880030f 	ldh	r2,12(r5)
    58cc:	1000051e 	bne	r2,zero,58e4 <_fflush_r+0x38>
    58d0:	0005883a 	mov	r2,zero
    58d4:	dfc00217 	ldw	ra,8(sp)
    58d8:	dc000117 	ldw	r16,4(sp)
    58dc:	dec00304 	addi	sp,sp,12
    58e0:	f800283a 	ret
    58e4:	8009883a 	mov	r4,r16
    58e8:	dfc00217 	ldw	ra,8(sp)
    58ec:	dc000117 	ldw	r16,4(sp)
    58f0:	dec00304 	addi	sp,sp,12
    58f4:	00056901 	jmpi	5690 <__sflush_r>
    58f8:	d9400015 	stw	r5,0(sp)
    58fc:	0005c980 	call	5c98 <__sinit>
    5900:	d9400017 	ldw	r5,0(sp)
    5904:	003ff006 	br	58c8 <__alt_data_end+0xfffd4b88>

00005908 <fflush>:
    5908:	20000526 	beq	r4,zero,5920 <fflush+0x18>
    590c:	008000b4 	movhi	r2,2
    5910:	10aae204 	addi	r2,r2,-21624
    5914:	200b883a 	mov	r5,r4
    5918:	11000017 	ldw	r4,0(r2)
    591c:	00058ac1 	jmpi	58ac <_fflush_r>
    5920:	008000b4 	movhi	r2,2
    5924:	10aae104 	addi	r2,r2,-21628
    5928:	11000017 	ldw	r4,0(r2)
    592c:	01400034 	movhi	r5,0
    5930:	29562b04 	addi	r5,r5,22700
    5934:	00066a81 	jmpi	66a8 <_fwalk_reent>

00005938 <__fp_unlock>:
    5938:	0005883a 	mov	r2,zero
    593c:	f800283a 	ret

00005940 <_cleanup_r>:
    5940:	01400074 	movhi	r5,1
    5944:	29680d04 	addi	r5,r5,-24524
    5948:	00066a81 	jmpi	66a8 <_fwalk_reent>

0000594c <__sinit.part.1>:
    594c:	defff704 	addi	sp,sp,-36
    5950:	00c00034 	movhi	r3,0
    5954:	dfc00815 	stw	ra,32(sp)
    5958:	ddc00715 	stw	r23,28(sp)
    595c:	dd800615 	stw	r22,24(sp)
    5960:	dd400515 	stw	r21,20(sp)
    5964:	dd000415 	stw	r20,16(sp)
    5968:	dcc00315 	stw	r19,12(sp)
    596c:	dc800215 	stw	r18,8(sp)
    5970:	dc400115 	stw	r17,4(sp)
    5974:	dc000015 	stw	r16,0(sp)
    5978:	18d65004 	addi	r3,r3,22848
    597c:	24000117 	ldw	r16,4(r4)
    5980:	20c00f15 	stw	r3,60(r4)
    5984:	2080bb04 	addi	r2,r4,748
    5988:	00c000c4 	movi	r3,3
    598c:	20c0b915 	stw	r3,740(r4)
    5990:	2080ba15 	stw	r2,744(r4)
    5994:	2000b815 	stw	zero,736(r4)
    5998:	05c00204 	movi	r23,8
    599c:	00800104 	movi	r2,4
    59a0:	2025883a 	mov	r18,r4
    59a4:	b80d883a 	mov	r6,r23
    59a8:	81001704 	addi	r4,r16,92
    59ac:	000b883a 	mov	r5,zero
    59b0:	80000015 	stw	zero,0(r16)
    59b4:	80000115 	stw	zero,4(r16)
    59b8:	80000215 	stw	zero,8(r16)
    59bc:	8080030d 	sth	r2,12(r16)
    59c0:	80001915 	stw	zero,100(r16)
    59c4:	8000038d 	sth	zero,14(r16)
    59c8:	80000415 	stw	zero,16(r16)
    59cc:	80000515 	stw	zero,20(r16)
    59d0:	80000615 	stw	zero,24(r16)
    59d4:	00015640 	call	1564 <memset>
    59d8:	05800074 	movhi	r22,1
    59dc:	94400217 	ldw	r17,8(r18)
    59e0:	05400074 	movhi	r21,1
    59e4:	05000074 	movhi	r20,1
    59e8:	04c00074 	movhi	r19,1
    59ec:	b5a10f04 	addi	r22,r22,-31684
    59f0:	ad612604 	addi	r21,r21,-31592
    59f4:	a5214504 	addi	r20,r20,-31468
    59f8:	9ce15c04 	addi	r19,r19,-31376
    59fc:	85800815 	stw	r22,32(r16)
    5a00:	85400915 	stw	r21,36(r16)
    5a04:	85000a15 	stw	r20,40(r16)
    5a08:	84c00b15 	stw	r19,44(r16)
    5a0c:	84000715 	stw	r16,28(r16)
    5a10:	00800284 	movi	r2,10
    5a14:	8880030d 	sth	r2,12(r17)
    5a18:	00800044 	movi	r2,1
    5a1c:	b80d883a 	mov	r6,r23
    5a20:	89001704 	addi	r4,r17,92
    5a24:	000b883a 	mov	r5,zero
    5a28:	88000015 	stw	zero,0(r17)
    5a2c:	88000115 	stw	zero,4(r17)
    5a30:	88000215 	stw	zero,8(r17)
    5a34:	88001915 	stw	zero,100(r17)
    5a38:	8880038d 	sth	r2,14(r17)
    5a3c:	88000415 	stw	zero,16(r17)
    5a40:	88000515 	stw	zero,20(r17)
    5a44:	88000615 	stw	zero,24(r17)
    5a48:	00015640 	call	1564 <memset>
    5a4c:	94000317 	ldw	r16,12(r18)
    5a50:	00800484 	movi	r2,18
    5a54:	8c400715 	stw	r17,28(r17)
    5a58:	8d800815 	stw	r22,32(r17)
    5a5c:	8d400915 	stw	r21,36(r17)
    5a60:	8d000a15 	stw	r20,40(r17)
    5a64:	8cc00b15 	stw	r19,44(r17)
    5a68:	8080030d 	sth	r2,12(r16)
    5a6c:	00800084 	movi	r2,2
    5a70:	80000015 	stw	zero,0(r16)
    5a74:	80000115 	stw	zero,4(r16)
    5a78:	80000215 	stw	zero,8(r16)
    5a7c:	80001915 	stw	zero,100(r16)
    5a80:	8080038d 	sth	r2,14(r16)
    5a84:	80000415 	stw	zero,16(r16)
    5a88:	80000515 	stw	zero,20(r16)
    5a8c:	80000615 	stw	zero,24(r16)
    5a90:	b80d883a 	mov	r6,r23
    5a94:	000b883a 	mov	r5,zero
    5a98:	81001704 	addi	r4,r16,92
    5a9c:	00015640 	call	1564 <memset>
    5aa0:	00800044 	movi	r2,1
    5aa4:	84000715 	stw	r16,28(r16)
    5aa8:	85800815 	stw	r22,32(r16)
    5aac:	85400915 	stw	r21,36(r16)
    5ab0:	85000a15 	stw	r20,40(r16)
    5ab4:	84c00b15 	stw	r19,44(r16)
    5ab8:	90800e15 	stw	r2,56(r18)
    5abc:	dfc00817 	ldw	ra,32(sp)
    5ac0:	ddc00717 	ldw	r23,28(sp)
    5ac4:	dd800617 	ldw	r22,24(sp)
    5ac8:	dd400517 	ldw	r21,20(sp)
    5acc:	dd000417 	ldw	r20,16(sp)
    5ad0:	dcc00317 	ldw	r19,12(sp)
    5ad4:	dc800217 	ldw	r18,8(sp)
    5ad8:	dc400117 	ldw	r17,4(sp)
    5adc:	dc000017 	ldw	r16,0(sp)
    5ae0:	dec00904 	addi	sp,sp,36
    5ae4:	f800283a 	ret

00005ae8 <__fp_lock>:
    5ae8:	0005883a 	mov	r2,zero
    5aec:	f800283a 	ret

00005af0 <__sfmoreglue>:
    5af0:	defffc04 	addi	sp,sp,-16
    5af4:	dc800215 	stw	r18,8(sp)
    5af8:	2825883a 	mov	r18,r5
    5afc:	dc000015 	stw	r16,0(sp)
    5b00:	01401a04 	movi	r5,104
    5b04:	2021883a 	mov	r16,r4
    5b08:	913fffc4 	addi	r4,r18,-1
    5b0c:	dfc00315 	stw	ra,12(sp)
    5b10:	dc400115 	stw	r17,4(sp)
    5b14:	0000bc00 	call	bc0 <__mulsi3>
    5b18:	8009883a 	mov	r4,r16
    5b1c:	11401d04 	addi	r5,r2,116
    5b20:	1023883a 	mov	r17,r2
    5b24:	0000c100 	call	c10 <_malloc_r>
    5b28:	1021883a 	mov	r16,r2
    5b2c:	10000726 	beq	r2,zero,5b4c <__sfmoreglue+0x5c>
    5b30:	11000304 	addi	r4,r2,12
    5b34:	10000015 	stw	zero,0(r2)
    5b38:	14800115 	stw	r18,4(r2)
    5b3c:	11000215 	stw	r4,8(r2)
    5b40:	89801a04 	addi	r6,r17,104
    5b44:	000b883a 	mov	r5,zero
    5b48:	00015640 	call	1564 <memset>
    5b4c:	8005883a 	mov	r2,r16
    5b50:	dfc00317 	ldw	ra,12(sp)
    5b54:	dc800217 	ldw	r18,8(sp)
    5b58:	dc400117 	ldw	r17,4(sp)
    5b5c:	dc000017 	ldw	r16,0(sp)
    5b60:	dec00404 	addi	sp,sp,16
    5b64:	f800283a 	ret

00005b68 <__sfp>:
    5b68:	defffb04 	addi	sp,sp,-20
    5b6c:	dc000015 	stw	r16,0(sp)
    5b70:	040000b4 	movhi	r16,2
    5b74:	842ae104 	addi	r16,r16,-21628
    5b78:	dcc00315 	stw	r19,12(sp)
    5b7c:	2027883a 	mov	r19,r4
    5b80:	81000017 	ldw	r4,0(r16)
    5b84:	dfc00415 	stw	ra,16(sp)
    5b88:	dc800215 	stw	r18,8(sp)
    5b8c:	20800e17 	ldw	r2,56(r4)
    5b90:	dc400115 	stw	r17,4(sp)
    5b94:	1000021e 	bne	r2,zero,5ba0 <__sfp+0x38>
    5b98:	000594c0 	call	594c <__sinit.part.1>
    5b9c:	81000017 	ldw	r4,0(r16)
    5ba0:	2480b804 	addi	r18,r4,736
    5ba4:	047fffc4 	movi	r17,-1
    5ba8:	91000117 	ldw	r4,4(r18)
    5bac:	94000217 	ldw	r16,8(r18)
    5bb0:	213fffc4 	addi	r4,r4,-1
    5bb4:	20000a16 	blt	r4,zero,5be0 <__sfp+0x78>
    5bb8:	8080030f 	ldh	r2,12(r16)
    5bbc:	10000c26 	beq	r2,zero,5bf0 <__sfp+0x88>
    5bc0:	80c01d04 	addi	r3,r16,116
    5bc4:	00000206 	br	5bd0 <__sfp+0x68>
    5bc8:	18bfe60f 	ldh	r2,-104(r3)
    5bcc:	10000826 	beq	r2,zero,5bf0 <__sfp+0x88>
    5bd0:	213fffc4 	addi	r4,r4,-1
    5bd4:	1c3ffd04 	addi	r16,r3,-12
    5bd8:	18c01a04 	addi	r3,r3,104
    5bdc:	247ffa1e 	bne	r4,r17,5bc8 <__alt_data_end+0xfffd4e88>
    5be0:	90800017 	ldw	r2,0(r18)
    5be4:	10001d26 	beq	r2,zero,5c5c <__sfp+0xf4>
    5be8:	1025883a 	mov	r18,r2
    5bec:	003fee06 	br	5ba8 <__alt_data_end+0xfffd4e68>
    5bf0:	00bfffc4 	movi	r2,-1
    5bf4:	8080038d 	sth	r2,14(r16)
    5bf8:	00800044 	movi	r2,1
    5bfc:	8080030d 	sth	r2,12(r16)
    5c00:	80001915 	stw	zero,100(r16)
    5c04:	80000015 	stw	zero,0(r16)
    5c08:	80000215 	stw	zero,8(r16)
    5c0c:	80000115 	stw	zero,4(r16)
    5c10:	80000415 	stw	zero,16(r16)
    5c14:	80000515 	stw	zero,20(r16)
    5c18:	80000615 	stw	zero,24(r16)
    5c1c:	01800204 	movi	r6,8
    5c20:	000b883a 	mov	r5,zero
    5c24:	81001704 	addi	r4,r16,92
    5c28:	00015640 	call	1564 <memset>
    5c2c:	8005883a 	mov	r2,r16
    5c30:	80000c15 	stw	zero,48(r16)
    5c34:	80000d15 	stw	zero,52(r16)
    5c38:	80001115 	stw	zero,68(r16)
    5c3c:	80001215 	stw	zero,72(r16)
    5c40:	dfc00417 	ldw	ra,16(sp)
    5c44:	dcc00317 	ldw	r19,12(sp)
    5c48:	dc800217 	ldw	r18,8(sp)
    5c4c:	dc400117 	ldw	r17,4(sp)
    5c50:	dc000017 	ldw	r16,0(sp)
    5c54:	dec00504 	addi	sp,sp,20
    5c58:	f800283a 	ret
    5c5c:	01400104 	movi	r5,4
    5c60:	9809883a 	mov	r4,r19
    5c64:	0005af00 	call	5af0 <__sfmoreglue>
    5c68:	90800015 	stw	r2,0(r18)
    5c6c:	103fde1e 	bne	r2,zero,5be8 <__alt_data_end+0xfffd4ea8>
    5c70:	00800304 	movi	r2,12
    5c74:	98800015 	stw	r2,0(r19)
    5c78:	0005883a 	mov	r2,zero
    5c7c:	003ff006 	br	5c40 <__alt_data_end+0xfffd4f00>

00005c80 <_cleanup>:
    5c80:	008000b4 	movhi	r2,2
    5c84:	10aae104 	addi	r2,r2,-21628
    5c88:	11000017 	ldw	r4,0(r2)
    5c8c:	01400074 	movhi	r5,1
    5c90:	29680d04 	addi	r5,r5,-24524
    5c94:	00066a81 	jmpi	66a8 <_fwalk_reent>

00005c98 <__sinit>:
    5c98:	20800e17 	ldw	r2,56(r4)
    5c9c:	10000126 	beq	r2,zero,5ca4 <__sinit+0xc>
    5ca0:	f800283a 	ret
    5ca4:	000594c1 	jmpi	594c <__sinit.part.1>

00005ca8 <__sfp_lock_acquire>:
    5ca8:	f800283a 	ret

00005cac <__sfp_lock_release>:
    5cac:	f800283a 	ret

00005cb0 <__sinit_lock_acquire>:
    5cb0:	f800283a 	ret

00005cb4 <__sinit_lock_release>:
    5cb4:	f800283a 	ret

00005cb8 <__fp_lock_all>:
    5cb8:	008000b4 	movhi	r2,2
    5cbc:	10aae204 	addi	r2,r2,-21624
    5cc0:	11000017 	ldw	r4,0(r2)
    5cc4:	01400034 	movhi	r5,0
    5cc8:	2956ba04 	addi	r5,r5,23272
    5ccc:	00065e41 	jmpi	65e4 <_fwalk>

00005cd0 <__fp_unlock_all>:
    5cd0:	008000b4 	movhi	r2,2
    5cd4:	10aae204 	addi	r2,r2,-21624
    5cd8:	11000017 	ldw	r4,0(r2)
    5cdc:	01400034 	movhi	r5,0
    5ce0:	29564e04 	addi	r5,r5,22840
    5ce4:	00065e41 	jmpi	65e4 <_fwalk>

00005ce8 <_malloc_trim_r>:
    5ce8:	defffb04 	addi	sp,sp,-20
    5cec:	dcc00315 	stw	r19,12(sp)
    5cf0:	04c000b4 	movhi	r19,2
    5cf4:	dc800215 	stw	r18,8(sp)
    5cf8:	dc400115 	stw	r17,4(sp)
    5cfc:	dc000015 	stw	r16,0(sp)
    5d00:	dfc00415 	stw	ra,16(sp)
    5d04:	2821883a 	mov	r16,r5
    5d08:	9ce42604 	addi	r19,r19,-28520
    5d0c:	2025883a 	mov	r18,r4
    5d10:	000e5d40 	call	e5d4 <__malloc_lock>
    5d14:	98800217 	ldw	r2,8(r19)
    5d18:	14400117 	ldw	r17,4(r2)
    5d1c:	00bfff04 	movi	r2,-4
    5d20:	88a2703a 	and	r17,r17,r2
    5d24:	8c21c83a 	sub	r16,r17,r16
    5d28:	8403fbc4 	addi	r16,r16,4079
    5d2c:	8020d33a 	srli	r16,r16,12
    5d30:	0083ffc4 	movi	r2,4095
    5d34:	843fffc4 	addi	r16,r16,-1
    5d38:	8020933a 	slli	r16,r16,12
    5d3c:	1400060e 	bge	r2,r16,5d58 <_malloc_trim_r+0x70>
    5d40:	000b883a 	mov	r5,zero
    5d44:	9009883a 	mov	r4,r18
    5d48:	00017ec0 	call	17ec <_sbrk_r>
    5d4c:	98c00217 	ldw	r3,8(r19)
    5d50:	1c47883a 	add	r3,r3,r17
    5d54:	10c00a26 	beq	r2,r3,5d80 <_malloc_trim_r+0x98>
    5d58:	9009883a 	mov	r4,r18
    5d5c:	000e6f40 	call	e6f4 <__malloc_unlock>
    5d60:	0005883a 	mov	r2,zero
    5d64:	dfc00417 	ldw	ra,16(sp)
    5d68:	dcc00317 	ldw	r19,12(sp)
    5d6c:	dc800217 	ldw	r18,8(sp)
    5d70:	dc400117 	ldw	r17,4(sp)
    5d74:	dc000017 	ldw	r16,0(sp)
    5d78:	dec00504 	addi	sp,sp,20
    5d7c:	f800283a 	ret
    5d80:	040bc83a 	sub	r5,zero,r16
    5d84:	9009883a 	mov	r4,r18
    5d88:	00017ec0 	call	17ec <_sbrk_r>
    5d8c:	00ffffc4 	movi	r3,-1
    5d90:	10c00d26 	beq	r2,r3,5dc8 <_malloc_trim_r+0xe0>
    5d94:	00c000b4 	movhi	r3,2
    5d98:	18f21d04 	addi	r3,r3,-14220
    5d9c:	18800017 	ldw	r2,0(r3)
    5da0:	99000217 	ldw	r4,8(r19)
    5da4:	8c23c83a 	sub	r17,r17,r16
    5da8:	8c400054 	ori	r17,r17,1
    5dac:	1421c83a 	sub	r16,r2,r16
    5db0:	24400115 	stw	r17,4(r4)
    5db4:	9009883a 	mov	r4,r18
    5db8:	1c000015 	stw	r16,0(r3)
    5dbc:	000e6f40 	call	e6f4 <__malloc_unlock>
    5dc0:	00800044 	movi	r2,1
    5dc4:	003fe706 	br	5d64 <__alt_data_end+0xfffd5024>
    5dc8:	000b883a 	mov	r5,zero
    5dcc:	9009883a 	mov	r4,r18
    5dd0:	00017ec0 	call	17ec <_sbrk_r>
    5dd4:	99000217 	ldw	r4,8(r19)
    5dd8:	014003c4 	movi	r5,15
    5ddc:	1107c83a 	sub	r3,r2,r4
    5de0:	28ffdd0e 	bge	r5,r3,5d58 <__alt_data_end+0xfffd5018>
    5de4:	014000b4 	movhi	r5,2
    5de8:	296adf04 	addi	r5,r5,-21636
    5dec:	29400017 	ldw	r5,0(r5)
    5df0:	18c00054 	ori	r3,r3,1
    5df4:	20c00115 	stw	r3,4(r4)
    5df8:	00c000b4 	movhi	r3,2
    5dfc:	1145c83a 	sub	r2,r2,r5
    5e00:	18f21d04 	addi	r3,r3,-14220
    5e04:	18800015 	stw	r2,0(r3)
    5e08:	003fd306 	br	5d58 <__alt_data_end+0xfffd5018>

00005e0c <_free_r>:
    5e0c:	28004126 	beq	r5,zero,5f14 <_free_r+0x108>
    5e10:	defffd04 	addi	sp,sp,-12
    5e14:	dc400115 	stw	r17,4(sp)
    5e18:	dc000015 	stw	r16,0(sp)
    5e1c:	2023883a 	mov	r17,r4
    5e20:	2821883a 	mov	r16,r5
    5e24:	dfc00215 	stw	ra,8(sp)
    5e28:	000e5d40 	call	e5d4 <__malloc_lock>
    5e2c:	81ffff17 	ldw	r7,-4(r16)
    5e30:	00bfff84 	movi	r2,-2
    5e34:	010000b4 	movhi	r4,2
    5e38:	81bffe04 	addi	r6,r16,-8
    5e3c:	3884703a 	and	r2,r7,r2
    5e40:	21242604 	addi	r4,r4,-28520
    5e44:	308b883a 	add	r5,r6,r2
    5e48:	2a400117 	ldw	r9,4(r5)
    5e4c:	22000217 	ldw	r8,8(r4)
    5e50:	00ffff04 	movi	r3,-4
    5e54:	48c6703a 	and	r3,r9,r3
    5e58:	2a005726 	beq	r5,r8,5fb8 <_free_r+0x1ac>
    5e5c:	28c00115 	stw	r3,4(r5)
    5e60:	39c0004c 	andi	r7,r7,1
    5e64:	3800091e 	bne	r7,zero,5e8c <_free_r+0x80>
    5e68:	823ffe17 	ldw	r8,-8(r16)
    5e6c:	22400204 	addi	r9,r4,8
    5e70:	320dc83a 	sub	r6,r6,r8
    5e74:	31c00217 	ldw	r7,8(r6)
    5e78:	1205883a 	add	r2,r2,r8
    5e7c:	3a406526 	beq	r7,r9,6014 <_free_r+0x208>
    5e80:	32000317 	ldw	r8,12(r6)
    5e84:	3a000315 	stw	r8,12(r7)
    5e88:	41c00215 	stw	r7,8(r8)
    5e8c:	28cf883a 	add	r7,r5,r3
    5e90:	39c00117 	ldw	r7,4(r7)
    5e94:	39c0004c 	andi	r7,r7,1
    5e98:	38003a26 	beq	r7,zero,5f84 <_free_r+0x178>
    5e9c:	10c00054 	ori	r3,r2,1
    5ea0:	30c00115 	stw	r3,4(r6)
    5ea4:	3087883a 	add	r3,r6,r2
    5ea8:	18800015 	stw	r2,0(r3)
    5eac:	00c07fc4 	movi	r3,511
    5eb0:	18801936 	bltu	r3,r2,5f18 <_free_r+0x10c>
    5eb4:	1004d0fa 	srli	r2,r2,3
    5eb8:	01c00044 	movi	r7,1
    5ebc:	21400117 	ldw	r5,4(r4)
    5ec0:	10c00044 	addi	r3,r2,1
    5ec4:	18c7883a 	add	r3,r3,r3
    5ec8:	1005d0ba 	srai	r2,r2,2
    5ecc:	18c7883a 	add	r3,r3,r3
    5ed0:	18c7883a 	add	r3,r3,r3
    5ed4:	1907883a 	add	r3,r3,r4
    5ed8:	3884983a 	sll	r2,r7,r2
    5edc:	19c00017 	ldw	r7,0(r3)
    5ee0:	1a3ffe04 	addi	r8,r3,-8
    5ee4:	1144b03a 	or	r2,r2,r5
    5ee8:	32000315 	stw	r8,12(r6)
    5eec:	31c00215 	stw	r7,8(r6)
    5ef0:	20800115 	stw	r2,4(r4)
    5ef4:	19800015 	stw	r6,0(r3)
    5ef8:	39800315 	stw	r6,12(r7)
    5efc:	8809883a 	mov	r4,r17
    5f00:	dfc00217 	ldw	ra,8(sp)
    5f04:	dc400117 	ldw	r17,4(sp)
    5f08:	dc000017 	ldw	r16,0(sp)
    5f0c:	dec00304 	addi	sp,sp,12
    5f10:	000e6f41 	jmpi	e6f4 <__malloc_unlock>
    5f14:	f800283a 	ret
    5f18:	100ad27a 	srli	r5,r2,9
    5f1c:	00c00104 	movi	r3,4
    5f20:	19404a36 	bltu	r3,r5,604c <_free_r+0x240>
    5f24:	100ad1ba 	srli	r5,r2,6
    5f28:	28c00e44 	addi	r3,r5,57
    5f2c:	18c7883a 	add	r3,r3,r3
    5f30:	29400e04 	addi	r5,r5,56
    5f34:	18c7883a 	add	r3,r3,r3
    5f38:	18c7883a 	add	r3,r3,r3
    5f3c:	1909883a 	add	r4,r3,r4
    5f40:	20c00017 	ldw	r3,0(r4)
    5f44:	01c000b4 	movhi	r7,2
    5f48:	213ffe04 	addi	r4,r4,-8
    5f4c:	39e42604 	addi	r7,r7,-28520
    5f50:	20c04426 	beq	r4,r3,6064 <_free_r+0x258>
    5f54:	01ffff04 	movi	r7,-4
    5f58:	19400117 	ldw	r5,4(r3)
    5f5c:	29ca703a 	and	r5,r5,r7
    5f60:	1140022e 	bgeu	r2,r5,5f6c <_free_r+0x160>
    5f64:	18c00217 	ldw	r3,8(r3)
    5f68:	20fffb1e 	bne	r4,r3,5f58 <__alt_data_end+0xfffd5218>
    5f6c:	19000317 	ldw	r4,12(r3)
    5f70:	31000315 	stw	r4,12(r6)
    5f74:	30c00215 	stw	r3,8(r6)
    5f78:	21800215 	stw	r6,8(r4)
    5f7c:	19800315 	stw	r6,12(r3)
    5f80:	003fde06 	br	5efc <__alt_data_end+0xfffd51bc>
    5f84:	29c00217 	ldw	r7,8(r5)
    5f88:	10c5883a 	add	r2,r2,r3
    5f8c:	00c000b4 	movhi	r3,2
    5f90:	18e42804 	addi	r3,r3,-28512
    5f94:	38c03b26 	beq	r7,r3,6084 <_free_r+0x278>
    5f98:	2a000317 	ldw	r8,12(r5)
    5f9c:	11400054 	ori	r5,r2,1
    5fa0:	3087883a 	add	r3,r6,r2
    5fa4:	3a000315 	stw	r8,12(r7)
    5fa8:	41c00215 	stw	r7,8(r8)
    5fac:	31400115 	stw	r5,4(r6)
    5fb0:	18800015 	stw	r2,0(r3)
    5fb4:	003fbd06 	br	5eac <__alt_data_end+0xfffd516c>
    5fb8:	39c0004c 	andi	r7,r7,1
    5fbc:	10c5883a 	add	r2,r2,r3
    5fc0:	3800071e 	bne	r7,zero,5fe0 <_free_r+0x1d4>
    5fc4:	81fffe17 	ldw	r7,-8(r16)
    5fc8:	31cdc83a 	sub	r6,r6,r7
    5fcc:	30c00317 	ldw	r3,12(r6)
    5fd0:	31400217 	ldw	r5,8(r6)
    5fd4:	11c5883a 	add	r2,r2,r7
    5fd8:	28c00315 	stw	r3,12(r5)
    5fdc:	19400215 	stw	r5,8(r3)
    5fe0:	10c00054 	ori	r3,r2,1
    5fe4:	30c00115 	stw	r3,4(r6)
    5fe8:	00c000b4 	movhi	r3,2
    5fec:	18eae004 	addi	r3,r3,-21632
    5ff0:	18c00017 	ldw	r3,0(r3)
    5ff4:	21800215 	stw	r6,8(r4)
    5ff8:	10ffc036 	bltu	r2,r3,5efc <__alt_data_end+0xfffd51bc>
    5ffc:	008000b4 	movhi	r2,2
    6000:	10b1f804 	addi	r2,r2,-14368
    6004:	11400017 	ldw	r5,0(r2)
    6008:	8809883a 	mov	r4,r17
    600c:	0005ce80 	call	5ce8 <_malloc_trim_r>
    6010:	003fba06 	br	5efc <__alt_data_end+0xfffd51bc>
    6014:	28c9883a 	add	r4,r5,r3
    6018:	21000117 	ldw	r4,4(r4)
    601c:	2100004c 	andi	r4,r4,1
    6020:	2000391e 	bne	r4,zero,6108 <_free_r+0x2fc>
    6024:	29c00217 	ldw	r7,8(r5)
    6028:	29000317 	ldw	r4,12(r5)
    602c:	1885883a 	add	r2,r3,r2
    6030:	10c00054 	ori	r3,r2,1
    6034:	39000315 	stw	r4,12(r7)
    6038:	21c00215 	stw	r7,8(r4)
    603c:	30c00115 	stw	r3,4(r6)
    6040:	308d883a 	add	r6,r6,r2
    6044:	30800015 	stw	r2,0(r6)
    6048:	003fac06 	br	5efc <__alt_data_end+0xfffd51bc>
    604c:	00c00504 	movi	r3,20
    6050:	19401536 	bltu	r3,r5,60a8 <_free_r+0x29c>
    6054:	28c01704 	addi	r3,r5,92
    6058:	18c7883a 	add	r3,r3,r3
    605c:	294016c4 	addi	r5,r5,91
    6060:	003fb406 	br	5f34 <__alt_data_end+0xfffd51f4>
    6064:	280bd0ba 	srai	r5,r5,2
    6068:	00c00044 	movi	r3,1
    606c:	38800117 	ldw	r2,4(r7)
    6070:	194a983a 	sll	r5,r3,r5
    6074:	2007883a 	mov	r3,r4
    6078:	2884b03a 	or	r2,r5,r2
    607c:	38800115 	stw	r2,4(r7)
    6080:	003fbb06 	br	5f70 <__alt_data_end+0xfffd5230>
    6084:	21800515 	stw	r6,20(r4)
    6088:	21800415 	stw	r6,16(r4)
    608c:	10c00054 	ori	r3,r2,1
    6090:	31c00315 	stw	r7,12(r6)
    6094:	31c00215 	stw	r7,8(r6)
    6098:	30c00115 	stw	r3,4(r6)
    609c:	308d883a 	add	r6,r6,r2
    60a0:	30800015 	stw	r2,0(r6)
    60a4:	003f9506 	br	5efc <__alt_data_end+0xfffd51bc>
    60a8:	00c01504 	movi	r3,84
    60ac:	19400536 	bltu	r3,r5,60c4 <_free_r+0x2b8>
    60b0:	100ad33a 	srli	r5,r2,12
    60b4:	28c01bc4 	addi	r3,r5,111
    60b8:	18c7883a 	add	r3,r3,r3
    60bc:	29401b84 	addi	r5,r5,110
    60c0:	003f9c06 	br	5f34 <__alt_data_end+0xfffd51f4>
    60c4:	00c05504 	movi	r3,340
    60c8:	19400536 	bltu	r3,r5,60e0 <_free_r+0x2d4>
    60cc:	100ad3fa 	srli	r5,r2,15
    60d0:	28c01e04 	addi	r3,r5,120
    60d4:	18c7883a 	add	r3,r3,r3
    60d8:	29401dc4 	addi	r5,r5,119
    60dc:	003f9506 	br	5f34 <__alt_data_end+0xfffd51f4>
    60e0:	00c15504 	movi	r3,1364
    60e4:	19400536 	bltu	r3,r5,60fc <_free_r+0x2f0>
    60e8:	100ad4ba 	srli	r5,r2,18
    60ec:	28c01f44 	addi	r3,r5,125
    60f0:	18c7883a 	add	r3,r3,r3
    60f4:	29401f04 	addi	r5,r5,124
    60f8:	003f8e06 	br	5f34 <__alt_data_end+0xfffd51f4>
    60fc:	00c03f84 	movi	r3,254
    6100:	01401f84 	movi	r5,126
    6104:	003f8b06 	br	5f34 <__alt_data_end+0xfffd51f4>
    6108:	10c00054 	ori	r3,r2,1
    610c:	30c00115 	stw	r3,4(r6)
    6110:	308d883a 	add	r6,r6,r2
    6114:	30800015 	stw	r2,0(r6)
    6118:	003f7806 	br	5efc <__alt_data_end+0xfffd51bc>

0000611c <__sfvwrite_r>:
    611c:	30800217 	ldw	r2,8(r6)
    6120:	10006726 	beq	r2,zero,62c0 <__sfvwrite_r+0x1a4>
    6124:	28c0030b 	ldhu	r3,12(r5)
    6128:	defff404 	addi	sp,sp,-48
    612c:	dd400715 	stw	r21,28(sp)
    6130:	dd000615 	stw	r20,24(sp)
    6134:	dc000215 	stw	r16,8(sp)
    6138:	dfc00b15 	stw	ra,44(sp)
    613c:	df000a15 	stw	fp,40(sp)
    6140:	ddc00915 	stw	r23,36(sp)
    6144:	dd800815 	stw	r22,32(sp)
    6148:	dcc00515 	stw	r19,20(sp)
    614c:	dc800415 	stw	r18,16(sp)
    6150:	dc400315 	stw	r17,12(sp)
    6154:	1880020c 	andi	r2,r3,8
    6158:	2821883a 	mov	r16,r5
    615c:	202b883a 	mov	r21,r4
    6160:	3029883a 	mov	r20,r6
    6164:	10002726 	beq	r2,zero,6204 <__sfvwrite_r+0xe8>
    6168:	28800417 	ldw	r2,16(r5)
    616c:	10002526 	beq	r2,zero,6204 <__sfvwrite_r+0xe8>
    6170:	1880008c 	andi	r2,r3,2
    6174:	a4400017 	ldw	r17,0(r20)
    6178:	10002a26 	beq	r2,zero,6224 <__sfvwrite_r+0x108>
    617c:	05a00034 	movhi	r22,32768
    6180:	0027883a 	mov	r19,zero
    6184:	0025883a 	mov	r18,zero
    6188:	b5bf0004 	addi	r22,r22,-1024
    618c:	980d883a 	mov	r6,r19
    6190:	a809883a 	mov	r4,r21
    6194:	90004626 	beq	r18,zero,62b0 <__sfvwrite_r+0x194>
    6198:	900f883a 	mov	r7,r18
    619c:	b480022e 	bgeu	r22,r18,61a8 <__sfvwrite_r+0x8c>
    61a0:	01e00034 	movhi	r7,32768
    61a4:	39ff0004 	addi	r7,r7,-1024
    61a8:	80800917 	ldw	r2,36(r16)
    61ac:	81400717 	ldw	r5,28(r16)
    61b0:	103ee83a 	callr	r2
    61b4:	00805a0e 	bge	zero,r2,6320 <__sfvwrite_r+0x204>
    61b8:	a0c00217 	ldw	r3,8(r20)
    61bc:	98a7883a 	add	r19,r19,r2
    61c0:	90a5c83a 	sub	r18,r18,r2
    61c4:	1885c83a 	sub	r2,r3,r2
    61c8:	a0800215 	stw	r2,8(r20)
    61cc:	103fef1e 	bne	r2,zero,618c <__alt_data_end+0xfffd544c>
    61d0:	0005883a 	mov	r2,zero
    61d4:	dfc00b17 	ldw	ra,44(sp)
    61d8:	df000a17 	ldw	fp,40(sp)
    61dc:	ddc00917 	ldw	r23,36(sp)
    61e0:	dd800817 	ldw	r22,32(sp)
    61e4:	dd400717 	ldw	r21,28(sp)
    61e8:	dd000617 	ldw	r20,24(sp)
    61ec:	dcc00517 	ldw	r19,20(sp)
    61f0:	dc800417 	ldw	r18,16(sp)
    61f4:	dc400317 	ldw	r17,12(sp)
    61f8:	dc000217 	ldw	r16,8(sp)
    61fc:	dec00c04 	addi	sp,sp,48
    6200:	f800283a 	ret
    6204:	800b883a 	mov	r5,r16
    6208:	a809883a 	mov	r4,r21
    620c:	0003c8c0 	call	3c8c <__swsetup_r>
    6210:	1000ee1e 	bne	r2,zero,65cc <__sfvwrite_r+0x4b0>
    6214:	80c0030b 	ldhu	r3,12(r16)
    6218:	a4400017 	ldw	r17,0(r20)
    621c:	1880008c 	andi	r2,r3,2
    6220:	103fd61e 	bne	r2,zero,617c <__alt_data_end+0xfffd543c>
    6224:	1880004c 	andi	r2,r3,1
    6228:	1000421e 	bne	r2,zero,6334 <__sfvwrite_r+0x218>
    622c:	0039883a 	mov	fp,zero
    6230:	0025883a 	mov	r18,zero
    6234:	90001a26 	beq	r18,zero,62a0 <__sfvwrite_r+0x184>
    6238:	1880800c 	andi	r2,r3,512
    623c:	84c00217 	ldw	r19,8(r16)
    6240:	10002126 	beq	r2,zero,62c8 <__sfvwrite_r+0x1ac>
    6244:	982f883a 	mov	r23,r19
    6248:	94c09636 	bltu	r18,r19,64a4 <__sfvwrite_r+0x388>
    624c:	1881200c 	andi	r2,r3,1152
    6250:	1000a11e 	bne	r2,zero,64d8 <__sfvwrite_r+0x3bc>
    6254:	81000017 	ldw	r4,0(r16)
    6258:	b80d883a 	mov	r6,r23
    625c:	e00b883a 	mov	r5,fp
    6260:	0006ae80 	call	6ae8 <memmove>
    6264:	80c00217 	ldw	r3,8(r16)
    6268:	81000017 	ldw	r4,0(r16)
    626c:	9005883a 	mov	r2,r18
    6270:	1ce7c83a 	sub	r19,r3,r19
    6274:	25cf883a 	add	r7,r4,r23
    6278:	84c00215 	stw	r19,8(r16)
    627c:	81c00015 	stw	r7,0(r16)
    6280:	a0c00217 	ldw	r3,8(r20)
    6284:	e0b9883a 	add	fp,fp,r2
    6288:	90a5c83a 	sub	r18,r18,r2
    628c:	18a7c83a 	sub	r19,r3,r2
    6290:	a4c00215 	stw	r19,8(r20)
    6294:	983fce26 	beq	r19,zero,61d0 <__alt_data_end+0xfffd5490>
    6298:	80c0030b 	ldhu	r3,12(r16)
    629c:	903fe61e 	bne	r18,zero,6238 <__alt_data_end+0xfffd54f8>
    62a0:	8f000017 	ldw	fp,0(r17)
    62a4:	8c800117 	ldw	r18,4(r17)
    62a8:	8c400204 	addi	r17,r17,8
    62ac:	003fe106 	br	6234 <__alt_data_end+0xfffd54f4>
    62b0:	8cc00017 	ldw	r19,0(r17)
    62b4:	8c800117 	ldw	r18,4(r17)
    62b8:	8c400204 	addi	r17,r17,8
    62bc:	003fb306 	br	618c <__alt_data_end+0xfffd544c>
    62c0:	0005883a 	mov	r2,zero
    62c4:	f800283a 	ret
    62c8:	81000017 	ldw	r4,0(r16)
    62cc:	80800417 	ldw	r2,16(r16)
    62d0:	11005a36 	bltu	r2,r4,643c <__sfvwrite_r+0x320>
    62d4:	85c00517 	ldw	r23,20(r16)
    62d8:	95c05836 	bltu	r18,r23,643c <__sfvwrite_r+0x320>
    62dc:	00a00034 	movhi	r2,32768
    62e0:	10bfffc4 	addi	r2,r2,-1
    62e4:	9009883a 	mov	r4,r18
    62e8:	1480012e 	bgeu	r2,r18,62f0 <__sfvwrite_r+0x1d4>
    62ec:	1009883a 	mov	r4,r2
    62f0:	b80b883a 	mov	r5,r23
    62f4:	0000a0c0 	call	a0c <__divsi3>
    62f8:	b80b883a 	mov	r5,r23
    62fc:	1009883a 	mov	r4,r2
    6300:	0000bc00 	call	bc0 <__mulsi3>
    6304:	81400717 	ldw	r5,28(r16)
    6308:	80c00917 	ldw	r3,36(r16)
    630c:	100f883a 	mov	r7,r2
    6310:	e00d883a 	mov	r6,fp
    6314:	a809883a 	mov	r4,r21
    6318:	183ee83a 	callr	r3
    631c:	00bfd816 	blt	zero,r2,6280 <__alt_data_end+0xfffd5540>
    6320:	8080030b 	ldhu	r2,12(r16)
    6324:	10801014 	ori	r2,r2,64
    6328:	8080030d 	sth	r2,12(r16)
    632c:	00bfffc4 	movi	r2,-1
    6330:	003fa806 	br	61d4 <__alt_data_end+0xfffd5494>
    6334:	0027883a 	mov	r19,zero
    6338:	0011883a 	mov	r8,zero
    633c:	0039883a 	mov	fp,zero
    6340:	0025883a 	mov	r18,zero
    6344:	90001f26 	beq	r18,zero,63c4 <__sfvwrite_r+0x2a8>
    6348:	40005a26 	beq	r8,zero,64b4 <__sfvwrite_r+0x398>
    634c:	982d883a 	mov	r22,r19
    6350:	94c0012e 	bgeu	r18,r19,6358 <__sfvwrite_r+0x23c>
    6354:	902d883a 	mov	r22,r18
    6358:	81000017 	ldw	r4,0(r16)
    635c:	80800417 	ldw	r2,16(r16)
    6360:	b02f883a 	mov	r23,r22
    6364:	81c00517 	ldw	r7,20(r16)
    6368:	1100032e 	bgeu	r2,r4,6378 <__sfvwrite_r+0x25c>
    636c:	80c00217 	ldw	r3,8(r16)
    6370:	38c7883a 	add	r3,r7,r3
    6374:	1d801816 	blt	r3,r22,63d8 <__sfvwrite_r+0x2bc>
    6378:	b1c03e16 	blt	r22,r7,6474 <__sfvwrite_r+0x358>
    637c:	80800917 	ldw	r2,36(r16)
    6380:	81400717 	ldw	r5,28(r16)
    6384:	e00d883a 	mov	r6,fp
    6388:	da000115 	stw	r8,4(sp)
    638c:	a809883a 	mov	r4,r21
    6390:	103ee83a 	callr	r2
    6394:	102f883a 	mov	r23,r2
    6398:	da000117 	ldw	r8,4(sp)
    639c:	00bfe00e 	bge	zero,r2,6320 <__alt_data_end+0xfffd55e0>
    63a0:	9de7c83a 	sub	r19,r19,r23
    63a4:	98001f26 	beq	r19,zero,6424 <__sfvwrite_r+0x308>
    63a8:	a0800217 	ldw	r2,8(r20)
    63ac:	e5f9883a 	add	fp,fp,r23
    63b0:	95e5c83a 	sub	r18,r18,r23
    63b4:	15efc83a 	sub	r23,r2,r23
    63b8:	a5c00215 	stw	r23,8(r20)
    63bc:	b83f8426 	beq	r23,zero,61d0 <__alt_data_end+0xfffd5490>
    63c0:	903fe11e 	bne	r18,zero,6348 <__alt_data_end+0xfffd5608>
    63c4:	8f000017 	ldw	fp,0(r17)
    63c8:	8c800117 	ldw	r18,4(r17)
    63cc:	0011883a 	mov	r8,zero
    63d0:	8c400204 	addi	r17,r17,8
    63d4:	003fdb06 	br	6344 <__alt_data_end+0xfffd5604>
    63d8:	180d883a 	mov	r6,r3
    63dc:	e00b883a 	mov	r5,fp
    63e0:	da000115 	stw	r8,4(sp)
    63e4:	d8c00015 	stw	r3,0(sp)
    63e8:	0006ae80 	call	6ae8 <memmove>
    63ec:	d8c00017 	ldw	r3,0(sp)
    63f0:	80800017 	ldw	r2,0(r16)
    63f4:	800b883a 	mov	r5,r16
    63f8:	a809883a 	mov	r4,r21
    63fc:	10c5883a 	add	r2,r2,r3
    6400:	80800015 	stw	r2,0(r16)
    6404:	d8c00015 	stw	r3,0(sp)
    6408:	00058ac0 	call	58ac <_fflush_r>
    640c:	d8c00017 	ldw	r3,0(sp)
    6410:	da000117 	ldw	r8,4(sp)
    6414:	103fc21e 	bne	r2,zero,6320 <__alt_data_end+0xfffd55e0>
    6418:	182f883a 	mov	r23,r3
    641c:	9de7c83a 	sub	r19,r19,r23
    6420:	983fe11e 	bne	r19,zero,63a8 <__alt_data_end+0xfffd5668>
    6424:	800b883a 	mov	r5,r16
    6428:	a809883a 	mov	r4,r21
    642c:	00058ac0 	call	58ac <_fflush_r>
    6430:	103fbb1e 	bne	r2,zero,6320 <__alt_data_end+0xfffd55e0>
    6434:	0011883a 	mov	r8,zero
    6438:	003fdb06 	br	63a8 <__alt_data_end+0xfffd5668>
    643c:	94c0012e 	bgeu	r18,r19,6444 <__sfvwrite_r+0x328>
    6440:	9027883a 	mov	r19,r18
    6444:	980d883a 	mov	r6,r19
    6448:	e00b883a 	mov	r5,fp
    644c:	0006ae80 	call	6ae8 <memmove>
    6450:	80800217 	ldw	r2,8(r16)
    6454:	80c00017 	ldw	r3,0(r16)
    6458:	14c5c83a 	sub	r2,r2,r19
    645c:	1cc7883a 	add	r3,r3,r19
    6460:	80800215 	stw	r2,8(r16)
    6464:	80c00015 	stw	r3,0(r16)
    6468:	10004326 	beq	r2,zero,6578 <__sfvwrite_r+0x45c>
    646c:	9805883a 	mov	r2,r19
    6470:	003f8306 	br	6280 <__alt_data_end+0xfffd5540>
    6474:	b00d883a 	mov	r6,r22
    6478:	e00b883a 	mov	r5,fp
    647c:	da000115 	stw	r8,4(sp)
    6480:	0006ae80 	call	6ae8 <memmove>
    6484:	80800217 	ldw	r2,8(r16)
    6488:	80c00017 	ldw	r3,0(r16)
    648c:	da000117 	ldw	r8,4(sp)
    6490:	1585c83a 	sub	r2,r2,r22
    6494:	1dad883a 	add	r22,r3,r22
    6498:	80800215 	stw	r2,8(r16)
    649c:	85800015 	stw	r22,0(r16)
    64a0:	003fbf06 	br	63a0 <__alt_data_end+0xfffd5660>
    64a4:	81000017 	ldw	r4,0(r16)
    64a8:	9027883a 	mov	r19,r18
    64ac:	902f883a 	mov	r23,r18
    64b0:	003f6906 	br	6258 <__alt_data_end+0xfffd5518>
    64b4:	900d883a 	mov	r6,r18
    64b8:	01400284 	movi	r5,10
    64bc:	e009883a 	mov	r4,fp
    64c0:	0006a040 	call	6a04 <memchr>
    64c4:	10003e26 	beq	r2,zero,65c0 <__sfvwrite_r+0x4a4>
    64c8:	10800044 	addi	r2,r2,1
    64cc:	1727c83a 	sub	r19,r2,fp
    64d0:	02000044 	movi	r8,1
    64d4:	003f9d06 	br	634c <__alt_data_end+0xfffd560c>
    64d8:	80800517 	ldw	r2,20(r16)
    64dc:	81400417 	ldw	r5,16(r16)
    64e0:	81c00017 	ldw	r7,0(r16)
    64e4:	10a7883a 	add	r19,r2,r2
    64e8:	9885883a 	add	r2,r19,r2
    64ec:	1026d7fa 	srli	r19,r2,31
    64f0:	396dc83a 	sub	r22,r7,r5
    64f4:	b1000044 	addi	r4,r22,1
    64f8:	9885883a 	add	r2,r19,r2
    64fc:	1027d07a 	srai	r19,r2,1
    6500:	2485883a 	add	r2,r4,r18
    6504:	980d883a 	mov	r6,r19
    6508:	9880022e 	bgeu	r19,r2,6514 <__sfvwrite_r+0x3f8>
    650c:	1027883a 	mov	r19,r2
    6510:	100d883a 	mov	r6,r2
    6514:	18c1000c 	andi	r3,r3,1024
    6518:	18001c26 	beq	r3,zero,658c <__sfvwrite_r+0x470>
    651c:	300b883a 	mov	r5,r6
    6520:	a809883a 	mov	r4,r21
    6524:	0000c100 	call	c10 <_malloc_r>
    6528:	102f883a 	mov	r23,r2
    652c:	10002926 	beq	r2,zero,65d4 <__sfvwrite_r+0x4b8>
    6530:	81400417 	ldw	r5,16(r16)
    6534:	b00d883a 	mov	r6,r22
    6538:	1009883a 	mov	r4,r2
    653c:	000141c0 	call	141c <memcpy>
    6540:	8080030b 	ldhu	r2,12(r16)
    6544:	00fedfc4 	movi	r3,-1153
    6548:	10c4703a 	and	r2,r2,r3
    654c:	10802014 	ori	r2,r2,128
    6550:	8080030d 	sth	r2,12(r16)
    6554:	bd89883a 	add	r4,r23,r22
    6558:	9d8fc83a 	sub	r7,r19,r22
    655c:	85c00415 	stw	r23,16(r16)
    6560:	84c00515 	stw	r19,20(r16)
    6564:	81000015 	stw	r4,0(r16)
    6568:	9027883a 	mov	r19,r18
    656c:	81c00215 	stw	r7,8(r16)
    6570:	902f883a 	mov	r23,r18
    6574:	003f3806 	br	6258 <__alt_data_end+0xfffd5518>
    6578:	800b883a 	mov	r5,r16
    657c:	a809883a 	mov	r4,r21
    6580:	00058ac0 	call	58ac <_fflush_r>
    6584:	103fb926 	beq	r2,zero,646c <__alt_data_end+0xfffd572c>
    6588:	003f6506 	br	6320 <__alt_data_end+0xfffd55e0>
    658c:	a809883a 	mov	r4,r21
    6590:	0007e640 	call	7e64 <_realloc_r>
    6594:	102f883a 	mov	r23,r2
    6598:	103fee1e 	bne	r2,zero,6554 <__alt_data_end+0xfffd5814>
    659c:	81400417 	ldw	r5,16(r16)
    65a0:	a809883a 	mov	r4,r21
    65a4:	0005e0c0 	call	5e0c <_free_r>
    65a8:	8080030b 	ldhu	r2,12(r16)
    65ac:	00ffdfc4 	movi	r3,-129
    65b0:	1884703a 	and	r2,r3,r2
    65b4:	00c00304 	movi	r3,12
    65b8:	a8c00015 	stw	r3,0(r21)
    65bc:	003f5906 	br	6324 <__alt_data_end+0xfffd55e4>
    65c0:	94c00044 	addi	r19,r18,1
    65c4:	02000044 	movi	r8,1
    65c8:	003f6006 	br	634c <__alt_data_end+0xfffd560c>
    65cc:	00bfffc4 	movi	r2,-1
    65d0:	003f0006 	br	61d4 <__alt_data_end+0xfffd5494>
    65d4:	00800304 	movi	r2,12
    65d8:	a8800015 	stw	r2,0(r21)
    65dc:	8080030b 	ldhu	r2,12(r16)
    65e0:	003f5006 	br	6324 <__alt_data_end+0xfffd55e4>

000065e4 <_fwalk>:
    65e4:	defff704 	addi	sp,sp,-36
    65e8:	dd000415 	stw	r20,16(sp)
    65ec:	dfc00815 	stw	ra,32(sp)
    65f0:	ddc00715 	stw	r23,28(sp)
    65f4:	dd800615 	stw	r22,24(sp)
    65f8:	dd400515 	stw	r21,20(sp)
    65fc:	dcc00315 	stw	r19,12(sp)
    6600:	dc800215 	stw	r18,8(sp)
    6604:	dc400115 	stw	r17,4(sp)
    6608:	dc000015 	stw	r16,0(sp)
    660c:	2500b804 	addi	r20,r4,736
    6610:	a0002326 	beq	r20,zero,66a0 <_fwalk+0xbc>
    6614:	282b883a 	mov	r21,r5
    6618:	002f883a 	mov	r23,zero
    661c:	05800044 	movi	r22,1
    6620:	04ffffc4 	movi	r19,-1
    6624:	a4400117 	ldw	r17,4(r20)
    6628:	a4800217 	ldw	r18,8(r20)
    662c:	8c7fffc4 	addi	r17,r17,-1
    6630:	88000d16 	blt	r17,zero,6668 <_fwalk+0x84>
    6634:	94000304 	addi	r16,r18,12
    6638:	94800384 	addi	r18,r18,14
    663c:	8080000b 	ldhu	r2,0(r16)
    6640:	8c7fffc4 	addi	r17,r17,-1
    6644:	813ffd04 	addi	r4,r16,-12
    6648:	b080042e 	bgeu	r22,r2,665c <_fwalk+0x78>
    664c:	9080000f 	ldh	r2,0(r18)
    6650:	14c00226 	beq	r2,r19,665c <_fwalk+0x78>
    6654:	a83ee83a 	callr	r21
    6658:	b8aeb03a 	or	r23,r23,r2
    665c:	84001a04 	addi	r16,r16,104
    6660:	94801a04 	addi	r18,r18,104
    6664:	8cfff51e 	bne	r17,r19,663c <__alt_data_end+0xfffd58fc>
    6668:	a5000017 	ldw	r20,0(r20)
    666c:	a03fed1e 	bne	r20,zero,6624 <__alt_data_end+0xfffd58e4>
    6670:	b805883a 	mov	r2,r23
    6674:	dfc00817 	ldw	ra,32(sp)
    6678:	ddc00717 	ldw	r23,28(sp)
    667c:	dd800617 	ldw	r22,24(sp)
    6680:	dd400517 	ldw	r21,20(sp)
    6684:	dd000417 	ldw	r20,16(sp)
    6688:	dcc00317 	ldw	r19,12(sp)
    668c:	dc800217 	ldw	r18,8(sp)
    6690:	dc400117 	ldw	r17,4(sp)
    6694:	dc000017 	ldw	r16,0(sp)
    6698:	dec00904 	addi	sp,sp,36
    669c:	f800283a 	ret
    66a0:	002f883a 	mov	r23,zero
    66a4:	003ff206 	br	6670 <__alt_data_end+0xfffd5930>

000066a8 <_fwalk_reent>:
    66a8:	defff704 	addi	sp,sp,-36
    66ac:	dd000415 	stw	r20,16(sp)
    66b0:	dfc00815 	stw	ra,32(sp)
    66b4:	ddc00715 	stw	r23,28(sp)
    66b8:	dd800615 	stw	r22,24(sp)
    66bc:	dd400515 	stw	r21,20(sp)
    66c0:	dcc00315 	stw	r19,12(sp)
    66c4:	dc800215 	stw	r18,8(sp)
    66c8:	dc400115 	stw	r17,4(sp)
    66cc:	dc000015 	stw	r16,0(sp)
    66d0:	2500b804 	addi	r20,r4,736
    66d4:	a0002326 	beq	r20,zero,6764 <_fwalk_reent+0xbc>
    66d8:	282b883a 	mov	r21,r5
    66dc:	2027883a 	mov	r19,r4
    66e0:	002f883a 	mov	r23,zero
    66e4:	05800044 	movi	r22,1
    66e8:	04bfffc4 	movi	r18,-1
    66ec:	a4400117 	ldw	r17,4(r20)
    66f0:	a4000217 	ldw	r16,8(r20)
    66f4:	8c7fffc4 	addi	r17,r17,-1
    66f8:	88000c16 	blt	r17,zero,672c <_fwalk_reent+0x84>
    66fc:	84000304 	addi	r16,r16,12
    6700:	8080000b 	ldhu	r2,0(r16)
    6704:	8c7fffc4 	addi	r17,r17,-1
    6708:	817ffd04 	addi	r5,r16,-12
    670c:	b080052e 	bgeu	r22,r2,6724 <_fwalk_reent+0x7c>
    6710:	8080008f 	ldh	r2,2(r16)
    6714:	9809883a 	mov	r4,r19
    6718:	14800226 	beq	r2,r18,6724 <_fwalk_reent+0x7c>
    671c:	a83ee83a 	callr	r21
    6720:	b8aeb03a 	or	r23,r23,r2
    6724:	84001a04 	addi	r16,r16,104
    6728:	8cbff51e 	bne	r17,r18,6700 <__alt_data_end+0xfffd59c0>
    672c:	a5000017 	ldw	r20,0(r20)
    6730:	a03fee1e 	bne	r20,zero,66ec <__alt_data_end+0xfffd59ac>
    6734:	b805883a 	mov	r2,r23
    6738:	dfc00817 	ldw	ra,32(sp)
    673c:	ddc00717 	ldw	r23,28(sp)
    6740:	dd800617 	ldw	r22,24(sp)
    6744:	dd400517 	ldw	r21,20(sp)
    6748:	dd000417 	ldw	r20,16(sp)
    674c:	dcc00317 	ldw	r19,12(sp)
    6750:	dc800217 	ldw	r18,8(sp)
    6754:	dc400117 	ldw	r17,4(sp)
    6758:	dc000017 	ldw	r16,0(sp)
    675c:	dec00904 	addi	sp,sp,36
    6760:	f800283a 	ret
    6764:	002f883a 	mov	r23,zero
    6768:	003ff206 	br	6734 <__alt_data_end+0xfffd59f4>

0000676c <_setlocale_r>:
    676c:	30001b26 	beq	r6,zero,67dc <_setlocale_r+0x70>
    6770:	014000b4 	movhi	r5,2
    6774:	defffe04 	addi	sp,sp,-8
    6778:	29633904 	addi	r5,r5,-29468
    677c:	3009883a 	mov	r4,r6
    6780:	dc000015 	stw	r16,0(sp)
    6784:	dfc00115 	stw	ra,4(sp)
    6788:	3021883a 	mov	r16,r6
    678c:	00085780 	call	8578 <strcmp>
    6790:	1000061e 	bne	r2,zero,67ac <_setlocale_r+0x40>
    6794:	008000b4 	movhi	r2,2
    6798:	10a33804 	addi	r2,r2,-29472
    679c:	dfc00117 	ldw	ra,4(sp)
    67a0:	dc000017 	ldw	r16,0(sp)
    67a4:	dec00204 	addi	sp,sp,8
    67a8:	f800283a 	ret
    67ac:	014000b4 	movhi	r5,2
    67b0:	29633804 	addi	r5,r5,-29472
    67b4:	8009883a 	mov	r4,r16
    67b8:	00085780 	call	8578 <strcmp>
    67bc:	103ff526 	beq	r2,zero,6794 <__alt_data_end+0xfffd5a54>
    67c0:	014000b4 	movhi	r5,2
    67c4:	29632304 	addi	r5,r5,-29556
    67c8:	8009883a 	mov	r4,r16
    67cc:	00085780 	call	8578 <strcmp>
    67d0:	103ff026 	beq	r2,zero,6794 <__alt_data_end+0xfffd5a54>
    67d4:	0005883a 	mov	r2,zero
    67d8:	003ff006 	br	679c <__alt_data_end+0xfffd5a5c>
    67dc:	008000b4 	movhi	r2,2
    67e0:	10a33804 	addi	r2,r2,-29472
    67e4:	f800283a 	ret

000067e8 <__locale_charset>:
    67e8:	008000b4 	movhi	r2,2
    67ec:	10a63904 	addi	r2,r2,-26396
    67f0:	f800283a 	ret

000067f4 <__locale_mb_cur_max>:
    67f4:	008000b4 	movhi	r2,2
    67f8:	10aae304 	addi	r2,r2,-21620
    67fc:	10800017 	ldw	r2,0(r2)
    6800:	f800283a 	ret

00006804 <__locale_msgcharset>:
    6804:	008000b4 	movhi	r2,2
    6808:	10a63104 	addi	r2,r2,-26428
    680c:	f800283a 	ret

00006810 <__locale_cjk_lang>:
    6810:	0005883a 	mov	r2,zero
    6814:	f800283a 	ret

00006818 <_localeconv_r>:
    6818:	008000b4 	movhi	r2,2
    681c:	10a64104 	addi	r2,r2,-26364
    6820:	f800283a 	ret

00006824 <setlocale>:
    6824:	008000b4 	movhi	r2,2
    6828:	10aae204 	addi	r2,r2,-21624
    682c:	280d883a 	mov	r6,r5
    6830:	200b883a 	mov	r5,r4
    6834:	11000017 	ldw	r4,0(r2)
    6838:	000676c1 	jmpi	676c <_setlocale_r>

0000683c <localeconv>:
    683c:	008000b4 	movhi	r2,2
    6840:	10a64104 	addi	r2,r2,-26364
    6844:	f800283a 	ret

00006848 <__smakebuf_r>:
    6848:	2880030b 	ldhu	r2,12(r5)
    684c:	10c0008c 	andi	r3,r2,2
    6850:	1800411e 	bne	r3,zero,6958 <__smakebuf_r+0x110>
    6854:	deffec04 	addi	sp,sp,-80
    6858:	dc000f15 	stw	r16,60(sp)
    685c:	2821883a 	mov	r16,r5
    6860:	2940038f 	ldh	r5,14(r5)
    6864:	dc401015 	stw	r17,64(sp)
    6868:	dfc01315 	stw	ra,76(sp)
    686c:	dcc01215 	stw	r19,72(sp)
    6870:	dc801115 	stw	r18,68(sp)
    6874:	2023883a 	mov	r17,r4
    6878:	28001c16 	blt	r5,zero,68ec <__smakebuf_r+0xa4>
    687c:	d80d883a 	mov	r6,sp
    6880:	000a3400 	call	a340 <_fstat_r>
    6884:	10001816 	blt	r2,zero,68e8 <__smakebuf_r+0xa0>
    6888:	d8800117 	ldw	r2,4(sp)
    688c:	00e00014 	movui	r3,32768
    6890:	10bc000c 	andi	r2,r2,61440
    6894:	14c80020 	cmpeqi	r19,r2,8192
    6898:	10c03726 	beq	r2,r3,6978 <__smakebuf_r+0x130>
    689c:	80c0030b 	ldhu	r3,12(r16)
    68a0:	18c20014 	ori	r3,r3,2048
    68a4:	80c0030d 	sth	r3,12(r16)
    68a8:	00c80004 	movi	r3,8192
    68ac:	10c0521e 	bne	r2,r3,69f8 <__smakebuf_r+0x1b0>
    68b0:	8140038f 	ldh	r5,14(r16)
    68b4:	8809883a 	mov	r4,r17
    68b8:	000a39c0 	call	a39c <_isatty_r>
    68bc:	10004c26 	beq	r2,zero,69f0 <__smakebuf_r+0x1a8>
    68c0:	8080030b 	ldhu	r2,12(r16)
    68c4:	80c010c4 	addi	r3,r16,67
    68c8:	80c00015 	stw	r3,0(r16)
    68cc:	10800054 	ori	r2,r2,1
    68d0:	8080030d 	sth	r2,12(r16)
    68d4:	00800044 	movi	r2,1
    68d8:	80c00415 	stw	r3,16(r16)
    68dc:	80800515 	stw	r2,20(r16)
    68e0:	04810004 	movi	r18,1024
    68e4:	00000706 	br	6904 <__smakebuf_r+0xbc>
    68e8:	8080030b 	ldhu	r2,12(r16)
    68ec:	10c0200c 	andi	r3,r2,128
    68f0:	18001f1e 	bne	r3,zero,6970 <__smakebuf_r+0x128>
    68f4:	04810004 	movi	r18,1024
    68f8:	10820014 	ori	r2,r2,2048
    68fc:	8080030d 	sth	r2,12(r16)
    6900:	0027883a 	mov	r19,zero
    6904:	900b883a 	mov	r5,r18
    6908:	8809883a 	mov	r4,r17
    690c:	0000c100 	call	c10 <_malloc_r>
    6910:	10002c26 	beq	r2,zero,69c4 <__smakebuf_r+0x17c>
    6914:	80c0030b 	ldhu	r3,12(r16)
    6918:	01000034 	movhi	r4,0
    691c:	21165004 	addi	r4,r4,22848
    6920:	89000f15 	stw	r4,60(r17)
    6924:	18c02014 	ori	r3,r3,128
    6928:	80c0030d 	sth	r3,12(r16)
    692c:	80800015 	stw	r2,0(r16)
    6930:	80800415 	stw	r2,16(r16)
    6934:	84800515 	stw	r18,20(r16)
    6938:	98001a1e 	bne	r19,zero,69a4 <__smakebuf_r+0x15c>
    693c:	dfc01317 	ldw	ra,76(sp)
    6940:	dcc01217 	ldw	r19,72(sp)
    6944:	dc801117 	ldw	r18,68(sp)
    6948:	dc401017 	ldw	r17,64(sp)
    694c:	dc000f17 	ldw	r16,60(sp)
    6950:	dec01404 	addi	sp,sp,80
    6954:	f800283a 	ret
    6958:	288010c4 	addi	r2,r5,67
    695c:	28800015 	stw	r2,0(r5)
    6960:	28800415 	stw	r2,16(r5)
    6964:	00800044 	movi	r2,1
    6968:	28800515 	stw	r2,20(r5)
    696c:	f800283a 	ret
    6970:	04801004 	movi	r18,64
    6974:	003fe006 	br	68f8 <__alt_data_end+0xfffd5bb8>
    6978:	81000a17 	ldw	r4,40(r16)
    697c:	00c00074 	movhi	r3,1
    6980:	18e14504 	addi	r3,r3,-31468
    6984:	20ffc51e 	bne	r4,r3,689c <__alt_data_end+0xfffd5b5c>
    6988:	8080030b 	ldhu	r2,12(r16)
    698c:	04810004 	movi	r18,1024
    6990:	84801315 	stw	r18,76(r16)
    6994:	1484b03a 	or	r2,r2,r18
    6998:	8080030d 	sth	r2,12(r16)
    699c:	0027883a 	mov	r19,zero
    69a0:	003fd806 	br	6904 <__alt_data_end+0xfffd5bc4>
    69a4:	8140038f 	ldh	r5,14(r16)
    69a8:	8809883a 	mov	r4,r17
    69ac:	000a39c0 	call	a39c <_isatty_r>
    69b0:	103fe226 	beq	r2,zero,693c <__alt_data_end+0xfffd5bfc>
    69b4:	8080030b 	ldhu	r2,12(r16)
    69b8:	10800054 	ori	r2,r2,1
    69bc:	8080030d 	sth	r2,12(r16)
    69c0:	003fde06 	br	693c <__alt_data_end+0xfffd5bfc>
    69c4:	8080030b 	ldhu	r2,12(r16)
    69c8:	10c0800c 	andi	r3,r2,512
    69cc:	183fdb1e 	bne	r3,zero,693c <__alt_data_end+0xfffd5bfc>
    69d0:	10800094 	ori	r2,r2,2
    69d4:	80c010c4 	addi	r3,r16,67
    69d8:	8080030d 	sth	r2,12(r16)
    69dc:	00800044 	movi	r2,1
    69e0:	80c00015 	stw	r3,0(r16)
    69e4:	80c00415 	stw	r3,16(r16)
    69e8:	80800515 	stw	r2,20(r16)
    69ec:	003fd306 	br	693c <__alt_data_end+0xfffd5bfc>
    69f0:	04810004 	movi	r18,1024
    69f4:	003fc306 	br	6904 <__alt_data_end+0xfffd5bc4>
    69f8:	0027883a 	mov	r19,zero
    69fc:	04810004 	movi	r18,1024
    6a00:	003fc006 	br	6904 <__alt_data_end+0xfffd5bc4>

00006a04 <memchr>:
    6a04:	208000cc 	andi	r2,r4,3
    6a08:	280f883a 	mov	r7,r5
    6a0c:	10003426 	beq	r2,zero,6ae0 <memchr+0xdc>
    6a10:	30bfffc4 	addi	r2,r6,-1
    6a14:	30001a26 	beq	r6,zero,6a80 <memchr+0x7c>
    6a18:	20c00003 	ldbu	r3,0(r4)
    6a1c:	29803fcc 	andi	r6,r5,255
    6a20:	30c0051e 	bne	r6,r3,6a38 <memchr+0x34>
    6a24:	00001806 	br	6a88 <memchr+0x84>
    6a28:	10001526 	beq	r2,zero,6a80 <memchr+0x7c>
    6a2c:	20c00003 	ldbu	r3,0(r4)
    6a30:	10bfffc4 	addi	r2,r2,-1
    6a34:	30c01426 	beq	r6,r3,6a88 <memchr+0x84>
    6a38:	21000044 	addi	r4,r4,1
    6a3c:	20c000cc 	andi	r3,r4,3
    6a40:	183ff91e 	bne	r3,zero,6a28 <__alt_data_end+0xfffd5ce8>
    6a44:	020000c4 	movi	r8,3
    6a48:	40801136 	bltu	r8,r2,6a90 <memchr+0x8c>
    6a4c:	10000c26 	beq	r2,zero,6a80 <memchr+0x7c>
    6a50:	20c00003 	ldbu	r3,0(r4)
    6a54:	29403fcc 	andi	r5,r5,255
    6a58:	28c00b26 	beq	r5,r3,6a88 <memchr+0x84>
    6a5c:	20c00044 	addi	r3,r4,1
    6a60:	39803fcc 	andi	r6,r7,255
    6a64:	2089883a 	add	r4,r4,r2
    6a68:	00000306 	br	6a78 <memchr+0x74>
    6a6c:	18c00044 	addi	r3,r3,1
    6a70:	197fffc3 	ldbu	r5,-1(r3)
    6a74:	31400526 	beq	r6,r5,6a8c <memchr+0x88>
    6a78:	1805883a 	mov	r2,r3
    6a7c:	20fffb1e 	bne	r4,r3,6a6c <__alt_data_end+0xfffd5d2c>
    6a80:	0005883a 	mov	r2,zero
    6a84:	f800283a 	ret
    6a88:	2005883a 	mov	r2,r4
    6a8c:	f800283a 	ret
    6a90:	28c03fcc 	andi	r3,r5,255
    6a94:	1812923a 	slli	r9,r3,8
    6a98:	02ffbff4 	movhi	r11,65279
    6a9c:	02a02074 	movhi	r10,32897
    6aa0:	48d2b03a 	or	r9,r9,r3
    6aa4:	4806943a 	slli	r3,r9,16
    6aa8:	5affbfc4 	addi	r11,r11,-257
    6aac:	52a02004 	addi	r10,r10,-32640
    6ab0:	48d2b03a 	or	r9,r9,r3
    6ab4:	20c00017 	ldw	r3,0(r4)
    6ab8:	48c6f03a 	xor	r3,r9,r3
    6abc:	1acd883a 	add	r6,r3,r11
    6ac0:	00c6303a 	nor	r3,zero,r3
    6ac4:	30c6703a 	and	r3,r6,r3
    6ac8:	1a86703a 	and	r3,r3,r10
    6acc:	183fe01e 	bne	r3,zero,6a50 <__alt_data_end+0xfffd5d10>
    6ad0:	10bfff04 	addi	r2,r2,-4
    6ad4:	21000104 	addi	r4,r4,4
    6ad8:	40bff636 	bltu	r8,r2,6ab4 <__alt_data_end+0xfffd5d74>
    6adc:	003fdb06 	br	6a4c <__alt_data_end+0xfffd5d0c>
    6ae0:	3005883a 	mov	r2,r6
    6ae4:	003fd706 	br	6a44 <__alt_data_end+0xfffd5d04>

00006ae8 <memmove>:
    6ae8:	2005883a 	mov	r2,r4
    6aec:	29000b2e 	bgeu	r5,r4,6b1c <memmove+0x34>
    6af0:	298f883a 	add	r7,r5,r6
    6af4:	21c0092e 	bgeu	r4,r7,6b1c <memmove+0x34>
    6af8:	2187883a 	add	r3,r4,r6
    6afc:	198bc83a 	sub	r5,r3,r6
    6b00:	30004826 	beq	r6,zero,6c24 <memmove+0x13c>
    6b04:	39ffffc4 	addi	r7,r7,-1
    6b08:	39000003 	ldbu	r4,0(r7)
    6b0c:	18ffffc4 	addi	r3,r3,-1
    6b10:	19000005 	stb	r4,0(r3)
    6b14:	28fffb1e 	bne	r5,r3,6b04 <__alt_data_end+0xfffd5dc4>
    6b18:	f800283a 	ret
    6b1c:	00c003c4 	movi	r3,15
    6b20:	1980412e 	bgeu	r3,r6,6c28 <memmove+0x140>
    6b24:	2886b03a 	or	r3,r5,r2
    6b28:	18c000cc 	andi	r3,r3,3
    6b2c:	1800401e 	bne	r3,zero,6c30 <memmove+0x148>
    6b30:	33fffc04 	addi	r15,r6,-16
    6b34:	781ed13a 	srli	r15,r15,4
    6b38:	28c00104 	addi	r3,r5,4
    6b3c:	13400104 	addi	r13,r2,4
    6b40:	781c913a 	slli	r14,r15,4
    6b44:	2b000204 	addi	r12,r5,8
    6b48:	12c00204 	addi	r11,r2,8
    6b4c:	73800504 	addi	r14,r14,20
    6b50:	2a800304 	addi	r10,r5,12
    6b54:	12400304 	addi	r9,r2,12
    6b58:	2b9d883a 	add	r14,r5,r14
    6b5c:	2811883a 	mov	r8,r5
    6b60:	100f883a 	mov	r7,r2
    6b64:	41000017 	ldw	r4,0(r8)
    6b68:	39c00404 	addi	r7,r7,16
    6b6c:	18c00404 	addi	r3,r3,16
    6b70:	393ffc15 	stw	r4,-16(r7)
    6b74:	193ffc17 	ldw	r4,-16(r3)
    6b78:	6b400404 	addi	r13,r13,16
    6b7c:	5ac00404 	addi	r11,r11,16
    6b80:	693ffc15 	stw	r4,-16(r13)
    6b84:	61000017 	ldw	r4,0(r12)
    6b88:	4a400404 	addi	r9,r9,16
    6b8c:	42000404 	addi	r8,r8,16
    6b90:	593ffc15 	stw	r4,-16(r11)
    6b94:	51000017 	ldw	r4,0(r10)
    6b98:	63000404 	addi	r12,r12,16
    6b9c:	52800404 	addi	r10,r10,16
    6ba0:	493ffc15 	stw	r4,-16(r9)
    6ba4:	1bbfef1e 	bne	r3,r14,6b64 <__alt_data_end+0xfffd5e24>
    6ba8:	79000044 	addi	r4,r15,1
    6bac:	2008913a 	slli	r4,r4,4
    6bb0:	328003cc 	andi	r10,r6,15
    6bb4:	02c000c4 	movi	r11,3
    6bb8:	1107883a 	add	r3,r2,r4
    6bbc:	290b883a 	add	r5,r5,r4
    6bc0:	5a801e2e 	bgeu	r11,r10,6c3c <memmove+0x154>
    6bc4:	1813883a 	mov	r9,r3
    6bc8:	2811883a 	mov	r8,r5
    6bcc:	500f883a 	mov	r7,r10
    6bd0:	41000017 	ldw	r4,0(r8)
    6bd4:	4a400104 	addi	r9,r9,4
    6bd8:	39ffff04 	addi	r7,r7,-4
    6bdc:	493fff15 	stw	r4,-4(r9)
    6be0:	42000104 	addi	r8,r8,4
    6be4:	59fffa36 	bltu	r11,r7,6bd0 <__alt_data_end+0xfffd5e90>
    6be8:	513fff04 	addi	r4,r10,-4
    6bec:	2008d0ba 	srli	r4,r4,2
    6bf0:	318000cc 	andi	r6,r6,3
    6bf4:	21000044 	addi	r4,r4,1
    6bf8:	2109883a 	add	r4,r4,r4
    6bfc:	2109883a 	add	r4,r4,r4
    6c00:	1907883a 	add	r3,r3,r4
    6c04:	290b883a 	add	r5,r5,r4
    6c08:	30000b26 	beq	r6,zero,6c38 <memmove+0x150>
    6c0c:	198d883a 	add	r6,r3,r6
    6c10:	29c00003 	ldbu	r7,0(r5)
    6c14:	18c00044 	addi	r3,r3,1
    6c18:	29400044 	addi	r5,r5,1
    6c1c:	19ffffc5 	stb	r7,-1(r3)
    6c20:	19bffb1e 	bne	r3,r6,6c10 <__alt_data_end+0xfffd5ed0>
    6c24:	f800283a 	ret
    6c28:	1007883a 	mov	r3,r2
    6c2c:	003ff606 	br	6c08 <__alt_data_end+0xfffd5ec8>
    6c30:	1007883a 	mov	r3,r2
    6c34:	003ff506 	br	6c0c <__alt_data_end+0xfffd5ecc>
    6c38:	f800283a 	ret
    6c3c:	500d883a 	mov	r6,r10
    6c40:	003ff106 	br	6c08 <__alt_data_end+0xfffd5ec8>

00006c44 <_Balloc>:
    6c44:	20801317 	ldw	r2,76(r4)
    6c48:	defffc04 	addi	sp,sp,-16
    6c4c:	dc400115 	stw	r17,4(sp)
    6c50:	dc000015 	stw	r16,0(sp)
    6c54:	dfc00315 	stw	ra,12(sp)
    6c58:	dc800215 	stw	r18,8(sp)
    6c5c:	2023883a 	mov	r17,r4
    6c60:	2821883a 	mov	r16,r5
    6c64:	10000f26 	beq	r2,zero,6ca4 <_Balloc+0x60>
    6c68:	8407883a 	add	r3,r16,r16
    6c6c:	18c7883a 	add	r3,r3,r3
    6c70:	10c7883a 	add	r3,r2,r3
    6c74:	18800017 	ldw	r2,0(r3)
    6c78:	10001126 	beq	r2,zero,6cc0 <_Balloc+0x7c>
    6c7c:	11000017 	ldw	r4,0(r2)
    6c80:	19000015 	stw	r4,0(r3)
    6c84:	10000415 	stw	zero,16(r2)
    6c88:	10000315 	stw	zero,12(r2)
    6c8c:	dfc00317 	ldw	ra,12(sp)
    6c90:	dc800217 	ldw	r18,8(sp)
    6c94:	dc400117 	ldw	r17,4(sp)
    6c98:	dc000017 	ldw	r16,0(sp)
    6c9c:	dec00404 	addi	sp,sp,16
    6ca0:	f800283a 	ret
    6ca4:	01800844 	movi	r6,33
    6ca8:	01400104 	movi	r5,4
    6cac:	0009f580 	call	9f58 <_calloc_r>
    6cb0:	88801315 	stw	r2,76(r17)
    6cb4:	103fec1e 	bne	r2,zero,6c68 <__alt_data_end+0xfffd5f28>
    6cb8:	0005883a 	mov	r2,zero
    6cbc:	003ff306 	br	6c8c <__alt_data_end+0xfffd5f4c>
    6cc0:	01400044 	movi	r5,1
    6cc4:	2c24983a 	sll	r18,r5,r16
    6cc8:	8809883a 	mov	r4,r17
    6ccc:	91800144 	addi	r6,r18,5
    6cd0:	318d883a 	add	r6,r6,r6
    6cd4:	318d883a 	add	r6,r6,r6
    6cd8:	0009f580 	call	9f58 <_calloc_r>
    6cdc:	103ff626 	beq	r2,zero,6cb8 <__alt_data_end+0xfffd5f78>
    6ce0:	14000115 	stw	r16,4(r2)
    6ce4:	14800215 	stw	r18,8(r2)
    6ce8:	003fe606 	br	6c84 <__alt_data_end+0xfffd5f44>

00006cec <_Bfree>:
    6cec:	28000826 	beq	r5,zero,6d10 <_Bfree+0x24>
    6cf0:	28c00117 	ldw	r3,4(r5)
    6cf4:	20801317 	ldw	r2,76(r4)
    6cf8:	18c7883a 	add	r3,r3,r3
    6cfc:	18c7883a 	add	r3,r3,r3
    6d00:	10c5883a 	add	r2,r2,r3
    6d04:	10c00017 	ldw	r3,0(r2)
    6d08:	28c00015 	stw	r3,0(r5)
    6d0c:	11400015 	stw	r5,0(r2)
    6d10:	f800283a 	ret

00006d14 <__multadd>:
    6d14:	defff704 	addi	sp,sp,-36
    6d18:	dc800215 	stw	r18,8(sp)
    6d1c:	2c800417 	ldw	r18,16(r5)
    6d20:	dd800615 	stw	r22,24(sp)
    6d24:	dd400515 	stw	r21,20(sp)
    6d28:	dd000415 	stw	r20,16(sp)
    6d2c:	dcc00315 	stw	r19,12(sp)
    6d30:	dc400115 	stw	r17,4(sp)
    6d34:	dc000015 	stw	r16,0(sp)
    6d38:	dfc00815 	stw	ra,32(sp)
    6d3c:	ddc00715 	stw	r23,28(sp)
    6d40:	2827883a 	mov	r19,r5
    6d44:	2029883a 	mov	r20,r4
    6d48:	3023883a 	mov	r17,r6
    6d4c:	3821883a 	mov	r16,r7
    6d50:	2d400504 	addi	r21,r5,20
    6d54:	002d883a 	mov	r22,zero
    6d58:	adc00017 	ldw	r23,0(r21)
    6d5c:	880b883a 	mov	r5,r17
    6d60:	ad400104 	addi	r21,r21,4
    6d64:	b93fffcc 	andi	r4,r23,65535
    6d68:	0000bc00 	call	bc0 <__mulsi3>
    6d6c:	b808d43a 	srli	r4,r23,16
    6d70:	880b883a 	mov	r5,r17
    6d74:	1421883a 	add	r16,r2,r16
    6d78:	0000bc00 	call	bc0 <__mulsi3>
    6d7c:	800ed43a 	srli	r7,r16,16
    6d80:	80ffffcc 	andi	r3,r16,65535
    6d84:	b5800044 	addi	r22,r22,1
    6d88:	11c5883a 	add	r2,r2,r7
    6d8c:	100e943a 	slli	r7,r2,16
    6d90:	1020d43a 	srli	r16,r2,16
    6d94:	38c7883a 	add	r3,r7,r3
    6d98:	a8ffff15 	stw	r3,-4(r21)
    6d9c:	b4bfee16 	blt	r22,r18,6d58 <__alt_data_end+0xfffd6018>
    6da0:	80000926 	beq	r16,zero,6dc8 <__multadd+0xb4>
    6da4:	98800217 	ldw	r2,8(r19)
    6da8:	9080130e 	bge	r18,r2,6df8 <__multadd+0xe4>
    6dac:	90800144 	addi	r2,r18,5
    6db0:	1085883a 	add	r2,r2,r2
    6db4:	1085883a 	add	r2,r2,r2
    6db8:	9885883a 	add	r2,r19,r2
    6dbc:	14000015 	stw	r16,0(r2)
    6dc0:	94800044 	addi	r18,r18,1
    6dc4:	9c800415 	stw	r18,16(r19)
    6dc8:	9805883a 	mov	r2,r19
    6dcc:	dfc00817 	ldw	ra,32(sp)
    6dd0:	ddc00717 	ldw	r23,28(sp)
    6dd4:	dd800617 	ldw	r22,24(sp)
    6dd8:	dd400517 	ldw	r21,20(sp)
    6ddc:	dd000417 	ldw	r20,16(sp)
    6de0:	dcc00317 	ldw	r19,12(sp)
    6de4:	dc800217 	ldw	r18,8(sp)
    6de8:	dc400117 	ldw	r17,4(sp)
    6dec:	dc000017 	ldw	r16,0(sp)
    6df0:	dec00904 	addi	sp,sp,36
    6df4:	f800283a 	ret
    6df8:	99400117 	ldw	r5,4(r19)
    6dfc:	a009883a 	mov	r4,r20
    6e00:	29400044 	addi	r5,r5,1
    6e04:	0006c440 	call	6c44 <_Balloc>
    6e08:	99800417 	ldw	r6,16(r19)
    6e0c:	99400304 	addi	r5,r19,12
    6e10:	11000304 	addi	r4,r2,12
    6e14:	31800084 	addi	r6,r6,2
    6e18:	318d883a 	add	r6,r6,r6
    6e1c:	318d883a 	add	r6,r6,r6
    6e20:	1023883a 	mov	r17,r2
    6e24:	000141c0 	call	141c <memcpy>
    6e28:	98000a26 	beq	r19,zero,6e54 <__multadd+0x140>
    6e2c:	98c00117 	ldw	r3,4(r19)
    6e30:	a0801317 	ldw	r2,76(r20)
    6e34:	18c7883a 	add	r3,r3,r3
    6e38:	18c7883a 	add	r3,r3,r3
    6e3c:	10c5883a 	add	r2,r2,r3
    6e40:	10c00017 	ldw	r3,0(r2)
    6e44:	98c00015 	stw	r3,0(r19)
    6e48:	14c00015 	stw	r19,0(r2)
    6e4c:	8827883a 	mov	r19,r17
    6e50:	003fd606 	br	6dac <__alt_data_end+0xfffd606c>
    6e54:	8827883a 	mov	r19,r17
    6e58:	003fd406 	br	6dac <__alt_data_end+0xfffd606c>

00006e5c <__s2b>:
    6e5c:	defff904 	addi	sp,sp,-28
    6e60:	dc400115 	stw	r17,4(sp)
    6e64:	dc000015 	stw	r16,0(sp)
    6e68:	2023883a 	mov	r17,r4
    6e6c:	2821883a 	mov	r16,r5
    6e70:	39000204 	addi	r4,r7,8
    6e74:	01400244 	movi	r5,9
    6e78:	dcc00315 	stw	r19,12(sp)
    6e7c:	dc800215 	stw	r18,8(sp)
    6e80:	dfc00615 	stw	ra,24(sp)
    6e84:	dd400515 	stw	r21,20(sp)
    6e88:	dd000415 	stw	r20,16(sp)
    6e8c:	3825883a 	mov	r18,r7
    6e90:	3027883a 	mov	r19,r6
    6e94:	0000a0c0 	call	a0c <__divsi3>
    6e98:	00c00044 	movi	r3,1
    6e9c:	000b883a 	mov	r5,zero
    6ea0:	1880030e 	bge	r3,r2,6eb0 <__s2b+0x54>
    6ea4:	18c7883a 	add	r3,r3,r3
    6ea8:	29400044 	addi	r5,r5,1
    6eac:	18bffd16 	blt	r3,r2,6ea4 <__alt_data_end+0xfffd6164>
    6eb0:	8809883a 	mov	r4,r17
    6eb4:	0006c440 	call	6c44 <_Balloc>
    6eb8:	d8c00717 	ldw	r3,28(sp)
    6ebc:	10c00515 	stw	r3,20(r2)
    6ec0:	00c00044 	movi	r3,1
    6ec4:	10c00415 	stw	r3,16(r2)
    6ec8:	00c00244 	movi	r3,9
    6ecc:	1cc0210e 	bge	r3,r19,6f54 <__s2b+0xf8>
    6ed0:	80eb883a 	add	r21,r16,r3
    6ed4:	a829883a 	mov	r20,r21
    6ed8:	84e1883a 	add	r16,r16,r19
    6edc:	a1c00007 	ldb	r7,0(r20)
    6ee0:	01800284 	movi	r6,10
    6ee4:	a5000044 	addi	r20,r20,1
    6ee8:	100b883a 	mov	r5,r2
    6eec:	39fff404 	addi	r7,r7,-48
    6ef0:	8809883a 	mov	r4,r17
    6ef4:	0006d140 	call	6d14 <__multadd>
    6ef8:	a43ff81e 	bne	r20,r16,6edc <__alt_data_end+0xfffd619c>
    6efc:	ace1883a 	add	r16,r21,r19
    6f00:	843ffe04 	addi	r16,r16,-8
    6f04:	9c800a0e 	bge	r19,r18,6f30 <__s2b+0xd4>
    6f08:	94e5c83a 	sub	r18,r18,r19
    6f0c:	84a5883a 	add	r18,r16,r18
    6f10:	81c00007 	ldb	r7,0(r16)
    6f14:	01800284 	movi	r6,10
    6f18:	84000044 	addi	r16,r16,1
    6f1c:	100b883a 	mov	r5,r2
    6f20:	39fff404 	addi	r7,r7,-48
    6f24:	8809883a 	mov	r4,r17
    6f28:	0006d140 	call	6d14 <__multadd>
    6f2c:	84bff81e 	bne	r16,r18,6f10 <__alt_data_end+0xfffd61d0>
    6f30:	dfc00617 	ldw	ra,24(sp)
    6f34:	dd400517 	ldw	r21,20(sp)
    6f38:	dd000417 	ldw	r20,16(sp)
    6f3c:	dcc00317 	ldw	r19,12(sp)
    6f40:	dc800217 	ldw	r18,8(sp)
    6f44:	dc400117 	ldw	r17,4(sp)
    6f48:	dc000017 	ldw	r16,0(sp)
    6f4c:	dec00704 	addi	sp,sp,28
    6f50:	f800283a 	ret
    6f54:	84000284 	addi	r16,r16,10
    6f58:	1827883a 	mov	r19,r3
    6f5c:	003fe906 	br	6f04 <__alt_data_end+0xfffd61c4>

00006f60 <__hi0bits>:
    6f60:	20bfffec 	andhi	r2,r4,65535
    6f64:	1000141e 	bne	r2,zero,6fb8 <__hi0bits+0x58>
    6f68:	2008943a 	slli	r4,r4,16
    6f6c:	00800404 	movi	r2,16
    6f70:	20ffc02c 	andhi	r3,r4,65280
    6f74:	1800021e 	bne	r3,zero,6f80 <__hi0bits+0x20>
    6f78:	2008923a 	slli	r4,r4,8
    6f7c:	10800204 	addi	r2,r2,8
    6f80:	20fc002c 	andhi	r3,r4,61440
    6f84:	1800021e 	bne	r3,zero,6f90 <__hi0bits+0x30>
    6f88:	2008913a 	slli	r4,r4,4
    6f8c:	10800104 	addi	r2,r2,4
    6f90:	20f0002c 	andhi	r3,r4,49152
    6f94:	1800031e 	bne	r3,zero,6fa4 <__hi0bits+0x44>
    6f98:	2109883a 	add	r4,r4,r4
    6f9c:	10800084 	addi	r2,r2,2
    6fa0:	2109883a 	add	r4,r4,r4
    6fa4:	20000316 	blt	r4,zero,6fb4 <__hi0bits+0x54>
    6fa8:	2110002c 	andhi	r4,r4,16384
    6fac:	2000041e 	bne	r4,zero,6fc0 <__hi0bits+0x60>
    6fb0:	00800804 	movi	r2,32
    6fb4:	f800283a 	ret
    6fb8:	0005883a 	mov	r2,zero
    6fbc:	003fec06 	br	6f70 <__alt_data_end+0xfffd6230>
    6fc0:	10800044 	addi	r2,r2,1
    6fc4:	f800283a 	ret

00006fc8 <__lo0bits>:
    6fc8:	20c00017 	ldw	r3,0(r4)
    6fcc:	188001cc 	andi	r2,r3,7
    6fd0:	10000826 	beq	r2,zero,6ff4 <__lo0bits+0x2c>
    6fd4:	1880004c 	andi	r2,r3,1
    6fd8:	1000211e 	bne	r2,zero,7060 <__lo0bits+0x98>
    6fdc:	1880008c 	andi	r2,r3,2
    6fe0:	1000211e 	bne	r2,zero,7068 <__lo0bits+0xa0>
    6fe4:	1806d0ba 	srli	r3,r3,2
    6fe8:	00800084 	movi	r2,2
    6fec:	20c00015 	stw	r3,0(r4)
    6ff0:	f800283a 	ret
    6ff4:	18bfffcc 	andi	r2,r3,65535
    6ff8:	10001326 	beq	r2,zero,7048 <__lo0bits+0x80>
    6ffc:	0005883a 	mov	r2,zero
    7000:	19403fcc 	andi	r5,r3,255
    7004:	2800021e 	bne	r5,zero,7010 <__lo0bits+0x48>
    7008:	1806d23a 	srli	r3,r3,8
    700c:	10800204 	addi	r2,r2,8
    7010:	194003cc 	andi	r5,r3,15
    7014:	2800021e 	bne	r5,zero,7020 <__lo0bits+0x58>
    7018:	1806d13a 	srli	r3,r3,4
    701c:	10800104 	addi	r2,r2,4
    7020:	194000cc 	andi	r5,r3,3
    7024:	2800021e 	bne	r5,zero,7030 <__lo0bits+0x68>
    7028:	1806d0ba 	srli	r3,r3,2
    702c:	10800084 	addi	r2,r2,2
    7030:	1940004c 	andi	r5,r3,1
    7034:	2800081e 	bne	r5,zero,7058 <__lo0bits+0x90>
    7038:	1806d07a 	srli	r3,r3,1
    703c:	1800051e 	bne	r3,zero,7054 <__lo0bits+0x8c>
    7040:	00800804 	movi	r2,32
    7044:	f800283a 	ret
    7048:	1806d43a 	srli	r3,r3,16
    704c:	00800404 	movi	r2,16
    7050:	003feb06 	br	7000 <__alt_data_end+0xfffd62c0>
    7054:	10800044 	addi	r2,r2,1
    7058:	20c00015 	stw	r3,0(r4)
    705c:	f800283a 	ret
    7060:	0005883a 	mov	r2,zero
    7064:	f800283a 	ret
    7068:	1806d07a 	srli	r3,r3,1
    706c:	00800044 	movi	r2,1
    7070:	20c00015 	stw	r3,0(r4)
    7074:	f800283a 	ret

00007078 <__i2b>:
    7078:	defffd04 	addi	sp,sp,-12
    707c:	dc000015 	stw	r16,0(sp)
    7080:	04000044 	movi	r16,1
    7084:	dc400115 	stw	r17,4(sp)
    7088:	2823883a 	mov	r17,r5
    708c:	800b883a 	mov	r5,r16
    7090:	dfc00215 	stw	ra,8(sp)
    7094:	0006c440 	call	6c44 <_Balloc>
    7098:	14400515 	stw	r17,20(r2)
    709c:	14000415 	stw	r16,16(r2)
    70a0:	dfc00217 	ldw	ra,8(sp)
    70a4:	dc400117 	ldw	r17,4(sp)
    70a8:	dc000017 	ldw	r16,0(sp)
    70ac:	dec00304 	addi	sp,sp,12
    70b0:	f800283a 	ret

000070b4 <__multiply>:
    70b4:	deffef04 	addi	sp,sp,-68
    70b8:	dc400815 	stw	r17,32(sp)
    70bc:	dc000715 	stw	r16,28(sp)
    70c0:	34400417 	ldw	r17,16(r6)
    70c4:	2c000417 	ldw	r16,16(r5)
    70c8:	dd800d15 	stw	r22,52(sp)
    70cc:	dc800915 	stw	r18,36(sp)
    70d0:	dfc01015 	stw	ra,64(sp)
    70d4:	df000f15 	stw	fp,60(sp)
    70d8:	ddc00e15 	stw	r23,56(sp)
    70dc:	dd400c15 	stw	r21,48(sp)
    70e0:	dd000b15 	stw	r20,44(sp)
    70e4:	dcc00a15 	stw	r19,40(sp)
    70e8:	2825883a 	mov	r18,r5
    70ec:	302d883a 	mov	r22,r6
    70f0:	8440050e 	bge	r16,r17,7108 <__multiply+0x54>
    70f4:	8007883a 	mov	r3,r16
    70f8:	3025883a 	mov	r18,r6
    70fc:	8821883a 	mov	r16,r17
    7100:	282d883a 	mov	r22,r5
    7104:	1823883a 	mov	r17,r3
    7108:	90800217 	ldw	r2,8(r18)
    710c:	8447883a 	add	r3,r16,r17
    7110:	d8c00215 	stw	r3,8(sp)
    7114:	91400117 	ldw	r5,4(r18)
    7118:	10c0010e 	bge	r2,r3,7120 <__multiply+0x6c>
    711c:	29400044 	addi	r5,r5,1
    7120:	0006c440 	call	6c44 <_Balloc>
    7124:	d8c00217 	ldw	r3,8(sp)
    7128:	d8800615 	stw	r2,24(sp)
    712c:	18eb883a 	add	r21,r3,r3
    7130:	ad6b883a 	add	r21,r21,r21
    7134:	10c00504 	addi	r3,r2,20
    7138:	1d6b883a 	add	r21,r3,r21
    713c:	d8c00115 	stw	r3,4(sp)
    7140:	dd400315 	stw	r21,12(sp)
    7144:	1805883a 	mov	r2,r3
    7148:	1d40042e 	bgeu	r3,r21,715c <__multiply+0xa8>
    714c:	d8c00317 	ldw	r3,12(sp)
    7150:	10000015 	stw	zero,0(r2)
    7154:	10800104 	addi	r2,r2,4
    7158:	10fffc36 	bltu	r2,r3,714c <__alt_data_end+0xfffd640c>
    715c:	8c63883a 	add	r17,r17,r17
    7160:	b5800504 	addi	r22,r22,20
    7164:	8c63883a 	add	r17,r17,r17
    7168:	94800504 	addi	r18,r18,20
    716c:	8421883a 	add	r16,r16,r16
    7170:	b463883a 	add	r17,r22,r17
    7174:	8421883a 	add	r16,r16,r16
    7178:	dd800015 	stw	r22,0(sp)
    717c:	dc800415 	stw	r18,16(sp)
    7180:	dc400515 	stw	r17,20(sp)
    7184:	9429883a 	add	r20,r18,r16
    7188:	b4404f2e 	bgeu	r22,r17,72c8 <__multiply+0x214>
    718c:	d8c00017 	ldw	r3,0(sp)
    7190:	1c800017 	ldw	r18,0(r3)
    7194:	947fffcc 	andi	r17,r18,65535
    7198:	88001e26 	beq	r17,zero,7214 <__multiply+0x160>
    719c:	dd800117 	ldw	r22,4(sp)
    71a0:	dd400417 	ldw	r21,16(sp)
    71a4:	0027883a 	mov	r19,zero
    71a8:	ac800017 	ldw	r18,0(r21)
    71ac:	b4000017 	ldw	r16,0(r22)
    71b0:	880b883a 	mov	r5,r17
    71b4:	913fffcc 	andi	r4,r18,65535
    71b8:	0000bc00 	call	bc0 <__mulsi3>
    71bc:	9008d43a 	srli	r4,r18,16
    71c0:	84bfffcc 	andi	r18,r16,65535
    71c4:	1485883a 	add	r2,r2,r18
    71c8:	14e5883a 	add	r18,r2,r19
    71cc:	8020d43a 	srli	r16,r16,16
    71d0:	9026d43a 	srli	r19,r18,16
    71d4:	880b883a 	mov	r5,r17
    71d8:	0000bc00 	call	bc0 <__mulsi3>
    71dc:	1405883a 	add	r2,r2,r16
    71e0:	14e1883a 	add	r16,r2,r19
    71e4:	90ffffcc 	andi	r3,r18,65535
    71e8:	8024943a 	slli	r18,r16,16
    71ec:	ad400104 	addi	r21,r21,4
    71f0:	b005883a 	mov	r2,r22
    71f4:	90c6b03a 	or	r3,r18,r3
    71f8:	b0c00015 	stw	r3,0(r22)
    71fc:	8026d43a 	srli	r19,r16,16
    7200:	b5800104 	addi	r22,r22,4
    7204:	ad3fe836 	bltu	r21,r20,71a8 <__alt_data_end+0xfffd6468>
    7208:	d8c00017 	ldw	r3,0(sp)
    720c:	14c00115 	stw	r19,4(r2)
    7210:	1c800017 	ldw	r18,0(r3)
    7214:	9024d43a 	srli	r18,r18,16
    7218:	90002226 	beq	r18,zero,72a4 <__multiply+0x1f0>
    721c:	d8c00117 	ldw	r3,4(sp)
    7220:	dd800417 	ldw	r22,16(sp)
    7224:	002f883a 	mov	r23,zero
    7228:	1f000017 	ldw	fp,0(r3)
    722c:	1823883a 	mov	r17,r3
    7230:	182b883a 	mov	r21,r3
    7234:	e021883a 	mov	r16,fp
    7238:	00000106 	br	7240 <__multiply+0x18c>
    723c:	982b883a 	mov	r21,r19
    7240:	b100000b 	ldhu	r4,0(r22)
    7244:	8020d43a 	srli	r16,r16,16
    7248:	900b883a 	mov	r5,r18
    724c:	0000bc00 	call	bc0 <__mulsi3>
    7250:	1405883a 	add	r2,r2,r16
    7254:	15ef883a 	add	r23,r2,r23
    7258:	b804943a 	slli	r2,r23,16
    725c:	e0ffffcc 	andi	r3,fp,65535
    7260:	8c400104 	addi	r17,r17,4
    7264:	10c6b03a 	or	r3,r2,r3
    7268:	88ffff15 	stw	r3,-4(r17)
    726c:	b5800104 	addi	r22,r22,4
    7270:	b13fff17 	ldw	r4,-4(r22)
    7274:	acc00104 	addi	r19,r21,4
    7278:	900b883a 	mov	r5,r18
    727c:	2008d43a 	srli	r4,r4,16
    7280:	9c000017 	ldw	r16,0(r19)
    7284:	0000bc00 	call	bc0 <__mulsi3>
    7288:	b806d43a 	srli	r3,r23,16
    728c:	813fffcc 	andi	r4,r16,65535
    7290:	1105883a 	add	r2,r2,r4
    7294:	10f9883a 	add	fp,r2,r3
    7298:	e02ed43a 	srli	r23,fp,16
    729c:	b53fe736 	bltu	r22,r20,723c <__alt_data_end+0xfffd64fc>
    72a0:	af000115 	stw	fp,4(r21)
    72a4:	d8c00017 	ldw	r3,0(sp)
    72a8:	d9000517 	ldw	r4,20(sp)
    72ac:	18c00104 	addi	r3,r3,4
    72b0:	d8c00015 	stw	r3,0(sp)
    72b4:	d8c00117 	ldw	r3,4(sp)
    72b8:	18c00104 	addi	r3,r3,4
    72bc:	d8c00115 	stw	r3,4(sp)
    72c0:	d8c00017 	ldw	r3,0(sp)
    72c4:	193fb136 	bltu	r3,r4,718c <__alt_data_end+0xfffd644c>
    72c8:	d8c00217 	ldw	r3,8(sp)
    72cc:	00c00c0e 	bge	zero,r3,7300 <__multiply+0x24c>
    72d0:	d8c00317 	ldw	r3,12(sp)
    72d4:	18bfff17 	ldw	r2,-4(r3)
    72d8:	1d7fff04 	addi	r21,r3,-4
    72dc:	10000326 	beq	r2,zero,72ec <__multiply+0x238>
    72e0:	00000706 	br	7300 <__multiply+0x24c>
    72e4:	a8800017 	ldw	r2,0(r21)
    72e8:	1000051e 	bne	r2,zero,7300 <__multiply+0x24c>
    72ec:	d8c00217 	ldw	r3,8(sp)
    72f0:	ad7fff04 	addi	r21,r21,-4
    72f4:	18ffffc4 	addi	r3,r3,-1
    72f8:	d8c00215 	stw	r3,8(sp)
    72fc:	183ff91e 	bne	r3,zero,72e4 <__alt_data_end+0xfffd65a4>
    7300:	d8c00617 	ldw	r3,24(sp)
    7304:	d9000217 	ldw	r4,8(sp)
    7308:	1805883a 	mov	r2,r3
    730c:	19000415 	stw	r4,16(r3)
    7310:	dfc01017 	ldw	ra,64(sp)
    7314:	df000f17 	ldw	fp,60(sp)
    7318:	ddc00e17 	ldw	r23,56(sp)
    731c:	dd800d17 	ldw	r22,52(sp)
    7320:	dd400c17 	ldw	r21,48(sp)
    7324:	dd000b17 	ldw	r20,44(sp)
    7328:	dcc00a17 	ldw	r19,40(sp)
    732c:	dc800917 	ldw	r18,36(sp)
    7330:	dc400817 	ldw	r17,32(sp)
    7334:	dc000717 	ldw	r16,28(sp)
    7338:	dec01104 	addi	sp,sp,68
    733c:	f800283a 	ret

00007340 <__pow5mult>:
    7340:	defffa04 	addi	sp,sp,-24
    7344:	dcc00315 	stw	r19,12(sp)
    7348:	dc000015 	stw	r16,0(sp)
    734c:	dfc00515 	stw	ra,20(sp)
    7350:	dd000415 	stw	r20,16(sp)
    7354:	dc800215 	stw	r18,8(sp)
    7358:	dc400115 	stw	r17,4(sp)
    735c:	308000cc 	andi	r2,r6,3
    7360:	3021883a 	mov	r16,r6
    7364:	2027883a 	mov	r19,r4
    7368:	10002f1e 	bne	r2,zero,7428 <__pow5mult+0xe8>
    736c:	2825883a 	mov	r18,r5
    7370:	8021d0ba 	srai	r16,r16,2
    7374:	80001a26 	beq	r16,zero,73e0 <__pow5mult+0xa0>
    7378:	9c401217 	ldw	r17,72(r19)
    737c:	8800061e 	bne	r17,zero,7398 <__pow5mult+0x58>
    7380:	00003406 	br	7454 <__pow5mult+0x114>
    7384:	8021d07a 	srai	r16,r16,1
    7388:	80001526 	beq	r16,zero,73e0 <__pow5mult+0xa0>
    738c:	88800017 	ldw	r2,0(r17)
    7390:	10001c26 	beq	r2,zero,7404 <__pow5mult+0xc4>
    7394:	1023883a 	mov	r17,r2
    7398:	8080004c 	andi	r2,r16,1
    739c:	103ff926 	beq	r2,zero,7384 <__alt_data_end+0xfffd6644>
    73a0:	880d883a 	mov	r6,r17
    73a4:	900b883a 	mov	r5,r18
    73a8:	9809883a 	mov	r4,r19
    73ac:	00070b40 	call	70b4 <__multiply>
    73b0:	90001b26 	beq	r18,zero,7420 <__pow5mult+0xe0>
    73b4:	91000117 	ldw	r4,4(r18)
    73b8:	98c01317 	ldw	r3,76(r19)
    73bc:	8021d07a 	srai	r16,r16,1
    73c0:	2109883a 	add	r4,r4,r4
    73c4:	2109883a 	add	r4,r4,r4
    73c8:	1907883a 	add	r3,r3,r4
    73cc:	19000017 	ldw	r4,0(r3)
    73d0:	91000015 	stw	r4,0(r18)
    73d4:	1c800015 	stw	r18,0(r3)
    73d8:	1025883a 	mov	r18,r2
    73dc:	803feb1e 	bne	r16,zero,738c <__alt_data_end+0xfffd664c>
    73e0:	9005883a 	mov	r2,r18
    73e4:	dfc00517 	ldw	ra,20(sp)
    73e8:	dd000417 	ldw	r20,16(sp)
    73ec:	dcc00317 	ldw	r19,12(sp)
    73f0:	dc800217 	ldw	r18,8(sp)
    73f4:	dc400117 	ldw	r17,4(sp)
    73f8:	dc000017 	ldw	r16,0(sp)
    73fc:	dec00604 	addi	sp,sp,24
    7400:	f800283a 	ret
    7404:	880d883a 	mov	r6,r17
    7408:	880b883a 	mov	r5,r17
    740c:	9809883a 	mov	r4,r19
    7410:	00070b40 	call	70b4 <__multiply>
    7414:	88800015 	stw	r2,0(r17)
    7418:	10000015 	stw	zero,0(r2)
    741c:	003fdd06 	br	7394 <__alt_data_end+0xfffd6654>
    7420:	1025883a 	mov	r18,r2
    7424:	003fd706 	br	7384 <__alt_data_end+0xfffd6644>
    7428:	10bfffc4 	addi	r2,r2,-1
    742c:	1085883a 	add	r2,r2,r2
    7430:	00c000b4 	movhi	r3,2
    7434:	18e33c04 	addi	r3,r3,-29456
    7438:	1085883a 	add	r2,r2,r2
    743c:	1885883a 	add	r2,r3,r2
    7440:	11800017 	ldw	r6,0(r2)
    7444:	000f883a 	mov	r7,zero
    7448:	0006d140 	call	6d14 <__multadd>
    744c:	1025883a 	mov	r18,r2
    7450:	003fc706 	br	7370 <__alt_data_end+0xfffd6630>
    7454:	05000044 	movi	r20,1
    7458:	a00b883a 	mov	r5,r20
    745c:	9809883a 	mov	r4,r19
    7460:	0006c440 	call	6c44 <_Balloc>
    7464:	1023883a 	mov	r17,r2
    7468:	00809c44 	movi	r2,625
    746c:	88800515 	stw	r2,20(r17)
    7470:	8d000415 	stw	r20,16(r17)
    7474:	9c401215 	stw	r17,72(r19)
    7478:	88000015 	stw	zero,0(r17)
    747c:	003fc606 	br	7398 <__alt_data_end+0xfffd6658>

00007480 <__lshift>:
    7480:	defff904 	addi	sp,sp,-28
    7484:	dd400515 	stw	r21,20(sp)
    7488:	dcc00315 	stw	r19,12(sp)
    748c:	302bd17a 	srai	r21,r6,5
    7490:	2cc00417 	ldw	r19,16(r5)
    7494:	28800217 	ldw	r2,8(r5)
    7498:	dd000415 	stw	r20,16(sp)
    749c:	ace7883a 	add	r19,r21,r19
    74a0:	dc800215 	stw	r18,8(sp)
    74a4:	dc400115 	stw	r17,4(sp)
    74a8:	dc000015 	stw	r16,0(sp)
    74ac:	dfc00615 	stw	ra,24(sp)
    74b0:	9c000044 	addi	r16,r19,1
    74b4:	2823883a 	mov	r17,r5
    74b8:	3029883a 	mov	r20,r6
    74bc:	2025883a 	mov	r18,r4
    74c0:	29400117 	ldw	r5,4(r5)
    74c4:	1400030e 	bge	r2,r16,74d4 <__lshift+0x54>
    74c8:	1085883a 	add	r2,r2,r2
    74cc:	29400044 	addi	r5,r5,1
    74d0:	143ffd16 	blt	r2,r16,74c8 <__alt_data_end+0xfffd6788>
    74d4:	9009883a 	mov	r4,r18
    74d8:	0006c440 	call	6c44 <_Balloc>
    74dc:	10c00504 	addi	r3,r2,20
    74e0:	0540070e 	bge	zero,r21,7500 <__lshift+0x80>
    74e4:	ad6b883a 	add	r21,r21,r21
    74e8:	ad6b883a 	add	r21,r21,r21
    74ec:	1809883a 	mov	r4,r3
    74f0:	1d47883a 	add	r3,r3,r21
    74f4:	20000015 	stw	zero,0(r4)
    74f8:	21000104 	addi	r4,r4,4
    74fc:	193ffd1e 	bne	r3,r4,74f4 <__alt_data_end+0xfffd67b4>
    7500:	8a000417 	ldw	r8,16(r17)
    7504:	89000504 	addi	r4,r17,20
    7508:	a18007cc 	andi	r6,r20,31
    750c:	4211883a 	add	r8,r8,r8
    7510:	4211883a 	add	r8,r8,r8
    7514:	2211883a 	add	r8,r4,r8
    7518:	30002326 	beq	r6,zero,75a8 <__lshift+0x128>
    751c:	02400804 	movi	r9,32
    7520:	4993c83a 	sub	r9,r9,r6
    7524:	000b883a 	mov	r5,zero
    7528:	21c00017 	ldw	r7,0(r4)
    752c:	1815883a 	mov	r10,r3
    7530:	18c00104 	addi	r3,r3,4
    7534:	398e983a 	sll	r7,r7,r6
    7538:	21000104 	addi	r4,r4,4
    753c:	394ab03a 	or	r5,r7,r5
    7540:	197fff15 	stw	r5,-4(r3)
    7544:	217fff17 	ldw	r5,-4(r4)
    7548:	2a4ad83a 	srl	r5,r5,r9
    754c:	223ff636 	bltu	r4,r8,7528 <__alt_data_end+0xfffd67e8>
    7550:	51400115 	stw	r5,4(r10)
    7554:	28001a1e 	bne	r5,zero,75c0 <__lshift+0x140>
    7558:	843fffc4 	addi	r16,r16,-1
    755c:	14000415 	stw	r16,16(r2)
    7560:	88000826 	beq	r17,zero,7584 <__lshift+0x104>
    7564:	89000117 	ldw	r4,4(r17)
    7568:	90c01317 	ldw	r3,76(r18)
    756c:	2109883a 	add	r4,r4,r4
    7570:	2109883a 	add	r4,r4,r4
    7574:	1907883a 	add	r3,r3,r4
    7578:	19000017 	ldw	r4,0(r3)
    757c:	89000015 	stw	r4,0(r17)
    7580:	1c400015 	stw	r17,0(r3)
    7584:	dfc00617 	ldw	ra,24(sp)
    7588:	dd400517 	ldw	r21,20(sp)
    758c:	dd000417 	ldw	r20,16(sp)
    7590:	dcc00317 	ldw	r19,12(sp)
    7594:	dc800217 	ldw	r18,8(sp)
    7598:	dc400117 	ldw	r17,4(sp)
    759c:	dc000017 	ldw	r16,0(sp)
    75a0:	dec00704 	addi	sp,sp,28
    75a4:	f800283a 	ret
    75a8:	21400017 	ldw	r5,0(r4)
    75ac:	18c00104 	addi	r3,r3,4
    75b0:	21000104 	addi	r4,r4,4
    75b4:	197fff15 	stw	r5,-4(r3)
    75b8:	223ffb36 	bltu	r4,r8,75a8 <__alt_data_end+0xfffd6868>
    75bc:	003fe606 	br	7558 <__alt_data_end+0xfffd6818>
    75c0:	9c000084 	addi	r16,r19,2
    75c4:	003fe406 	br	7558 <__alt_data_end+0xfffd6818>

000075c8 <__mcmp>:
    75c8:	20800417 	ldw	r2,16(r4)
    75cc:	28c00417 	ldw	r3,16(r5)
    75d0:	10c5c83a 	sub	r2,r2,r3
    75d4:	1000111e 	bne	r2,zero,761c <__mcmp+0x54>
    75d8:	18c7883a 	add	r3,r3,r3
    75dc:	18c7883a 	add	r3,r3,r3
    75e0:	21000504 	addi	r4,r4,20
    75e4:	29400504 	addi	r5,r5,20
    75e8:	20c5883a 	add	r2,r4,r3
    75ec:	28cb883a 	add	r5,r5,r3
    75f0:	00000106 	br	75f8 <__mcmp+0x30>
    75f4:	20800a2e 	bgeu	r4,r2,7620 <__mcmp+0x58>
    75f8:	10bfff04 	addi	r2,r2,-4
    75fc:	297fff04 	addi	r5,r5,-4
    7600:	11800017 	ldw	r6,0(r2)
    7604:	28c00017 	ldw	r3,0(r5)
    7608:	30fffa26 	beq	r6,r3,75f4 <__alt_data_end+0xfffd68b4>
    760c:	30c00236 	bltu	r6,r3,7618 <__mcmp+0x50>
    7610:	00800044 	movi	r2,1
    7614:	f800283a 	ret
    7618:	00bfffc4 	movi	r2,-1
    761c:	f800283a 	ret
    7620:	0005883a 	mov	r2,zero
    7624:	f800283a 	ret

00007628 <__mdiff>:
    7628:	28c00417 	ldw	r3,16(r5)
    762c:	30800417 	ldw	r2,16(r6)
    7630:	defffa04 	addi	sp,sp,-24
    7634:	dcc00315 	stw	r19,12(sp)
    7638:	dc800215 	stw	r18,8(sp)
    763c:	dfc00515 	stw	ra,20(sp)
    7640:	dd000415 	stw	r20,16(sp)
    7644:	dc400115 	stw	r17,4(sp)
    7648:	dc000015 	stw	r16,0(sp)
    764c:	1887c83a 	sub	r3,r3,r2
    7650:	2825883a 	mov	r18,r5
    7654:	3027883a 	mov	r19,r6
    7658:	1800141e 	bne	r3,zero,76ac <__mdiff+0x84>
    765c:	1085883a 	add	r2,r2,r2
    7660:	1085883a 	add	r2,r2,r2
    7664:	2a000504 	addi	r8,r5,20
    7668:	34000504 	addi	r16,r6,20
    766c:	4087883a 	add	r3,r8,r2
    7670:	8085883a 	add	r2,r16,r2
    7674:	00000106 	br	767c <__mdiff+0x54>
    7678:	40c0592e 	bgeu	r8,r3,77e0 <__mdiff+0x1b8>
    767c:	18ffff04 	addi	r3,r3,-4
    7680:	10bfff04 	addi	r2,r2,-4
    7684:	19c00017 	ldw	r7,0(r3)
    7688:	11400017 	ldw	r5,0(r2)
    768c:	397ffa26 	beq	r7,r5,7678 <__alt_data_end+0xfffd6938>
    7690:	3940592e 	bgeu	r7,r5,77f8 <__mdiff+0x1d0>
    7694:	9005883a 	mov	r2,r18
    7698:	4023883a 	mov	r17,r8
    769c:	9825883a 	mov	r18,r19
    76a0:	05000044 	movi	r20,1
    76a4:	1027883a 	mov	r19,r2
    76a8:	00000406 	br	76bc <__mdiff+0x94>
    76ac:	18005616 	blt	r3,zero,7808 <__mdiff+0x1e0>
    76b0:	34400504 	addi	r17,r6,20
    76b4:	2c000504 	addi	r16,r5,20
    76b8:	0029883a 	mov	r20,zero
    76bc:	91400117 	ldw	r5,4(r18)
    76c0:	0006c440 	call	6c44 <_Balloc>
    76c4:	92400417 	ldw	r9,16(r18)
    76c8:	9b000417 	ldw	r12,16(r19)
    76cc:	12c00504 	addi	r11,r2,20
    76d0:	4a51883a 	add	r8,r9,r9
    76d4:	6319883a 	add	r12,r12,r12
    76d8:	4211883a 	add	r8,r8,r8
    76dc:	6319883a 	add	r12,r12,r12
    76e0:	15000315 	stw	r20,12(r2)
    76e4:	8211883a 	add	r8,r16,r8
    76e8:	8b19883a 	add	r12,r17,r12
    76ec:	0007883a 	mov	r3,zero
    76f0:	81400017 	ldw	r5,0(r16)
    76f4:	89c00017 	ldw	r7,0(r17)
    76f8:	59800104 	addi	r6,r11,4
    76fc:	293fffcc 	andi	r4,r5,65535
    7700:	20c7883a 	add	r3,r4,r3
    7704:	393fffcc 	andi	r4,r7,65535
    7708:	1909c83a 	sub	r4,r3,r4
    770c:	280ad43a 	srli	r5,r5,16
    7710:	380ed43a 	srli	r7,r7,16
    7714:	2007d43a 	srai	r3,r4,16
    7718:	213fffcc 	andi	r4,r4,65535
    771c:	29cbc83a 	sub	r5,r5,r7
    7720:	28c7883a 	add	r3,r5,r3
    7724:	180a943a 	slli	r5,r3,16
    7728:	8c400104 	addi	r17,r17,4
    772c:	84000104 	addi	r16,r16,4
    7730:	2908b03a 	or	r4,r5,r4
    7734:	59000015 	stw	r4,0(r11)
    7738:	1807d43a 	srai	r3,r3,16
    773c:	3015883a 	mov	r10,r6
    7740:	3017883a 	mov	r11,r6
    7744:	8b3fea36 	bltu	r17,r12,76f0 <__alt_data_end+0xfffd69b0>
    7748:	8200162e 	bgeu	r16,r8,77a4 <__mdiff+0x17c>
    774c:	8017883a 	mov	r11,r16
    7750:	59400017 	ldw	r5,0(r11)
    7754:	31800104 	addi	r6,r6,4
    7758:	5ac00104 	addi	r11,r11,4
    775c:	293fffcc 	andi	r4,r5,65535
    7760:	20c7883a 	add	r3,r4,r3
    7764:	280ed43a 	srli	r7,r5,16
    7768:	180bd43a 	srai	r5,r3,16
    776c:	193fffcc 	andi	r4,r3,65535
    7770:	3947883a 	add	r3,r7,r5
    7774:	180a943a 	slli	r5,r3,16
    7778:	1807d43a 	srai	r3,r3,16
    777c:	2908b03a 	or	r4,r5,r4
    7780:	313fff15 	stw	r4,-4(r6)
    7784:	5a3ff236 	bltu	r11,r8,7750 <__alt_data_end+0xfffd6a10>
    7788:	0406303a 	nor	r3,zero,r16
    778c:	1a07883a 	add	r3,r3,r8
    7790:	1806d0ba 	srli	r3,r3,2
    7794:	18c00044 	addi	r3,r3,1
    7798:	18c7883a 	add	r3,r3,r3
    779c:	18c7883a 	add	r3,r3,r3
    77a0:	50d5883a 	add	r10,r10,r3
    77a4:	50ffff04 	addi	r3,r10,-4
    77a8:	2000041e 	bne	r4,zero,77bc <__mdiff+0x194>
    77ac:	18ffff04 	addi	r3,r3,-4
    77b0:	19000017 	ldw	r4,0(r3)
    77b4:	4a7fffc4 	addi	r9,r9,-1
    77b8:	203ffc26 	beq	r4,zero,77ac <__alt_data_end+0xfffd6a6c>
    77bc:	12400415 	stw	r9,16(r2)
    77c0:	dfc00517 	ldw	ra,20(sp)
    77c4:	dd000417 	ldw	r20,16(sp)
    77c8:	dcc00317 	ldw	r19,12(sp)
    77cc:	dc800217 	ldw	r18,8(sp)
    77d0:	dc400117 	ldw	r17,4(sp)
    77d4:	dc000017 	ldw	r16,0(sp)
    77d8:	dec00604 	addi	sp,sp,24
    77dc:	f800283a 	ret
    77e0:	000b883a 	mov	r5,zero
    77e4:	0006c440 	call	6c44 <_Balloc>
    77e8:	00c00044 	movi	r3,1
    77ec:	10c00415 	stw	r3,16(r2)
    77f0:	10000515 	stw	zero,20(r2)
    77f4:	003ff206 	br	77c0 <__alt_data_end+0xfffd6a80>
    77f8:	8023883a 	mov	r17,r16
    77fc:	0029883a 	mov	r20,zero
    7800:	4021883a 	mov	r16,r8
    7804:	003fad06 	br	76bc <__alt_data_end+0xfffd697c>
    7808:	9005883a 	mov	r2,r18
    780c:	94400504 	addi	r17,r18,20
    7810:	9c000504 	addi	r16,r19,20
    7814:	9825883a 	mov	r18,r19
    7818:	05000044 	movi	r20,1
    781c:	1027883a 	mov	r19,r2
    7820:	003fa606 	br	76bc <__alt_data_end+0xfffd697c>

00007824 <__ulp>:
    7824:	295ffc2c 	andhi	r5,r5,32752
    7828:	00bf3034 	movhi	r2,64704
    782c:	2887883a 	add	r3,r5,r2
    7830:	00c0020e 	bge	zero,r3,783c <__ulp+0x18>
    7834:	0005883a 	mov	r2,zero
    7838:	f800283a 	ret
    783c:	00c7c83a 	sub	r3,zero,r3
    7840:	1807d53a 	srai	r3,r3,20
    7844:	008004c4 	movi	r2,19
    7848:	10c00b0e 	bge	r2,r3,7878 <__ulp+0x54>
    784c:	18bffb04 	addi	r2,r3,-20
    7850:	01000784 	movi	r4,30
    7854:	0007883a 	mov	r3,zero
    7858:	20800516 	blt	r4,r2,7870 <__ulp+0x4c>
    785c:	010007c4 	movi	r4,31
    7860:	2089c83a 	sub	r4,r4,r2
    7864:	00800044 	movi	r2,1
    7868:	1104983a 	sll	r2,r2,r4
    786c:	f800283a 	ret
    7870:	00800044 	movi	r2,1
    7874:	f800283a 	ret
    7878:	01400234 	movhi	r5,8
    787c:	28c7d83a 	sra	r3,r5,r3
    7880:	0005883a 	mov	r2,zero
    7884:	f800283a 	ret

00007888 <__b2d>:
    7888:	defffa04 	addi	sp,sp,-24
    788c:	dc000015 	stw	r16,0(sp)
    7890:	24000417 	ldw	r16,16(r4)
    7894:	dc400115 	stw	r17,4(sp)
    7898:	24400504 	addi	r17,r4,20
    789c:	8421883a 	add	r16,r16,r16
    78a0:	8421883a 	add	r16,r16,r16
    78a4:	8c21883a 	add	r16,r17,r16
    78a8:	dc800215 	stw	r18,8(sp)
    78ac:	84bfff17 	ldw	r18,-4(r16)
    78b0:	dd000415 	stw	r20,16(sp)
    78b4:	dcc00315 	stw	r19,12(sp)
    78b8:	9009883a 	mov	r4,r18
    78bc:	2829883a 	mov	r20,r5
    78c0:	dfc00515 	stw	ra,20(sp)
    78c4:	0006f600 	call	6f60 <__hi0bits>
    78c8:	00c00804 	movi	r3,32
    78cc:	1889c83a 	sub	r4,r3,r2
    78d0:	a1000015 	stw	r4,0(r20)
    78d4:	01000284 	movi	r4,10
    78d8:	84ffff04 	addi	r19,r16,-4
    78dc:	20801216 	blt	r4,r2,7928 <__b2d+0xa0>
    78e0:	018002c4 	movi	r6,11
    78e4:	308dc83a 	sub	r6,r6,r2
    78e8:	9186d83a 	srl	r3,r18,r6
    78ec:	18cffc34 	orhi	r3,r3,16368
    78f0:	8cc0212e 	bgeu	r17,r19,7978 <__b2d+0xf0>
    78f4:	813ffe17 	ldw	r4,-8(r16)
    78f8:	218cd83a 	srl	r6,r4,r6
    78fc:	10800544 	addi	r2,r2,21
    7900:	9084983a 	sll	r2,r18,r2
    7904:	1184b03a 	or	r2,r2,r6
    7908:	dfc00517 	ldw	ra,20(sp)
    790c:	dd000417 	ldw	r20,16(sp)
    7910:	dcc00317 	ldw	r19,12(sp)
    7914:	dc800217 	ldw	r18,8(sp)
    7918:	dc400117 	ldw	r17,4(sp)
    791c:	dc000017 	ldw	r16,0(sp)
    7920:	dec00604 	addi	sp,sp,24
    7924:	f800283a 	ret
    7928:	8cc00f2e 	bgeu	r17,r19,7968 <__b2d+0xe0>
    792c:	117ffd44 	addi	r5,r2,-11
    7930:	80bffe17 	ldw	r2,-8(r16)
    7934:	28000e26 	beq	r5,zero,7970 <__b2d+0xe8>
    7938:	1949c83a 	sub	r4,r3,r5
    793c:	9164983a 	sll	r18,r18,r5
    7940:	1106d83a 	srl	r3,r2,r4
    7944:	81bffe04 	addi	r6,r16,-8
    7948:	948ffc34 	orhi	r18,r18,16368
    794c:	90c6b03a 	or	r3,r18,r3
    7950:	89800e2e 	bgeu	r17,r6,798c <__b2d+0x104>
    7954:	81bffd17 	ldw	r6,-12(r16)
    7958:	1144983a 	sll	r2,r2,r5
    795c:	310ad83a 	srl	r5,r6,r4
    7960:	2884b03a 	or	r2,r5,r2
    7964:	003fe806 	br	7908 <__alt_data_end+0xfffd6bc8>
    7968:	10bffd44 	addi	r2,r2,-11
    796c:	1000041e 	bne	r2,zero,7980 <__b2d+0xf8>
    7970:	90cffc34 	orhi	r3,r18,16368
    7974:	003fe406 	br	7908 <__alt_data_end+0xfffd6bc8>
    7978:	000d883a 	mov	r6,zero
    797c:	003fdf06 	br	78fc <__alt_data_end+0xfffd6bbc>
    7980:	90a4983a 	sll	r18,r18,r2
    7984:	0005883a 	mov	r2,zero
    7988:	003ff906 	br	7970 <__alt_data_end+0xfffd6c30>
    798c:	1144983a 	sll	r2,r2,r5
    7990:	003fdd06 	br	7908 <__alt_data_end+0xfffd6bc8>

00007994 <__d2b>:
    7994:	defff804 	addi	sp,sp,-32
    7998:	dc000215 	stw	r16,8(sp)
    799c:	3021883a 	mov	r16,r6
    79a0:	dc400315 	stw	r17,12(sp)
    79a4:	8022907a 	slli	r17,r16,1
    79a8:	dd000615 	stw	r20,24(sp)
    79ac:	2829883a 	mov	r20,r5
    79b0:	01400044 	movi	r5,1
    79b4:	dcc00515 	stw	r19,20(sp)
    79b8:	dc800415 	stw	r18,16(sp)
    79bc:	dfc00715 	stw	ra,28(sp)
    79c0:	3825883a 	mov	r18,r7
    79c4:	8822d57a 	srli	r17,r17,21
    79c8:	0006c440 	call	6c44 <_Balloc>
    79cc:	1027883a 	mov	r19,r2
    79d0:	00800434 	movhi	r2,16
    79d4:	10bfffc4 	addi	r2,r2,-1
    79d8:	808c703a 	and	r6,r16,r2
    79dc:	88000126 	beq	r17,zero,79e4 <__d2b+0x50>
    79e0:	31800434 	orhi	r6,r6,16
    79e4:	d9800015 	stw	r6,0(sp)
    79e8:	a0002426 	beq	r20,zero,7a7c <__d2b+0xe8>
    79ec:	d9000104 	addi	r4,sp,4
    79f0:	dd000115 	stw	r20,4(sp)
    79f4:	0006fc80 	call	6fc8 <__lo0bits>
    79f8:	d8c00017 	ldw	r3,0(sp)
    79fc:	10002f1e 	bne	r2,zero,7abc <__d2b+0x128>
    7a00:	d9000117 	ldw	r4,4(sp)
    7a04:	99000515 	stw	r4,20(r19)
    7a08:	1821003a 	cmpeq	r16,r3,zero
    7a0c:	01000084 	movi	r4,2
    7a10:	2421c83a 	sub	r16,r4,r16
    7a14:	98c00615 	stw	r3,24(r19)
    7a18:	9c000415 	stw	r16,16(r19)
    7a1c:	88001f1e 	bne	r17,zero,7a9c <__d2b+0x108>
    7a20:	10bef384 	addi	r2,r2,-1074
    7a24:	90800015 	stw	r2,0(r18)
    7a28:	00900034 	movhi	r2,16384
    7a2c:	10bfffc4 	addi	r2,r2,-1
    7a30:	8085883a 	add	r2,r16,r2
    7a34:	1085883a 	add	r2,r2,r2
    7a38:	1085883a 	add	r2,r2,r2
    7a3c:	9885883a 	add	r2,r19,r2
    7a40:	11000517 	ldw	r4,20(r2)
    7a44:	8020917a 	slli	r16,r16,5
    7a48:	0006f600 	call	6f60 <__hi0bits>
    7a4c:	d8c00817 	ldw	r3,32(sp)
    7a50:	8085c83a 	sub	r2,r16,r2
    7a54:	18800015 	stw	r2,0(r3)
    7a58:	9805883a 	mov	r2,r19
    7a5c:	dfc00717 	ldw	ra,28(sp)
    7a60:	dd000617 	ldw	r20,24(sp)
    7a64:	dcc00517 	ldw	r19,20(sp)
    7a68:	dc800417 	ldw	r18,16(sp)
    7a6c:	dc400317 	ldw	r17,12(sp)
    7a70:	dc000217 	ldw	r16,8(sp)
    7a74:	dec00804 	addi	sp,sp,32
    7a78:	f800283a 	ret
    7a7c:	d809883a 	mov	r4,sp
    7a80:	0006fc80 	call	6fc8 <__lo0bits>
    7a84:	d8c00017 	ldw	r3,0(sp)
    7a88:	04000044 	movi	r16,1
    7a8c:	9c000415 	stw	r16,16(r19)
    7a90:	98c00515 	stw	r3,20(r19)
    7a94:	10800804 	addi	r2,r2,32
    7a98:	883fe126 	beq	r17,zero,7a20 <__alt_data_end+0xfffd6ce0>
    7a9c:	00c00d44 	movi	r3,53
    7aa0:	8c7ef344 	addi	r17,r17,-1075
    7aa4:	88a3883a 	add	r17,r17,r2
    7aa8:	1885c83a 	sub	r2,r3,r2
    7aac:	d8c00817 	ldw	r3,32(sp)
    7ab0:	94400015 	stw	r17,0(r18)
    7ab4:	18800015 	stw	r2,0(r3)
    7ab8:	003fe706 	br	7a58 <__alt_data_end+0xfffd6d18>
    7abc:	01000804 	movi	r4,32
    7ac0:	2089c83a 	sub	r4,r4,r2
    7ac4:	1908983a 	sll	r4,r3,r4
    7ac8:	d9400117 	ldw	r5,4(sp)
    7acc:	1886d83a 	srl	r3,r3,r2
    7ad0:	2148b03a 	or	r4,r4,r5
    7ad4:	99000515 	stw	r4,20(r19)
    7ad8:	d8c00015 	stw	r3,0(sp)
    7adc:	003fca06 	br	7a08 <__alt_data_end+0xfffd6cc8>

00007ae0 <__ratio>:
    7ae0:	defff904 	addi	sp,sp,-28
    7ae4:	dc400315 	stw	r17,12(sp)
    7ae8:	2823883a 	mov	r17,r5
    7aec:	d9400104 	addi	r5,sp,4
    7af0:	dfc00615 	stw	ra,24(sp)
    7af4:	dcc00515 	stw	r19,20(sp)
    7af8:	dc800415 	stw	r18,16(sp)
    7afc:	2027883a 	mov	r19,r4
    7b00:	dc000215 	stw	r16,8(sp)
    7b04:	00078880 	call	7888 <__b2d>
    7b08:	d80b883a 	mov	r5,sp
    7b0c:	8809883a 	mov	r4,r17
    7b10:	1025883a 	mov	r18,r2
    7b14:	1821883a 	mov	r16,r3
    7b18:	00078880 	call	7888 <__b2d>
    7b1c:	8a000417 	ldw	r8,16(r17)
    7b20:	99000417 	ldw	r4,16(r19)
    7b24:	d9400117 	ldw	r5,4(sp)
    7b28:	2209c83a 	sub	r4,r4,r8
    7b2c:	2010917a 	slli	r8,r4,5
    7b30:	d9000017 	ldw	r4,0(sp)
    7b34:	2909c83a 	sub	r4,r5,r4
    7b38:	4109883a 	add	r4,r8,r4
    7b3c:	01000e0e 	bge	zero,r4,7b78 <__ratio+0x98>
    7b40:	2008953a 	slli	r4,r4,20
    7b44:	2421883a 	add	r16,r4,r16
    7b48:	100d883a 	mov	r6,r2
    7b4c:	180f883a 	mov	r7,r3
    7b50:	9009883a 	mov	r4,r18
    7b54:	800b883a 	mov	r5,r16
    7b58:	000bb040 	call	bb04 <__divdf3>
    7b5c:	dfc00617 	ldw	ra,24(sp)
    7b60:	dcc00517 	ldw	r19,20(sp)
    7b64:	dc800417 	ldw	r18,16(sp)
    7b68:	dc400317 	ldw	r17,12(sp)
    7b6c:	dc000217 	ldw	r16,8(sp)
    7b70:	dec00704 	addi	sp,sp,28
    7b74:	f800283a 	ret
    7b78:	2008953a 	slli	r4,r4,20
    7b7c:	1907c83a 	sub	r3,r3,r4
    7b80:	003ff106 	br	7b48 <__alt_data_end+0xfffd6e08>

00007b84 <_mprec_log10>:
    7b84:	defffe04 	addi	sp,sp,-8
    7b88:	dc000015 	stw	r16,0(sp)
    7b8c:	dfc00115 	stw	ra,4(sp)
    7b90:	008005c4 	movi	r2,23
    7b94:	2021883a 	mov	r16,r4
    7b98:	11000d0e 	bge	r2,r4,7bd0 <_mprec_log10+0x4c>
    7b9c:	0005883a 	mov	r2,zero
    7ba0:	00cffc34 	movhi	r3,16368
    7ba4:	843fffc4 	addi	r16,r16,-1
    7ba8:	000d883a 	mov	r6,zero
    7bac:	01d00934 	movhi	r7,16420
    7bb0:	1009883a 	mov	r4,r2
    7bb4:	180b883a 	mov	r5,r3
    7bb8:	000c72c0 	call	c72c <__muldf3>
    7bbc:	803ff91e 	bne	r16,zero,7ba4 <__alt_data_end+0xfffd6e64>
    7bc0:	dfc00117 	ldw	ra,4(sp)
    7bc4:	dc000017 	ldw	r16,0(sp)
    7bc8:	dec00204 	addi	sp,sp,8
    7bcc:	f800283a 	ret
    7bd0:	202090fa 	slli	r16,r4,3
    7bd4:	008000b4 	movhi	r2,2
    7bd8:	10a35304 	addi	r2,r2,-29364
    7bdc:	1421883a 	add	r16,r2,r16
    7be0:	80800017 	ldw	r2,0(r16)
    7be4:	80c00117 	ldw	r3,4(r16)
    7be8:	dfc00117 	ldw	ra,4(sp)
    7bec:	dc000017 	ldw	r16,0(sp)
    7bf0:	dec00204 	addi	sp,sp,8
    7bf4:	f800283a 	ret

00007bf8 <__copybits>:
    7bf8:	297fffc4 	addi	r5,r5,-1
    7bfc:	280fd17a 	srai	r7,r5,5
    7c00:	30c00417 	ldw	r3,16(r6)
    7c04:	30800504 	addi	r2,r6,20
    7c08:	39c00044 	addi	r7,r7,1
    7c0c:	18c7883a 	add	r3,r3,r3
    7c10:	39cf883a 	add	r7,r7,r7
    7c14:	18c7883a 	add	r3,r3,r3
    7c18:	39cf883a 	add	r7,r7,r7
    7c1c:	10c7883a 	add	r3,r2,r3
    7c20:	21cf883a 	add	r7,r4,r7
    7c24:	10c00d2e 	bgeu	r2,r3,7c5c <__copybits+0x64>
    7c28:	200b883a 	mov	r5,r4
    7c2c:	12000017 	ldw	r8,0(r2)
    7c30:	29400104 	addi	r5,r5,4
    7c34:	10800104 	addi	r2,r2,4
    7c38:	2a3fff15 	stw	r8,-4(r5)
    7c3c:	10fffb36 	bltu	r2,r3,7c2c <__alt_data_end+0xfffd6eec>
    7c40:	1985c83a 	sub	r2,r3,r6
    7c44:	10bffac4 	addi	r2,r2,-21
    7c48:	1004d0ba 	srli	r2,r2,2
    7c4c:	10800044 	addi	r2,r2,1
    7c50:	1085883a 	add	r2,r2,r2
    7c54:	1085883a 	add	r2,r2,r2
    7c58:	2089883a 	add	r4,r4,r2
    7c5c:	21c0032e 	bgeu	r4,r7,7c6c <__copybits+0x74>
    7c60:	20000015 	stw	zero,0(r4)
    7c64:	21000104 	addi	r4,r4,4
    7c68:	21fffd36 	bltu	r4,r7,7c60 <__alt_data_end+0xfffd6f20>
    7c6c:	f800283a 	ret

00007c70 <__any_on>:
    7c70:	20c00417 	ldw	r3,16(r4)
    7c74:	2805d17a 	srai	r2,r5,5
    7c78:	21000504 	addi	r4,r4,20
    7c7c:	18800d0e 	bge	r3,r2,7cb4 <__any_on+0x44>
    7c80:	18c7883a 	add	r3,r3,r3
    7c84:	18c7883a 	add	r3,r3,r3
    7c88:	20c7883a 	add	r3,r4,r3
    7c8c:	20c0192e 	bgeu	r4,r3,7cf4 <__any_on+0x84>
    7c90:	18bfff17 	ldw	r2,-4(r3)
    7c94:	18ffff04 	addi	r3,r3,-4
    7c98:	1000041e 	bne	r2,zero,7cac <__any_on+0x3c>
    7c9c:	20c0142e 	bgeu	r4,r3,7cf0 <__any_on+0x80>
    7ca0:	18ffff04 	addi	r3,r3,-4
    7ca4:	19400017 	ldw	r5,0(r3)
    7ca8:	283ffc26 	beq	r5,zero,7c9c <__alt_data_end+0xfffd6f5c>
    7cac:	00800044 	movi	r2,1
    7cb0:	f800283a 	ret
    7cb4:	10c00a0e 	bge	r2,r3,7ce0 <__any_on+0x70>
    7cb8:	1085883a 	add	r2,r2,r2
    7cbc:	1085883a 	add	r2,r2,r2
    7cc0:	294007cc 	andi	r5,r5,31
    7cc4:	2087883a 	add	r3,r4,r2
    7cc8:	283ff026 	beq	r5,zero,7c8c <__alt_data_end+0xfffd6f4c>
    7ccc:	19800017 	ldw	r6,0(r3)
    7cd0:	3144d83a 	srl	r2,r6,r5
    7cd4:	114a983a 	sll	r5,r2,r5
    7cd8:	317ff41e 	bne	r6,r5,7cac <__alt_data_end+0xfffd6f6c>
    7cdc:	003feb06 	br	7c8c <__alt_data_end+0xfffd6f4c>
    7ce0:	1085883a 	add	r2,r2,r2
    7ce4:	1085883a 	add	r2,r2,r2
    7ce8:	2087883a 	add	r3,r4,r2
    7cec:	003fe706 	br	7c8c <__alt_data_end+0xfffd6f4c>
    7cf0:	f800283a 	ret
    7cf4:	0005883a 	mov	r2,zero
    7cf8:	f800283a 	ret

00007cfc <_putc_r>:
    7cfc:	defffc04 	addi	sp,sp,-16
    7d00:	dc000215 	stw	r16,8(sp)
    7d04:	dfc00315 	stw	ra,12(sp)
    7d08:	2021883a 	mov	r16,r4
    7d0c:	20000226 	beq	r4,zero,7d18 <_putc_r+0x1c>
    7d10:	20800e17 	ldw	r2,56(r4)
    7d14:	10001b26 	beq	r2,zero,7d84 <_putc_r+0x88>
    7d18:	30800217 	ldw	r2,8(r6)
    7d1c:	10bfffc4 	addi	r2,r2,-1
    7d20:	30800215 	stw	r2,8(r6)
    7d24:	10000a16 	blt	r2,zero,7d50 <_putc_r+0x54>
    7d28:	30800017 	ldw	r2,0(r6)
    7d2c:	11400005 	stb	r5,0(r2)
    7d30:	30800017 	ldw	r2,0(r6)
    7d34:	10c00044 	addi	r3,r2,1
    7d38:	30c00015 	stw	r3,0(r6)
    7d3c:	10800003 	ldbu	r2,0(r2)
    7d40:	dfc00317 	ldw	ra,12(sp)
    7d44:	dc000217 	ldw	r16,8(sp)
    7d48:	dec00404 	addi	sp,sp,16
    7d4c:	f800283a 	ret
    7d50:	30c00617 	ldw	r3,24(r6)
    7d54:	10c00616 	blt	r2,r3,7d70 <_putc_r+0x74>
    7d58:	30800017 	ldw	r2,0(r6)
    7d5c:	00c00284 	movi	r3,10
    7d60:	11400005 	stb	r5,0(r2)
    7d64:	30800017 	ldw	r2,0(r6)
    7d68:	11400003 	ldbu	r5,0(r2)
    7d6c:	28fff11e 	bne	r5,r3,7d34 <__alt_data_end+0xfffd6ff4>
    7d70:	8009883a 	mov	r4,r16
    7d74:	dfc00317 	ldw	ra,12(sp)
    7d78:	dc000217 	ldw	r16,8(sp)
    7d7c:	dec00404 	addi	sp,sp,16
    7d80:	0009d4c1 	jmpi	9d4c <__swbuf_r>
    7d84:	d9400015 	stw	r5,0(sp)
    7d88:	d9800115 	stw	r6,4(sp)
    7d8c:	0005c980 	call	5c98 <__sinit>
    7d90:	d9800117 	ldw	r6,4(sp)
    7d94:	d9400017 	ldw	r5,0(sp)
    7d98:	003fdf06 	br	7d18 <__alt_data_end+0xfffd6fd8>

00007d9c <putc>:
    7d9c:	008000b4 	movhi	r2,2
    7da0:	defffc04 	addi	sp,sp,-16
    7da4:	10aae204 	addi	r2,r2,-21624
    7da8:	dc000115 	stw	r16,4(sp)
    7dac:	14000017 	ldw	r16,0(r2)
    7db0:	dc400215 	stw	r17,8(sp)
    7db4:	dfc00315 	stw	ra,12(sp)
    7db8:	2023883a 	mov	r17,r4
    7dbc:	80000226 	beq	r16,zero,7dc8 <putc+0x2c>
    7dc0:	80800e17 	ldw	r2,56(r16)
    7dc4:	10001a26 	beq	r2,zero,7e30 <putc+0x94>
    7dc8:	28800217 	ldw	r2,8(r5)
    7dcc:	10bfffc4 	addi	r2,r2,-1
    7dd0:	28800215 	stw	r2,8(r5)
    7dd4:	10000b16 	blt	r2,zero,7e04 <putc+0x68>
    7dd8:	28800017 	ldw	r2,0(r5)
    7ddc:	14400005 	stb	r17,0(r2)
    7de0:	28800017 	ldw	r2,0(r5)
    7de4:	10c00044 	addi	r3,r2,1
    7de8:	28c00015 	stw	r3,0(r5)
    7dec:	10800003 	ldbu	r2,0(r2)
    7df0:	dfc00317 	ldw	ra,12(sp)
    7df4:	dc400217 	ldw	r17,8(sp)
    7df8:	dc000117 	ldw	r16,4(sp)
    7dfc:	dec00404 	addi	sp,sp,16
    7e00:	f800283a 	ret
    7e04:	28c00617 	ldw	r3,24(r5)
    7e08:	10c00e16 	blt	r2,r3,7e44 <putc+0xa8>
    7e0c:	28800017 	ldw	r2,0(r5)
    7e10:	01000284 	movi	r4,10
    7e14:	14400005 	stb	r17,0(r2)
    7e18:	28800017 	ldw	r2,0(r5)
    7e1c:	10c00003 	ldbu	r3,0(r2)
    7e20:	193ff01e 	bne	r3,r4,7de4 <__alt_data_end+0xfffd70a4>
    7e24:	280d883a 	mov	r6,r5
    7e28:	180b883a 	mov	r5,r3
    7e2c:	00000706 	br	7e4c <putc+0xb0>
    7e30:	8009883a 	mov	r4,r16
    7e34:	d9400015 	stw	r5,0(sp)
    7e38:	0005c980 	call	5c98 <__sinit>
    7e3c:	d9400017 	ldw	r5,0(sp)
    7e40:	003fe106 	br	7dc8 <__alt_data_end+0xfffd7088>
    7e44:	280d883a 	mov	r6,r5
    7e48:	880b883a 	mov	r5,r17
    7e4c:	8009883a 	mov	r4,r16
    7e50:	dfc00317 	ldw	ra,12(sp)
    7e54:	dc400217 	ldw	r17,8(sp)
    7e58:	dc000117 	ldw	r16,4(sp)
    7e5c:	dec00404 	addi	sp,sp,16
    7e60:	0009d4c1 	jmpi	9d4c <__swbuf_r>

00007e64 <_realloc_r>:
    7e64:	defff604 	addi	sp,sp,-40
    7e68:	dc800215 	stw	r18,8(sp)
    7e6c:	dfc00915 	stw	ra,36(sp)
    7e70:	df000815 	stw	fp,32(sp)
    7e74:	ddc00715 	stw	r23,28(sp)
    7e78:	dd800615 	stw	r22,24(sp)
    7e7c:	dd400515 	stw	r21,20(sp)
    7e80:	dd000415 	stw	r20,16(sp)
    7e84:	dcc00315 	stw	r19,12(sp)
    7e88:	dc400115 	stw	r17,4(sp)
    7e8c:	dc000015 	stw	r16,0(sp)
    7e90:	3025883a 	mov	r18,r6
    7e94:	2800b726 	beq	r5,zero,8174 <_realloc_r+0x310>
    7e98:	282b883a 	mov	r21,r5
    7e9c:	2029883a 	mov	r20,r4
    7ea0:	000e5d40 	call	e5d4 <__malloc_lock>
    7ea4:	a8bfff17 	ldw	r2,-4(r21)
    7ea8:	043fff04 	movi	r16,-4
    7eac:	90c002c4 	addi	r3,r18,11
    7eb0:	01000584 	movi	r4,22
    7eb4:	acfffe04 	addi	r19,r21,-8
    7eb8:	1420703a 	and	r16,r2,r16
    7ebc:	20c0332e 	bgeu	r4,r3,7f8c <_realloc_r+0x128>
    7ec0:	047ffe04 	movi	r17,-8
    7ec4:	1c62703a 	and	r17,r3,r17
    7ec8:	8807883a 	mov	r3,r17
    7ecc:	88005816 	blt	r17,zero,8030 <_realloc_r+0x1cc>
    7ed0:	8c805736 	bltu	r17,r18,8030 <_realloc_r+0x1cc>
    7ed4:	80c0300e 	bge	r16,r3,7f98 <_realloc_r+0x134>
    7ed8:	070000b4 	movhi	fp,2
    7edc:	e7242604 	addi	fp,fp,-28520
    7ee0:	e1c00217 	ldw	r7,8(fp)
    7ee4:	9c09883a 	add	r4,r19,r16
    7ee8:	22000117 	ldw	r8,4(r4)
    7eec:	21c06326 	beq	r4,r7,807c <_realloc_r+0x218>
    7ef0:	017fff84 	movi	r5,-2
    7ef4:	414a703a 	and	r5,r8,r5
    7ef8:	214b883a 	add	r5,r4,r5
    7efc:	29800117 	ldw	r6,4(r5)
    7f00:	3180004c 	andi	r6,r6,1
    7f04:	30003f26 	beq	r6,zero,8004 <_realloc_r+0x1a0>
    7f08:	1080004c 	andi	r2,r2,1
    7f0c:	10008326 	beq	r2,zero,811c <_realloc_r+0x2b8>
    7f10:	900b883a 	mov	r5,r18
    7f14:	a009883a 	mov	r4,r20
    7f18:	0000c100 	call	c10 <_malloc_r>
    7f1c:	1025883a 	mov	r18,r2
    7f20:	10011e26 	beq	r2,zero,839c <_realloc_r+0x538>
    7f24:	a93fff17 	ldw	r4,-4(r21)
    7f28:	10fffe04 	addi	r3,r2,-8
    7f2c:	00bfff84 	movi	r2,-2
    7f30:	2084703a 	and	r2,r4,r2
    7f34:	9885883a 	add	r2,r19,r2
    7f38:	1880ee26 	beq	r3,r2,82f4 <_realloc_r+0x490>
    7f3c:	81bfff04 	addi	r6,r16,-4
    7f40:	00800904 	movi	r2,36
    7f44:	1180b836 	bltu	r2,r6,8228 <_realloc_r+0x3c4>
    7f48:	00c004c4 	movi	r3,19
    7f4c:	19809636 	bltu	r3,r6,81a8 <_realloc_r+0x344>
    7f50:	9005883a 	mov	r2,r18
    7f54:	a807883a 	mov	r3,r21
    7f58:	19000017 	ldw	r4,0(r3)
    7f5c:	11000015 	stw	r4,0(r2)
    7f60:	19000117 	ldw	r4,4(r3)
    7f64:	11000115 	stw	r4,4(r2)
    7f68:	18c00217 	ldw	r3,8(r3)
    7f6c:	10c00215 	stw	r3,8(r2)
    7f70:	a80b883a 	mov	r5,r21
    7f74:	a009883a 	mov	r4,r20
    7f78:	0005e0c0 	call	5e0c <_free_r>
    7f7c:	a009883a 	mov	r4,r20
    7f80:	000e6f40 	call	e6f4 <__malloc_unlock>
    7f84:	9005883a 	mov	r2,r18
    7f88:	00001206 	br	7fd4 <_realloc_r+0x170>
    7f8c:	00c00404 	movi	r3,16
    7f90:	1823883a 	mov	r17,r3
    7f94:	003fce06 	br	7ed0 <__alt_data_end+0xfffd7190>
    7f98:	a825883a 	mov	r18,r21
    7f9c:	8445c83a 	sub	r2,r16,r17
    7fa0:	00c003c4 	movi	r3,15
    7fa4:	18802636 	bltu	r3,r2,8040 <_realloc_r+0x1dc>
    7fa8:	99800117 	ldw	r6,4(r19)
    7fac:	9c07883a 	add	r3,r19,r16
    7fb0:	3180004c 	andi	r6,r6,1
    7fb4:	3420b03a 	or	r16,r6,r16
    7fb8:	9c000115 	stw	r16,4(r19)
    7fbc:	18800117 	ldw	r2,4(r3)
    7fc0:	10800054 	ori	r2,r2,1
    7fc4:	18800115 	stw	r2,4(r3)
    7fc8:	a009883a 	mov	r4,r20
    7fcc:	000e6f40 	call	e6f4 <__malloc_unlock>
    7fd0:	9005883a 	mov	r2,r18
    7fd4:	dfc00917 	ldw	ra,36(sp)
    7fd8:	df000817 	ldw	fp,32(sp)
    7fdc:	ddc00717 	ldw	r23,28(sp)
    7fe0:	dd800617 	ldw	r22,24(sp)
    7fe4:	dd400517 	ldw	r21,20(sp)
    7fe8:	dd000417 	ldw	r20,16(sp)
    7fec:	dcc00317 	ldw	r19,12(sp)
    7ff0:	dc800217 	ldw	r18,8(sp)
    7ff4:	dc400117 	ldw	r17,4(sp)
    7ff8:	dc000017 	ldw	r16,0(sp)
    7ffc:	dec00a04 	addi	sp,sp,40
    8000:	f800283a 	ret
    8004:	017fff04 	movi	r5,-4
    8008:	414a703a 	and	r5,r8,r5
    800c:	814d883a 	add	r6,r16,r5
    8010:	30c01f16 	blt	r6,r3,8090 <_realloc_r+0x22c>
    8014:	20800317 	ldw	r2,12(r4)
    8018:	20c00217 	ldw	r3,8(r4)
    801c:	a825883a 	mov	r18,r21
    8020:	3021883a 	mov	r16,r6
    8024:	18800315 	stw	r2,12(r3)
    8028:	10c00215 	stw	r3,8(r2)
    802c:	003fdb06 	br	7f9c <__alt_data_end+0xfffd725c>
    8030:	00800304 	movi	r2,12
    8034:	a0800015 	stw	r2,0(r20)
    8038:	0005883a 	mov	r2,zero
    803c:	003fe506 	br	7fd4 <__alt_data_end+0xfffd7294>
    8040:	98c00117 	ldw	r3,4(r19)
    8044:	9c4b883a 	add	r5,r19,r17
    8048:	11000054 	ori	r4,r2,1
    804c:	18c0004c 	andi	r3,r3,1
    8050:	1c62b03a 	or	r17,r3,r17
    8054:	9c400115 	stw	r17,4(r19)
    8058:	29000115 	stw	r4,4(r5)
    805c:	2885883a 	add	r2,r5,r2
    8060:	10c00117 	ldw	r3,4(r2)
    8064:	29400204 	addi	r5,r5,8
    8068:	a009883a 	mov	r4,r20
    806c:	18c00054 	ori	r3,r3,1
    8070:	10c00115 	stw	r3,4(r2)
    8074:	0005e0c0 	call	5e0c <_free_r>
    8078:	003fd306 	br	7fc8 <__alt_data_end+0xfffd7288>
    807c:	017fff04 	movi	r5,-4
    8080:	414a703a 	and	r5,r8,r5
    8084:	89800404 	addi	r6,r17,16
    8088:	8151883a 	add	r8,r16,r5
    808c:	4180590e 	bge	r8,r6,81f4 <_realloc_r+0x390>
    8090:	1080004c 	andi	r2,r2,1
    8094:	103f9e1e 	bne	r2,zero,7f10 <__alt_data_end+0xfffd71d0>
    8098:	adbffe17 	ldw	r22,-8(r21)
    809c:	00bfff04 	movi	r2,-4
    80a0:	9dadc83a 	sub	r22,r19,r22
    80a4:	b1800117 	ldw	r6,4(r22)
    80a8:	3084703a 	and	r2,r6,r2
    80ac:	20002026 	beq	r4,zero,8130 <_realloc_r+0x2cc>
    80b0:	80af883a 	add	r23,r16,r2
    80b4:	b96f883a 	add	r23,r23,r5
    80b8:	21c05f26 	beq	r4,r7,8238 <_realloc_r+0x3d4>
    80bc:	b8c01c16 	blt	r23,r3,8130 <_realloc_r+0x2cc>
    80c0:	20800317 	ldw	r2,12(r4)
    80c4:	20c00217 	ldw	r3,8(r4)
    80c8:	81bfff04 	addi	r6,r16,-4
    80cc:	01000904 	movi	r4,36
    80d0:	18800315 	stw	r2,12(r3)
    80d4:	10c00215 	stw	r3,8(r2)
    80d8:	b0c00217 	ldw	r3,8(r22)
    80dc:	b0800317 	ldw	r2,12(r22)
    80e0:	b4800204 	addi	r18,r22,8
    80e4:	18800315 	stw	r2,12(r3)
    80e8:	10c00215 	stw	r3,8(r2)
    80ec:	21801b36 	bltu	r4,r6,815c <_realloc_r+0x2f8>
    80f0:	008004c4 	movi	r2,19
    80f4:	1180352e 	bgeu	r2,r6,81cc <_realloc_r+0x368>
    80f8:	a8800017 	ldw	r2,0(r21)
    80fc:	b0800215 	stw	r2,8(r22)
    8100:	a8800117 	ldw	r2,4(r21)
    8104:	b0800315 	stw	r2,12(r22)
    8108:	008006c4 	movi	r2,27
    810c:	11807f36 	bltu	r2,r6,830c <_realloc_r+0x4a8>
    8110:	b0800404 	addi	r2,r22,16
    8114:	ad400204 	addi	r21,r21,8
    8118:	00002d06 	br	81d0 <_realloc_r+0x36c>
    811c:	adbffe17 	ldw	r22,-8(r21)
    8120:	00bfff04 	movi	r2,-4
    8124:	9dadc83a 	sub	r22,r19,r22
    8128:	b1000117 	ldw	r4,4(r22)
    812c:	2084703a 	and	r2,r4,r2
    8130:	b03f7726 	beq	r22,zero,7f10 <__alt_data_end+0xfffd71d0>
    8134:	80af883a 	add	r23,r16,r2
    8138:	b8ff7516 	blt	r23,r3,7f10 <__alt_data_end+0xfffd71d0>
    813c:	b0800317 	ldw	r2,12(r22)
    8140:	b0c00217 	ldw	r3,8(r22)
    8144:	81bfff04 	addi	r6,r16,-4
    8148:	01000904 	movi	r4,36
    814c:	18800315 	stw	r2,12(r3)
    8150:	10c00215 	stw	r3,8(r2)
    8154:	b4800204 	addi	r18,r22,8
    8158:	21bfe52e 	bgeu	r4,r6,80f0 <__alt_data_end+0xfffd73b0>
    815c:	a80b883a 	mov	r5,r21
    8160:	9009883a 	mov	r4,r18
    8164:	0006ae80 	call	6ae8 <memmove>
    8168:	b821883a 	mov	r16,r23
    816c:	b027883a 	mov	r19,r22
    8170:	003f8a06 	br	7f9c <__alt_data_end+0xfffd725c>
    8174:	300b883a 	mov	r5,r6
    8178:	dfc00917 	ldw	ra,36(sp)
    817c:	df000817 	ldw	fp,32(sp)
    8180:	ddc00717 	ldw	r23,28(sp)
    8184:	dd800617 	ldw	r22,24(sp)
    8188:	dd400517 	ldw	r21,20(sp)
    818c:	dd000417 	ldw	r20,16(sp)
    8190:	dcc00317 	ldw	r19,12(sp)
    8194:	dc800217 	ldw	r18,8(sp)
    8198:	dc400117 	ldw	r17,4(sp)
    819c:	dc000017 	ldw	r16,0(sp)
    81a0:	dec00a04 	addi	sp,sp,40
    81a4:	0000c101 	jmpi	c10 <_malloc_r>
    81a8:	a8c00017 	ldw	r3,0(r21)
    81ac:	90c00015 	stw	r3,0(r18)
    81b0:	a8c00117 	ldw	r3,4(r21)
    81b4:	90c00115 	stw	r3,4(r18)
    81b8:	00c006c4 	movi	r3,27
    81bc:	19804536 	bltu	r3,r6,82d4 <_realloc_r+0x470>
    81c0:	90800204 	addi	r2,r18,8
    81c4:	a8c00204 	addi	r3,r21,8
    81c8:	003f6306 	br	7f58 <__alt_data_end+0xfffd7218>
    81cc:	9005883a 	mov	r2,r18
    81d0:	a8c00017 	ldw	r3,0(r21)
    81d4:	b821883a 	mov	r16,r23
    81d8:	b027883a 	mov	r19,r22
    81dc:	10c00015 	stw	r3,0(r2)
    81e0:	a8c00117 	ldw	r3,4(r21)
    81e4:	10c00115 	stw	r3,4(r2)
    81e8:	a8c00217 	ldw	r3,8(r21)
    81ec:	10c00215 	stw	r3,8(r2)
    81f0:	003f6a06 	br	7f9c <__alt_data_end+0xfffd725c>
    81f4:	9c67883a 	add	r19,r19,r17
    81f8:	4445c83a 	sub	r2,r8,r17
    81fc:	e4c00215 	stw	r19,8(fp)
    8200:	10800054 	ori	r2,r2,1
    8204:	98800115 	stw	r2,4(r19)
    8208:	a8bfff17 	ldw	r2,-4(r21)
    820c:	a009883a 	mov	r4,r20
    8210:	1080004c 	andi	r2,r2,1
    8214:	1462b03a 	or	r17,r2,r17
    8218:	ac7fff15 	stw	r17,-4(r21)
    821c:	000e6f40 	call	e6f4 <__malloc_unlock>
    8220:	a805883a 	mov	r2,r21
    8224:	003f6b06 	br	7fd4 <__alt_data_end+0xfffd7294>
    8228:	a80b883a 	mov	r5,r21
    822c:	9009883a 	mov	r4,r18
    8230:	0006ae80 	call	6ae8 <memmove>
    8234:	003f4e06 	br	7f70 <__alt_data_end+0xfffd7230>
    8238:	89000404 	addi	r4,r17,16
    823c:	b93fbc16 	blt	r23,r4,8130 <__alt_data_end+0xfffd73f0>
    8240:	b0800317 	ldw	r2,12(r22)
    8244:	b0c00217 	ldw	r3,8(r22)
    8248:	81bfff04 	addi	r6,r16,-4
    824c:	01000904 	movi	r4,36
    8250:	18800315 	stw	r2,12(r3)
    8254:	10c00215 	stw	r3,8(r2)
    8258:	b4800204 	addi	r18,r22,8
    825c:	21804336 	bltu	r4,r6,836c <_realloc_r+0x508>
    8260:	008004c4 	movi	r2,19
    8264:	11803f2e 	bgeu	r2,r6,8364 <_realloc_r+0x500>
    8268:	a8800017 	ldw	r2,0(r21)
    826c:	b0800215 	stw	r2,8(r22)
    8270:	a8800117 	ldw	r2,4(r21)
    8274:	b0800315 	stw	r2,12(r22)
    8278:	008006c4 	movi	r2,27
    827c:	11803f36 	bltu	r2,r6,837c <_realloc_r+0x518>
    8280:	b0800404 	addi	r2,r22,16
    8284:	ad400204 	addi	r21,r21,8
    8288:	a8c00017 	ldw	r3,0(r21)
    828c:	10c00015 	stw	r3,0(r2)
    8290:	a8c00117 	ldw	r3,4(r21)
    8294:	10c00115 	stw	r3,4(r2)
    8298:	a8c00217 	ldw	r3,8(r21)
    829c:	10c00215 	stw	r3,8(r2)
    82a0:	b447883a 	add	r3,r22,r17
    82a4:	bc45c83a 	sub	r2,r23,r17
    82a8:	e0c00215 	stw	r3,8(fp)
    82ac:	10800054 	ori	r2,r2,1
    82b0:	18800115 	stw	r2,4(r3)
    82b4:	b0800117 	ldw	r2,4(r22)
    82b8:	a009883a 	mov	r4,r20
    82bc:	1080004c 	andi	r2,r2,1
    82c0:	1462b03a 	or	r17,r2,r17
    82c4:	b4400115 	stw	r17,4(r22)
    82c8:	000e6f40 	call	e6f4 <__malloc_unlock>
    82cc:	9005883a 	mov	r2,r18
    82d0:	003f4006 	br	7fd4 <__alt_data_end+0xfffd7294>
    82d4:	a8c00217 	ldw	r3,8(r21)
    82d8:	90c00215 	stw	r3,8(r18)
    82dc:	a8c00317 	ldw	r3,12(r21)
    82e0:	90c00315 	stw	r3,12(r18)
    82e4:	30801126 	beq	r6,r2,832c <_realloc_r+0x4c8>
    82e8:	90800404 	addi	r2,r18,16
    82ec:	a8c00404 	addi	r3,r21,16
    82f0:	003f1906 	br	7f58 <__alt_data_end+0xfffd7218>
    82f4:	90ffff17 	ldw	r3,-4(r18)
    82f8:	00bfff04 	movi	r2,-4
    82fc:	a825883a 	mov	r18,r21
    8300:	1884703a 	and	r2,r3,r2
    8304:	80a1883a 	add	r16,r16,r2
    8308:	003f2406 	br	7f9c <__alt_data_end+0xfffd725c>
    830c:	a8800217 	ldw	r2,8(r21)
    8310:	b0800415 	stw	r2,16(r22)
    8314:	a8800317 	ldw	r2,12(r21)
    8318:	b0800515 	stw	r2,20(r22)
    831c:	31000a26 	beq	r6,r4,8348 <_realloc_r+0x4e4>
    8320:	b0800604 	addi	r2,r22,24
    8324:	ad400404 	addi	r21,r21,16
    8328:	003fa906 	br	81d0 <__alt_data_end+0xfffd7490>
    832c:	a9000417 	ldw	r4,16(r21)
    8330:	90800604 	addi	r2,r18,24
    8334:	a8c00604 	addi	r3,r21,24
    8338:	91000415 	stw	r4,16(r18)
    833c:	a9000517 	ldw	r4,20(r21)
    8340:	91000515 	stw	r4,20(r18)
    8344:	003f0406 	br	7f58 <__alt_data_end+0xfffd7218>
    8348:	a8c00417 	ldw	r3,16(r21)
    834c:	ad400604 	addi	r21,r21,24
    8350:	b0800804 	addi	r2,r22,32
    8354:	b0c00615 	stw	r3,24(r22)
    8358:	a8ffff17 	ldw	r3,-4(r21)
    835c:	b0c00715 	stw	r3,28(r22)
    8360:	003f9b06 	br	81d0 <__alt_data_end+0xfffd7490>
    8364:	9005883a 	mov	r2,r18
    8368:	003fc706 	br	8288 <__alt_data_end+0xfffd7548>
    836c:	a80b883a 	mov	r5,r21
    8370:	9009883a 	mov	r4,r18
    8374:	0006ae80 	call	6ae8 <memmove>
    8378:	003fc906 	br	82a0 <__alt_data_end+0xfffd7560>
    837c:	a8800217 	ldw	r2,8(r21)
    8380:	b0800415 	stw	r2,16(r22)
    8384:	a8800317 	ldw	r2,12(r21)
    8388:	b0800515 	stw	r2,20(r22)
    838c:	31000726 	beq	r6,r4,83ac <_realloc_r+0x548>
    8390:	b0800604 	addi	r2,r22,24
    8394:	ad400404 	addi	r21,r21,16
    8398:	003fbb06 	br	8288 <__alt_data_end+0xfffd7548>
    839c:	a009883a 	mov	r4,r20
    83a0:	000e6f40 	call	e6f4 <__malloc_unlock>
    83a4:	0005883a 	mov	r2,zero
    83a8:	003f0a06 	br	7fd4 <__alt_data_end+0xfffd7294>
    83ac:	a8c00417 	ldw	r3,16(r21)
    83b0:	ad400604 	addi	r21,r21,24
    83b4:	b0800804 	addi	r2,r22,32
    83b8:	b0c00615 	stw	r3,24(r22)
    83bc:	a8ffff17 	ldw	r3,-4(r21)
    83c0:	b0c00715 	stw	r3,28(r22)
    83c4:	003fb006 	br	8288 <__alt_data_end+0xfffd7548>

000083c8 <__fpclassifyd>:
    83c8:	00a00034 	movhi	r2,32768
    83cc:	10bfffc4 	addi	r2,r2,-1
    83d0:	2884703a 	and	r2,r5,r2
    83d4:	10000726 	beq	r2,zero,83f4 <__fpclassifyd+0x2c>
    83d8:	00fffc34 	movhi	r3,65520
    83dc:	019ff834 	movhi	r6,32736
    83e0:	28c7883a 	add	r3,r5,r3
    83e4:	31bfffc4 	addi	r6,r6,-1
    83e8:	30c00536 	bltu	r6,r3,8400 <__fpclassifyd+0x38>
    83ec:	00800104 	movi	r2,4
    83f0:	f800283a 	ret
    83f4:	2000021e 	bne	r4,zero,8400 <__fpclassifyd+0x38>
    83f8:	00800084 	movi	r2,2
    83fc:	f800283a 	ret
    8400:	00dffc34 	movhi	r3,32752
    8404:	019ff834 	movhi	r6,32736
    8408:	28cb883a 	add	r5,r5,r3
    840c:	31bfffc4 	addi	r6,r6,-1
    8410:	317ff62e 	bgeu	r6,r5,83ec <__alt_data_end+0xfffd76ac>
    8414:	01400434 	movhi	r5,16
    8418:	297fffc4 	addi	r5,r5,-1
    841c:	28800236 	bltu	r5,r2,8428 <__fpclassifyd+0x60>
    8420:	008000c4 	movi	r2,3
    8424:	f800283a 	ret
    8428:	10c00226 	beq	r2,r3,8434 <__fpclassifyd+0x6c>
    842c:	0005883a 	mov	r2,zero
    8430:	f800283a 	ret
    8434:	2005003a 	cmpeq	r2,r4,zero
    8438:	f800283a 	ret

0000843c <__sread>:
    843c:	defffe04 	addi	sp,sp,-8
    8440:	dc000015 	stw	r16,0(sp)
    8444:	2821883a 	mov	r16,r5
    8448:	2940038f 	ldh	r5,14(r5)
    844c:	dfc00115 	stw	ra,4(sp)
    8450:	000a4500 	call	a450 <_read_r>
    8454:	10000716 	blt	r2,zero,8474 <__sread+0x38>
    8458:	80c01417 	ldw	r3,80(r16)
    845c:	1887883a 	add	r3,r3,r2
    8460:	80c01415 	stw	r3,80(r16)
    8464:	dfc00117 	ldw	ra,4(sp)
    8468:	dc000017 	ldw	r16,0(sp)
    846c:	dec00204 	addi	sp,sp,8
    8470:	f800283a 	ret
    8474:	80c0030b 	ldhu	r3,12(r16)
    8478:	18fbffcc 	andi	r3,r3,61439
    847c:	80c0030d 	sth	r3,12(r16)
    8480:	dfc00117 	ldw	ra,4(sp)
    8484:	dc000017 	ldw	r16,0(sp)
    8488:	dec00204 	addi	sp,sp,8
    848c:	f800283a 	ret

00008490 <__seofread>:
    8490:	0005883a 	mov	r2,zero
    8494:	f800283a 	ret

00008498 <__swrite>:
    8498:	2880030b 	ldhu	r2,12(r5)
    849c:	defffb04 	addi	sp,sp,-20
    84a0:	dcc00315 	stw	r19,12(sp)
    84a4:	dc800215 	stw	r18,8(sp)
    84a8:	dc400115 	stw	r17,4(sp)
    84ac:	dc000015 	stw	r16,0(sp)
    84b0:	dfc00415 	stw	ra,16(sp)
    84b4:	10c0400c 	andi	r3,r2,256
    84b8:	2821883a 	mov	r16,r5
    84bc:	2023883a 	mov	r17,r4
    84c0:	3025883a 	mov	r18,r6
    84c4:	3827883a 	mov	r19,r7
    84c8:	18000526 	beq	r3,zero,84e0 <__swrite+0x48>
    84cc:	2940038f 	ldh	r5,14(r5)
    84d0:	01c00084 	movi	r7,2
    84d4:	000d883a 	mov	r6,zero
    84d8:	000a3f00 	call	a3f0 <_lseek_r>
    84dc:	8080030b 	ldhu	r2,12(r16)
    84e0:	8140038f 	ldh	r5,14(r16)
    84e4:	10bbffcc 	andi	r2,r2,61439
    84e8:	980f883a 	mov	r7,r19
    84ec:	900d883a 	mov	r6,r18
    84f0:	8809883a 	mov	r4,r17
    84f4:	8080030d 	sth	r2,12(r16)
    84f8:	dfc00417 	ldw	ra,16(sp)
    84fc:	dcc00317 	ldw	r19,12(sp)
    8500:	dc800217 	ldw	r18,8(sp)
    8504:	dc400117 	ldw	r17,4(sp)
    8508:	dc000017 	ldw	r16,0(sp)
    850c:	dec00504 	addi	sp,sp,20
    8510:	0009ea41 	jmpi	9ea4 <_write_r>

00008514 <__sseek>:
    8514:	defffe04 	addi	sp,sp,-8
    8518:	dc000015 	stw	r16,0(sp)
    851c:	2821883a 	mov	r16,r5
    8520:	2940038f 	ldh	r5,14(r5)
    8524:	dfc00115 	stw	ra,4(sp)
    8528:	000a3f00 	call	a3f0 <_lseek_r>
    852c:	00ffffc4 	movi	r3,-1
    8530:	10c00826 	beq	r2,r3,8554 <__sseek+0x40>
    8534:	80c0030b 	ldhu	r3,12(r16)
    8538:	80801415 	stw	r2,80(r16)
    853c:	18c40014 	ori	r3,r3,4096
    8540:	80c0030d 	sth	r3,12(r16)
    8544:	dfc00117 	ldw	ra,4(sp)
    8548:	dc000017 	ldw	r16,0(sp)
    854c:	dec00204 	addi	sp,sp,8
    8550:	f800283a 	ret
    8554:	80c0030b 	ldhu	r3,12(r16)
    8558:	18fbffcc 	andi	r3,r3,61439
    855c:	80c0030d 	sth	r3,12(r16)
    8560:	dfc00117 	ldw	ra,4(sp)
    8564:	dc000017 	ldw	r16,0(sp)
    8568:	dec00204 	addi	sp,sp,8
    856c:	f800283a 	ret

00008570 <__sclose>:
    8570:	2940038f 	ldh	r5,14(r5)
    8574:	0009f041 	jmpi	9f04 <_close_r>

00008578 <strcmp>:
    8578:	2144b03a 	or	r2,r4,r5
    857c:	108000cc 	andi	r2,r2,3
    8580:	1000171e 	bne	r2,zero,85e0 <strcmp+0x68>
    8584:	20800017 	ldw	r2,0(r4)
    8588:	28c00017 	ldw	r3,0(r5)
    858c:	10c0141e 	bne	r2,r3,85e0 <strcmp+0x68>
    8590:	027fbff4 	movhi	r9,65279
    8594:	4a7fbfc4 	addi	r9,r9,-257
    8598:	0086303a 	nor	r3,zero,r2
    859c:	02202074 	movhi	r8,32897
    85a0:	1245883a 	add	r2,r2,r9
    85a4:	42202004 	addi	r8,r8,-32640
    85a8:	10c4703a 	and	r2,r2,r3
    85ac:	1204703a 	and	r2,r2,r8
    85b0:	10000226 	beq	r2,zero,85bc <strcmp+0x44>
    85b4:	00002306 	br	8644 <strcmp+0xcc>
    85b8:	1000221e 	bne	r2,zero,8644 <strcmp+0xcc>
    85bc:	21000104 	addi	r4,r4,4
    85c0:	20c00017 	ldw	r3,0(r4)
    85c4:	29400104 	addi	r5,r5,4
    85c8:	29800017 	ldw	r6,0(r5)
    85cc:	1a4f883a 	add	r7,r3,r9
    85d0:	00c4303a 	nor	r2,zero,r3
    85d4:	3884703a 	and	r2,r7,r2
    85d8:	1204703a 	and	r2,r2,r8
    85dc:	19bff626 	beq	r3,r6,85b8 <__alt_data_end+0xfffd7878>
    85e0:	20800003 	ldbu	r2,0(r4)
    85e4:	10c03fcc 	andi	r3,r2,255
    85e8:	18c0201c 	xori	r3,r3,128
    85ec:	18ffe004 	addi	r3,r3,-128
    85f0:	18000c26 	beq	r3,zero,8624 <strcmp+0xac>
    85f4:	29800007 	ldb	r6,0(r5)
    85f8:	19800326 	beq	r3,r6,8608 <strcmp+0x90>
    85fc:	00001306 	br	864c <strcmp+0xd4>
    8600:	29800007 	ldb	r6,0(r5)
    8604:	11800b1e 	bne	r2,r6,8634 <strcmp+0xbc>
    8608:	21000044 	addi	r4,r4,1
    860c:	20c00003 	ldbu	r3,0(r4)
    8610:	29400044 	addi	r5,r5,1
    8614:	18803fcc 	andi	r2,r3,255
    8618:	1080201c 	xori	r2,r2,128
    861c:	10bfe004 	addi	r2,r2,-128
    8620:	103ff71e 	bne	r2,zero,8600 <__alt_data_end+0xfffd78c0>
    8624:	0007883a 	mov	r3,zero
    8628:	28800003 	ldbu	r2,0(r5)
    862c:	1885c83a 	sub	r2,r3,r2
    8630:	f800283a 	ret
    8634:	28800003 	ldbu	r2,0(r5)
    8638:	18c03fcc 	andi	r3,r3,255
    863c:	1885c83a 	sub	r2,r3,r2
    8640:	f800283a 	ret
    8644:	0005883a 	mov	r2,zero
    8648:	f800283a 	ret
    864c:	10c03fcc 	andi	r3,r2,255
    8650:	003ff506 	br	8628 <__alt_data_end+0xfffd78e8>

00008654 <__sprint_r.part.0>:
    8654:	28801917 	ldw	r2,100(r5)
    8658:	defff604 	addi	sp,sp,-40
    865c:	dd400515 	stw	r21,20(sp)
    8660:	dfc00915 	stw	ra,36(sp)
    8664:	df000815 	stw	fp,32(sp)
    8668:	ddc00715 	stw	r23,28(sp)
    866c:	dd800615 	stw	r22,24(sp)
    8670:	dd000415 	stw	r20,16(sp)
    8674:	dcc00315 	stw	r19,12(sp)
    8678:	dc800215 	stw	r18,8(sp)
    867c:	dc400115 	stw	r17,4(sp)
    8680:	dc000015 	stw	r16,0(sp)
    8684:	1088000c 	andi	r2,r2,8192
    8688:	302b883a 	mov	r21,r6
    868c:	10002e26 	beq	r2,zero,8748 <__sprint_r.part.0+0xf4>
    8690:	30800217 	ldw	r2,8(r6)
    8694:	35800017 	ldw	r22,0(r6)
    8698:	10002926 	beq	r2,zero,8740 <__sprint_r.part.0+0xec>
    869c:	2827883a 	mov	r19,r5
    86a0:	2029883a 	mov	r20,r4
    86a4:	b5c00104 	addi	r23,r22,4
    86a8:	04bfffc4 	movi	r18,-1
    86ac:	bc400017 	ldw	r17,0(r23)
    86b0:	b4000017 	ldw	r16,0(r22)
    86b4:	0039883a 	mov	fp,zero
    86b8:	8822d0ba 	srli	r17,r17,2
    86bc:	8800031e 	bne	r17,zero,86cc <__sprint_r.part.0+0x78>
    86c0:	00001806 	br	8724 <__sprint_r.part.0+0xd0>
    86c4:	84000104 	addi	r16,r16,4
    86c8:	8f001526 	beq	r17,fp,8720 <__sprint_r.part.0+0xcc>
    86cc:	81400017 	ldw	r5,0(r16)
    86d0:	980d883a 	mov	r6,r19
    86d4:	a009883a 	mov	r4,r20
    86d8:	000a29c0 	call	a29c <_fputwc_r>
    86dc:	e7000044 	addi	fp,fp,1
    86e0:	14bff81e 	bne	r2,r18,86c4 <__alt_data_end+0xfffd7984>
    86e4:	9005883a 	mov	r2,r18
    86e8:	a8000215 	stw	zero,8(r21)
    86ec:	a8000115 	stw	zero,4(r21)
    86f0:	dfc00917 	ldw	ra,36(sp)
    86f4:	df000817 	ldw	fp,32(sp)
    86f8:	ddc00717 	ldw	r23,28(sp)
    86fc:	dd800617 	ldw	r22,24(sp)
    8700:	dd400517 	ldw	r21,20(sp)
    8704:	dd000417 	ldw	r20,16(sp)
    8708:	dcc00317 	ldw	r19,12(sp)
    870c:	dc800217 	ldw	r18,8(sp)
    8710:	dc400117 	ldw	r17,4(sp)
    8714:	dc000017 	ldw	r16,0(sp)
    8718:	dec00a04 	addi	sp,sp,40
    871c:	f800283a 	ret
    8720:	a8800217 	ldw	r2,8(r21)
    8724:	8c63883a 	add	r17,r17,r17
    8728:	8c63883a 	add	r17,r17,r17
    872c:	1445c83a 	sub	r2,r2,r17
    8730:	a8800215 	stw	r2,8(r21)
    8734:	b5800204 	addi	r22,r22,8
    8738:	bdc00204 	addi	r23,r23,8
    873c:	103fdb1e 	bne	r2,zero,86ac <__alt_data_end+0xfffd796c>
    8740:	0005883a 	mov	r2,zero
    8744:	003fe806 	br	86e8 <__alt_data_end+0xfffd79a8>
    8748:	000611c0 	call	611c <__sfvwrite_r>
    874c:	003fe606 	br	86e8 <__alt_data_end+0xfffd79a8>

00008750 <__sprint_r>:
    8750:	30c00217 	ldw	r3,8(r6)
    8754:	18000126 	beq	r3,zero,875c <__sprint_r+0xc>
    8758:	00086541 	jmpi	8654 <__sprint_r.part.0>
    875c:	30000115 	stw	zero,4(r6)
    8760:	0005883a 	mov	r2,zero
    8764:	f800283a 	ret

00008768 <___vfiprintf_internal_r>:
    8768:	deffca04 	addi	sp,sp,-216
    876c:	dd403115 	stw	r21,196(sp)
    8770:	dfc03515 	stw	ra,212(sp)
    8774:	df003415 	stw	fp,208(sp)
    8778:	ddc03315 	stw	r23,204(sp)
    877c:	dd803215 	stw	r22,200(sp)
    8780:	dd003015 	stw	r20,192(sp)
    8784:	dcc02f15 	stw	r19,188(sp)
    8788:	dc802e15 	stw	r18,184(sp)
    878c:	dc402d15 	stw	r17,180(sp)
    8790:	dc002c15 	stw	r16,176(sp)
    8794:	d9002115 	stw	r4,132(sp)
    8798:	d9402015 	stw	r5,128(sp)
    879c:	d9c02215 	stw	r7,136(sp)
    87a0:	302b883a 	mov	r21,r6
    87a4:	20000226 	beq	r4,zero,87b0 <___vfiprintf_internal_r+0x48>
    87a8:	20800e17 	ldw	r2,56(r4)
    87ac:	1000cf26 	beq	r2,zero,8aec <___vfiprintf_internal_r+0x384>
    87b0:	d8c02017 	ldw	r3,128(sp)
    87b4:	1880030b 	ldhu	r2,12(r3)
    87b8:	10c8000c 	andi	r3,r2,8192
    87bc:	1800071e 	bne	r3,zero,87dc <___vfiprintf_internal_r+0x74>
    87c0:	d9402017 	ldw	r5,128(sp)
    87c4:	00f7ffc4 	movi	r3,-8193
    87c8:	10880014 	ori	r2,r2,8192
    87cc:	29001917 	ldw	r4,100(r5)
    87d0:	2880030d 	sth	r2,12(r5)
    87d4:	20c6703a 	and	r3,r4,r3
    87d8:	28c01915 	stw	r3,100(r5)
    87dc:	10c0020c 	andi	r3,r2,8
    87e0:	1800a526 	beq	r3,zero,8a78 <___vfiprintf_internal_r+0x310>
    87e4:	d9002017 	ldw	r4,128(sp)
    87e8:	20c00417 	ldw	r3,16(r4)
    87ec:	1800a226 	beq	r3,zero,8a78 <___vfiprintf_internal_r+0x310>
    87f0:	1080068c 	andi	r2,r2,26
    87f4:	00c00284 	movi	r3,10
    87f8:	10c0a826 	beq	r2,r3,8a9c <___vfiprintf_internal_r+0x334>
    87fc:	d9001a04 	addi	r4,sp,104
    8800:	d94019c4 	addi	r5,sp,103
    8804:	048000b4 	movhi	r18,2
    8808:	2145c83a 	sub	r2,r4,r5
    880c:	94a38504 	addi	r18,r18,-29164
    8810:	d9001e15 	stw	r4,120(sp)
    8814:	d9401f15 	stw	r5,124(sp)
    8818:	dec01a15 	stw	sp,104(sp)
    881c:	d8001c15 	stw	zero,112(sp)
    8820:	d8001b15 	stw	zero,108(sp)
    8824:	d811883a 	mov	r8,sp
    8828:	d8002615 	stw	zero,152(sp)
    882c:	d8002415 	stw	zero,144(sp)
    8830:	d8802815 	stw	r2,160(sp)
    8834:	a82d883a 	mov	r22,r21
    8838:	b0800007 	ldb	r2,0(r22)
    883c:	10040d26 	beq	r2,zero,9874 <___vfiprintf_internal_r+0x110c>
    8840:	00c00944 	movi	r3,37
    8844:	b029883a 	mov	r20,r22
    8848:	10c0021e 	bne	r2,r3,8854 <___vfiprintf_internal_r+0xec>
    884c:	00001606 	br	88a8 <___vfiprintf_internal_r+0x140>
    8850:	10c00326 	beq	r2,r3,8860 <___vfiprintf_internal_r+0xf8>
    8854:	a5000044 	addi	r20,r20,1
    8858:	a0800007 	ldb	r2,0(r20)
    885c:	103ffc1e 	bne	r2,zero,8850 <__alt_data_end+0xfffd7b10>
    8860:	a5a1c83a 	sub	r16,r20,r22
    8864:	80001026 	beq	r16,zero,88a8 <___vfiprintf_internal_r+0x140>
    8868:	d8c01c17 	ldw	r3,112(sp)
    886c:	d8801b17 	ldw	r2,108(sp)
    8870:	45800015 	stw	r22,0(r8)
    8874:	80c7883a 	add	r3,r16,r3
    8878:	10800044 	addi	r2,r2,1
    887c:	44000115 	stw	r16,4(r8)
    8880:	d8c01c15 	stw	r3,112(sp)
    8884:	d8801b15 	stw	r2,108(sp)
    8888:	010001c4 	movi	r4,7
    888c:	2080750e 	bge	r4,r2,8a64 <___vfiprintf_internal_r+0x2fc>
    8890:	1803951e 	bne	r3,zero,96e8 <___vfiprintf_internal_r+0xf80>
    8894:	d8c02417 	ldw	r3,144(sp)
    8898:	d8001b15 	stw	zero,108(sp)
    889c:	d811883a 	mov	r8,sp
    88a0:	1c07883a 	add	r3,r3,r16
    88a4:	d8c02415 	stw	r3,144(sp)
    88a8:	a0800007 	ldb	r2,0(r20)
    88ac:	1002e026 	beq	r2,zero,9430 <___vfiprintf_internal_r+0xcc8>
    88b0:	a5800044 	addi	r22,r20,1
    88b4:	a0c00047 	ldb	r3,1(r20)
    88b8:	d8001d85 	stb	zero,118(sp)
    88bc:	0027883a 	mov	r19,zero
    88c0:	d8002305 	stb	zero,140(sp)
    88c4:	043fffc4 	movi	r16,-1
    88c8:	d8002515 	stw	zero,148(sp)
    88cc:	0023883a 	mov	r17,zero
    88d0:	05001604 	movi	r20,88
    88d4:	05400244 	movi	r21,9
    88d8:	402f883a 	mov	r23,r8
    88dc:	b5800044 	addi	r22,r22,1
    88e0:	18bff804 	addi	r2,r3,-32
    88e4:	a0827736 	bltu	r20,r2,92c4 <___vfiprintf_internal_r+0xb5c>
    88e8:	100490ba 	slli	r2,r2,2
    88ec:	01000074 	movhi	r4,1
    88f0:	21224004 	addi	r4,r4,-30464
    88f4:	1105883a 	add	r2,r2,r4
    88f8:	10800017 	ldw	r2,0(r2)
    88fc:	1000683a 	jmp	r2
    8900:	00008fc4 	movi	zero,575
    8904:	000092c4 	movi	zero,587
    8908:	000092c4 	movi	zero,587
    890c:	00008fe0 	cmpeqi	zero,zero,575
    8910:	000092c4 	movi	zero,587
    8914:	000092c4 	movi	zero,587
    8918:	000092c4 	movi	zero,587
    891c:	000092c4 	movi	zero,587
    8920:	000092c4 	movi	zero,587
    8924:	000092c4 	movi	zero,587
    8928:	000091e8 	cmpgeui	zero,zero,583
    892c:	0000920c 	andi	zero,zero,584
    8930:	000092c4 	movi	zero,587
    8934:	00008b04 	movi	zero,556
    8938:	00009220 	cmpeqi	zero,zero,584
    893c:	000092c4 	movi	zero,587
    8940:	00008fec 	andhi	zero,zero,575
    8944:	00008ff8 	rdprs	zero,zero,575
    8948:	00008ff8 	rdprs	zero,zero,575
    894c:	00008ff8 	rdprs	zero,zero,575
    8950:	00008ff8 	rdprs	zero,zero,575
    8954:	00008ff8 	rdprs	zero,zero,575
    8958:	00008ff8 	rdprs	zero,zero,575
    895c:	00008ff8 	rdprs	zero,zero,575
    8960:	00008ff8 	rdprs	zero,zero,575
    8964:	00008ff8 	rdprs	zero,zero,575
    8968:	000092c4 	movi	zero,587
    896c:	000092c4 	movi	zero,587
    8970:	000092c4 	movi	zero,587
    8974:	000092c4 	movi	zero,587
    8978:	000092c4 	movi	zero,587
    897c:	000092c4 	movi	zero,587
    8980:	000092c4 	movi	zero,587
    8984:	000092c4 	movi	zero,587
    8988:	000092c4 	movi	zero,587
    898c:	000092c4 	movi	zero,587
    8990:	00009038 	rdprs	zero,zero,576
    8994:	000092c4 	movi	zero,587
    8998:	000092c4 	movi	zero,587
    899c:	000092c4 	movi	zero,587
    89a0:	000092c4 	movi	zero,587
    89a4:	000092c4 	movi	zero,587
    89a8:	000092c4 	movi	zero,587
    89ac:	000092c4 	movi	zero,587
    89b0:	000092c4 	movi	zero,587
    89b4:	000092c4 	movi	zero,587
    89b8:	000092c4 	movi	zero,587
    89bc:	00009074 	movhi	zero,577
    89c0:	000092c4 	movi	zero,587
    89c4:	000092c4 	movi	zero,587
    89c8:	000092c4 	movi	zero,587
    89cc:	000092c4 	movi	zero,587
    89d0:	000092c4 	movi	zero,587
    89d4:	000090d0 	cmplti	zero,zero,579
    89d8:	000092c4 	movi	zero,587
    89dc:	000092c4 	movi	zero,587
    89e0:	00009144 	movi	zero,581
    89e4:	000092c4 	movi	zero,587
    89e8:	000092c4 	movi	zero,587
    89ec:	000092c4 	movi	zero,587
    89f0:	000092c4 	movi	zero,587
    89f4:	000092c4 	movi	zero,587
    89f8:	000092c4 	movi	zero,587
    89fc:	000092c4 	movi	zero,587
    8a00:	000092c4 	movi	zero,587
    8a04:	000092c4 	movi	zero,587
    8a08:	000092c4 	movi	zero,587
    8a0c:	00008eec 	andhi	zero,zero,571
    8a10:	00008f1c 	xori	zero,zero,572
    8a14:	000092c4 	movi	zero,587
    8a18:	000092c4 	movi	zero,587
    8a1c:	000092c4 	movi	zero,587
    8a20:	0000926c 	andhi	zero,zero,585
    8a24:	00008f1c 	xori	zero,zero,572
    8a28:	000092c4 	movi	zero,587
    8a2c:	000092c4 	movi	zero,587
    8a30:	00008dc4 	movi	zero,567
    8a34:	000092c4 	movi	zero,587
    8a38:	00008dd8 	cmpnei	zero,zero,567
    8a3c:	00008e10 	cmplti	zero,zero,568
    8a40:	00008b10 	cmplti	zero,zero,556
    8a44:	00008db8 	rdprs	zero,zero,566
    8a48:	000092c4 	movi	zero,587
    8a4c:	00009184 	movi	zero,582
    8a50:	000092c4 	movi	zero,587
    8a54:	000091d0 	cmplti	zero,zero,583
    8a58:	000092c4 	movi	zero,587
    8a5c:	000092c4 	movi	zero,587
    8a60:	00008e94 	movui	zero,570
    8a64:	42000204 	addi	r8,r8,8
    8a68:	d8c02417 	ldw	r3,144(sp)
    8a6c:	1c07883a 	add	r3,r3,r16
    8a70:	d8c02415 	stw	r3,144(sp)
    8a74:	003f8c06 	br	88a8 <__alt_data_end+0xfffd7b68>
    8a78:	d9402017 	ldw	r5,128(sp)
    8a7c:	d9002117 	ldw	r4,132(sp)
    8a80:	0003c8c0 	call	3c8c <__swsetup_r>
    8a84:	1003c11e 	bne	r2,zero,998c <___vfiprintf_internal_r+0x1224>
    8a88:	d9402017 	ldw	r5,128(sp)
    8a8c:	00c00284 	movi	r3,10
    8a90:	2880030b 	ldhu	r2,12(r5)
    8a94:	1080068c 	andi	r2,r2,26
    8a98:	10ff581e 	bne	r2,r3,87fc <__alt_data_end+0xfffd7abc>
    8a9c:	d8c02017 	ldw	r3,128(sp)
    8aa0:	1880038f 	ldh	r2,14(r3)
    8aa4:	103f5516 	blt	r2,zero,87fc <__alt_data_end+0xfffd7abc>
    8aa8:	d9c02217 	ldw	r7,136(sp)
    8aac:	d9002117 	ldw	r4,132(sp)
    8ab0:	a80d883a 	mov	r6,r21
    8ab4:	180b883a 	mov	r5,r3
    8ab8:	0009c900 	call	9c90 <__sbprintf>
    8abc:	dfc03517 	ldw	ra,212(sp)
    8ac0:	df003417 	ldw	fp,208(sp)
    8ac4:	ddc03317 	ldw	r23,204(sp)
    8ac8:	dd803217 	ldw	r22,200(sp)
    8acc:	dd403117 	ldw	r21,196(sp)
    8ad0:	dd003017 	ldw	r20,192(sp)
    8ad4:	dcc02f17 	ldw	r19,188(sp)
    8ad8:	dc802e17 	ldw	r18,184(sp)
    8adc:	dc402d17 	ldw	r17,180(sp)
    8ae0:	dc002c17 	ldw	r16,176(sp)
    8ae4:	dec03604 	addi	sp,sp,216
    8ae8:	f800283a 	ret
    8aec:	0005c980 	call	5c98 <__sinit>
    8af0:	003f2f06 	br	87b0 <__alt_data_end+0xfffd7a70>
    8af4:	d8c02517 	ldw	r3,148(sp)
    8af8:	d8802215 	stw	r2,136(sp)
    8afc:	00c7c83a 	sub	r3,zero,r3
    8b00:	d8c02515 	stw	r3,148(sp)
    8b04:	8c400114 	ori	r17,r17,4
    8b08:	b0c00007 	ldb	r3,0(r22)
    8b0c:	003f7306 	br	88dc <__alt_data_end+0xfffd7b9c>
    8b10:	00800c04 	movi	r2,48
    8b14:	d9402217 	ldw	r5,136(sp)
    8b18:	d8801d05 	stb	r2,116(sp)
    8b1c:	00801e04 	movi	r2,120
    8b20:	d8801d45 	stb	r2,117(sp)
    8b24:	d8001d85 	stb	zero,118(sp)
    8b28:	b811883a 	mov	r8,r23
    8b2c:	28c00104 	addi	r3,r5,4
    8b30:	2cc00017 	ldw	r19,0(r5)
    8b34:	0029883a 	mov	r20,zero
    8b38:	88800094 	ori	r2,r17,2
    8b3c:	80032516 	blt	r16,zero,97d4 <___vfiprintf_internal_r+0x106c>
    8b40:	00bfdfc4 	movi	r2,-129
    8b44:	88a2703a 	and	r17,r17,r2
    8b48:	d8c02215 	stw	r3,136(sp)
    8b4c:	8c400094 	ori	r17,r17,2
    8b50:	98032a1e 	bne	r19,zero,97fc <___vfiprintf_internal_r+0x1094>
    8b54:	008000b4 	movhi	r2,2
    8b58:	10a32404 	addi	r2,r2,-29552
    8b5c:	d8802615 	stw	r2,152(sp)
    8b60:	002b883a 	mov	r21,zero
    8b64:	8001741e 	bne	r16,zero,9138 <___vfiprintf_internal_r+0x9d0>
    8b68:	0021883a 	mov	r16,zero
    8b6c:	0029883a 	mov	r20,zero
    8b70:	ddc01a04 	addi	r23,sp,104
    8b74:	8027883a 	mov	r19,r16
    8b78:	8500010e 	bge	r16,r20,8b80 <___vfiprintf_internal_r+0x418>
    8b7c:	a027883a 	mov	r19,r20
    8b80:	ad403fcc 	andi	r21,r21,255
    8b84:	ad40201c 	xori	r21,r21,128
    8b88:	ad7fe004 	addi	r21,r21,-128
    8b8c:	a8000126 	beq	r21,zero,8b94 <___vfiprintf_internal_r+0x42c>
    8b90:	9cc00044 	addi	r19,r19,1
    8b94:	89c0008c 	andi	r7,r17,2
    8b98:	38000126 	beq	r7,zero,8ba0 <___vfiprintf_internal_r+0x438>
    8b9c:	9cc00084 	addi	r19,r19,2
    8ba0:	88c0210c 	andi	r3,r17,132
    8ba4:	1801dd1e 	bne	r3,zero,931c <___vfiprintf_internal_r+0xbb4>
    8ba8:	d9402517 	ldw	r5,148(sp)
    8bac:	2cebc83a 	sub	r21,r5,r19
    8bb0:	0541da0e 	bge	zero,r21,931c <___vfiprintf_internal_r+0xbb4>
    8bb4:	07000404 	movi	fp,16
    8bb8:	d8801c17 	ldw	r2,112(sp)
    8bbc:	e543be0e 	bge	fp,r21,9ab8 <___vfiprintf_internal_r+0x1350>
    8bc0:	014000b4 	movhi	r5,2
    8bc4:	29638904 	addi	r5,r5,-29148
    8bc8:	dc002715 	stw	r16,156(sp)
    8bcc:	d9801b17 	ldw	r6,108(sp)
    8bd0:	a821883a 	mov	r16,r21
    8bd4:	d9402315 	stw	r5,140(sp)
    8bd8:	028001c4 	movi	r10,7
    8bdc:	d9c02915 	stw	r7,164(sp)
    8be0:	182b883a 	mov	r21,r3
    8be4:	00000506 	br	8bfc <___vfiprintf_internal_r+0x494>
    8be8:	31000084 	addi	r4,r6,2
    8bec:	42000204 	addi	r8,r8,8
    8bf0:	180d883a 	mov	r6,r3
    8bf4:	843ffc04 	addi	r16,r16,-16
    8bf8:	e4000f0e 	bge	fp,r16,8c38 <___vfiprintf_internal_r+0x4d0>
    8bfc:	010000b4 	movhi	r4,2
    8c00:	10800404 	addi	r2,r2,16
    8c04:	30c00044 	addi	r3,r6,1
    8c08:	21238904 	addi	r4,r4,-29148
    8c0c:	41000015 	stw	r4,0(r8)
    8c10:	47000115 	stw	fp,4(r8)
    8c14:	d8801c15 	stw	r2,112(sp)
    8c18:	d8c01b15 	stw	r3,108(sp)
    8c1c:	50fff20e 	bge	r10,r3,8be8 <__alt_data_end+0xfffd7ea8>
    8c20:	1001b21e 	bne	r2,zero,92ec <___vfiprintf_internal_r+0xb84>
    8c24:	843ffc04 	addi	r16,r16,-16
    8c28:	000d883a 	mov	r6,zero
    8c2c:	01000044 	movi	r4,1
    8c30:	d811883a 	mov	r8,sp
    8c34:	e43ff116 	blt	fp,r16,8bfc <__alt_data_end+0xfffd7ebc>
    8c38:	a807883a 	mov	r3,r21
    8c3c:	d9c02917 	ldw	r7,164(sp)
    8c40:	802b883a 	mov	r21,r16
    8c44:	dc002717 	ldw	r16,156(sp)
    8c48:	d9402317 	ldw	r5,140(sp)
    8c4c:	a885883a 	add	r2,r21,r2
    8c50:	45400115 	stw	r21,4(r8)
    8c54:	41400015 	stw	r5,0(r8)
    8c58:	d8801c15 	stw	r2,112(sp)
    8c5c:	d9001b15 	stw	r4,108(sp)
    8c60:	014001c4 	movi	r5,7
    8c64:	29026216 	blt	r5,r4,95f0 <___vfiprintf_internal_r+0xe88>
    8c68:	d9801d87 	ldb	r6,118(sp)
    8c6c:	42000204 	addi	r8,r8,8
    8c70:	21400044 	addi	r5,r4,1
    8c74:	3001ae1e 	bne	r6,zero,9330 <___vfiprintf_internal_r+0xbc8>
    8c78:	3801bb26 	beq	r7,zero,9368 <___vfiprintf_internal_r+0xc00>
    8c7c:	d9001d04 	addi	r4,sp,116
    8c80:	10800084 	addi	r2,r2,2
    8c84:	41000015 	stw	r4,0(r8)
    8c88:	01000084 	movi	r4,2
    8c8c:	41000115 	stw	r4,4(r8)
    8c90:	d8801c15 	stw	r2,112(sp)
    8c94:	d9401b15 	stw	r5,108(sp)
    8c98:	010001c4 	movi	r4,7
    8c9c:	2142680e 	bge	r4,r5,9640 <___vfiprintf_internal_r+0xed8>
    8ca0:	1002b11e 	bne	r2,zero,9768 <___vfiprintf_internal_r+0x1000>
    8ca4:	01802004 	movi	r6,128
    8ca8:	01400044 	movi	r5,1
    8cac:	0009883a 	mov	r4,zero
    8cb0:	d811883a 	mov	r8,sp
    8cb4:	1981ae1e 	bne	r3,r6,9370 <___vfiprintf_internal_r+0xc08>
    8cb8:	d8c02517 	ldw	r3,148(sp)
    8cbc:	1cf9c83a 	sub	fp,r3,r19
    8cc0:	0701ab0e 	bge	zero,fp,9370 <___vfiprintf_internal_r+0xc08>
    8cc4:	05400404 	movi	r21,16
    8cc8:	af03a90e 	bge	r21,fp,9b70 <___vfiprintf_internal_r+0x1408>
    8ccc:	014000b4 	movhi	r5,2
    8cd0:	29638504 	addi	r5,r5,-29164
    8cd4:	d9402315 	stw	r5,140(sp)
    8cd8:	01c001c4 	movi	r7,7
    8cdc:	00000506 	br	8cf4 <___vfiprintf_internal_r+0x58c>
    8ce0:	21800084 	addi	r6,r4,2
    8ce4:	42000204 	addi	r8,r8,8
    8ce8:	1809883a 	mov	r4,r3
    8cec:	e73ffc04 	addi	fp,fp,-16
    8cf0:	af000d0e 	bge	r21,fp,8d28 <___vfiprintf_internal_r+0x5c0>
    8cf4:	10800404 	addi	r2,r2,16
    8cf8:	20c00044 	addi	r3,r4,1
    8cfc:	44800015 	stw	r18,0(r8)
    8d00:	45400115 	stw	r21,4(r8)
    8d04:	d8801c15 	stw	r2,112(sp)
    8d08:	d8c01b15 	stw	r3,108(sp)
    8d0c:	38fff40e 	bge	r7,r3,8ce0 <__alt_data_end+0xfffd7fa0>
    8d10:	10022b1e 	bne	r2,zero,95c0 <___vfiprintf_internal_r+0xe58>
    8d14:	e73ffc04 	addi	fp,fp,-16
    8d18:	01800044 	movi	r6,1
    8d1c:	0009883a 	mov	r4,zero
    8d20:	d811883a 	mov	r8,sp
    8d24:	af3ff316 	blt	r21,fp,8cf4 <__alt_data_end+0xfffd7fb4>
    8d28:	d8c02317 	ldw	r3,140(sp)
    8d2c:	1705883a 	add	r2,r2,fp
    8d30:	47000115 	stw	fp,4(r8)
    8d34:	40c00015 	stw	r3,0(r8)
    8d38:	d8801c15 	stw	r2,112(sp)
    8d3c:	d9801b15 	stw	r6,108(sp)
    8d40:	00c001c4 	movi	r3,7
    8d44:	19829416 	blt	r3,r6,9798 <___vfiprintf_internal_r+0x1030>
    8d48:	8521c83a 	sub	r16,r16,r20
    8d4c:	42000204 	addi	r8,r8,8
    8d50:	31400044 	addi	r5,r6,1
    8d54:	3009883a 	mov	r4,r6
    8d58:	04018716 	blt	zero,r16,9378 <___vfiprintf_internal_r+0xc10>
    8d5c:	a085883a 	add	r2,r20,r2
    8d60:	45c00015 	stw	r23,0(r8)
    8d64:	45000115 	stw	r20,4(r8)
    8d68:	d8801c15 	stw	r2,112(sp)
    8d6c:	d9401b15 	stw	r5,108(sp)
    8d70:	00c001c4 	movi	r3,7
    8d74:	1941c20e 	bge	r3,r5,9480 <___vfiprintf_internal_r+0xd18>
    8d78:	1002531e 	bne	r2,zero,96c8 <___vfiprintf_internal_r+0xf60>
    8d7c:	d8001b15 	stw	zero,108(sp)
    8d80:	8c40010c 	andi	r17,r17,4
    8d84:	88023226 	beq	r17,zero,9650 <___vfiprintf_internal_r+0xee8>
    8d88:	d9002517 	ldw	r4,148(sp)
    8d8c:	24e3c83a 	sub	r17,r4,r19
    8d90:	04432916 	blt	zero,r17,9a38 <___vfiprintf_internal_r+0x12d0>
    8d94:	d8802517 	ldw	r2,148(sp)
    8d98:	14c0010e 	bge	r2,r19,8da0 <___vfiprintf_internal_r+0x638>
    8d9c:	9805883a 	mov	r2,r19
    8da0:	d8c02417 	ldw	r3,144(sp)
    8da4:	1887883a 	add	r3,r3,r2
    8da8:	d8c02415 	stw	r3,144(sp)
    8dac:	d8001b15 	stw	zero,108(sp)
    8db0:	d811883a 	mov	r8,sp
    8db4:	003ea006 	br	8838 <__alt_data_end+0xfffd7af8>
    8db8:	8c400814 	ori	r17,r17,32
    8dbc:	b0c00007 	ldb	r3,0(r22)
    8dc0:	003ec606 	br	88dc <__alt_data_end+0xfffd7b9c>
    8dc4:	b0c00007 	ldb	r3,0(r22)
    8dc8:	00801b04 	movi	r2,108
    8dcc:	18832026 	beq	r3,r2,9a50 <___vfiprintf_internal_r+0x12e8>
    8dd0:	8c400414 	ori	r17,r17,16
    8dd4:	003ec106 	br	88dc <__alt_data_end+0xfffd7b9c>
    8dd8:	9cc03fcc 	andi	r19,r19,255
    8ddc:	b811883a 	mov	r8,r23
    8de0:	9803981e 	bne	r19,zero,9c44 <___vfiprintf_internal_r+0x14dc>
    8de4:	8880080c 	andi	r2,r17,32
    8de8:	1002be26 	beq	r2,zero,98e4 <___vfiprintf_internal_r+0x117c>
    8dec:	d9002217 	ldw	r4,136(sp)
    8df0:	d9402417 	ldw	r5,144(sp)
    8df4:	20800017 	ldw	r2,0(r4)
    8df8:	2807d7fa 	srai	r3,r5,31
    8dfc:	21000104 	addi	r4,r4,4
    8e00:	d9002215 	stw	r4,136(sp)
    8e04:	11400015 	stw	r5,0(r2)
    8e08:	10c00115 	stw	r3,4(r2)
    8e0c:	003e8a06 	br	8838 <__alt_data_end+0xfffd7af8>
    8e10:	9cc03fcc 	andi	r19,r19,255
    8e14:	b811883a 	mov	r8,r23
    8e18:	9803871e 	bne	r19,zero,9c38 <___vfiprintf_internal_r+0x14d0>
    8e1c:	8880080c 	andi	r2,r17,32
    8e20:	10009a26 	beq	r2,zero,908c <___vfiprintf_internal_r+0x924>
    8e24:	d9002217 	ldw	r4,136(sp)
    8e28:	d8001d85 	stb	zero,118(sp)
    8e2c:	20800204 	addi	r2,r4,8
    8e30:	24c00017 	ldw	r19,0(r4)
    8e34:	25000117 	ldw	r20,4(r4)
    8e38:	8002a416 	blt	r16,zero,98cc <___vfiprintf_internal_r+0x1164>
    8e3c:	013fdfc4 	movi	r4,-129
    8e40:	9d06b03a 	or	r3,r19,r20
    8e44:	d8802215 	stw	r2,136(sp)
    8e48:	8922703a 	and	r17,r17,r4
    8e4c:	18009b26 	beq	r3,zero,90bc <___vfiprintf_internal_r+0x954>
    8e50:	002b883a 	mov	r21,zero
    8e54:	ddc01a04 	addi	r23,sp,104
    8e58:	9806d0fa 	srli	r3,r19,3
    8e5c:	a008977a 	slli	r4,r20,29
    8e60:	a028d0fa 	srli	r20,r20,3
    8e64:	9cc001cc 	andi	r19,r19,7
    8e68:	98800c04 	addi	r2,r19,48
    8e6c:	bdffffc4 	addi	r23,r23,-1
    8e70:	20e6b03a 	or	r19,r4,r3
    8e74:	b8800005 	stb	r2,0(r23)
    8e78:	9d06b03a 	or	r3,r19,r20
    8e7c:	183ff61e 	bne	r3,zero,8e58 <__alt_data_end+0xfffd8118>
    8e80:	88c0004c 	andi	r3,r17,1
    8e84:	18021f1e 	bne	r3,zero,9704 <___vfiprintf_internal_r+0xf9c>
    8e88:	d9401e17 	ldw	r5,120(sp)
    8e8c:	2de9c83a 	sub	r20,r5,r23
    8e90:	003f3806 	br	8b74 <__alt_data_end+0xfffd7e34>
    8e94:	9cc03fcc 	andi	r19,r19,255
    8e98:	b811883a 	mov	r8,r23
    8e9c:	98034f1e 	bne	r19,zero,9bdc <___vfiprintf_internal_r+0x1474>
    8ea0:	008000b4 	movhi	r2,2
    8ea4:	10a32404 	addi	r2,r2,-29552
    8ea8:	d8802615 	stw	r2,152(sp)
    8eac:	8880080c 	andi	r2,r17,32
    8eb0:	1000ac26 	beq	r2,zero,9164 <___vfiprintf_internal_r+0x9fc>
    8eb4:	d9002217 	ldw	r4,136(sp)
    8eb8:	24c00017 	ldw	r19,0(r4)
    8ebc:	25000117 	ldw	r20,4(r4)
    8ec0:	21000204 	addi	r4,r4,8
    8ec4:	d9002215 	stw	r4,136(sp)
    8ec8:	8880004c 	andi	r2,r17,1
    8ecc:	1001e726 	beq	r2,zero,966c <___vfiprintf_internal_r+0xf04>
    8ed0:	9d04b03a 	or	r2,r19,r20
    8ed4:	10025c1e 	bne	r2,zero,9848 <___vfiprintf_internal_r+0x10e0>
    8ed8:	d8001d85 	stb	zero,118(sp)
    8edc:	80024416 	blt	r16,zero,97f0 <___vfiprintf_internal_r+0x1088>
    8ee0:	00bfdfc4 	movi	r2,-129
    8ee4:	88a2703a 	and	r17,r17,r2
    8ee8:	003f1d06 	br	8b60 <__alt_data_end+0xfffd7e20>
    8eec:	d8c02217 	ldw	r3,136(sp)
    8ef0:	04c00044 	movi	r19,1
    8ef4:	b811883a 	mov	r8,r23
    8ef8:	18800017 	ldw	r2,0(r3)
    8efc:	18c00104 	addi	r3,r3,4
    8f00:	d8001d85 	stb	zero,118(sp)
    8f04:	d8801005 	stb	r2,64(sp)
    8f08:	d8c02215 	stw	r3,136(sp)
    8f0c:	9829883a 	mov	r20,r19
    8f10:	ddc01004 	addi	r23,sp,64
    8f14:	0021883a 	mov	r16,zero
    8f18:	003f1e06 	br	8b94 <__alt_data_end+0xfffd7e54>
    8f1c:	9cc03fcc 	andi	r19,r19,255
    8f20:	b811883a 	mov	r8,r23
    8f24:	9803331e 	bne	r19,zero,9bf4 <___vfiprintf_internal_r+0x148c>
    8f28:	8880080c 	andi	r2,r17,32
    8f2c:	10004826 	beq	r2,zero,9050 <___vfiprintf_internal_r+0x8e8>
    8f30:	d9002217 	ldw	r4,136(sp)
    8f34:	20800117 	ldw	r2,4(r4)
    8f38:	24c00017 	ldw	r19,0(r4)
    8f3c:	21000204 	addi	r4,r4,8
    8f40:	d9002215 	stw	r4,136(sp)
    8f44:	1029883a 	mov	r20,r2
    8f48:	10024c16 	blt	r2,zero,987c <___vfiprintf_internal_r+0x1114>
    8f4c:	dd401d83 	ldbu	r21,118(sp)
    8f50:	80007116 	blt	r16,zero,9118 <___vfiprintf_internal_r+0x9b0>
    8f54:	00ffdfc4 	movi	r3,-129
    8f58:	9d04b03a 	or	r2,r19,r20
    8f5c:	88e2703a 	and	r17,r17,r3
    8f60:	1000d126 	beq	r2,zero,92a8 <___vfiprintf_internal_r+0xb40>
    8f64:	a0023526 	beq	r20,zero,983c <___vfiprintf_internal_r+0x10d4>
    8f68:	ddc01a04 	addi	r23,sp,104
    8f6c:	4039883a 	mov	fp,r8
    8f70:	9809883a 	mov	r4,r19
    8f74:	a00b883a 	mov	r5,r20
    8f78:	01800284 	movi	r6,10
    8f7c:	000f883a 	mov	r7,zero
    8f80:	000ac940 	call	ac94 <__umoddi3>
    8f84:	10800c04 	addi	r2,r2,48
    8f88:	bdffffc4 	addi	r23,r23,-1
    8f8c:	9809883a 	mov	r4,r19
    8f90:	a00b883a 	mov	r5,r20
    8f94:	b8800005 	stb	r2,0(r23)
    8f98:	01800284 	movi	r6,10
    8f9c:	000f883a 	mov	r7,zero
    8fa0:	000a6980 	call	a698 <__udivdi3>
    8fa4:	1027883a 	mov	r19,r2
    8fa8:	10c4b03a 	or	r2,r2,r3
    8fac:	1829883a 	mov	r20,r3
    8fb0:	103fef1e 	bne	r2,zero,8f70 <__alt_data_end+0xfffd8230>
    8fb4:	d9001e17 	ldw	r4,120(sp)
    8fb8:	e011883a 	mov	r8,fp
    8fbc:	25e9c83a 	sub	r20,r4,r23
    8fc0:	003eec06 	br	8b74 <__alt_data_end+0xfffd7e34>
    8fc4:	d8802307 	ldb	r2,140(sp)
    8fc8:	1002361e 	bne	r2,zero,98a4 <___vfiprintf_internal_r+0x113c>
    8fcc:	00c00804 	movi	r3,32
    8fd0:	d8c02305 	stb	r3,140(sp)
    8fd4:	04c00044 	movi	r19,1
    8fd8:	b0c00007 	ldb	r3,0(r22)
    8fdc:	003e3f06 	br	88dc <__alt_data_end+0xfffd7b9c>
    8fe0:	8c400054 	ori	r17,r17,1
    8fe4:	b0c00007 	ldb	r3,0(r22)
    8fe8:	003e3c06 	br	88dc <__alt_data_end+0xfffd7b9c>
    8fec:	8c402014 	ori	r17,r17,128
    8ff0:	b0c00007 	ldb	r3,0(r22)
    8ff4:	003e3906 	br	88dc <__alt_data_end+0xfffd7b9c>
    8ff8:	dc002715 	stw	r16,156(sp)
    8ffc:	d8002515 	stw	zero,148(sp)
    9000:	1f3ff404 	addi	fp,r3,-48
    9004:	0009883a 	mov	r4,zero
    9008:	b021883a 	mov	r16,r22
    900c:	01400284 	movi	r5,10
    9010:	0000bc00 	call	bc0 <__mulsi3>
    9014:	80c00007 	ldb	r3,0(r16)
    9018:	e089883a 	add	r4,fp,r2
    901c:	b5800044 	addi	r22,r22,1
    9020:	1f3ff404 	addi	fp,r3,-48
    9024:	b021883a 	mov	r16,r22
    9028:	af3ff82e 	bgeu	r21,fp,900c <__alt_data_end+0xfffd82cc>
    902c:	d9002515 	stw	r4,148(sp)
    9030:	dc002717 	ldw	r16,156(sp)
    9034:	003e2a06 	br	88e0 <__alt_data_end+0xfffd7ba0>
    9038:	9cc03fcc 	andi	r19,r19,255
    903c:	b811883a 	mov	r8,r23
    9040:	9802e91e 	bne	r19,zero,9be8 <___vfiprintf_internal_r+0x1480>
    9044:	8c400414 	ori	r17,r17,16
    9048:	8880080c 	andi	r2,r17,32
    904c:	103fb81e 	bne	r2,zero,8f30 <__alt_data_end+0xfffd81f0>
    9050:	8880040c 	andi	r2,r17,16
    9054:	10022e26 	beq	r2,zero,9910 <___vfiprintf_internal_r+0x11a8>
    9058:	d9402217 	ldw	r5,136(sp)
    905c:	2cc00017 	ldw	r19,0(r5)
    9060:	29400104 	addi	r5,r5,4
    9064:	d9402215 	stw	r5,136(sp)
    9068:	9829d7fa 	srai	r20,r19,31
    906c:	a005883a 	mov	r2,r20
    9070:	003fb506 	br	8f48 <__alt_data_end+0xfffd8208>
    9074:	9cc03fcc 	andi	r19,r19,255
    9078:	b811883a 	mov	r8,r23
    907c:	9802fa1e 	bne	r19,zero,9c68 <___vfiprintf_internal_r+0x1500>
    9080:	8c400414 	ori	r17,r17,16
    9084:	8880080c 	andi	r2,r17,32
    9088:	103f661e 	bne	r2,zero,8e24 <__alt_data_end+0xfffd80e4>
    908c:	8880040c 	andi	r2,r17,16
    9090:	10020626 	beq	r2,zero,98ac <___vfiprintf_internal_r+0x1144>
    9094:	d9402217 	ldw	r5,136(sp)
    9098:	d8001d85 	stb	zero,118(sp)
    909c:	0029883a 	mov	r20,zero
    90a0:	28800104 	addi	r2,r5,4
    90a4:	2cc00017 	ldw	r19,0(r5)
    90a8:	80020816 	blt	r16,zero,98cc <___vfiprintf_internal_r+0x1164>
    90ac:	00ffdfc4 	movi	r3,-129
    90b0:	d8802215 	stw	r2,136(sp)
    90b4:	88e2703a 	and	r17,r17,r3
    90b8:	983f651e 	bne	r19,zero,8e50 <__alt_data_end+0xfffd8110>
    90bc:	002b883a 	mov	r21,zero
    90c0:	8002cf26 	beq	r16,zero,9c00 <___vfiprintf_internal_r+0x1498>
    90c4:	0027883a 	mov	r19,zero
    90c8:	0029883a 	mov	r20,zero
    90cc:	003f6106 	br	8e54 <__alt_data_end+0xfffd8114>
    90d0:	9cc03fcc 	andi	r19,r19,255
    90d4:	b811883a 	mov	r8,r23
    90d8:	9802e01e 	bne	r19,zero,9c5c <___vfiprintf_internal_r+0x14f4>
    90dc:	8c400414 	ori	r17,r17,16
    90e0:	8880080c 	andi	r2,r17,32
    90e4:	1000641e 	bne	r2,zero,9278 <___vfiprintf_internal_r+0xb10>
    90e8:	8880040c 	andi	r2,r17,16
    90ec:	1001c81e 	bne	r2,zero,9810 <___vfiprintf_internal_r+0x10a8>
    90f0:	8880100c 	andi	r2,r17,64
    90f4:	d8001d85 	stb	zero,118(sp)
    90f8:	1002281e 	bne	r2,zero,999c <___vfiprintf_internal_r+0x1234>
    90fc:	d9002217 	ldw	r4,136(sp)
    9100:	0029883a 	mov	r20,zero
    9104:	20800104 	addi	r2,r4,4
    9108:	24c00017 	ldw	r19,0(r4)
    910c:	8001c60e 	bge	r16,zero,9828 <___vfiprintf_internal_r+0x10c0>
    9110:	d8802215 	stw	r2,136(sp)
    9114:	002b883a 	mov	r21,zero
    9118:	9d04b03a 	or	r2,r19,r20
    911c:	103f911e 	bne	r2,zero,8f64 <__alt_data_end+0xfffd8224>
    9120:	00800044 	movi	r2,1
    9124:	10803fcc 	andi	r2,r2,255
    9128:	00c00044 	movi	r3,1
    912c:	10c05f26 	beq	r2,r3,92ac <___vfiprintf_internal_r+0xb44>
    9130:	00c00084 	movi	r3,2
    9134:	10ffe31e 	bne	r2,r3,90c4 <__alt_data_end+0xfffd8384>
    9138:	0027883a 	mov	r19,zero
    913c:	0029883a 	mov	r20,zero
    9140:	00015106 	br	9688 <___vfiprintf_internal_r+0xf20>
    9144:	9cc03fcc 	andi	r19,r19,255
    9148:	b811883a 	mov	r8,r23
    914c:	9802c01e 	bne	r19,zero,9c50 <___vfiprintf_internal_r+0x14e8>
    9150:	014000b4 	movhi	r5,2
    9154:	29631f04 	addi	r5,r5,-29572
    9158:	d9402615 	stw	r5,152(sp)
    915c:	8880080c 	andi	r2,r17,32
    9160:	103f541e 	bne	r2,zero,8eb4 <__alt_data_end+0xfffd8174>
    9164:	8880040c 	andi	r2,r17,16
    9168:	1001f226 	beq	r2,zero,9934 <___vfiprintf_internal_r+0x11cc>
    916c:	d9402217 	ldw	r5,136(sp)
    9170:	0029883a 	mov	r20,zero
    9174:	2cc00017 	ldw	r19,0(r5)
    9178:	29400104 	addi	r5,r5,4
    917c:	d9402215 	stw	r5,136(sp)
    9180:	003f5106 	br	8ec8 <__alt_data_end+0xfffd8188>
    9184:	d8c02217 	ldw	r3,136(sp)
    9188:	b811883a 	mov	r8,r23
    918c:	d8001d85 	stb	zero,118(sp)
    9190:	1dc00017 	ldw	r23,0(r3)
    9194:	1f000104 	addi	fp,r3,4
    9198:	b8025926 	beq	r23,zero,9b00 <___vfiprintf_internal_r+0x1398>
    919c:	80023316 	blt	r16,zero,9a6c <___vfiprintf_internal_r+0x1304>
    91a0:	800d883a 	mov	r6,r16
    91a4:	000b883a 	mov	r5,zero
    91a8:	b809883a 	mov	r4,r23
    91ac:	da002a15 	stw	r8,168(sp)
    91b0:	0006a040 	call	6a04 <memchr>
    91b4:	da002a17 	ldw	r8,168(sp)
    91b8:	10026826 	beq	r2,zero,9b5c <___vfiprintf_internal_r+0x13f4>
    91bc:	15e9c83a 	sub	r20,r2,r23
    91c0:	dd401d83 	ldbu	r21,118(sp)
    91c4:	df002215 	stw	fp,136(sp)
    91c8:	0021883a 	mov	r16,zero
    91cc:	003e6906 	br	8b74 <__alt_data_end+0xfffd7e34>
    91d0:	9cc03fcc 	andi	r19,r19,255
    91d4:	b811883a 	mov	r8,r23
    91d8:	983fc126 	beq	r19,zero,90e0 <__alt_data_end+0xfffd83a0>
    91dc:	d8c02303 	ldbu	r3,140(sp)
    91e0:	d8c01d85 	stb	r3,118(sp)
    91e4:	003fbe06 	br	90e0 <__alt_data_end+0xfffd83a0>
    91e8:	d9002217 	ldw	r4,136(sp)
    91ec:	d9402217 	ldw	r5,136(sp)
    91f0:	21000017 	ldw	r4,0(r4)
    91f4:	28800104 	addi	r2,r5,4
    91f8:	d9002515 	stw	r4,148(sp)
    91fc:	203e3d16 	blt	r4,zero,8af4 <__alt_data_end+0xfffd7db4>
    9200:	d8802215 	stw	r2,136(sp)
    9204:	b0c00007 	ldb	r3,0(r22)
    9208:	003db406 	br	88dc <__alt_data_end+0xfffd7b9c>
    920c:	00c00ac4 	movi	r3,43
    9210:	d8c02305 	stb	r3,140(sp)
    9214:	04c00044 	movi	r19,1
    9218:	b0c00007 	ldb	r3,0(r22)
    921c:	003daf06 	br	88dc <__alt_data_end+0xfffd7b9c>
    9220:	b0c00007 	ldb	r3,0(r22)
    9224:	01000a84 	movi	r4,42
    9228:	b4000044 	addi	r16,r22,1
    922c:	19025e26 	beq	r3,r4,9ba8 <___vfiprintf_internal_r+0x1440>
    9230:	1f3ff404 	addi	fp,r3,-48
    9234:	0009883a 	mov	r4,zero
    9238:	af025236 	bltu	r21,fp,9b84 <___vfiprintf_internal_r+0x141c>
    923c:	01400284 	movi	r5,10
    9240:	0000bc00 	call	bc0 <__mulsi3>
    9244:	80c00007 	ldb	r3,0(r16)
    9248:	1709883a 	add	r4,r2,fp
    924c:	85800044 	addi	r22,r16,1
    9250:	1f3ff404 	addi	fp,r3,-48
    9254:	b021883a 	mov	r16,r22
    9258:	af3ff82e 	bgeu	r21,fp,923c <__alt_data_end+0xfffd84fc>
    925c:	2021883a 	mov	r16,r4
    9260:	203d9f0e 	bge	r4,zero,88e0 <__alt_data_end+0xfffd7ba0>
    9264:	043fffc4 	movi	r16,-1
    9268:	003d9d06 	br	88e0 <__alt_data_end+0xfffd7ba0>
    926c:	8c401014 	ori	r17,r17,64
    9270:	b0c00007 	ldb	r3,0(r22)
    9274:	003d9906 	br	88dc <__alt_data_end+0xfffd7b9c>
    9278:	d9002217 	ldw	r4,136(sp)
    927c:	d8001d85 	stb	zero,118(sp)
    9280:	20c00204 	addi	r3,r4,8
    9284:	24c00017 	ldw	r19,0(r4)
    9288:	25000117 	ldw	r20,4(r4)
    928c:	8001e716 	blt	r16,zero,9a2c <___vfiprintf_internal_r+0x12c4>
    9290:	013fdfc4 	movi	r4,-129
    9294:	9d04b03a 	or	r2,r19,r20
    9298:	d8c02215 	stw	r3,136(sp)
    929c:	8922703a 	and	r17,r17,r4
    92a0:	002b883a 	mov	r21,zero
    92a4:	103f2f1e 	bne	r2,zero,8f64 <__alt_data_end+0xfffd8224>
    92a8:	803e2f26 	beq	r16,zero,8b68 <__alt_data_end+0xfffd7e28>
    92ac:	0027883a 	mov	r19,zero
    92b0:	9cc00c04 	addi	r19,r19,48
    92b4:	dcc019c5 	stb	r19,103(sp)
    92b8:	dd002817 	ldw	r20,160(sp)
    92bc:	ddc019c4 	addi	r23,sp,103
    92c0:	003e2c06 	br	8b74 <__alt_data_end+0xfffd7e34>
    92c4:	9cc03fcc 	andi	r19,r19,255
    92c8:	b811883a 	mov	r8,r23
    92cc:	9802571e 	bne	r19,zero,9c2c <___vfiprintf_internal_r+0x14c4>
    92d0:	18005726 	beq	r3,zero,9430 <___vfiprintf_internal_r+0xcc8>
    92d4:	04c00044 	movi	r19,1
    92d8:	d8c01005 	stb	r3,64(sp)
    92dc:	d8001d85 	stb	zero,118(sp)
    92e0:	9829883a 	mov	r20,r19
    92e4:	ddc01004 	addi	r23,sp,64
    92e8:	003f0a06 	br	8f14 <__alt_data_end+0xfffd81d4>
    92ec:	d9402017 	ldw	r5,128(sp)
    92f0:	d9002117 	ldw	r4,132(sp)
    92f4:	d9801a04 	addi	r6,sp,104
    92f8:	da802a15 	stw	r10,168(sp)
    92fc:	00086540 	call	8654 <__sprint_r.part.0>
    9300:	da802a17 	ldw	r10,168(sp)
    9304:	1000501e 	bne	r2,zero,9448 <___vfiprintf_internal_r+0xce0>
    9308:	d9801b17 	ldw	r6,108(sp)
    930c:	d8801c17 	ldw	r2,112(sp)
    9310:	d811883a 	mov	r8,sp
    9314:	31000044 	addi	r4,r6,1
    9318:	003e3606 	br	8bf4 <__alt_data_end+0xfffd7eb4>
    931c:	d9001b17 	ldw	r4,108(sp)
    9320:	d8801c17 	ldw	r2,112(sp)
    9324:	21400044 	addi	r5,r4,1
    9328:	d9801d87 	ldb	r6,118(sp)
    932c:	303e5226 	beq	r6,zero,8c78 <__alt_data_end+0xfffd7f38>
    9330:	01800044 	movi	r6,1
    9334:	d9001d84 	addi	r4,sp,118
    9338:	1185883a 	add	r2,r2,r6
    933c:	41000015 	stw	r4,0(r8)
    9340:	41800115 	stw	r6,4(r8)
    9344:	d8801c15 	stw	r2,112(sp)
    9348:	d9401b15 	stw	r5,108(sp)
    934c:	010001c4 	movi	r4,7
    9350:	2140b00e 	bge	r4,r5,9614 <___vfiprintf_internal_r+0xeac>
    9354:	1000f61e 	bne	r2,zero,9730 <___vfiprintf_internal_r+0xfc8>
    9358:	3800b31e 	bne	r7,zero,9628 <___vfiprintf_internal_r+0xec0>
    935c:	0009883a 	mov	r4,zero
    9360:	300b883a 	mov	r5,r6
    9364:	d811883a 	mov	r8,sp
    9368:	01802004 	movi	r6,128
    936c:	19be5226 	beq	r3,r6,8cb8 <__alt_data_end+0xfffd7f78>
    9370:	8521c83a 	sub	r16,r16,r20
    9374:	043e790e 	bge	zero,r16,8d5c <__alt_data_end+0xfffd801c>
    9378:	05400404 	movi	r21,16
    937c:	ac01b00e 	bge	r21,r16,9a40 <___vfiprintf_internal_r+0x12d8>
    9380:	014000b4 	movhi	r5,2
    9384:	29638504 	addi	r5,r5,-29164
    9388:	d9402315 	stw	r5,140(sp)
    938c:	070001c4 	movi	fp,7
    9390:	00000506 	br	93a8 <___vfiprintf_internal_r+0xc40>
    9394:	21400084 	addi	r5,r4,2
    9398:	42000204 	addi	r8,r8,8
    939c:	1809883a 	mov	r4,r3
    93a0:	843ffc04 	addi	r16,r16,-16
    93a4:	ac000d0e 	bge	r21,r16,93dc <___vfiprintf_internal_r+0xc74>
    93a8:	10800404 	addi	r2,r2,16
    93ac:	20c00044 	addi	r3,r4,1
    93b0:	44800015 	stw	r18,0(r8)
    93b4:	45400115 	stw	r21,4(r8)
    93b8:	d8801c15 	stw	r2,112(sp)
    93bc:	d8c01b15 	stw	r3,108(sp)
    93c0:	e0fff40e 	bge	fp,r3,9394 <__alt_data_end+0xfffd8654>
    93c4:	1000101e 	bne	r2,zero,9408 <___vfiprintf_internal_r+0xca0>
    93c8:	843ffc04 	addi	r16,r16,-16
    93cc:	01400044 	movi	r5,1
    93d0:	0009883a 	mov	r4,zero
    93d4:	d811883a 	mov	r8,sp
    93d8:	ac3ff316 	blt	r21,r16,93a8 <__alt_data_end+0xfffd8668>
    93dc:	d8c02317 	ldw	r3,140(sp)
    93e0:	1405883a 	add	r2,r2,r16
    93e4:	44000115 	stw	r16,4(r8)
    93e8:	40c00015 	stw	r3,0(r8)
    93ec:	d8801c15 	stw	r2,112(sp)
    93f0:	d9401b15 	stw	r5,108(sp)
    93f4:	00c001c4 	movi	r3,7
    93f8:	19401916 	blt	r3,r5,9460 <___vfiprintf_internal_r+0xcf8>
    93fc:	42000204 	addi	r8,r8,8
    9400:	29400044 	addi	r5,r5,1
    9404:	003e5506 	br	8d5c <__alt_data_end+0xfffd801c>
    9408:	d9402017 	ldw	r5,128(sp)
    940c:	d9002117 	ldw	r4,132(sp)
    9410:	d9801a04 	addi	r6,sp,104
    9414:	00086540 	call	8654 <__sprint_r.part.0>
    9418:	10000b1e 	bne	r2,zero,9448 <___vfiprintf_internal_r+0xce0>
    941c:	d9001b17 	ldw	r4,108(sp)
    9420:	d8801c17 	ldw	r2,112(sp)
    9424:	d811883a 	mov	r8,sp
    9428:	21400044 	addi	r5,r4,1
    942c:	003fdc06 	br	93a0 <__alt_data_end+0xfffd8660>
    9430:	d8801c17 	ldw	r2,112(sp)
    9434:	10000426 	beq	r2,zero,9448 <___vfiprintf_internal_r+0xce0>
    9438:	d9402017 	ldw	r5,128(sp)
    943c:	d9002117 	ldw	r4,132(sp)
    9440:	d9801a04 	addi	r6,sp,104
    9444:	00086540 	call	8654 <__sprint_r.part.0>
    9448:	d9402017 	ldw	r5,128(sp)
    944c:	2880030b 	ldhu	r2,12(r5)
    9450:	1080100c 	andi	r2,r2,64
    9454:	10014d1e 	bne	r2,zero,998c <___vfiprintf_internal_r+0x1224>
    9458:	d8802417 	ldw	r2,144(sp)
    945c:	003d9706 	br	8abc <__alt_data_end+0xfffd7d7c>
    9460:	1000d21e 	bne	r2,zero,97ac <___vfiprintf_internal_r+0x1044>
    9464:	00c00044 	movi	r3,1
    9468:	a005883a 	mov	r2,r20
    946c:	ddc00015 	stw	r23,0(sp)
    9470:	dd000115 	stw	r20,4(sp)
    9474:	dd001c15 	stw	r20,112(sp)
    9478:	d8c01b15 	stw	r3,108(sp)
    947c:	d811883a 	mov	r8,sp
    9480:	42000204 	addi	r8,r8,8
    9484:	8c40010c 	andi	r17,r17,4
    9488:	88004026 	beq	r17,zero,958c <___vfiprintf_internal_r+0xe24>
    948c:	d9002517 	ldw	r4,148(sp)
    9490:	24e3c83a 	sub	r17,r4,r19
    9494:	04403d0e 	bge	zero,r17,958c <___vfiprintf_internal_r+0xe24>
    9498:	04000404 	movi	r16,16
    949c:	8441a90e 	bge	r16,r17,9b44 <___vfiprintf_internal_r+0x13dc>
    94a0:	00c000b4 	movhi	r3,2
    94a4:	18e38904 	addi	r3,r3,-29148
    94a8:	d9001b17 	ldw	r4,108(sp)
    94ac:	d8c02315 	stw	r3,140(sp)
    94b0:	050001c4 	movi	r20,7
    94b4:	dd402117 	ldw	r21,132(sp)
    94b8:	ddc02017 	ldw	r23,128(sp)
    94bc:	00000506 	br	94d4 <___vfiprintf_internal_r+0xd6c>
    94c0:	21400084 	addi	r5,r4,2
    94c4:	42000204 	addi	r8,r8,8
    94c8:	1809883a 	mov	r4,r3
    94cc:	8c7ffc04 	addi	r17,r17,-16
    94d0:	84400f0e 	bge	r16,r17,9510 <___vfiprintf_internal_r+0xda8>
    94d4:	014000b4 	movhi	r5,2
    94d8:	10800404 	addi	r2,r2,16
    94dc:	20c00044 	addi	r3,r4,1
    94e0:	29638904 	addi	r5,r5,-29148
    94e4:	41400015 	stw	r5,0(r8)
    94e8:	44000115 	stw	r16,4(r8)
    94ec:	d8801c15 	stw	r2,112(sp)
    94f0:	d8c01b15 	stw	r3,108(sp)
    94f4:	a0fff20e 	bge	r20,r3,94c0 <__alt_data_end+0xfffd8780>
    94f8:	1000141e 	bne	r2,zero,954c <___vfiprintf_internal_r+0xde4>
    94fc:	8c7ffc04 	addi	r17,r17,-16
    9500:	01400044 	movi	r5,1
    9504:	0009883a 	mov	r4,zero
    9508:	d811883a 	mov	r8,sp
    950c:	847ff116 	blt	r16,r17,94d4 <__alt_data_end+0xfffd8794>
    9510:	d8c02317 	ldw	r3,140(sp)
    9514:	1445883a 	add	r2,r2,r17
    9518:	44400115 	stw	r17,4(r8)
    951c:	40c00015 	stw	r3,0(r8)
    9520:	d8801c15 	stw	r2,112(sp)
    9524:	d9401b15 	stw	r5,108(sp)
    9528:	00c001c4 	movi	r3,7
    952c:	1940170e 	bge	r3,r5,958c <___vfiprintf_internal_r+0xe24>
    9530:	1000101e 	bne	r2,zero,9574 <___vfiprintf_internal_r+0xe0c>
    9534:	d8802517 	ldw	r2,148(sp)
    9538:	14c11616 	blt	r2,r19,9994 <___vfiprintf_internal_r+0x122c>
    953c:	d9002417 	ldw	r4,144(sp)
    9540:	2089883a 	add	r4,r4,r2
    9544:	d9002415 	stw	r4,144(sp)
    9548:	003e1806 	br	8dac <__alt_data_end+0xfffd806c>
    954c:	d9801a04 	addi	r6,sp,104
    9550:	b80b883a 	mov	r5,r23
    9554:	a809883a 	mov	r4,r21
    9558:	00086540 	call	8654 <__sprint_r.part.0>
    955c:	103fba1e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9560:	d9001b17 	ldw	r4,108(sp)
    9564:	d8801c17 	ldw	r2,112(sp)
    9568:	d811883a 	mov	r8,sp
    956c:	21400044 	addi	r5,r4,1
    9570:	003fd606 	br	94cc <__alt_data_end+0xfffd878c>
    9574:	d9402017 	ldw	r5,128(sp)
    9578:	d9002117 	ldw	r4,132(sp)
    957c:	d9801a04 	addi	r6,sp,104
    9580:	00086540 	call	8654 <__sprint_r.part.0>
    9584:	103fb01e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9588:	d8801c17 	ldw	r2,112(sp)
    958c:	d8c02517 	ldw	r3,148(sp)
    9590:	1cc0010e 	bge	r3,r19,9598 <___vfiprintf_internal_r+0xe30>
    9594:	9807883a 	mov	r3,r19
    9598:	d9002417 	ldw	r4,144(sp)
    959c:	20c9883a 	add	r4,r4,r3
    95a0:	d9002415 	stw	r4,144(sp)
    95a4:	103e0126 	beq	r2,zero,8dac <__alt_data_end+0xfffd806c>
    95a8:	d9402017 	ldw	r5,128(sp)
    95ac:	d9002117 	ldw	r4,132(sp)
    95b0:	d9801a04 	addi	r6,sp,104
    95b4:	00086540 	call	8654 <__sprint_r.part.0>
    95b8:	103dfc26 	beq	r2,zero,8dac <__alt_data_end+0xfffd806c>
    95bc:	003fa206 	br	9448 <__alt_data_end+0xfffd8708>
    95c0:	d9402017 	ldw	r5,128(sp)
    95c4:	d9002117 	ldw	r4,132(sp)
    95c8:	d9801a04 	addi	r6,sp,104
    95cc:	d9c02b15 	stw	r7,172(sp)
    95d0:	00086540 	call	8654 <__sprint_r.part.0>
    95d4:	d9c02b17 	ldw	r7,172(sp)
    95d8:	103f9b1e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    95dc:	d9001b17 	ldw	r4,108(sp)
    95e0:	d8801c17 	ldw	r2,112(sp)
    95e4:	d811883a 	mov	r8,sp
    95e8:	21800044 	addi	r6,r4,1
    95ec:	003dbf06 	br	8cec <__alt_data_end+0xfffd7fac>
    95f0:	1000d81e 	bne	r2,zero,9954 <___vfiprintf_internal_r+0x11ec>
    95f4:	d9001d87 	ldb	r4,118(sp)
    95f8:	20000a26 	beq	r4,zero,9624 <___vfiprintf_internal_r+0xebc>
    95fc:	00800044 	movi	r2,1
    9600:	d9001d84 	addi	r4,sp,118
    9604:	100b883a 	mov	r5,r2
    9608:	d9000015 	stw	r4,0(sp)
    960c:	d8800115 	stw	r2,4(sp)
    9610:	d811883a 	mov	r8,sp
    9614:	2809883a 	mov	r4,r5
    9618:	42000204 	addi	r8,r8,8
    961c:	29400044 	addi	r5,r5,1
    9620:	003d9506 	br	8c78 <__alt_data_end+0xfffd7f38>
    9624:	3800fd26 	beq	r7,zero,9a1c <___vfiprintf_internal_r+0x12b4>
    9628:	00800084 	movi	r2,2
    962c:	d9001d04 	addi	r4,sp,116
    9630:	d9000015 	stw	r4,0(sp)
    9634:	d8800115 	stw	r2,4(sp)
    9638:	01400044 	movi	r5,1
    963c:	d811883a 	mov	r8,sp
    9640:	2809883a 	mov	r4,r5
    9644:	42000204 	addi	r8,r8,8
    9648:	29400044 	addi	r5,r5,1
    964c:	003f4606 	br	9368 <__alt_data_end+0xfffd8628>
    9650:	d8802517 	ldw	r2,148(sp)
    9654:	14c0010e 	bge	r2,r19,965c <___vfiprintf_internal_r+0xef4>
    9658:	9805883a 	mov	r2,r19
    965c:	d9402417 	ldw	r5,144(sp)
    9660:	288b883a 	add	r5,r5,r2
    9664:	d9402415 	stw	r5,144(sp)
    9668:	003dd006 	br	8dac <__alt_data_end+0xfffd806c>
    966c:	d8001d85 	stb	zero,118(sp)
    9670:	80005d16 	blt	r16,zero,97e8 <___vfiprintf_internal_r+0x1080>
    9674:	00ffdfc4 	movi	r3,-129
    9678:	9d04b03a 	or	r2,r19,r20
    967c:	88e2703a 	and	r17,r17,r3
    9680:	103d3726 	beq	r2,zero,8b60 <__alt_data_end+0xfffd7e20>
    9684:	002b883a 	mov	r21,zero
    9688:	d9002617 	ldw	r4,152(sp)
    968c:	ddc01a04 	addi	r23,sp,104
    9690:	988003cc 	andi	r2,r19,15
    9694:	a006973a 	slli	r3,r20,28
    9698:	2085883a 	add	r2,r4,r2
    969c:	9826d13a 	srli	r19,r19,4
    96a0:	10800003 	ldbu	r2,0(r2)
    96a4:	a028d13a 	srli	r20,r20,4
    96a8:	bdffffc4 	addi	r23,r23,-1
    96ac:	1ce6b03a 	or	r19,r3,r19
    96b0:	b8800005 	stb	r2,0(r23)
    96b4:	9d04b03a 	or	r2,r19,r20
    96b8:	103ff51e 	bne	r2,zero,9690 <__alt_data_end+0xfffd8950>
    96bc:	d8801e17 	ldw	r2,120(sp)
    96c0:	15e9c83a 	sub	r20,r2,r23
    96c4:	003d2b06 	br	8b74 <__alt_data_end+0xfffd7e34>
    96c8:	d9402017 	ldw	r5,128(sp)
    96cc:	d9002117 	ldw	r4,132(sp)
    96d0:	d9801a04 	addi	r6,sp,104
    96d4:	00086540 	call	8654 <__sprint_r.part.0>
    96d8:	103f5b1e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    96dc:	d8801c17 	ldw	r2,112(sp)
    96e0:	d811883a 	mov	r8,sp
    96e4:	003f6706 	br	9484 <__alt_data_end+0xfffd8744>
    96e8:	d9402017 	ldw	r5,128(sp)
    96ec:	d9002117 	ldw	r4,132(sp)
    96f0:	d9801a04 	addi	r6,sp,104
    96f4:	00086540 	call	8654 <__sprint_r.part.0>
    96f8:	103f531e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    96fc:	d811883a 	mov	r8,sp
    9700:	003cd906 	br	8a68 <__alt_data_end+0xfffd7d28>
    9704:	10803fcc 	andi	r2,r2,255
    9708:	1080201c 	xori	r2,r2,128
    970c:	10bfe004 	addi	r2,r2,-128
    9710:	00c00c04 	movi	r3,48
    9714:	10ffe926 	beq	r2,r3,96bc <__alt_data_end+0xfffd897c>
    9718:	b8ffffc5 	stb	r3,-1(r23)
    971c:	d8c01e17 	ldw	r3,120(sp)
    9720:	b8bfffc4 	addi	r2,r23,-1
    9724:	102f883a 	mov	r23,r2
    9728:	18a9c83a 	sub	r20,r3,r2
    972c:	003d1106 	br	8b74 <__alt_data_end+0xfffd7e34>
    9730:	d9402017 	ldw	r5,128(sp)
    9734:	d9002117 	ldw	r4,132(sp)
    9738:	d9801a04 	addi	r6,sp,104
    973c:	d8c02a15 	stw	r3,168(sp)
    9740:	d9c02b15 	stw	r7,172(sp)
    9744:	00086540 	call	8654 <__sprint_r.part.0>
    9748:	d8c02a17 	ldw	r3,168(sp)
    974c:	d9c02b17 	ldw	r7,172(sp)
    9750:	103f3d1e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9754:	d9001b17 	ldw	r4,108(sp)
    9758:	d8801c17 	ldw	r2,112(sp)
    975c:	d811883a 	mov	r8,sp
    9760:	21400044 	addi	r5,r4,1
    9764:	003d4406 	br	8c78 <__alt_data_end+0xfffd7f38>
    9768:	d9402017 	ldw	r5,128(sp)
    976c:	d9002117 	ldw	r4,132(sp)
    9770:	d9801a04 	addi	r6,sp,104
    9774:	d8c02a15 	stw	r3,168(sp)
    9778:	00086540 	call	8654 <__sprint_r.part.0>
    977c:	d8c02a17 	ldw	r3,168(sp)
    9780:	103f311e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9784:	d9001b17 	ldw	r4,108(sp)
    9788:	d8801c17 	ldw	r2,112(sp)
    978c:	d811883a 	mov	r8,sp
    9790:	21400044 	addi	r5,r4,1
    9794:	003ef406 	br	9368 <__alt_data_end+0xfffd8628>
    9798:	1000bd1e 	bne	r2,zero,9a90 <___vfiprintf_internal_r+0x1328>
    979c:	01400044 	movi	r5,1
    97a0:	0009883a 	mov	r4,zero
    97a4:	d811883a 	mov	r8,sp
    97a8:	003ef106 	br	9370 <__alt_data_end+0xfffd8630>
    97ac:	d9402017 	ldw	r5,128(sp)
    97b0:	d9002117 	ldw	r4,132(sp)
    97b4:	d9801a04 	addi	r6,sp,104
    97b8:	00086540 	call	8654 <__sprint_r.part.0>
    97bc:	103f221e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    97c0:	d9401b17 	ldw	r5,108(sp)
    97c4:	d8801c17 	ldw	r2,112(sp)
    97c8:	d811883a 	mov	r8,sp
    97cc:	29400044 	addi	r5,r5,1
    97d0:	003d6206 	br	8d5c <__alt_data_end+0xfffd801c>
    97d4:	014000b4 	movhi	r5,2
    97d8:	29632404 	addi	r5,r5,-29552
    97dc:	d9402615 	stw	r5,152(sp)
    97e0:	d8c02215 	stw	r3,136(sp)
    97e4:	1023883a 	mov	r17,r2
    97e8:	9d04b03a 	or	r2,r19,r20
    97ec:	103fa51e 	bne	r2,zero,9684 <__alt_data_end+0xfffd8944>
    97f0:	002b883a 	mov	r21,zero
    97f4:	00800084 	movi	r2,2
    97f8:	003e4a06 	br	9124 <__alt_data_end+0xfffd83e4>
    97fc:	014000b4 	movhi	r5,2
    9800:	29632404 	addi	r5,r5,-29552
    9804:	002b883a 	mov	r21,zero
    9808:	d9402615 	stw	r5,152(sp)
    980c:	003f9e06 	br	9688 <__alt_data_end+0xfffd8948>
    9810:	d9402217 	ldw	r5,136(sp)
    9814:	d8001d85 	stb	zero,118(sp)
    9818:	0029883a 	mov	r20,zero
    981c:	28800104 	addi	r2,r5,4
    9820:	2cc00017 	ldw	r19,0(r5)
    9824:	803e3a16 	blt	r16,zero,9110 <__alt_data_end+0xfffd83d0>
    9828:	00ffdfc4 	movi	r3,-129
    982c:	d8802215 	stw	r2,136(sp)
    9830:	88e2703a 	and	r17,r17,r3
    9834:	002b883a 	mov	r21,zero
    9838:	983e9b26 	beq	r19,zero,92a8 <__alt_data_end+0xfffd8568>
    983c:	00800244 	movi	r2,9
    9840:	14fdc936 	bltu	r2,r19,8f68 <__alt_data_end+0xfffd8228>
    9844:	003e9a06 	br	92b0 <__alt_data_end+0xfffd8570>
    9848:	00800c04 	movi	r2,48
    984c:	d8c01d45 	stb	r3,117(sp)
    9850:	d8801d05 	stb	r2,116(sp)
    9854:	d8001d85 	stb	zero,118(sp)
    9858:	88c00094 	ori	r3,r17,2
    985c:	80009c16 	blt	r16,zero,9ad0 <___vfiprintf_internal_r+0x1368>
    9860:	00bfdfc4 	movi	r2,-129
    9864:	88a2703a 	and	r17,r17,r2
    9868:	8c400094 	ori	r17,r17,2
    986c:	002b883a 	mov	r21,zero
    9870:	003f8506 	br	9688 <__alt_data_end+0xfffd8948>
    9874:	b029883a 	mov	r20,r22
    9878:	003c0b06 	br	88a8 <__alt_data_end+0xfffd7b68>
    987c:	04e7c83a 	sub	r19,zero,r19
    9880:	05400b44 	movi	r21,45
    9884:	9804c03a 	cmpne	r2,r19,zero
    9888:	0529c83a 	sub	r20,zero,r20
    988c:	dd401d85 	stb	r21,118(sp)
    9890:	a0a9c83a 	sub	r20,r20,r2
    9894:	80009716 	blt	r16,zero,9af4 <___vfiprintf_internal_r+0x138c>
    9898:	00bfdfc4 	movi	r2,-129
    989c:	88a2703a 	and	r17,r17,r2
    98a0:	003db006 	br	8f64 <__alt_data_end+0xfffd8224>
    98a4:	b0c00007 	ldb	r3,0(r22)
    98a8:	003c0c06 	br	88dc <__alt_data_end+0xfffd7b9c>
    98ac:	8880100c 	andi	r2,r17,64
    98b0:	d8001d85 	stb	zero,118(sp)
    98b4:	1000461e 	bne	r2,zero,99d0 <___vfiprintf_internal_r+0x1268>
    98b8:	d9002217 	ldw	r4,136(sp)
    98bc:	0029883a 	mov	r20,zero
    98c0:	20800104 	addi	r2,r4,4
    98c4:	24c00017 	ldw	r19,0(r4)
    98c8:	803df80e 	bge	r16,zero,90ac <__alt_data_end+0xfffd836c>
    98cc:	9d06b03a 	or	r3,r19,r20
    98d0:	d8802215 	stw	r2,136(sp)
    98d4:	183d5e1e 	bne	r3,zero,8e50 <__alt_data_end+0xfffd8110>
    98d8:	002b883a 	mov	r21,zero
    98dc:	0005883a 	mov	r2,zero
    98e0:	003e1006 	br	9124 <__alt_data_end+0xfffd83e4>
    98e4:	8880040c 	andi	r2,r17,16
    98e8:	1000321e 	bne	r2,zero,99b4 <___vfiprintf_internal_r+0x124c>
    98ec:	8c40100c 	andi	r17,r17,64
    98f0:	88008d26 	beq	r17,zero,9b28 <___vfiprintf_internal_r+0x13c0>
    98f4:	d9402217 	ldw	r5,136(sp)
    98f8:	d8c02417 	ldw	r3,144(sp)
    98fc:	28800017 	ldw	r2,0(r5)
    9900:	29400104 	addi	r5,r5,4
    9904:	d9402215 	stw	r5,136(sp)
    9908:	10c0000d 	sth	r3,0(r2)
    990c:	003bca06 	br	8838 <__alt_data_end+0xfffd7af8>
    9910:	8880100c 	andi	r2,r17,64
    9914:	10003a26 	beq	r2,zero,9a00 <___vfiprintf_internal_r+0x1298>
    9918:	d8802217 	ldw	r2,136(sp)
    991c:	14c0000f 	ldh	r19,0(r2)
    9920:	10800104 	addi	r2,r2,4
    9924:	d8802215 	stw	r2,136(sp)
    9928:	9829d7fa 	srai	r20,r19,31
    992c:	a005883a 	mov	r2,r20
    9930:	003d8506 	br	8f48 <__alt_data_end+0xfffd8208>
    9934:	8880100c 	andi	r2,r17,64
    9938:	10002b26 	beq	r2,zero,99e8 <___vfiprintf_internal_r+0x1280>
    993c:	d8802217 	ldw	r2,136(sp)
    9940:	0029883a 	mov	r20,zero
    9944:	14c0000b 	ldhu	r19,0(r2)
    9948:	10800104 	addi	r2,r2,4
    994c:	d8802215 	stw	r2,136(sp)
    9950:	003d5d06 	br	8ec8 <__alt_data_end+0xfffd8188>
    9954:	d9402017 	ldw	r5,128(sp)
    9958:	d9002117 	ldw	r4,132(sp)
    995c:	d9801a04 	addi	r6,sp,104
    9960:	d8c02a15 	stw	r3,168(sp)
    9964:	d9c02b15 	stw	r7,172(sp)
    9968:	00086540 	call	8654 <__sprint_r.part.0>
    996c:	d8c02a17 	ldw	r3,168(sp)
    9970:	d9c02b17 	ldw	r7,172(sp)
    9974:	103eb41e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9978:	d9001b17 	ldw	r4,108(sp)
    997c:	d8801c17 	ldw	r2,112(sp)
    9980:	d811883a 	mov	r8,sp
    9984:	21400044 	addi	r5,r4,1
    9988:	003e6706 	br	9328 <__alt_data_end+0xfffd85e8>
    998c:	00bfffc4 	movi	r2,-1
    9990:	003c4a06 	br	8abc <__alt_data_end+0xfffd7d7c>
    9994:	9805883a 	mov	r2,r19
    9998:	003ee806 	br	953c <__alt_data_end+0xfffd87fc>
    999c:	d8c02217 	ldw	r3,136(sp)
    99a0:	0029883a 	mov	r20,zero
    99a4:	18800104 	addi	r2,r3,4
    99a8:	1cc0000b 	ldhu	r19,0(r3)
    99ac:	803f9e0e 	bge	r16,zero,9828 <__alt_data_end+0xfffd8ae8>
    99b0:	003dd706 	br	9110 <__alt_data_end+0xfffd83d0>
    99b4:	d8c02217 	ldw	r3,136(sp)
    99b8:	d9002417 	ldw	r4,144(sp)
    99bc:	18800017 	ldw	r2,0(r3)
    99c0:	18c00104 	addi	r3,r3,4
    99c4:	d8c02215 	stw	r3,136(sp)
    99c8:	11000015 	stw	r4,0(r2)
    99cc:	003b9a06 	br	8838 <__alt_data_end+0xfffd7af8>
    99d0:	d8c02217 	ldw	r3,136(sp)
    99d4:	0029883a 	mov	r20,zero
    99d8:	18800104 	addi	r2,r3,4
    99dc:	1cc0000b 	ldhu	r19,0(r3)
    99e0:	803db20e 	bge	r16,zero,90ac <__alt_data_end+0xfffd836c>
    99e4:	003fb906 	br	98cc <__alt_data_end+0xfffd8b8c>
    99e8:	d9002217 	ldw	r4,136(sp)
    99ec:	0029883a 	mov	r20,zero
    99f0:	24c00017 	ldw	r19,0(r4)
    99f4:	21000104 	addi	r4,r4,4
    99f8:	d9002215 	stw	r4,136(sp)
    99fc:	003d3206 	br	8ec8 <__alt_data_end+0xfffd8188>
    9a00:	d8c02217 	ldw	r3,136(sp)
    9a04:	1cc00017 	ldw	r19,0(r3)
    9a08:	18c00104 	addi	r3,r3,4
    9a0c:	d8c02215 	stw	r3,136(sp)
    9a10:	9829d7fa 	srai	r20,r19,31
    9a14:	a005883a 	mov	r2,r20
    9a18:	003d4b06 	br	8f48 <__alt_data_end+0xfffd8208>
    9a1c:	0009883a 	mov	r4,zero
    9a20:	01400044 	movi	r5,1
    9a24:	d811883a 	mov	r8,sp
    9a28:	003e4f06 	br	9368 <__alt_data_end+0xfffd8628>
    9a2c:	d8c02215 	stw	r3,136(sp)
    9a30:	002b883a 	mov	r21,zero
    9a34:	003db806 	br	9118 <__alt_data_end+0xfffd83d8>
    9a38:	d811883a 	mov	r8,sp
    9a3c:	003e9606 	br	9498 <__alt_data_end+0xfffd8758>
    9a40:	010000b4 	movhi	r4,2
    9a44:	21238504 	addi	r4,r4,-29164
    9a48:	d9002315 	stw	r4,140(sp)
    9a4c:	003e6306 	br	93dc <__alt_data_end+0xfffd869c>
    9a50:	b0c00043 	ldbu	r3,1(r22)
    9a54:	8c400814 	ori	r17,r17,32
    9a58:	b5800044 	addi	r22,r22,1
    9a5c:	18c03fcc 	andi	r3,r3,255
    9a60:	18c0201c 	xori	r3,r3,128
    9a64:	18ffe004 	addi	r3,r3,-128
    9a68:	003b9c06 	br	88dc <__alt_data_end+0xfffd7b9c>
    9a6c:	b809883a 	mov	r4,r23
    9a70:	da002a15 	stw	r8,168(sp)
    9a74:	00018400 	call	1840 <strlen>
    9a78:	1029883a 	mov	r20,r2
    9a7c:	dd401d83 	ldbu	r21,118(sp)
    9a80:	df002215 	stw	fp,136(sp)
    9a84:	0021883a 	mov	r16,zero
    9a88:	da002a17 	ldw	r8,168(sp)
    9a8c:	003c3906 	br	8b74 <__alt_data_end+0xfffd7e34>
    9a90:	d9402017 	ldw	r5,128(sp)
    9a94:	d9002117 	ldw	r4,132(sp)
    9a98:	d9801a04 	addi	r6,sp,104
    9a9c:	00086540 	call	8654 <__sprint_r.part.0>
    9aa0:	103e691e 	bne	r2,zero,9448 <__alt_data_end+0xfffd8708>
    9aa4:	d9001b17 	ldw	r4,108(sp)
    9aa8:	d8801c17 	ldw	r2,112(sp)
    9aac:	d811883a 	mov	r8,sp
    9ab0:	21400044 	addi	r5,r4,1
    9ab4:	003e2e06 	br	9370 <__alt_data_end+0xfffd8630>
    9ab8:	010000b4 	movhi	r4,2
    9abc:	21238904 	addi	r4,r4,-29148
    9ac0:	d9002315 	stw	r4,140(sp)
    9ac4:	d9001b17 	ldw	r4,108(sp)
    9ac8:	21000044 	addi	r4,r4,1
    9acc:	003c5e06 	br	8c48 <__alt_data_end+0xfffd7f08>
    9ad0:	002b883a 	mov	r21,zero
    9ad4:	00800084 	movi	r2,2
    9ad8:	10803fcc 	andi	r2,r2,255
    9adc:	01000044 	movi	r4,1
    9ae0:	11002b26 	beq	r2,r4,9b90 <___vfiprintf_internal_r+0x1428>
    9ae4:	01000084 	movi	r4,2
    9ae8:	11002b1e 	bne	r2,r4,9b98 <___vfiprintf_internal_r+0x1430>
    9aec:	1823883a 	mov	r17,r3
    9af0:	003ee506 	br	9688 <__alt_data_end+0xfffd8948>
    9af4:	8807883a 	mov	r3,r17
    9af8:	00800044 	movi	r2,1
    9afc:	003ff606 	br	9ad8 <__alt_data_end+0xfffd8d98>
    9b00:	00800184 	movi	r2,6
    9b04:	1400012e 	bgeu	r2,r16,9b0c <___vfiprintf_internal_r+0x13a4>
    9b08:	1021883a 	mov	r16,r2
    9b0c:	8029883a 	mov	r20,r16
    9b10:	8027883a 	mov	r19,r16
    9b14:	80002216 	blt	r16,zero,9ba0 <___vfiprintf_internal_r+0x1438>
    9b18:	05c000b4 	movhi	r23,2
    9b1c:	df002215 	stw	fp,136(sp)
    9b20:	bde32904 	addi	r23,r23,-29532
    9b24:	003cfb06 	br	8f14 <__alt_data_end+0xfffd81d4>
    9b28:	d9002217 	ldw	r4,136(sp)
    9b2c:	d9402417 	ldw	r5,144(sp)
    9b30:	20800017 	ldw	r2,0(r4)
    9b34:	21000104 	addi	r4,r4,4
    9b38:	d9002215 	stw	r4,136(sp)
    9b3c:	11400015 	stw	r5,0(r2)
    9b40:	003b3d06 	br	8838 <__alt_data_end+0xfffd7af8>
    9b44:	014000b4 	movhi	r5,2
    9b48:	29638904 	addi	r5,r5,-29148
    9b4c:	d9402315 	stw	r5,140(sp)
    9b50:	d9401b17 	ldw	r5,108(sp)
    9b54:	29400044 	addi	r5,r5,1
    9b58:	003e6d06 	br	9510 <__alt_data_end+0xfffd87d0>
    9b5c:	8029883a 	mov	r20,r16
    9b60:	dd401d83 	ldbu	r21,118(sp)
    9b64:	df002215 	stw	fp,136(sp)
    9b68:	0021883a 	mov	r16,zero
    9b6c:	003c0106 	br	8b74 <__alt_data_end+0xfffd7e34>
    9b70:	00c000b4 	movhi	r3,2
    9b74:	18e38504 	addi	r3,r3,-29164
    9b78:	d8c02315 	stw	r3,140(sp)
    9b7c:	280d883a 	mov	r6,r5
    9b80:	003c6906 	br	8d28 <__alt_data_end+0xfffd7fe8>
    9b84:	802d883a 	mov	r22,r16
    9b88:	0021883a 	mov	r16,zero
    9b8c:	003b5406 	br	88e0 <__alt_data_end+0xfffd7ba0>
    9b90:	1823883a 	mov	r17,r3
    9b94:	003cf306 	br	8f64 <__alt_data_end+0xfffd8224>
    9b98:	1823883a 	mov	r17,r3
    9b9c:	003cad06 	br	8e54 <__alt_data_end+0xfffd8114>
    9ba0:	0027883a 	mov	r19,zero
    9ba4:	003fdc06 	br	9b18 <__alt_data_end+0xfffd8dd8>
    9ba8:	d9402217 	ldw	r5,136(sp)
    9bac:	8005883a 	mov	r2,r16
    9bb0:	b0c00043 	ldbu	r3,1(r22)
    9bb4:	2c000017 	ldw	r16,0(r5)
    9bb8:	29000104 	addi	r4,r5,4
    9bbc:	d9002215 	stw	r4,136(sp)
    9bc0:	102d883a 	mov	r22,r2
    9bc4:	803fa50e 	bge	r16,zero,9a5c <__alt_data_end+0xfffd8d1c>
    9bc8:	18c03fcc 	andi	r3,r3,255
    9bcc:	18c0201c 	xori	r3,r3,128
    9bd0:	043fffc4 	movi	r16,-1
    9bd4:	18ffe004 	addi	r3,r3,-128
    9bd8:	003b4006 	br	88dc <__alt_data_end+0xfffd7b9c>
    9bdc:	d9402303 	ldbu	r5,140(sp)
    9be0:	d9401d85 	stb	r5,118(sp)
    9be4:	003cae06 	br	8ea0 <__alt_data_end+0xfffd8160>
    9be8:	d8c02303 	ldbu	r3,140(sp)
    9bec:	d8c01d85 	stb	r3,118(sp)
    9bf0:	003d1406 	br	9044 <__alt_data_end+0xfffd8304>
    9bf4:	d8c02303 	ldbu	r3,140(sp)
    9bf8:	d8c01d85 	stb	r3,118(sp)
    9bfc:	003cca06 	br	8f28 <__alt_data_end+0xfffd81e8>
    9c00:	8880004c 	andi	r2,r17,1
    9c04:	002b883a 	mov	r21,zero
    9c08:	10000526 	beq	r2,zero,9c20 <___vfiprintf_internal_r+0x14b8>
    9c0c:	00800c04 	movi	r2,48
    9c10:	d88019c5 	stb	r2,103(sp)
    9c14:	dd002817 	ldw	r20,160(sp)
    9c18:	ddc019c4 	addi	r23,sp,103
    9c1c:	003bd506 	br	8b74 <__alt_data_end+0xfffd7e34>
    9c20:	0029883a 	mov	r20,zero
    9c24:	ddc01a04 	addi	r23,sp,104
    9c28:	003bd206 	br	8b74 <__alt_data_end+0xfffd7e34>
    9c2c:	d9002303 	ldbu	r4,140(sp)
    9c30:	d9001d85 	stb	r4,118(sp)
    9c34:	003da606 	br	92d0 <__alt_data_end+0xfffd8590>
    9c38:	d8c02303 	ldbu	r3,140(sp)
    9c3c:	d8c01d85 	stb	r3,118(sp)
    9c40:	003c7606 	br	8e1c <__alt_data_end+0xfffd80dc>
    9c44:	d8c02303 	ldbu	r3,140(sp)
    9c48:	d8c01d85 	stb	r3,118(sp)
    9c4c:	003c6506 	br	8de4 <__alt_data_end+0xfffd80a4>
    9c50:	d9002303 	ldbu	r4,140(sp)
    9c54:	d9001d85 	stb	r4,118(sp)
    9c58:	003d3d06 	br	9150 <__alt_data_end+0xfffd8410>
    9c5c:	d8c02303 	ldbu	r3,140(sp)
    9c60:	d8c01d85 	stb	r3,118(sp)
    9c64:	003d1d06 	br	90dc <__alt_data_end+0xfffd839c>
    9c68:	d8c02303 	ldbu	r3,140(sp)
    9c6c:	d8c01d85 	stb	r3,118(sp)
    9c70:	003d0306 	br	9080 <__alt_data_end+0xfffd8340>

00009c74 <__vfiprintf_internal>:
    9c74:	008000b4 	movhi	r2,2
    9c78:	10aae204 	addi	r2,r2,-21624
    9c7c:	300f883a 	mov	r7,r6
    9c80:	280d883a 	mov	r6,r5
    9c84:	200b883a 	mov	r5,r4
    9c88:	11000017 	ldw	r4,0(r2)
    9c8c:	00087681 	jmpi	8768 <___vfiprintf_internal_r>

00009c90 <__sbprintf>:
    9c90:	2880030b 	ldhu	r2,12(r5)
    9c94:	2ac01917 	ldw	r11,100(r5)
    9c98:	2a80038b 	ldhu	r10,14(r5)
    9c9c:	2a400717 	ldw	r9,28(r5)
    9ca0:	2a000917 	ldw	r8,36(r5)
    9ca4:	defee204 	addi	sp,sp,-1144
    9ca8:	00c10004 	movi	r3,1024
    9cac:	dc011a15 	stw	r16,1128(sp)
    9cb0:	10bfff4c 	andi	r2,r2,65533
    9cb4:	2821883a 	mov	r16,r5
    9cb8:	d8cb883a 	add	r5,sp,r3
    9cbc:	dc811c15 	stw	r18,1136(sp)
    9cc0:	dc411b15 	stw	r17,1132(sp)
    9cc4:	dfc11d15 	stw	ra,1140(sp)
    9cc8:	2025883a 	mov	r18,r4
    9ccc:	d881030d 	sth	r2,1036(sp)
    9cd0:	dac11915 	stw	r11,1124(sp)
    9cd4:	da81038d 	sth	r10,1038(sp)
    9cd8:	da410715 	stw	r9,1052(sp)
    9cdc:	da010915 	stw	r8,1060(sp)
    9ce0:	dec10015 	stw	sp,1024(sp)
    9ce4:	dec10415 	stw	sp,1040(sp)
    9ce8:	d8c10215 	stw	r3,1032(sp)
    9cec:	d8c10515 	stw	r3,1044(sp)
    9cf0:	d8010615 	stw	zero,1048(sp)
    9cf4:	00087680 	call	8768 <___vfiprintf_internal_r>
    9cf8:	1023883a 	mov	r17,r2
    9cfc:	10000416 	blt	r2,zero,9d10 <__sbprintf+0x80>
    9d00:	d9410004 	addi	r5,sp,1024
    9d04:	9009883a 	mov	r4,r18
    9d08:	00058ac0 	call	58ac <_fflush_r>
    9d0c:	10000d1e 	bne	r2,zero,9d44 <__sbprintf+0xb4>
    9d10:	d881030b 	ldhu	r2,1036(sp)
    9d14:	1080100c 	andi	r2,r2,64
    9d18:	10000326 	beq	r2,zero,9d28 <__sbprintf+0x98>
    9d1c:	8080030b 	ldhu	r2,12(r16)
    9d20:	10801014 	ori	r2,r2,64
    9d24:	8080030d 	sth	r2,12(r16)
    9d28:	8805883a 	mov	r2,r17
    9d2c:	dfc11d17 	ldw	ra,1140(sp)
    9d30:	dc811c17 	ldw	r18,1136(sp)
    9d34:	dc411b17 	ldw	r17,1132(sp)
    9d38:	dc011a17 	ldw	r16,1128(sp)
    9d3c:	dec11e04 	addi	sp,sp,1144
    9d40:	f800283a 	ret
    9d44:	047fffc4 	movi	r17,-1
    9d48:	003ff106 	br	9d10 <__alt_data_end+0xfffd8fd0>

00009d4c <__swbuf_r>:
    9d4c:	defffb04 	addi	sp,sp,-20
    9d50:	dcc00315 	stw	r19,12(sp)
    9d54:	dc800215 	stw	r18,8(sp)
    9d58:	dc000015 	stw	r16,0(sp)
    9d5c:	dfc00415 	stw	ra,16(sp)
    9d60:	dc400115 	stw	r17,4(sp)
    9d64:	2025883a 	mov	r18,r4
    9d68:	2827883a 	mov	r19,r5
    9d6c:	3021883a 	mov	r16,r6
    9d70:	20000226 	beq	r4,zero,9d7c <__swbuf_r+0x30>
    9d74:	20800e17 	ldw	r2,56(r4)
    9d78:	10004226 	beq	r2,zero,9e84 <__swbuf_r+0x138>
    9d7c:	80800617 	ldw	r2,24(r16)
    9d80:	8100030b 	ldhu	r4,12(r16)
    9d84:	80800215 	stw	r2,8(r16)
    9d88:	2080020c 	andi	r2,r4,8
    9d8c:	10003626 	beq	r2,zero,9e68 <__swbuf_r+0x11c>
    9d90:	80c00417 	ldw	r3,16(r16)
    9d94:	18003426 	beq	r3,zero,9e68 <__swbuf_r+0x11c>
    9d98:	2088000c 	andi	r2,r4,8192
    9d9c:	9c403fcc 	andi	r17,r19,255
    9da0:	10001a26 	beq	r2,zero,9e0c <__swbuf_r+0xc0>
    9da4:	80800017 	ldw	r2,0(r16)
    9da8:	81000517 	ldw	r4,20(r16)
    9dac:	10c7c83a 	sub	r3,r2,r3
    9db0:	1900200e 	bge	r3,r4,9e34 <__swbuf_r+0xe8>
    9db4:	18c00044 	addi	r3,r3,1
    9db8:	81000217 	ldw	r4,8(r16)
    9dbc:	11400044 	addi	r5,r2,1
    9dc0:	81400015 	stw	r5,0(r16)
    9dc4:	213fffc4 	addi	r4,r4,-1
    9dc8:	81000215 	stw	r4,8(r16)
    9dcc:	14c00005 	stb	r19,0(r2)
    9dd0:	80800517 	ldw	r2,20(r16)
    9dd4:	10c01e26 	beq	r2,r3,9e50 <__swbuf_r+0x104>
    9dd8:	8080030b 	ldhu	r2,12(r16)
    9ddc:	1080004c 	andi	r2,r2,1
    9de0:	10000226 	beq	r2,zero,9dec <__swbuf_r+0xa0>
    9de4:	00800284 	movi	r2,10
    9de8:	88801926 	beq	r17,r2,9e50 <__swbuf_r+0x104>
    9dec:	8805883a 	mov	r2,r17
    9df0:	dfc00417 	ldw	ra,16(sp)
    9df4:	dcc00317 	ldw	r19,12(sp)
    9df8:	dc800217 	ldw	r18,8(sp)
    9dfc:	dc400117 	ldw	r17,4(sp)
    9e00:	dc000017 	ldw	r16,0(sp)
    9e04:	dec00504 	addi	sp,sp,20
    9e08:	f800283a 	ret
    9e0c:	81401917 	ldw	r5,100(r16)
    9e10:	00b7ffc4 	movi	r2,-8193
    9e14:	21080014 	ori	r4,r4,8192
    9e18:	2884703a 	and	r2,r5,r2
    9e1c:	80801915 	stw	r2,100(r16)
    9e20:	80800017 	ldw	r2,0(r16)
    9e24:	8100030d 	sth	r4,12(r16)
    9e28:	81000517 	ldw	r4,20(r16)
    9e2c:	10c7c83a 	sub	r3,r2,r3
    9e30:	193fe016 	blt	r3,r4,9db4 <__alt_data_end+0xfffd9074>
    9e34:	800b883a 	mov	r5,r16
    9e38:	9009883a 	mov	r4,r18
    9e3c:	00058ac0 	call	58ac <_fflush_r>
    9e40:	1000071e 	bne	r2,zero,9e60 <__swbuf_r+0x114>
    9e44:	80800017 	ldw	r2,0(r16)
    9e48:	00c00044 	movi	r3,1
    9e4c:	003fda06 	br	9db8 <__alt_data_end+0xfffd9078>
    9e50:	800b883a 	mov	r5,r16
    9e54:	9009883a 	mov	r4,r18
    9e58:	00058ac0 	call	58ac <_fflush_r>
    9e5c:	103fe326 	beq	r2,zero,9dec <__alt_data_end+0xfffd90ac>
    9e60:	00bfffc4 	movi	r2,-1
    9e64:	003fe206 	br	9df0 <__alt_data_end+0xfffd90b0>
    9e68:	800b883a 	mov	r5,r16
    9e6c:	9009883a 	mov	r4,r18
    9e70:	0003c8c0 	call	3c8c <__swsetup_r>
    9e74:	103ffa1e 	bne	r2,zero,9e60 <__alt_data_end+0xfffd9120>
    9e78:	8100030b 	ldhu	r4,12(r16)
    9e7c:	80c00417 	ldw	r3,16(r16)
    9e80:	003fc506 	br	9d98 <__alt_data_end+0xfffd9058>
    9e84:	0005c980 	call	5c98 <__sinit>
    9e88:	003fbc06 	br	9d7c <__alt_data_end+0xfffd903c>

00009e8c <__swbuf>:
    9e8c:	008000b4 	movhi	r2,2
    9e90:	10aae204 	addi	r2,r2,-21624
    9e94:	280d883a 	mov	r6,r5
    9e98:	200b883a 	mov	r5,r4
    9e9c:	11000017 	ldw	r4,0(r2)
    9ea0:	0009d4c1 	jmpi	9d4c <__swbuf_r>

00009ea4 <_write_r>:
    9ea4:	defffd04 	addi	sp,sp,-12
    9ea8:	2805883a 	mov	r2,r5
    9eac:	dc000015 	stw	r16,0(sp)
    9eb0:	040000b4 	movhi	r16,2
    9eb4:	dc400115 	stw	r17,4(sp)
    9eb8:	300b883a 	mov	r5,r6
    9ebc:	8431f904 	addi	r16,r16,-14364
    9ec0:	2023883a 	mov	r17,r4
    9ec4:	380d883a 	mov	r6,r7
    9ec8:	1009883a 	mov	r4,r2
    9ecc:	dfc00215 	stw	ra,8(sp)
    9ed0:	80000015 	stw	zero,0(r16)
    9ed4:	000e3b00 	call	e3b0 <write>
    9ed8:	00ffffc4 	movi	r3,-1
    9edc:	10c00526 	beq	r2,r3,9ef4 <_write_r+0x50>
    9ee0:	dfc00217 	ldw	ra,8(sp)
    9ee4:	dc400117 	ldw	r17,4(sp)
    9ee8:	dc000017 	ldw	r16,0(sp)
    9eec:	dec00304 	addi	sp,sp,12
    9ef0:	f800283a 	ret
    9ef4:	80c00017 	ldw	r3,0(r16)
    9ef8:	183ff926 	beq	r3,zero,9ee0 <__alt_data_end+0xfffd91a0>
    9efc:	88c00015 	stw	r3,0(r17)
    9f00:	003ff706 	br	9ee0 <__alt_data_end+0xfffd91a0>

00009f04 <_close_r>:
    9f04:	defffd04 	addi	sp,sp,-12
    9f08:	dc000015 	stw	r16,0(sp)
    9f0c:	040000b4 	movhi	r16,2
    9f10:	dc400115 	stw	r17,4(sp)
    9f14:	8431f904 	addi	r16,r16,-14364
    9f18:	2023883a 	mov	r17,r4
    9f1c:	2809883a 	mov	r4,r5
    9f20:	dfc00215 	stw	ra,8(sp)
    9f24:	80000015 	stw	zero,0(r16)
    9f28:	000db380 	call	db38 <close>
    9f2c:	00ffffc4 	movi	r3,-1
    9f30:	10c00526 	beq	r2,r3,9f48 <_close_r+0x44>
    9f34:	dfc00217 	ldw	ra,8(sp)
    9f38:	dc400117 	ldw	r17,4(sp)
    9f3c:	dc000017 	ldw	r16,0(sp)
    9f40:	dec00304 	addi	sp,sp,12
    9f44:	f800283a 	ret
    9f48:	80c00017 	ldw	r3,0(r16)
    9f4c:	183ff926 	beq	r3,zero,9f34 <__alt_data_end+0xfffd91f4>
    9f50:	88c00015 	stw	r3,0(r17)
    9f54:	003ff706 	br	9f34 <__alt_data_end+0xfffd91f4>

00009f58 <_calloc_r>:
    9f58:	defffe04 	addi	sp,sp,-8
    9f5c:	2805883a 	mov	r2,r5
    9f60:	dc000015 	stw	r16,0(sp)
    9f64:	300b883a 	mov	r5,r6
    9f68:	2021883a 	mov	r16,r4
    9f6c:	1009883a 	mov	r4,r2
    9f70:	dfc00115 	stw	ra,4(sp)
    9f74:	0000bc00 	call	bc0 <__mulsi3>
    9f78:	100b883a 	mov	r5,r2
    9f7c:	8009883a 	mov	r4,r16
    9f80:	0000c100 	call	c10 <_malloc_r>
    9f84:	10002926 	beq	r2,zero,a02c <_calloc_r+0xd4>
    9f88:	11bfff17 	ldw	r6,-4(r2)
    9f8c:	1021883a 	mov	r16,r2
    9f90:	00bfff04 	movi	r2,-4
    9f94:	308c703a 	and	r6,r6,r2
    9f98:	00c00904 	movi	r3,36
    9f9c:	308d883a 	add	r6,r6,r2
    9fa0:	19801636 	bltu	r3,r6,9ffc <_calloc_r+0xa4>
    9fa4:	008004c4 	movi	r2,19
    9fa8:	11800b2e 	bgeu	r2,r6,9fd8 <_calloc_r+0x80>
    9fac:	80000015 	stw	zero,0(r16)
    9fb0:	80000115 	stw	zero,4(r16)
    9fb4:	008006c4 	movi	r2,27
    9fb8:	11801a2e 	bgeu	r2,r6,a024 <_calloc_r+0xcc>
    9fbc:	80000215 	stw	zero,8(r16)
    9fc0:	80000315 	stw	zero,12(r16)
    9fc4:	30c0151e 	bne	r6,r3,a01c <_calloc_r+0xc4>
    9fc8:	80000415 	stw	zero,16(r16)
    9fcc:	80800604 	addi	r2,r16,24
    9fd0:	80000515 	stw	zero,20(r16)
    9fd4:	00000106 	br	9fdc <_calloc_r+0x84>
    9fd8:	8005883a 	mov	r2,r16
    9fdc:	10000015 	stw	zero,0(r2)
    9fe0:	10000115 	stw	zero,4(r2)
    9fe4:	10000215 	stw	zero,8(r2)
    9fe8:	8005883a 	mov	r2,r16
    9fec:	dfc00117 	ldw	ra,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00204 	addi	sp,sp,8
    9ff8:	f800283a 	ret
    9ffc:	000b883a 	mov	r5,zero
    a000:	8009883a 	mov	r4,r16
    a004:	00015640 	call	1564 <memset>
    a008:	8005883a 	mov	r2,r16
    a00c:	dfc00117 	ldw	ra,4(sp)
    a010:	dc000017 	ldw	r16,0(sp)
    a014:	dec00204 	addi	sp,sp,8
    a018:	f800283a 	ret
    a01c:	80800404 	addi	r2,r16,16
    a020:	003fee06 	br	9fdc <__alt_data_end+0xfffd929c>
    a024:	80800204 	addi	r2,r16,8
    a028:	003fec06 	br	9fdc <__alt_data_end+0xfffd929c>
    a02c:	0005883a 	mov	r2,zero
    a030:	003fee06 	br	9fec <__alt_data_end+0xfffd92ac>

0000a034 <_fclose_r>:
    a034:	28003926 	beq	r5,zero,a11c <_fclose_r+0xe8>
    a038:	defffc04 	addi	sp,sp,-16
    a03c:	dc400115 	stw	r17,4(sp)
    a040:	dc000015 	stw	r16,0(sp)
    a044:	dfc00315 	stw	ra,12(sp)
    a048:	dc800215 	stw	r18,8(sp)
    a04c:	2023883a 	mov	r17,r4
    a050:	2821883a 	mov	r16,r5
    a054:	20000226 	beq	r4,zero,a060 <_fclose_r+0x2c>
    a058:	20800e17 	ldw	r2,56(r4)
    a05c:	10002726 	beq	r2,zero,a0fc <_fclose_r+0xc8>
    a060:	8080030f 	ldh	r2,12(r16)
    a064:	1000071e 	bne	r2,zero,a084 <_fclose_r+0x50>
    a068:	0005883a 	mov	r2,zero
    a06c:	dfc00317 	ldw	ra,12(sp)
    a070:	dc800217 	ldw	r18,8(sp)
    a074:	dc400117 	ldw	r17,4(sp)
    a078:	dc000017 	ldw	r16,0(sp)
    a07c:	dec00404 	addi	sp,sp,16
    a080:	f800283a 	ret
    a084:	800b883a 	mov	r5,r16
    a088:	8809883a 	mov	r4,r17
    a08c:	00056900 	call	5690 <__sflush_r>
    a090:	1025883a 	mov	r18,r2
    a094:	80800b17 	ldw	r2,44(r16)
    a098:	10000426 	beq	r2,zero,a0ac <_fclose_r+0x78>
    a09c:	81400717 	ldw	r5,28(r16)
    a0a0:	8809883a 	mov	r4,r17
    a0a4:	103ee83a 	callr	r2
    a0a8:	10001616 	blt	r2,zero,a104 <_fclose_r+0xd0>
    a0ac:	8080030b 	ldhu	r2,12(r16)
    a0b0:	1080200c 	andi	r2,r2,128
    a0b4:	1000151e 	bne	r2,zero,a10c <_fclose_r+0xd8>
    a0b8:	81400c17 	ldw	r5,48(r16)
    a0bc:	28000526 	beq	r5,zero,a0d4 <_fclose_r+0xa0>
    a0c0:	80801004 	addi	r2,r16,64
    a0c4:	28800226 	beq	r5,r2,a0d0 <_fclose_r+0x9c>
    a0c8:	8809883a 	mov	r4,r17
    a0cc:	0005e0c0 	call	5e0c <_free_r>
    a0d0:	80000c15 	stw	zero,48(r16)
    a0d4:	81401117 	ldw	r5,68(r16)
    a0d8:	28000326 	beq	r5,zero,a0e8 <_fclose_r+0xb4>
    a0dc:	8809883a 	mov	r4,r17
    a0e0:	0005e0c0 	call	5e0c <_free_r>
    a0e4:	80001115 	stw	zero,68(r16)
    a0e8:	0005ca80 	call	5ca8 <__sfp_lock_acquire>
    a0ec:	8000030d 	sth	zero,12(r16)
    a0f0:	0005cac0 	call	5cac <__sfp_lock_release>
    a0f4:	9005883a 	mov	r2,r18
    a0f8:	003fdc06 	br	a06c <__alt_data_end+0xfffd932c>
    a0fc:	0005c980 	call	5c98 <__sinit>
    a100:	003fd706 	br	a060 <__alt_data_end+0xfffd9320>
    a104:	04bfffc4 	movi	r18,-1
    a108:	003fe806 	br	a0ac <__alt_data_end+0xfffd936c>
    a10c:	81400417 	ldw	r5,16(r16)
    a110:	8809883a 	mov	r4,r17
    a114:	0005e0c0 	call	5e0c <_free_r>
    a118:	003fe706 	br	a0b8 <__alt_data_end+0xfffd9378>
    a11c:	0005883a 	mov	r2,zero
    a120:	f800283a 	ret

0000a124 <fclose>:
    a124:	008000b4 	movhi	r2,2
    a128:	10aae204 	addi	r2,r2,-21624
    a12c:	200b883a 	mov	r5,r4
    a130:	11000017 	ldw	r4,0(r2)
    a134:	000a0341 	jmpi	a034 <_fclose_r>

0000a138 <__fputwc>:
    a138:	defff804 	addi	sp,sp,-32
    a13c:	dcc00415 	stw	r19,16(sp)
    a140:	dc800315 	stw	r18,12(sp)
    a144:	dc000115 	stw	r16,4(sp)
    a148:	dfc00715 	stw	ra,28(sp)
    a14c:	dd400615 	stw	r21,24(sp)
    a150:	dd000515 	stw	r20,20(sp)
    a154:	dc400215 	stw	r17,8(sp)
    a158:	2027883a 	mov	r19,r4
    a15c:	2825883a 	mov	r18,r5
    a160:	3021883a 	mov	r16,r6
    a164:	00067f40 	call	67f4 <__locale_mb_cur_max>
    a168:	00c00044 	movi	r3,1
    a16c:	10c03e26 	beq	r2,r3,a268 <__fputwc+0x130>
    a170:	81c01704 	addi	r7,r16,92
    a174:	900d883a 	mov	r6,r18
    a178:	d80b883a 	mov	r5,sp
    a17c:	9809883a 	mov	r4,r19
    a180:	000a4b00 	call	a4b0 <_wcrtomb_r>
    a184:	1029883a 	mov	r20,r2
    a188:	00bfffc4 	movi	r2,-1
    a18c:	a0802026 	beq	r20,r2,a210 <__fputwc+0xd8>
    a190:	d9400003 	ldbu	r5,0(sp)
    a194:	a0001c26 	beq	r20,zero,a208 <__fputwc+0xd0>
    a198:	0023883a 	mov	r17,zero
    a19c:	05400284 	movi	r21,10
    a1a0:	00000906 	br	a1c8 <__fputwc+0x90>
    a1a4:	80800017 	ldw	r2,0(r16)
    a1a8:	11400005 	stb	r5,0(r2)
    a1ac:	80c00017 	ldw	r3,0(r16)
    a1b0:	18c00044 	addi	r3,r3,1
    a1b4:	80c00015 	stw	r3,0(r16)
    a1b8:	8c400044 	addi	r17,r17,1
    a1bc:	dc45883a 	add	r2,sp,r17
    a1c0:	8d00112e 	bgeu	r17,r20,a208 <__fputwc+0xd0>
    a1c4:	11400003 	ldbu	r5,0(r2)
    a1c8:	80c00217 	ldw	r3,8(r16)
    a1cc:	18ffffc4 	addi	r3,r3,-1
    a1d0:	80c00215 	stw	r3,8(r16)
    a1d4:	183ff30e 	bge	r3,zero,a1a4 <__alt_data_end+0xfffd9464>
    a1d8:	80800617 	ldw	r2,24(r16)
    a1dc:	18801916 	blt	r3,r2,a244 <__fputwc+0x10c>
    a1e0:	80800017 	ldw	r2,0(r16)
    a1e4:	11400005 	stb	r5,0(r2)
    a1e8:	80800017 	ldw	r2,0(r16)
    a1ec:	10c00003 	ldbu	r3,0(r2)
    a1f0:	10800044 	addi	r2,r2,1
    a1f4:	1d402326 	beq	r3,r21,a284 <__fputwc+0x14c>
    a1f8:	80800015 	stw	r2,0(r16)
    a1fc:	8c400044 	addi	r17,r17,1
    a200:	dc45883a 	add	r2,sp,r17
    a204:	8d3fef36 	bltu	r17,r20,a1c4 <__alt_data_end+0xfffd9484>
    a208:	9005883a 	mov	r2,r18
    a20c:	00000406 	br	a220 <__fputwc+0xe8>
    a210:	80c0030b 	ldhu	r3,12(r16)
    a214:	a005883a 	mov	r2,r20
    a218:	18c01014 	ori	r3,r3,64
    a21c:	80c0030d 	sth	r3,12(r16)
    a220:	dfc00717 	ldw	ra,28(sp)
    a224:	dd400617 	ldw	r21,24(sp)
    a228:	dd000517 	ldw	r20,20(sp)
    a22c:	dcc00417 	ldw	r19,16(sp)
    a230:	dc800317 	ldw	r18,12(sp)
    a234:	dc400217 	ldw	r17,8(sp)
    a238:	dc000117 	ldw	r16,4(sp)
    a23c:	dec00804 	addi	sp,sp,32
    a240:	f800283a 	ret
    a244:	800d883a 	mov	r6,r16
    a248:	29403fcc 	andi	r5,r5,255
    a24c:	9809883a 	mov	r4,r19
    a250:	0009d4c0 	call	9d4c <__swbuf_r>
    a254:	10bfffe0 	cmpeqi	r2,r2,-1
    a258:	10803fcc 	andi	r2,r2,255
    a25c:	103fd626 	beq	r2,zero,a1b8 <__alt_data_end+0xfffd9478>
    a260:	00bfffc4 	movi	r2,-1
    a264:	003fee06 	br	a220 <__alt_data_end+0xfffd94e0>
    a268:	90ffffc4 	addi	r3,r18,-1
    a26c:	01003f84 	movi	r4,254
    a270:	20ffbf36 	bltu	r4,r3,a170 <__alt_data_end+0xfffd9430>
    a274:	900b883a 	mov	r5,r18
    a278:	dc800005 	stb	r18,0(sp)
    a27c:	1029883a 	mov	r20,r2
    a280:	003fc506 	br	a198 <__alt_data_end+0xfffd9458>
    a284:	800d883a 	mov	r6,r16
    a288:	a80b883a 	mov	r5,r21
    a28c:	9809883a 	mov	r4,r19
    a290:	0009d4c0 	call	9d4c <__swbuf_r>
    a294:	10bfffe0 	cmpeqi	r2,r2,-1
    a298:	003fef06 	br	a258 <__alt_data_end+0xfffd9518>

0000a29c <_fputwc_r>:
    a29c:	3080030b 	ldhu	r2,12(r6)
    a2a0:	10c8000c 	andi	r3,r2,8192
    a2a4:	1800051e 	bne	r3,zero,a2bc <_fputwc_r+0x20>
    a2a8:	30c01917 	ldw	r3,100(r6)
    a2ac:	10880014 	ori	r2,r2,8192
    a2b0:	3080030d 	sth	r2,12(r6)
    a2b4:	18880014 	ori	r2,r3,8192
    a2b8:	30801915 	stw	r2,100(r6)
    a2bc:	000a1381 	jmpi	a138 <__fputwc>

0000a2c0 <fputwc>:
    a2c0:	008000b4 	movhi	r2,2
    a2c4:	defffc04 	addi	sp,sp,-16
    a2c8:	10aae204 	addi	r2,r2,-21624
    a2cc:	dc000115 	stw	r16,4(sp)
    a2d0:	14000017 	ldw	r16,0(r2)
    a2d4:	dc400215 	stw	r17,8(sp)
    a2d8:	dfc00315 	stw	ra,12(sp)
    a2dc:	2023883a 	mov	r17,r4
    a2e0:	80000226 	beq	r16,zero,a2ec <fputwc+0x2c>
    a2e4:	80800e17 	ldw	r2,56(r16)
    a2e8:	10001026 	beq	r2,zero,a32c <fputwc+0x6c>
    a2ec:	2880030b 	ldhu	r2,12(r5)
    a2f0:	10c8000c 	andi	r3,r2,8192
    a2f4:	1800051e 	bne	r3,zero,a30c <fputwc+0x4c>
    a2f8:	28c01917 	ldw	r3,100(r5)
    a2fc:	10880014 	ori	r2,r2,8192
    a300:	2880030d 	sth	r2,12(r5)
    a304:	18880014 	ori	r2,r3,8192
    a308:	28801915 	stw	r2,100(r5)
    a30c:	280d883a 	mov	r6,r5
    a310:	8009883a 	mov	r4,r16
    a314:	880b883a 	mov	r5,r17
    a318:	dfc00317 	ldw	ra,12(sp)
    a31c:	dc400217 	ldw	r17,8(sp)
    a320:	dc000117 	ldw	r16,4(sp)
    a324:	dec00404 	addi	sp,sp,16
    a328:	000a1381 	jmpi	a138 <__fputwc>
    a32c:	8009883a 	mov	r4,r16
    a330:	d9400015 	stw	r5,0(sp)
    a334:	0005c980 	call	5c98 <__sinit>
    a338:	d9400017 	ldw	r5,0(sp)
    a33c:	003feb06 	br	a2ec <__alt_data_end+0xfffd95ac>

0000a340 <_fstat_r>:
    a340:	defffd04 	addi	sp,sp,-12
    a344:	2805883a 	mov	r2,r5
    a348:	dc000015 	stw	r16,0(sp)
    a34c:	040000b4 	movhi	r16,2
    a350:	dc400115 	stw	r17,4(sp)
    a354:	8431f904 	addi	r16,r16,-14364
    a358:	2023883a 	mov	r17,r4
    a35c:	300b883a 	mov	r5,r6
    a360:	1009883a 	mov	r4,r2
    a364:	dfc00215 	stw	ra,8(sp)
    a368:	80000015 	stw	zero,0(r16)
    a36c:	000dca00 	call	dca0 <fstat>
    a370:	00ffffc4 	movi	r3,-1
    a374:	10c00526 	beq	r2,r3,a38c <_fstat_r+0x4c>
    a378:	dfc00217 	ldw	ra,8(sp)
    a37c:	dc400117 	ldw	r17,4(sp)
    a380:	dc000017 	ldw	r16,0(sp)
    a384:	dec00304 	addi	sp,sp,12
    a388:	f800283a 	ret
    a38c:	80c00017 	ldw	r3,0(r16)
    a390:	183ff926 	beq	r3,zero,a378 <__alt_data_end+0xfffd9638>
    a394:	88c00015 	stw	r3,0(r17)
    a398:	003ff706 	br	a378 <__alt_data_end+0xfffd9638>

0000a39c <_isatty_r>:
    a39c:	defffd04 	addi	sp,sp,-12
    a3a0:	dc000015 	stw	r16,0(sp)
    a3a4:	040000b4 	movhi	r16,2
    a3a8:	dc400115 	stw	r17,4(sp)
    a3ac:	8431f904 	addi	r16,r16,-14364
    a3b0:	2023883a 	mov	r17,r4
    a3b4:	2809883a 	mov	r4,r5
    a3b8:	dfc00215 	stw	ra,8(sp)
    a3bc:	80000015 	stw	zero,0(r16)
    a3c0:	000dd940 	call	dd94 <isatty>
    a3c4:	00ffffc4 	movi	r3,-1
    a3c8:	10c00526 	beq	r2,r3,a3e0 <_isatty_r+0x44>
    a3cc:	dfc00217 	ldw	ra,8(sp)
    a3d0:	dc400117 	ldw	r17,4(sp)
    a3d4:	dc000017 	ldw	r16,0(sp)
    a3d8:	dec00304 	addi	sp,sp,12
    a3dc:	f800283a 	ret
    a3e0:	80c00017 	ldw	r3,0(r16)
    a3e4:	183ff926 	beq	r3,zero,a3cc <__alt_data_end+0xfffd968c>
    a3e8:	88c00015 	stw	r3,0(r17)
    a3ec:	003ff706 	br	a3cc <__alt_data_end+0xfffd968c>

0000a3f0 <_lseek_r>:
    a3f0:	defffd04 	addi	sp,sp,-12
    a3f4:	2805883a 	mov	r2,r5
    a3f8:	dc000015 	stw	r16,0(sp)
    a3fc:	040000b4 	movhi	r16,2
    a400:	dc400115 	stw	r17,4(sp)
    a404:	300b883a 	mov	r5,r6
    a408:	8431f904 	addi	r16,r16,-14364
    a40c:	2023883a 	mov	r17,r4
    a410:	380d883a 	mov	r6,r7
    a414:	1009883a 	mov	r4,r2
    a418:	dfc00215 	stw	ra,8(sp)
    a41c:	80000015 	stw	zero,0(r16)
    a420:	000df680 	call	df68 <lseek>
    a424:	00ffffc4 	movi	r3,-1
    a428:	10c00526 	beq	r2,r3,a440 <_lseek_r+0x50>
    a42c:	dfc00217 	ldw	ra,8(sp)
    a430:	dc400117 	ldw	r17,4(sp)
    a434:	dc000017 	ldw	r16,0(sp)
    a438:	dec00304 	addi	sp,sp,12
    a43c:	f800283a 	ret
    a440:	80c00017 	ldw	r3,0(r16)
    a444:	183ff926 	beq	r3,zero,a42c <__alt_data_end+0xfffd96ec>
    a448:	88c00015 	stw	r3,0(r17)
    a44c:	003ff706 	br	a42c <__alt_data_end+0xfffd96ec>

0000a450 <_read_r>:
    a450:	defffd04 	addi	sp,sp,-12
    a454:	2805883a 	mov	r2,r5
    a458:	dc000015 	stw	r16,0(sp)
    a45c:	040000b4 	movhi	r16,2
    a460:	dc400115 	stw	r17,4(sp)
    a464:	300b883a 	mov	r5,r6
    a468:	8431f904 	addi	r16,r16,-14364
    a46c:	2023883a 	mov	r17,r4
    a470:	380d883a 	mov	r6,r7
    a474:	1009883a 	mov	r4,r2
    a478:	dfc00215 	stw	ra,8(sp)
    a47c:	80000015 	stw	zero,0(r16)
    a480:	000e13c0 	call	e13c <read>
    a484:	00ffffc4 	movi	r3,-1
    a488:	10c00526 	beq	r2,r3,a4a0 <_read_r+0x50>
    a48c:	dfc00217 	ldw	ra,8(sp)
    a490:	dc400117 	ldw	r17,4(sp)
    a494:	dc000017 	ldw	r16,0(sp)
    a498:	dec00304 	addi	sp,sp,12
    a49c:	f800283a 	ret
    a4a0:	80c00017 	ldw	r3,0(r16)
    a4a4:	183ff926 	beq	r3,zero,a48c <__alt_data_end+0xfffd974c>
    a4a8:	88c00015 	stw	r3,0(r17)
    a4ac:	003ff706 	br	a48c <__alt_data_end+0xfffd974c>

0000a4b0 <_wcrtomb_r>:
    a4b0:	defff604 	addi	sp,sp,-40
    a4b4:	008000b4 	movhi	r2,2
    a4b8:	dc800815 	stw	r18,32(sp)
    a4bc:	dc400715 	stw	r17,28(sp)
    a4c0:	dc000615 	stw	r16,24(sp)
    a4c4:	10aae404 	addi	r2,r2,-21616
    a4c8:	dfc00915 	stw	ra,36(sp)
    a4cc:	2021883a 	mov	r16,r4
    a4d0:	3823883a 	mov	r17,r7
    a4d4:	14800017 	ldw	r18,0(r2)
    a4d8:	28001426 	beq	r5,zero,a52c <_wcrtomb_r+0x7c>
    a4dc:	d9400415 	stw	r5,16(sp)
    a4e0:	d9800515 	stw	r6,20(sp)
    a4e4:	00067e80 	call	67e8 <__locale_charset>
    a4e8:	d9800517 	ldw	r6,20(sp)
    a4ec:	d9400417 	ldw	r5,16(sp)
    a4f0:	100f883a 	mov	r7,r2
    a4f4:	dc400015 	stw	r17,0(sp)
    a4f8:	8009883a 	mov	r4,r16
    a4fc:	903ee83a 	callr	r18
    a500:	00ffffc4 	movi	r3,-1
    a504:	10c0031e 	bne	r2,r3,a514 <_wcrtomb_r+0x64>
    a508:	88000015 	stw	zero,0(r17)
    a50c:	00c02284 	movi	r3,138
    a510:	80c00015 	stw	r3,0(r16)
    a514:	dfc00917 	ldw	ra,36(sp)
    a518:	dc800817 	ldw	r18,32(sp)
    a51c:	dc400717 	ldw	r17,28(sp)
    a520:	dc000617 	ldw	r16,24(sp)
    a524:	dec00a04 	addi	sp,sp,40
    a528:	f800283a 	ret
    a52c:	00067e80 	call	67e8 <__locale_charset>
    a530:	100f883a 	mov	r7,r2
    a534:	dc400015 	stw	r17,0(sp)
    a538:	000d883a 	mov	r6,zero
    a53c:	d9400104 	addi	r5,sp,4
    a540:	8009883a 	mov	r4,r16
    a544:	903ee83a 	callr	r18
    a548:	003fed06 	br	a500 <__alt_data_end+0xfffd97c0>

0000a54c <wcrtomb>:
    a54c:	defff604 	addi	sp,sp,-40
    a550:	008000b4 	movhi	r2,2
    a554:	dc800615 	stw	r18,24(sp)
    a558:	dc400515 	stw	r17,20(sp)
    a55c:	10aae204 	addi	r2,r2,-21624
    a560:	dfc00915 	stw	ra,36(sp)
    a564:	dd000815 	stw	r20,32(sp)
    a568:	dcc00715 	stw	r19,28(sp)
    a56c:	dc000415 	stw	r16,16(sp)
    a570:	3025883a 	mov	r18,r6
    a574:	14400017 	ldw	r17,0(r2)
    a578:	20001926 	beq	r4,zero,a5e0 <wcrtomb+0x94>
    a57c:	008000b4 	movhi	r2,2
    a580:	10aae404 	addi	r2,r2,-21616
    a584:	15000017 	ldw	r20,0(r2)
    a588:	2021883a 	mov	r16,r4
    a58c:	2827883a 	mov	r19,r5
    a590:	00067e80 	call	67e8 <__locale_charset>
    a594:	100f883a 	mov	r7,r2
    a598:	dc800015 	stw	r18,0(sp)
    a59c:	980d883a 	mov	r6,r19
    a5a0:	800b883a 	mov	r5,r16
    a5a4:	8809883a 	mov	r4,r17
    a5a8:	a03ee83a 	callr	r20
    a5ac:	00ffffc4 	movi	r3,-1
    a5b0:	10c0031e 	bne	r2,r3,a5c0 <wcrtomb+0x74>
    a5b4:	90000015 	stw	zero,0(r18)
    a5b8:	00c02284 	movi	r3,138
    a5bc:	88c00015 	stw	r3,0(r17)
    a5c0:	dfc00917 	ldw	ra,36(sp)
    a5c4:	dd000817 	ldw	r20,32(sp)
    a5c8:	dcc00717 	ldw	r19,28(sp)
    a5cc:	dc800617 	ldw	r18,24(sp)
    a5d0:	dc400517 	ldw	r17,20(sp)
    a5d4:	dc000417 	ldw	r16,16(sp)
    a5d8:	dec00a04 	addi	sp,sp,40
    a5dc:	f800283a 	ret
    a5e0:	008000b4 	movhi	r2,2
    a5e4:	10aae404 	addi	r2,r2,-21616
    a5e8:	14000017 	ldw	r16,0(r2)
    a5ec:	00067e80 	call	67e8 <__locale_charset>
    a5f0:	100f883a 	mov	r7,r2
    a5f4:	dc800015 	stw	r18,0(sp)
    a5f8:	000d883a 	mov	r6,zero
    a5fc:	d9400104 	addi	r5,sp,4
    a600:	8809883a 	mov	r4,r17
    a604:	803ee83a 	callr	r16
    a608:	003fe806 	br	a5ac <__alt_data_end+0xfffd986c>

0000a60c <__ascii_wctomb>:
    a60c:	28000526 	beq	r5,zero,a624 <__ascii_wctomb+0x18>
    a610:	00803fc4 	movi	r2,255
    a614:	11800536 	bltu	r2,r6,a62c <__ascii_wctomb+0x20>
    a618:	29800005 	stb	r6,0(r5)
    a61c:	00800044 	movi	r2,1
    a620:	f800283a 	ret
    a624:	0005883a 	mov	r2,zero
    a628:	f800283a 	ret
    a62c:	00802284 	movi	r2,138
    a630:	20800015 	stw	r2,0(r4)
    a634:	00bfffc4 	movi	r2,-1
    a638:	f800283a 	ret

0000a63c <_wctomb_r>:
    a63c:	008000b4 	movhi	r2,2
    a640:	defff904 	addi	sp,sp,-28
    a644:	10aae404 	addi	r2,r2,-21616
    a648:	dfc00615 	stw	ra,24(sp)
    a64c:	dc400515 	stw	r17,20(sp)
    a650:	dc000415 	stw	r16,16(sp)
    a654:	3823883a 	mov	r17,r7
    a658:	14000017 	ldw	r16,0(r2)
    a65c:	d9000115 	stw	r4,4(sp)
    a660:	d9400215 	stw	r5,8(sp)
    a664:	d9800315 	stw	r6,12(sp)
    a668:	00067e80 	call	67e8 <__locale_charset>
    a66c:	d9800317 	ldw	r6,12(sp)
    a670:	d9400217 	ldw	r5,8(sp)
    a674:	d9000117 	ldw	r4,4(sp)
    a678:	100f883a 	mov	r7,r2
    a67c:	dc400015 	stw	r17,0(sp)
    a680:	803ee83a 	callr	r16
    a684:	dfc00617 	ldw	ra,24(sp)
    a688:	dc400517 	ldw	r17,20(sp)
    a68c:	dc000417 	ldw	r16,16(sp)
    a690:	dec00704 	addi	sp,sp,28
    a694:	f800283a 	ret

0000a698 <__udivdi3>:
    a698:	defff404 	addi	sp,sp,-48
    a69c:	dcc00515 	stw	r19,20(sp)
    a6a0:	dc000215 	stw	r16,8(sp)
    a6a4:	dfc00b15 	stw	ra,44(sp)
    a6a8:	df000a15 	stw	fp,40(sp)
    a6ac:	ddc00915 	stw	r23,36(sp)
    a6b0:	dd800815 	stw	r22,32(sp)
    a6b4:	dd400715 	stw	r21,28(sp)
    a6b8:	dd000615 	stw	r20,24(sp)
    a6bc:	dc800415 	stw	r18,16(sp)
    a6c0:	dc400315 	stw	r17,12(sp)
    a6c4:	2027883a 	mov	r19,r4
    a6c8:	2821883a 	mov	r16,r5
    a6cc:	3800461e 	bne	r7,zero,a7e8 <__udivdi3+0x150>
    a6d0:	3023883a 	mov	r17,r6
    a6d4:	2025883a 	mov	r18,r4
    a6d8:	2980572e 	bgeu	r5,r6,a838 <__udivdi3+0x1a0>
    a6dc:	00bfffd4 	movui	r2,65535
    a6e0:	282d883a 	mov	r22,r5
    a6e4:	1180b236 	bltu	r2,r6,a9b0 <__udivdi3+0x318>
    a6e8:	00803fc4 	movi	r2,255
    a6ec:	1185803a 	cmpltu	r2,r2,r6
    a6f0:	100490fa 	slli	r2,r2,3
    a6f4:	3086d83a 	srl	r3,r6,r2
    a6f8:	010000b4 	movhi	r4,2
    a6fc:	21238d04 	addi	r4,r4,-29132
    a700:	20c7883a 	add	r3,r4,r3
    a704:	18c00003 	ldbu	r3,0(r3)
    a708:	1885883a 	add	r2,r3,r2
    a70c:	00c00804 	movi	r3,32
    a710:	1887c83a 	sub	r3,r3,r2
    a714:	18000526 	beq	r3,zero,a72c <__udivdi3+0x94>
    a718:	80e0983a 	sll	r16,r16,r3
    a71c:	9884d83a 	srl	r2,r19,r2
    a720:	30e2983a 	sll	r17,r6,r3
    a724:	98e4983a 	sll	r18,r19,r3
    a728:	142cb03a 	or	r22,r2,r16
    a72c:	882ad43a 	srli	r21,r17,16
    a730:	b009883a 	mov	r4,r22
    a734:	8d3fffcc 	andi	r20,r17,65535
    a738:	a80b883a 	mov	r5,r21
    a73c:	0000b680 	call	b68 <__umodsi3>
    a740:	b009883a 	mov	r4,r22
    a744:	a80b883a 	mov	r5,r21
    a748:	1027883a 	mov	r19,r2
    a74c:	0000b040 	call	b04 <__udivsi3>
    a750:	100b883a 	mov	r5,r2
    a754:	a009883a 	mov	r4,r20
    a758:	102d883a 	mov	r22,r2
    a75c:	0000bc00 	call	bc0 <__mulsi3>
    a760:	9826943a 	slli	r19,r19,16
    a764:	9006d43a 	srli	r3,r18,16
    a768:	1cc6b03a 	or	r3,r3,r19
    a76c:	1880052e 	bgeu	r3,r2,a784 <__udivdi3+0xec>
    a770:	1c47883a 	add	r3,r3,r17
    a774:	b13fffc4 	addi	r4,r22,-1
    a778:	1c400136 	bltu	r3,r17,a780 <__udivdi3+0xe8>
    a77c:	18814236 	bltu	r3,r2,ac88 <__udivdi3+0x5f0>
    a780:	202d883a 	mov	r22,r4
    a784:	18a1c83a 	sub	r16,r3,r2
    a788:	8009883a 	mov	r4,r16
    a78c:	a80b883a 	mov	r5,r21
    a790:	0000b680 	call	b68 <__umodsi3>
    a794:	1027883a 	mov	r19,r2
    a798:	8009883a 	mov	r4,r16
    a79c:	a80b883a 	mov	r5,r21
    a7a0:	9826943a 	slli	r19,r19,16
    a7a4:	0000b040 	call	b04 <__udivsi3>
    a7a8:	100b883a 	mov	r5,r2
    a7ac:	a009883a 	mov	r4,r20
    a7b0:	94bfffcc 	andi	r18,r18,65535
    a7b4:	1021883a 	mov	r16,r2
    a7b8:	94e4b03a 	or	r18,r18,r19
    a7bc:	0000bc00 	call	bc0 <__mulsi3>
    a7c0:	9080052e 	bgeu	r18,r2,a7d8 <__udivdi3+0x140>
    a7c4:	8ca5883a 	add	r18,r17,r18
    a7c8:	80ffffc4 	addi	r3,r16,-1
    a7cc:	94410c36 	bltu	r18,r17,ac00 <__udivdi3+0x568>
    a7d0:	90810b2e 	bgeu	r18,r2,ac00 <__udivdi3+0x568>
    a7d4:	843fff84 	addi	r16,r16,-2
    a7d8:	b004943a 	slli	r2,r22,16
    a7dc:	0007883a 	mov	r3,zero
    a7e0:	1404b03a 	or	r2,r2,r16
    a7e4:	00005e06 	br	a960 <__udivdi3+0x2c8>
    a7e8:	29c05b36 	bltu	r5,r7,a958 <__udivdi3+0x2c0>
    a7ec:	00bfffd4 	movui	r2,65535
    a7f0:	11c0672e 	bgeu	r2,r7,a990 <__udivdi3+0x2f8>
    a7f4:	00804034 	movhi	r2,256
    a7f8:	10bfffc4 	addi	r2,r2,-1
    a7fc:	11c10a36 	bltu	r2,r7,ac28 <__udivdi3+0x590>
    a800:	00800404 	movi	r2,16
    a804:	3886d83a 	srl	r3,r7,r2
    a808:	010000b4 	movhi	r4,2
    a80c:	21238d04 	addi	r4,r4,-29132
    a810:	20c7883a 	add	r3,r4,r3
    a814:	18c00003 	ldbu	r3,0(r3)
    a818:	05c00804 	movi	r23,32
    a81c:	1885883a 	add	r2,r3,r2
    a820:	b8afc83a 	sub	r23,r23,r2
    a824:	b800671e 	bne	r23,zero,a9c4 <__udivdi3+0x32c>
    a828:	3c010536 	bltu	r7,r16,ac40 <__udivdi3+0x5a8>
    a82c:	9985403a 	cmpgeu	r2,r19,r6
    a830:	0007883a 	mov	r3,zero
    a834:	00004a06 	br	a960 <__udivdi3+0x2c8>
    a838:	3000041e 	bne	r6,zero,a84c <__udivdi3+0x1b4>
    a83c:	000b883a 	mov	r5,zero
    a840:	01000044 	movi	r4,1
    a844:	0000b040 	call	b04 <__udivsi3>
    a848:	1023883a 	mov	r17,r2
    a84c:	00bfffd4 	movui	r2,65535
    a850:	1440532e 	bgeu	r2,r17,a9a0 <__udivdi3+0x308>
    a854:	00804034 	movhi	r2,256
    a858:	10bfffc4 	addi	r2,r2,-1
    a85c:	1440f436 	bltu	r2,r17,ac30 <__udivdi3+0x598>
    a860:	00800404 	movi	r2,16
    a864:	8886d83a 	srl	r3,r17,r2
    a868:	010000b4 	movhi	r4,2
    a86c:	21238d04 	addi	r4,r4,-29132
    a870:	20c7883a 	add	r3,r4,r3
    a874:	18c00003 	ldbu	r3,0(r3)
    a878:	1885883a 	add	r2,r3,r2
    a87c:	00c00804 	movi	r3,32
    a880:	1887c83a 	sub	r3,r3,r2
    a884:	1800a51e 	bne	r3,zero,ab1c <__udivdi3+0x484>
    a888:	882ad43a 	srli	r21,r17,16
    a88c:	8461c83a 	sub	r16,r16,r17
    a890:	8d3fffcc 	andi	r20,r17,65535
    a894:	00c00044 	movi	r3,1
    a898:	a80b883a 	mov	r5,r21
    a89c:	8009883a 	mov	r4,r16
    a8a0:	d8c00115 	stw	r3,4(sp)
    a8a4:	0000b680 	call	b68 <__umodsi3>
    a8a8:	a80b883a 	mov	r5,r21
    a8ac:	8009883a 	mov	r4,r16
    a8b0:	1027883a 	mov	r19,r2
    a8b4:	0000b040 	call	b04 <__udivsi3>
    a8b8:	a00b883a 	mov	r5,r20
    a8bc:	1009883a 	mov	r4,r2
    a8c0:	102d883a 	mov	r22,r2
    a8c4:	0000bc00 	call	bc0 <__mulsi3>
    a8c8:	9826943a 	slli	r19,r19,16
    a8cc:	900ed43a 	srli	r7,r18,16
    a8d0:	d8c00117 	ldw	r3,4(sp)
    a8d4:	3cceb03a 	or	r7,r7,r19
    a8d8:	3880052e 	bgeu	r7,r2,a8f0 <__udivdi3+0x258>
    a8dc:	3c4f883a 	add	r7,r7,r17
    a8e0:	b13fffc4 	addi	r4,r22,-1
    a8e4:	3c400136 	bltu	r7,r17,a8ec <__udivdi3+0x254>
    a8e8:	3880e436 	bltu	r7,r2,ac7c <__udivdi3+0x5e4>
    a8ec:	202d883a 	mov	r22,r4
    a8f0:	38a1c83a 	sub	r16,r7,r2
    a8f4:	8009883a 	mov	r4,r16
    a8f8:	a80b883a 	mov	r5,r21
    a8fc:	d8c00115 	stw	r3,4(sp)
    a900:	0000b680 	call	b68 <__umodsi3>
    a904:	1027883a 	mov	r19,r2
    a908:	8009883a 	mov	r4,r16
    a90c:	a80b883a 	mov	r5,r21
    a910:	9826943a 	slli	r19,r19,16
    a914:	0000b040 	call	b04 <__udivsi3>
    a918:	a00b883a 	mov	r5,r20
    a91c:	1009883a 	mov	r4,r2
    a920:	94bfffcc 	andi	r18,r18,65535
    a924:	1021883a 	mov	r16,r2
    a928:	94e4b03a 	or	r18,r18,r19
    a92c:	0000bc00 	call	bc0 <__mulsi3>
    a930:	d8c00117 	ldw	r3,4(sp)
    a934:	9080052e 	bgeu	r18,r2,a94c <__udivdi3+0x2b4>
    a938:	8ca5883a 	add	r18,r17,r18
    a93c:	813fffc4 	addi	r4,r16,-1
    a940:	9440ad36 	bltu	r18,r17,abf8 <__udivdi3+0x560>
    a944:	9080ac2e 	bgeu	r18,r2,abf8 <__udivdi3+0x560>
    a948:	843fff84 	addi	r16,r16,-2
    a94c:	b004943a 	slli	r2,r22,16
    a950:	1404b03a 	or	r2,r2,r16
    a954:	00000206 	br	a960 <__udivdi3+0x2c8>
    a958:	0007883a 	mov	r3,zero
    a95c:	0005883a 	mov	r2,zero
    a960:	dfc00b17 	ldw	ra,44(sp)
    a964:	df000a17 	ldw	fp,40(sp)
    a968:	ddc00917 	ldw	r23,36(sp)
    a96c:	dd800817 	ldw	r22,32(sp)
    a970:	dd400717 	ldw	r21,28(sp)
    a974:	dd000617 	ldw	r20,24(sp)
    a978:	dcc00517 	ldw	r19,20(sp)
    a97c:	dc800417 	ldw	r18,16(sp)
    a980:	dc400317 	ldw	r17,12(sp)
    a984:	dc000217 	ldw	r16,8(sp)
    a988:	dec00c04 	addi	sp,sp,48
    a98c:	f800283a 	ret
    a990:	00803fc4 	movi	r2,255
    a994:	11c5803a 	cmpltu	r2,r2,r7
    a998:	100490fa 	slli	r2,r2,3
    a99c:	003f9906 	br	a804 <__alt_data_end+0xfffd9ac4>
    a9a0:	00803fc4 	movi	r2,255
    a9a4:	1445803a 	cmpltu	r2,r2,r17
    a9a8:	100490fa 	slli	r2,r2,3
    a9ac:	003fad06 	br	a864 <__alt_data_end+0xfffd9b24>
    a9b0:	00804034 	movhi	r2,256
    a9b4:	10bfffc4 	addi	r2,r2,-1
    a9b8:	11809f36 	bltu	r2,r6,ac38 <__udivdi3+0x5a0>
    a9bc:	00800404 	movi	r2,16
    a9c0:	003f4c06 	br	a6f4 <__alt_data_end+0xfffd99b4>
    a9c4:	3dce983a 	sll	r7,r7,r23
    a9c8:	30b8d83a 	srl	fp,r6,r2
    a9cc:	80a2d83a 	srl	r17,r16,r2
    a9d0:	35cc983a 	sll	r6,r6,r23
    a9d4:	3f38b03a 	or	fp,r7,fp
    a9d8:	e024d43a 	srli	r18,fp,16
    a9dc:	9884d83a 	srl	r2,r19,r2
    a9e0:	85e0983a 	sll	r16,r16,r23
    a9e4:	8809883a 	mov	r4,r17
    a9e8:	900b883a 	mov	r5,r18
    a9ec:	d9800015 	stw	r6,0(sp)
    a9f0:	1420b03a 	or	r16,r2,r16
    a9f4:	0000b680 	call	b68 <__umodsi3>
    a9f8:	900b883a 	mov	r5,r18
    a9fc:	8809883a 	mov	r4,r17
    aa00:	1029883a 	mov	r20,r2
    aa04:	e5bfffcc 	andi	r22,fp,65535
    aa08:	0000b040 	call	b04 <__udivsi3>
    aa0c:	100b883a 	mov	r5,r2
    aa10:	b009883a 	mov	r4,r22
    aa14:	102b883a 	mov	r21,r2
    aa18:	0000bc00 	call	bc0 <__mulsi3>
    aa1c:	a028943a 	slli	r20,r20,16
    aa20:	8006d43a 	srli	r3,r16,16
    aa24:	1d06b03a 	or	r3,r3,r20
    aa28:	1880042e 	bgeu	r3,r2,aa3c <__udivdi3+0x3a4>
    aa2c:	1f07883a 	add	r3,r3,fp
    aa30:	a93fffc4 	addi	r4,r21,-1
    aa34:	1f00892e 	bgeu	r3,fp,ac5c <__udivdi3+0x5c4>
    aa38:	202b883a 	mov	r21,r4
    aa3c:	18a3c83a 	sub	r17,r3,r2
    aa40:	8809883a 	mov	r4,r17
    aa44:	900b883a 	mov	r5,r18
    aa48:	0000b680 	call	b68 <__umodsi3>
    aa4c:	1029883a 	mov	r20,r2
    aa50:	8809883a 	mov	r4,r17
    aa54:	900b883a 	mov	r5,r18
    aa58:	a028943a 	slli	r20,r20,16
    aa5c:	0000b040 	call	b04 <__udivsi3>
    aa60:	100b883a 	mov	r5,r2
    aa64:	b009883a 	mov	r4,r22
    aa68:	843fffcc 	andi	r16,r16,65535
    aa6c:	1023883a 	mov	r17,r2
    aa70:	8520b03a 	or	r16,r16,r20
    aa74:	0000bc00 	call	bc0 <__mulsi3>
    aa78:	8080042e 	bgeu	r16,r2,aa8c <__udivdi3+0x3f4>
    aa7c:	8721883a 	add	r16,r16,fp
    aa80:	88ffffc4 	addi	r3,r17,-1
    aa84:	8700712e 	bgeu	r16,fp,ac4c <__udivdi3+0x5b4>
    aa88:	1823883a 	mov	r17,r3
    aa8c:	a80e943a 	slli	r7,r21,16
    aa90:	d8c00017 	ldw	r3,0(sp)
    aa94:	80a1c83a 	sub	r16,r16,r2
    aa98:	3c64b03a 	or	r18,r7,r17
    aa9c:	1d3fffcc 	andi	r20,r3,65535
    aaa0:	9022d43a 	srli	r17,r18,16
    aaa4:	95bfffcc 	andi	r22,r18,65535
    aaa8:	a00b883a 	mov	r5,r20
    aaac:	b009883a 	mov	r4,r22
    aab0:	182ad43a 	srli	r21,r3,16
    aab4:	0000bc00 	call	bc0 <__mulsi3>
    aab8:	a00b883a 	mov	r5,r20
    aabc:	8809883a 	mov	r4,r17
    aac0:	1039883a 	mov	fp,r2
    aac4:	0000bc00 	call	bc0 <__mulsi3>
    aac8:	8809883a 	mov	r4,r17
    aacc:	a80b883a 	mov	r5,r21
    aad0:	1029883a 	mov	r20,r2
    aad4:	0000bc00 	call	bc0 <__mulsi3>
    aad8:	a80b883a 	mov	r5,r21
    aadc:	b009883a 	mov	r4,r22
    aae0:	1023883a 	mov	r17,r2
    aae4:	0000bc00 	call	bc0 <__mulsi3>
    aae8:	e006d43a 	srli	r3,fp,16
    aaec:	1505883a 	add	r2,r2,r20
    aaf0:	1887883a 	add	r3,r3,r2
    aaf4:	1d00022e 	bgeu	r3,r20,ab00 <__udivdi3+0x468>
    aaf8:	00800074 	movhi	r2,1
    aafc:	88a3883a 	add	r17,r17,r2
    ab00:	1804d43a 	srli	r2,r3,16
    ab04:	1463883a 	add	r17,r2,r17
    ab08:	84404436 	bltu	r16,r17,ac1c <__udivdi3+0x584>
    ab0c:	84403e26 	beq	r16,r17,ac08 <__udivdi3+0x570>
    ab10:	9005883a 	mov	r2,r18
    ab14:	0007883a 	mov	r3,zero
    ab18:	003f9106 	br	a960 <__alt_data_end+0xfffd9c20>
    ab1c:	88e2983a 	sll	r17,r17,r3
    ab20:	80aed83a 	srl	r23,r16,r2
    ab24:	80e0983a 	sll	r16,r16,r3
    ab28:	882ad43a 	srli	r21,r17,16
    ab2c:	9884d83a 	srl	r2,r19,r2
    ab30:	b809883a 	mov	r4,r23
    ab34:	a80b883a 	mov	r5,r21
    ab38:	98e4983a 	sll	r18,r19,r3
    ab3c:	142cb03a 	or	r22,r2,r16
    ab40:	0000b680 	call	b68 <__umodsi3>
    ab44:	b809883a 	mov	r4,r23
    ab48:	a80b883a 	mov	r5,r21
    ab4c:	1027883a 	mov	r19,r2
    ab50:	8d3fffcc 	andi	r20,r17,65535
    ab54:	0000b040 	call	b04 <__udivsi3>
    ab58:	a009883a 	mov	r4,r20
    ab5c:	100b883a 	mov	r5,r2
    ab60:	102f883a 	mov	r23,r2
    ab64:	0000bc00 	call	bc0 <__mulsi3>
    ab68:	9826943a 	slli	r19,r19,16
    ab6c:	b008d43a 	srli	r4,r22,16
    ab70:	24c8b03a 	or	r4,r4,r19
    ab74:	2080062e 	bgeu	r4,r2,ab90 <__udivdi3+0x4f8>
    ab78:	2449883a 	add	r4,r4,r17
    ab7c:	b8ffffc4 	addi	r3,r23,-1
    ab80:	24403c36 	bltu	r4,r17,ac74 <__udivdi3+0x5dc>
    ab84:	20803b2e 	bgeu	r4,r2,ac74 <__udivdi3+0x5dc>
    ab88:	bdffff84 	addi	r23,r23,-2
    ab8c:	2449883a 	add	r4,r4,r17
    ab90:	20a1c83a 	sub	r16,r4,r2
    ab94:	a80b883a 	mov	r5,r21
    ab98:	8009883a 	mov	r4,r16
    ab9c:	0000b680 	call	b68 <__umodsi3>
    aba0:	a80b883a 	mov	r5,r21
    aba4:	8009883a 	mov	r4,r16
    aba8:	1027883a 	mov	r19,r2
    abac:	0000b040 	call	b04 <__udivsi3>
    abb0:	a009883a 	mov	r4,r20
    abb4:	100b883a 	mov	r5,r2
    abb8:	9826943a 	slli	r19,r19,16
    abbc:	1039883a 	mov	fp,r2
    abc0:	0000bc00 	call	bc0 <__mulsi3>
    abc4:	b13fffcc 	andi	r4,r22,65535
    abc8:	24c8b03a 	or	r4,r4,r19
    abcc:	2080062e 	bgeu	r4,r2,abe8 <__udivdi3+0x550>
    abd0:	2449883a 	add	r4,r4,r17
    abd4:	e0ffffc4 	addi	r3,fp,-1
    abd8:	24402436 	bltu	r4,r17,ac6c <__udivdi3+0x5d4>
    abdc:	2080232e 	bgeu	r4,r2,ac6c <__udivdi3+0x5d4>
    abe0:	e73fff84 	addi	fp,fp,-2
    abe4:	2449883a 	add	r4,r4,r17
    abe8:	b82e943a 	slli	r23,r23,16
    abec:	20a1c83a 	sub	r16,r4,r2
    abf0:	bf06b03a 	or	r3,r23,fp
    abf4:	003f2806 	br	a898 <__alt_data_end+0xfffd9b58>
    abf8:	2021883a 	mov	r16,r4
    abfc:	003f5306 	br	a94c <__alt_data_end+0xfffd9c0c>
    ac00:	1821883a 	mov	r16,r3
    ac04:	003ef406 	br	a7d8 <__alt_data_end+0xfffd9a98>
    ac08:	1806943a 	slli	r3,r3,16
    ac0c:	9de6983a 	sll	r19,r19,r23
    ac10:	e73fffcc 	andi	fp,fp,65535
    ac14:	1f07883a 	add	r3,r3,fp
    ac18:	98ffbd2e 	bgeu	r19,r3,ab10 <__alt_data_end+0xfffd9dd0>
    ac1c:	90bfffc4 	addi	r2,r18,-1
    ac20:	0007883a 	mov	r3,zero
    ac24:	003f4e06 	br	a960 <__alt_data_end+0xfffd9c20>
    ac28:	00800604 	movi	r2,24
    ac2c:	003ef506 	br	a804 <__alt_data_end+0xfffd9ac4>
    ac30:	00800604 	movi	r2,24
    ac34:	003f0b06 	br	a864 <__alt_data_end+0xfffd9b24>
    ac38:	00800604 	movi	r2,24
    ac3c:	003ead06 	br	a6f4 <__alt_data_end+0xfffd99b4>
    ac40:	0007883a 	mov	r3,zero
    ac44:	00800044 	movi	r2,1
    ac48:	003f4506 	br	a960 <__alt_data_end+0xfffd9c20>
    ac4c:	80bf8e2e 	bgeu	r16,r2,aa88 <__alt_data_end+0xfffd9d48>
    ac50:	8c7fff84 	addi	r17,r17,-2
    ac54:	8721883a 	add	r16,r16,fp
    ac58:	003f8c06 	br	aa8c <__alt_data_end+0xfffd9d4c>
    ac5c:	18bf762e 	bgeu	r3,r2,aa38 <__alt_data_end+0xfffd9cf8>
    ac60:	ad7fff84 	addi	r21,r21,-2
    ac64:	1f07883a 	add	r3,r3,fp
    ac68:	003f7406 	br	aa3c <__alt_data_end+0xfffd9cfc>
    ac6c:	1839883a 	mov	fp,r3
    ac70:	003fdd06 	br	abe8 <__alt_data_end+0xfffd9ea8>
    ac74:	182f883a 	mov	r23,r3
    ac78:	003fc506 	br	ab90 <__alt_data_end+0xfffd9e50>
    ac7c:	b5bfff84 	addi	r22,r22,-2
    ac80:	3c4f883a 	add	r7,r7,r17
    ac84:	003f1a06 	br	a8f0 <__alt_data_end+0xfffd9bb0>
    ac88:	b5bfff84 	addi	r22,r22,-2
    ac8c:	1c47883a 	add	r3,r3,r17
    ac90:	003ebc06 	br	a784 <__alt_data_end+0xfffd9a44>

0000ac94 <__umoddi3>:
    ac94:	defff304 	addi	sp,sp,-52
    ac98:	df000b15 	stw	fp,44(sp)
    ac9c:	dc400415 	stw	r17,16(sp)
    aca0:	dc000315 	stw	r16,12(sp)
    aca4:	dfc00c15 	stw	ra,48(sp)
    aca8:	ddc00a15 	stw	r23,40(sp)
    acac:	dd800915 	stw	r22,36(sp)
    acb0:	dd400815 	stw	r21,32(sp)
    acb4:	dd000715 	stw	r20,28(sp)
    acb8:	dcc00615 	stw	r19,24(sp)
    acbc:	dc800515 	stw	r18,20(sp)
    acc0:	2021883a 	mov	r16,r4
    acc4:	2823883a 	mov	r17,r5
    acc8:	2839883a 	mov	fp,r5
    accc:	3800401e 	bne	r7,zero,add0 <__umoddi3+0x13c>
    acd0:	3027883a 	mov	r19,r6
    acd4:	2029883a 	mov	r20,r4
    acd8:	2980552e 	bgeu	r5,r6,ae30 <__umoddi3+0x19c>
    acdc:	00bfffd4 	movui	r2,65535
    ace0:	1180a236 	bltu	r2,r6,af6c <__umoddi3+0x2d8>
    ace4:	01003fc4 	movi	r4,255
    ace8:	2189803a 	cmpltu	r4,r4,r6
    acec:	200890fa 	slli	r4,r4,3
    acf0:	3104d83a 	srl	r2,r6,r4
    acf4:	00c000b4 	movhi	r3,2
    acf8:	18e38d04 	addi	r3,r3,-29132
    acfc:	1885883a 	add	r2,r3,r2
    ad00:	10c00003 	ldbu	r3,0(r2)
    ad04:	00800804 	movi	r2,32
    ad08:	1909883a 	add	r4,r3,r4
    ad0c:	1125c83a 	sub	r18,r2,r4
    ad10:	90000526 	beq	r18,zero,ad28 <__umoddi3+0x94>
    ad14:	8ca2983a 	sll	r17,r17,r18
    ad18:	8108d83a 	srl	r4,r16,r4
    ad1c:	34a6983a 	sll	r19,r6,r18
    ad20:	84a8983a 	sll	r20,r16,r18
    ad24:	2478b03a 	or	fp,r4,r17
    ad28:	982cd43a 	srli	r22,r19,16
    ad2c:	e009883a 	mov	r4,fp
    ad30:	9dffffcc 	andi	r23,r19,65535
    ad34:	b00b883a 	mov	r5,r22
    ad38:	0000b680 	call	b68 <__umodsi3>
    ad3c:	b00b883a 	mov	r5,r22
    ad40:	e009883a 	mov	r4,fp
    ad44:	102b883a 	mov	r21,r2
    ad48:	0000b040 	call	b04 <__udivsi3>
    ad4c:	100b883a 	mov	r5,r2
    ad50:	b809883a 	mov	r4,r23
    ad54:	0000bc00 	call	bc0 <__mulsi3>
    ad58:	a82a943a 	slli	r21,r21,16
    ad5c:	a006d43a 	srli	r3,r20,16
    ad60:	1d46b03a 	or	r3,r3,r21
    ad64:	1880032e 	bgeu	r3,r2,ad74 <__umoddi3+0xe0>
    ad68:	1cc7883a 	add	r3,r3,r19
    ad6c:	1cc00136 	bltu	r3,r19,ad74 <__umoddi3+0xe0>
    ad70:	18813136 	bltu	r3,r2,b238 <__umoddi3+0x5a4>
    ad74:	18a1c83a 	sub	r16,r3,r2
    ad78:	b00b883a 	mov	r5,r22
    ad7c:	8009883a 	mov	r4,r16
    ad80:	0000b680 	call	b68 <__umodsi3>
    ad84:	b00b883a 	mov	r5,r22
    ad88:	8009883a 	mov	r4,r16
    ad8c:	1023883a 	mov	r17,r2
    ad90:	0000b040 	call	b04 <__udivsi3>
    ad94:	100b883a 	mov	r5,r2
    ad98:	b809883a 	mov	r4,r23
    ad9c:	8822943a 	slli	r17,r17,16
    ada0:	0000bc00 	call	bc0 <__mulsi3>
    ada4:	a0ffffcc 	andi	r3,r20,65535
    ada8:	1c46b03a 	or	r3,r3,r17
    adac:	1880042e 	bgeu	r3,r2,adc0 <__umoddi3+0x12c>
    adb0:	1cc7883a 	add	r3,r3,r19
    adb4:	1cc00236 	bltu	r3,r19,adc0 <__umoddi3+0x12c>
    adb8:	1880012e 	bgeu	r3,r2,adc0 <__umoddi3+0x12c>
    adbc:	1cc7883a 	add	r3,r3,r19
    adc0:	1885c83a 	sub	r2,r3,r2
    adc4:	1484d83a 	srl	r2,r2,r18
    adc8:	0007883a 	mov	r3,zero
    adcc:	00005306 	br	af1c <__umoddi3+0x288>
    add0:	29c05036 	bltu	r5,r7,af14 <__umoddi3+0x280>
    add4:	00bfffd4 	movui	r2,65535
    add8:	11c05c2e 	bgeu	r2,r7,af4c <__umoddi3+0x2b8>
    addc:	00804034 	movhi	r2,256
    ade0:	10bfffc4 	addi	r2,r2,-1
    ade4:	11c10636 	bltu	r2,r7,b200 <__umoddi3+0x56c>
    ade8:	01000404 	movi	r4,16
    adec:	3904d83a 	srl	r2,r7,r4
    adf0:	00c000b4 	movhi	r3,2
    adf4:	18e38d04 	addi	r3,r3,-29132
    adf8:	1885883a 	add	r2,r3,r2
    adfc:	14c00003 	ldbu	r19,0(r2)
    ae00:	00c00804 	movi	r3,32
    ae04:	9927883a 	add	r19,r19,r4
    ae08:	1ce9c83a 	sub	r20,r3,r19
    ae0c:	a0005c1e 	bne	r20,zero,af80 <__umoddi3+0x2ec>
    ae10:	3c400136 	bltu	r7,r17,ae18 <__umoddi3+0x184>
    ae14:	81810a36 	bltu	r16,r6,b240 <__umoddi3+0x5ac>
    ae18:	8185c83a 	sub	r2,r16,r6
    ae1c:	89e3c83a 	sub	r17,r17,r7
    ae20:	8089803a 	cmpltu	r4,r16,r2
    ae24:	8939c83a 	sub	fp,r17,r4
    ae28:	e007883a 	mov	r3,fp
    ae2c:	00003b06 	br	af1c <__umoddi3+0x288>
    ae30:	3000041e 	bne	r6,zero,ae44 <__umoddi3+0x1b0>
    ae34:	000b883a 	mov	r5,zero
    ae38:	01000044 	movi	r4,1
    ae3c:	0000b040 	call	b04 <__udivsi3>
    ae40:	1027883a 	mov	r19,r2
    ae44:	00bfffd4 	movui	r2,65535
    ae48:	14c0442e 	bgeu	r2,r19,af5c <__umoddi3+0x2c8>
    ae4c:	00804034 	movhi	r2,256
    ae50:	10bfffc4 	addi	r2,r2,-1
    ae54:	14c0ec36 	bltu	r2,r19,b208 <__umoddi3+0x574>
    ae58:	00800404 	movi	r2,16
    ae5c:	9886d83a 	srl	r3,r19,r2
    ae60:	010000b4 	movhi	r4,2
    ae64:	21238d04 	addi	r4,r4,-29132
    ae68:	20c7883a 	add	r3,r4,r3
    ae6c:	18c00003 	ldbu	r3,0(r3)
    ae70:	1887883a 	add	r3,r3,r2
    ae74:	00800804 	movi	r2,32
    ae78:	10e5c83a 	sub	r18,r2,r3
    ae7c:	9000ab1e 	bne	r18,zero,b12c <__umoddi3+0x498>
    ae80:	982cd43a 	srli	r22,r19,16
    ae84:	8ce3c83a 	sub	r17,r17,r19
    ae88:	9dffffcc 	andi	r23,r19,65535
    ae8c:	b00b883a 	mov	r5,r22
    ae90:	8809883a 	mov	r4,r17
    ae94:	0000b680 	call	b68 <__umodsi3>
    ae98:	b00b883a 	mov	r5,r22
    ae9c:	8809883a 	mov	r4,r17
    aea0:	102b883a 	mov	r21,r2
    aea4:	0000b040 	call	b04 <__udivsi3>
    aea8:	b80b883a 	mov	r5,r23
    aeac:	1009883a 	mov	r4,r2
    aeb0:	0000bc00 	call	bc0 <__mulsi3>
    aeb4:	a82a943a 	slli	r21,r21,16
    aeb8:	a006d43a 	srli	r3,r20,16
    aebc:	1d46b03a 	or	r3,r3,r21
    aec0:	1880042e 	bgeu	r3,r2,aed4 <__umoddi3+0x240>
    aec4:	1cc7883a 	add	r3,r3,r19
    aec8:	1cc00236 	bltu	r3,r19,aed4 <__umoddi3+0x240>
    aecc:	1880012e 	bgeu	r3,r2,aed4 <__umoddi3+0x240>
    aed0:	1cc7883a 	add	r3,r3,r19
    aed4:	18a1c83a 	sub	r16,r3,r2
    aed8:	b00b883a 	mov	r5,r22
    aedc:	8009883a 	mov	r4,r16
    aee0:	0000b680 	call	b68 <__umodsi3>
    aee4:	1023883a 	mov	r17,r2
    aee8:	b00b883a 	mov	r5,r22
    aeec:	8009883a 	mov	r4,r16
    aef0:	0000b040 	call	b04 <__udivsi3>
    aef4:	8822943a 	slli	r17,r17,16
    aef8:	b80b883a 	mov	r5,r23
    aefc:	1009883a 	mov	r4,r2
    af00:	0000bc00 	call	bc0 <__mulsi3>
    af04:	a53fffcc 	andi	r20,r20,65535
    af08:	a446b03a 	or	r3,r20,r17
    af0c:	18bfac2e 	bgeu	r3,r2,adc0 <__alt_data_end+0xfffda080>
    af10:	003fa706 	br	adb0 <__alt_data_end+0xfffda070>
    af14:	2005883a 	mov	r2,r4
    af18:	2807883a 	mov	r3,r5
    af1c:	dfc00c17 	ldw	ra,48(sp)
    af20:	df000b17 	ldw	fp,44(sp)
    af24:	ddc00a17 	ldw	r23,40(sp)
    af28:	dd800917 	ldw	r22,36(sp)
    af2c:	dd400817 	ldw	r21,32(sp)
    af30:	dd000717 	ldw	r20,28(sp)
    af34:	dcc00617 	ldw	r19,24(sp)
    af38:	dc800517 	ldw	r18,20(sp)
    af3c:	dc400417 	ldw	r17,16(sp)
    af40:	dc000317 	ldw	r16,12(sp)
    af44:	dec00d04 	addi	sp,sp,52
    af48:	f800283a 	ret
    af4c:	04c03fc4 	movi	r19,255
    af50:	99c9803a 	cmpltu	r4,r19,r7
    af54:	200890fa 	slli	r4,r4,3
    af58:	003fa406 	br	adec <__alt_data_end+0xfffda0ac>
    af5c:	00803fc4 	movi	r2,255
    af60:	14c5803a 	cmpltu	r2,r2,r19
    af64:	100490fa 	slli	r2,r2,3
    af68:	003fbc06 	br	ae5c <__alt_data_end+0xfffda11c>
    af6c:	00804034 	movhi	r2,256
    af70:	10bfffc4 	addi	r2,r2,-1
    af74:	1180a636 	bltu	r2,r6,b210 <__umoddi3+0x57c>
    af78:	01000404 	movi	r4,16
    af7c:	003f5c06 	br	acf0 <__alt_data_end+0xfffd9fb0>
    af80:	3d0e983a 	sll	r7,r7,r20
    af84:	34ead83a 	srl	r21,r6,r19
    af88:	8cc6d83a 	srl	r3,r17,r19
    af8c:	8d10983a 	sll	r8,r17,r20
    af90:	3d6ab03a 	or	r21,r7,r21
    af94:	a82cd43a 	srli	r22,r21,16
    af98:	84e2d83a 	srl	r17,r16,r19
    af9c:	1809883a 	mov	r4,r3
    afa0:	b00b883a 	mov	r5,r22
    afa4:	8a22b03a 	or	r17,r17,r8
    afa8:	3524983a 	sll	r18,r6,r20
    afac:	dc400015 	stw	r17,0(sp)
    afb0:	d8c00115 	stw	r3,4(sp)
    afb4:	0000b680 	call	b68 <__umodsi3>
    afb8:	d8c00117 	ldw	r3,4(sp)
    afbc:	b00b883a 	mov	r5,r22
    afc0:	1039883a 	mov	fp,r2
    afc4:	1809883a 	mov	r4,r3
    afc8:	0000b040 	call	b04 <__udivsi3>
    afcc:	adffffcc 	andi	r23,r21,65535
    afd0:	100b883a 	mov	r5,r2
    afd4:	b809883a 	mov	r4,r23
    afd8:	1023883a 	mov	r17,r2
    afdc:	0000bc00 	call	bc0 <__mulsi3>
    afe0:	d9400017 	ldw	r5,0(sp)
    afe4:	e008943a 	slli	r4,fp,16
    afe8:	8520983a 	sll	r16,r16,r20
    afec:	2806d43a 	srli	r3,r5,16
    aff0:	1906b03a 	or	r3,r3,r4
    aff4:	1880042e 	bgeu	r3,r2,b008 <__umoddi3+0x374>
    aff8:	1d47883a 	add	r3,r3,r21
    affc:	893fffc4 	addi	r4,r17,-1
    b000:	1d40892e 	bgeu	r3,r21,b228 <__umoddi3+0x594>
    b004:	2023883a 	mov	r17,r4
    b008:	18b9c83a 	sub	fp,r3,r2
    b00c:	b00b883a 	mov	r5,r22
    b010:	e009883a 	mov	r4,fp
    b014:	0000b680 	call	b68 <__umodsi3>
    b018:	b00b883a 	mov	r5,r22
    b01c:	e009883a 	mov	r4,fp
    b020:	d8800215 	stw	r2,8(sp)
    b024:	0000b040 	call	b04 <__udivsi3>
    b028:	100b883a 	mov	r5,r2
    b02c:	b809883a 	mov	r4,r23
    b030:	102d883a 	mov	r22,r2
    b034:	0000bc00 	call	bc0 <__mulsi3>
    b038:	d9800217 	ldw	r6,8(sp)
    b03c:	d8c00017 	ldw	r3,0(sp)
    b040:	300c943a 	slli	r6,r6,16
    b044:	1a3fffcc 	andi	r8,r3,65535
    b048:	4190b03a 	or	r8,r8,r6
    b04c:	4080042e 	bgeu	r8,r2,b060 <__umoddi3+0x3cc>
    b050:	4551883a 	add	r8,r8,r21
    b054:	b0ffffc4 	addi	r3,r22,-1
    b058:	45406f2e 	bgeu	r8,r21,b218 <__umoddi3+0x584>
    b05c:	182d883a 	mov	r22,r3
    b060:	880e943a 	slli	r7,r17,16
    b064:	9006d43a 	srli	r3,r18,16
    b068:	91bfffcc 	andi	r6,r18,65535
    b06c:	3dacb03a 	or	r22,r7,r22
    b070:	b02ed43a 	srli	r23,r22,16
    b074:	b5bfffcc 	andi	r22,r22,65535
    b078:	300b883a 	mov	r5,r6
    b07c:	b009883a 	mov	r4,r22
    b080:	40a3c83a 	sub	r17,r8,r2
    b084:	d8c00115 	stw	r3,4(sp)
    b088:	d9800215 	stw	r6,8(sp)
    b08c:	0000bc00 	call	bc0 <__mulsi3>
    b090:	d9800217 	ldw	r6,8(sp)
    b094:	b809883a 	mov	r4,r23
    b098:	1039883a 	mov	fp,r2
    b09c:	300b883a 	mov	r5,r6
    b0a0:	0000bc00 	call	bc0 <__mulsi3>
    b0a4:	d8c00117 	ldw	r3,4(sp)
    b0a8:	b809883a 	mov	r4,r23
    b0ac:	d8800215 	stw	r2,8(sp)
    b0b0:	180b883a 	mov	r5,r3
    b0b4:	0000bc00 	call	bc0 <__mulsi3>
    b0b8:	d8c00117 	ldw	r3,4(sp)
    b0bc:	b009883a 	mov	r4,r22
    b0c0:	102f883a 	mov	r23,r2
    b0c4:	180b883a 	mov	r5,r3
    b0c8:	0000bc00 	call	bc0 <__mulsi3>
    b0cc:	d9800217 	ldw	r6,8(sp)
    b0d0:	e006d43a 	srli	r3,fp,16
    b0d4:	1185883a 	add	r2,r2,r6
    b0d8:	1885883a 	add	r2,r3,r2
    b0dc:	1180022e 	bgeu	r2,r6,b0e8 <__umoddi3+0x454>
    b0e0:	00c00074 	movhi	r3,1
    b0e4:	b8ef883a 	add	r23,r23,r3
    b0e8:	1006d43a 	srli	r3,r2,16
    b0ec:	1004943a 	slli	r2,r2,16
    b0f0:	e73fffcc 	andi	fp,fp,65535
    b0f4:	1dc7883a 	add	r3,r3,r23
    b0f8:	1739883a 	add	fp,r2,fp
    b0fc:	88c03a36 	bltu	r17,r3,b1e8 <__umoddi3+0x554>
    b100:	88c05126 	beq	r17,r3,b248 <__umoddi3+0x5b4>
    b104:	88c9c83a 	sub	r4,r17,r3
    b108:	e00f883a 	mov	r7,fp
    b10c:	81cfc83a 	sub	r7,r16,r7
    b110:	81c7803a 	cmpltu	r3,r16,r7
    b114:	20c7c83a 	sub	r3,r4,r3
    b118:	1cc4983a 	sll	r2,r3,r19
    b11c:	3d0ed83a 	srl	r7,r7,r20
    b120:	1d06d83a 	srl	r3,r3,r20
    b124:	11c4b03a 	or	r2,r2,r7
    b128:	003f7c06 	br	af1c <__alt_data_end+0xfffda1dc>
    b12c:	9ca6983a 	sll	r19,r19,r18
    b130:	88f8d83a 	srl	fp,r17,r3
    b134:	80c4d83a 	srl	r2,r16,r3
    b138:	982cd43a 	srli	r22,r19,16
    b13c:	8ca2983a 	sll	r17,r17,r18
    b140:	e009883a 	mov	r4,fp
    b144:	b00b883a 	mov	r5,r22
    b148:	146ab03a 	or	r21,r2,r17
    b14c:	0000b680 	call	b68 <__umodsi3>
    b150:	b00b883a 	mov	r5,r22
    b154:	e009883a 	mov	r4,fp
    b158:	1029883a 	mov	r20,r2
    b15c:	9dffffcc 	andi	r23,r19,65535
    b160:	0000b040 	call	b04 <__udivsi3>
    b164:	b809883a 	mov	r4,r23
    b168:	100b883a 	mov	r5,r2
    b16c:	0000bc00 	call	bc0 <__mulsi3>
    b170:	a008943a 	slli	r4,r20,16
    b174:	a806d43a 	srli	r3,r21,16
    b178:	84a8983a 	sll	r20,r16,r18
    b17c:	1906b03a 	or	r3,r3,r4
    b180:	1880042e 	bgeu	r3,r2,b194 <__umoddi3+0x500>
    b184:	1cc7883a 	add	r3,r3,r19
    b188:	1cc00236 	bltu	r3,r19,b194 <__umoddi3+0x500>
    b18c:	1880012e 	bgeu	r3,r2,b194 <__umoddi3+0x500>
    b190:	1cc7883a 	add	r3,r3,r19
    b194:	18a3c83a 	sub	r17,r3,r2
    b198:	b00b883a 	mov	r5,r22
    b19c:	8809883a 	mov	r4,r17
    b1a0:	0000b680 	call	b68 <__umodsi3>
    b1a4:	b00b883a 	mov	r5,r22
    b1a8:	8809883a 	mov	r4,r17
    b1ac:	1021883a 	mov	r16,r2
    b1b0:	0000b040 	call	b04 <__udivsi3>
    b1b4:	100b883a 	mov	r5,r2
    b1b8:	b809883a 	mov	r4,r23
    b1bc:	8020943a 	slli	r16,r16,16
    b1c0:	0000bc00 	call	bc0 <__mulsi3>
    b1c4:	a8ffffcc 	andi	r3,r21,65535
    b1c8:	1c06b03a 	or	r3,r3,r16
    b1cc:	1880042e 	bgeu	r3,r2,b1e0 <__umoddi3+0x54c>
    b1d0:	1cc7883a 	add	r3,r3,r19
    b1d4:	1cc00236 	bltu	r3,r19,b1e0 <__umoddi3+0x54c>
    b1d8:	1880012e 	bgeu	r3,r2,b1e0 <__umoddi3+0x54c>
    b1dc:	1cc7883a 	add	r3,r3,r19
    b1e0:	18a3c83a 	sub	r17,r3,r2
    b1e4:	003f2906 	br	ae8c <__alt_data_end+0xfffda14c>
    b1e8:	e48fc83a 	sub	r7,fp,r18
    b1ec:	1d49c83a 	sub	r4,r3,r21
    b1f0:	e1f9803a 	cmpltu	fp,fp,r7
    b1f4:	2739c83a 	sub	fp,r4,fp
    b1f8:	8f09c83a 	sub	r4,r17,fp
    b1fc:	003fc306 	br	b10c <__alt_data_end+0xfffda3cc>
    b200:	01000604 	movi	r4,24
    b204:	003ef906 	br	adec <__alt_data_end+0xfffda0ac>
    b208:	00800604 	movi	r2,24
    b20c:	003f1306 	br	ae5c <__alt_data_end+0xfffda11c>
    b210:	01000604 	movi	r4,24
    b214:	003eb606 	br	acf0 <__alt_data_end+0xfffd9fb0>
    b218:	40bf902e 	bgeu	r8,r2,b05c <__alt_data_end+0xfffda31c>
    b21c:	b5bfff84 	addi	r22,r22,-2
    b220:	4551883a 	add	r8,r8,r21
    b224:	003f8e06 	br	b060 <__alt_data_end+0xfffda320>
    b228:	18bf762e 	bgeu	r3,r2,b004 <__alt_data_end+0xfffda2c4>
    b22c:	8c7fff84 	addi	r17,r17,-2
    b230:	1d47883a 	add	r3,r3,r21
    b234:	003f7406 	br	b008 <__alt_data_end+0xfffda2c8>
    b238:	1cc7883a 	add	r3,r3,r19
    b23c:	003ecd06 	br	ad74 <__alt_data_end+0xfffda034>
    b240:	8005883a 	mov	r2,r16
    b244:	003ef806 	br	ae28 <__alt_data_end+0xfffda0e8>
    b248:	873fe736 	bltu	r16,fp,b1e8 <__alt_data_end+0xfffda4a8>
    b24c:	e00f883a 	mov	r7,fp
    b250:	0009883a 	mov	r4,zero
    b254:	003fad06 	br	b10c <__alt_data_end+0xfffda3cc>

0000b258 <__adddf3>:
    b258:	02c00434 	movhi	r11,16
    b25c:	5affffc4 	addi	r11,r11,-1
    b260:	2806d7fa 	srli	r3,r5,31
    b264:	2ad4703a 	and	r10,r5,r11
    b268:	3ad2703a 	and	r9,r7,r11
    b26c:	3804d53a 	srli	r2,r7,20
    b270:	3018d77a 	srli	r12,r6,29
    b274:	280ad53a 	srli	r5,r5,20
    b278:	501490fa 	slli	r10,r10,3
    b27c:	2010d77a 	srli	r8,r4,29
    b280:	481290fa 	slli	r9,r9,3
    b284:	380ed7fa 	srli	r7,r7,31
    b288:	defffb04 	addi	sp,sp,-20
    b28c:	dc800215 	stw	r18,8(sp)
    b290:	dc400115 	stw	r17,4(sp)
    b294:	dc000015 	stw	r16,0(sp)
    b298:	dfc00415 	stw	ra,16(sp)
    b29c:	dcc00315 	stw	r19,12(sp)
    b2a0:	1c803fcc 	andi	r18,r3,255
    b2a4:	2c01ffcc 	andi	r16,r5,2047
    b2a8:	5210b03a 	or	r8,r10,r8
    b2ac:	202290fa 	slli	r17,r4,3
    b2b0:	1081ffcc 	andi	r2,r2,2047
    b2b4:	4b12b03a 	or	r9,r9,r12
    b2b8:	300c90fa 	slli	r6,r6,3
    b2bc:	91c07526 	beq	r18,r7,b494 <__adddf3+0x23c>
    b2c0:	8087c83a 	sub	r3,r16,r2
    b2c4:	00c0ab0e 	bge	zero,r3,b574 <__adddf3+0x31c>
    b2c8:	10002a1e 	bne	r2,zero,b374 <__adddf3+0x11c>
    b2cc:	4984b03a 	or	r2,r9,r6
    b2d0:	1000961e 	bne	r2,zero,b52c <__adddf3+0x2d4>
    b2d4:	888001cc 	andi	r2,r17,7
    b2d8:	10000726 	beq	r2,zero,b2f8 <__adddf3+0xa0>
    b2dc:	888003cc 	andi	r2,r17,15
    b2e0:	00c00104 	movi	r3,4
    b2e4:	10c00426 	beq	r2,r3,b2f8 <__adddf3+0xa0>
    b2e8:	88c7883a 	add	r3,r17,r3
    b2ec:	1c63803a 	cmpltu	r17,r3,r17
    b2f0:	4451883a 	add	r8,r8,r17
    b2f4:	1823883a 	mov	r17,r3
    b2f8:	4080202c 	andhi	r2,r8,128
    b2fc:	10005926 	beq	r2,zero,b464 <__adddf3+0x20c>
    b300:	84000044 	addi	r16,r16,1
    b304:	0081ffc4 	movi	r2,2047
    b308:	8080ba26 	beq	r16,r2,b5f4 <__adddf3+0x39c>
    b30c:	00bfe034 	movhi	r2,65408
    b310:	10bfffc4 	addi	r2,r2,-1
    b314:	4090703a 	and	r8,r8,r2
    b318:	4004977a 	slli	r2,r8,29
    b31c:	4010927a 	slli	r8,r8,9
    b320:	8822d0fa 	srli	r17,r17,3
    b324:	8401ffcc 	andi	r16,r16,2047
    b328:	4010d33a 	srli	r8,r8,12
    b32c:	9007883a 	mov	r3,r18
    b330:	1444b03a 	or	r2,r2,r17
    b334:	8401ffcc 	andi	r16,r16,2047
    b338:	8020953a 	slli	r16,r16,20
    b33c:	18c03fcc 	andi	r3,r3,255
    b340:	01000434 	movhi	r4,16
    b344:	213fffc4 	addi	r4,r4,-1
    b348:	180697fa 	slli	r3,r3,31
    b34c:	4110703a 	and	r8,r8,r4
    b350:	4410b03a 	or	r8,r8,r16
    b354:	40c6b03a 	or	r3,r8,r3
    b358:	dfc00417 	ldw	ra,16(sp)
    b35c:	dcc00317 	ldw	r19,12(sp)
    b360:	dc800217 	ldw	r18,8(sp)
    b364:	dc400117 	ldw	r17,4(sp)
    b368:	dc000017 	ldw	r16,0(sp)
    b36c:	dec00504 	addi	sp,sp,20
    b370:	f800283a 	ret
    b374:	0081ffc4 	movi	r2,2047
    b378:	80bfd626 	beq	r16,r2,b2d4 <__alt_data_end+0xfffda594>
    b37c:	4a402034 	orhi	r9,r9,128
    b380:	00800e04 	movi	r2,56
    b384:	10c09f16 	blt	r2,r3,b604 <__adddf3+0x3ac>
    b388:	008007c4 	movi	r2,31
    b38c:	10c0c216 	blt	r2,r3,b698 <__adddf3+0x440>
    b390:	00800804 	movi	r2,32
    b394:	10c5c83a 	sub	r2,r2,r3
    b398:	488a983a 	sll	r5,r9,r2
    b39c:	30c8d83a 	srl	r4,r6,r3
    b3a0:	3084983a 	sll	r2,r6,r2
    b3a4:	48c6d83a 	srl	r3,r9,r3
    b3a8:	290cb03a 	or	r6,r5,r4
    b3ac:	1004c03a 	cmpne	r2,r2,zero
    b3b0:	308cb03a 	or	r6,r6,r2
    b3b4:	898dc83a 	sub	r6,r17,r6
    b3b8:	89a3803a 	cmpltu	r17,r17,r6
    b3bc:	40d1c83a 	sub	r8,r8,r3
    b3c0:	4451c83a 	sub	r8,r8,r17
    b3c4:	3023883a 	mov	r17,r6
    b3c8:	4080202c 	andhi	r2,r8,128
    b3cc:	10002326 	beq	r2,zero,b45c <__adddf3+0x204>
    b3d0:	04c02034 	movhi	r19,128
    b3d4:	9cffffc4 	addi	r19,r19,-1
    b3d8:	44e6703a 	and	r19,r8,r19
    b3dc:	98007626 	beq	r19,zero,b5b8 <__adddf3+0x360>
    b3e0:	9809883a 	mov	r4,r19
    b3e4:	000da980 	call	da98 <__clzsi2>
    b3e8:	10fffe04 	addi	r3,r2,-8
    b3ec:	010007c4 	movi	r4,31
    b3f0:	20c07716 	blt	r4,r3,b5d0 <__adddf3+0x378>
    b3f4:	00800804 	movi	r2,32
    b3f8:	10c5c83a 	sub	r2,r2,r3
    b3fc:	8884d83a 	srl	r2,r17,r2
    b400:	98d0983a 	sll	r8,r19,r3
    b404:	88e2983a 	sll	r17,r17,r3
    b408:	1204b03a 	or	r2,r2,r8
    b40c:	1c007416 	blt	r3,r16,b5e0 <__adddf3+0x388>
    b410:	1c21c83a 	sub	r16,r3,r16
    b414:	82000044 	addi	r8,r16,1
    b418:	00c007c4 	movi	r3,31
    b41c:	1a009116 	blt	r3,r8,b664 <__adddf3+0x40c>
    b420:	00c00804 	movi	r3,32
    b424:	1a07c83a 	sub	r3,r3,r8
    b428:	8a08d83a 	srl	r4,r17,r8
    b42c:	88e2983a 	sll	r17,r17,r3
    b430:	10c6983a 	sll	r3,r2,r3
    b434:	1210d83a 	srl	r8,r2,r8
    b438:	8804c03a 	cmpne	r2,r17,zero
    b43c:	1906b03a 	or	r3,r3,r4
    b440:	18a2b03a 	or	r17,r3,r2
    b444:	0021883a 	mov	r16,zero
    b448:	003fa206 	br	b2d4 <__alt_data_end+0xfffda594>
    b44c:	1890b03a 	or	r8,r3,r2
    b450:	40017d26 	beq	r8,zero,ba48 <__adddf3+0x7f0>
    b454:	1011883a 	mov	r8,r2
    b458:	1823883a 	mov	r17,r3
    b45c:	888001cc 	andi	r2,r17,7
    b460:	103f9e1e 	bne	r2,zero,b2dc <__alt_data_end+0xfffda59c>
    b464:	4004977a 	slli	r2,r8,29
    b468:	8822d0fa 	srli	r17,r17,3
    b46c:	4010d0fa 	srli	r8,r8,3
    b470:	9007883a 	mov	r3,r18
    b474:	1444b03a 	or	r2,r2,r17
    b478:	0101ffc4 	movi	r4,2047
    b47c:	81002426 	beq	r16,r4,b510 <__adddf3+0x2b8>
    b480:	8120703a 	and	r16,r16,r4
    b484:	01000434 	movhi	r4,16
    b488:	213fffc4 	addi	r4,r4,-1
    b48c:	4110703a 	and	r8,r8,r4
    b490:	003fa806 	br	b334 <__alt_data_end+0xfffda5f4>
    b494:	8089c83a 	sub	r4,r16,r2
    b498:	01005e0e 	bge	zero,r4,b614 <__adddf3+0x3bc>
    b49c:	10002b26 	beq	r2,zero,b54c <__adddf3+0x2f4>
    b4a0:	0081ffc4 	movi	r2,2047
    b4a4:	80bf8b26 	beq	r16,r2,b2d4 <__alt_data_end+0xfffda594>
    b4a8:	4a402034 	orhi	r9,r9,128
    b4ac:	00800e04 	movi	r2,56
    b4b0:	1100a40e 	bge	r2,r4,b744 <__adddf3+0x4ec>
    b4b4:	498cb03a 	or	r6,r9,r6
    b4b8:	300ac03a 	cmpne	r5,r6,zero
    b4bc:	0013883a 	mov	r9,zero
    b4c0:	2c4b883a 	add	r5,r5,r17
    b4c4:	2c63803a 	cmpltu	r17,r5,r17
    b4c8:	4a11883a 	add	r8,r9,r8
    b4cc:	8a11883a 	add	r8,r17,r8
    b4d0:	2823883a 	mov	r17,r5
    b4d4:	4080202c 	andhi	r2,r8,128
    b4d8:	103fe026 	beq	r2,zero,b45c <__alt_data_end+0xfffda71c>
    b4dc:	84000044 	addi	r16,r16,1
    b4e0:	0081ffc4 	movi	r2,2047
    b4e4:	8080d226 	beq	r16,r2,b830 <__adddf3+0x5d8>
    b4e8:	00bfe034 	movhi	r2,65408
    b4ec:	10bfffc4 	addi	r2,r2,-1
    b4f0:	4090703a 	and	r8,r8,r2
    b4f4:	880ad07a 	srli	r5,r17,1
    b4f8:	400897fa 	slli	r4,r8,31
    b4fc:	88c0004c 	andi	r3,r17,1
    b500:	28e2b03a 	or	r17,r5,r3
    b504:	4010d07a 	srli	r8,r8,1
    b508:	2462b03a 	or	r17,r4,r17
    b50c:	003f7106 	br	b2d4 <__alt_data_end+0xfffda594>
    b510:	4088b03a 	or	r4,r8,r2
    b514:	20014526 	beq	r4,zero,ba2c <__adddf3+0x7d4>
    b518:	01000434 	movhi	r4,16
    b51c:	42000234 	orhi	r8,r8,8
    b520:	213fffc4 	addi	r4,r4,-1
    b524:	4110703a 	and	r8,r8,r4
    b528:	003f8206 	br	b334 <__alt_data_end+0xfffda5f4>
    b52c:	18ffffc4 	addi	r3,r3,-1
    b530:	1800491e 	bne	r3,zero,b658 <__adddf3+0x400>
    b534:	898bc83a 	sub	r5,r17,r6
    b538:	8963803a 	cmpltu	r17,r17,r5
    b53c:	4251c83a 	sub	r8,r8,r9
    b540:	4451c83a 	sub	r8,r8,r17
    b544:	2823883a 	mov	r17,r5
    b548:	003f9f06 	br	b3c8 <__alt_data_end+0xfffda688>
    b54c:	4984b03a 	or	r2,r9,r6
    b550:	103f6026 	beq	r2,zero,b2d4 <__alt_data_end+0xfffda594>
    b554:	213fffc4 	addi	r4,r4,-1
    b558:	2000931e 	bne	r4,zero,b7a8 <__adddf3+0x550>
    b55c:	898d883a 	add	r6,r17,r6
    b560:	3463803a 	cmpltu	r17,r6,r17
    b564:	4251883a 	add	r8,r8,r9
    b568:	8a11883a 	add	r8,r17,r8
    b56c:	3023883a 	mov	r17,r6
    b570:	003fd806 	br	b4d4 <__alt_data_end+0xfffda794>
    b574:	1800541e 	bne	r3,zero,b6c8 <__adddf3+0x470>
    b578:	80800044 	addi	r2,r16,1
    b57c:	1081ffcc 	andi	r2,r2,2047
    b580:	00c00044 	movi	r3,1
    b584:	1880a00e 	bge	r3,r2,b808 <__adddf3+0x5b0>
    b588:	8989c83a 	sub	r4,r17,r6
    b58c:	8905803a 	cmpltu	r2,r17,r4
    b590:	4267c83a 	sub	r19,r8,r9
    b594:	98a7c83a 	sub	r19,r19,r2
    b598:	9880202c 	andhi	r2,r19,128
    b59c:	10006326 	beq	r2,zero,b72c <__adddf3+0x4d4>
    b5a0:	3463c83a 	sub	r17,r6,r17
    b5a4:	4a07c83a 	sub	r3,r9,r8
    b5a8:	344d803a 	cmpltu	r6,r6,r17
    b5ac:	19a7c83a 	sub	r19,r3,r6
    b5b0:	3825883a 	mov	r18,r7
    b5b4:	983f8a1e 	bne	r19,zero,b3e0 <__alt_data_end+0xfffda6a0>
    b5b8:	8809883a 	mov	r4,r17
    b5bc:	000da980 	call	da98 <__clzsi2>
    b5c0:	10800804 	addi	r2,r2,32
    b5c4:	10fffe04 	addi	r3,r2,-8
    b5c8:	010007c4 	movi	r4,31
    b5cc:	20ff890e 	bge	r4,r3,b3f4 <__alt_data_end+0xfffda6b4>
    b5d0:	10bff604 	addi	r2,r2,-40
    b5d4:	8884983a 	sll	r2,r17,r2
    b5d8:	0023883a 	mov	r17,zero
    b5dc:	1c3f8c0e 	bge	r3,r16,b410 <__alt_data_end+0xfffda6d0>
    b5e0:	023fe034 	movhi	r8,65408
    b5e4:	423fffc4 	addi	r8,r8,-1
    b5e8:	80e1c83a 	sub	r16,r16,r3
    b5ec:	1210703a 	and	r8,r2,r8
    b5f0:	003f3806 	br	b2d4 <__alt_data_end+0xfffda594>
    b5f4:	9007883a 	mov	r3,r18
    b5f8:	0011883a 	mov	r8,zero
    b5fc:	0005883a 	mov	r2,zero
    b600:	003f4c06 	br	b334 <__alt_data_end+0xfffda5f4>
    b604:	498cb03a 	or	r6,r9,r6
    b608:	300cc03a 	cmpne	r6,r6,zero
    b60c:	0007883a 	mov	r3,zero
    b610:	003f6806 	br	b3b4 <__alt_data_end+0xfffda674>
    b614:	20009c1e 	bne	r4,zero,b888 <__adddf3+0x630>
    b618:	80800044 	addi	r2,r16,1
    b61c:	1141ffcc 	andi	r5,r2,2047
    b620:	01000044 	movi	r4,1
    b624:	2140670e 	bge	r4,r5,b7c4 <__adddf3+0x56c>
    b628:	0101ffc4 	movi	r4,2047
    b62c:	11007f26 	beq	r2,r4,b82c <__adddf3+0x5d4>
    b630:	898d883a 	add	r6,r17,r6
    b634:	4247883a 	add	r3,r8,r9
    b638:	3451803a 	cmpltu	r8,r6,r17
    b63c:	40d1883a 	add	r8,r8,r3
    b640:	402297fa 	slli	r17,r8,31
    b644:	300cd07a 	srli	r6,r6,1
    b648:	4010d07a 	srli	r8,r8,1
    b64c:	1021883a 	mov	r16,r2
    b650:	89a2b03a 	or	r17,r17,r6
    b654:	003f1f06 	br	b2d4 <__alt_data_end+0xfffda594>
    b658:	0081ffc4 	movi	r2,2047
    b65c:	80bf481e 	bne	r16,r2,b380 <__alt_data_end+0xfffda640>
    b660:	003f1c06 	br	b2d4 <__alt_data_end+0xfffda594>
    b664:	843ff844 	addi	r16,r16,-31
    b668:	01000804 	movi	r4,32
    b66c:	1406d83a 	srl	r3,r2,r16
    b670:	41005026 	beq	r8,r4,b7b4 <__adddf3+0x55c>
    b674:	01001004 	movi	r4,64
    b678:	2211c83a 	sub	r8,r4,r8
    b67c:	1204983a 	sll	r2,r2,r8
    b680:	88a2b03a 	or	r17,r17,r2
    b684:	8822c03a 	cmpne	r17,r17,zero
    b688:	1c62b03a 	or	r17,r3,r17
    b68c:	0011883a 	mov	r8,zero
    b690:	0021883a 	mov	r16,zero
    b694:	003f7106 	br	b45c <__alt_data_end+0xfffda71c>
    b698:	193ff804 	addi	r4,r3,-32
    b69c:	00800804 	movi	r2,32
    b6a0:	4908d83a 	srl	r4,r9,r4
    b6a4:	18804526 	beq	r3,r2,b7bc <__adddf3+0x564>
    b6a8:	00801004 	movi	r2,64
    b6ac:	10c5c83a 	sub	r2,r2,r3
    b6b0:	4886983a 	sll	r3,r9,r2
    b6b4:	198cb03a 	or	r6,r3,r6
    b6b8:	300cc03a 	cmpne	r6,r6,zero
    b6bc:	218cb03a 	or	r6,r4,r6
    b6c0:	0007883a 	mov	r3,zero
    b6c4:	003f3b06 	br	b3b4 <__alt_data_end+0xfffda674>
    b6c8:	80002a26 	beq	r16,zero,b774 <__adddf3+0x51c>
    b6cc:	0101ffc4 	movi	r4,2047
    b6d0:	11006826 	beq	r2,r4,b874 <__adddf3+0x61c>
    b6d4:	00c7c83a 	sub	r3,zero,r3
    b6d8:	42002034 	orhi	r8,r8,128
    b6dc:	01000e04 	movi	r4,56
    b6e0:	20c07c16 	blt	r4,r3,b8d4 <__adddf3+0x67c>
    b6e4:	010007c4 	movi	r4,31
    b6e8:	20c0da16 	blt	r4,r3,ba54 <__adddf3+0x7fc>
    b6ec:	01000804 	movi	r4,32
    b6f0:	20c9c83a 	sub	r4,r4,r3
    b6f4:	4114983a 	sll	r10,r8,r4
    b6f8:	88cad83a 	srl	r5,r17,r3
    b6fc:	8908983a 	sll	r4,r17,r4
    b700:	40c6d83a 	srl	r3,r8,r3
    b704:	5162b03a 	or	r17,r10,r5
    b708:	2008c03a 	cmpne	r4,r4,zero
    b70c:	8922b03a 	or	r17,r17,r4
    b710:	3463c83a 	sub	r17,r6,r17
    b714:	48c7c83a 	sub	r3,r9,r3
    b718:	344d803a 	cmpltu	r6,r6,r17
    b71c:	1991c83a 	sub	r8,r3,r6
    b720:	1021883a 	mov	r16,r2
    b724:	3825883a 	mov	r18,r7
    b728:	003f2706 	br	b3c8 <__alt_data_end+0xfffda688>
    b72c:	24d0b03a 	or	r8,r4,r19
    b730:	40001b1e 	bne	r8,zero,b7a0 <__adddf3+0x548>
    b734:	0005883a 	mov	r2,zero
    b738:	0007883a 	mov	r3,zero
    b73c:	0021883a 	mov	r16,zero
    b740:	003f4d06 	br	b478 <__alt_data_end+0xfffda738>
    b744:	008007c4 	movi	r2,31
    b748:	11003c16 	blt	r2,r4,b83c <__adddf3+0x5e4>
    b74c:	00800804 	movi	r2,32
    b750:	1105c83a 	sub	r2,r2,r4
    b754:	488e983a 	sll	r7,r9,r2
    b758:	310ad83a 	srl	r5,r6,r4
    b75c:	3084983a 	sll	r2,r6,r2
    b760:	4912d83a 	srl	r9,r9,r4
    b764:	394ab03a 	or	r5,r7,r5
    b768:	1004c03a 	cmpne	r2,r2,zero
    b76c:	288ab03a 	or	r5,r5,r2
    b770:	003f5306 	br	b4c0 <__alt_data_end+0xfffda780>
    b774:	4448b03a 	or	r4,r8,r17
    b778:	20003e26 	beq	r4,zero,b874 <__adddf3+0x61c>
    b77c:	00c6303a 	nor	r3,zero,r3
    b780:	18003a1e 	bne	r3,zero,b86c <__adddf3+0x614>
    b784:	3463c83a 	sub	r17,r6,r17
    b788:	4a07c83a 	sub	r3,r9,r8
    b78c:	344d803a 	cmpltu	r6,r6,r17
    b790:	1991c83a 	sub	r8,r3,r6
    b794:	1021883a 	mov	r16,r2
    b798:	3825883a 	mov	r18,r7
    b79c:	003f0a06 	br	b3c8 <__alt_data_end+0xfffda688>
    b7a0:	2023883a 	mov	r17,r4
    b7a4:	003f0d06 	br	b3dc <__alt_data_end+0xfffda69c>
    b7a8:	0081ffc4 	movi	r2,2047
    b7ac:	80bf3f1e 	bne	r16,r2,b4ac <__alt_data_end+0xfffda76c>
    b7b0:	003ec806 	br	b2d4 <__alt_data_end+0xfffda594>
    b7b4:	0005883a 	mov	r2,zero
    b7b8:	003fb106 	br	b680 <__alt_data_end+0xfffda940>
    b7bc:	0007883a 	mov	r3,zero
    b7c0:	003fbc06 	br	b6b4 <__alt_data_end+0xfffda974>
    b7c4:	4444b03a 	or	r2,r8,r17
    b7c8:	8000871e 	bne	r16,zero,b9e8 <__adddf3+0x790>
    b7cc:	1000ba26 	beq	r2,zero,bab8 <__adddf3+0x860>
    b7d0:	4984b03a 	or	r2,r9,r6
    b7d4:	103ebf26 	beq	r2,zero,b2d4 <__alt_data_end+0xfffda594>
    b7d8:	8985883a 	add	r2,r17,r6
    b7dc:	4247883a 	add	r3,r8,r9
    b7e0:	1451803a 	cmpltu	r8,r2,r17
    b7e4:	40d1883a 	add	r8,r8,r3
    b7e8:	40c0202c 	andhi	r3,r8,128
    b7ec:	1023883a 	mov	r17,r2
    b7f0:	183f1a26 	beq	r3,zero,b45c <__alt_data_end+0xfffda71c>
    b7f4:	00bfe034 	movhi	r2,65408
    b7f8:	10bfffc4 	addi	r2,r2,-1
    b7fc:	2021883a 	mov	r16,r4
    b800:	4090703a 	and	r8,r8,r2
    b804:	003eb306 	br	b2d4 <__alt_data_end+0xfffda594>
    b808:	4444b03a 	or	r2,r8,r17
    b80c:	8000291e 	bne	r16,zero,b8b4 <__adddf3+0x65c>
    b810:	10004b1e 	bne	r2,zero,b940 <__adddf3+0x6e8>
    b814:	4990b03a 	or	r8,r9,r6
    b818:	40008b26 	beq	r8,zero,ba48 <__adddf3+0x7f0>
    b81c:	4811883a 	mov	r8,r9
    b820:	3023883a 	mov	r17,r6
    b824:	3825883a 	mov	r18,r7
    b828:	003eaa06 	br	b2d4 <__alt_data_end+0xfffda594>
    b82c:	1021883a 	mov	r16,r2
    b830:	0011883a 	mov	r8,zero
    b834:	0005883a 	mov	r2,zero
    b838:	003f0f06 	br	b478 <__alt_data_end+0xfffda738>
    b83c:	217ff804 	addi	r5,r4,-32
    b840:	00800804 	movi	r2,32
    b844:	494ad83a 	srl	r5,r9,r5
    b848:	20807d26 	beq	r4,r2,ba40 <__adddf3+0x7e8>
    b84c:	00801004 	movi	r2,64
    b850:	1109c83a 	sub	r4,r2,r4
    b854:	4912983a 	sll	r9,r9,r4
    b858:	498cb03a 	or	r6,r9,r6
    b85c:	300cc03a 	cmpne	r6,r6,zero
    b860:	298ab03a 	or	r5,r5,r6
    b864:	0013883a 	mov	r9,zero
    b868:	003f1506 	br	b4c0 <__alt_data_end+0xfffda780>
    b86c:	0101ffc4 	movi	r4,2047
    b870:	113f9a1e 	bne	r2,r4,b6dc <__alt_data_end+0xfffda99c>
    b874:	4811883a 	mov	r8,r9
    b878:	3023883a 	mov	r17,r6
    b87c:	1021883a 	mov	r16,r2
    b880:	3825883a 	mov	r18,r7
    b884:	003e9306 	br	b2d4 <__alt_data_end+0xfffda594>
    b888:	8000161e 	bne	r16,zero,b8e4 <__adddf3+0x68c>
    b88c:	444ab03a 	or	r5,r8,r17
    b890:	28005126 	beq	r5,zero,b9d8 <__adddf3+0x780>
    b894:	0108303a 	nor	r4,zero,r4
    b898:	20004d1e 	bne	r4,zero,b9d0 <__adddf3+0x778>
    b89c:	89a3883a 	add	r17,r17,r6
    b8a0:	4253883a 	add	r9,r8,r9
    b8a4:	898d803a 	cmpltu	r6,r17,r6
    b8a8:	3251883a 	add	r8,r6,r9
    b8ac:	1021883a 	mov	r16,r2
    b8b0:	003f0806 	br	b4d4 <__alt_data_end+0xfffda794>
    b8b4:	1000301e 	bne	r2,zero,b978 <__adddf3+0x720>
    b8b8:	4984b03a 	or	r2,r9,r6
    b8bc:	10007126 	beq	r2,zero,ba84 <__adddf3+0x82c>
    b8c0:	4811883a 	mov	r8,r9
    b8c4:	3023883a 	mov	r17,r6
    b8c8:	3825883a 	mov	r18,r7
    b8cc:	0401ffc4 	movi	r16,2047
    b8d0:	003e8006 	br	b2d4 <__alt_data_end+0xfffda594>
    b8d4:	4462b03a 	or	r17,r8,r17
    b8d8:	8822c03a 	cmpne	r17,r17,zero
    b8dc:	0007883a 	mov	r3,zero
    b8e0:	003f8b06 	br	b710 <__alt_data_end+0xfffda9d0>
    b8e4:	0141ffc4 	movi	r5,2047
    b8e8:	11403b26 	beq	r2,r5,b9d8 <__adddf3+0x780>
    b8ec:	0109c83a 	sub	r4,zero,r4
    b8f0:	42002034 	orhi	r8,r8,128
    b8f4:	01400e04 	movi	r5,56
    b8f8:	29006716 	blt	r5,r4,ba98 <__adddf3+0x840>
    b8fc:	014007c4 	movi	r5,31
    b900:	29007016 	blt	r5,r4,bac4 <__adddf3+0x86c>
    b904:	01400804 	movi	r5,32
    b908:	290bc83a 	sub	r5,r5,r4
    b90c:	4154983a 	sll	r10,r8,r5
    b910:	890ed83a 	srl	r7,r17,r4
    b914:	894a983a 	sll	r5,r17,r5
    b918:	4108d83a 	srl	r4,r8,r4
    b91c:	51e2b03a 	or	r17,r10,r7
    b920:	280ac03a 	cmpne	r5,r5,zero
    b924:	8962b03a 	or	r17,r17,r5
    b928:	89a3883a 	add	r17,r17,r6
    b92c:	2253883a 	add	r9,r4,r9
    b930:	898d803a 	cmpltu	r6,r17,r6
    b934:	3251883a 	add	r8,r6,r9
    b938:	1021883a 	mov	r16,r2
    b93c:	003ee506 	br	b4d4 <__alt_data_end+0xfffda794>
    b940:	4984b03a 	or	r2,r9,r6
    b944:	103e6326 	beq	r2,zero,b2d4 <__alt_data_end+0xfffda594>
    b948:	8987c83a 	sub	r3,r17,r6
    b94c:	88c9803a 	cmpltu	r4,r17,r3
    b950:	4245c83a 	sub	r2,r8,r9
    b954:	1105c83a 	sub	r2,r2,r4
    b958:	1100202c 	andhi	r4,r2,128
    b95c:	203ebb26 	beq	r4,zero,b44c <__alt_data_end+0xfffda70c>
    b960:	3463c83a 	sub	r17,r6,r17
    b964:	4a07c83a 	sub	r3,r9,r8
    b968:	344d803a 	cmpltu	r6,r6,r17
    b96c:	1991c83a 	sub	r8,r3,r6
    b970:	3825883a 	mov	r18,r7
    b974:	003e5706 	br	b2d4 <__alt_data_end+0xfffda594>
    b978:	4984b03a 	or	r2,r9,r6
    b97c:	10002e26 	beq	r2,zero,ba38 <__adddf3+0x7e0>
    b980:	4004d0fa 	srli	r2,r8,3
    b984:	8822d0fa 	srli	r17,r17,3
    b988:	4010977a 	slli	r8,r8,29
    b98c:	10c0022c 	andhi	r3,r2,8
    b990:	4462b03a 	or	r17,r8,r17
    b994:	18000826 	beq	r3,zero,b9b8 <__adddf3+0x760>
    b998:	4808d0fa 	srli	r4,r9,3
    b99c:	20c0022c 	andhi	r3,r4,8
    b9a0:	1800051e 	bne	r3,zero,b9b8 <__adddf3+0x760>
    b9a4:	300cd0fa 	srli	r6,r6,3
    b9a8:	4806977a 	slli	r3,r9,29
    b9ac:	2005883a 	mov	r2,r4
    b9b0:	3825883a 	mov	r18,r7
    b9b4:	19a2b03a 	or	r17,r3,r6
    b9b8:	8810d77a 	srli	r8,r17,29
    b9bc:	100490fa 	slli	r2,r2,3
    b9c0:	882290fa 	slli	r17,r17,3
    b9c4:	0401ffc4 	movi	r16,2047
    b9c8:	4090b03a 	or	r8,r8,r2
    b9cc:	003e4106 	br	b2d4 <__alt_data_end+0xfffda594>
    b9d0:	0141ffc4 	movi	r5,2047
    b9d4:	117fc71e 	bne	r2,r5,b8f4 <__alt_data_end+0xfffdabb4>
    b9d8:	4811883a 	mov	r8,r9
    b9dc:	3023883a 	mov	r17,r6
    b9e0:	1021883a 	mov	r16,r2
    b9e4:	003e3b06 	br	b2d4 <__alt_data_end+0xfffda594>
    b9e8:	10002f26 	beq	r2,zero,baa8 <__adddf3+0x850>
    b9ec:	4984b03a 	or	r2,r9,r6
    b9f0:	10001126 	beq	r2,zero,ba38 <__adddf3+0x7e0>
    b9f4:	4004d0fa 	srli	r2,r8,3
    b9f8:	8822d0fa 	srli	r17,r17,3
    b9fc:	4010977a 	slli	r8,r8,29
    ba00:	10c0022c 	andhi	r3,r2,8
    ba04:	4462b03a 	or	r17,r8,r17
    ba08:	183feb26 	beq	r3,zero,b9b8 <__alt_data_end+0xfffdac78>
    ba0c:	4808d0fa 	srli	r4,r9,3
    ba10:	20c0022c 	andhi	r3,r4,8
    ba14:	183fe81e 	bne	r3,zero,b9b8 <__alt_data_end+0xfffdac78>
    ba18:	300cd0fa 	srli	r6,r6,3
    ba1c:	4806977a 	slli	r3,r9,29
    ba20:	2005883a 	mov	r2,r4
    ba24:	19a2b03a 	or	r17,r3,r6
    ba28:	003fe306 	br	b9b8 <__alt_data_end+0xfffdac78>
    ba2c:	0011883a 	mov	r8,zero
    ba30:	0005883a 	mov	r2,zero
    ba34:	003e3f06 	br	b334 <__alt_data_end+0xfffda5f4>
    ba38:	0401ffc4 	movi	r16,2047
    ba3c:	003e2506 	br	b2d4 <__alt_data_end+0xfffda594>
    ba40:	0013883a 	mov	r9,zero
    ba44:	003f8406 	br	b858 <__alt_data_end+0xfffdab18>
    ba48:	0005883a 	mov	r2,zero
    ba4c:	0007883a 	mov	r3,zero
    ba50:	003e8906 	br	b478 <__alt_data_end+0xfffda738>
    ba54:	197ff804 	addi	r5,r3,-32
    ba58:	01000804 	movi	r4,32
    ba5c:	414ad83a 	srl	r5,r8,r5
    ba60:	19002426 	beq	r3,r4,baf4 <__adddf3+0x89c>
    ba64:	01001004 	movi	r4,64
    ba68:	20c7c83a 	sub	r3,r4,r3
    ba6c:	40c6983a 	sll	r3,r8,r3
    ba70:	1c46b03a 	or	r3,r3,r17
    ba74:	1806c03a 	cmpne	r3,r3,zero
    ba78:	28e2b03a 	or	r17,r5,r3
    ba7c:	0007883a 	mov	r3,zero
    ba80:	003f2306 	br	b710 <__alt_data_end+0xfffda9d0>
    ba84:	0007883a 	mov	r3,zero
    ba88:	5811883a 	mov	r8,r11
    ba8c:	00bfffc4 	movi	r2,-1
    ba90:	0401ffc4 	movi	r16,2047
    ba94:	003e7806 	br	b478 <__alt_data_end+0xfffda738>
    ba98:	4462b03a 	or	r17,r8,r17
    ba9c:	8822c03a 	cmpne	r17,r17,zero
    baa0:	0009883a 	mov	r4,zero
    baa4:	003fa006 	br	b928 <__alt_data_end+0xfffdabe8>
    baa8:	4811883a 	mov	r8,r9
    baac:	3023883a 	mov	r17,r6
    bab0:	0401ffc4 	movi	r16,2047
    bab4:	003e0706 	br	b2d4 <__alt_data_end+0xfffda594>
    bab8:	4811883a 	mov	r8,r9
    babc:	3023883a 	mov	r17,r6
    bac0:	003e0406 	br	b2d4 <__alt_data_end+0xfffda594>
    bac4:	21fff804 	addi	r7,r4,-32
    bac8:	01400804 	movi	r5,32
    bacc:	41ced83a 	srl	r7,r8,r7
    bad0:	21400a26 	beq	r4,r5,bafc <__adddf3+0x8a4>
    bad4:	01401004 	movi	r5,64
    bad8:	2909c83a 	sub	r4,r5,r4
    badc:	4108983a 	sll	r4,r8,r4
    bae0:	2448b03a 	or	r4,r4,r17
    bae4:	2008c03a 	cmpne	r4,r4,zero
    bae8:	3922b03a 	or	r17,r7,r4
    baec:	0009883a 	mov	r4,zero
    baf0:	003f8d06 	br	b928 <__alt_data_end+0xfffdabe8>
    baf4:	0007883a 	mov	r3,zero
    baf8:	003fdd06 	br	ba70 <__alt_data_end+0xfffdad30>
    bafc:	0009883a 	mov	r4,zero
    bb00:	003ff706 	br	bae0 <__alt_data_end+0xfffdada0>

0000bb04 <__divdf3>:
    bb04:	defff004 	addi	sp,sp,-64
    bb08:	dc800815 	stw	r18,32(sp)
    bb0c:	2824d53a 	srli	r18,r5,20
    bb10:	dd800c15 	stw	r22,48(sp)
    bb14:	282cd7fa 	srli	r22,r5,31
    bb18:	dc000615 	stw	r16,24(sp)
    bb1c:	04000434 	movhi	r16,16
    bb20:	843fffc4 	addi	r16,r16,-1
    bb24:	dfc00f15 	stw	ra,60(sp)
    bb28:	df000e15 	stw	fp,56(sp)
    bb2c:	ddc00d15 	stw	r23,52(sp)
    bb30:	dd400b15 	stw	r21,44(sp)
    bb34:	dd000a15 	stw	r20,40(sp)
    bb38:	dcc00915 	stw	r19,36(sp)
    bb3c:	dc400715 	stw	r17,28(sp)
    bb40:	9481ffcc 	andi	r18,r18,2047
    bb44:	2c20703a 	and	r16,r5,r16
    bb48:	b2003fcc 	andi	r8,r22,255
    bb4c:	90006126 	beq	r18,zero,bcd4 <__divdf3+0x1d0>
    bb50:	0081ffc4 	movi	r2,2047
    bb54:	202b883a 	mov	r21,r4
    bb58:	90803726 	beq	r18,r2,bc38 <__divdf3+0x134>
    bb5c:	80800434 	orhi	r2,r16,16
    bb60:	100490fa 	slli	r2,r2,3
    bb64:	2020d77a 	srli	r16,r4,29
    bb68:	202a90fa 	slli	r21,r4,3
    bb6c:	94bf0044 	addi	r18,r18,-1023
    bb70:	80a0b03a 	or	r16,r16,r2
    bb74:	0013883a 	mov	r9,zero
    bb78:	000b883a 	mov	r5,zero
    bb7c:	3806d53a 	srli	r3,r7,20
    bb80:	382ed7fa 	srli	r23,r7,31
    bb84:	04400434 	movhi	r17,16
    bb88:	8c7fffc4 	addi	r17,r17,-1
    bb8c:	18c1ffcc 	andi	r3,r3,2047
    bb90:	3029883a 	mov	r20,r6
    bb94:	3c62703a 	and	r17,r7,r17
    bb98:	bf003fcc 	andi	fp,r23,255
    bb9c:	18006e26 	beq	r3,zero,bd58 <__divdf3+0x254>
    bba0:	0081ffc4 	movi	r2,2047
    bba4:	18806626 	beq	r3,r2,bd40 <__divdf3+0x23c>
    bba8:	88800434 	orhi	r2,r17,16
    bbac:	100490fa 	slli	r2,r2,3
    bbb0:	3022d77a 	srli	r17,r6,29
    bbb4:	302890fa 	slli	r20,r6,3
    bbb8:	18ff0044 	addi	r3,r3,-1023
    bbbc:	88a2b03a 	or	r17,r17,r2
    bbc0:	000f883a 	mov	r7,zero
    bbc4:	b5e6f03a 	xor	r19,r22,r23
    bbc8:	3a4cb03a 	or	r6,r7,r9
    bbcc:	008003c4 	movi	r2,15
    bbd0:	9809883a 	mov	r4,r19
    bbd4:	90c7c83a 	sub	r3,r18,r3
    bbd8:	9cc03fcc 	andi	r19,r19,255
    bbdc:	11809636 	bltu	r2,r6,be38 <__divdf3+0x334>
    bbe0:	300c90ba 	slli	r6,r6,2
    bbe4:	00800074 	movhi	r2,1
    bbe8:	10aefe04 	addi	r2,r2,-17416
    bbec:	308d883a 	add	r6,r6,r2
    bbf0:	30800017 	ldw	r2,0(r6)
    bbf4:	1000683a 	jmp	r2
    bbf8:	0000be38 	rdprs	zero,zero,760
    bbfc:	0000bc70 	cmpltui	zero,zero,753
    bc00:	0000be28 	cmpgeui	zero,zero,760
    bc04:	0000bc64 	muli	zero,zero,753
    bc08:	0000be28 	cmpgeui	zero,zero,760
    bc0c:	0000bdfc 	xorhi	zero,zero,759
    bc10:	0000be28 	cmpgeui	zero,zero,760
    bc14:	0000bc64 	muli	zero,zero,753
    bc18:	0000bc70 	cmpltui	zero,zero,753
    bc1c:	0000bc70 	cmpltui	zero,zero,753
    bc20:	0000bdfc 	xorhi	zero,zero,759
    bc24:	0000bc64 	muli	zero,zero,753
    bc28:	0000bc54 	movui	zero,753
    bc2c:	0000bc54 	movui	zero,753
    bc30:	0000bc54 	movui	zero,753
    bc34:	0000c1c0 	call	c1c <_malloc_r+0xc>
    bc38:	2404b03a 	or	r2,r4,r16
    bc3c:	10006c1e 	bne	r2,zero,bdf0 <__divdf3+0x2ec>
    bc40:	02400204 	movi	r9,8
    bc44:	0021883a 	mov	r16,zero
    bc48:	002b883a 	mov	r21,zero
    bc4c:	01400084 	movi	r5,2
    bc50:	003fca06 	br	bb7c <__alt_data_end+0xfffdae3c>
    bc54:	8023883a 	mov	r17,r16
    bc58:	a829883a 	mov	r20,r21
    bc5c:	4039883a 	mov	fp,r8
    bc60:	280f883a 	mov	r7,r5
    bc64:	00800084 	movi	r2,2
    bc68:	3881601e 	bne	r7,r2,c1ec <__divdf3+0x6e8>
    bc6c:	e027883a 	mov	r19,fp
    bc70:	9900004c 	andi	r4,r19,1
    bc74:	0081ffc4 	movi	r2,2047
    bc78:	0021883a 	mov	r16,zero
    bc7c:	002b883a 	mov	r21,zero
    bc80:	1004953a 	slli	r2,r2,20
    bc84:	20c03fcc 	andi	r3,r4,255
    bc88:	01400434 	movhi	r5,16
    bc8c:	297fffc4 	addi	r5,r5,-1
    bc90:	180697fa 	slli	r3,r3,31
    bc94:	8160703a 	and	r16,r16,r5
    bc98:	80a0b03a 	or	r16,r16,r2
    bc9c:	80c6b03a 	or	r3,r16,r3
    bca0:	a805883a 	mov	r2,r21
    bca4:	dfc00f17 	ldw	ra,60(sp)
    bca8:	df000e17 	ldw	fp,56(sp)
    bcac:	ddc00d17 	ldw	r23,52(sp)
    bcb0:	dd800c17 	ldw	r22,48(sp)
    bcb4:	dd400b17 	ldw	r21,44(sp)
    bcb8:	dd000a17 	ldw	r20,40(sp)
    bcbc:	dcc00917 	ldw	r19,36(sp)
    bcc0:	dc800817 	ldw	r18,32(sp)
    bcc4:	dc400717 	ldw	r17,28(sp)
    bcc8:	dc000617 	ldw	r16,24(sp)
    bccc:	dec01004 	addi	sp,sp,64
    bcd0:	f800283a 	ret
    bcd4:	2404b03a 	or	r2,r4,r16
    bcd8:	2023883a 	mov	r17,r4
    bcdc:	10003f26 	beq	r2,zero,bddc <__divdf3+0x2d8>
    bce0:	80015e26 	beq	r16,zero,c25c <__divdf3+0x758>
    bce4:	8009883a 	mov	r4,r16
    bce8:	d9800215 	stw	r6,8(sp)
    bcec:	d9c00515 	stw	r7,20(sp)
    bcf0:	da000415 	stw	r8,16(sp)
    bcf4:	000da980 	call	da98 <__clzsi2>
    bcf8:	d9800217 	ldw	r6,8(sp)
    bcfc:	d9c00517 	ldw	r7,20(sp)
    bd00:	da000417 	ldw	r8,16(sp)
    bd04:	113ffd44 	addi	r4,r2,-11
    bd08:	00c00704 	movi	r3,28
    bd0c:	19014f16 	blt	r3,r4,c24c <__divdf3+0x748>
    bd10:	00c00744 	movi	r3,29
    bd14:	157ffe04 	addi	r21,r2,-8
    bd18:	1907c83a 	sub	r3,r3,r4
    bd1c:	8560983a 	sll	r16,r16,r21
    bd20:	88c6d83a 	srl	r3,r17,r3
    bd24:	8d6a983a 	sll	r21,r17,r21
    bd28:	1c20b03a 	or	r16,r3,r16
    bd2c:	1080fcc4 	addi	r2,r2,1011
    bd30:	00a5c83a 	sub	r18,zero,r2
    bd34:	0013883a 	mov	r9,zero
    bd38:	000b883a 	mov	r5,zero
    bd3c:	003f8f06 	br	bb7c <__alt_data_end+0xfffdae3c>
    bd40:	3444b03a 	or	r2,r6,r17
    bd44:	1000231e 	bne	r2,zero,bdd4 <__divdf3+0x2d0>
    bd48:	0023883a 	mov	r17,zero
    bd4c:	0029883a 	mov	r20,zero
    bd50:	01c00084 	movi	r7,2
    bd54:	003f9b06 	br	bbc4 <__alt_data_end+0xfffdae84>
    bd58:	3444b03a 	or	r2,r6,r17
    bd5c:	10001926 	beq	r2,zero,bdc4 <__divdf3+0x2c0>
    bd60:	88014b26 	beq	r17,zero,c290 <__divdf3+0x78c>
    bd64:	8809883a 	mov	r4,r17
    bd68:	d9400115 	stw	r5,4(sp)
    bd6c:	d9800215 	stw	r6,8(sp)
    bd70:	da000415 	stw	r8,16(sp)
    bd74:	da400315 	stw	r9,12(sp)
    bd78:	000da980 	call	da98 <__clzsi2>
    bd7c:	d9400117 	ldw	r5,4(sp)
    bd80:	d9800217 	ldw	r6,8(sp)
    bd84:	da000417 	ldw	r8,16(sp)
    bd88:	da400317 	ldw	r9,12(sp)
    bd8c:	113ffd44 	addi	r4,r2,-11
    bd90:	00c00704 	movi	r3,28
    bd94:	19013a16 	blt	r3,r4,c280 <__divdf3+0x77c>
    bd98:	00c00744 	movi	r3,29
    bd9c:	153ffe04 	addi	r20,r2,-8
    bda0:	1907c83a 	sub	r3,r3,r4
    bda4:	8d22983a 	sll	r17,r17,r20
    bda8:	30c6d83a 	srl	r3,r6,r3
    bdac:	3528983a 	sll	r20,r6,r20
    bdb0:	1c62b03a 	or	r17,r3,r17
    bdb4:	1080fcc4 	addi	r2,r2,1011
    bdb8:	0087c83a 	sub	r3,zero,r2
    bdbc:	000f883a 	mov	r7,zero
    bdc0:	003f8006 	br	bbc4 <__alt_data_end+0xfffdae84>
    bdc4:	0023883a 	mov	r17,zero
    bdc8:	0029883a 	mov	r20,zero
    bdcc:	01c00044 	movi	r7,1
    bdd0:	003f7c06 	br	bbc4 <__alt_data_end+0xfffdae84>
    bdd4:	01c000c4 	movi	r7,3
    bdd8:	003f7a06 	br	bbc4 <__alt_data_end+0xfffdae84>
    bddc:	02400104 	movi	r9,4
    bde0:	0021883a 	mov	r16,zero
    bde4:	002b883a 	mov	r21,zero
    bde8:	01400044 	movi	r5,1
    bdec:	003f6306 	br	bb7c <__alt_data_end+0xfffdae3c>
    bdf0:	02400304 	movi	r9,12
    bdf4:	014000c4 	movi	r5,3
    bdf8:	003f6006 	br	bb7c <__alt_data_end+0xfffdae3c>
    bdfc:	04000434 	movhi	r16,16
    be00:	0009883a 	mov	r4,zero
    be04:	843fffc4 	addi	r16,r16,-1
    be08:	057fffc4 	movi	r21,-1
    be0c:	0081ffc4 	movi	r2,2047
    be10:	003f9b06 	br	bc80 <__alt_data_end+0xfffdaf40>
    be14:	00c00044 	movi	r3,1
    be18:	1887c83a 	sub	r3,r3,r2
    be1c:	01000e04 	movi	r4,56
    be20:	20c1530e 	bge	r4,r3,c370 <__divdf3+0x86c>
    be24:	9900004c 	andi	r4,r19,1
    be28:	0005883a 	mov	r2,zero
    be2c:	0021883a 	mov	r16,zero
    be30:	002b883a 	mov	r21,zero
    be34:	003f9206 	br	bc80 <__alt_data_end+0xfffdaf40>
    be38:	8c012e36 	bltu	r17,r16,c2f4 <__divdf3+0x7f0>
    be3c:	84412c26 	beq	r16,r17,c2f0 <__divdf3+0x7ec>
    be40:	a82f883a 	mov	r23,r21
    be44:	18ffffc4 	addi	r3,r3,-1
    be48:	002b883a 	mov	r21,zero
    be4c:	a004d63a 	srli	r2,r20,24
    be50:	8822923a 	slli	r17,r17,8
    be54:	a028923a 	slli	r20,r20,8
    be58:	8009883a 	mov	r4,r16
    be5c:	88acb03a 	or	r22,r17,r2
    be60:	dd000015 	stw	r20,0(sp)
    be64:	b028d43a 	srli	r20,r22,16
    be68:	d8c00215 	stw	r3,8(sp)
    be6c:	b4bfffcc 	andi	r18,r22,65535
    be70:	a00b883a 	mov	r5,r20
    be74:	0000b040 	call	b04 <__udivsi3>
    be78:	100b883a 	mov	r5,r2
    be7c:	9009883a 	mov	r4,r18
    be80:	1023883a 	mov	r17,r2
    be84:	0000bc00 	call	bc0 <__mulsi3>
    be88:	8009883a 	mov	r4,r16
    be8c:	a00b883a 	mov	r5,r20
    be90:	1039883a 	mov	fp,r2
    be94:	0000b680 	call	b68 <__umodsi3>
    be98:	1004943a 	slli	r2,r2,16
    be9c:	b808d43a 	srli	r4,r23,16
    bea0:	d8c00217 	ldw	r3,8(sp)
    bea4:	2084b03a 	or	r2,r4,r2
    bea8:	1700062e 	bgeu	r2,fp,bec4 <__divdf3+0x3c0>
    beac:	1585883a 	add	r2,r2,r22
    beb0:	893fffc4 	addi	r4,r17,-1
    beb4:	15811d36 	bltu	r2,r22,c32c <__divdf3+0x828>
    beb8:	17011c2e 	bgeu	r2,fp,c32c <__divdf3+0x828>
    bebc:	8c7fff84 	addi	r17,r17,-2
    bec0:	1585883a 	add	r2,r2,r22
    bec4:	1739c83a 	sub	fp,r2,fp
    bec8:	a00b883a 	mov	r5,r20
    becc:	e009883a 	mov	r4,fp
    bed0:	d8c00215 	stw	r3,8(sp)
    bed4:	0000b040 	call	b04 <__udivsi3>
    bed8:	100b883a 	mov	r5,r2
    bedc:	9009883a 	mov	r4,r18
    bee0:	1021883a 	mov	r16,r2
    bee4:	0000bc00 	call	bc0 <__mulsi3>
    bee8:	a00b883a 	mov	r5,r20
    beec:	e009883a 	mov	r4,fp
    bef0:	d8800415 	stw	r2,16(sp)
    bef4:	0000b680 	call	b68 <__umodsi3>
    bef8:	1004943a 	slli	r2,r2,16
    befc:	da000417 	ldw	r8,16(sp)
    bf00:	bdffffcc 	andi	r23,r23,65535
    bf04:	b884b03a 	or	r2,r23,r2
    bf08:	d8c00217 	ldw	r3,8(sp)
    bf0c:	1200062e 	bgeu	r2,r8,bf28 <__divdf3+0x424>
    bf10:	1585883a 	add	r2,r2,r22
    bf14:	813fffc4 	addi	r4,r16,-1
    bf18:	15810236 	bltu	r2,r22,c324 <__divdf3+0x820>
    bf1c:	1201012e 	bgeu	r2,r8,c324 <__divdf3+0x820>
    bf20:	843fff84 	addi	r16,r16,-2
    bf24:	1585883a 	add	r2,r2,r22
    bf28:	8822943a 	slli	r17,r17,16
    bf2c:	d9800017 	ldw	r6,0(sp)
    bf30:	1211c83a 	sub	r8,r2,r8
    bf34:	8c22b03a 	or	r17,r17,r16
    bf38:	373fffcc 	andi	fp,r6,65535
    bf3c:	8abfffcc 	andi	r10,r17,65535
    bf40:	8820d43a 	srli	r16,r17,16
    bf44:	5009883a 	mov	r4,r10
    bf48:	e00b883a 	mov	r5,fp
    bf4c:	302ed43a 	srli	r23,r6,16
    bf50:	d8c00215 	stw	r3,8(sp)
    bf54:	da000415 	stw	r8,16(sp)
    bf58:	da800115 	stw	r10,4(sp)
    bf5c:	0000bc00 	call	bc0 <__mulsi3>
    bf60:	800b883a 	mov	r5,r16
    bf64:	e009883a 	mov	r4,fp
    bf68:	d8800515 	stw	r2,20(sp)
    bf6c:	0000bc00 	call	bc0 <__mulsi3>
    bf70:	8009883a 	mov	r4,r16
    bf74:	b80b883a 	mov	r5,r23
    bf78:	d8800315 	stw	r2,12(sp)
    bf7c:	0000bc00 	call	bc0 <__mulsi3>
    bf80:	da800117 	ldw	r10,4(sp)
    bf84:	b80b883a 	mov	r5,r23
    bf88:	1021883a 	mov	r16,r2
    bf8c:	5009883a 	mov	r4,r10
    bf90:	0000bc00 	call	bc0 <__mulsi3>
    bf94:	d9c00517 	ldw	r7,20(sp)
    bf98:	da400317 	ldw	r9,12(sp)
    bf9c:	d8c00217 	ldw	r3,8(sp)
    bfa0:	3808d43a 	srli	r4,r7,16
    bfa4:	1245883a 	add	r2,r2,r9
    bfa8:	da000417 	ldw	r8,16(sp)
    bfac:	2085883a 	add	r2,r4,r2
    bfb0:	1240022e 	bgeu	r2,r9,bfbc <__divdf3+0x4b8>
    bfb4:	01000074 	movhi	r4,1
    bfb8:	8121883a 	add	r16,r16,r4
    bfbc:	1008d43a 	srli	r4,r2,16
    bfc0:	1004943a 	slli	r2,r2,16
    bfc4:	39ffffcc 	andi	r7,r7,65535
    bfc8:	2409883a 	add	r4,r4,r16
    bfcc:	11c5883a 	add	r2,r2,r7
    bfd0:	4100bb36 	bltu	r8,r4,c2c0 <__divdf3+0x7bc>
    bfd4:	4100d726 	beq	r8,r4,c334 <__divdf3+0x830>
    bfd8:	4109c83a 	sub	r4,r8,r4
    bfdc:	a8a1c83a 	sub	r16,r21,r2
    bfe0:	ac2b803a 	cmpltu	r21,r21,r16
    bfe4:	256bc83a 	sub	r21,r4,r21
    bfe8:	b540d926 	beq	r22,r21,c350 <__divdf3+0x84c>
    bfec:	a00b883a 	mov	r5,r20
    bff0:	a809883a 	mov	r4,r21
    bff4:	d8c00215 	stw	r3,8(sp)
    bff8:	0000b040 	call	b04 <__udivsi3>
    bffc:	100b883a 	mov	r5,r2
    c000:	9009883a 	mov	r4,r18
    c004:	d8800515 	stw	r2,20(sp)
    c008:	0000bc00 	call	bc0 <__mulsi3>
    c00c:	a809883a 	mov	r4,r21
    c010:	a00b883a 	mov	r5,r20
    c014:	d8800415 	stw	r2,16(sp)
    c018:	0000b680 	call	b68 <__umodsi3>
    c01c:	1004943a 	slli	r2,r2,16
    c020:	8008d43a 	srli	r4,r16,16
    c024:	da000417 	ldw	r8,16(sp)
    c028:	d8c00217 	ldw	r3,8(sp)
    c02c:	2084b03a 	or	r2,r4,r2
    c030:	d9c00517 	ldw	r7,20(sp)
    c034:	1200062e 	bgeu	r2,r8,c050 <__divdf3+0x54c>
    c038:	1585883a 	add	r2,r2,r22
    c03c:	393fffc4 	addi	r4,r7,-1
    c040:	1580c536 	bltu	r2,r22,c358 <__divdf3+0x854>
    c044:	1200c42e 	bgeu	r2,r8,c358 <__divdf3+0x854>
    c048:	39ffff84 	addi	r7,r7,-2
    c04c:	1585883a 	add	r2,r2,r22
    c050:	122bc83a 	sub	r21,r2,r8
    c054:	a00b883a 	mov	r5,r20
    c058:	a809883a 	mov	r4,r21
    c05c:	d8c00215 	stw	r3,8(sp)
    c060:	d9c00515 	stw	r7,20(sp)
    c064:	0000b040 	call	b04 <__udivsi3>
    c068:	9009883a 	mov	r4,r18
    c06c:	100b883a 	mov	r5,r2
    c070:	d8800415 	stw	r2,16(sp)
    c074:	0000bc00 	call	bc0 <__mulsi3>
    c078:	a809883a 	mov	r4,r21
    c07c:	a00b883a 	mov	r5,r20
    c080:	1025883a 	mov	r18,r2
    c084:	0000b680 	call	b68 <__umodsi3>
    c088:	1004943a 	slli	r2,r2,16
    c08c:	813fffcc 	andi	r4,r16,65535
    c090:	d8c00217 	ldw	r3,8(sp)
    c094:	20a0b03a 	or	r16,r4,r2
    c098:	d9c00517 	ldw	r7,20(sp)
    c09c:	da000417 	ldw	r8,16(sp)
    c0a0:	8480062e 	bgeu	r16,r18,c0bc <__divdf3+0x5b8>
    c0a4:	85a1883a 	add	r16,r16,r22
    c0a8:	40bfffc4 	addi	r2,r8,-1
    c0ac:	8580ac36 	bltu	r16,r22,c360 <__divdf3+0x85c>
    c0b0:	8480ab2e 	bgeu	r16,r18,c360 <__divdf3+0x85c>
    c0b4:	423fff84 	addi	r8,r8,-2
    c0b8:	85a1883a 	add	r16,r16,r22
    c0bc:	3804943a 	slli	r2,r7,16
    c0c0:	84a1c83a 	sub	r16,r16,r18
    c0c4:	e009883a 	mov	r4,fp
    c0c8:	1228b03a 	or	r20,r2,r8
    c0cc:	a1ffffcc 	andi	r7,r20,65535
    c0d0:	a024d43a 	srli	r18,r20,16
    c0d4:	380b883a 	mov	r5,r7
    c0d8:	d8c00215 	stw	r3,8(sp)
    c0dc:	d9c00515 	stw	r7,20(sp)
    c0e0:	0000bc00 	call	bc0 <__mulsi3>
    c0e4:	900b883a 	mov	r5,r18
    c0e8:	e009883a 	mov	r4,fp
    c0ec:	102b883a 	mov	r21,r2
    c0f0:	0000bc00 	call	bc0 <__mulsi3>
    c0f4:	900b883a 	mov	r5,r18
    c0f8:	b809883a 	mov	r4,r23
    c0fc:	1039883a 	mov	fp,r2
    c100:	0000bc00 	call	bc0 <__mulsi3>
    c104:	d9c00517 	ldw	r7,20(sp)
    c108:	b80b883a 	mov	r5,r23
    c10c:	1025883a 	mov	r18,r2
    c110:	3809883a 	mov	r4,r7
    c114:	0000bc00 	call	bc0 <__mulsi3>
    c118:	a808d43a 	srli	r4,r21,16
    c11c:	1705883a 	add	r2,r2,fp
    c120:	d8c00217 	ldw	r3,8(sp)
    c124:	2085883a 	add	r2,r4,r2
    c128:	1700022e 	bgeu	r2,fp,c134 <__divdf3+0x630>
    c12c:	01000074 	movhi	r4,1
    c130:	9125883a 	add	r18,r18,r4
    c134:	1008d43a 	srli	r4,r2,16
    c138:	1004943a 	slli	r2,r2,16
    c13c:	ad7fffcc 	andi	r21,r21,65535
    c140:	2489883a 	add	r4,r4,r18
    c144:	1545883a 	add	r2,r2,r21
    c148:	81003836 	bltu	r16,r4,c22c <__divdf3+0x728>
    c14c:	81003626 	beq	r16,r4,c228 <__divdf3+0x724>
    c150:	a5000054 	ori	r20,r20,1
    c154:	1880ffc4 	addi	r2,r3,1023
    c158:	00bf2e0e 	bge	zero,r2,be14 <__alt_data_end+0xfffdb0d4>
    c15c:	a10001cc 	andi	r4,r20,7
    c160:	20000726 	beq	r4,zero,c180 <__divdf3+0x67c>
    c164:	a10003cc 	andi	r4,r20,15
    c168:	01400104 	movi	r5,4
    c16c:	21400426 	beq	r4,r5,c180 <__divdf3+0x67c>
    c170:	a149883a 	add	r4,r20,r5
    c174:	2529803a 	cmpltu	r20,r4,r20
    c178:	8d23883a 	add	r17,r17,r20
    c17c:	2029883a 	mov	r20,r4
    c180:	8900402c 	andhi	r4,r17,256
    c184:	20000426 	beq	r4,zero,c198 <__divdf3+0x694>
    c188:	18810004 	addi	r2,r3,1024
    c18c:	00ffc034 	movhi	r3,65280
    c190:	18ffffc4 	addi	r3,r3,-1
    c194:	88e2703a 	and	r17,r17,r3
    c198:	00c1ff84 	movi	r3,2046
    c19c:	18beb416 	blt	r3,r2,bc70 <__alt_data_end+0xfffdaf30>
    c1a0:	a028d0fa 	srli	r20,r20,3
    c1a4:	882a977a 	slli	r21,r17,29
    c1a8:	8820927a 	slli	r16,r17,9
    c1ac:	1081ffcc 	andi	r2,r2,2047
    c1b0:	ad2ab03a 	or	r21,r21,r20
    c1b4:	8020d33a 	srli	r16,r16,12
    c1b8:	9900004c 	andi	r4,r19,1
    c1bc:	003eb006 	br	bc80 <__alt_data_end+0xfffdaf40>
    c1c0:	8080022c 	andhi	r2,r16,8
    c1c4:	10001226 	beq	r2,zero,c210 <__divdf3+0x70c>
    c1c8:	8880022c 	andhi	r2,r17,8
    c1cc:	1000101e 	bne	r2,zero,c210 <__divdf3+0x70c>
    c1d0:	00800434 	movhi	r2,16
    c1d4:	8c000234 	orhi	r16,r17,8
    c1d8:	10bfffc4 	addi	r2,r2,-1
    c1dc:	b809883a 	mov	r4,r23
    c1e0:	80a0703a 	and	r16,r16,r2
    c1e4:	a02b883a 	mov	r21,r20
    c1e8:	003f0806 	br	be0c <__alt_data_end+0xfffdb0cc>
    c1ec:	008000c4 	movi	r2,3
    c1f0:	3880b126 	beq	r7,r2,c4b8 <__divdf3+0x9b4>
    c1f4:	00800044 	movi	r2,1
    c1f8:	38805b1e 	bne	r7,r2,c368 <__divdf3+0x864>
    c1fc:	e009883a 	mov	r4,fp
    c200:	0005883a 	mov	r2,zero
    c204:	0021883a 	mov	r16,zero
    c208:	002b883a 	mov	r21,zero
    c20c:	003e9c06 	br	bc80 <__alt_data_end+0xfffdaf40>
    c210:	00800434 	movhi	r2,16
    c214:	84000234 	orhi	r16,r16,8
    c218:	10bfffc4 	addi	r2,r2,-1
    c21c:	b009883a 	mov	r4,r22
    c220:	80a0703a 	and	r16,r16,r2
    c224:	003ef906 	br	be0c <__alt_data_end+0xfffdb0cc>
    c228:	103fca26 	beq	r2,zero,c154 <__alt_data_end+0xfffdb414>
    c22c:	b421883a 	add	r16,r22,r16
    c230:	a17fffc4 	addi	r5,r20,-1
    c234:	8580422e 	bgeu	r16,r22,c340 <__divdf3+0x83c>
    c238:	2829883a 	mov	r20,r5
    c23c:	813fc41e 	bne	r16,r4,c150 <__alt_data_end+0xfffdb410>
    c240:	d9800017 	ldw	r6,0(sp)
    c244:	30bfc21e 	bne	r6,r2,c150 <__alt_data_end+0xfffdb410>
    c248:	003fc206 	br	c154 <__alt_data_end+0xfffdb414>
    c24c:	143ff604 	addi	r16,r2,-40
    c250:	8c20983a 	sll	r16,r17,r16
    c254:	002b883a 	mov	r21,zero
    c258:	003eb406 	br	bd2c <__alt_data_end+0xfffdafec>
    c25c:	d9800215 	stw	r6,8(sp)
    c260:	d9c00515 	stw	r7,20(sp)
    c264:	da000415 	stw	r8,16(sp)
    c268:	000da980 	call	da98 <__clzsi2>
    c26c:	10800804 	addi	r2,r2,32
    c270:	da000417 	ldw	r8,16(sp)
    c274:	d9c00517 	ldw	r7,20(sp)
    c278:	d9800217 	ldw	r6,8(sp)
    c27c:	003ea106 	br	bd04 <__alt_data_end+0xfffdafc4>
    c280:	147ff604 	addi	r17,r2,-40
    c284:	3462983a 	sll	r17,r6,r17
    c288:	0029883a 	mov	r20,zero
    c28c:	003ec906 	br	bdb4 <__alt_data_end+0xfffdb074>
    c290:	3009883a 	mov	r4,r6
    c294:	d9400115 	stw	r5,4(sp)
    c298:	d9800215 	stw	r6,8(sp)
    c29c:	da000415 	stw	r8,16(sp)
    c2a0:	da400315 	stw	r9,12(sp)
    c2a4:	000da980 	call	da98 <__clzsi2>
    c2a8:	10800804 	addi	r2,r2,32
    c2ac:	da400317 	ldw	r9,12(sp)
    c2b0:	da000417 	ldw	r8,16(sp)
    c2b4:	d9800217 	ldw	r6,8(sp)
    c2b8:	d9400117 	ldw	r5,4(sp)
    c2bc:	003eb306 	br	bd8c <__alt_data_end+0xfffdb04c>
    c2c0:	d9800017 	ldw	r6,0(sp)
    c2c4:	a9ab883a 	add	r21,r21,r6
    c2c8:	a98b803a 	cmpltu	r5,r21,r6
    c2cc:	2d8b883a 	add	r5,r5,r22
    c2d0:	2a11883a 	add	r8,r5,r8
    c2d4:	897fffc4 	addi	r5,r17,-1
    c2d8:	b2000c2e 	bgeu	r22,r8,c30c <__divdf3+0x808>
    c2dc:	41003f36 	bltu	r8,r4,c3dc <__divdf3+0x8d8>
    c2e0:	22006c26 	beq	r4,r8,c494 <__divdf3+0x990>
    c2e4:	4109c83a 	sub	r4,r8,r4
    c2e8:	2823883a 	mov	r17,r5
    c2ec:	003f3b06 	br	bfdc <__alt_data_end+0xfffdb29c>
    c2f0:	ad3ed336 	bltu	r21,r20,be40 <__alt_data_end+0xfffdb100>
    c2f4:	a804d07a 	srli	r2,r21,1
    c2f8:	802e97fa 	slli	r23,r16,31
    c2fc:	a82a97fa 	slli	r21,r21,31
    c300:	8020d07a 	srli	r16,r16,1
    c304:	b8aeb03a 	or	r23,r23,r2
    c308:	003ed006 	br	be4c <__alt_data_end+0xfffdb10c>
    c30c:	b23ff51e 	bne	r22,r8,c2e4 <__alt_data_end+0xfffdb5a4>
    c310:	d9800017 	ldw	r6,0(sp)
    c314:	a9bff12e 	bgeu	r21,r6,c2dc <__alt_data_end+0xfffdb59c>
    c318:	b109c83a 	sub	r4,r22,r4
    c31c:	2823883a 	mov	r17,r5
    c320:	003f2e06 	br	bfdc <__alt_data_end+0xfffdb29c>
    c324:	2021883a 	mov	r16,r4
    c328:	003eff06 	br	bf28 <__alt_data_end+0xfffdb1e8>
    c32c:	2023883a 	mov	r17,r4
    c330:	003ee406 	br	bec4 <__alt_data_end+0xfffdb184>
    c334:	a8bfe236 	bltu	r21,r2,c2c0 <__alt_data_end+0xfffdb580>
    c338:	0009883a 	mov	r4,zero
    c33c:	003f2706 	br	bfdc <__alt_data_end+0xfffdb29c>
    c340:	81002d36 	bltu	r16,r4,c3f8 <__divdf3+0x8f4>
    c344:	24005626 	beq	r4,r16,c4a0 <__divdf3+0x99c>
    c348:	2829883a 	mov	r20,r5
    c34c:	003f8006 	br	c150 <__alt_data_end+0xfffdb410>
    c350:	053fffc4 	movi	r20,-1
    c354:	003f7f06 	br	c154 <__alt_data_end+0xfffdb414>
    c358:	200f883a 	mov	r7,r4
    c35c:	003f3c06 	br	c050 <__alt_data_end+0xfffdb310>
    c360:	1011883a 	mov	r8,r2
    c364:	003f5506 	br	c0bc <__alt_data_end+0xfffdb37c>
    c368:	e027883a 	mov	r19,fp
    c36c:	003f7906 	br	c154 <__alt_data_end+0xfffdb414>
    c370:	010007c4 	movi	r4,31
    c374:	20c02816 	blt	r4,r3,c418 <__divdf3+0x914>
    c378:	00800804 	movi	r2,32
    c37c:	10c5c83a 	sub	r2,r2,r3
    c380:	888a983a 	sll	r5,r17,r2
    c384:	a0c8d83a 	srl	r4,r20,r3
    c388:	a084983a 	sll	r2,r20,r2
    c38c:	88e2d83a 	srl	r17,r17,r3
    c390:	2906b03a 	or	r3,r5,r4
    c394:	1004c03a 	cmpne	r2,r2,zero
    c398:	1886b03a 	or	r3,r3,r2
    c39c:	188001cc 	andi	r2,r3,7
    c3a0:	10000726 	beq	r2,zero,c3c0 <__divdf3+0x8bc>
    c3a4:	188003cc 	andi	r2,r3,15
    c3a8:	01000104 	movi	r4,4
    c3ac:	11000426 	beq	r2,r4,c3c0 <__divdf3+0x8bc>
    c3b0:	1805883a 	mov	r2,r3
    c3b4:	10c00104 	addi	r3,r2,4
    c3b8:	1885803a 	cmpltu	r2,r3,r2
    c3bc:	88a3883a 	add	r17,r17,r2
    c3c0:	8880202c 	andhi	r2,r17,128
    c3c4:	10002926 	beq	r2,zero,c46c <__divdf3+0x968>
    c3c8:	9900004c 	andi	r4,r19,1
    c3cc:	00800044 	movi	r2,1
    c3d0:	0021883a 	mov	r16,zero
    c3d4:	002b883a 	mov	r21,zero
    c3d8:	003e2906 	br	bc80 <__alt_data_end+0xfffdaf40>
    c3dc:	d9800017 	ldw	r6,0(sp)
    c3e0:	8c7fff84 	addi	r17,r17,-2
    c3e4:	a9ab883a 	add	r21,r21,r6
    c3e8:	a98b803a 	cmpltu	r5,r21,r6
    c3ec:	2d8b883a 	add	r5,r5,r22
    c3f0:	2a11883a 	add	r8,r5,r8
    c3f4:	003ef806 	br	bfd8 <__alt_data_end+0xfffdb298>
    c3f8:	d9800017 	ldw	r6,0(sp)
    c3fc:	318f883a 	add	r7,r6,r6
    c400:	398b803a 	cmpltu	r5,r7,r6
    c404:	2d8d883a 	add	r6,r5,r22
    c408:	81a1883a 	add	r16,r16,r6
    c40c:	a17fff84 	addi	r5,r20,-2
    c410:	d9c00015 	stw	r7,0(sp)
    c414:	003f8806 	br	c238 <__alt_data_end+0xfffdb4f8>
    c418:	013ff844 	movi	r4,-31
    c41c:	2085c83a 	sub	r2,r4,r2
    c420:	8888d83a 	srl	r4,r17,r2
    c424:	00800804 	movi	r2,32
    c428:	18802126 	beq	r3,r2,c4b0 <__divdf3+0x9ac>
    c42c:	04001004 	movi	r16,64
    c430:	80c7c83a 	sub	r3,r16,r3
    c434:	88e0983a 	sll	r16,r17,r3
    c438:	8504b03a 	or	r2,r16,r20
    c43c:	1004c03a 	cmpne	r2,r2,zero
    c440:	2084b03a 	or	r2,r4,r2
    c444:	144001cc 	andi	r17,r2,7
    c448:	88000d1e 	bne	r17,zero,c480 <__divdf3+0x97c>
    c44c:	0021883a 	mov	r16,zero
    c450:	102ad0fa 	srli	r21,r2,3
    c454:	9900004c 	andi	r4,r19,1
    c458:	0005883a 	mov	r2,zero
    c45c:	ac6ab03a 	or	r21,r21,r17
    c460:	003e0706 	br	bc80 <__alt_data_end+0xfffdaf40>
    c464:	1007883a 	mov	r3,r2
    c468:	0023883a 	mov	r17,zero
    c46c:	8820927a 	slli	r16,r17,9
    c470:	1805883a 	mov	r2,r3
    c474:	8822977a 	slli	r17,r17,29
    c478:	8020d33a 	srli	r16,r16,12
    c47c:	003ff406 	br	c450 <__alt_data_end+0xfffdb710>
    c480:	10c003cc 	andi	r3,r2,15
    c484:	01000104 	movi	r4,4
    c488:	193ff626 	beq	r3,r4,c464 <__alt_data_end+0xfffdb724>
    c48c:	0023883a 	mov	r17,zero
    c490:	003fc806 	br	c3b4 <__alt_data_end+0xfffdb674>
    c494:	a8bfd136 	bltu	r21,r2,c3dc <__alt_data_end+0xfffdb69c>
    c498:	2823883a 	mov	r17,r5
    c49c:	003fa606 	br	c338 <__alt_data_end+0xfffdb5f8>
    c4a0:	d9800017 	ldw	r6,0(sp)
    c4a4:	30bfd436 	bltu	r6,r2,c3f8 <__alt_data_end+0xfffdb6b8>
    c4a8:	2829883a 	mov	r20,r5
    c4ac:	003f6406 	br	c240 <__alt_data_end+0xfffdb500>
    c4b0:	0021883a 	mov	r16,zero
    c4b4:	003fe006 	br	c438 <__alt_data_end+0xfffdb6f8>
    c4b8:	00800434 	movhi	r2,16
    c4bc:	8c000234 	orhi	r16,r17,8
    c4c0:	10bfffc4 	addi	r2,r2,-1
    c4c4:	e009883a 	mov	r4,fp
    c4c8:	80a0703a 	and	r16,r16,r2
    c4cc:	a02b883a 	mov	r21,r20
    c4d0:	003e4e06 	br	be0c <__alt_data_end+0xfffdb0cc>

0000c4d4 <__eqdf2>:
    c4d4:	2804d53a 	srli	r2,r5,20
    c4d8:	3806d53a 	srli	r3,r7,20
    c4dc:	02000434 	movhi	r8,16
    c4e0:	423fffc4 	addi	r8,r8,-1
    c4e4:	1081ffcc 	andi	r2,r2,2047
    c4e8:	0281ffc4 	movi	r10,2047
    c4ec:	2a12703a 	and	r9,r5,r8
    c4f0:	18c1ffcc 	andi	r3,r3,2047
    c4f4:	3a10703a 	and	r8,r7,r8
    c4f8:	280ad7fa 	srli	r5,r5,31
    c4fc:	380ed7fa 	srli	r7,r7,31
    c500:	12801026 	beq	r2,r10,c544 <__eqdf2+0x70>
    c504:	0281ffc4 	movi	r10,2047
    c508:	1a800a26 	beq	r3,r10,c534 <__eqdf2+0x60>
    c50c:	10c00226 	beq	r2,r3,c518 <__eqdf2+0x44>
    c510:	00800044 	movi	r2,1
    c514:	f800283a 	ret
    c518:	4a3ffd1e 	bne	r9,r8,c510 <__alt_data_end+0xfffdb7d0>
    c51c:	21bffc1e 	bne	r4,r6,c510 <__alt_data_end+0xfffdb7d0>
    c520:	29c00c26 	beq	r5,r7,c554 <__eqdf2+0x80>
    c524:	103ffa1e 	bne	r2,zero,c510 <__alt_data_end+0xfffdb7d0>
    c528:	2244b03a 	or	r2,r4,r9
    c52c:	1004c03a 	cmpne	r2,r2,zero
    c530:	f800283a 	ret
    c534:	3214b03a 	or	r10,r6,r8
    c538:	503ff426 	beq	r10,zero,c50c <__alt_data_end+0xfffdb7cc>
    c53c:	00800044 	movi	r2,1
    c540:	f800283a 	ret
    c544:	2254b03a 	or	r10,r4,r9
    c548:	503fee26 	beq	r10,zero,c504 <__alt_data_end+0xfffdb7c4>
    c54c:	00800044 	movi	r2,1
    c550:	f800283a 	ret
    c554:	0005883a 	mov	r2,zero
    c558:	f800283a 	ret

0000c55c <__gedf2>:
    c55c:	2804d53a 	srli	r2,r5,20
    c560:	3806d53a 	srli	r3,r7,20
    c564:	02000434 	movhi	r8,16
    c568:	423fffc4 	addi	r8,r8,-1
    c56c:	1081ffcc 	andi	r2,r2,2047
    c570:	0241ffc4 	movi	r9,2047
    c574:	2a14703a 	and	r10,r5,r8
    c578:	18c1ffcc 	andi	r3,r3,2047
    c57c:	3a10703a 	and	r8,r7,r8
    c580:	280ad7fa 	srli	r5,r5,31
    c584:	380ed7fa 	srli	r7,r7,31
    c588:	12401d26 	beq	r2,r9,c600 <__gedf2+0xa4>
    c58c:	0241ffc4 	movi	r9,2047
    c590:	1a401226 	beq	r3,r9,c5dc <__gedf2+0x80>
    c594:	1000081e 	bne	r2,zero,c5b8 <__gedf2+0x5c>
    c598:	2296b03a 	or	r11,r4,r10
    c59c:	5813003a 	cmpeq	r9,r11,zero
    c5a0:	1800091e 	bne	r3,zero,c5c8 <__gedf2+0x6c>
    c5a4:	3218b03a 	or	r12,r6,r8
    c5a8:	6000071e 	bne	r12,zero,c5c8 <__gedf2+0x6c>
    c5ac:	0005883a 	mov	r2,zero
    c5b0:	5800101e 	bne	r11,zero,c5f4 <__gedf2+0x98>
    c5b4:	f800283a 	ret
    c5b8:	18000c1e 	bne	r3,zero,c5ec <__gedf2+0x90>
    c5bc:	3212b03a 	or	r9,r6,r8
    c5c0:	48000c26 	beq	r9,zero,c5f4 <__gedf2+0x98>
    c5c4:	0013883a 	mov	r9,zero
    c5c8:	39c03fcc 	andi	r7,r7,255
    c5cc:	48000826 	beq	r9,zero,c5f0 <__gedf2+0x94>
    c5d0:	38000926 	beq	r7,zero,c5f8 <__gedf2+0x9c>
    c5d4:	00800044 	movi	r2,1
    c5d8:	f800283a 	ret
    c5dc:	3212b03a 	or	r9,r6,r8
    c5e0:	483fec26 	beq	r9,zero,c594 <__alt_data_end+0xfffdb854>
    c5e4:	00bfff84 	movi	r2,-2
    c5e8:	f800283a 	ret
    c5ec:	39c03fcc 	andi	r7,r7,255
    c5f0:	29c00626 	beq	r5,r7,c60c <__gedf2+0xb0>
    c5f4:	283ff726 	beq	r5,zero,c5d4 <__alt_data_end+0xfffdb894>
    c5f8:	00bfffc4 	movi	r2,-1
    c5fc:	f800283a 	ret
    c600:	2292b03a 	or	r9,r4,r10
    c604:	483fe126 	beq	r9,zero,c58c <__alt_data_end+0xfffdb84c>
    c608:	003ff606 	br	c5e4 <__alt_data_end+0xfffdb8a4>
    c60c:	18bff916 	blt	r3,r2,c5f4 <__alt_data_end+0xfffdb8b4>
    c610:	10c00316 	blt	r2,r3,c620 <__gedf2+0xc4>
    c614:	42bff736 	bltu	r8,r10,c5f4 <__alt_data_end+0xfffdb8b4>
    c618:	52000326 	beq	r10,r8,c628 <__gedf2+0xcc>
    c61c:	5200042e 	bgeu	r10,r8,c630 <__gedf2+0xd4>
    c620:	283fec1e 	bne	r5,zero,c5d4 <__alt_data_end+0xfffdb894>
    c624:	003ff406 	br	c5f8 <__alt_data_end+0xfffdb8b8>
    c628:	313ff236 	bltu	r6,r4,c5f4 <__alt_data_end+0xfffdb8b4>
    c62c:	21bffc36 	bltu	r4,r6,c620 <__alt_data_end+0xfffdb8e0>
    c630:	0005883a 	mov	r2,zero
    c634:	f800283a 	ret

0000c638 <__ledf2>:
    c638:	2804d53a 	srli	r2,r5,20
    c63c:	3810d53a 	srli	r8,r7,20
    c640:	00c00434 	movhi	r3,16
    c644:	18ffffc4 	addi	r3,r3,-1
    c648:	1081ffcc 	andi	r2,r2,2047
    c64c:	0241ffc4 	movi	r9,2047
    c650:	28d4703a 	and	r10,r5,r3
    c654:	4201ffcc 	andi	r8,r8,2047
    c658:	38c6703a 	and	r3,r7,r3
    c65c:	280ad7fa 	srli	r5,r5,31
    c660:	380ed7fa 	srli	r7,r7,31
    c664:	12401f26 	beq	r2,r9,c6e4 <__ledf2+0xac>
    c668:	0241ffc4 	movi	r9,2047
    c66c:	42401426 	beq	r8,r9,c6c0 <__ledf2+0x88>
    c670:	1000091e 	bne	r2,zero,c698 <__ledf2+0x60>
    c674:	2296b03a 	or	r11,r4,r10
    c678:	5813003a 	cmpeq	r9,r11,zero
    c67c:	29403fcc 	andi	r5,r5,255
    c680:	40000a1e 	bne	r8,zero,c6ac <__ledf2+0x74>
    c684:	30d8b03a 	or	r12,r6,r3
    c688:	6000081e 	bne	r12,zero,c6ac <__ledf2+0x74>
    c68c:	0005883a 	mov	r2,zero
    c690:	5800111e 	bne	r11,zero,c6d8 <__ledf2+0xa0>
    c694:	f800283a 	ret
    c698:	29403fcc 	andi	r5,r5,255
    c69c:	40000c1e 	bne	r8,zero,c6d0 <__ledf2+0x98>
    c6a0:	30d2b03a 	or	r9,r6,r3
    c6a4:	48000c26 	beq	r9,zero,c6d8 <__ledf2+0xa0>
    c6a8:	0013883a 	mov	r9,zero
    c6ac:	39c03fcc 	andi	r7,r7,255
    c6b0:	48000826 	beq	r9,zero,c6d4 <__ledf2+0x9c>
    c6b4:	38001126 	beq	r7,zero,c6fc <__ledf2+0xc4>
    c6b8:	00800044 	movi	r2,1
    c6bc:	f800283a 	ret
    c6c0:	30d2b03a 	or	r9,r6,r3
    c6c4:	483fea26 	beq	r9,zero,c670 <__alt_data_end+0xfffdb930>
    c6c8:	00800084 	movi	r2,2
    c6cc:	f800283a 	ret
    c6d0:	39c03fcc 	andi	r7,r7,255
    c6d4:	39400726 	beq	r7,r5,c6f4 <__ledf2+0xbc>
    c6d8:	2800081e 	bne	r5,zero,c6fc <__ledf2+0xc4>
    c6dc:	00800044 	movi	r2,1
    c6e0:	f800283a 	ret
    c6e4:	2292b03a 	or	r9,r4,r10
    c6e8:	483fdf26 	beq	r9,zero,c668 <__alt_data_end+0xfffdb928>
    c6ec:	00800084 	movi	r2,2
    c6f0:	f800283a 	ret
    c6f4:	4080030e 	bge	r8,r2,c704 <__ledf2+0xcc>
    c6f8:	383fef26 	beq	r7,zero,c6b8 <__alt_data_end+0xfffdb978>
    c6fc:	00bfffc4 	movi	r2,-1
    c700:	f800283a 	ret
    c704:	123feb16 	blt	r2,r8,c6b4 <__alt_data_end+0xfffdb974>
    c708:	1abff336 	bltu	r3,r10,c6d8 <__alt_data_end+0xfffdb998>
    c70c:	50c00326 	beq	r10,r3,c71c <__ledf2+0xe4>
    c710:	50c0042e 	bgeu	r10,r3,c724 <__ledf2+0xec>
    c714:	283fe81e 	bne	r5,zero,c6b8 <__alt_data_end+0xfffdb978>
    c718:	003ff806 	br	c6fc <__alt_data_end+0xfffdb9bc>
    c71c:	313fee36 	bltu	r6,r4,c6d8 <__alt_data_end+0xfffdb998>
    c720:	21bffc36 	bltu	r4,r6,c714 <__alt_data_end+0xfffdb9d4>
    c724:	0005883a 	mov	r2,zero
    c728:	f800283a 	ret

0000c72c <__muldf3>:
    c72c:	deffee04 	addi	sp,sp,-72
    c730:	dd000c15 	stw	r20,48(sp)
    c734:	2828d53a 	srli	r20,r5,20
    c738:	ddc00f15 	stw	r23,60(sp)
    c73c:	282ed7fa 	srli	r23,r5,31
    c740:	dc000815 	stw	r16,32(sp)
    c744:	04000434 	movhi	r16,16
    c748:	dcc00b15 	stw	r19,44(sp)
    c74c:	843fffc4 	addi	r16,r16,-1
    c750:	dfc01115 	stw	ra,68(sp)
    c754:	df001015 	stw	fp,64(sp)
    c758:	dd800e15 	stw	r22,56(sp)
    c75c:	dd400d15 	stw	r21,52(sp)
    c760:	dc800a15 	stw	r18,40(sp)
    c764:	dc400915 	stw	r17,36(sp)
    c768:	a501ffcc 	andi	r20,r20,2047
    c76c:	2c20703a 	and	r16,r5,r16
    c770:	b827883a 	mov	r19,r23
    c774:	ba403fcc 	andi	r9,r23,255
    c778:	a0006026 	beq	r20,zero,c8fc <__muldf3+0x1d0>
    c77c:	0081ffc4 	movi	r2,2047
    c780:	202d883a 	mov	r22,r4
    c784:	a0803626 	beq	r20,r2,c860 <__muldf3+0x134>
    c788:	84000434 	orhi	r16,r16,16
    c78c:	200ad77a 	srli	r5,r4,29
    c790:	800490fa 	slli	r2,r16,3
    c794:	202c90fa 	slli	r22,r4,3
    c798:	a53f0044 	addi	r20,r20,-1023
    c79c:	28a0b03a 	or	r16,r5,r2
    c7a0:	002b883a 	mov	r21,zero
    c7a4:	000b883a 	mov	r5,zero
    c7a8:	3804d53a 	srli	r2,r7,20
    c7ac:	3838d7fa 	srli	fp,r7,31
    c7b0:	04400434 	movhi	r17,16
    c7b4:	8c7fffc4 	addi	r17,r17,-1
    c7b8:	1081ffcc 	andi	r2,r2,2047
    c7bc:	3025883a 	mov	r18,r6
    c7c0:	3c62703a 	and	r17,r7,r17
    c7c4:	e2803fcc 	andi	r10,fp,255
    c7c8:	10006d26 	beq	r2,zero,c980 <__muldf3+0x254>
    c7cc:	00c1ffc4 	movi	r3,2047
    c7d0:	10c06526 	beq	r2,r3,c968 <__muldf3+0x23c>
    c7d4:	8c400434 	orhi	r17,r17,16
    c7d8:	300ed77a 	srli	r7,r6,29
    c7dc:	880690fa 	slli	r3,r17,3
    c7e0:	302490fa 	slli	r18,r6,3
    c7e4:	10bf0044 	addi	r2,r2,-1023
    c7e8:	38e2b03a 	or	r17,r7,r3
    c7ec:	000f883a 	mov	r7,zero
    c7f0:	a087883a 	add	r3,r20,r2
    c7f4:	010003c4 	movi	r4,15
    c7f8:	3d44b03a 	or	r2,r7,r21
    c7fc:	e5ccf03a 	xor	r6,fp,r23
    c800:	1a000044 	addi	r8,r3,1
    c804:	20809b36 	bltu	r4,r2,ca74 <__muldf3+0x348>
    c808:	100490ba 	slli	r2,r2,2
    c80c:	01000074 	movhi	r4,1
    c810:	21320804 	addi	r4,r4,-14304
    c814:	1105883a 	add	r2,r2,r4
    c818:	10800017 	ldw	r2,0(r2)
    c81c:	1000683a 	jmp	r2
    c820:	0000ca74 	movhi	zero,809
    c824:	0000c880 	call	c88 <_malloc_r+0x78>
    c828:	0000c880 	call	c88 <_malloc_r+0x78>
    c82c:	0000c87c 	xorhi	zero,zero,801
    c830:	0000ca50 	cmplti	zero,zero,809
    c834:	0000ca50 	cmplti	zero,zero,809
    c838:	0000ca38 	rdprs	zero,zero,808
    c83c:	0000c87c 	xorhi	zero,zero,801
    c840:	0000ca50 	cmplti	zero,zero,809
    c844:	0000ca38 	rdprs	zero,zero,808
    c848:	0000ca50 	cmplti	zero,zero,809
    c84c:	0000c87c 	xorhi	zero,zero,801
    c850:	0000ca60 	cmpeqi	zero,zero,809
    c854:	0000ca60 	cmpeqi	zero,zero,809
    c858:	0000ca60 	cmpeqi	zero,zero,809
    c85c:	0000cdc0 	call	cdc <_malloc_r+0xcc>
    c860:	2404b03a 	or	r2,r4,r16
    c864:	1000711e 	bne	r2,zero,ca2c <__muldf3+0x300>
    c868:	05400204 	movi	r21,8
    c86c:	0021883a 	mov	r16,zero
    c870:	002d883a 	mov	r22,zero
    c874:	01400084 	movi	r5,2
    c878:	003fcb06 	br	c7a8 <__alt_data_end+0xfffdba68>
    c87c:	500d883a 	mov	r6,r10
    c880:	00800084 	movi	r2,2
    c884:	38805926 	beq	r7,r2,c9ec <__muldf3+0x2c0>
    c888:	008000c4 	movi	r2,3
    c88c:	3881bb26 	beq	r7,r2,cf7c <__muldf3+0x850>
    c890:	00800044 	movi	r2,1
    c894:	3881961e 	bne	r7,r2,cef0 <__muldf3+0x7c4>
    c898:	3027883a 	mov	r19,r6
    c89c:	0005883a 	mov	r2,zero
    c8a0:	0021883a 	mov	r16,zero
    c8a4:	002d883a 	mov	r22,zero
    c8a8:	1004953a 	slli	r2,r2,20
    c8ac:	98c03fcc 	andi	r3,r19,255
    c8b0:	04400434 	movhi	r17,16
    c8b4:	8c7fffc4 	addi	r17,r17,-1
    c8b8:	180697fa 	slli	r3,r3,31
    c8bc:	8460703a 	and	r16,r16,r17
    c8c0:	80a0b03a 	or	r16,r16,r2
    c8c4:	80c6b03a 	or	r3,r16,r3
    c8c8:	b005883a 	mov	r2,r22
    c8cc:	dfc01117 	ldw	ra,68(sp)
    c8d0:	df001017 	ldw	fp,64(sp)
    c8d4:	ddc00f17 	ldw	r23,60(sp)
    c8d8:	dd800e17 	ldw	r22,56(sp)
    c8dc:	dd400d17 	ldw	r21,52(sp)
    c8e0:	dd000c17 	ldw	r20,48(sp)
    c8e4:	dcc00b17 	ldw	r19,44(sp)
    c8e8:	dc800a17 	ldw	r18,40(sp)
    c8ec:	dc400917 	ldw	r17,36(sp)
    c8f0:	dc000817 	ldw	r16,32(sp)
    c8f4:	dec01204 	addi	sp,sp,72
    c8f8:	f800283a 	ret
    c8fc:	2404b03a 	or	r2,r4,r16
    c900:	202b883a 	mov	r21,r4
    c904:	10004426 	beq	r2,zero,ca18 <__muldf3+0x2ec>
    c908:	80015126 	beq	r16,zero,ce50 <__muldf3+0x724>
    c90c:	8009883a 	mov	r4,r16
    c910:	d9800715 	stw	r6,28(sp)
    c914:	d9c00215 	stw	r7,8(sp)
    c918:	da400415 	stw	r9,16(sp)
    c91c:	000da980 	call	da98 <__clzsi2>
    c920:	d9800717 	ldw	r6,28(sp)
    c924:	d9c00217 	ldw	r7,8(sp)
    c928:	da400417 	ldw	r9,16(sp)
    c92c:	113ffd44 	addi	r4,r2,-11
    c930:	00c00704 	movi	r3,28
    c934:	19014216 	blt	r3,r4,ce40 <__muldf3+0x714>
    c938:	00c00744 	movi	r3,29
    c93c:	15bffe04 	addi	r22,r2,-8
    c940:	1907c83a 	sub	r3,r3,r4
    c944:	85a0983a 	sll	r16,r16,r22
    c948:	a8c6d83a 	srl	r3,r21,r3
    c94c:	adac983a 	sll	r22,r21,r22
    c950:	1c20b03a 	or	r16,r3,r16
    c954:	1080fcc4 	addi	r2,r2,1011
    c958:	00a9c83a 	sub	r20,zero,r2
    c95c:	002b883a 	mov	r21,zero
    c960:	000b883a 	mov	r5,zero
    c964:	003f9006 	br	c7a8 <__alt_data_end+0xfffdba68>
    c968:	3446b03a 	or	r3,r6,r17
    c96c:	1800281e 	bne	r3,zero,ca10 <__muldf3+0x2e4>
    c970:	0023883a 	mov	r17,zero
    c974:	0025883a 	mov	r18,zero
    c978:	01c00084 	movi	r7,2
    c97c:	003f9c06 	br	c7f0 <__alt_data_end+0xfffdbab0>
    c980:	3446b03a 	or	r3,r6,r17
    c984:	18001e26 	beq	r3,zero,ca00 <__muldf3+0x2d4>
    c988:	88012126 	beq	r17,zero,ce10 <__muldf3+0x6e4>
    c98c:	8809883a 	mov	r4,r17
    c990:	d9400215 	stw	r5,8(sp)
    c994:	d9800715 	stw	r6,28(sp)
    c998:	da400415 	stw	r9,16(sp)
    c99c:	da800315 	stw	r10,12(sp)
    c9a0:	000da980 	call	da98 <__clzsi2>
    c9a4:	d9400217 	ldw	r5,8(sp)
    c9a8:	d9800717 	ldw	r6,28(sp)
    c9ac:	da400417 	ldw	r9,16(sp)
    c9b0:	da800317 	ldw	r10,12(sp)
    c9b4:	113ffd44 	addi	r4,r2,-11
    c9b8:	00c00704 	movi	r3,28
    c9bc:	19011016 	blt	r3,r4,ce00 <__muldf3+0x6d4>
    c9c0:	00c00744 	movi	r3,29
    c9c4:	14bffe04 	addi	r18,r2,-8
    c9c8:	1907c83a 	sub	r3,r3,r4
    c9cc:	8ca2983a 	sll	r17,r17,r18
    c9d0:	30c6d83a 	srl	r3,r6,r3
    c9d4:	34a4983a 	sll	r18,r6,r18
    c9d8:	1c62b03a 	or	r17,r3,r17
    c9dc:	1080fcc4 	addi	r2,r2,1011
    c9e0:	0085c83a 	sub	r2,zero,r2
    c9e4:	000f883a 	mov	r7,zero
    c9e8:	003f8106 	br	c7f0 <__alt_data_end+0xfffdbab0>
    c9ec:	3027883a 	mov	r19,r6
    c9f0:	0081ffc4 	movi	r2,2047
    c9f4:	0021883a 	mov	r16,zero
    c9f8:	002d883a 	mov	r22,zero
    c9fc:	003faa06 	br	c8a8 <__alt_data_end+0xfffdbb68>
    ca00:	0023883a 	mov	r17,zero
    ca04:	0025883a 	mov	r18,zero
    ca08:	01c00044 	movi	r7,1
    ca0c:	003f7806 	br	c7f0 <__alt_data_end+0xfffdbab0>
    ca10:	01c000c4 	movi	r7,3
    ca14:	003f7606 	br	c7f0 <__alt_data_end+0xfffdbab0>
    ca18:	05400104 	movi	r21,4
    ca1c:	0021883a 	mov	r16,zero
    ca20:	002d883a 	mov	r22,zero
    ca24:	01400044 	movi	r5,1
    ca28:	003f5f06 	br	c7a8 <__alt_data_end+0xfffdba68>
    ca2c:	05400304 	movi	r21,12
    ca30:	014000c4 	movi	r5,3
    ca34:	003f5c06 	br	c7a8 <__alt_data_end+0xfffdba68>
    ca38:	04000434 	movhi	r16,16
    ca3c:	0027883a 	mov	r19,zero
    ca40:	843fffc4 	addi	r16,r16,-1
    ca44:	05bfffc4 	movi	r22,-1
    ca48:	0081ffc4 	movi	r2,2047
    ca4c:	003f9606 	br	c8a8 <__alt_data_end+0xfffdbb68>
    ca50:	8023883a 	mov	r17,r16
    ca54:	b025883a 	mov	r18,r22
    ca58:	280f883a 	mov	r7,r5
    ca5c:	003f8806 	br	c880 <__alt_data_end+0xfffdbb40>
    ca60:	8023883a 	mov	r17,r16
    ca64:	b025883a 	mov	r18,r22
    ca68:	480d883a 	mov	r6,r9
    ca6c:	280f883a 	mov	r7,r5
    ca70:	003f8306 	br	c880 <__alt_data_end+0xfffdbb40>
    ca74:	b026d43a 	srli	r19,r22,16
    ca78:	902ed43a 	srli	r23,r18,16
    ca7c:	b5bfffcc 	andi	r22,r22,65535
    ca80:	94bfffcc 	andi	r18,r18,65535
    ca84:	b00b883a 	mov	r5,r22
    ca88:	9009883a 	mov	r4,r18
    ca8c:	d8c00515 	stw	r3,20(sp)
    ca90:	d9800715 	stw	r6,28(sp)
    ca94:	da000615 	stw	r8,24(sp)
    ca98:	0000bc00 	call	bc0 <__mulsi3>
    ca9c:	980b883a 	mov	r5,r19
    caa0:	9009883a 	mov	r4,r18
    caa4:	1029883a 	mov	r20,r2
    caa8:	0000bc00 	call	bc0 <__mulsi3>
    caac:	b80b883a 	mov	r5,r23
    cab0:	9809883a 	mov	r4,r19
    cab4:	102b883a 	mov	r21,r2
    cab8:	0000bc00 	call	bc0 <__mulsi3>
    cabc:	b809883a 	mov	r4,r23
    cac0:	b00b883a 	mov	r5,r22
    cac4:	1039883a 	mov	fp,r2
    cac8:	0000bc00 	call	bc0 <__mulsi3>
    cacc:	a008d43a 	srli	r4,r20,16
    cad0:	1545883a 	add	r2,r2,r21
    cad4:	d8c00517 	ldw	r3,20(sp)
    cad8:	2085883a 	add	r2,r4,r2
    cadc:	d9800717 	ldw	r6,28(sp)
    cae0:	da000617 	ldw	r8,24(sp)
    cae4:	1540022e 	bgeu	r2,r21,caf0 <__muldf3+0x3c4>
    cae8:	01000074 	movhi	r4,1
    caec:	e139883a 	add	fp,fp,r4
    caf0:	100e943a 	slli	r7,r2,16
    caf4:	1004d43a 	srli	r2,r2,16
    caf8:	882ad43a 	srli	r21,r17,16
    cafc:	a53fffcc 	andi	r20,r20,65535
    cb00:	8c7fffcc 	andi	r17,r17,65535
    cb04:	3d29883a 	add	r20,r7,r20
    cb08:	b00b883a 	mov	r5,r22
    cb0c:	8809883a 	mov	r4,r17
    cb10:	d8c00515 	stw	r3,20(sp)
    cb14:	d9800715 	stw	r6,28(sp)
    cb18:	da000615 	stw	r8,24(sp)
    cb1c:	dd000115 	stw	r20,4(sp)
    cb20:	d8800015 	stw	r2,0(sp)
    cb24:	0000bc00 	call	bc0 <__mulsi3>
    cb28:	980b883a 	mov	r5,r19
    cb2c:	8809883a 	mov	r4,r17
    cb30:	d8800215 	stw	r2,8(sp)
    cb34:	0000bc00 	call	bc0 <__mulsi3>
    cb38:	9809883a 	mov	r4,r19
    cb3c:	a80b883a 	mov	r5,r21
    cb40:	1029883a 	mov	r20,r2
    cb44:	0000bc00 	call	bc0 <__mulsi3>
    cb48:	b00b883a 	mov	r5,r22
    cb4c:	a809883a 	mov	r4,r21
    cb50:	d8800415 	stw	r2,16(sp)
    cb54:	0000bc00 	call	bc0 <__mulsi3>
    cb58:	d9c00217 	ldw	r7,8(sp)
    cb5c:	1505883a 	add	r2,r2,r20
    cb60:	d8c00517 	ldw	r3,20(sp)
    cb64:	3826d43a 	srli	r19,r7,16
    cb68:	d9800717 	ldw	r6,28(sp)
    cb6c:	da000617 	ldw	r8,24(sp)
    cb70:	9885883a 	add	r2,r19,r2
    cb74:	da400417 	ldw	r9,16(sp)
    cb78:	1500022e 	bgeu	r2,r20,cb84 <__muldf3+0x458>
    cb7c:	01000074 	movhi	r4,1
    cb80:	4913883a 	add	r9,r9,r4
    cb84:	1028d43a 	srli	r20,r2,16
    cb88:	1004943a 	slli	r2,r2,16
    cb8c:	802cd43a 	srli	r22,r16,16
    cb90:	843fffcc 	andi	r16,r16,65535
    cb94:	3cffffcc 	andi	r19,r7,65535
    cb98:	9009883a 	mov	r4,r18
    cb9c:	800b883a 	mov	r5,r16
    cba0:	a269883a 	add	r20,r20,r9
    cba4:	d8c00515 	stw	r3,20(sp)
    cba8:	d9800715 	stw	r6,28(sp)
    cbac:	da000615 	stw	r8,24(sp)
    cbb0:	14e7883a 	add	r19,r2,r19
    cbb4:	0000bc00 	call	bc0 <__mulsi3>
    cbb8:	9009883a 	mov	r4,r18
    cbbc:	b00b883a 	mov	r5,r22
    cbc0:	d8800315 	stw	r2,12(sp)
    cbc4:	0000bc00 	call	bc0 <__mulsi3>
    cbc8:	b809883a 	mov	r4,r23
    cbcc:	b00b883a 	mov	r5,r22
    cbd0:	d8800215 	stw	r2,8(sp)
    cbd4:	0000bc00 	call	bc0 <__mulsi3>
    cbd8:	b80b883a 	mov	r5,r23
    cbdc:	8009883a 	mov	r4,r16
    cbe0:	d8800415 	stw	r2,16(sp)
    cbe4:	0000bc00 	call	bc0 <__mulsi3>
    cbe8:	da800317 	ldw	r10,12(sp)
    cbec:	d9c00217 	ldw	r7,8(sp)
    cbf0:	d9000017 	ldw	r4,0(sp)
    cbf4:	502ed43a 	srli	r23,r10,16
    cbf8:	11c5883a 	add	r2,r2,r7
    cbfc:	24e5883a 	add	r18,r4,r19
    cc00:	b885883a 	add	r2,r23,r2
    cc04:	d8c00517 	ldw	r3,20(sp)
    cc08:	d9800717 	ldw	r6,28(sp)
    cc0c:	da000617 	ldw	r8,24(sp)
    cc10:	da400417 	ldw	r9,16(sp)
    cc14:	11c0022e 	bgeu	r2,r7,cc20 <__muldf3+0x4f4>
    cc18:	01000074 	movhi	r4,1
    cc1c:	4913883a 	add	r9,r9,r4
    cc20:	100ed43a 	srli	r7,r2,16
    cc24:	1004943a 	slli	r2,r2,16
    cc28:	55ffffcc 	andi	r23,r10,65535
    cc2c:	3a53883a 	add	r9,r7,r9
    cc30:	8809883a 	mov	r4,r17
    cc34:	800b883a 	mov	r5,r16
    cc38:	d8c00515 	stw	r3,20(sp)
    cc3c:	d9800715 	stw	r6,28(sp)
    cc40:	da000615 	stw	r8,24(sp)
    cc44:	da400415 	stw	r9,16(sp)
    cc48:	15ef883a 	add	r23,r2,r23
    cc4c:	0000bc00 	call	bc0 <__mulsi3>
    cc50:	8809883a 	mov	r4,r17
    cc54:	b00b883a 	mov	r5,r22
    cc58:	d8800215 	stw	r2,8(sp)
    cc5c:	0000bc00 	call	bc0 <__mulsi3>
    cc60:	b00b883a 	mov	r5,r22
    cc64:	a809883a 	mov	r4,r21
    cc68:	d8800315 	stw	r2,12(sp)
    cc6c:	0000bc00 	call	bc0 <__mulsi3>
    cc70:	8009883a 	mov	r4,r16
    cc74:	a80b883a 	mov	r5,r21
    cc78:	1023883a 	mov	r17,r2
    cc7c:	0000bc00 	call	bc0 <__mulsi3>
    cc80:	d9c00217 	ldw	r7,8(sp)
    cc84:	da800317 	ldw	r10,12(sp)
    cc88:	d8c00517 	ldw	r3,20(sp)
    cc8c:	3808d43a 	srli	r4,r7,16
    cc90:	1285883a 	add	r2,r2,r10
    cc94:	d9800717 	ldw	r6,28(sp)
    cc98:	2085883a 	add	r2,r4,r2
    cc9c:	da000617 	ldw	r8,24(sp)
    cca0:	da400417 	ldw	r9,16(sp)
    cca4:	1280022e 	bgeu	r2,r10,ccb0 <__muldf3+0x584>
    cca8:	01000074 	movhi	r4,1
    ccac:	8923883a 	add	r17,r17,r4
    ccb0:	1008943a 	slli	r4,r2,16
    ccb4:	39ffffcc 	andi	r7,r7,65535
    ccb8:	e4b9883a 	add	fp,fp,r18
    ccbc:	21cf883a 	add	r7,r4,r7
    ccc0:	e4e7803a 	cmpltu	r19,fp,r19
    ccc4:	3d0f883a 	add	r7,r7,r20
    ccc8:	bf39883a 	add	fp,r23,fp
    cccc:	99c9883a 	add	r4,r19,r7
    ccd0:	e5ef803a 	cmpltu	r23,fp,r23
    ccd4:	490b883a 	add	r5,r9,r4
    ccd8:	1004d43a 	srli	r2,r2,16
    ccdc:	b965883a 	add	r18,r23,r5
    cce0:	24c9803a 	cmpltu	r4,r4,r19
    cce4:	3d29803a 	cmpltu	r20,r7,r20
    cce8:	a128b03a 	or	r20,r20,r4
    ccec:	95ef803a 	cmpltu	r23,r18,r23
    ccf0:	2a53803a 	cmpltu	r9,r5,r9
    ccf4:	a0a9883a 	add	r20,r20,r2
    ccf8:	4deeb03a 	or	r23,r9,r23
    ccfc:	a5ef883a 	add	r23,r20,r23
    cd00:	bc63883a 	add	r17,r23,r17
    cd04:	e004927a 	slli	r2,fp,9
    cd08:	d9000117 	ldw	r4,4(sp)
    cd0c:	882e927a 	slli	r23,r17,9
    cd10:	9022d5fa 	srli	r17,r18,23
    cd14:	e038d5fa 	srli	fp,fp,23
    cd18:	1104b03a 	or	r2,r2,r4
    cd1c:	9024927a 	slli	r18,r18,9
    cd20:	1004c03a 	cmpne	r2,r2,zero
    cd24:	bc62b03a 	or	r17,r23,r17
    cd28:	1738b03a 	or	fp,r2,fp
    cd2c:	8880402c 	andhi	r2,r17,256
    cd30:	e4a4b03a 	or	r18,fp,r18
    cd34:	10000726 	beq	r2,zero,cd54 <__muldf3+0x628>
    cd38:	9006d07a 	srli	r3,r18,1
    cd3c:	880497fa 	slli	r2,r17,31
    cd40:	9480004c 	andi	r18,r18,1
    cd44:	8822d07a 	srli	r17,r17,1
    cd48:	1ca4b03a 	or	r18,r3,r18
    cd4c:	14a4b03a 	or	r18,r2,r18
    cd50:	4007883a 	mov	r3,r8
    cd54:	1880ffc4 	addi	r2,r3,1023
    cd58:	0080460e 	bge	zero,r2,ce74 <__muldf3+0x748>
    cd5c:	910001cc 	andi	r4,r18,7
    cd60:	20000726 	beq	r4,zero,cd80 <__muldf3+0x654>
    cd64:	910003cc 	andi	r4,r18,15
    cd68:	01400104 	movi	r5,4
    cd6c:	21400426 	beq	r4,r5,cd80 <__muldf3+0x654>
    cd70:	9149883a 	add	r4,r18,r5
    cd74:	24a5803a 	cmpltu	r18,r4,r18
    cd78:	8ca3883a 	add	r17,r17,r18
    cd7c:	2025883a 	mov	r18,r4
    cd80:	8900402c 	andhi	r4,r17,256
    cd84:	20000426 	beq	r4,zero,cd98 <__muldf3+0x66c>
    cd88:	18810004 	addi	r2,r3,1024
    cd8c:	00ffc034 	movhi	r3,65280
    cd90:	18ffffc4 	addi	r3,r3,-1
    cd94:	88e2703a 	and	r17,r17,r3
    cd98:	00c1ff84 	movi	r3,2046
    cd9c:	18bf1316 	blt	r3,r2,c9ec <__alt_data_end+0xfffdbcac>
    cda0:	882c977a 	slli	r22,r17,29
    cda4:	9024d0fa 	srli	r18,r18,3
    cda8:	8822927a 	slli	r17,r17,9
    cdac:	1081ffcc 	andi	r2,r2,2047
    cdb0:	b4acb03a 	or	r22,r22,r18
    cdb4:	8820d33a 	srli	r16,r17,12
    cdb8:	3027883a 	mov	r19,r6
    cdbc:	003eba06 	br	c8a8 <__alt_data_end+0xfffdbb68>
    cdc0:	8080022c 	andhi	r2,r16,8
    cdc4:	10000926 	beq	r2,zero,cdec <__muldf3+0x6c0>
    cdc8:	8880022c 	andhi	r2,r17,8
    cdcc:	1000071e 	bne	r2,zero,cdec <__muldf3+0x6c0>
    cdd0:	00800434 	movhi	r2,16
    cdd4:	8c000234 	orhi	r16,r17,8
    cdd8:	10bfffc4 	addi	r2,r2,-1
    cddc:	e027883a 	mov	r19,fp
    cde0:	80a0703a 	and	r16,r16,r2
    cde4:	902d883a 	mov	r22,r18
    cde8:	003f1706 	br	ca48 <__alt_data_end+0xfffdbd08>
    cdec:	00800434 	movhi	r2,16
    cdf0:	84000234 	orhi	r16,r16,8
    cdf4:	10bfffc4 	addi	r2,r2,-1
    cdf8:	80a0703a 	and	r16,r16,r2
    cdfc:	003f1206 	br	ca48 <__alt_data_end+0xfffdbd08>
    ce00:	147ff604 	addi	r17,r2,-40
    ce04:	3462983a 	sll	r17,r6,r17
    ce08:	0025883a 	mov	r18,zero
    ce0c:	003ef306 	br	c9dc <__alt_data_end+0xfffdbc9c>
    ce10:	3009883a 	mov	r4,r6
    ce14:	d9400215 	stw	r5,8(sp)
    ce18:	d9800715 	stw	r6,28(sp)
    ce1c:	da400415 	stw	r9,16(sp)
    ce20:	da800315 	stw	r10,12(sp)
    ce24:	000da980 	call	da98 <__clzsi2>
    ce28:	10800804 	addi	r2,r2,32
    ce2c:	da800317 	ldw	r10,12(sp)
    ce30:	da400417 	ldw	r9,16(sp)
    ce34:	d9800717 	ldw	r6,28(sp)
    ce38:	d9400217 	ldw	r5,8(sp)
    ce3c:	003edd06 	br	c9b4 <__alt_data_end+0xfffdbc74>
    ce40:	143ff604 	addi	r16,r2,-40
    ce44:	ac20983a 	sll	r16,r21,r16
    ce48:	002d883a 	mov	r22,zero
    ce4c:	003ec106 	br	c954 <__alt_data_end+0xfffdbc14>
    ce50:	d9800715 	stw	r6,28(sp)
    ce54:	d9c00215 	stw	r7,8(sp)
    ce58:	da400415 	stw	r9,16(sp)
    ce5c:	000da980 	call	da98 <__clzsi2>
    ce60:	10800804 	addi	r2,r2,32
    ce64:	da400417 	ldw	r9,16(sp)
    ce68:	d9c00217 	ldw	r7,8(sp)
    ce6c:	d9800717 	ldw	r6,28(sp)
    ce70:	003eae06 	br	c92c <__alt_data_end+0xfffdbbec>
    ce74:	00c00044 	movi	r3,1
    ce78:	1887c83a 	sub	r3,r3,r2
    ce7c:	01000e04 	movi	r4,56
    ce80:	20fe8516 	blt	r4,r3,c898 <__alt_data_end+0xfffdbb58>
    ce84:	010007c4 	movi	r4,31
    ce88:	20c01b16 	blt	r4,r3,cef8 <__muldf3+0x7cc>
    ce8c:	00800804 	movi	r2,32
    ce90:	10c5c83a 	sub	r2,r2,r3
    ce94:	888a983a 	sll	r5,r17,r2
    ce98:	90c8d83a 	srl	r4,r18,r3
    ce9c:	9084983a 	sll	r2,r18,r2
    cea0:	88e2d83a 	srl	r17,r17,r3
    cea4:	2906b03a 	or	r3,r5,r4
    cea8:	1004c03a 	cmpne	r2,r2,zero
    ceac:	1886b03a 	or	r3,r3,r2
    ceb0:	188001cc 	andi	r2,r3,7
    ceb4:	10000726 	beq	r2,zero,ced4 <__muldf3+0x7a8>
    ceb8:	188003cc 	andi	r2,r3,15
    cebc:	01000104 	movi	r4,4
    cec0:	11000426 	beq	r2,r4,ced4 <__muldf3+0x7a8>
    cec4:	1805883a 	mov	r2,r3
    cec8:	10c00104 	addi	r3,r2,4
    cecc:	1885803a 	cmpltu	r2,r3,r2
    ced0:	88a3883a 	add	r17,r17,r2
    ced4:	8880202c 	andhi	r2,r17,128
    ced8:	10001c26 	beq	r2,zero,cf4c <__muldf3+0x820>
    cedc:	3027883a 	mov	r19,r6
    cee0:	00800044 	movi	r2,1
    cee4:	0021883a 	mov	r16,zero
    cee8:	002d883a 	mov	r22,zero
    ceec:	003e6e06 	br	c8a8 <__alt_data_end+0xfffdbb68>
    cef0:	4007883a 	mov	r3,r8
    cef4:	003f9706 	br	cd54 <__alt_data_end+0xfffdc014>
    cef8:	017ff844 	movi	r5,-31
    cefc:	2885c83a 	sub	r2,r5,r2
    cf00:	888ad83a 	srl	r5,r17,r2
    cf04:	00800804 	movi	r2,32
    cf08:	18801a26 	beq	r3,r2,cf74 <__muldf3+0x848>
    cf0c:	01001004 	movi	r4,64
    cf10:	20c7c83a 	sub	r3,r4,r3
    cf14:	88e2983a 	sll	r17,r17,r3
    cf18:	8ca4b03a 	or	r18,r17,r18
    cf1c:	9004c03a 	cmpne	r2,r18,zero
    cf20:	2884b03a 	or	r2,r5,r2
    cf24:	144001cc 	andi	r17,r2,7
    cf28:	88000d1e 	bne	r17,zero,cf60 <__muldf3+0x834>
    cf2c:	0021883a 	mov	r16,zero
    cf30:	102cd0fa 	srli	r22,r2,3
    cf34:	3027883a 	mov	r19,r6
    cf38:	0005883a 	mov	r2,zero
    cf3c:	b46cb03a 	or	r22,r22,r17
    cf40:	003e5906 	br	c8a8 <__alt_data_end+0xfffdbb68>
    cf44:	1007883a 	mov	r3,r2
    cf48:	0023883a 	mov	r17,zero
    cf4c:	8820927a 	slli	r16,r17,9
    cf50:	1805883a 	mov	r2,r3
    cf54:	8822977a 	slli	r17,r17,29
    cf58:	8020d33a 	srli	r16,r16,12
    cf5c:	003ff406 	br	cf30 <__alt_data_end+0xfffdc1f0>
    cf60:	10c003cc 	andi	r3,r2,15
    cf64:	01000104 	movi	r4,4
    cf68:	193ff626 	beq	r3,r4,cf44 <__alt_data_end+0xfffdc204>
    cf6c:	0023883a 	mov	r17,zero
    cf70:	003fd506 	br	cec8 <__alt_data_end+0xfffdc188>
    cf74:	0023883a 	mov	r17,zero
    cf78:	003fe706 	br	cf18 <__alt_data_end+0xfffdc1d8>
    cf7c:	00800434 	movhi	r2,16
    cf80:	8c000234 	orhi	r16,r17,8
    cf84:	10bfffc4 	addi	r2,r2,-1
    cf88:	3027883a 	mov	r19,r6
    cf8c:	80a0703a 	and	r16,r16,r2
    cf90:	902d883a 	mov	r22,r18
    cf94:	003eac06 	br	ca48 <__alt_data_end+0xfffdbd08>

0000cf98 <__subdf3>:
    cf98:	02000434 	movhi	r8,16
    cf9c:	423fffc4 	addi	r8,r8,-1
    cfa0:	defffb04 	addi	sp,sp,-20
    cfa4:	2a14703a 	and	r10,r5,r8
    cfa8:	3812d53a 	srli	r9,r7,20
    cfac:	3a10703a 	and	r8,r7,r8
    cfb0:	2006d77a 	srli	r3,r4,29
    cfb4:	3004d77a 	srli	r2,r6,29
    cfb8:	dc000015 	stw	r16,0(sp)
    cfbc:	501490fa 	slli	r10,r10,3
    cfc0:	2820d53a 	srli	r16,r5,20
    cfc4:	401090fa 	slli	r8,r8,3
    cfc8:	dc800215 	stw	r18,8(sp)
    cfcc:	dc400115 	stw	r17,4(sp)
    cfd0:	dfc00415 	stw	ra,16(sp)
    cfd4:	202290fa 	slli	r17,r4,3
    cfd8:	dcc00315 	stw	r19,12(sp)
    cfdc:	4a41ffcc 	andi	r9,r9,2047
    cfe0:	0101ffc4 	movi	r4,2047
    cfe4:	2824d7fa 	srli	r18,r5,31
    cfe8:	8401ffcc 	andi	r16,r16,2047
    cfec:	50c6b03a 	or	r3,r10,r3
    cff0:	380ed7fa 	srli	r7,r7,31
    cff4:	408ab03a 	or	r5,r8,r2
    cff8:	300c90fa 	slli	r6,r6,3
    cffc:	49009626 	beq	r9,r4,d258 <__subdf3+0x2c0>
    d000:	39c0005c 	xori	r7,r7,1
    d004:	8245c83a 	sub	r2,r16,r9
    d008:	3c807426 	beq	r7,r18,d1dc <__subdf3+0x244>
    d00c:	0080af0e 	bge	zero,r2,d2cc <__subdf3+0x334>
    d010:	48002a1e 	bne	r9,zero,d0bc <__subdf3+0x124>
    d014:	2988b03a 	or	r4,r5,r6
    d018:	20009a1e 	bne	r4,zero,d284 <__subdf3+0x2ec>
    d01c:	888001cc 	andi	r2,r17,7
    d020:	10000726 	beq	r2,zero,d040 <__subdf3+0xa8>
    d024:	888003cc 	andi	r2,r17,15
    d028:	01000104 	movi	r4,4
    d02c:	11000426 	beq	r2,r4,d040 <__subdf3+0xa8>
    d030:	890b883a 	add	r5,r17,r4
    d034:	2c63803a 	cmpltu	r17,r5,r17
    d038:	1c47883a 	add	r3,r3,r17
    d03c:	2823883a 	mov	r17,r5
    d040:	1880202c 	andhi	r2,r3,128
    d044:	10005926 	beq	r2,zero,d1ac <__subdf3+0x214>
    d048:	84000044 	addi	r16,r16,1
    d04c:	0081ffc4 	movi	r2,2047
    d050:	8080be26 	beq	r16,r2,d34c <__subdf3+0x3b4>
    d054:	017fe034 	movhi	r5,65408
    d058:	297fffc4 	addi	r5,r5,-1
    d05c:	1946703a 	and	r3,r3,r5
    d060:	1804977a 	slli	r2,r3,29
    d064:	1806927a 	slli	r3,r3,9
    d068:	8822d0fa 	srli	r17,r17,3
    d06c:	8401ffcc 	andi	r16,r16,2047
    d070:	180ad33a 	srli	r5,r3,12
    d074:	9100004c 	andi	r4,r18,1
    d078:	1444b03a 	or	r2,r2,r17
    d07c:	80c1ffcc 	andi	r3,r16,2047
    d080:	1820953a 	slli	r16,r3,20
    d084:	20c03fcc 	andi	r3,r4,255
    d088:	180897fa 	slli	r4,r3,31
    d08c:	00c00434 	movhi	r3,16
    d090:	18ffffc4 	addi	r3,r3,-1
    d094:	28c6703a 	and	r3,r5,r3
    d098:	1c06b03a 	or	r3,r3,r16
    d09c:	1906b03a 	or	r3,r3,r4
    d0a0:	dfc00417 	ldw	ra,16(sp)
    d0a4:	dcc00317 	ldw	r19,12(sp)
    d0a8:	dc800217 	ldw	r18,8(sp)
    d0ac:	dc400117 	ldw	r17,4(sp)
    d0b0:	dc000017 	ldw	r16,0(sp)
    d0b4:	dec00504 	addi	sp,sp,20
    d0b8:	f800283a 	ret
    d0bc:	0101ffc4 	movi	r4,2047
    d0c0:	813fd626 	beq	r16,r4,d01c <__alt_data_end+0xfffdc2dc>
    d0c4:	29402034 	orhi	r5,r5,128
    d0c8:	01000e04 	movi	r4,56
    d0cc:	2080a316 	blt	r4,r2,d35c <__subdf3+0x3c4>
    d0d0:	010007c4 	movi	r4,31
    d0d4:	2080c616 	blt	r4,r2,d3f0 <__subdf3+0x458>
    d0d8:	01000804 	movi	r4,32
    d0dc:	2089c83a 	sub	r4,r4,r2
    d0e0:	2910983a 	sll	r8,r5,r4
    d0e4:	308ed83a 	srl	r7,r6,r2
    d0e8:	3108983a 	sll	r4,r6,r4
    d0ec:	2884d83a 	srl	r2,r5,r2
    d0f0:	41ccb03a 	or	r6,r8,r7
    d0f4:	2008c03a 	cmpne	r4,r4,zero
    d0f8:	310cb03a 	or	r6,r6,r4
    d0fc:	898dc83a 	sub	r6,r17,r6
    d100:	89a3803a 	cmpltu	r17,r17,r6
    d104:	1887c83a 	sub	r3,r3,r2
    d108:	1c47c83a 	sub	r3,r3,r17
    d10c:	3023883a 	mov	r17,r6
    d110:	1880202c 	andhi	r2,r3,128
    d114:	10002326 	beq	r2,zero,d1a4 <__subdf3+0x20c>
    d118:	04c02034 	movhi	r19,128
    d11c:	9cffffc4 	addi	r19,r19,-1
    d120:	1ce6703a 	and	r19,r3,r19
    d124:	98007a26 	beq	r19,zero,d310 <__subdf3+0x378>
    d128:	9809883a 	mov	r4,r19
    d12c:	000da980 	call	da98 <__clzsi2>
    d130:	113ffe04 	addi	r4,r2,-8
    d134:	00c007c4 	movi	r3,31
    d138:	19007b16 	blt	r3,r4,d328 <__subdf3+0x390>
    d13c:	00800804 	movi	r2,32
    d140:	1105c83a 	sub	r2,r2,r4
    d144:	8884d83a 	srl	r2,r17,r2
    d148:	9906983a 	sll	r3,r19,r4
    d14c:	8922983a 	sll	r17,r17,r4
    d150:	10c4b03a 	or	r2,r2,r3
    d154:	24007816 	blt	r4,r16,d338 <__subdf3+0x3a0>
    d158:	2421c83a 	sub	r16,r4,r16
    d15c:	80c00044 	addi	r3,r16,1
    d160:	010007c4 	movi	r4,31
    d164:	20c09516 	blt	r4,r3,d3bc <__subdf3+0x424>
    d168:	01400804 	movi	r5,32
    d16c:	28cbc83a 	sub	r5,r5,r3
    d170:	88c8d83a 	srl	r4,r17,r3
    d174:	8962983a 	sll	r17,r17,r5
    d178:	114a983a 	sll	r5,r2,r5
    d17c:	10c6d83a 	srl	r3,r2,r3
    d180:	8804c03a 	cmpne	r2,r17,zero
    d184:	290ab03a 	or	r5,r5,r4
    d188:	28a2b03a 	or	r17,r5,r2
    d18c:	0021883a 	mov	r16,zero
    d190:	003fa206 	br	d01c <__alt_data_end+0xfffdc2dc>
    d194:	2090b03a 	or	r8,r4,r2
    d198:	40018e26 	beq	r8,zero,d7d4 <__subdf3+0x83c>
    d19c:	1007883a 	mov	r3,r2
    d1a0:	2023883a 	mov	r17,r4
    d1a4:	888001cc 	andi	r2,r17,7
    d1a8:	103f9e1e 	bne	r2,zero,d024 <__alt_data_end+0xfffdc2e4>
    d1ac:	1804977a 	slli	r2,r3,29
    d1b0:	8822d0fa 	srli	r17,r17,3
    d1b4:	1810d0fa 	srli	r8,r3,3
    d1b8:	9100004c 	andi	r4,r18,1
    d1bc:	1444b03a 	or	r2,r2,r17
    d1c0:	00c1ffc4 	movi	r3,2047
    d1c4:	80c02826 	beq	r16,r3,d268 <__subdf3+0x2d0>
    d1c8:	01400434 	movhi	r5,16
    d1cc:	297fffc4 	addi	r5,r5,-1
    d1d0:	80e0703a 	and	r16,r16,r3
    d1d4:	414a703a 	and	r5,r8,r5
    d1d8:	003fa806 	br	d07c <__alt_data_end+0xfffdc33c>
    d1dc:	0080630e 	bge	zero,r2,d36c <__subdf3+0x3d4>
    d1e0:	48003026 	beq	r9,zero,d2a4 <__subdf3+0x30c>
    d1e4:	0101ffc4 	movi	r4,2047
    d1e8:	813f8c26 	beq	r16,r4,d01c <__alt_data_end+0xfffdc2dc>
    d1ec:	29402034 	orhi	r5,r5,128
    d1f0:	01000e04 	movi	r4,56
    d1f4:	2080a90e 	bge	r4,r2,d49c <__subdf3+0x504>
    d1f8:	298cb03a 	or	r6,r5,r6
    d1fc:	3012c03a 	cmpne	r9,r6,zero
    d200:	0005883a 	mov	r2,zero
    d204:	4c53883a 	add	r9,r9,r17
    d208:	4c63803a 	cmpltu	r17,r9,r17
    d20c:	10c7883a 	add	r3,r2,r3
    d210:	88c7883a 	add	r3,r17,r3
    d214:	4823883a 	mov	r17,r9
    d218:	1880202c 	andhi	r2,r3,128
    d21c:	1000d026 	beq	r2,zero,d560 <__subdf3+0x5c8>
    d220:	84000044 	addi	r16,r16,1
    d224:	0081ffc4 	movi	r2,2047
    d228:	8080fe26 	beq	r16,r2,d624 <__subdf3+0x68c>
    d22c:	00bfe034 	movhi	r2,65408
    d230:	10bfffc4 	addi	r2,r2,-1
    d234:	1886703a 	and	r3,r3,r2
    d238:	880ad07a 	srli	r5,r17,1
    d23c:	180497fa 	slli	r2,r3,31
    d240:	8900004c 	andi	r4,r17,1
    d244:	2922b03a 	or	r17,r5,r4
    d248:	1806d07a 	srli	r3,r3,1
    d24c:	1462b03a 	or	r17,r2,r17
    d250:	3825883a 	mov	r18,r7
    d254:	003f7106 	br	d01c <__alt_data_end+0xfffdc2dc>
    d258:	2984b03a 	or	r2,r5,r6
    d25c:	103f6826 	beq	r2,zero,d000 <__alt_data_end+0xfffdc2c0>
    d260:	39c03fcc 	andi	r7,r7,255
    d264:	003f6706 	br	d004 <__alt_data_end+0xfffdc2c4>
    d268:	4086b03a 	or	r3,r8,r2
    d26c:	18015226 	beq	r3,zero,d7b8 <__subdf3+0x820>
    d270:	00c00434 	movhi	r3,16
    d274:	41400234 	orhi	r5,r8,8
    d278:	18ffffc4 	addi	r3,r3,-1
    d27c:	28ca703a 	and	r5,r5,r3
    d280:	003f7e06 	br	d07c <__alt_data_end+0xfffdc33c>
    d284:	10bfffc4 	addi	r2,r2,-1
    d288:	1000491e 	bne	r2,zero,d3b0 <__subdf3+0x418>
    d28c:	898fc83a 	sub	r7,r17,r6
    d290:	89e3803a 	cmpltu	r17,r17,r7
    d294:	1947c83a 	sub	r3,r3,r5
    d298:	1c47c83a 	sub	r3,r3,r17
    d29c:	3823883a 	mov	r17,r7
    d2a0:	003f9b06 	br	d110 <__alt_data_end+0xfffdc3d0>
    d2a4:	2988b03a 	or	r4,r5,r6
    d2a8:	203f5c26 	beq	r4,zero,d01c <__alt_data_end+0xfffdc2dc>
    d2ac:	10bfffc4 	addi	r2,r2,-1
    d2b0:	1000931e 	bne	r2,zero,d500 <__subdf3+0x568>
    d2b4:	898d883a 	add	r6,r17,r6
    d2b8:	3463803a 	cmpltu	r17,r6,r17
    d2bc:	1947883a 	add	r3,r3,r5
    d2c0:	88c7883a 	add	r3,r17,r3
    d2c4:	3023883a 	mov	r17,r6
    d2c8:	003fd306 	br	d218 <__alt_data_end+0xfffdc4d8>
    d2cc:	1000541e 	bne	r2,zero,d420 <__subdf3+0x488>
    d2d0:	80800044 	addi	r2,r16,1
    d2d4:	1081ffcc 	andi	r2,r2,2047
    d2d8:	01000044 	movi	r4,1
    d2dc:	2080a20e 	bge	r4,r2,d568 <__subdf3+0x5d0>
    d2e0:	8989c83a 	sub	r4,r17,r6
    d2e4:	8905803a 	cmpltu	r2,r17,r4
    d2e8:	1967c83a 	sub	r19,r3,r5
    d2ec:	98a7c83a 	sub	r19,r19,r2
    d2f0:	9880202c 	andhi	r2,r19,128
    d2f4:	10006326 	beq	r2,zero,d484 <__subdf3+0x4ec>
    d2f8:	3463c83a 	sub	r17,r6,r17
    d2fc:	28c7c83a 	sub	r3,r5,r3
    d300:	344d803a 	cmpltu	r6,r6,r17
    d304:	19a7c83a 	sub	r19,r3,r6
    d308:	3825883a 	mov	r18,r7
    d30c:	983f861e 	bne	r19,zero,d128 <__alt_data_end+0xfffdc3e8>
    d310:	8809883a 	mov	r4,r17
    d314:	000da980 	call	da98 <__clzsi2>
    d318:	10800804 	addi	r2,r2,32
    d31c:	113ffe04 	addi	r4,r2,-8
    d320:	00c007c4 	movi	r3,31
    d324:	193f850e 	bge	r3,r4,d13c <__alt_data_end+0xfffdc3fc>
    d328:	10bff604 	addi	r2,r2,-40
    d32c:	8884983a 	sll	r2,r17,r2
    d330:	0023883a 	mov	r17,zero
    d334:	243f880e 	bge	r4,r16,d158 <__alt_data_end+0xfffdc418>
    d338:	00ffe034 	movhi	r3,65408
    d33c:	18ffffc4 	addi	r3,r3,-1
    d340:	8121c83a 	sub	r16,r16,r4
    d344:	10c6703a 	and	r3,r2,r3
    d348:	003f3406 	br	d01c <__alt_data_end+0xfffdc2dc>
    d34c:	9100004c 	andi	r4,r18,1
    d350:	000b883a 	mov	r5,zero
    d354:	0005883a 	mov	r2,zero
    d358:	003f4806 	br	d07c <__alt_data_end+0xfffdc33c>
    d35c:	298cb03a 	or	r6,r5,r6
    d360:	300cc03a 	cmpne	r6,r6,zero
    d364:	0005883a 	mov	r2,zero
    d368:	003f6406 	br	d0fc <__alt_data_end+0xfffdc3bc>
    d36c:	10009a1e 	bne	r2,zero,d5d8 <__subdf3+0x640>
    d370:	82400044 	addi	r9,r16,1
    d374:	4881ffcc 	andi	r2,r9,2047
    d378:	02800044 	movi	r10,1
    d37c:	5080670e 	bge	r10,r2,d51c <__subdf3+0x584>
    d380:	0081ffc4 	movi	r2,2047
    d384:	4880af26 	beq	r9,r2,d644 <__subdf3+0x6ac>
    d388:	898d883a 	add	r6,r17,r6
    d38c:	1945883a 	add	r2,r3,r5
    d390:	3447803a 	cmpltu	r3,r6,r17
    d394:	1887883a 	add	r3,r3,r2
    d398:	182297fa 	slli	r17,r3,31
    d39c:	300cd07a 	srli	r6,r6,1
    d3a0:	1806d07a 	srli	r3,r3,1
    d3a4:	4821883a 	mov	r16,r9
    d3a8:	89a2b03a 	or	r17,r17,r6
    d3ac:	003f1b06 	br	d01c <__alt_data_end+0xfffdc2dc>
    d3b0:	0101ffc4 	movi	r4,2047
    d3b4:	813f441e 	bne	r16,r4,d0c8 <__alt_data_end+0xfffdc388>
    d3b8:	003f1806 	br	d01c <__alt_data_end+0xfffdc2dc>
    d3bc:	843ff844 	addi	r16,r16,-31
    d3c0:	01400804 	movi	r5,32
    d3c4:	1408d83a 	srl	r4,r2,r16
    d3c8:	19405026 	beq	r3,r5,d50c <__subdf3+0x574>
    d3cc:	01401004 	movi	r5,64
    d3d0:	28c7c83a 	sub	r3,r5,r3
    d3d4:	10c4983a 	sll	r2,r2,r3
    d3d8:	88a2b03a 	or	r17,r17,r2
    d3dc:	8822c03a 	cmpne	r17,r17,zero
    d3e0:	2462b03a 	or	r17,r4,r17
    d3e4:	0007883a 	mov	r3,zero
    d3e8:	0021883a 	mov	r16,zero
    d3ec:	003f6d06 	br	d1a4 <__alt_data_end+0xfffdc464>
    d3f0:	11fff804 	addi	r7,r2,-32
    d3f4:	01000804 	movi	r4,32
    d3f8:	29ced83a 	srl	r7,r5,r7
    d3fc:	11004526 	beq	r2,r4,d514 <__subdf3+0x57c>
    d400:	01001004 	movi	r4,64
    d404:	2089c83a 	sub	r4,r4,r2
    d408:	2904983a 	sll	r2,r5,r4
    d40c:	118cb03a 	or	r6,r2,r6
    d410:	300cc03a 	cmpne	r6,r6,zero
    d414:	398cb03a 	or	r6,r7,r6
    d418:	0005883a 	mov	r2,zero
    d41c:	003f3706 	br	d0fc <__alt_data_end+0xfffdc3bc>
    d420:	80002a26 	beq	r16,zero,d4cc <__subdf3+0x534>
    d424:	0101ffc4 	movi	r4,2047
    d428:	49006626 	beq	r9,r4,d5c4 <__subdf3+0x62c>
    d42c:	0085c83a 	sub	r2,zero,r2
    d430:	18c02034 	orhi	r3,r3,128
    d434:	01000e04 	movi	r4,56
    d438:	20807e16 	blt	r4,r2,d634 <__subdf3+0x69c>
    d43c:	010007c4 	movi	r4,31
    d440:	2080e716 	blt	r4,r2,d7e0 <__subdf3+0x848>
    d444:	01000804 	movi	r4,32
    d448:	2089c83a 	sub	r4,r4,r2
    d44c:	1914983a 	sll	r10,r3,r4
    d450:	8890d83a 	srl	r8,r17,r2
    d454:	8908983a 	sll	r4,r17,r4
    d458:	1884d83a 	srl	r2,r3,r2
    d45c:	5222b03a 	or	r17,r10,r8
    d460:	2006c03a 	cmpne	r3,r4,zero
    d464:	88e2b03a 	or	r17,r17,r3
    d468:	3463c83a 	sub	r17,r6,r17
    d46c:	2885c83a 	sub	r2,r5,r2
    d470:	344d803a 	cmpltu	r6,r6,r17
    d474:	1187c83a 	sub	r3,r2,r6
    d478:	4821883a 	mov	r16,r9
    d47c:	3825883a 	mov	r18,r7
    d480:	003f2306 	br	d110 <__alt_data_end+0xfffdc3d0>
    d484:	24d0b03a 	or	r8,r4,r19
    d488:	40001b1e 	bne	r8,zero,d4f8 <__subdf3+0x560>
    d48c:	0005883a 	mov	r2,zero
    d490:	0009883a 	mov	r4,zero
    d494:	0021883a 	mov	r16,zero
    d498:	003f4906 	br	d1c0 <__alt_data_end+0xfffdc480>
    d49c:	010007c4 	movi	r4,31
    d4a0:	20803a16 	blt	r4,r2,d58c <__subdf3+0x5f4>
    d4a4:	01000804 	movi	r4,32
    d4a8:	2089c83a 	sub	r4,r4,r2
    d4ac:	2912983a 	sll	r9,r5,r4
    d4b0:	3090d83a 	srl	r8,r6,r2
    d4b4:	3108983a 	sll	r4,r6,r4
    d4b8:	2884d83a 	srl	r2,r5,r2
    d4bc:	4a12b03a 	or	r9,r9,r8
    d4c0:	2008c03a 	cmpne	r4,r4,zero
    d4c4:	4912b03a 	or	r9,r9,r4
    d4c8:	003f4e06 	br	d204 <__alt_data_end+0xfffdc4c4>
    d4cc:	1c48b03a 	or	r4,r3,r17
    d4d0:	20003c26 	beq	r4,zero,d5c4 <__subdf3+0x62c>
    d4d4:	0084303a 	nor	r2,zero,r2
    d4d8:	1000381e 	bne	r2,zero,d5bc <__subdf3+0x624>
    d4dc:	3463c83a 	sub	r17,r6,r17
    d4e0:	28c5c83a 	sub	r2,r5,r3
    d4e4:	344d803a 	cmpltu	r6,r6,r17
    d4e8:	1187c83a 	sub	r3,r2,r6
    d4ec:	4821883a 	mov	r16,r9
    d4f0:	3825883a 	mov	r18,r7
    d4f4:	003f0606 	br	d110 <__alt_data_end+0xfffdc3d0>
    d4f8:	2023883a 	mov	r17,r4
    d4fc:	003f0906 	br	d124 <__alt_data_end+0xfffdc3e4>
    d500:	0101ffc4 	movi	r4,2047
    d504:	813f3a1e 	bne	r16,r4,d1f0 <__alt_data_end+0xfffdc4b0>
    d508:	003ec406 	br	d01c <__alt_data_end+0xfffdc2dc>
    d50c:	0005883a 	mov	r2,zero
    d510:	003fb106 	br	d3d8 <__alt_data_end+0xfffdc698>
    d514:	0005883a 	mov	r2,zero
    d518:	003fbc06 	br	d40c <__alt_data_end+0xfffdc6cc>
    d51c:	1c44b03a 	or	r2,r3,r17
    d520:	80008e1e 	bne	r16,zero,d75c <__subdf3+0x7c4>
    d524:	1000c826 	beq	r2,zero,d848 <__subdf3+0x8b0>
    d528:	2984b03a 	or	r2,r5,r6
    d52c:	103ebb26 	beq	r2,zero,d01c <__alt_data_end+0xfffdc2dc>
    d530:	8989883a 	add	r4,r17,r6
    d534:	1945883a 	add	r2,r3,r5
    d538:	2447803a 	cmpltu	r3,r4,r17
    d53c:	1887883a 	add	r3,r3,r2
    d540:	1880202c 	andhi	r2,r3,128
    d544:	2023883a 	mov	r17,r4
    d548:	103f1626 	beq	r2,zero,d1a4 <__alt_data_end+0xfffdc464>
    d54c:	00bfe034 	movhi	r2,65408
    d550:	10bfffc4 	addi	r2,r2,-1
    d554:	5021883a 	mov	r16,r10
    d558:	1886703a 	and	r3,r3,r2
    d55c:	003eaf06 	br	d01c <__alt_data_end+0xfffdc2dc>
    d560:	3825883a 	mov	r18,r7
    d564:	003f0f06 	br	d1a4 <__alt_data_end+0xfffdc464>
    d568:	1c44b03a 	or	r2,r3,r17
    d56c:	8000251e 	bne	r16,zero,d604 <__subdf3+0x66c>
    d570:	1000661e 	bne	r2,zero,d70c <__subdf3+0x774>
    d574:	2990b03a 	or	r8,r5,r6
    d578:	40009626 	beq	r8,zero,d7d4 <__subdf3+0x83c>
    d57c:	2807883a 	mov	r3,r5
    d580:	3023883a 	mov	r17,r6
    d584:	3825883a 	mov	r18,r7
    d588:	003ea406 	br	d01c <__alt_data_end+0xfffdc2dc>
    d58c:	127ff804 	addi	r9,r2,-32
    d590:	01000804 	movi	r4,32
    d594:	2a52d83a 	srl	r9,r5,r9
    d598:	11008c26 	beq	r2,r4,d7cc <__subdf3+0x834>
    d59c:	01001004 	movi	r4,64
    d5a0:	2085c83a 	sub	r2,r4,r2
    d5a4:	2884983a 	sll	r2,r5,r2
    d5a8:	118cb03a 	or	r6,r2,r6
    d5ac:	300cc03a 	cmpne	r6,r6,zero
    d5b0:	4992b03a 	or	r9,r9,r6
    d5b4:	0005883a 	mov	r2,zero
    d5b8:	003f1206 	br	d204 <__alt_data_end+0xfffdc4c4>
    d5bc:	0101ffc4 	movi	r4,2047
    d5c0:	493f9c1e 	bne	r9,r4,d434 <__alt_data_end+0xfffdc6f4>
    d5c4:	2807883a 	mov	r3,r5
    d5c8:	3023883a 	mov	r17,r6
    d5cc:	4821883a 	mov	r16,r9
    d5d0:	3825883a 	mov	r18,r7
    d5d4:	003e9106 	br	d01c <__alt_data_end+0xfffdc2dc>
    d5d8:	80001f1e 	bne	r16,zero,d658 <__subdf3+0x6c0>
    d5dc:	1c48b03a 	or	r4,r3,r17
    d5e0:	20005a26 	beq	r4,zero,d74c <__subdf3+0x7b4>
    d5e4:	0084303a 	nor	r2,zero,r2
    d5e8:	1000561e 	bne	r2,zero,d744 <__subdf3+0x7ac>
    d5ec:	89a3883a 	add	r17,r17,r6
    d5f0:	1945883a 	add	r2,r3,r5
    d5f4:	898d803a 	cmpltu	r6,r17,r6
    d5f8:	3087883a 	add	r3,r6,r2
    d5fc:	4821883a 	mov	r16,r9
    d600:	003f0506 	br	d218 <__alt_data_end+0xfffdc4d8>
    d604:	10002b1e 	bne	r2,zero,d6b4 <__subdf3+0x71c>
    d608:	2984b03a 	or	r2,r5,r6
    d60c:	10008026 	beq	r2,zero,d810 <__subdf3+0x878>
    d610:	2807883a 	mov	r3,r5
    d614:	3023883a 	mov	r17,r6
    d618:	3825883a 	mov	r18,r7
    d61c:	0401ffc4 	movi	r16,2047
    d620:	003e7e06 	br	d01c <__alt_data_end+0xfffdc2dc>
    d624:	3809883a 	mov	r4,r7
    d628:	0011883a 	mov	r8,zero
    d62c:	0005883a 	mov	r2,zero
    d630:	003ee306 	br	d1c0 <__alt_data_end+0xfffdc480>
    d634:	1c62b03a 	or	r17,r3,r17
    d638:	8822c03a 	cmpne	r17,r17,zero
    d63c:	0005883a 	mov	r2,zero
    d640:	003f8906 	br	d468 <__alt_data_end+0xfffdc728>
    d644:	3809883a 	mov	r4,r7
    d648:	4821883a 	mov	r16,r9
    d64c:	0011883a 	mov	r8,zero
    d650:	0005883a 	mov	r2,zero
    d654:	003eda06 	br	d1c0 <__alt_data_end+0xfffdc480>
    d658:	0101ffc4 	movi	r4,2047
    d65c:	49003b26 	beq	r9,r4,d74c <__subdf3+0x7b4>
    d660:	0085c83a 	sub	r2,zero,r2
    d664:	18c02034 	orhi	r3,r3,128
    d668:	01000e04 	movi	r4,56
    d66c:	20806e16 	blt	r4,r2,d828 <__subdf3+0x890>
    d670:	010007c4 	movi	r4,31
    d674:	20807716 	blt	r4,r2,d854 <__subdf3+0x8bc>
    d678:	01000804 	movi	r4,32
    d67c:	2089c83a 	sub	r4,r4,r2
    d680:	1914983a 	sll	r10,r3,r4
    d684:	8890d83a 	srl	r8,r17,r2
    d688:	8908983a 	sll	r4,r17,r4
    d68c:	1884d83a 	srl	r2,r3,r2
    d690:	5222b03a 	or	r17,r10,r8
    d694:	2006c03a 	cmpne	r3,r4,zero
    d698:	88e2b03a 	or	r17,r17,r3
    d69c:	89a3883a 	add	r17,r17,r6
    d6a0:	1145883a 	add	r2,r2,r5
    d6a4:	898d803a 	cmpltu	r6,r17,r6
    d6a8:	3087883a 	add	r3,r6,r2
    d6ac:	4821883a 	mov	r16,r9
    d6b0:	003ed906 	br	d218 <__alt_data_end+0xfffdc4d8>
    d6b4:	2984b03a 	or	r2,r5,r6
    d6b8:	10004226 	beq	r2,zero,d7c4 <__subdf3+0x82c>
    d6bc:	1808d0fa 	srli	r4,r3,3
    d6c0:	8822d0fa 	srli	r17,r17,3
    d6c4:	1806977a 	slli	r3,r3,29
    d6c8:	2080022c 	andhi	r2,r4,8
    d6cc:	1c62b03a 	or	r17,r3,r17
    d6d0:	10000826 	beq	r2,zero,d6f4 <__subdf3+0x75c>
    d6d4:	2812d0fa 	srli	r9,r5,3
    d6d8:	4880022c 	andhi	r2,r9,8
    d6dc:	1000051e 	bne	r2,zero,d6f4 <__subdf3+0x75c>
    d6e0:	300cd0fa 	srli	r6,r6,3
    d6e4:	2804977a 	slli	r2,r5,29
    d6e8:	4809883a 	mov	r4,r9
    d6ec:	3825883a 	mov	r18,r7
    d6f0:	11a2b03a 	or	r17,r2,r6
    d6f4:	8806d77a 	srli	r3,r17,29
    d6f8:	200890fa 	slli	r4,r4,3
    d6fc:	882290fa 	slli	r17,r17,3
    d700:	0401ffc4 	movi	r16,2047
    d704:	1906b03a 	or	r3,r3,r4
    d708:	003e4406 	br	d01c <__alt_data_end+0xfffdc2dc>
    d70c:	2984b03a 	or	r2,r5,r6
    d710:	103e4226 	beq	r2,zero,d01c <__alt_data_end+0xfffdc2dc>
    d714:	8989c83a 	sub	r4,r17,r6
    d718:	8911803a 	cmpltu	r8,r17,r4
    d71c:	1945c83a 	sub	r2,r3,r5
    d720:	1205c83a 	sub	r2,r2,r8
    d724:	1200202c 	andhi	r8,r2,128
    d728:	403e9a26 	beq	r8,zero,d194 <__alt_data_end+0xfffdc454>
    d72c:	3463c83a 	sub	r17,r6,r17
    d730:	28c5c83a 	sub	r2,r5,r3
    d734:	344d803a 	cmpltu	r6,r6,r17
    d738:	1187c83a 	sub	r3,r2,r6
    d73c:	3825883a 	mov	r18,r7
    d740:	003e3606 	br	d01c <__alt_data_end+0xfffdc2dc>
    d744:	0101ffc4 	movi	r4,2047
    d748:	493fc71e 	bne	r9,r4,d668 <__alt_data_end+0xfffdc928>
    d74c:	2807883a 	mov	r3,r5
    d750:	3023883a 	mov	r17,r6
    d754:	4821883a 	mov	r16,r9
    d758:	003e3006 	br	d01c <__alt_data_end+0xfffdc2dc>
    d75c:	10003626 	beq	r2,zero,d838 <__subdf3+0x8a0>
    d760:	2984b03a 	or	r2,r5,r6
    d764:	10001726 	beq	r2,zero,d7c4 <__subdf3+0x82c>
    d768:	1808d0fa 	srli	r4,r3,3
    d76c:	8822d0fa 	srli	r17,r17,3
    d770:	1806977a 	slli	r3,r3,29
    d774:	2080022c 	andhi	r2,r4,8
    d778:	1c62b03a 	or	r17,r3,r17
    d77c:	10000726 	beq	r2,zero,d79c <__subdf3+0x804>
    d780:	2812d0fa 	srli	r9,r5,3
    d784:	4880022c 	andhi	r2,r9,8
    d788:	1000041e 	bne	r2,zero,d79c <__subdf3+0x804>
    d78c:	300cd0fa 	srli	r6,r6,3
    d790:	2804977a 	slli	r2,r5,29
    d794:	4809883a 	mov	r4,r9
    d798:	11a2b03a 	or	r17,r2,r6
    d79c:	8806d77a 	srli	r3,r17,29
    d7a0:	200890fa 	slli	r4,r4,3
    d7a4:	882290fa 	slli	r17,r17,3
    d7a8:	3825883a 	mov	r18,r7
    d7ac:	1906b03a 	or	r3,r3,r4
    d7b0:	0401ffc4 	movi	r16,2047
    d7b4:	003e1906 	br	d01c <__alt_data_end+0xfffdc2dc>
    d7b8:	000b883a 	mov	r5,zero
    d7bc:	0005883a 	mov	r2,zero
    d7c0:	003e2e06 	br	d07c <__alt_data_end+0xfffdc33c>
    d7c4:	0401ffc4 	movi	r16,2047
    d7c8:	003e1406 	br	d01c <__alt_data_end+0xfffdc2dc>
    d7cc:	0005883a 	mov	r2,zero
    d7d0:	003f7506 	br	d5a8 <__alt_data_end+0xfffdc868>
    d7d4:	0005883a 	mov	r2,zero
    d7d8:	0009883a 	mov	r4,zero
    d7dc:	003e7806 	br	d1c0 <__alt_data_end+0xfffdc480>
    d7e0:	123ff804 	addi	r8,r2,-32
    d7e4:	01000804 	movi	r4,32
    d7e8:	1a10d83a 	srl	r8,r3,r8
    d7ec:	11002526 	beq	r2,r4,d884 <__subdf3+0x8ec>
    d7f0:	01001004 	movi	r4,64
    d7f4:	2085c83a 	sub	r2,r4,r2
    d7f8:	1884983a 	sll	r2,r3,r2
    d7fc:	1444b03a 	or	r2,r2,r17
    d800:	1004c03a 	cmpne	r2,r2,zero
    d804:	40a2b03a 	or	r17,r8,r2
    d808:	0005883a 	mov	r2,zero
    d80c:	003f1606 	br	d468 <__alt_data_end+0xfffdc728>
    d810:	02000434 	movhi	r8,16
    d814:	0009883a 	mov	r4,zero
    d818:	423fffc4 	addi	r8,r8,-1
    d81c:	00bfffc4 	movi	r2,-1
    d820:	0401ffc4 	movi	r16,2047
    d824:	003e6606 	br	d1c0 <__alt_data_end+0xfffdc480>
    d828:	1c62b03a 	or	r17,r3,r17
    d82c:	8822c03a 	cmpne	r17,r17,zero
    d830:	0005883a 	mov	r2,zero
    d834:	003f9906 	br	d69c <__alt_data_end+0xfffdc95c>
    d838:	2807883a 	mov	r3,r5
    d83c:	3023883a 	mov	r17,r6
    d840:	0401ffc4 	movi	r16,2047
    d844:	003df506 	br	d01c <__alt_data_end+0xfffdc2dc>
    d848:	2807883a 	mov	r3,r5
    d84c:	3023883a 	mov	r17,r6
    d850:	003df206 	br	d01c <__alt_data_end+0xfffdc2dc>
    d854:	123ff804 	addi	r8,r2,-32
    d858:	01000804 	movi	r4,32
    d85c:	1a10d83a 	srl	r8,r3,r8
    d860:	11000a26 	beq	r2,r4,d88c <__subdf3+0x8f4>
    d864:	01001004 	movi	r4,64
    d868:	2085c83a 	sub	r2,r4,r2
    d86c:	1884983a 	sll	r2,r3,r2
    d870:	1444b03a 	or	r2,r2,r17
    d874:	1004c03a 	cmpne	r2,r2,zero
    d878:	40a2b03a 	or	r17,r8,r2
    d87c:	0005883a 	mov	r2,zero
    d880:	003f8606 	br	d69c <__alt_data_end+0xfffdc95c>
    d884:	0005883a 	mov	r2,zero
    d888:	003fdc06 	br	d7fc <__alt_data_end+0xfffdcabc>
    d88c:	0005883a 	mov	r2,zero
    d890:	003ff706 	br	d870 <__alt_data_end+0xfffdcb30>

0000d894 <__fixdfsi>:
    d894:	280cd53a 	srli	r6,r5,20
    d898:	00c00434 	movhi	r3,16
    d89c:	18ffffc4 	addi	r3,r3,-1
    d8a0:	3181ffcc 	andi	r6,r6,2047
    d8a4:	01c0ff84 	movi	r7,1022
    d8a8:	28c6703a 	and	r3,r5,r3
    d8ac:	280ad7fa 	srli	r5,r5,31
    d8b0:	3980120e 	bge	r7,r6,d8fc <__fixdfsi+0x68>
    d8b4:	00810744 	movi	r2,1053
    d8b8:	11800c16 	blt	r2,r6,d8ec <__fixdfsi+0x58>
    d8bc:	00810cc4 	movi	r2,1075
    d8c0:	1185c83a 	sub	r2,r2,r6
    d8c4:	01c007c4 	movi	r7,31
    d8c8:	18c00434 	orhi	r3,r3,16
    d8cc:	38800d16 	blt	r7,r2,d904 <__fixdfsi+0x70>
    d8d0:	31befb44 	addi	r6,r6,-1043
    d8d4:	2084d83a 	srl	r2,r4,r2
    d8d8:	1986983a 	sll	r3,r3,r6
    d8dc:	1884b03a 	or	r2,r3,r2
    d8e0:	28000726 	beq	r5,zero,d900 <__fixdfsi+0x6c>
    d8e4:	0085c83a 	sub	r2,zero,r2
    d8e8:	f800283a 	ret
    d8ec:	00a00034 	movhi	r2,32768
    d8f0:	10bfffc4 	addi	r2,r2,-1
    d8f4:	2885883a 	add	r2,r5,r2
    d8f8:	f800283a 	ret
    d8fc:	0005883a 	mov	r2,zero
    d900:	f800283a 	ret
    d904:	008104c4 	movi	r2,1043
    d908:	1185c83a 	sub	r2,r2,r6
    d90c:	1884d83a 	srl	r2,r3,r2
    d910:	003ff306 	br	d8e0 <__alt_data_end+0xfffdcba0>

0000d914 <__floatsidf>:
    d914:	defffd04 	addi	sp,sp,-12
    d918:	dfc00215 	stw	ra,8(sp)
    d91c:	dc400115 	stw	r17,4(sp)
    d920:	dc000015 	stw	r16,0(sp)
    d924:	20002b26 	beq	r4,zero,d9d4 <__floatsidf+0xc0>
    d928:	2023883a 	mov	r17,r4
    d92c:	2020d7fa 	srli	r16,r4,31
    d930:	20002d16 	blt	r4,zero,d9e8 <__floatsidf+0xd4>
    d934:	8809883a 	mov	r4,r17
    d938:	000da980 	call	da98 <__clzsi2>
    d93c:	01410784 	movi	r5,1054
    d940:	288bc83a 	sub	r5,r5,r2
    d944:	01010cc4 	movi	r4,1075
    d948:	2149c83a 	sub	r4,r4,r5
    d94c:	00c007c4 	movi	r3,31
    d950:	1900160e 	bge	r3,r4,d9ac <__floatsidf+0x98>
    d954:	00c104c4 	movi	r3,1043
    d958:	1947c83a 	sub	r3,r3,r5
    d95c:	88c6983a 	sll	r3,r17,r3
    d960:	00800434 	movhi	r2,16
    d964:	10bfffc4 	addi	r2,r2,-1
    d968:	1886703a 	and	r3,r3,r2
    d96c:	2941ffcc 	andi	r5,r5,2047
    d970:	800d883a 	mov	r6,r16
    d974:	0005883a 	mov	r2,zero
    d978:	280a953a 	slli	r5,r5,20
    d97c:	31803fcc 	andi	r6,r6,255
    d980:	01000434 	movhi	r4,16
    d984:	300c97fa 	slli	r6,r6,31
    d988:	213fffc4 	addi	r4,r4,-1
    d98c:	1906703a 	and	r3,r3,r4
    d990:	1946b03a 	or	r3,r3,r5
    d994:	1986b03a 	or	r3,r3,r6
    d998:	dfc00217 	ldw	ra,8(sp)
    d99c:	dc400117 	ldw	r17,4(sp)
    d9a0:	dc000017 	ldw	r16,0(sp)
    d9a4:	dec00304 	addi	sp,sp,12
    d9a8:	f800283a 	ret
    d9ac:	00c002c4 	movi	r3,11
    d9b0:	1887c83a 	sub	r3,r3,r2
    d9b4:	88c6d83a 	srl	r3,r17,r3
    d9b8:	8904983a 	sll	r2,r17,r4
    d9bc:	01000434 	movhi	r4,16
    d9c0:	213fffc4 	addi	r4,r4,-1
    d9c4:	2941ffcc 	andi	r5,r5,2047
    d9c8:	1906703a 	and	r3,r3,r4
    d9cc:	800d883a 	mov	r6,r16
    d9d0:	003fe906 	br	d978 <__alt_data_end+0xfffdcc38>
    d9d4:	000d883a 	mov	r6,zero
    d9d8:	000b883a 	mov	r5,zero
    d9dc:	0007883a 	mov	r3,zero
    d9e0:	0005883a 	mov	r2,zero
    d9e4:	003fe406 	br	d978 <__alt_data_end+0xfffdcc38>
    d9e8:	0123c83a 	sub	r17,zero,r4
    d9ec:	003fd106 	br	d934 <__alt_data_end+0xfffdcbf4>

0000d9f0 <__floatunsidf>:
    d9f0:	defffe04 	addi	sp,sp,-8
    d9f4:	dc000015 	stw	r16,0(sp)
    d9f8:	dfc00115 	stw	ra,4(sp)
    d9fc:	2021883a 	mov	r16,r4
    da00:	20002226 	beq	r4,zero,da8c <__floatunsidf+0x9c>
    da04:	000da980 	call	da98 <__clzsi2>
    da08:	01010784 	movi	r4,1054
    da0c:	2089c83a 	sub	r4,r4,r2
    da10:	01810cc4 	movi	r6,1075
    da14:	310dc83a 	sub	r6,r6,r4
    da18:	00c007c4 	movi	r3,31
    da1c:	1980120e 	bge	r3,r6,da68 <__floatunsidf+0x78>
    da20:	00c104c4 	movi	r3,1043
    da24:	1907c83a 	sub	r3,r3,r4
    da28:	80ca983a 	sll	r5,r16,r3
    da2c:	00800434 	movhi	r2,16
    da30:	10bfffc4 	addi	r2,r2,-1
    da34:	2101ffcc 	andi	r4,r4,2047
    da38:	0021883a 	mov	r16,zero
    da3c:	288a703a 	and	r5,r5,r2
    da40:	2008953a 	slli	r4,r4,20
    da44:	00c00434 	movhi	r3,16
    da48:	18ffffc4 	addi	r3,r3,-1
    da4c:	28c6703a 	and	r3,r5,r3
    da50:	8005883a 	mov	r2,r16
    da54:	1906b03a 	or	r3,r3,r4
    da58:	dfc00117 	ldw	ra,4(sp)
    da5c:	dc000017 	ldw	r16,0(sp)
    da60:	dec00204 	addi	sp,sp,8
    da64:	f800283a 	ret
    da68:	00c002c4 	movi	r3,11
    da6c:	188bc83a 	sub	r5,r3,r2
    da70:	814ad83a 	srl	r5,r16,r5
    da74:	00c00434 	movhi	r3,16
    da78:	18ffffc4 	addi	r3,r3,-1
    da7c:	81a0983a 	sll	r16,r16,r6
    da80:	2101ffcc 	andi	r4,r4,2047
    da84:	28ca703a 	and	r5,r5,r3
    da88:	003fed06 	br	da40 <__alt_data_end+0xfffdcd00>
    da8c:	0009883a 	mov	r4,zero
    da90:	000b883a 	mov	r5,zero
    da94:	003fea06 	br	da40 <__alt_data_end+0xfffdcd00>

0000da98 <__clzsi2>:
    da98:	00bfffd4 	movui	r2,65535
    da9c:	11000536 	bltu	r2,r4,dab4 <__clzsi2+0x1c>
    daa0:	00803fc4 	movi	r2,255
    daa4:	11000f36 	bltu	r2,r4,dae4 <__clzsi2+0x4c>
    daa8:	00800804 	movi	r2,32
    daac:	0007883a 	mov	r3,zero
    dab0:	00000506 	br	dac8 <__clzsi2+0x30>
    dab4:	00804034 	movhi	r2,256
    dab8:	10bfffc4 	addi	r2,r2,-1
    dabc:	11000c2e 	bgeu	r2,r4,daf0 <__clzsi2+0x58>
    dac0:	00800204 	movi	r2,8
    dac4:	00c00604 	movi	r3,24
    dac8:	20c8d83a 	srl	r4,r4,r3
    dacc:	00c000b4 	movhi	r3,2
    dad0:	18e38d04 	addi	r3,r3,-29132
    dad4:	1909883a 	add	r4,r3,r4
    dad8:	20c00003 	ldbu	r3,0(r4)
    dadc:	10c5c83a 	sub	r2,r2,r3
    dae0:	f800283a 	ret
    dae4:	00800604 	movi	r2,24
    dae8:	00c00204 	movi	r3,8
    daec:	003ff606 	br	dac8 <__alt_data_end+0xfffdcd88>
    daf0:	00800404 	movi	r2,16
    daf4:	1007883a 	mov	r3,r2
    daf8:	003ff306 	br	dac8 <__alt_data_end+0xfffdcd88>

0000dafc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dafc:	defffe04 	addi	sp,sp,-8
    db00:	dfc00115 	stw	ra,4(sp)
    db04:	df000015 	stw	fp,0(sp)
    db08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    db0c:	d0a00b17 	ldw	r2,-32724(gp)
    db10:	10000326 	beq	r2,zero,db20 <alt_get_errno+0x24>
    db14:	d0a00b17 	ldw	r2,-32724(gp)
    db18:	103ee83a 	callr	r2
    db1c:	00000106 	br	db24 <alt_get_errno+0x28>
    db20:	d0a71a04 	addi	r2,gp,-25496
}
    db24:	e037883a 	mov	sp,fp
    db28:	dfc00117 	ldw	ra,4(sp)
    db2c:	df000017 	ldw	fp,0(sp)
    db30:	dec00204 	addi	sp,sp,8
    db34:	f800283a 	ret

0000db38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    db38:	defffb04 	addi	sp,sp,-20
    db3c:	dfc00415 	stw	ra,16(sp)
    db40:	df000315 	stw	fp,12(sp)
    db44:	df000304 	addi	fp,sp,12
    db48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    db4c:	e0bfff17 	ldw	r2,-4(fp)
    db50:	10000816 	blt	r2,zero,db74 <close+0x3c>
    db54:	01400304 	movi	r5,12
    db58:	e13fff17 	ldw	r4,-4(fp)
    db5c:	0000bc00 	call	bc0 <__mulsi3>
    db60:	1007883a 	mov	r3,r2
    db64:	008000b4 	movhi	r2,2
    db68:	10a65904 	addi	r2,r2,-26268
    db6c:	1885883a 	add	r2,r3,r2
    db70:	00000106 	br	db78 <close+0x40>
    db74:	0005883a 	mov	r2,zero
    db78:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    db7c:	e0bffd17 	ldw	r2,-12(fp)
    db80:	10001926 	beq	r2,zero,dbe8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    db84:	e0bffd17 	ldw	r2,-12(fp)
    db88:	10800017 	ldw	r2,0(r2)
    db8c:	10800417 	ldw	r2,16(r2)
    db90:	10000626 	beq	r2,zero,dbac <close+0x74>
    db94:	e0bffd17 	ldw	r2,-12(fp)
    db98:	10800017 	ldw	r2,0(r2)
    db9c:	10800417 	ldw	r2,16(r2)
    dba0:	e13ffd17 	ldw	r4,-12(fp)
    dba4:	103ee83a 	callr	r2
    dba8:	00000106 	br	dbb0 <close+0x78>
    dbac:	0005883a 	mov	r2,zero
    dbb0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    dbb4:	e13fff17 	ldw	r4,-4(fp)
    dbb8:	000e2400 	call	e240 <alt_release_fd>
    if (rval < 0)
    dbbc:	e0bffe17 	ldw	r2,-8(fp)
    dbc0:	1000070e 	bge	r2,zero,dbe0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    dbc4:	000dafc0 	call	dafc <alt_get_errno>
    dbc8:	1007883a 	mov	r3,r2
    dbcc:	e0bffe17 	ldw	r2,-8(fp)
    dbd0:	0085c83a 	sub	r2,zero,r2
    dbd4:	18800015 	stw	r2,0(r3)
      return -1;
    dbd8:	00bfffc4 	movi	r2,-1
    dbdc:	00000706 	br	dbfc <close+0xc4>
    }
    return 0;
    dbe0:	0005883a 	mov	r2,zero
    dbe4:	00000506 	br	dbfc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dbe8:	000dafc0 	call	dafc <alt_get_errno>
    dbec:	1007883a 	mov	r3,r2
    dbf0:	00801444 	movi	r2,81
    dbf4:	18800015 	stw	r2,0(r3)
    return -1;
    dbf8:	00bfffc4 	movi	r2,-1
  }
}
    dbfc:	e037883a 	mov	sp,fp
    dc00:	dfc00117 	ldw	ra,4(sp)
    dc04:	df000017 	ldw	fp,0(sp)
    dc08:	dec00204 	addi	sp,sp,8
    dc0c:	f800283a 	ret

0000dc10 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    dc10:	defffd04 	addi	sp,sp,-12
    dc14:	df000215 	stw	fp,8(sp)
    dc18:	df000204 	addi	fp,sp,8
    dc1c:	e13ffe15 	stw	r4,-8(fp)
    dc20:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    dc24:	0001883a 	nop
    dc28:	e037883a 	mov	sp,fp
    dc2c:	df000017 	ldw	fp,0(sp)
    dc30:	dec00104 	addi	sp,sp,4
    dc34:	f800283a 	ret

0000dc38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    dc38:	defffc04 	addi	sp,sp,-16
    dc3c:	df000315 	stw	fp,12(sp)
    dc40:	df000304 	addi	fp,sp,12
    dc44:	e13ffd15 	stw	r4,-12(fp)
    dc48:	e17ffe15 	stw	r5,-8(fp)
    dc4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    dc50:	e0bfff17 	ldw	r2,-4(fp)
}
    dc54:	e037883a 	mov	sp,fp
    dc58:	df000017 	ldw	fp,0(sp)
    dc5c:	dec00104 	addi	sp,sp,4
    dc60:	f800283a 	ret

0000dc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dc64:	defffe04 	addi	sp,sp,-8
    dc68:	dfc00115 	stw	ra,4(sp)
    dc6c:	df000015 	stw	fp,0(sp)
    dc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dc74:	d0a00b17 	ldw	r2,-32724(gp)
    dc78:	10000326 	beq	r2,zero,dc88 <alt_get_errno+0x24>
    dc7c:	d0a00b17 	ldw	r2,-32724(gp)
    dc80:	103ee83a 	callr	r2
    dc84:	00000106 	br	dc8c <alt_get_errno+0x28>
    dc88:	d0a71a04 	addi	r2,gp,-25496
}
    dc8c:	e037883a 	mov	sp,fp
    dc90:	dfc00117 	ldw	ra,4(sp)
    dc94:	df000017 	ldw	fp,0(sp)
    dc98:	dec00204 	addi	sp,sp,8
    dc9c:	f800283a 	ret

0000dca0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    dca0:	defffb04 	addi	sp,sp,-20
    dca4:	dfc00415 	stw	ra,16(sp)
    dca8:	df000315 	stw	fp,12(sp)
    dcac:	df000304 	addi	fp,sp,12
    dcb0:	e13ffe15 	stw	r4,-8(fp)
    dcb4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dcb8:	e0bffe17 	ldw	r2,-8(fp)
    dcbc:	10000816 	blt	r2,zero,dce0 <fstat+0x40>
    dcc0:	01400304 	movi	r5,12
    dcc4:	e13ffe17 	ldw	r4,-8(fp)
    dcc8:	0000bc00 	call	bc0 <__mulsi3>
    dccc:	1007883a 	mov	r3,r2
    dcd0:	008000b4 	movhi	r2,2
    dcd4:	10a65904 	addi	r2,r2,-26268
    dcd8:	1885883a 	add	r2,r3,r2
    dcdc:	00000106 	br	dce4 <fstat+0x44>
    dce0:	0005883a 	mov	r2,zero
    dce4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    dce8:	e0bffd17 	ldw	r2,-12(fp)
    dcec:	10001026 	beq	r2,zero,dd30 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    dcf0:	e0bffd17 	ldw	r2,-12(fp)
    dcf4:	10800017 	ldw	r2,0(r2)
    dcf8:	10800817 	ldw	r2,32(r2)
    dcfc:	10000726 	beq	r2,zero,dd1c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    dd00:	e0bffd17 	ldw	r2,-12(fp)
    dd04:	10800017 	ldw	r2,0(r2)
    dd08:	10800817 	ldw	r2,32(r2)
    dd0c:	e17fff17 	ldw	r5,-4(fp)
    dd10:	e13ffd17 	ldw	r4,-12(fp)
    dd14:	103ee83a 	callr	r2
    dd18:	00000a06 	br	dd44 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    dd1c:	e0bfff17 	ldw	r2,-4(fp)
    dd20:	00c80004 	movi	r3,8192
    dd24:	10c00115 	stw	r3,4(r2)
      return 0;
    dd28:	0005883a 	mov	r2,zero
    dd2c:	00000506 	br	dd44 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    dd30:	000dc640 	call	dc64 <alt_get_errno>
    dd34:	1007883a 	mov	r3,r2
    dd38:	00801444 	movi	r2,81
    dd3c:	18800015 	stw	r2,0(r3)
    return -1;
    dd40:	00bfffc4 	movi	r2,-1
  }
}
    dd44:	e037883a 	mov	sp,fp
    dd48:	dfc00117 	ldw	ra,4(sp)
    dd4c:	df000017 	ldw	fp,0(sp)
    dd50:	dec00204 	addi	sp,sp,8
    dd54:	f800283a 	ret

0000dd58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd58:	defffe04 	addi	sp,sp,-8
    dd5c:	dfc00115 	stw	ra,4(sp)
    dd60:	df000015 	stw	fp,0(sp)
    dd64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    dd68:	d0a00b17 	ldw	r2,-32724(gp)
    dd6c:	10000326 	beq	r2,zero,dd7c <alt_get_errno+0x24>
    dd70:	d0a00b17 	ldw	r2,-32724(gp)
    dd74:	103ee83a 	callr	r2
    dd78:	00000106 	br	dd80 <alt_get_errno+0x28>
    dd7c:	d0a71a04 	addi	r2,gp,-25496
}
    dd80:	e037883a 	mov	sp,fp
    dd84:	dfc00117 	ldw	ra,4(sp)
    dd88:	df000017 	ldw	fp,0(sp)
    dd8c:	dec00204 	addi	sp,sp,8
    dd90:	f800283a 	ret

0000dd94 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    dd94:	deffed04 	addi	sp,sp,-76
    dd98:	dfc01215 	stw	ra,72(sp)
    dd9c:	df001115 	stw	fp,68(sp)
    dda0:	df001104 	addi	fp,sp,68
    dda4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    dda8:	e0bfff17 	ldw	r2,-4(fp)
    ddac:	10000816 	blt	r2,zero,ddd0 <isatty+0x3c>
    ddb0:	01400304 	movi	r5,12
    ddb4:	e13fff17 	ldw	r4,-4(fp)
    ddb8:	0000bc00 	call	bc0 <__mulsi3>
    ddbc:	1007883a 	mov	r3,r2
    ddc0:	008000b4 	movhi	r2,2
    ddc4:	10a65904 	addi	r2,r2,-26268
    ddc8:	1885883a 	add	r2,r3,r2
    ddcc:	00000106 	br	ddd4 <isatty+0x40>
    ddd0:	0005883a 	mov	r2,zero
    ddd4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ddd8:	e0bfef17 	ldw	r2,-68(fp)
    dddc:	10000e26 	beq	r2,zero,de18 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    dde0:	e0bfef17 	ldw	r2,-68(fp)
    dde4:	10800017 	ldw	r2,0(r2)
    dde8:	10800817 	ldw	r2,32(r2)
    ddec:	1000021e 	bne	r2,zero,ddf8 <isatty+0x64>
    {
      return 1;
    ddf0:	00800044 	movi	r2,1
    ddf4:	00000d06 	br	de2c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ddf8:	e0bff004 	addi	r2,fp,-64
    ddfc:	100b883a 	mov	r5,r2
    de00:	e13fff17 	ldw	r4,-4(fp)
    de04:	000dca00 	call	dca0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    de08:	e0bff117 	ldw	r2,-60(fp)
    de0c:	10880020 	cmpeqi	r2,r2,8192
    de10:	10803fcc 	andi	r2,r2,255
    de14:	00000506 	br	de2c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    de18:	000dd580 	call	dd58 <alt_get_errno>
    de1c:	1007883a 	mov	r3,r2
    de20:	00801444 	movi	r2,81
    de24:	18800015 	stw	r2,0(r3)
    return 0;
    de28:	0005883a 	mov	r2,zero
  }
}
    de2c:	e037883a 	mov	sp,fp
    de30:	dfc00117 	ldw	ra,4(sp)
    de34:	df000017 	ldw	fp,0(sp)
    de38:	dec00204 	addi	sp,sp,8
    de3c:	f800283a 	ret

0000de40 <alt_load_section>:
    de40:	defffc04 	addi	sp,sp,-16
    de44:	df000315 	stw	fp,12(sp)
    de48:	df000304 	addi	fp,sp,12
    de4c:	e13ffd15 	stw	r4,-12(fp)
    de50:	e17ffe15 	stw	r5,-8(fp)
    de54:	e1bfff15 	stw	r6,-4(fp)
    de58:	e0fffe17 	ldw	r3,-8(fp)
    de5c:	e0bffd17 	ldw	r2,-12(fp)
    de60:	18800c26 	beq	r3,r2,de94 <alt_load_section+0x54>
    de64:	00000806 	br	de88 <alt_load_section+0x48>
    de68:	e0bffe17 	ldw	r2,-8(fp)
    de6c:	10c00104 	addi	r3,r2,4
    de70:	e0fffe15 	stw	r3,-8(fp)
    de74:	e0fffd17 	ldw	r3,-12(fp)
    de78:	19000104 	addi	r4,r3,4
    de7c:	e13ffd15 	stw	r4,-12(fp)
    de80:	18c00017 	ldw	r3,0(r3)
    de84:	10c00015 	stw	r3,0(r2)
    de88:	e0fffe17 	ldw	r3,-8(fp)
    de8c:	e0bfff17 	ldw	r2,-4(fp)
    de90:	18bff51e 	bne	r3,r2,de68 <__alt_data_end+0xfffdd128>
    de94:	0001883a 	nop
    de98:	e037883a 	mov	sp,fp
    de9c:	df000017 	ldw	fp,0(sp)
    dea0:	dec00104 	addi	sp,sp,4
    dea4:	f800283a 	ret

0000dea8 <alt_load>:
    dea8:	defffe04 	addi	sp,sp,-8
    deac:	dfc00115 	stw	ra,4(sp)
    deb0:	df000015 	stw	fp,0(sp)
    deb4:	d839883a 	mov	fp,sp
    deb8:	018000b4 	movhi	r6,2
    debc:	31ab0e04 	addi	r6,r6,-21448
    dec0:	014000b4 	movhi	r5,2
    dec4:	29642604 	addi	r5,r5,-28520
    dec8:	010000b4 	movhi	r4,2
    decc:	212b0e04 	addi	r4,r4,-21448
    ded0:	000de400 	call	de40 <alt_load_section>
    ded4:	01800034 	movhi	r6,0
    ded8:	31808c04 	addi	r6,r6,560
    dedc:	01400034 	movhi	r5,0
    dee0:	29400804 	addi	r5,r5,32
    dee4:	01000034 	movhi	r4,0
    dee8:	21000804 	addi	r4,r4,32
    deec:	000de400 	call	de40 <alt_load_section>
    def0:	018000b4 	movhi	r6,2
    def4:	31a42604 	addi	r6,r6,-28520
    def8:	014000b4 	movhi	r5,2
    defc:	29610704 	addi	r5,r5,-31716
    df00:	010000b4 	movhi	r4,2
    df04:	21210704 	addi	r4,r4,-31716
    df08:	000de400 	call	de40 <alt_load_section>
    df0c:	0016fdc0 	call	16fdc <alt_dcache_flush_all>
    df10:	001719c0 	call	1719c <alt_icache_flush_all>
    df14:	0001883a 	nop
    df18:	e037883a 	mov	sp,fp
    df1c:	dfc00117 	ldw	ra,4(sp)
    df20:	df000017 	ldw	fp,0(sp)
    df24:	dec00204 	addi	sp,sp,8
    df28:	f800283a 	ret

0000df2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    df2c:	defffe04 	addi	sp,sp,-8
    df30:	dfc00115 	stw	ra,4(sp)
    df34:	df000015 	stw	fp,0(sp)
    df38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    df3c:	d0a00b17 	ldw	r2,-32724(gp)
    df40:	10000326 	beq	r2,zero,df50 <alt_get_errno+0x24>
    df44:	d0a00b17 	ldw	r2,-32724(gp)
    df48:	103ee83a 	callr	r2
    df4c:	00000106 	br	df54 <alt_get_errno+0x28>
    df50:	d0a71a04 	addi	r2,gp,-25496
}
    df54:	e037883a 	mov	sp,fp
    df58:	dfc00117 	ldw	ra,4(sp)
    df5c:	df000017 	ldw	fp,0(sp)
    df60:	dec00204 	addi	sp,sp,8
    df64:	f800283a 	ret

0000df68 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    df68:	defff904 	addi	sp,sp,-28
    df6c:	dfc00615 	stw	ra,24(sp)
    df70:	df000515 	stw	fp,20(sp)
    df74:	df000504 	addi	fp,sp,20
    df78:	e13ffd15 	stw	r4,-12(fp)
    df7c:	e17ffe15 	stw	r5,-8(fp)
    df80:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    df84:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    df88:	e0bffd17 	ldw	r2,-12(fp)
    df8c:	10000816 	blt	r2,zero,dfb0 <lseek+0x48>
    df90:	01400304 	movi	r5,12
    df94:	e13ffd17 	ldw	r4,-12(fp)
    df98:	0000bc00 	call	bc0 <__mulsi3>
    df9c:	1007883a 	mov	r3,r2
    dfa0:	008000b4 	movhi	r2,2
    dfa4:	10a65904 	addi	r2,r2,-26268
    dfa8:	1885883a 	add	r2,r3,r2
    dfac:	00000106 	br	dfb4 <lseek+0x4c>
    dfb0:	0005883a 	mov	r2,zero
    dfb4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    dfb8:	e0bffc17 	ldw	r2,-16(fp)
    dfbc:	10001026 	beq	r2,zero,e000 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    dfc0:	e0bffc17 	ldw	r2,-16(fp)
    dfc4:	10800017 	ldw	r2,0(r2)
    dfc8:	10800717 	ldw	r2,28(r2)
    dfcc:	10000926 	beq	r2,zero,dff4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    dfd0:	e0bffc17 	ldw	r2,-16(fp)
    dfd4:	10800017 	ldw	r2,0(r2)
    dfd8:	10800717 	ldw	r2,28(r2)
    dfdc:	e1bfff17 	ldw	r6,-4(fp)
    dfe0:	e17ffe17 	ldw	r5,-8(fp)
    dfe4:	e13ffc17 	ldw	r4,-16(fp)
    dfe8:	103ee83a 	callr	r2
    dfec:	e0bffb15 	stw	r2,-20(fp)
    dff0:	00000506 	br	e008 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dff4:	00bfde84 	movi	r2,-134
    dff8:	e0bffb15 	stw	r2,-20(fp)
    dffc:	00000206 	br	e008 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    e000:	00bfebc4 	movi	r2,-81
    e004:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    e008:	e0bffb17 	ldw	r2,-20(fp)
    e00c:	1000070e 	bge	r2,zero,e02c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    e010:	000df2c0 	call	df2c <alt_get_errno>
    e014:	1007883a 	mov	r3,r2
    e018:	e0bffb17 	ldw	r2,-20(fp)
    e01c:	0085c83a 	sub	r2,zero,r2
    e020:	18800015 	stw	r2,0(r3)
    rc = -1;
    e024:	00bfffc4 	movi	r2,-1
    e028:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    e02c:	e0bffb17 	ldw	r2,-20(fp)
}
    e030:	e037883a 	mov	sp,fp
    e034:	dfc00117 	ldw	ra,4(sp)
    e038:	df000017 	ldw	fp,0(sp)
    e03c:	dec00204 	addi	sp,sp,8
    e040:	f800283a 	ret

0000e044 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    e044:	defff904 	addi	sp,sp,-28
    e048:	dfc00615 	stw	ra,24(sp)
    e04c:	df000515 	stw	fp,20(sp)
    e050:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    e054:	0009883a 	mov	r4,zero
    e058:	0015fec0 	call	15fec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    e05c:	000f0300 	call	f030 <OSInit>
    e060:	01000044 	movi	r4,1
    e064:	001398c0 	call	1398c <OSSemCreate>
    e068:	d0a72315 	stw	r2,-25460(gp)
    e06c:	01000044 	movi	r4,1
    e070:	001398c0 	call	1398c <OSSemCreate>
    e074:	d0a72515 	stw	r2,-25452(gp)
    e078:	d0a71e04 	addi	r2,gp,-25480
    e07c:	e0bffc15 	stw	r2,-16(fp)
    e080:	00800044 	movi	r2,1
    e084:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    e088:	e0bffd0b 	ldhu	r2,-12(fp)
    e08c:	1009883a 	mov	r4,r2
    e090:	001398c0 	call	1398c <OSSemCreate>
    e094:	1007883a 	mov	r3,r2
    e098:	e0bffc17 	ldw	r2,-16(fp)
    e09c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    e0a0:	00160240 	call	16024 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    e0a4:	018000b4 	movhi	r6,2
    e0a8:	31a3d004 	addi	r6,r6,-28864
    e0ac:	014000b4 	movhi	r5,2
    e0b0:	2963d004 	addi	r5,r5,-28864
    e0b4:	010000b4 	movhi	r4,2
    e0b8:	2123d004 	addi	r4,r4,-28864
    e0bc:	00175400 	call	17540 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    e0c0:	00170dc0 	call	170dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    e0c4:	01000074 	movhi	r4,1
    e0c8:	211c4f04 	addi	r4,r4,28988
    e0cc:	00180880 	call	18088 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    e0d0:	d0a71f17 	ldw	r2,-25476(gp)
    e0d4:	d0e72017 	ldw	r3,-25472(gp)
    e0d8:	d1272117 	ldw	r4,-25468(gp)
    e0dc:	200d883a 	mov	r6,r4
    e0e0:	180b883a 	mov	r5,r3
    e0e4:	1009883a 	mov	r4,r2
    e0e8:	00006380 	call	638 <main>
    e0ec:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    e0f0:	01000044 	movi	r4,1
    e0f4:	000db380 	call	db38 <close>
  exit (result);
    e0f8:	e13ffb17 	ldw	r4,-20(fp)
    e0fc:	001809c0 	call	1809c <exit>

0000e100 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e100:	defffe04 	addi	sp,sp,-8
    e104:	dfc00115 	stw	ra,4(sp)
    e108:	df000015 	stw	fp,0(sp)
    e10c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e110:	d0a00b17 	ldw	r2,-32724(gp)
    e114:	10000326 	beq	r2,zero,e124 <alt_get_errno+0x24>
    e118:	d0a00b17 	ldw	r2,-32724(gp)
    e11c:	103ee83a 	callr	r2
    e120:	00000106 	br	e128 <alt_get_errno+0x28>
    e124:	d0a71a04 	addi	r2,gp,-25496
}
    e128:	e037883a 	mov	sp,fp
    e12c:	dfc00117 	ldw	ra,4(sp)
    e130:	df000017 	ldw	fp,0(sp)
    e134:	dec00204 	addi	sp,sp,8
    e138:	f800283a 	ret

0000e13c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    e13c:	defff904 	addi	sp,sp,-28
    e140:	dfc00615 	stw	ra,24(sp)
    e144:	df000515 	stw	fp,20(sp)
    e148:	df000504 	addi	fp,sp,20
    e14c:	e13ffd15 	stw	r4,-12(fp)
    e150:	e17ffe15 	stw	r5,-8(fp)
    e154:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e158:	e0bffd17 	ldw	r2,-12(fp)
    e15c:	10000816 	blt	r2,zero,e180 <read+0x44>
    e160:	01400304 	movi	r5,12
    e164:	e13ffd17 	ldw	r4,-12(fp)
    e168:	0000bc00 	call	bc0 <__mulsi3>
    e16c:	1007883a 	mov	r3,r2
    e170:	008000b4 	movhi	r2,2
    e174:	10a65904 	addi	r2,r2,-26268
    e178:	1885883a 	add	r2,r3,r2
    e17c:	00000106 	br	e184 <read+0x48>
    e180:	0005883a 	mov	r2,zero
    e184:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e188:	e0bffb17 	ldw	r2,-20(fp)
    e18c:	10002226 	beq	r2,zero,e218 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e190:	e0bffb17 	ldw	r2,-20(fp)
    e194:	10800217 	ldw	r2,8(r2)
    e198:	108000cc 	andi	r2,r2,3
    e19c:	10800060 	cmpeqi	r2,r2,1
    e1a0:	1000181e 	bne	r2,zero,e204 <read+0xc8>
        (fd->dev->read))
    e1a4:	e0bffb17 	ldw	r2,-20(fp)
    e1a8:	10800017 	ldw	r2,0(r2)
    e1ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    e1b0:	10001426 	beq	r2,zero,e204 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    e1b4:	e0bffb17 	ldw	r2,-20(fp)
    e1b8:	10800017 	ldw	r2,0(r2)
    e1bc:	10800517 	ldw	r2,20(r2)
    e1c0:	e0ffff17 	ldw	r3,-4(fp)
    e1c4:	180d883a 	mov	r6,r3
    e1c8:	e17ffe17 	ldw	r5,-8(fp)
    e1cc:	e13ffb17 	ldw	r4,-20(fp)
    e1d0:	103ee83a 	callr	r2
    e1d4:	e0bffc15 	stw	r2,-16(fp)
    e1d8:	e0bffc17 	ldw	r2,-16(fp)
    e1dc:	1000070e 	bge	r2,zero,e1fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
    e1e0:	000e1000 	call	e100 <alt_get_errno>
    e1e4:	1007883a 	mov	r3,r2
    e1e8:	e0bffc17 	ldw	r2,-16(fp)
    e1ec:	0085c83a 	sub	r2,zero,r2
    e1f0:	18800015 	stw	r2,0(r3)
          return -1;
    e1f4:	00bfffc4 	movi	r2,-1
    e1f8:	00000c06 	br	e22c <read+0xf0>
        }
        return rval;
    e1fc:	e0bffc17 	ldw	r2,-16(fp)
    e200:	00000a06 	br	e22c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    e204:	000e1000 	call	e100 <alt_get_errno>
    e208:	1007883a 	mov	r3,r2
    e20c:	00800344 	movi	r2,13
    e210:	18800015 	stw	r2,0(r3)
    e214:	00000406 	br	e228 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    e218:	000e1000 	call	e100 <alt_get_errno>
    e21c:	1007883a 	mov	r3,r2
    e220:	00801444 	movi	r2,81
    e224:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e228:	00bfffc4 	movi	r2,-1
}
    e22c:	e037883a 	mov	sp,fp
    e230:	dfc00117 	ldw	ra,4(sp)
    e234:	df000017 	ldw	fp,0(sp)
    e238:	dec00204 	addi	sp,sp,8
    e23c:	f800283a 	ret

0000e240 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    e240:	defffc04 	addi	sp,sp,-16
    e244:	dfc00315 	stw	ra,12(sp)
    e248:	df000215 	stw	fp,8(sp)
    e24c:	dc000115 	stw	r16,4(sp)
    e250:	df000204 	addi	fp,sp,8
    e254:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    e258:	e0bffe17 	ldw	r2,-8(fp)
    e25c:	108000d0 	cmplti	r2,r2,3
    e260:	1000111e 	bne	r2,zero,e2a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    e264:	040000b4 	movhi	r16,2
    e268:	84265904 	addi	r16,r16,-26268
    e26c:	e0bffe17 	ldw	r2,-8(fp)
    e270:	01400304 	movi	r5,12
    e274:	1009883a 	mov	r4,r2
    e278:	0000bc00 	call	bc0 <__mulsi3>
    e27c:	8085883a 	add	r2,r16,r2
    e280:	10800204 	addi	r2,r2,8
    e284:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    e288:	040000b4 	movhi	r16,2
    e28c:	84265904 	addi	r16,r16,-26268
    e290:	e0bffe17 	ldw	r2,-8(fp)
    e294:	01400304 	movi	r5,12
    e298:	1009883a 	mov	r4,r2
    e29c:	0000bc00 	call	bc0 <__mulsi3>
    e2a0:	8085883a 	add	r2,r16,r2
    e2a4:	10000015 	stw	zero,0(r2)
  }
}
    e2a8:	0001883a 	nop
    e2ac:	e6ffff04 	addi	sp,fp,-4
    e2b0:	dfc00217 	ldw	ra,8(sp)
    e2b4:	df000117 	ldw	fp,4(sp)
    e2b8:	dc000017 	ldw	r16,0(sp)
    e2bc:	dec00304 	addi	sp,sp,12
    e2c0:	f800283a 	ret

0000e2c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    e2c4:	defff904 	addi	sp,sp,-28
    e2c8:	df000615 	stw	fp,24(sp)
    e2cc:	df000604 	addi	fp,sp,24
    e2d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e2d4:	0005303a 	rdctl	r2,status
    e2d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e2dc:	e0fffe17 	ldw	r3,-8(fp)
    e2e0:	00bfff84 	movi	r2,-2
    e2e4:	1884703a 	and	r2,r3,r2
    e2e8:	1001703a 	wrctl	status,r2
  
  return context;
    e2ec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    e2f0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e2f4:	d0a00c17 	ldw	r2,-32720(gp)
    e2f8:	10c000c4 	addi	r3,r2,3
    e2fc:	00bfff04 	movi	r2,-4
    e300:	1884703a 	and	r2,r3,r2
    e304:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e308:	d0e00c17 	ldw	r3,-32720(gp)
    e30c:	e0bfff17 	ldw	r2,-4(fp)
    e310:	1887883a 	add	r3,r3,r2
    e314:	008000f4 	movhi	r2,3
    e318:	10835004 	addi	r2,r2,3392
    e31c:	10c0062e 	bgeu	r2,r3,e338 <sbrk+0x74>
    e320:	e0bffb17 	ldw	r2,-20(fp)
    e324:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e328:	e0bffa17 	ldw	r2,-24(fp)
    e32c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e330:	00bfffc4 	movi	r2,-1
    e334:	00000b06 	br	e364 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e338:	d0a00c17 	ldw	r2,-32720(gp)
    e33c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e340:	d0e00c17 	ldw	r3,-32720(gp)
    e344:	e0bfff17 	ldw	r2,-4(fp)
    e348:	1885883a 	add	r2,r3,r2
    e34c:	d0a00c15 	stw	r2,-32720(gp)
    e350:	e0bffb17 	ldw	r2,-20(fp)
    e354:	e0bffc15 	stw	r2,-16(fp)
    e358:	e0bffc17 	ldw	r2,-16(fp)
    e35c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e360:	e0bffd17 	ldw	r2,-12(fp)
} 
    e364:	e037883a 	mov	sp,fp
    e368:	df000017 	ldw	fp,0(sp)
    e36c:	dec00104 	addi	sp,sp,4
    e370:	f800283a 	ret

0000e374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e374:	defffe04 	addi	sp,sp,-8
    e378:	dfc00115 	stw	ra,4(sp)
    e37c:	df000015 	stw	fp,0(sp)
    e380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e384:	d0a00b17 	ldw	r2,-32724(gp)
    e388:	10000326 	beq	r2,zero,e398 <alt_get_errno+0x24>
    e38c:	d0a00b17 	ldw	r2,-32724(gp)
    e390:	103ee83a 	callr	r2
    e394:	00000106 	br	e39c <alt_get_errno+0x28>
    e398:	d0a71a04 	addi	r2,gp,-25496
}
    e39c:	e037883a 	mov	sp,fp
    e3a0:	dfc00117 	ldw	ra,4(sp)
    e3a4:	df000017 	ldw	fp,0(sp)
    e3a8:	dec00204 	addi	sp,sp,8
    e3ac:	f800283a 	ret

0000e3b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e3b0:	defff904 	addi	sp,sp,-28
    e3b4:	dfc00615 	stw	ra,24(sp)
    e3b8:	df000515 	stw	fp,20(sp)
    e3bc:	df000504 	addi	fp,sp,20
    e3c0:	e13ffd15 	stw	r4,-12(fp)
    e3c4:	e17ffe15 	stw	r5,-8(fp)
    e3c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e3cc:	e0bffd17 	ldw	r2,-12(fp)
    e3d0:	10000816 	blt	r2,zero,e3f4 <write+0x44>
    e3d4:	01400304 	movi	r5,12
    e3d8:	e13ffd17 	ldw	r4,-12(fp)
    e3dc:	0000bc00 	call	bc0 <__mulsi3>
    e3e0:	1007883a 	mov	r3,r2
    e3e4:	008000b4 	movhi	r2,2
    e3e8:	10a65904 	addi	r2,r2,-26268
    e3ec:	1885883a 	add	r2,r3,r2
    e3f0:	00000106 	br	e3f8 <write+0x48>
    e3f4:	0005883a 	mov	r2,zero
    e3f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e3fc:	e0bffb17 	ldw	r2,-20(fp)
    e400:	10002126 	beq	r2,zero,e488 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e404:	e0bffb17 	ldw	r2,-20(fp)
    e408:	10800217 	ldw	r2,8(r2)
    e40c:	108000cc 	andi	r2,r2,3
    e410:	10001826 	beq	r2,zero,e474 <write+0xc4>
    e414:	e0bffb17 	ldw	r2,-20(fp)
    e418:	10800017 	ldw	r2,0(r2)
    e41c:	10800617 	ldw	r2,24(r2)
    e420:	10001426 	beq	r2,zero,e474 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e424:	e0bffb17 	ldw	r2,-20(fp)
    e428:	10800017 	ldw	r2,0(r2)
    e42c:	10800617 	ldw	r2,24(r2)
    e430:	e0ffff17 	ldw	r3,-4(fp)
    e434:	180d883a 	mov	r6,r3
    e438:	e17ffe17 	ldw	r5,-8(fp)
    e43c:	e13ffb17 	ldw	r4,-20(fp)
    e440:	103ee83a 	callr	r2
    e444:	e0bffc15 	stw	r2,-16(fp)
    e448:	e0bffc17 	ldw	r2,-16(fp)
    e44c:	1000070e 	bge	r2,zero,e46c <write+0xbc>
      {
        ALT_ERRNO = -rval;
    e450:	000e3740 	call	e374 <alt_get_errno>
    e454:	1007883a 	mov	r3,r2
    e458:	e0bffc17 	ldw	r2,-16(fp)
    e45c:	0085c83a 	sub	r2,zero,r2
    e460:	18800015 	stw	r2,0(r3)
        return -1;
    e464:	00bfffc4 	movi	r2,-1
    e468:	00000c06 	br	e49c <write+0xec>
      }
      return rval;
    e46c:	e0bffc17 	ldw	r2,-16(fp)
    e470:	00000a06 	br	e49c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e474:	000e3740 	call	e374 <alt_get_errno>
    e478:	1007883a 	mov	r3,r2
    e47c:	00800344 	movi	r2,13
    e480:	18800015 	stw	r2,0(r3)
    e484:	00000406 	br	e498 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e488:	000e3740 	call	e374 <alt_get_errno>
    e48c:	1007883a 	mov	r3,r2
    e490:	00801444 	movi	r2,81
    e494:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e498:	00bfffc4 	movi	r2,-1
}
    e49c:	e037883a 	mov	sp,fp
    e4a0:	dfc00117 	ldw	ra,4(sp)
    e4a4:	df000017 	ldw	fp,0(sp)
    e4a8:	dec00204 	addi	sp,sp,8
    e4ac:	f800283a 	ret

0000e4b0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    e4b0:	deffdf04 	addi	sp,sp,-132
    e4b4:	dfc02015 	stw	ra,128(sp)
    e4b8:	df001f15 	stw	fp,124(sp)
    e4bc:	df001f04 	addi	fp,sp,124
    e4c0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e4c4:	e0bfe204 	addi	r2,fp,-120
    e4c8:	100b883a 	mov	r5,r2
    e4cc:	01003fc4 	movi	r4,255
    e4d0:	00159140 	call	15914 <OSTaskQuery>
    e4d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e4d8:	e0bffe83 	ldbu	r2,-6(fp)
    e4dc:	10803fcc 	andi	r2,r2,255
    e4e0:	10001e1e 	bne	r2,zero,e55c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    e4e4:	e0bfee83 	ldbu	r2,-70(fp)
    e4e8:	10803fcc 	andi	r2,r2,255
    e4ec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    e4f0:	d0a72317 	ldw	r2,-25460(gp)
    e4f4:	e0fffd04 	addi	r3,fp,-12
    e4f8:	180b883a 	mov	r5,r3
    e4fc:	1009883a 	mov	r4,r2
    e500:	001412c0 	call	1412c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    e504:	e0bffe43 	ldbu	r2,-7(fp)
    e508:	10803fcc 	andi	r2,r2,255
    e50c:	10000726 	beq	r2,zero,e52c <__env_lock+0x7c>
    e510:	d0a00d17 	ldw	r2,-32716(gp)
    e514:	e0ffe117 	ldw	r3,-124(fp)
    e518:	1880041e 	bne	r3,r2,e52c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    e51c:	d0a72217 	ldw	r2,-25464(gp)
    e520:	10800044 	addi	r2,r2,1
    e524:	d0a72215 	stw	r2,-25464(gp)
    e528:	00000a06 	br	e554 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    e52c:	d0a72317 	ldw	r2,-25460(gp)
    e530:	e0fffe84 	addi	r3,fp,-6
    e534:	180d883a 	mov	r6,r3
    e538:	000b883a 	mov	r5,zero
    e53c:	1009883a 	mov	r4,r2
    e540:	0013ca40 	call	13ca4 <OSSemPend>
    locks  = 1;
    e544:	00800044 	movi	r2,1
    e548:	d0a72215 	stw	r2,-25464(gp)
    lockid = id;
    e54c:	e0bfe117 	ldw	r2,-124(fp)
    e550:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e554:	0001883a 	nop
    e558:	00000106 	br	e560 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e55c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e560:	e037883a 	mov	sp,fp
    e564:	dfc00117 	ldw	ra,4(sp)
    e568:	df000017 	ldw	fp,0(sp)
    e56c:	dec00204 	addi	sp,sp,8
    e570:	f800283a 	ret

0000e574 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    e574:	defffd04 	addi	sp,sp,-12
    e578:	dfc00215 	stw	ra,8(sp)
    e57c:	df000115 	stw	fp,4(sp)
    e580:	df000104 	addi	fp,sp,4
    e584:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    e588:	d0a72217 	ldw	r2,-25464(gp)
    e58c:	10000b26 	beq	r2,zero,e5bc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    e590:	d0a72217 	ldw	r2,-25464(gp)
    e594:	10bfffc4 	addi	r2,r2,-1
    e598:	d0a72215 	stw	r2,-25464(gp)
    e59c:	d0a72217 	ldw	r2,-25464(gp)
    e5a0:	1000071e 	bne	r2,zero,e5c0 <__env_unlock+0x4c>
  {
    lockid = -1;
    e5a4:	00bfffc4 	movi	r2,-1
    e5a8:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
    e5ac:	d0a72317 	ldw	r2,-25460(gp)
    e5b0:	1009883a 	mov	r4,r2
    e5b4:	001401c0 	call	1401c <OSSemPost>
    e5b8:	00000106 	br	e5c0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    e5bc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e5c0:	e037883a 	mov	sp,fp
    e5c4:	dfc00117 	ldw	ra,4(sp)
    e5c8:	df000017 	ldw	fp,0(sp)
    e5cc:	dec00204 	addi	sp,sp,8
    e5d0:	f800283a 	ret

0000e5d4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    e5d4:	deffdb04 	addi	sp,sp,-148
    e5d8:	dfc02415 	stw	ra,144(sp)
    e5dc:	df002315 	stw	fp,140(sp)
    e5e0:	df002304 	addi	fp,sp,140
    e5e4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e5e8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    e5ec:	d0a72643 	ldbu	r2,-25447(gp)
    e5f0:	10803fcc 	andi	r2,r2,255
    e5f4:	10800060 	cmpeqi	r2,r2,1
    e5f8:	10003626 	beq	r2,zero,e6d4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    e5fc:	e0bfe204 	addi	r2,fp,-120
    e600:	100b883a 	mov	r5,r2
    e604:	01003fc4 	movi	r4,255
    e608:	00159140 	call	15914 <OSTaskQuery>
    e60c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    e610:	e0bffe83 	ldbu	r2,-6(fp)
    e614:	10803fcc 	andi	r2,r2,255
    e618:	1000301e 	bne	r2,zero,e6dc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    e61c:	e0bfee83 	ldbu	r2,-70(fp)
    e620:	10803fcc 	andi	r2,r2,255
    e624:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    e628:	d0a72517 	ldw	r2,-25452(gp)
    e62c:	e0fffd04 	addi	r3,fp,-12
    e630:	180b883a 	mov	r5,r3
    e634:	1009883a 	mov	r4,r2
    e638:	001412c0 	call	1412c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e63c:	0005303a 	rdctl	r2,status
    e640:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e644:	e0ffe117 	ldw	r3,-124(fp)
    e648:	00bfff84 	movi	r2,-2
    e64c:	1884703a 	and	r2,r3,r2
    e650:	1001703a 	wrctl	status,r2
  
  return context;
    e654:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    e658:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    e65c:	e0bffd0b 	ldhu	r2,-12(fp)
    e660:	10bfffcc 	andi	r2,r2,65535
    e664:	10000b1e 	bne	r2,zero,e694 <__malloc_lock+0xc0>
    e668:	d0a00e17 	ldw	r2,-32712(gp)
    e66c:	e0ffde17 	ldw	r3,-136(fp)
    e670:	1880081e 	bne	r3,r2,e694 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    e674:	d0a72417 	ldw	r2,-25456(gp)
    e678:	10800044 	addi	r2,r2,1
    e67c:	d0a72415 	stw	r2,-25456(gp)
    e680:	e0bfdd17 	ldw	r2,-140(fp)
    e684:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e688:	e0bfdf17 	ldw	r2,-132(fp)
    e68c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    e690:	00000e06 	br	e6cc <__malloc_lock+0xf8>
    e694:	e0bfdd17 	ldw	r2,-140(fp)
    e698:	e0bfe015 	stw	r2,-128(fp)
    e69c:	e0bfe017 	ldw	r2,-128(fp)
    e6a0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    e6a4:	d0a72517 	ldw	r2,-25452(gp)
    e6a8:	e0fffe84 	addi	r3,fp,-6
    e6ac:	180d883a 	mov	r6,r3
    e6b0:	000b883a 	mov	r5,zero
    e6b4:	1009883a 	mov	r4,r2
    e6b8:	0013ca40 	call	13ca4 <OSSemPend>
    locks  = 1;
    e6bc:	00800044 	movi	r2,1
    e6c0:	d0a72415 	stw	r2,-25456(gp)
    lockid = id;
    e6c4:	e0bfde17 	ldw	r2,-136(fp)
    e6c8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    e6cc:	0001883a 	nop
    e6d0:	00000306 	br	e6e0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    e6d4:	0001883a 	nop
    e6d8:	00000106 	br	e6e0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    e6dc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    e6e0:	e037883a 	mov	sp,fp
    e6e4:	dfc00117 	ldw	ra,4(sp)
    e6e8:	df000017 	ldw	fp,0(sp)
    e6ec:	dec00204 	addi	sp,sp,8
    e6f0:	f800283a 	ret

0000e6f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    e6f4:	defff804 	addi	sp,sp,-32
    e6f8:	dfc00715 	stw	ra,28(sp)
    e6fc:	df000615 	stw	fp,24(sp)
    e700:	df000604 	addi	fp,sp,24
    e704:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e708:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    e70c:	d0a72643 	ldbu	r2,-25447(gp)
    e710:	10803fcc 	andi	r2,r2,255
    e714:	10800060 	cmpeqi	r2,r2,1
    e718:	10002326 	beq	r2,zero,e7a8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e71c:	0005303a 	rdctl	r2,status
    e720:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e724:	e0fffe17 	ldw	r3,-8(fp)
    e728:	00bfff84 	movi	r2,-2
    e72c:	1884703a 	and	r2,r3,r2
    e730:	1001703a 	wrctl	status,r2
  
  return context;
    e734:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    e738:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    e73c:	d0a72417 	ldw	r2,-25456(gp)
    e740:	1000051e 	bne	r2,zero,e758 <__malloc_unlock+0x64>
    e744:	e0bffa17 	ldw	r2,-24(fp)
    e748:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e74c:	e0bffb17 	ldw	r2,-20(fp)
    e750:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    e754:	00001506 	br	e7ac <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    e758:	d0a72417 	ldw	r2,-25456(gp)
    e75c:	10bfffc4 	addi	r2,r2,-1
    e760:	d0a72415 	stw	r2,-25456(gp)
    e764:	d0a72417 	ldw	r2,-25456(gp)
    e768:	10000a1e 	bne	r2,zero,e794 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    e76c:	00bfffc4 	movi	r2,-1
    e770:	d0a00e15 	stw	r2,-32712(gp)
    e774:	e0bffa17 	ldw	r2,-24(fp)
    e778:	e0bffc15 	stw	r2,-16(fp)
    e77c:	e0bffc17 	ldw	r2,-16(fp)
    e780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    e784:	d0a72517 	ldw	r2,-25452(gp)
    e788:	1009883a 	mov	r4,r2
    e78c:	001401c0 	call	1401c <OSSemPost>
    e790:	00000606 	br	e7ac <__malloc_unlock+0xb8>
    e794:	e0bffa17 	ldw	r2,-24(fp)
    e798:	e0bffd15 	stw	r2,-12(fp)
    e79c:	e0bffd17 	ldw	r2,-12(fp)
    e7a0:	1001703a 	wrctl	status,r2
    e7a4:	00000106 	br	e7ac <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    e7a8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    e7ac:	e037883a 	mov	sp,fp
    e7b0:	dfc00117 	ldw	ra,4(sp)
    e7b4:	df000017 	ldw	fp,0(sp)
    e7b8:	dec00204 	addi	sp,sp,8
    e7bc:	f800283a 	ret

0000e7c0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e7c0:	defff704 	addi	sp,sp,-36
    e7c4:	dfc00815 	stw	ra,32(sp)
    e7c8:	df000715 	stw	fp,28(sp)
    e7cc:	df000704 	addi	fp,sp,28
    e7d0:	e13ffd15 	stw	r4,-12(fp)
    e7d4:	e17ffe15 	stw	r5,-8(fp)
    e7d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e7dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e7e0:	e0bfff17 	ldw	r2,-4(fp)
    e7e4:	1000021e 	bne	r2,zero,e7f0 <OSEventNameGet+0x30>
        return (0);
    e7e8:	0005883a 	mov	r2,zero
    e7ec:	00003706 	br	e8cc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	1000051e 	bne	r2,zero,e80c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    e7f8:	e0bfff17 	ldw	r2,-4(fp)
    e7fc:	00c00104 	movi	r3,4
    e800:	10c00005 	stb	r3,0(r2)
        return (0);
    e804:	0005883a 	mov	r2,zero
    e808:	00003006 	br	e8cc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e80c:	e0bffe17 	ldw	r2,-8(fp)
    e810:	1000051e 	bne	r2,zero,e828 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    e814:	e0bfff17 	ldw	r2,-4(fp)
    e818:	00c00304 	movi	r3,12
    e81c:	10c00005 	stb	r3,0(r2)
        return (0);
    e820:	0005883a 	mov	r2,zero
    e824:	00002906 	br	e8cc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e828:	d0a73403 	ldbu	r2,-25392(gp)
    e82c:	10803fcc 	andi	r2,r2,255
    e830:	10000526 	beq	r2,zero,e848 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    e834:	e0bfff17 	ldw	r2,-4(fp)
    e838:	00c00444 	movi	r3,17
    e83c:	10c00005 	stb	r3,0(r2)
        return (0);
    e840:	0005883a 	mov	r2,zero
    e844:	00002106 	br	e8cc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    e848:	e0bffd17 	ldw	r2,-12(fp)
    e84c:	10800003 	ldbu	r2,0(r2)
    e850:	10803fcc 	andi	r2,r2,255
    e854:	10bfffc4 	addi	r2,r2,-1
    e858:	10800128 	cmpgeui	r2,r2,4
    e85c:	10000526 	beq	r2,zero,e874 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e860:	e0bfff17 	ldw	r2,-4(fp)
    e864:	00c00044 	movi	r3,1
    e868:	10c00005 	stb	r3,0(r2)
             return (0);
    e86c:	0005883a 	mov	r2,zero
    e870:	00001606 	br	e8cc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e874:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e878:	0005303a 	rdctl	r2,status
    e87c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e880:	e0fffb17 	ldw	r3,-20(fp)
    e884:	00bfff84 	movi	r2,-2
    e888:	1884703a 	and	r2,r3,r2
    e88c:	1001703a 	wrctl	status,r2
  
  return context;
    e890:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    e894:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    e898:	e0bffd17 	ldw	r2,-12(fp)
    e89c:	10800384 	addi	r2,r2,14
    e8a0:	100b883a 	mov	r5,r2
    e8a4:	e13ffe17 	ldw	r4,-8(fp)
    e8a8:	00102440 	call	10244 <OS_StrCopy>
    e8ac:	e0bffa05 	stb	r2,-24(fp)
    e8b0:	e0bff917 	ldw	r2,-28(fp)
    e8b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e8b8:	e0bffc17 	ldw	r2,-16(fp)
    e8bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e8c0:	e0bfff17 	ldw	r2,-4(fp)
    e8c4:	10000005 	stb	zero,0(r2)
    return (len);
    e8c8:	e0bffa03 	ldbu	r2,-24(fp)
}
    e8cc:	e037883a 	mov	sp,fp
    e8d0:	dfc00117 	ldw	ra,4(sp)
    e8d4:	df000017 	ldw	fp,0(sp)
    e8d8:	dec00204 	addi	sp,sp,8
    e8dc:	f800283a 	ret

0000e8e0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    e8e0:	defff604 	addi	sp,sp,-40
    e8e4:	dfc00915 	stw	ra,36(sp)
    e8e8:	df000815 	stw	fp,32(sp)
    e8ec:	df000804 	addi	fp,sp,32
    e8f0:	e13ffd15 	stw	r4,-12(fp)
    e8f4:	e17ffe15 	stw	r5,-8(fp)
    e8f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    e8fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    e900:	e0bfff17 	ldw	r2,-4(fp)
    e904:	10004026 	beq	r2,zero,ea08 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    e908:	e0bffd17 	ldw	r2,-12(fp)
    e90c:	1000041e 	bne	r2,zero,e920 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	00c00104 	movi	r3,4
    e918:	10c00005 	stb	r3,0(r2)
        return;
    e91c:	00003b06 	br	ea0c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	1000041e 	bne	r2,zero,e938 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    e928:	e0bfff17 	ldw	r2,-4(fp)
    e92c:	00c00304 	movi	r3,12
    e930:	10c00005 	stb	r3,0(r2)
        return;
    e934:	00003506 	br	ea0c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    e938:	d0a73403 	ldbu	r2,-25392(gp)
    e93c:	10803fcc 	andi	r2,r2,255
    e940:	10000426 	beq	r2,zero,e954 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    e944:	e0bfff17 	ldw	r2,-4(fp)
    e948:	00c00484 	movi	r3,18
    e94c:	10c00005 	stb	r3,0(r2)
        return;
    e950:	00002e06 	br	ea0c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    e954:	e0bffd17 	ldw	r2,-12(fp)
    e958:	10800003 	ldbu	r2,0(r2)
    e95c:	10803fcc 	andi	r2,r2,255
    e960:	10bfffc4 	addi	r2,r2,-1
    e964:	10800128 	cmpgeui	r2,r2,4
    e968:	10000426 	beq	r2,zero,e97c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    e96c:	e0bfff17 	ldw	r2,-4(fp)
    e970:	00c00044 	movi	r3,1
    e974:	10c00005 	stb	r3,0(r2)
             return;
    e978:	00002406 	br	ea0c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    e97c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e980:	0005303a 	rdctl	r2,status
    e984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e988:	e0fffc17 	ldw	r3,-16(fp)
    e98c:	00bfff84 	movi	r2,-2
    e990:	1884703a 	and	r2,r3,r2
    e994:	1001703a 	wrctl	status,r2
  
  return context;
    e998:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    e99c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    e9a0:	e13ffe17 	ldw	r4,-8(fp)
    e9a4:	00102b80 	call	102b8 <OS_StrLen>
    e9a8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    e9ac:	e0bffa03 	ldbu	r2,-24(fp)
    e9b0:	10800830 	cmpltui	r2,r2,32
    e9b4:	1000081e 	bne	r2,zero,e9d8 <OSEventNameSet+0xf8>
    e9b8:	e0bff817 	ldw	r2,-32(fp)
    e9bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e9c0:	e0bff917 	ldw	r2,-28(fp)
    e9c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    e9c8:	e0bfff17 	ldw	r2,-4(fp)
    e9cc:	00c002c4 	movi	r3,11
    e9d0:	10c00005 	stb	r3,0(r2)
        return;
    e9d4:	00000d06 	br	ea0c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    e9d8:	e0bffd17 	ldw	r2,-12(fp)
    e9dc:	10800384 	addi	r2,r2,14
    e9e0:	e17ffe17 	ldw	r5,-8(fp)
    e9e4:	1009883a 	mov	r4,r2
    e9e8:	00102440 	call	10244 <OS_StrCopy>
    e9ec:	e0bff817 	ldw	r2,-32(fp)
    e9f0:	e0bffb15 	stw	r2,-20(fp)
    e9f4:	e0bffb17 	ldw	r2,-20(fp)
    e9f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    e9fc:	e0bfff17 	ldw	r2,-4(fp)
    ea00:	10000005 	stb	zero,0(r2)
    ea04:	00000106 	br	ea0c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    ea08:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    ea0c:	e037883a 	mov	sp,fp
    ea10:	dfc00117 	ldw	ra,4(sp)
    ea14:	df000017 	ldw	fp,0(sp)
    ea18:	dec00204 	addi	sp,sp,8
    ea1c:	f800283a 	ret

0000ea20 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    ea20:	deffed04 	addi	sp,sp,-76
    ea24:	dfc01215 	stw	ra,72(sp)
    ea28:	df001115 	stw	fp,68(sp)
    ea2c:	df001104 	addi	fp,sp,68
    ea30:	e13ffc15 	stw	r4,-16(fp)
    ea34:	e17ffd15 	stw	r5,-12(fp)
    ea38:	e1bffe15 	stw	r6,-8(fp)
    ea3c:	3805883a 	mov	r2,r7
    ea40:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    ea44:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    ea48:	e0800217 	ldw	r2,8(fp)
    ea4c:	1000021e 	bne	r2,zero,ea58 <OSEventPendMulti+0x38>
        return (0);
    ea50:	0005883a 	mov	r2,zero
    ea54:	00017106 	br	f01c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    ea58:	e0bffc17 	ldw	r2,-16(fp)
    ea5c:	1000051e 	bne	r2,zero,ea74 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    ea60:	e0800217 	ldw	r2,8(fp)
    ea64:	00c00104 	movi	r3,4
    ea68:	10c00005 	stb	r3,0(r2)
        return (0);
    ea6c:	0005883a 	mov	r2,zero
    ea70:	00016a06 	br	f01c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    ea74:	e0bffd17 	ldw	r2,-12(fp)
    ea78:	1000051e 	bne	r2,zero,ea90 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    ea7c:	e0800217 	ldw	r2,8(fp)
    ea80:	00c00104 	movi	r3,4
    ea84:	10c00005 	stb	r3,0(r2)
        return (0);
    ea88:	0005883a 	mov	r2,zero
    ea8c:	00016306 	br	f01c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    ea90:	e0bffe17 	ldw	r2,-8(fp)
    ea94:	1000051e 	bne	r2,zero,eaac <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    ea98:	e0800217 	ldw	r2,8(fp)
    ea9c:	00c00104 	movi	r3,4
    eaa0:	10c00005 	stb	r3,0(r2)
        return (0);
    eaa4:	0005883a 	mov	r2,zero
    eaa8:	00015c06 	br	f01c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    eaac:	e0bffd17 	ldw	r2,-12(fp)
    eab0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    eab4:	e0bffc17 	ldw	r2,-16(fp)
    eab8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    eabc:	e0bfef17 	ldw	r2,-68(fp)
    eac0:	10800017 	ldw	r2,0(r2)
    eac4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    eac8:	00001906 	br	eb30 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    eacc:	e0bff017 	ldw	r2,-64(fp)
    ead0:	10800003 	ldbu	r2,0(r2)
    ead4:	10803fcc 	andi	r2,r2,255
    ead8:	10c000a0 	cmpeqi	r3,r2,2
    eadc:	1800091e 	bne	r3,zero,eb04 <OSEventPendMulti+0xe4>
    eae0:	10c000e0 	cmpeqi	r3,r2,3
    eae4:	1800091e 	bne	r3,zero,eb0c <OSEventPendMulti+0xec>
    eae8:	10800060 	cmpeqi	r2,r2,1
    eaec:	1000091e 	bne	r2,zero,eb14 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    eaf0:	e0800217 	ldw	r2,8(fp)
    eaf4:	00c00044 	movi	r3,1
    eaf8:	10c00005 	stb	r3,0(r2)
                 return (0);
    eafc:	0005883a 	mov	r2,zero
    eb00:	00014606 	br	f01c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    eb04:	0001883a 	nop
    eb08:	00000306 	br	eb18 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    eb0c:	0001883a 	nop
    eb10:	00000106 	br	eb18 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    eb14:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    eb18:	e0bfef17 	ldw	r2,-68(fp)
    eb1c:	10800104 	addi	r2,r2,4
    eb20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    eb24:	e0bfef17 	ldw	r2,-68(fp)
    eb28:	10800017 	ldw	r2,0(r2)
    eb2c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    eb30:	e0bff017 	ldw	r2,-64(fp)
    eb34:	103fe51e 	bne	r2,zero,eacc <__alt_data_end+0xfffddd8c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    eb38:	d0a73403 	ldbu	r2,-25392(gp)
    eb3c:	10803fcc 	andi	r2,r2,255
    eb40:	10000526 	beq	r2,zero,eb58 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    eb44:	e0800217 	ldw	r2,8(fp)
    eb48:	00c00084 	movi	r3,2
    eb4c:	10c00005 	stb	r3,0(r2)
        return (0);
    eb50:	0005883a 	mov	r2,zero
    eb54:	00013106 	br	f01c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    eb58:	d0a72603 	ldbu	r2,-25448(gp)
    eb5c:	10803fcc 	andi	r2,r2,255
    eb60:	10000526 	beq	r2,zero,eb78 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    eb64:	e0800217 	ldw	r2,8(fp)
    eb68:	00c00344 	movi	r3,13
    eb6c:	10c00005 	stb	r3,0(r2)
        return (0);
    eb70:	0005883a 	mov	r2,zero
    eb74:	00012906 	br	f01c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb78:	0005303a 	rdctl	r2,status
    eb7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb80:	e0fffb17 	ldw	r3,-20(fp)
    eb84:	00bfff84 	movi	r2,-2
    eb88:	1884703a 	and	r2,r3,r2
    eb8c:	1001703a 	wrctl	status,r2
  
  return context;
    eb90:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    eb94:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    eb98:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    eb9c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    eba0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    eba4:	e0bffc17 	ldw	r2,-16(fp)
    eba8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    ebac:	e0bfef17 	ldw	r2,-68(fp)
    ebb0:	10800017 	ldw	r2,0(r2)
    ebb4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    ebb8:	00008106 	br	edc0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    ebbc:	e0bff017 	ldw	r2,-64(fp)
    ebc0:	10800003 	ldbu	r2,0(r2)
    ebc4:	10803fcc 	andi	r2,r2,255
    ebc8:	10c000a0 	cmpeqi	r3,r2,2
    ebcc:	18003c1e 	bne	r3,zero,ecc0 <OSEventPendMulti+0x2a0>
    ebd0:	10c000e0 	cmpeqi	r3,r2,3
    ebd4:	1800031e 	bne	r3,zero,ebe4 <OSEventPendMulti+0x1c4>
    ebd8:	10800060 	cmpeqi	r2,r2,1
    ebdc:	10001e1e 	bne	r2,zero,ec58 <OSEventPendMulti+0x238>
    ebe0:	00006606 	br	ed7c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    ebe4:	e0bff017 	ldw	r2,-64(fp)
    ebe8:	1080020b 	ldhu	r2,8(r2)
    ebec:	10bfffcc 	andi	r2,r2,65535
    ebf0:	10001526 	beq	r2,zero,ec48 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    ebf4:	e0bff017 	ldw	r2,-64(fp)
    ebf8:	1080020b 	ldhu	r2,8(r2)
    ebfc:	10bfffc4 	addi	r2,r2,-1
    ec00:	1007883a 	mov	r3,r2
    ec04:	e0bff017 	ldw	r2,-64(fp)
    ec08:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    ec0c:	e0bffd17 	ldw	r2,-12(fp)
    ec10:	10c00104 	addi	r3,r2,4
    ec14:	e0fffd15 	stw	r3,-12(fp)
    ec18:	e0fff017 	ldw	r3,-64(fp)
    ec1c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    ec20:	00800044 	movi	r2,1
    ec24:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    ec28:	e0bffe17 	ldw	r2,-8(fp)
    ec2c:	10c00104 	addi	r3,r2,4
    ec30:	e0fffe15 	stw	r3,-8(fp)
    ec34:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    ec38:	e0bff18b 	ldhu	r2,-58(fp)
    ec3c:	10800044 	addi	r2,r2,1
    ec40:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    ec44:	00005806 	br	eda8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    ec48:	e0bff203 	ldbu	r2,-56(fp)
    ec4c:	10800054 	ori	r2,r2,1
    ec50:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    ec54:	00005406 	br	eda8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    ec58:	e0bff017 	ldw	r2,-64(fp)
    ec5c:	10800117 	ldw	r2,4(r2)
    ec60:	10001326 	beq	r2,zero,ecb0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    ec64:	e0bffe17 	ldw	r2,-8(fp)
    ec68:	10c00104 	addi	r3,r2,4
    ec6c:	e0fffe15 	stw	r3,-8(fp)
    ec70:	e0fff017 	ldw	r3,-64(fp)
    ec74:	18c00117 	ldw	r3,4(r3)
    ec78:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    ec7c:	e0bff017 	ldw	r2,-64(fp)
    ec80:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    ec84:	e0bffd17 	ldw	r2,-12(fp)
    ec88:	10c00104 	addi	r3,r2,4
    ec8c:	e0fffd15 	stw	r3,-12(fp)
    ec90:	e0fff017 	ldw	r3,-64(fp)
    ec94:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    ec98:	00800044 	movi	r2,1
    ec9c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    eca0:	e0bff18b 	ldhu	r2,-58(fp)
    eca4:	10800044 	addi	r2,r2,1
    eca8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    ecac:	00003e06 	br	eda8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    ecb0:	e0bff203 	ldbu	r2,-56(fp)
    ecb4:	10800094 	ori	r2,r2,2
    ecb8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    ecbc:	00003a06 	br	eda8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    ecc0:	e0bff017 	ldw	r2,-64(fp)
    ecc4:	10800117 	ldw	r2,4(r2)
    ecc8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    eccc:	e0bff517 	ldw	r2,-44(fp)
    ecd0:	1080058b 	ldhu	r2,22(r2)
    ecd4:	10bfffcc 	andi	r2,r2,65535
    ecd8:	10002426 	beq	r2,zero,ed6c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    ecdc:	e0bffe17 	ldw	r2,-8(fp)
    ece0:	10c00104 	addi	r3,r2,4
    ece4:	e0fffe15 	stw	r3,-8(fp)
    ece8:	e0fff517 	ldw	r3,-44(fp)
    ecec:	18c00417 	ldw	r3,16(r3)
    ecf0:	19400104 	addi	r5,r3,4
    ecf4:	e13ff517 	ldw	r4,-44(fp)
    ecf8:	21400415 	stw	r5,16(r4)
    ecfc:	18c00017 	ldw	r3,0(r3)
    ed00:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    ed04:	e0bff517 	ldw	r2,-44(fp)
    ed08:	10c00417 	ldw	r3,16(r2)
    ed0c:	e0bff517 	ldw	r2,-44(fp)
    ed10:	10800217 	ldw	r2,8(r2)
    ed14:	1880041e 	bne	r3,r2,ed28 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    ed18:	e0bff517 	ldw	r2,-44(fp)
    ed1c:	10c00117 	ldw	r3,4(r2)
    ed20:	e0bff517 	ldw	r2,-44(fp)
    ed24:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    ed28:	e0bff517 	ldw	r2,-44(fp)
    ed2c:	1080058b 	ldhu	r2,22(r2)
    ed30:	10bfffc4 	addi	r2,r2,-1
    ed34:	1007883a 	mov	r3,r2
    ed38:	e0bff517 	ldw	r2,-44(fp)
    ed3c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    ed40:	e0bffd17 	ldw	r2,-12(fp)
    ed44:	10c00104 	addi	r3,r2,4
    ed48:	e0fffd15 	stw	r3,-12(fp)
    ed4c:	e0fff017 	ldw	r3,-64(fp)
    ed50:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    ed54:	00800044 	movi	r2,1
    ed58:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    ed5c:	e0bff18b 	ldhu	r2,-58(fp)
    ed60:	10800044 	addi	r2,r2,1
    ed64:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    ed68:	00000f06 	br	eda8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    ed6c:	e0bff203 	ldbu	r2,-56(fp)
    ed70:	10800114 	ori	r2,r2,4
    ed74:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    ed78:	00000b06 	br	eda8 <OSEventPendMulti+0x388>
    ed7c:	e0bff317 	ldw	r2,-52(fp)
    ed80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed84:	e0bff417 	ldw	r2,-48(fp)
    ed88:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    ed8c:	e0bffd17 	ldw	r2,-12(fp)
    ed90:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    ed94:	e0800217 	ldw	r2,8(fp)
    ed98:	00c00044 	movi	r3,1
    ed9c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    eda0:	e0bff18b 	ldhu	r2,-58(fp)
    eda4:	00009d06 	br	f01c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    eda8:	e0bfef17 	ldw	r2,-68(fp)
    edac:	10800104 	addi	r2,r2,4
    edb0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    edb4:	e0bfef17 	ldw	r2,-68(fp)
    edb8:	10800017 	ldw	r2,0(r2)
    edbc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    edc0:	e0bff017 	ldw	r2,-64(fp)
    edc4:	103f7d1e 	bne	r2,zero,ebbc <__alt_data_end+0xfffdde7c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    edc8:	e0bff103 	ldbu	r2,-60(fp)
    edcc:	10800058 	cmpnei	r2,r2,1
    edd0:	10000a1e 	bne	r2,zero,edfc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    edd4:	e0bffd17 	ldw	r2,-12(fp)
    edd8:	10000015 	stw	zero,0(r2)
    eddc:	e0bff317 	ldw	r2,-52(fp)
    ede0:	e0bff615 	stw	r2,-40(fp)
    ede4:	e0bff617 	ldw	r2,-40(fp)
    ede8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    edec:	e0800217 	ldw	r2,8(fp)
    edf0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    edf4:	e0bff18b 	ldhu	r2,-58(fp)
    edf8:	00008806 	br	f01c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    edfc:	d0a73517 	ldw	r2,-25388(gp)
    ee00:	d0e73517 	ldw	r3,-25388(gp)
    ee04:	19000c03 	ldbu	r4,48(r3)
    ee08:	e0fff203 	ldbu	r3,-56(fp)
    ee0c:	20c6b03a 	or	r3,r4,r3
    ee10:	1809883a 	mov	r4,r3
    ee14:	00ffe004 	movi	r3,-128
    ee18:	20c6b03a 	or	r3,r4,r3
    ee1c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    ee20:	d0a73517 	ldw	r2,-25388(gp)
    ee24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    ee28:	d0a73517 	ldw	r2,-25388(gp)
    ee2c:	e0ffff0b 	ldhu	r3,-4(fp)
    ee30:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    ee34:	e13ffc17 	ldw	r4,-16(fp)
    ee38:	000f95c0 	call	f95c <OS_EventTaskWaitMulti>
    ee3c:	e0bff317 	ldw	r2,-52(fp)
    ee40:	e0bff915 	stw	r2,-28(fp)
    ee44:	e0bff917 	ldw	r2,-28(fp)
    ee48:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    ee4c:	00101000 	call	10100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee50:	0005303a 	rdctl	r2,status
    ee54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee58:	e0fff717 	ldw	r3,-36(fp)
    ee5c:	00bfff84 	movi	r2,-2
    ee60:	1884703a 	and	r2,r3,r2
    ee64:	1001703a 	wrctl	status,r2
  
  return context;
    ee68:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    ee6c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    ee70:	d0a73517 	ldw	r2,-25388(gp)
    ee74:	10800c43 	ldbu	r2,49(r2)
    ee78:	10803fcc 	andi	r2,r2,255
    ee7c:	10000226 	beq	r2,zero,ee88 <OSEventPendMulti+0x468>
    ee80:	108000a0 	cmpeqi	r2,r2,2
    ee84:	10001826 	beq	r2,zero,eee8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    ee88:	d0a73517 	ldw	r2,-25388(gp)
    ee8c:	10800717 	ldw	r2,28(r2)
    ee90:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    ee94:	e0bff017 	ldw	r2,-64(fp)
    ee98:	10000b26 	beq	r2,zero,eec8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    ee9c:	e0bffd17 	ldw	r2,-12(fp)
    eea0:	10c00104 	addi	r3,r2,4
    eea4:	e0fffd15 	stw	r3,-12(fp)
    eea8:	e0fff017 	ldw	r3,-64(fp)
    eeac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    eeb0:	e0bffd17 	ldw	r2,-12(fp)
    eeb4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    eeb8:	e0bff18b 	ldhu	r2,-58(fp)
    eebc:	10800044 	addi	r2,r2,1
    eec0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    eec4:	00000d06 	br	eefc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    eec8:	d0a73517 	ldw	r2,-25388(gp)
    eecc:	00c00044 	movi	r3,1
    eed0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    eed4:	d0a73517 	ldw	r2,-25388(gp)
    eed8:	e17ffc17 	ldw	r5,-16(fp)
    eedc:	1009883a 	mov	r4,r2
    eee0:	000fb640 	call	fb64 <OS_EventTaskRemoveMulti>
             }
			 break;
    eee4:	00000506 	br	eefc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    eee8:	d0a73517 	ldw	r2,-25388(gp)
    eeec:	e17ffc17 	ldw	r5,-16(fp)
    eef0:	1009883a 	mov	r4,r2
    eef4:	000fb640 	call	fb64 <OS_EventTaskRemoveMulti>
             break;
    eef8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    eefc:	d0a73517 	ldw	r2,-25388(gp)
    ef00:	10800c43 	ldbu	r2,49(r2)
    ef04:	10803fcc 	andi	r2,r2,255
    ef08:	10000326 	beq	r2,zero,ef18 <OSEventPendMulti+0x4f8>
    ef0c:	108000a0 	cmpeqi	r2,r2,2
    ef10:	1000231e 	bne	r2,zero,efa0 <OSEventPendMulti+0x580>
    ef14:	00002a06 	br	efc0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    ef18:	e0bff017 	ldw	r2,-64(fp)
    ef1c:	10800003 	ldbu	r2,0(r2)
    ef20:	10803fcc 	andi	r2,r2,255
    ef24:	0080100e 	bge	zero,r2,ef68 <OSEventPendMulti+0x548>
    ef28:	10c000d0 	cmplti	r3,r2,3
    ef2c:	1800071e 	bne	r3,zero,ef4c <OSEventPendMulti+0x52c>
    ef30:	108000e0 	cmpeqi	r2,r2,3
    ef34:	10000c26 	beq	r2,zero,ef68 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    ef38:	e0bffe17 	ldw	r2,-8(fp)
    ef3c:	10c00104 	addi	r3,r2,4
    ef40:	e0fffe15 	stw	r3,-8(fp)
    ef44:	10000015 	stw	zero,0(r2)
                      break;
    ef48:	00001206 	br	ef94 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    ef4c:	e0bffe17 	ldw	r2,-8(fp)
    ef50:	10c00104 	addi	r3,r2,4
    ef54:	e0fffe15 	stw	r3,-8(fp)
    ef58:	d0e73517 	ldw	r3,-25388(gp)
    ef5c:	18c00917 	ldw	r3,36(r3)
    ef60:	10c00015 	stw	r3,0(r2)
                      break;
    ef64:	00000b06 	br	ef94 <OSEventPendMulti+0x574>
    ef68:	e0bff317 	ldw	r2,-52(fp)
    ef6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ef70:	e0bff817 	ldw	r2,-32(fp)
    ef74:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    ef78:	e0bffd17 	ldw	r2,-12(fp)
    ef7c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    ef80:	e0800217 	ldw	r2,8(fp)
    ef84:	00c00044 	movi	r3,1
    ef88:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    ef8c:	e0bff18b 	ldhu	r2,-58(fp)
    ef90:	00002206 	br	f01c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    ef94:	e0800217 	ldw	r2,8(fp)
    ef98:	10000005 	stb	zero,0(r2)
             break;
    ef9c:	00001006 	br	efe0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    efa0:	e0bffe17 	ldw	r2,-8(fp)
    efa4:	10c00104 	addi	r3,r2,4
    efa8:	e0fffe15 	stw	r3,-8(fp)
    efac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    efb0:	e0800217 	ldw	r2,8(fp)
    efb4:	00c00384 	movi	r3,14
    efb8:	10c00005 	stb	r3,0(r2)
             break;
    efbc:	00000806 	br	efe0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    efc0:	e0bffe17 	ldw	r2,-8(fp)
    efc4:	10c00104 	addi	r3,r2,4
    efc8:	e0fffe15 	stw	r3,-8(fp)
    efcc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    efd0:	e0800217 	ldw	r2,8(fp)
    efd4:	00c00284 	movi	r3,10
    efd8:	10c00005 	stb	r3,0(r2)
             break;
    efdc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    efe0:	d0a73517 	ldw	r2,-25388(gp)
    efe4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    efe8:	d0a73517 	ldw	r2,-25388(gp)
    efec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    eff0:	d0a73517 	ldw	r2,-25388(gp)
    eff4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    eff8:	d0a73517 	ldw	r2,-25388(gp)
    effc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    f000:	d0a73517 	ldw	r2,-25388(gp)
    f004:	10000915 	stw	zero,36(r2)
    f008:	e0bff317 	ldw	r2,-52(fp)
    f00c:	e0bffa15 	stw	r2,-24(fp)
    f010:	e0bffa17 	ldw	r2,-24(fp)
    f014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    f018:	e0bff18b 	ldhu	r2,-58(fp)
}
    f01c:	e037883a 	mov	sp,fp
    f020:	dfc00117 	ldw	ra,4(sp)
    f024:	df000017 	ldw	fp,0(sp)
    f028:	dec00204 	addi	sp,sp,8
    f02c:	f800283a 	ret

0000f030 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    f030:	defffe04 	addi	sp,sp,-8
    f034:	dfc00115 	stw	ra,4(sp)
    f038:	df000015 	stw	fp,0(sp)
    f03c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    f040:	0017cdc0 	call	17cdc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    f044:	000fdac0 	call	fdac <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    f048:	000fdf40 	call	fdf4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    f04c:	000ff600 	call	ff60 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    f050:	000fccc0 	call	fccc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    f054:	0011e000 	call	11e00 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    f058:	00127000 	call	12700 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    f05c:	00138340 	call	13834 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    f060:	000fe600 	call	fe60 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    f064:	000fee00 	call	fee0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    f068:	0017cfc0 	call	17cfc <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    f06c:	00107d40 	call	107d4 <OSDebugInit>
#endif
}
    f070:	0001883a 	nop
    f074:	e037883a 	mov	sp,fp
    f078:	dfc00117 	ldw	ra,4(sp)
    f07c:	df000017 	ldw	fp,0(sp)
    f080:	dec00204 	addi	sp,sp,8
    f084:	f800283a 	ret

0000f088 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    f088:	deffff04 	addi	sp,sp,-4
    f08c:	df000015 	stw	fp,0(sp)
    f090:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    f094:	d0a72643 	ldbu	r2,-25447(gp)
    f098:	10803fcc 	andi	r2,r2,255
    f09c:	10800058 	cmpnei	r2,r2,1
    f0a0:	1000071e 	bne	r2,zero,f0c0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    f0a4:	d0a73403 	ldbu	r2,-25392(gp)
    f0a8:	10803fcc 	andi	r2,r2,255
    f0ac:	10803fe0 	cmpeqi	r2,r2,255
    f0b0:	1000031e 	bne	r2,zero,f0c0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    f0b4:	d0a73403 	ldbu	r2,-25392(gp)
    f0b8:	10800044 	addi	r2,r2,1
    f0bc:	d0a73405 	stb	r2,-25392(gp)
        }
    }
}
    f0c0:	0001883a 	nop
    f0c4:	e037883a 	mov	sp,fp
    f0c8:	df000017 	ldw	fp,0(sp)
    f0cc:	dec00104 	addi	sp,sp,4
    f0d0:	f800283a 	ret

0000f0d4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    f0d4:	defffb04 	addi	sp,sp,-20
    f0d8:	dfc00415 	stw	ra,16(sp)
    f0dc:	df000315 	stw	fp,12(sp)
    f0e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f0e4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    f0e8:	d0a72643 	ldbu	r2,-25447(gp)
    f0ec:	10803fcc 	andi	r2,r2,255
    f0f0:	10800058 	cmpnei	r2,r2,1
    f0f4:	10002f1e 	bne	r2,zero,f1b4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0f8:	0005303a 	rdctl	r2,status
    f0fc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f100:	e0ffff17 	ldw	r3,-4(fp)
    f104:	00bfff84 	movi	r2,-2
    f108:	1884703a 	and	r2,r3,r2
    f10c:	1001703a 	wrctl	status,r2
  
  return context;
    f110:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f114:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    f118:	d0a73403 	ldbu	r2,-25392(gp)
    f11c:	10803fcc 	andi	r2,r2,255
    f120:	10000326 	beq	r2,zero,f130 <OSIntExit+0x5c>
            OSIntNesting--;
    f124:	d0a73403 	ldbu	r2,-25392(gp)
    f128:	10bfffc4 	addi	r2,r2,-1
    f12c:	d0a73405 	stb	r2,-25392(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    f130:	d0a73403 	ldbu	r2,-25392(gp)
    f134:	10803fcc 	andi	r2,r2,255
    f138:	10001a1e 	bne	r2,zero,f1a4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    f13c:	d0a72603 	ldbu	r2,-25448(gp)
    f140:	10803fcc 	andi	r2,r2,255
    f144:	1000171e 	bne	r2,zero,f1a4 <OSIntExit+0xd0>
                OS_SchedNew();
    f148:	00101d00 	call	101d0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    f14c:	d0e72803 	ldbu	r3,-25440(gp)
    f150:	d0a72843 	ldbu	r2,-25439(gp)
    f154:	18c03fcc 	andi	r3,r3,255
    f158:	10803fcc 	andi	r2,r2,255
    f15c:	18801126 	beq	r3,r2,f1a4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    f160:	d0a72803 	ldbu	r2,-25440(gp)
    f164:	10c03fcc 	andi	r3,r2,255
    f168:	008000b4 	movhi	r2,2
    f16c:	10969b04 	addi	r2,r2,23148
    f170:	18c7883a 	add	r3,r3,r3
    f174:	18c7883a 	add	r3,r3,r3
    f178:	10c5883a 	add	r2,r2,r3
    f17c:	10800017 	ldw	r2,0(r2)
    f180:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    f184:	d0a73017 	ldw	r2,-25408(gp)
    f188:	10c00e17 	ldw	r3,56(r2)
    f18c:	18c00044 	addi	r3,r3,1
    f190:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    f194:	d0a72b17 	ldw	r2,-25428(gp)
    f198:	10800044 	addi	r2,r2,1
    f19c:	d0a72b15 	stw	r2,-25428(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    f1a0:	0017a080 	call	17a08 <OSCtxSw>
    f1a4:	e0bffd17 	ldw	r2,-12(fp)
    f1a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f1ac:	e0bffe17 	ldw	r2,-8(fp)
    f1b0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f1b4:	0001883a 	nop
    f1b8:	e037883a 	mov	sp,fp
    f1bc:	dfc00117 	ldw	ra,4(sp)
    f1c0:	df000017 	ldw	fp,0(sp)
    f1c4:	dec00204 	addi	sp,sp,8
    f1c8:	f800283a 	ret

0000f1cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    f1cc:	defffc04 	addi	sp,sp,-16
    f1d0:	df000315 	stw	fp,12(sp)
    f1d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f1d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    f1dc:	d0a72643 	ldbu	r2,-25447(gp)
    f1e0:	10803fcc 	andi	r2,r2,255
    f1e4:	10800058 	cmpnei	r2,r2,1
    f1e8:	1000161e 	bne	r2,zero,f244 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f1ec:	0005303a 	rdctl	r2,status
    f1f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f1f4:	e0ffff17 	ldw	r3,-4(fp)
    f1f8:	00bfff84 	movi	r2,-2
    f1fc:	1884703a 	and	r2,r3,r2
    f200:	1001703a 	wrctl	status,r2
  
  return context;
    f204:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f208:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    f20c:	d0a73403 	ldbu	r2,-25392(gp)
    f210:	10803fcc 	andi	r2,r2,255
    f214:	1000071e 	bne	r2,zero,f234 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    f218:	d0a72603 	ldbu	r2,-25448(gp)
    f21c:	10803fcc 	andi	r2,r2,255
    f220:	10803fe0 	cmpeqi	r2,r2,255
    f224:	1000031e 	bne	r2,zero,f234 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    f228:	d0a72603 	ldbu	r2,-25448(gp)
    f22c:	10800044 	addi	r2,r2,1
    f230:	d0a72605 	stb	r2,-25448(gp)
    f234:	e0bffd17 	ldw	r2,-12(fp)
    f238:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f23c:	e0bffe17 	ldw	r2,-8(fp)
    f240:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    f244:	0001883a 	nop
    f248:	e037883a 	mov	sp,fp
    f24c:	df000017 	ldw	fp,0(sp)
    f250:	dec00104 	addi	sp,sp,4
    f254:	f800283a 	ret

0000f258 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    f258:	defff804 	addi	sp,sp,-32
    f25c:	dfc00715 	stw	ra,28(sp)
    f260:	df000615 	stw	fp,24(sp)
    f264:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    f268:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    f26c:	d0a72643 	ldbu	r2,-25447(gp)
    f270:	10803fcc 	andi	r2,r2,255
    f274:	10800058 	cmpnei	r2,r2,1
    f278:	1000281e 	bne	r2,zero,f31c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f27c:	0005303a 	rdctl	r2,status
    f280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f284:	e0ffff17 	ldw	r3,-4(fp)
    f288:	00bfff84 	movi	r2,-2
    f28c:	1884703a 	and	r2,r3,r2
    f290:	1001703a 	wrctl	status,r2
  
  return context;
    f294:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    f298:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    f29c:	d0a72603 	ldbu	r2,-25448(gp)
    f2a0:	10803fcc 	andi	r2,r2,255
    f2a4:	10001926 	beq	r2,zero,f30c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    f2a8:	d0a72603 	ldbu	r2,-25448(gp)
    f2ac:	10bfffc4 	addi	r2,r2,-1
    f2b0:	d0a72605 	stb	r2,-25448(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    f2b4:	d0a72603 	ldbu	r2,-25448(gp)
    f2b8:	10803fcc 	andi	r2,r2,255
    f2bc:	10000e1e 	bne	r2,zero,f2f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    f2c0:	d0a73403 	ldbu	r2,-25392(gp)
    f2c4:	10803fcc 	andi	r2,r2,255
    f2c8:	1000061e 	bne	r2,zero,f2e4 <OSSchedUnlock+0x8c>
    f2cc:	e0bffa17 	ldw	r2,-24(fp)
    f2d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f2d4:	e0bffb17 	ldw	r2,-20(fp)
    f2d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    f2dc:	00101000 	call	10100 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    f2e0:	00000e06 	br	f31c <OSSchedUnlock+0xc4>
    f2e4:	e0bffa17 	ldw	r2,-24(fp)
    f2e8:	e0bffc15 	stw	r2,-16(fp)
    f2ec:	e0bffc17 	ldw	r2,-16(fp)
    f2f0:	1001703a 	wrctl	status,r2
    f2f4:	00000906 	br	f31c <OSSchedUnlock+0xc4>
    f2f8:	e0bffa17 	ldw	r2,-24(fp)
    f2fc:	e0bffd15 	stw	r2,-12(fp)
    f300:	e0bffd17 	ldw	r2,-12(fp)
    f304:	1001703a 	wrctl	status,r2
    f308:	00000406 	br	f31c <OSSchedUnlock+0xc4>
    f30c:	e0bffa17 	ldw	r2,-24(fp)
    f310:	e0bffe15 	stw	r2,-8(fp)
    f314:	e0bffe17 	ldw	r2,-8(fp)
    f318:	1001703a 	wrctl	status,r2
    f31c:	0001883a 	nop
    f320:	e037883a 	mov	sp,fp
    f324:	dfc00117 	ldw	ra,4(sp)
    f328:	df000017 	ldw	fp,0(sp)
    f32c:	dec00204 	addi	sp,sp,8
    f330:	f800283a 	ret

0000f334 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    f334:	defffe04 	addi	sp,sp,-8
    f338:	dfc00115 	stw	ra,4(sp)
    f33c:	df000015 	stw	fp,0(sp)
    f340:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    f344:	d0a72643 	ldbu	r2,-25447(gp)
    f348:	10803fcc 	andi	r2,r2,255
    f34c:	10000f1e 	bne	r2,zero,f38c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    f350:	00101d00 	call	101d0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    f354:	d0a72803 	ldbu	r2,-25440(gp)
    f358:	d0a72845 	stb	r2,-25439(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    f35c:	d0a72803 	ldbu	r2,-25440(gp)
    f360:	10c03fcc 	andi	r3,r2,255
    f364:	008000b4 	movhi	r2,2
    f368:	10969b04 	addi	r2,r2,23148
    f36c:	18c7883a 	add	r3,r3,r3
    f370:	18c7883a 	add	r3,r3,r3
    f374:	10c5883a 	add	r2,r2,r3
    f378:	10800017 	ldw	r2,0(r2)
    f37c:	d0a73015 	stw	r2,-25408(gp)
        OSTCBCur      = OSTCBHighRdy;
    f380:	d0a73017 	ldw	r2,-25408(gp)
    f384:	d0a73515 	stw	r2,-25388(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    f388:	0017a940 	call	17a94 <OSStartHighRdy>
    }
}
    f38c:	0001883a 	nop
    f390:	e037883a 	mov	sp,fp
    f394:	dfc00117 	ldw	ra,4(sp)
    f398:	df000017 	ldw	fp,0(sp)
    f39c:	dec00204 	addi	sp,sp,8
    f3a0:	f800283a 	ret

0000f3a4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    f3a4:	defff904 	addi	sp,sp,-28
    f3a8:	dfc00615 	stw	ra,24(sp)
    f3ac:	df000515 	stw	fp,20(sp)
    f3b0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    f3b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    f3b8:	01000084 	movi	r4,2
    f3bc:	0015aa80 	call	15aa8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3c0:	0005303a 	rdctl	r2,status
    f3c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f3c8:	e0fffc17 	ldw	r3,-16(fp)
    f3cc:	00bfff84 	movi	r2,-2
    f3d0:	1884703a 	and	r2,r3,r2
    f3d4:	1001703a 	wrctl	status,r2
  
  return context;
    f3d8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    f3dc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    f3e0:	d0272715 	stw	zero,-25444(gp)
    f3e4:	e0bffb17 	ldw	r2,-20(fp)
    f3e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f3ec:	e0bffd17 	ldw	r2,-12(fp)
    f3f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    f3f4:	01001904 	movi	r4,100
    f3f8:	0015aa80 	call	15aa8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f3fc:	0005303a 	rdctl	r2,status
    f400:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f404:	e0fffe17 	ldw	r3,-8(fp)
    f408:	00bfff84 	movi	r2,-2
    f40c:	1884703a 	and	r2,r3,r2
    f410:	1001703a 	wrctl	status,r2
  
  return context;
    f414:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    f418:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    f41c:	d0a72717 	ldw	r2,-25444(gp)
    f420:	d0a72c15 	stw	r2,-25424(gp)
    OSStatRdy    = OS_TRUE;
    f424:	00800044 	movi	r2,1
    f428:	d0a73805 	stb	r2,-25376(gp)
    f42c:	e0bffb17 	ldw	r2,-20(fp)
    f430:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f434:	e0bfff17 	ldw	r2,-4(fp)
    f438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    f43c:	0001883a 	nop
    f440:	e037883a 	mov	sp,fp
    f444:	dfc00117 	ldw	ra,4(sp)
    f448:	df000017 	ldw	fp,0(sp)
    f44c:	dec00204 	addi	sp,sp,8
    f450:	f800283a 	ret

0000f454 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    f454:	defff704 	addi	sp,sp,-36
    f458:	dfc00815 	stw	ra,32(sp)
    f45c:	df000715 	stw	fp,28(sp)
    f460:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    f464:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    f468:	0017cbc0 	call	17cbc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f46c:	0005303a 	rdctl	r2,status
    f470:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f474:	e0fffd17 	ldw	r3,-12(fp)
    f478:	00bfff84 	movi	r2,-2
    f47c:	1884703a 	and	r2,r3,r2
    f480:	1001703a 	wrctl	status,r2
  
  return context;
    f484:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    f488:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    f48c:	d0a73617 	ldw	r2,-25384(gp)
    f490:	10800044 	addi	r2,r2,1
    f494:	d0a73615 	stw	r2,-25384(gp)
    f498:	e0bffb17 	ldw	r2,-20(fp)
    f49c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f4a0:	e0bfff17 	ldw	r2,-4(fp)
    f4a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    f4a8:	d0a72643 	ldbu	r2,-25447(gp)
    f4ac:	10803fcc 	andi	r2,r2,255
    f4b0:	10800058 	cmpnei	r2,r2,1
    f4b4:	10006a1e 	bne	r2,zero,f660 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    f4b8:	d0a72a03 	ldbu	r2,-25432(gp)
    f4bc:	10803fcc 	andi	r2,r2,255
    f4c0:	10c00060 	cmpeqi	r3,r2,1
    f4c4:	1800061e 	bne	r3,zero,f4e0 <OSTimeTick+0x8c>
    f4c8:	10c000a0 	cmpeqi	r3,r2,2
    f4cc:	1800061e 	bne	r3,zero,f4e8 <OSTimeTick+0x94>
    f4d0:	10000a1e 	bne	r2,zero,f4fc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    f4d4:	00800044 	movi	r2,1
    f4d8:	e0bffa05 	stb	r2,-24(fp)
                 break;
    f4dc:	00000b06 	br	f50c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    f4e0:	e03ffa05 	stb	zero,-24(fp)
                 break;
    f4e4:	00000906 	br	f50c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    f4e8:	00800044 	movi	r2,1
    f4ec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    f4f0:	00800044 	movi	r2,1
    f4f4:	d0a72a05 	stb	r2,-25432(gp)
                 break;
    f4f8:	00000406 	br	f50c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    f4fc:	00800044 	movi	r2,1
    f500:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    f504:	d0272a05 	stb	zero,-25432(gp)
                 break;
    f508:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    f50c:	e0bffa03 	ldbu	r2,-24(fp)
    f510:	10005226 	beq	r2,zero,f65c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    f514:	d0a72917 	ldw	r2,-25436(gp)
    f518:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f51c:	00004906 	br	f644 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f520:	0005303a 	rdctl	r2,status
    f524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f528:	e0fffc17 	ldw	r3,-16(fp)
    f52c:	00bfff84 	movi	r2,-2
    f530:	1884703a 	and	r2,r3,r2
    f534:	1001703a 	wrctl	status,r2
  
  return context;
    f538:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    f53c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    f540:	e0bff917 	ldw	r2,-28(fp)
    f544:	10800b8b 	ldhu	r2,46(r2)
    f548:	10bfffcc 	andi	r2,r2,65535
    f54c:	10003626 	beq	r2,zero,f628 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    f550:	e0bff917 	ldw	r2,-28(fp)
    f554:	10800b8b 	ldhu	r2,46(r2)
    f558:	10bfffc4 	addi	r2,r2,-1
    f55c:	1007883a 	mov	r3,r2
    f560:	e0bff917 	ldw	r2,-28(fp)
    f564:	10c00b8d 	sth	r3,46(r2)
    f568:	e0bff917 	ldw	r2,-28(fp)
    f56c:	10800b8b 	ldhu	r2,46(r2)
    f570:	10bfffcc 	andi	r2,r2,65535
    f574:	10002c1e 	bne	r2,zero,f628 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    f578:	e0bff917 	ldw	r2,-28(fp)
    f57c:	10800c03 	ldbu	r2,48(r2)
    f580:	10803fcc 	andi	r2,r2,255
    f584:	10800dcc 	andi	r2,r2,55
    f588:	10000b26 	beq	r2,zero,f5b8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    f58c:	e0bff917 	ldw	r2,-28(fp)
    f590:	10c00c03 	ldbu	r3,48(r2)
    f594:	00bff204 	movi	r2,-56
    f598:	1884703a 	and	r2,r3,r2
    f59c:	1007883a 	mov	r3,r2
    f5a0:	e0bff917 	ldw	r2,-28(fp)
    f5a4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    f5a8:	e0bff917 	ldw	r2,-28(fp)
    f5ac:	00c00044 	movi	r3,1
    f5b0:	10c00c45 	stb	r3,49(r2)
    f5b4:	00000206 	br	f5c0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    f5b8:	e0bff917 	ldw	r2,-28(fp)
    f5bc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    f5c0:	e0bff917 	ldw	r2,-28(fp)
    f5c4:	10800c03 	ldbu	r2,48(r2)
    f5c8:	10803fcc 	andi	r2,r2,255
    f5cc:	1080020c 	andi	r2,r2,8
    f5d0:	1000151e 	bne	r2,zero,f628 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    f5d4:	e0bff917 	ldw	r2,-28(fp)
    f5d8:	10c00d83 	ldbu	r3,54(r2)
    f5dc:	d0a73203 	ldbu	r2,-25400(gp)
    f5e0:	1884b03a 	or	r2,r3,r2
    f5e4:	d0a73205 	stb	r2,-25400(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    f5e8:	e0bff917 	ldw	r2,-28(fp)
    f5ec:	10800d03 	ldbu	r2,52(r2)
    f5f0:	10c03fcc 	andi	r3,r2,255
    f5f4:	e0bff917 	ldw	r2,-28(fp)
    f5f8:	10800d03 	ldbu	r2,52(r2)
    f5fc:	11003fcc 	andi	r4,r2,255
    f600:	d0a73244 	addi	r2,gp,-25399
    f604:	2085883a 	add	r2,r4,r2
    f608:	11000003 	ldbu	r4,0(r2)
    f60c:	e0bff917 	ldw	r2,-28(fp)
    f610:	10800d43 	ldbu	r2,53(r2)
    f614:	2084b03a 	or	r2,r4,r2
    f618:	1009883a 	mov	r4,r2
    f61c:	d0a73244 	addi	r2,gp,-25399
    f620:	1885883a 	add	r2,r3,r2
    f624:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    f628:	e0bff917 	ldw	r2,-28(fp)
    f62c:	10800517 	ldw	r2,20(r2)
    f630:	e0bff915 	stw	r2,-28(fp)
    f634:	e0bffb17 	ldw	r2,-20(fp)
    f638:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f63c:	e0bffe17 	ldw	r2,-8(fp)
    f640:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    f644:	e0bff917 	ldw	r2,-28(fp)
    f648:	10800c83 	ldbu	r2,50(r2)
    f64c:	10803fcc 	andi	r2,r2,255
    f650:	10800518 	cmpnei	r2,r2,20
    f654:	103fb21e 	bne	r2,zero,f520 <__alt_data_end+0xfffde7e0>
    f658:	00000106 	br	f660 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    f65c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    f660:	e037883a 	mov	sp,fp
    f664:	dfc00117 	ldw	ra,4(sp)
    f668:	df000017 	ldw	fp,0(sp)
    f66c:	dec00204 	addi	sp,sp,8
    f670:	f800283a 	ret

0000f674 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    f674:	deffff04 	addi	sp,sp,-4
    f678:	df000015 	stw	fp,0(sp)
    f67c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    f680:	00804784 	movi	r2,286
}
    f684:	e037883a 	mov	sp,fp
    f688:	df000017 	ldw	fp,0(sp)
    f68c:	dec00104 	addi	sp,sp,4
    f690:	f800283a 	ret

0000f694 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    f694:	deffff04 	addi	sp,sp,-4
    f698:	df000015 	stw	fp,0(sp)
    f69c:	d839883a 	mov	fp,sp
}
    f6a0:	0001883a 	nop
    f6a4:	e037883a 	mov	sp,fp
    f6a8:	df000017 	ldw	fp,0(sp)
    f6ac:	dec00104 	addi	sp,sp,4
    f6b0:	f800283a 	ret

0000f6b4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    f6b4:	defff804 	addi	sp,sp,-32
    f6b8:	dfc00715 	stw	ra,28(sp)
    f6bc:	df000615 	stw	fp,24(sp)
    f6c0:	df000604 	addi	fp,sp,24
    f6c4:	e13ffc15 	stw	r4,-16(fp)
    f6c8:	e17ffd15 	stw	r5,-12(fp)
    f6cc:	3007883a 	mov	r3,r6
    f6d0:	3805883a 	mov	r2,r7
    f6d4:	e0fffe05 	stb	r3,-8(fp)
    f6d8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    f6dc:	e0bffc17 	ldw	r2,-16(fp)
    f6e0:	10800283 	ldbu	r2,10(r2)
    f6e4:	10c03fcc 	andi	r3,r2,255
    f6e8:	008000b4 	movhi	r2,2
    f6ec:	10a3d504 	addi	r2,r2,-28844
    f6f0:	10c5883a 	add	r2,r2,r3
    f6f4:	10800003 	ldbu	r2,0(r2)
    f6f8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    f6fc:	e0bffa03 	ldbu	r2,-24(fp)
    f700:	e0fffc17 	ldw	r3,-16(fp)
    f704:	1885883a 	add	r2,r3,r2
    f708:	108002c4 	addi	r2,r2,11
    f70c:	10800003 	ldbu	r2,0(r2)
    f710:	10c03fcc 	andi	r3,r2,255
    f714:	008000b4 	movhi	r2,2
    f718:	10a3d504 	addi	r2,r2,-28844
    f71c:	10c5883a 	add	r2,r2,r3
    f720:	10800003 	ldbu	r2,0(r2)
    f724:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    f728:	e0bffa03 	ldbu	r2,-24(fp)
    f72c:	100490fa 	slli	r2,r2,3
    f730:	1007883a 	mov	r3,r2
    f734:	e0bffa43 	ldbu	r2,-23(fp)
    f738:	1885883a 	add	r2,r3,r2
    f73c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    f740:	e0fffa83 	ldbu	r3,-22(fp)
    f744:	008000b4 	movhi	r2,2
    f748:	10969b04 	addi	r2,r2,23148
    f74c:	18c7883a 	add	r3,r3,r3
    f750:	18c7883a 	add	r3,r3,r3
    f754:	10c5883a 	add	r2,r2,r3
    f758:	10800017 	ldw	r2,0(r2)
    f75c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    f760:	e0bffb17 	ldw	r2,-20(fp)
    f764:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    f768:	e0bffb17 	ldw	r2,-20(fp)
    f76c:	e0fffd17 	ldw	r3,-12(fp)
    f770:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    f774:	e0bffb17 	ldw	r2,-20(fp)
    f778:	10800c03 	ldbu	r2,48(r2)
    f77c:	1007883a 	mov	r3,r2
    f780:	e0bffe03 	ldbu	r2,-8(fp)
    f784:	0084303a 	nor	r2,zero,r2
    f788:	1884703a 	and	r2,r3,r2
    f78c:	1007883a 	mov	r3,r2
    f790:	e0bffb17 	ldw	r2,-20(fp)
    f794:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    f798:	e0bffb17 	ldw	r2,-20(fp)
    f79c:	e0ffff03 	ldbu	r3,-4(fp)
    f7a0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    f7a4:	e0bffb17 	ldw	r2,-20(fp)
    f7a8:	10800c03 	ldbu	r2,48(r2)
    f7ac:	10803fcc 	andi	r2,r2,255
    f7b0:	1080020c 	andi	r2,r2,8
    f7b4:	1000111e 	bne	r2,zero,f7fc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    f7b8:	e0bffb17 	ldw	r2,-20(fp)
    f7bc:	10c00d83 	ldbu	r3,54(r2)
    f7c0:	d0a73203 	ldbu	r2,-25400(gp)
    f7c4:	1884b03a 	or	r2,r3,r2
    f7c8:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    f7cc:	e0fffa03 	ldbu	r3,-24(fp)
    f7d0:	e13ffa03 	ldbu	r4,-24(fp)
    f7d4:	d0a73244 	addi	r2,gp,-25399
    f7d8:	2085883a 	add	r2,r4,r2
    f7dc:	11000003 	ldbu	r4,0(r2)
    f7e0:	e0bffb17 	ldw	r2,-20(fp)
    f7e4:	10800d43 	ldbu	r2,53(r2)
    f7e8:	2084b03a 	or	r2,r4,r2
    f7ec:	1009883a 	mov	r4,r2
    f7f0:	d0a73244 	addi	r2,gp,-25399
    f7f4:	1885883a 	add	r2,r3,r2
    f7f8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    f7fc:	e17ffc17 	ldw	r5,-16(fp)
    f800:	e13ffb17 	ldw	r4,-20(fp)
    f804:	000faac0 	call	faac <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    f808:	e0bffb17 	ldw	r2,-20(fp)
    f80c:	10800817 	ldw	r2,32(r2)
    f810:	10000826 	beq	r2,zero,f834 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    f814:	e0bffb17 	ldw	r2,-20(fp)
    f818:	10800817 	ldw	r2,32(r2)
    f81c:	100b883a 	mov	r5,r2
    f820:	e13ffb17 	ldw	r4,-20(fp)
    f824:	000fb640 	call	fb64 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    f828:	e0bffb17 	ldw	r2,-20(fp)
    f82c:	e0fffc17 	ldw	r3,-16(fp)
    f830:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    f834:	e0bffa83 	ldbu	r2,-22(fp)
}
    f838:	e037883a 	mov	sp,fp
    f83c:	dfc00117 	ldw	ra,4(sp)
    f840:	df000017 	ldw	fp,0(sp)
    f844:	dec00204 	addi	sp,sp,8
    f848:	f800283a 	ret

0000f84c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    f84c:	defffd04 	addi	sp,sp,-12
    f850:	df000215 	stw	fp,8(sp)
    f854:	df000204 	addi	fp,sp,8
    f858:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    f85c:	d0a73517 	ldw	r2,-25388(gp)
    f860:	e0ffff17 	ldw	r3,-4(fp)
    f864:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    f868:	d0a73517 	ldw	r2,-25388(gp)
    f86c:	10800d03 	ldbu	r2,52(r2)
    f870:	10803fcc 	andi	r2,r2,255
    f874:	d0e73517 	ldw	r3,-25388(gp)
    f878:	18c00d03 	ldbu	r3,52(r3)
    f87c:	18c03fcc 	andi	r3,r3,255
    f880:	e13fff17 	ldw	r4,-4(fp)
    f884:	20c7883a 	add	r3,r4,r3
    f888:	18c002c4 	addi	r3,r3,11
    f88c:	19000003 	ldbu	r4,0(r3)
    f890:	d0e73517 	ldw	r3,-25388(gp)
    f894:	18c00d43 	ldbu	r3,53(r3)
    f898:	20c6b03a 	or	r3,r4,r3
    f89c:	1809883a 	mov	r4,r3
    f8a0:	e0ffff17 	ldw	r3,-4(fp)
    f8a4:	1885883a 	add	r2,r3,r2
    f8a8:	108002c4 	addi	r2,r2,11
    f8ac:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f8b0:	e0bfff17 	ldw	r2,-4(fp)
    f8b4:	10c00283 	ldbu	r3,10(r2)
    f8b8:	d0a73517 	ldw	r2,-25388(gp)
    f8bc:	10800d83 	ldbu	r2,54(r2)
    f8c0:	1884b03a 	or	r2,r3,r2
    f8c4:	1007883a 	mov	r3,r2
    f8c8:	e0bfff17 	ldw	r2,-4(fp)
    f8cc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    f8d0:	d0a73517 	ldw	r2,-25388(gp)
    f8d4:	10800d03 	ldbu	r2,52(r2)
    f8d8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    f8dc:	e0fffe03 	ldbu	r3,-8(fp)
    f8e0:	e13ffe03 	ldbu	r4,-8(fp)
    f8e4:	d0a73244 	addi	r2,gp,-25399
    f8e8:	2085883a 	add	r2,r4,r2
    f8ec:	10800003 	ldbu	r2,0(r2)
    f8f0:	1009883a 	mov	r4,r2
    f8f4:	d0a73517 	ldw	r2,-25388(gp)
    f8f8:	10800d43 	ldbu	r2,53(r2)
    f8fc:	0084303a 	nor	r2,zero,r2
    f900:	2084703a 	and	r2,r4,r2
    f904:	1009883a 	mov	r4,r2
    f908:	d0a73244 	addi	r2,gp,-25399
    f90c:	1885883a 	add	r2,r3,r2
    f910:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    f914:	e0fffe03 	ldbu	r3,-8(fp)
    f918:	d0a73244 	addi	r2,gp,-25399
    f91c:	1885883a 	add	r2,r3,r2
    f920:	10800003 	ldbu	r2,0(r2)
    f924:	10803fcc 	andi	r2,r2,255
    f928:	1000071e 	bne	r2,zero,f948 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    f92c:	d0a73517 	ldw	r2,-25388(gp)
    f930:	10800d83 	ldbu	r2,54(r2)
    f934:	0084303a 	nor	r2,zero,r2
    f938:	1007883a 	mov	r3,r2
    f93c:	d0a73203 	ldbu	r2,-25400(gp)
    f940:	1884703a 	and	r2,r3,r2
    f944:	d0a73205 	stb	r2,-25400(gp)
    }
}
    f948:	0001883a 	nop
    f94c:	e037883a 	mov	sp,fp
    f950:	df000017 	ldw	fp,0(sp)
    f954:	dec00104 	addi	sp,sp,4
    f958:	f800283a 	ret

0000f95c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    f95c:	defffb04 	addi	sp,sp,-20
    f960:	df000415 	stw	fp,16(sp)
    f964:	df000404 	addi	fp,sp,16
    f968:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    f96c:	d0a73517 	ldw	r2,-25388(gp)
    f970:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    f974:	d0a73517 	ldw	r2,-25388(gp)
    f978:	e0ffff17 	ldw	r3,-4(fp)
    f97c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    f980:	e0bfff17 	ldw	r2,-4(fp)
    f984:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    f988:	e0bffc17 	ldw	r2,-16(fp)
    f98c:	10800017 	ldw	r2,0(r2)
    f990:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    f994:	00002006 	br	fa18 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    f998:	d0a73517 	ldw	r2,-25388(gp)
    f99c:	10800d03 	ldbu	r2,52(r2)
    f9a0:	10803fcc 	andi	r2,r2,255
    f9a4:	d0e73517 	ldw	r3,-25388(gp)
    f9a8:	18c00d03 	ldbu	r3,52(r3)
    f9ac:	18c03fcc 	andi	r3,r3,255
    f9b0:	e13ffd17 	ldw	r4,-12(fp)
    f9b4:	20c7883a 	add	r3,r4,r3
    f9b8:	18c002c4 	addi	r3,r3,11
    f9bc:	19000003 	ldbu	r4,0(r3)
    f9c0:	d0e73517 	ldw	r3,-25388(gp)
    f9c4:	18c00d43 	ldbu	r3,53(r3)
    f9c8:	20c6b03a 	or	r3,r4,r3
    f9cc:	1809883a 	mov	r4,r3
    f9d0:	e0fffd17 	ldw	r3,-12(fp)
    f9d4:	1885883a 	add	r2,r3,r2
    f9d8:	108002c4 	addi	r2,r2,11
    f9dc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    f9e0:	e0bffd17 	ldw	r2,-12(fp)
    f9e4:	10c00283 	ldbu	r3,10(r2)
    f9e8:	d0a73517 	ldw	r2,-25388(gp)
    f9ec:	10800d83 	ldbu	r2,54(r2)
    f9f0:	1884b03a 	or	r2,r3,r2
    f9f4:	1007883a 	mov	r3,r2
    f9f8:	e0bffd17 	ldw	r2,-12(fp)
    f9fc:	10c00285 	stb	r3,10(r2)
        pevents++;
    fa00:	e0bffc17 	ldw	r2,-16(fp)
    fa04:	10800104 	addi	r2,r2,4
    fa08:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    fa0c:	e0bffc17 	ldw	r2,-16(fp)
    fa10:	10800017 	ldw	r2,0(r2)
    fa14:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    fa18:	e0bffd17 	ldw	r2,-12(fp)
    fa1c:	103fde1e 	bne	r2,zero,f998 <__alt_data_end+0xfffdec58>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    fa20:	d0a73517 	ldw	r2,-25388(gp)
    fa24:	10800d03 	ldbu	r2,52(r2)
    fa28:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    fa2c:	e0fffe03 	ldbu	r3,-8(fp)
    fa30:	e13ffe03 	ldbu	r4,-8(fp)
    fa34:	d0a73244 	addi	r2,gp,-25399
    fa38:	2085883a 	add	r2,r4,r2
    fa3c:	10800003 	ldbu	r2,0(r2)
    fa40:	1009883a 	mov	r4,r2
    fa44:	d0a73517 	ldw	r2,-25388(gp)
    fa48:	10800d43 	ldbu	r2,53(r2)
    fa4c:	0084303a 	nor	r2,zero,r2
    fa50:	2084703a 	and	r2,r4,r2
    fa54:	1009883a 	mov	r4,r2
    fa58:	d0a73244 	addi	r2,gp,-25399
    fa5c:	1885883a 	add	r2,r3,r2
    fa60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    fa64:	e0fffe03 	ldbu	r3,-8(fp)
    fa68:	d0a73244 	addi	r2,gp,-25399
    fa6c:	1885883a 	add	r2,r3,r2
    fa70:	10800003 	ldbu	r2,0(r2)
    fa74:	10803fcc 	andi	r2,r2,255
    fa78:	1000071e 	bne	r2,zero,fa98 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    fa7c:	d0a73517 	ldw	r2,-25388(gp)
    fa80:	10800d83 	ldbu	r2,54(r2)
    fa84:	0084303a 	nor	r2,zero,r2
    fa88:	1007883a 	mov	r3,r2
    fa8c:	d0a73203 	ldbu	r2,-25400(gp)
    fa90:	1884703a 	and	r2,r3,r2
    fa94:	d0a73205 	stb	r2,-25400(gp)
    }
}
    fa98:	0001883a 	nop
    fa9c:	e037883a 	mov	sp,fp
    faa0:	df000017 	ldw	fp,0(sp)
    faa4:	dec00104 	addi	sp,sp,4
    faa8:	f800283a 	ret

0000faac <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    faac:	defffc04 	addi	sp,sp,-16
    fab0:	df000315 	stw	fp,12(sp)
    fab4:	df000304 	addi	fp,sp,12
    fab8:	e13ffe15 	stw	r4,-8(fp)
    fabc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    fac0:	e0bffe17 	ldw	r2,-8(fp)
    fac4:	10800d03 	ldbu	r2,52(r2)
    fac8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    facc:	e0bffd03 	ldbu	r2,-12(fp)
    fad0:	e0fffd03 	ldbu	r3,-12(fp)
    fad4:	e13fff17 	ldw	r4,-4(fp)
    fad8:	20c7883a 	add	r3,r4,r3
    fadc:	18c002c4 	addi	r3,r3,11
    fae0:	18c00003 	ldbu	r3,0(r3)
    fae4:	1809883a 	mov	r4,r3
    fae8:	e0fffe17 	ldw	r3,-8(fp)
    faec:	18c00d43 	ldbu	r3,53(r3)
    faf0:	00c6303a 	nor	r3,zero,r3
    faf4:	20c6703a 	and	r3,r4,r3
    faf8:	1809883a 	mov	r4,r3
    fafc:	e0ffff17 	ldw	r3,-4(fp)
    fb00:	1885883a 	add	r2,r3,r2
    fb04:	108002c4 	addi	r2,r2,11
    fb08:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    fb0c:	e0bffd03 	ldbu	r2,-12(fp)
    fb10:	e0ffff17 	ldw	r3,-4(fp)
    fb14:	1885883a 	add	r2,r3,r2
    fb18:	108002c4 	addi	r2,r2,11
    fb1c:	10800003 	ldbu	r2,0(r2)
    fb20:	10803fcc 	andi	r2,r2,255
    fb24:	10000a1e 	bne	r2,zero,fb50 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    fb28:	e0bfff17 	ldw	r2,-4(fp)
    fb2c:	10800283 	ldbu	r2,10(r2)
    fb30:	1007883a 	mov	r3,r2
    fb34:	e0bffe17 	ldw	r2,-8(fp)
    fb38:	10800d83 	ldbu	r2,54(r2)
    fb3c:	0084303a 	nor	r2,zero,r2
    fb40:	1884703a 	and	r2,r3,r2
    fb44:	1007883a 	mov	r3,r2
    fb48:	e0bfff17 	ldw	r2,-4(fp)
    fb4c:	10c00285 	stb	r3,10(r2)
    }
}
    fb50:	0001883a 	nop
    fb54:	e037883a 	mov	sp,fp
    fb58:	df000017 	ldw	fp,0(sp)
    fb5c:	dec00104 	addi	sp,sp,4
    fb60:	f800283a 	ret

0000fb64 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    fb64:	defffa04 	addi	sp,sp,-24
    fb68:	df000515 	stw	fp,20(sp)
    fb6c:	df000504 	addi	fp,sp,20
    fb70:	e13ffe15 	stw	r4,-8(fp)
    fb74:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    fb78:	e0bffe17 	ldw	r2,-8(fp)
    fb7c:	10800d03 	ldbu	r2,52(r2)
    fb80:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    fb84:	e0bffe17 	ldw	r2,-8(fp)
    fb88:	10800d83 	ldbu	r2,54(r2)
    fb8c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    fb90:	e0bffe17 	ldw	r2,-8(fp)
    fb94:	10800d43 	ldbu	r2,53(r2)
    fb98:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    fb9c:	e0bfff17 	ldw	r2,-4(fp)
    fba0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    fba4:	e0bffb17 	ldw	r2,-20(fp)
    fba8:	10800017 	ldw	r2,0(r2)
    fbac:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    fbb0:	00002506 	br	fc48 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    fbb4:	e0bffd03 	ldbu	r2,-12(fp)
    fbb8:	e0fffd03 	ldbu	r3,-12(fp)
    fbbc:	e13ffc17 	ldw	r4,-16(fp)
    fbc0:	20c7883a 	add	r3,r4,r3
    fbc4:	18c002c4 	addi	r3,r3,11
    fbc8:	18c00003 	ldbu	r3,0(r3)
    fbcc:	1809883a 	mov	r4,r3
    fbd0:	e0fffd83 	ldbu	r3,-10(fp)
    fbd4:	00c6303a 	nor	r3,zero,r3
    fbd8:	20c6703a 	and	r3,r4,r3
    fbdc:	1809883a 	mov	r4,r3
    fbe0:	e0fffc17 	ldw	r3,-16(fp)
    fbe4:	1885883a 	add	r2,r3,r2
    fbe8:	108002c4 	addi	r2,r2,11
    fbec:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    fbf0:	e0bffd03 	ldbu	r2,-12(fp)
    fbf4:	e0fffc17 	ldw	r3,-16(fp)
    fbf8:	1885883a 	add	r2,r3,r2
    fbfc:	108002c4 	addi	r2,r2,11
    fc00:	10800003 	ldbu	r2,0(r2)
    fc04:	10803fcc 	andi	r2,r2,255
    fc08:	1000091e 	bne	r2,zero,fc30 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    fc0c:	e0bffc17 	ldw	r2,-16(fp)
    fc10:	10800283 	ldbu	r2,10(r2)
    fc14:	1007883a 	mov	r3,r2
    fc18:	e0bffd43 	ldbu	r2,-11(fp)
    fc1c:	0084303a 	nor	r2,zero,r2
    fc20:	1884703a 	and	r2,r3,r2
    fc24:	1007883a 	mov	r3,r2
    fc28:	e0bffc17 	ldw	r2,-16(fp)
    fc2c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    fc30:	e0bffb17 	ldw	r2,-20(fp)
    fc34:	10800104 	addi	r2,r2,4
    fc38:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    fc3c:	e0bffb17 	ldw	r2,-20(fp)
    fc40:	10800017 	ldw	r2,0(r2)
    fc44:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    fc48:	e0bffc17 	ldw	r2,-16(fp)
    fc4c:	103fd91e 	bne	r2,zero,fbb4 <__alt_data_end+0xfffdee74>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    fc50:	0001883a 	nop
    fc54:	e037883a 	mov	sp,fp
    fc58:	df000017 	ldw	fp,0(sp)
    fc5c:	dec00104 	addi	sp,sp,4
    fc60:	f800283a 	ret

0000fc64 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    fc64:	defffc04 	addi	sp,sp,-16
    fc68:	df000315 	stw	fp,12(sp)
    fc6c:	df000304 	addi	fp,sp,12
    fc70:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    fc74:	e0bfff17 	ldw	r2,-4(fp)
    fc78:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    fc7c:	e0bfff17 	ldw	r2,-4(fp)
    fc80:	108002c4 	addi	r2,r2,11
    fc84:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fc88:	e03ffe05 	stb	zero,-8(fp)
    fc8c:	00000706 	br	fcac <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    fc90:	e0bffd17 	ldw	r2,-12(fp)
    fc94:	10c00044 	addi	r3,r2,1
    fc98:	e0fffd15 	stw	r3,-12(fp)
    fc9c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    fca0:	e0bffe03 	ldbu	r2,-8(fp)
    fca4:	10800044 	addi	r2,r2,1
    fca8:	e0bffe05 	stb	r2,-8(fp)
    fcac:	e0bffe03 	ldbu	r2,-8(fp)
    fcb0:	108000f0 	cmpltui	r2,r2,3
    fcb4:	103ff61e 	bne	r2,zero,fc90 <__alt_data_end+0xfffdef50>
        *ptbl++ = 0;
    }
}
    fcb8:	0001883a 	nop
    fcbc:	e037883a 	mov	sp,fp
    fcc0:	df000017 	ldw	fp,0(sp)
    fcc4:	dec00104 	addi	sp,sp,4
    fcc8:	f800283a 	ret

0000fccc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    fccc:	defffb04 	addi	sp,sp,-20
    fcd0:	dfc00415 	stw	ra,16(sp)
    fcd4:	df000315 	stw	fp,12(sp)
    fcd8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    fcdc:	0142d004 	movi	r5,2880
    fce0:	010000b4 	movhi	r4,2
    fce4:	21128704 	addi	r4,r4,18972
    fce8:	00100440 	call	10044 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    fcec:	008000b4 	movhi	r2,2
    fcf0:	10928704 	addi	r2,r2,18972
    fcf4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    fcf8:	008000b4 	movhi	r2,2
    fcfc:	10929304 	addi	r2,r2,19020
    fd00:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    fd04:	e03ffd0d 	sth	zero,-12(fp)
    fd08:	00001306 	br	fd58 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    fd0c:	e0bffe17 	ldw	r2,-8(fp)
    fd10:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    fd14:	e0bffe17 	ldw	r2,-8(fp)
    fd18:	e0ffff17 	ldw	r3,-4(fp)
    fd1c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    fd20:	e0bffe17 	ldw	r2,-8(fp)
    fd24:	00c00fc4 	movi	r3,63
    fd28:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    fd2c:	e0bffe17 	ldw	r2,-8(fp)
    fd30:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    fd34:	e0bffe17 	ldw	r2,-8(fp)
    fd38:	10800c04 	addi	r2,r2,48
    fd3c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    fd40:	e0bfff17 	ldw	r2,-4(fp)
    fd44:	10800c04 	addi	r2,r2,48
    fd48:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    fd4c:	e0bffd0b 	ldhu	r2,-12(fp)
    fd50:	10800044 	addi	r2,r2,1
    fd54:	e0bffd0d 	sth	r2,-12(fp)
    fd58:	e0bffd0b 	ldhu	r2,-12(fp)
    fd5c:	10800ef0 	cmpltui	r2,r2,59
    fd60:	103fea1e 	bne	r2,zero,fd0c <__alt_data_end+0xfffdefcc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    fd64:	e0bffe17 	ldw	r2,-8(fp)
    fd68:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    fd6c:	e0bffe17 	ldw	r2,-8(fp)
    fd70:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    fd74:	e0bffe17 	ldw	r2,-8(fp)
    fd78:	00c00fc4 	movi	r3,63
    fd7c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    fd80:	e0bffe17 	ldw	r2,-8(fp)
    fd84:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    fd88:	008000b4 	movhi	r2,2
    fd8c:	10928704 	addi	r2,r2,18972
    fd90:	d0a73315 	stw	r2,-25396(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    fd94:	0001883a 	nop
    fd98:	e037883a 	mov	sp,fp
    fd9c:	dfc00117 	ldw	ra,4(sp)
    fda0:	df000017 	ldw	fp,0(sp)
    fda4:	dec00204 	addi	sp,sp,8
    fda8:	f800283a 	ret

0000fdac <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    fdac:	deffff04 	addi	sp,sp,-4
    fdb0:	df000015 	stw	fp,0(sp)
    fdb4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    fdb8:	d0273615 	stw	zero,-25384(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    fdbc:	d0273405 	stb	zero,-25392(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    fdc0:	d0272605 	stb	zero,-25448(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    fdc4:	d0272e45 	stb	zero,-25415(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    fdc8:	d0272645 	stb	zero,-25447(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    fdcc:	d0272b15 	stw	zero,-25428(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    fdd0:	d0272715 	stw	zero,-25444(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    fdd4:	d0273915 	stw	zero,-25372(gp)
    OSIdleCtrMax  = 0L;
    fdd8:	d0272c15 	stw	zero,-25424(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    fddc:	d0273805 	stb	zero,-25376(gp)
#endif
}
    fde0:	0001883a 	nop
    fde4:	e037883a 	mov	sp,fp
    fde8:	df000017 	ldw	fp,0(sp)
    fdec:	dec00104 	addi	sp,sp,4
    fdf0:	f800283a 	ret

0000fdf4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    fdf4:	defffd04 	addi	sp,sp,-12
    fdf8:	df000215 	stw	fp,8(sp)
    fdfc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    fe00:	d0273205 	stb	zero,-25400(gp)
    prdytbl       = &OSRdyTbl[0];
    fe04:	d0a73244 	addi	r2,gp,-25399
    fe08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fe0c:	e03ffe05 	stb	zero,-8(fp)
    fe10:	00000706 	br	fe30 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    fe14:	e0bfff17 	ldw	r2,-4(fp)
    fe18:	10c00044 	addi	r3,r2,1
    fe1c:	e0ffff15 	stw	r3,-4(fp)
    fe20:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    fe24:	e0bffe03 	ldbu	r2,-8(fp)
    fe28:	10800044 	addi	r2,r2,1
    fe2c:	e0bffe05 	stb	r2,-8(fp)
    fe30:	e0bffe03 	ldbu	r2,-8(fp)
    fe34:	108000f0 	cmpltui	r2,r2,3
    fe38:	103ff61e 	bne	r2,zero,fe14 <__alt_data_end+0xfffdf0d4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    fe3c:	d0272845 	stb	zero,-25439(gp)
    OSPrioHighRdy = 0;
    fe40:	d0272805 	stb	zero,-25440(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    fe44:	d0273015 	stw	zero,-25408(gp)
    OSTCBCur      = (OS_TCB *)0;
    fe48:	d0273515 	stw	zero,-25388(gp)
}
    fe4c:	0001883a 	nop
    fe50:	e037883a 	mov	sp,fp
    fe54:	df000017 	ldw	fp,0(sp)
    fe58:	dec00104 	addi	sp,sp,4
    fe5c:	f800283a 	ret

0000fe60 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    fe60:	defff804 	addi	sp,sp,-32
    fe64:	dfc00715 	stw	ra,28(sp)
    fe68:	df000615 	stw	fp,24(sp)
    fe6c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    fe70:	008000c4 	movi	r2,3
    fe74:	d8800415 	stw	r2,16(sp)
    fe78:	d8000315 	stw	zero,12(sp)
    fe7c:	00808004 	movi	r2,512
    fe80:	d8800215 	stw	r2,8(sp)
    fe84:	008000b4 	movhi	r2,2
    fe88:	10908704 	addi	r2,r2,16924
    fe8c:	d8800115 	stw	r2,4(sp)
    fe90:	00bfffd4 	movui	r2,65535
    fe94:	d8800015 	stw	r2,0(sp)
    fe98:	01c00504 	movi	r7,20
    fe9c:	018000b4 	movhi	r6,2
    fea0:	31928604 	addi	r6,r6,18968
    fea4:	000b883a 	mov	r5,zero
    fea8:	01000074 	movhi	r4,1
    feac:	2100c304 	addi	r4,r4,780
    feb0:	00149d80 	call	149d8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    feb4:	e1bfff04 	addi	r6,fp,-4
    feb8:	014000b4 	movhi	r5,2
    febc:	29641504 	addi	r5,r5,-28588
    fec0:	01000504 	movi	r4,20
    fec4:	00151e80 	call	151e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    fec8:	0001883a 	nop
    fecc:	e037883a 	mov	sp,fp
    fed0:	dfc00117 	ldw	ra,4(sp)
    fed4:	df000017 	ldw	fp,0(sp)
    fed8:	dec00204 	addi	sp,sp,8
    fedc:	f800283a 	ret

0000fee0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    fee0:	defff804 	addi	sp,sp,-32
    fee4:	dfc00715 	stw	ra,28(sp)
    fee8:	df000615 	stw	fp,24(sp)
    feec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    fef0:	008000c4 	movi	r2,3
    fef4:	d8800415 	stw	r2,16(sp)
    fef8:	d8000315 	stw	zero,12(sp)
    fefc:	00808004 	movi	r2,512
    ff00:	d8800215 	stw	r2,8(sp)
    ff04:	008000b4 	movhi	r2,2
    ff08:	108e0f04 	addi	r2,r2,14396
    ff0c:	d8800115 	stw	r2,4(sp)
    ff10:	00bfff94 	movui	r2,65534
    ff14:	d8800015 	stw	r2,0(sp)
    ff18:	01c004c4 	movi	r7,19
    ff1c:	018000b4 	movhi	r6,2
    ff20:	31900e04 	addi	r6,r6,16440
    ff24:	000b883a 	mov	r5,zero
    ff28:	01000074 	movhi	r4,1
    ff2c:	2100da04 	addi	r4,r4,872
    ff30:	00149d80 	call	149d8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    ff34:	e1bfff04 	addi	r6,fp,-4
    ff38:	014000b4 	movhi	r5,2
    ff3c:	29641904 	addi	r5,r5,-28572
    ff40:	010004c4 	movi	r4,19
    ff44:	00151e80 	call	151e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    ff48:	0001883a 	nop
    ff4c:	e037883a 	mov	sp,fp
    ff50:	dfc00117 	ldw	ra,4(sp)
    ff54:	df000017 	ldw	fp,0(sp)
    ff58:	dec00204 	addi	sp,sp,8
    ff5c:	f800283a 	ret

0000ff60 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    ff60:	defffb04 	addi	sp,sp,-20
    ff64:	dfc00415 	stw	ra,16(sp)
    ff68:	df000315 	stw	fp,12(sp)
    ff6c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    ff70:	01414404 	movi	r5,1296
    ff74:	010000b4 	movhi	r4,2
    ff78:	21155704 	addi	r4,r4,21852
    ff7c:	00100440 	call	10044 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ff80:	01401504 	movi	r5,84
    ff84:	010000b4 	movhi	r4,2
    ff88:	21169b04 	addi	r4,r4,23148
    ff8c:	00100440 	call	10044 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    ff90:	008000b4 	movhi	r2,2
    ff94:	10955704 	addi	r2,r2,21852
    ff98:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    ff9c:	008000b4 	movhi	r2,2
    ffa0:	10957204 	addi	r2,r2,21960
    ffa4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    ffa8:	e03ffd05 	stb	zero,-12(fp)
    ffac:	00001106 	br	fff4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    ffb0:	e0bffe17 	ldw	r2,-8(fp)
    ffb4:	e0ffff17 	ldw	r3,-4(fp)
    ffb8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    ffbc:	e0bffe17 	ldw	r2,-8(fp)
    ffc0:	00c00fc4 	movi	r3,63
    ffc4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    ffc8:	e0bffe17 	ldw	r2,-8(fp)
    ffcc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    ffd0:	e0bffe17 	ldw	r2,-8(fp)
    ffd4:	10801b04 	addi	r2,r2,108
    ffd8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    ffdc:	e0bfff17 	ldw	r2,-4(fp)
    ffe0:	10801b04 	addi	r2,r2,108
    ffe4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    ffe8:	e0bffd03 	ldbu	r2,-12(fp)
    ffec:	10800044 	addi	r2,r2,1
    fff0:	e0bffd05 	stb	r2,-12(fp)
    fff4:	e0bffd03 	ldbu	r2,-12(fp)
    fff8:	108002f0 	cmpltui	r2,r2,11
    fffc:	103fec1e 	bne	r2,zero,ffb0 <__alt_data_end+0xfffdf270>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   10008:	e0bffe17 	ldw	r2,-8(fp)
   1000c:	00c00fc4 	movi	r3,63
   10010:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   10014:	e0bffe17 	ldw	r2,-8(fp)
   10018:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1001c:	d0272915 	stw	zero,-25436(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   10020:	008000b4 	movhi	r2,2
   10024:	10955704 	addi	r2,r2,21852
   10028:	d0a72d15 	stw	r2,-25420(gp)
}
   1002c:	0001883a 	nop
   10030:	e037883a 	mov	sp,fp
   10034:	dfc00117 	ldw	ra,4(sp)
   10038:	df000017 	ldw	fp,0(sp)
   1003c:	dec00204 	addi	sp,sp,8
   10040:	f800283a 	ret

00010044 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   10044:	defffd04 	addi	sp,sp,-12
   10048:	df000215 	stw	fp,8(sp)
   1004c:	df000204 	addi	fp,sp,8
   10050:	e13ffe15 	stw	r4,-8(fp)
   10054:	2805883a 	mov	r2,r5
   10058:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1005c:	00000706 	br	1007c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   10060:	e0bffe17 	ldw	r2,-8(fp)
   10064:	10c00044 	addi	r3,r2,1
   10068:	e0fffe15 	stw	r3,-8(fp)
   1006c:	10000005 	stb	zero,0(r2)
        size--;
   10070:	e0bfff0b 	ldhu	r2,-4(fp)
   10074:	10bfffc4 	addi	r2,r2,-1
   10078:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1007c:	e0bfff0b 	ldhu	r2,-4(fp)
   10080:	103ff71e 	bne	r2,zero,10060 <__alt_data_end+0xfffdf320>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   10084:	0001883a 	nop
   10088:	e037883a 	mov	sp,fp
   1008c:	df000017 	ldw	fp,0(sp)
   10090:	dec00104 	addi	sp,sp,4
   10094:	f800283a 	ret

00010098 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   10098:	defffc04 	addi	sp,sp,-16
   1009c:	df000315 	stw	fp,12(sp)
   100a0:	df000304 	addi	fp,sp,12
   100a4:	e13ffd15 	stw	r4,-12(fp)
   100a8:	e17ffe15 	stw	r5,-8(fp)
   100ac:	3005883a 	mov	r2,r6
   100b0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   100b4:	00000b06 	br	100e4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   100b8:	e0bffd17 	ldw	r2,-12(fp)
   100bc:	10c00044 	addi	r3,r2,1
   100c0:	e0fffd15 	stw	r3,-12(fp)
   100c4:	e0fffe17 	ldw	r3,-8(fp)
   100c8:	19000044 	addi	r4,r3,1
   100cc:	e13ffe15 	stw	r4,-8(fp)
   100d0:	18c00003 	ldbu	r3,0(r3)
   100d4:	10c00005 	stb	r3,0(r2)
        size--;
   100d8:	e0bfff0b 	ldhu	r2,-4(fp)
   100dc:	10bfffc4 	addi	r2,r2,-1
   100e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   100e4:	e0bfff0b 	ldhu	r2,-4(fp)
   100e8:	103ff31e 	bne	r2,zero,100b8 <__alt_data_end+0xfffdf378>
        *pdest++ = *psrc++;
        size--;
    }
}
   100ec:	0001883a 	nop
   100f0:	e037883a 	mov	sp,fp
   100f4:	df000017 	ldw	fp,0(sp)
   100f8:	dec00104 	addi	sp,sp,4
   100fc:	f800283a 	ret

00010100 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   10100:	defffb04 	addi	sp,sp,-20
   10104:	dfc00415 	stw	ra,16(sp)
   10108:	df000315 	stw	fp,12(sp)
   1010c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   10110:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10114:	0005303a 	rdctl	r2,status
   10118:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1011c:	e0ffff17 	ldw	r3,-4(fp)
   10120:	00bfff84 	movi	r2,-2
   10124:	1884703a 	and	r2,r3,r2
   10128:	1001703a 	wrctl	status,r2
  
  return context;
   1012c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   10130:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   10134:	d0a73403 	ldbu	r2,-25392(gp)
   10138:	10803fcc 	andi	r2,r2,255
   1013c:	10001a1e 	bne	r2,zero,101a8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   10140:	d0a72603 	ldbu	r2,-25448(gp)
   10144:	10803fcc 	andi	r2,r2,255
   10148:	1000171e 	bne	r2,zero,101a8 <OS_Sched+0xa8>
            OS_SchedNew();
   1014c:	00101d00 	call	101d0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   10150:	d0e72803 	ldbu	r3,-25440(gp)
   10154:	d0a72843 	ldbu	r2,-25439(gp)
   10158:	18c03fcc 	andi	r3,r3,255
   1015c:	10803fcc 	andi	r2,r2,255
   10160:	18801126 	beq	r3,r2,101a8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   10164:	d0a72803 	ldbu	r2,-25440(gp)
   10168:	10c03fcc 	andi	r3,r2,255
   1016c:	008000b4 	movhi	r2,2
   10170:	10969b04 	addi	r2,r2,23148
   10174:	18c7883a 	add	r3,r3,r3
   10178:	18c7883a 	add	r3,r3,r3
   1017c:	10c5883a 	add	r2,r2,r3
   10180:	10800017 	ldw	r2,0(r2)
   10184:	d0a73015 	stw	r2,-25408(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   10188:	d0a73017 	ldw	r2,-25408(gp)
   1018c:	10c00e17 	ldw	r3,56(r2)
   10190:	18c00044 	addi	r3,r3,1
   10194:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   10198:	d0a72b17 	ldw	r2,-25428(gp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	d0a72b15 	stw	r2,-25428(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   101a4:	0017a080 	call	17a08 <OSCtxSw>
   101a8:	e0bffd17 	ldw	r2,-12(fp)
   101ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   101b0:	e0bffe17 	ldw	r2,-8(fp)
   101b4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   101d0:	defffe04 	addi	sp,sp,-8
   101d4:	df000115 	stw	fp,4(sp)
   101d8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   101dc:	d0a73203 	ldbu	r2,-25400(gp)
   101e0:	10c03fcc 	andi	r3,r2,255
   101e4:	008000b4 	movhi	r2,2
   101e8:	10a3d504 	addi	r2,r2,-28844
   101ec:	10c5883a 	add	r2,r2,r3
   101f0:	10800003 	ldbu	r2,0(r2)
   101f4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   101f8:	e0bfff03 	ldbu	r2,-4(fp)
   101fc:	100490fa 	slli	r2,r2,3
   10200:	1009883a 	mov	r4,r2
   10204:	e0ffff03 	ldbu	r3,-4(fp)
   10208:	d0a73244 	addi	r2,gp,-25399
   1020c:	1885883a 	add	r2,r3,r2
   10210:	10800003 	ldbu	r2,0(r2)
   10214:	10c03fcc 	andi	r3,r2,255
   10218:	008000b4 	movhi	r2,2
   1021c:	10a3d504 	addi	r2,r2,-28844
   10220:	10c5883a 	add	r2,r2,r3
   10224:	10800003 	ldbu	r2,0(r2)
   10228:	2085883a 	add	r2,r4,r2
   1022c:	d0a72805 	stb	r2,-25440(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   10230:	0001883a 	nop
   10234:	e037883a 	mov	sp,fp
   10238:	df000017 	ldw	fp,0(sp)
   1023c:	dec00104 	addi	sp,sp,4
   10240:	f800283a 	ret

00010244 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   10244:	defffc04 	addi	sp,sp,-16
   10248:	df000315 	stw	fp,12(sp)
   1024c:	df000304 	addi	fp,sp,12
   10250:	e13ffe15 	stw	r4,-8(fp)
   10254:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   10258:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1025c:	00000b06 	br	1028c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   10260:	e0bffe17 	ldw	r2,-8(fp)
   10264:	10c00044 	addi	r3,r2,1
   10268:	e0fffe15 	stw	r3,-8(fp)
   1026c:	e0ffff17 	ldw	r3,-4(fp)
   10270:	19000044 	addi	r4,r3,1
   10274:	e13fff15 	stw	r4,-4(fp)
   10278:	18c00003 	ldbu	r3,0(r3)
   1027c:	10c00005 	stb	r3,0(r2)
        len++;
   10280:	e0bffd03 	ldbu	r2,-12(fp)
   10284:	10800044 	addi	r2,r2,1
   10288:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1028c:	e0bfff17 	ldw	r2,-4(fp)
   10290:	10800003 	ldbu	r2,0(r2)
   10294:	10803fcc 	andi	r2,r2,255
   10298:	103ff11e 	bne	r2,zero,10260 <__alt_data_end+0xfffdf520>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1029c:	e0bffe17 	ldw	r2,-8(fp)
   102a0:	10000005 	stb	zero,0(r2)
    return (len);
   102a4:	e0bffd03 	ldbu	r2,-12(fp)
}
   102a8:	e037883a 	mov	sp,fp
   102ac:	df000017 	ldw	fp,0(sp)
   102b0:	dec00104 	addi	sp,sp,4
   102b4:	f800283a 	ret

000102b8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   102b8:	defffd04 	addi	sp,sp,-12
   102bc:	df000215 	stw	fp,8(sp)
   102c0:	df000204 	addi	fp,sp,8
   102c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   102c8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   102cc:	00000606 	br	102e8 <OS_StrLen+0x30>
        psrc++;
   102d0:	e0bfff17 	ldw	r2,-4(fp)
   102d4:	10800044 	addi	r2,r2,1
   102d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   102dc:	e0bffe03 	ldbu	r2,-8(fp)
   102e0:	10800044 	addi	r2,r2,1
   102e4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   102e8:	e0bfff17 	ldw	r2,-4(fp)
   102ec:	10800003 	ldbu	r2,0(r2)
   102f0:	10803fcc 	andi	r2,r2,255
   102f4:	103ff61e 	bne	r2,zero,102d0 <__alt_data_end+0xfffdf590>
        psrc++;
        len++;
    }
    return (len);
   102f8:	e0bffe03 	ldbu	r2,-8(fp)
}
   102fc:	e037883a 	mov	sp,fp
   10300:	df000017 	ldw	fp,0(sp)
   10304:	dec00104 	addi	sp,sp,4
   10308:	f800283a 	ret

0001030c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1030c:	defffa04 	addi	sp,sp,-24
   10310:	dfc00515 	stw	ra,20(sp)
   10314:	df000415 	stw	fp,16(sp)
   10318:	df000404 	addi	fp,sp,16
   1031c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10320:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10324:	0005303a 	rdctl	r2,status
   10328:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1032c:	e0fffd17 	ldw	r3,-12(fp)
   10330:	00bfff84 	movi	r2,-2
   10334:	1884703a 	and	r2,r3,r2
   10338:	1001703a 	wrctl	status,r2
  
  return context;
   1033c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   10340:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   10344:	d0a72717 	ldw	r2,-25444(gp)
   10348:	10800044 	addi	r2,r2,1
   1034c:	d0a72715 	stw	r2,-25444(gp)
   10350:	e0bffc17 	ldw	r2,-16(fp)
   10354:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10358:	e0bffe17 	ldw	r2,-8(fp)
   1035c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   10360:	0017d1c0 	call	17d1c <OSTaskIdleHook>
    }
   10364:	003fef06 	br	10324 <__alt_data_end+0xfffdf5e4>

00010368 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   10368:	defffa04 	addi	sp,sp,-24
   1036c:	dfc00515 	stw	ra,20(sp)
   10370:	df000415 	stw	fp,16(sp)
   10374:	df000404 	addi	fp,sp,16
   10378:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1037c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   10380:	00000206 	br	1038c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   10384:	01003204 	movi	r4,200
   10388:	0015aa80 	call	15aa8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1038c:	d0a73803 	ldbu	r2,-25376(gp)
   10390:	10803fcc 	andi	r2,r2,255
   10394:	103ffb26 	beq	r2,zero,10384 <__alt_data_end+0xfffdf644>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   10398:	d0a72c17 	ldw	r2,-25424(gp)
   1039c:	01401904 	movi	r5,100
   103a0:	1009883a 	mov	r4,r2
   103a4:	0000b040 	call	b04 <__udivsi3>
   103a8:	d0a72c15 	stw	r2,-25424(gp)
    if (OSIdleCtrMax == 0L) {
   103ac:	d0a72c17 	ldw	r2,-25424(gp)
   103b0:	1000031e 	bne	r2,zero,103c0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   103b4:	d0272e05 	stb	zero,-25416(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   103b8:	01003fc4 	movi	r4,255
   103bc:	00157300 	call	15730 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   103c0:	0005303a 	rdctl	r2,status
   103c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   103c8:	e0fffd17 	ldw	r3,-12(fp)
   103cc:	00bfff84 	movi	r2,-2
   103d0:	1884703a 	and	r2,r3,r2
   103d4:	1001703a 	wrctl	status,r2
  
  return context;
   103d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   103dc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   103e0:	d0a72717 	ldw	r2,-25444(gp)
   103e4:	d0a73915 	stw	r2,-25372(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   103e8:	d0272715 	stw	zero,-25444(gp)
   103ec:	e0bffc17 	ldw	r2,-16(fp)
   103f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   103f4:	e0bffe17 	ldw	r2,-8(fp)
   103f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   103fc:	d0a73917 	ldw	r2,-25372(gp)
   10400:	d0e72c17 	ldw	r3,-25424(gp)
   10404:	180b883a 	mov	r5,r3
   10408:	1009883a 	mov	r4,r2
   1040c:	0000b040 	call	b04 <__udivsi3>
   10410:	1007883a 	mov	r3,r2
   10414:	00801904 	movi	r2,100
   10418:	10c5c83a 	sub	r2,r2,r3
   1041c:	d0a72e05 	stb	r2,-25416(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   10420:	0017c9c0 	call	17c9c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   10424:	00104340 	call	10434 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   10428:	01001904 	movi	r4,100
   1042c:	0015aa80 	call	15aa8 <OSTimeDly>
    }
   10430:	003fe306 	br	103c0 <__alt_data_end+0xfffdf680>

00010434 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   10434:	defffa04 	addi	sp,sp,-24
   10438:	dfc00515 	stw	ra,20(sp)
   1043c:	df000415 	stw	fp,16(sp)
   10440:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   10444:	e03ffc05 	stb	zero,-16(fp)
   10448:	00002406 	br	104dc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1044c:	e0bffc03 	ldbu	r2,-16(fp)
   10450:	e0fffe04 	addi	r3,fp,-8
   10454:	180b883a 	mov	r5,r3
   10458:	1009883a 	mov	r4,r2
   1045c:	00155700 	call	15570 <OSTaskStkChk>
   10460:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   10464:	e0bffc43 	ldbu	r2,-15(fp)
   10468:	1000191e 	bne	r2,zero,104d0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1046c:	e0fffc03 	ldbu	r3,-16(fp)
   10470:	008000b4 	movhi	r2,2
   10474:	10969b04 	addi	r2,r2,23148
   10478:	18c7883a 	add	r3,r3,r3
   1047c:	18c7883a 	add	r3,r3,r3
   10480:	10c5883a 	add	r2,r2,r3
   10484:	10800017 	ldw	r2,0(r2)
   10488:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1048c:	e0bffd17 	ldw	r2,-12(fp)
   10490:	10000f26 	beq	r2,zero,104d0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   10494:	e0bffd17 	ldw	r2,-12(fp)
   10498:	10800060 	cmpeqi	r2,r2,1
   1049c:	10000c1e 	bne	r2,zero,104d0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   104a0:	e0bffd17 	ldw	r2,-12(fp)
   104a4:	10c00217 	ldw	r3,8(r2)
   104a8:	e0bffd17 	ldw	r2,-12(fp)
   104ac:	10800317 	ldw	r2,12(r2)
   104b0:	1085883a 	add	r2,r2,r2
   104b4:	1085883a 	add	r2,r2,r2
   104b8:	1887883a 	add	r3,r3,r2
   104bc:	e0bffd17 	ldw	r2,-12(fp)
   104c0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   104c4:	e0ffff17 	ldw	r3,-4(fp)
   104c8:	e0bffd17 	ldw	r2,-12(fp)
   104cc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   104d0:	e0bffc03 	ldbu	r2,-16(fp)
   104d4:	10800044 	addi	r2,r2,1
   104d8:	e0bffc05 	stb	r2,-16(fp)
   104dc:	e0bffc03 	ldbu	r2,-16(fp)
   104e0:	10800570 	cmpltui	r2,r2,21
   104e4:	103fd91e 	bne	r2,zero,1044c <__alt_data_end+0xfffdf70c>
#endif
                }
            }
        }
    }
}
   104e8:	0001883a 	nop
   104ec:	e037883a 	mov	sp,fp
   104f0:	dfc00117 	ldw	ra,4(sp)
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00204 	addi	sp,sp,8
   104fc:	f800283a 	ret

00010500 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   10500:	defff204 	addi	sp,sp,-56
   10504:	dfc00d15 	stw	ra,52(sp)
   10508:	df000c15 	stw	fp,48(sp)
   1050c:	df000c04 	addi	fp,sp,48
   10510:	e17ffc15 	stw	r5,-16(fp)
   10514:	e1bffd15 	stw	r6,-12(fp)
   10518:	3807883a 	mov	r3,r7
   1051c:	e0800417 	ldw	r2,16(fp)
   10520:	e13ffb05 	stb	r4,-20(fp)
   10524:	e0fffe0d 	sth	r3,-8(fp)
   10528:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1052c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10530:	0005303a 	rdctl	r2,status
   10534:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10538:	e0fffa17 	ldw	r3,-24(fp)
   1053c:	00bfff84 	movi	r2,-2
   10540:	1884703a 	and	r2,r3,r2
   10544:	1001703a 	wrctl	status,r2
  
  return context;
   10548:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1054c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   10550:	d0a72d17 	ldw	r2,-25420(gp)
   10554:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   10558:	e0bff617 	ldw	r2,-40(fp)
   1055c:	10009326 	beq	r2,zero,107ac <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   10560:	e0bff617 	ldw	r2,-40(fp)
   10564:	10800517 	ldw	r2,20(r2)
   10568:	d0a72d15 	stw	r2,-25420(gp)
   1056c:	e0bff417 	ldw	r2,-48(fp)
   10570:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10574:	e0bff817 	ldw	r2,-32(fp)
   10578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1057c:	e0bff617 	ldw	r2,-40(fp)
   10580:	e0fffc17 	ldw	r3,-16(fp)
   10584:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   10588:	e0bff617 	ldw	r2,-40(fp)
   1058c:	e0fffb03 	ldbu	r3,-20(fp)
   10590:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   10594:	e0bff617 	ldw	r2,-40(fp)
   10598:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1059c:	e0bff617 	ldw	r2,-40(fp)
   105a0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   105a4:	e0bff617 	ldw	r2,-40(fp)
   105a8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   105ac:	e0bff617 	ldw	r2,-40(fp)
   105b0:	e0c00317 	ldw	r3,12(fp)
   105b4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   105b8:	e0bff617 	ldw	r2,-40(fp)
   105bc:	e0c00217 	ldw	r3,8(fp)
   105c0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   105c4:	e0bff617 	ldw	r2,-40(fp)
   105c8:	e0fffd17 	ldw	r3,-12(fp)
   105cc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   105d0:	e0bff617 	ldw	r2,-40(fp)
   105d4:	e0ffff0b 	ldhu	r3,-4(fp)
   105d8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   105dc:	e0bff617 	ldw	r2,-40(fp)
   105e0:	e0fffe0b 	ldhu	r3,-8(fp)
   105e4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   105e8:	e0bff617 	ldw	r2,-40(fp)
   105ec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   105f0:	e0bffb03 	ldbu	r2,-20(fp)
   105f4:	1004d0fa 	srli	r2,r2,3
   105f8:	1007883a 	mov	r3,r2
   105fc:	e0bff617 	ldw	r2,-40(fp)
   10600:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   10604:	e0bffb03 	ldbu	r2,-20(fp)
   10608:	108001cc 	andi	r2,r2,7
   1060c:	1007883a 	mov	r3,r2
   10610:	e0bff617 	ldw	r2,-40(fp)
   10614:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   10618:	e0bff617 	ldw	r2,-40(fp)
   1061c:	10800d03 	ldbu	r2,52(r2)
   10620:	10803fcc 	andi	r2,r2,255
   10624:	00c00044 	movi	r3,1
   10628:	1884983a 	sll	r2,r3,r2
   1062c:	1007883a 	mov	r3,r2
   10630:	e0bff617 	ldw	r2,-40(fp)
   10634:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   10638:	e0bff617 	ldw	r2,-40(fp)
   1063c:	10800cc3 	ldbu	r2,51(r2)
   10640:	10803fcc 	andi	r2,r2,255
   10644:	00c00044 	movi	r3,1
   10648:	1884983a 	sll	r2,r3,r2
   1064c:	1007883a 	mov	r3,r2
   10650:	e0bff617 	ldw	r2,-40(fp)
   10654:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   10658:	e0bff617 	ldw	r2,-40(fp)
   1065c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   10660:	e0bff617 	ldw	r2,-40(fp)
   10664:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   10668:	e0bff617 	ldw	r2,-40(fp)
   1066c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   10670:	e0bff617 	ldw	r2,-40(fp)
   10674:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   10678:	e0bff617 	ldw	r2,-40(fp)
   1067c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   10680:	e0bff617 	ldw	r2,-40(fp)
   10684:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   10688:	e0bff617 	ldw	r2,-40(fp)
   1068c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   10690:	e0bff617 	ldw	r2,-40(fp)
   10694:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   10698:	e0bff617 	ldw	r2,-40(fp)
   1069c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   106a0:	e0bff617 	ldw	r2,-40(fp)
   106a4:	00c00fc4 	movi	r3,63
   106a8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   106ac:	e0bff617 	ldw	r2,-40(fp)
   106b0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   106b4:	e13ff617 	ldw	r4,-40(fp)
   106b8:	0017d3c0 	call	17d3c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   106bc:	e13ff617 	ldw	r4,-40(fp)
   106c0:	0017c340 	call	17c34 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106c4:	0005303a 	rdctl	r2,status
   106c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106cc:	e0fff517 	ldw	r3,-44(fp)
   106d0:	00bfff84 	movi	r2,-2
   106d4:	1884703a 	and	r2,r3,r2
   106d8:	1001703a 	wrctl	status,r2
  
  return context;
   106dc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   106e0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   106e4:	e0fffb03 	ldbu	r3,-20(fp)
   106e8:	008000b4 	movhi	r2,2
   106ec:	10969b04 	addi	r2,r2,23148
   106f0:	18c7883a 	add	r3,r3,r3
   106f4:	18c7883a 	add	r3,r3,r3
   106f8:	10c5883a 	add	r2,r2,r3
   106fc:	e0fff617 	ldw	r3,-40(fp)
   10700:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   10704:	d0e72917 	ldw	r3,-25436(gp)
   10708:	e0bff617 	ldw	r2,-40(fp)
   1070c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   10710:	e0bff617 	ldw	r2,-40(fp)
   10714:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   10718:	d0a72917 	ldw	r2,-25436(gp)
   1071c:	10000326 	beq	r2,zero,1072c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   10720:	d0a72917 	ldw	r2,-25436(gp)
   10724:	e0fff617 	ldw	r3,-40(fp)
   10728:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1072c:	e0bff617 	ldw	r2,-40(fp)
   10730:	d0a72915 	stw	r2,-25436(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   10734:	e0bff617 	ldw	r2,-40(fp)
   10738:	10c00d83 	ldbu	r3,54(r2)
   1073c:	d0a73203 	ldbu	r2,-25400(gp)
   10740:	1884b03a 	or	r2,r3,r2
   10744:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   10748:	e0bff617 	ldw	r2,-40(fp)
   1074c:	10800d03 	ldbu	r2,52(r2)
   10750:	10c03fcc 	andi	r3,r2,255
   10754:	e0bff617 	ldw	r2,-40(fp)
   10758:	10800d03 	ldbu	r2,52(r2)
   1075c:	11003fcc 	andi	r4,r2,255
   10760:	d0a73244 	addi	r2,gp,-25399
   10764:	2085883a 	add	r2,r4,r2
   10768:	11000003 	ldbu	r4,0(r2)
   1076c:	e0bff617 	ldw	r2,-40(fp)
   10770:	10800d43 	ldbu	r2,53(r2)
   10774:	2084b03a 	or	r2,r4,r2
   10778:	1009883a 	mov	r4,r2
   1077c:	d0a73244 	addi	r2,gp,-25399
   10780:	1885883a 	add	r2,r3,r2
   10784:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   10788:	d0a72e43 	ldbu	r2,-25415(gp)
   1078c:	10800044 	addi	r2,r2,1
   10790:	d0a72e45 	stb	r2,-25415(gp)
   10794:	e0bff417 	ldw	r2,-48(fp)
   10798:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1079c:	e0bff717 	ldw	r2,-36(fp)
   107a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   107a4:	0005883a 	mov	r2,zero
   107a8:	00000506 	br	107c0 <OS_TCBInit+0x2c0>
   107ac:	e0bff417 	ldw	r2,-48(fp)
   107b0:	e0bff915 	stw	r2,-28(fp)
   107b4:	e0bff917 	ldw	r2,-28(fp)
   107b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   107bc:	00801084 	movi	r2,66
}
   107c0:	e037883a 	mov	sp,fp
   107c4:	dfc00117 	ldw	ra,4(sp)
   107c8:	df000017 	ldw	fp,0(sp)
   107cc:	dec00204 	addi	sp,sp,8
   107d0:	f800283a 	ret

000107d4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   107d4:	defffe04 	addi	sp,sp,-8
   107d8:	df000115 	stw	fp,4(sp)
   107dc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   107e0:	d0a00f04 	addi	r2,gp,-32708
   107e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   107e8:	d0a01004 	addi	r2,gp,-32704
   107ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   107f0:	d0a01184 	addi	r2,gp,-32698
   107f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   107f8:	d0a01204 	addi	r2,gp,-32696
   107fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   10800:	d0a01104 	addi	r2,gp,-32700
   10804:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   10808:	d0a01284 	addi	r2,gp,-32694
   1080c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   10810:	d0a01304 	addi	r2,gp,-32692
   10814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   10818:	d0a01384 	addi	r2,gp,-32690
   1081c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   10820:	d0a01404 	addi	r2,gp,-32688
   10824:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   10828:	d0a01484 	addi	r2,gp,-32686
   1082c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   10830:	d0a01504 	addi	r2,gp,-32684
   10834:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   10838:	d0a01584 	addi	r2,gp,-32682
   1083c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   10840:	d0a01604 	addi	r2,gp,-32680
   10844:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   10848:	d0a01684 	addi	r2,gp,-32678
   1084c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   10850:	d0a01704 	addi	r2,gp,-32676
   10854:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   10858:	d0a01784 	addi	r2,gp,-32674
   1085c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   10860:	d0a01804 	addi	r2,gp,-32672
   10864:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   10868:	d0a01884 	addi	r2,gp,-32670
   1086c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   10870:	d0a01904 	addi	r2,gp,-32668
   10874:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   10878:	d0a01984 	addi	r2,gp,-32666
   1087c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   10880:	d0a01a04 	addi	r2,gp,-32664
   10884:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   10888:	d0a01a84 	addi	r2,gp,-32662
   1088c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   10890:	d0a01b04 	addi	r2,gp,-32660
   10894:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   10898:	d0a01b84 	addi	r2,gp,-32658
   1089c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   108a0:	d0a01c04 	addi	r2,gp,-32656
   108a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   108a8:	d0a01c84 	addi	r2,gp,-32654
   108ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   108b0:	d0a01d04 	addi	r2,gp,-32652
   108b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   108b8:	d0a01d84 	addi	r2,gp,-32650
   108bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   108c0:	d0a01e04 	addi	r2,gp,-32648
   108c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   108c8:	d0a01e84 	addi	r2,gp,-32646
   108cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   108d0:	d0a01f04 	addi	r2,gp,-32644
   108d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   108d8:	d0a01f84 	addi	r2,gp,-32642
   108dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   108e0:	d0a02004 	addi	r2,gp,-32640
   108e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   108e8:	d0a02084 	addi	r2,gp,-32638
   108ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   108f0:	d0a02104 	addi	r2,gp,-32636
   108f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   108f8:	d0a02184 	addi	r2,gp,-32634
   108fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   10900:	d0a02204 	addi	r2,gp,-32632
   10904:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   10908:	d0a02284 	addi	r2,gp,-32630
   1090c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   10910:	d0a02304 	addi	r2,gp,-32628
   10914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   10918:	d0a02384 	addi	r2,gp,-32626
   1091c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   10920:	d0a02404 	addi	r2,gp,-32624
   10924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   10928:	d0a02484 	addi	r2,gp,-32622
   1092c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   10930:	d0a02504 	addi	r2,gp,-32620
   10934:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   10938:	d0a02584 	addi	r2,gp,-32618
   1093c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   10940:	d0a02604 	addi	r2,gp,-32616
   10944:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   10948:	d0a02b04 	addi	r2,gp,-32596
   1094c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   10950:	0001883a 	nop
   10954:	e037883a 	mov	sp,fp
   10958:	df000017 	ldw	fp,0(sp)
   1095c:	dec00104 	addi	sp,sp,4
   10960:	f800283a 	ret

00010964 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   10964:	defff204 	addi	sp,sp,-56
   10968:	df000d15 	stw	fp,52(sp)
   1096c:	df000d04 	addi	fp,sp,52
   10970:	e13ffc15 	stw	r4,-16(fp)
   10974:	2807883a 	mov	r3,r5
   10978:	3005883a 	mov	r2,r6
   1097c:	e1ffff15 	stw	r7,-4(fp)
   10980:	e0fffd0d 	sth	r3,-12(fp)
   10984:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10988:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1098c:	e0bfff17 	ldw	r2,-4(fp)
   10990:	1000021e 	bne	r2,zero,1099c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   10994:	0005883a 	mov	r2,zero
   10998:	0000b006 	br	10c5c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1099c:	e0bffc17 	ldw	r2,-16(fp)
   109a0:	1000051e 	bne	r2,zero,109b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   109a4:	e0bfff17 	ldw	r2,-4(fp)
   109a8:	00c01b84 	movi	r3,110
   109ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   109b0:	0005883a 	mov	r2,zero
   109b4:	0000a906 	br	10c5c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   109b8:	e0bffc17 	ldw	r2,-16(fp)
   109bc:	10800003 	ldbu	r2,0(r2)
   109c0:	10803fcc 	andi	r2,r2,255
   109c4:	10800160 	cmpeqi	r2,r2,5
   109c8:	1000051e 	bne	r2,zero,109e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   109cc:	e0bfff17 	ldw	r2,-4(fp)
   109d0:	00c00044 	movi	r3,1
   109d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   109d8:	0005883a 	mov	r2,zero
   109dc:	00009f06 	br	10c5c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   109e0:	e0fffe03 	ldbu	r3,-8(fp)
   109e4:	00bfe004 	movi	r2,-128
   109e8:	1884703a 	and	r2,r3,r2
   109ec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   109f0:	e0bff503 	ldbu	r2,-44(fp)
   109f4:	10000626 	beq	r2,zero,10a10 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   109f8:	e0bffe03 	ldbu	r2,-8(fp)
   109fc:	10801fcc 	andi	r2,r2,127
   10a00:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   10a04:	00800044 	movi	r2,1
   10a08:	e0bff385 	stb	r2,-50(fp)
   10a0c:	00000106 	br	10a14 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   10a10:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   10a14:	e0bfff17 	ldw	r2,-4(fp)
   10a18:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a1c:	0005303a 	rdctl	r2,status
   10a20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a24:	e0fffb17 	ldw	r3,-20(fp)
   10a28:	00bfff84 	movi	r2,-2
   10a2c:	1884703a 	and	r2,r3,r2
   10a30:	1001703a 	wrctl	status,r2
  
  return context;
   10a34:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   10a38:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   10a3c:	e0bffe03 	ldbu	r2,-8(fp)
   10a40:	10c00060 	cmpeqi	r3,r2,1
   10a44:	18005f1e 	bne	r3,zero,10bc4 <OSFlagAccept+0x260>
   10a48:	10c00088 	cmpgei	r3,r2,2
   10a4c:	1800021e 	bne	r3,zero,10a58 <OSFlagAccept+0xf4>
   10a50:	10003f26 	beq	r2,zero,10b50 <OSFlagAccept+0x1ec>
   10a54:	00007706 	br	10c34 <OSFlagAccept+0x2d0>
   10a58:	10c000a0 	cmpeqi	r3,r2,2
   10a5c:	1800031e 	bne	r3,zero,10a6c <OSFlagAccept+0x108>
   10a60:	108000e0 	cmpeqi	r2,r2,3
   10a64:	10001e1e 	bne	r2,zero,10ae0 <OSFlagAccept+0x17c>
   10a68:	00007206 	br	10c34 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10a6c:	e0bffc17 	ldw	r2,-16(fp)
   10a70:	10c0020b 	ldhu	r3,8(r2)
   10a74:	e0bffd0b 	ldhu	r2,-12(fp)
   10a78:	1884703a 	and	r2,r3,r2
   10a7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10a80:	e0fff30b 	ldhu	r3,-52(fp)
   10a84:	e0bffd0b 	ldhu	r2,-12(fp)
   10a88:	18800d1e 	bne	r3,r2,10ac0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10a8c:	e0bff383 	ldbu	r2,-50(fp)
   10a90:	10800058 	cmpnei	r2,r2,1
   10a94:	10000d1e 	bne	r2,zero,10acc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   10a98:	e0bffc17 	ldw	r2,-16(fp)
   10a9c:	1080020b 	ldhu	r2,8(r2)
   10aa0:	1007883a 	mov	r3,r2
   10aa4:	e0bff30b 	ldhu	r2,-52(fp)
   10aa8:	0084303a 	nor	r2,zero,r2
   10aac:	1884703a 	and	r2,r3,r2
   10ab0:	1007883a 	mov	r3,r2
   10ab4:	e0bffc17 	ldw	r2,-16(fp)
   10ab8:	10c0020d 	sth	r3,8(r2)
   10abc:	00000306 	br	10acc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10ac0:	e0bfff17 	ldw	r2,-4(fp)
   10ac4:	00c01c04 	movi	r3,112
   10ac8:	10c00005 	stb	r3,0(r2)
   10acc:	e0bff417 	ldw	r2,-48(fp)
   10ad0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ad4:	e0bff617 	ldw	r2,-40(fp)
   10ad8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10adc:	00005e06 	br	10c58 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   10ae0:	e0bffc17 	ldw	r2,-16(fp)
   10ae4:	10c0020b 	ldhu	r3,8(r2)
   10ae8:	e0bffd0b 	ldhu	r2,-12(fp)
   10aec:	1884703a 	and	r2,r3,r2
   10af0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   10af4:	e0bff30b 	ldhu	r2,-52(fp)
   10af8:	10000d26 	beq	r2,zero,10b30 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10afc:	e0bff383 	ldbu	r2,-50(fp)
   10b00:	10800058 	cmpnei	r2,r2,1
   10b04:	10000d1e 	bne	r2,zero,10b3c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   10b08:	e0bffc17 	ldw	r2,-16(fp)
   10b0c:	1080020b 	ldhu	r2,8(r2)
   10b10:	1007883a 	mov	r3,r2
   10b14:	e0bff30b 	ldhu	r2,-52(fp)
   10b18:	0084303a 	nor	r2,zero,r2
   10b1c:	1884703a 	and	r2,r3,r2
   10b20:	1007883a 	mov	r3,r2
   10b24:	e0bffc17 	ldw	r2,-16(fp)
   10b28:	10c0020d 	sth	r3,8(r2)
   10b2c:	00000306 	br	10b3c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10b30:	e0bfff17 	ldw	r2,-4(fp)
   10b34:	00c01c04 	movi	r3,112
   10b38:	10c00005 	stb	r3,0(r2)
   10b3c:	e0bff417 	ldw	r2,-48(fp)
   10b40:	e0bff715 	stw	r2,-36(fp)
   10b44:	e0bff717 	ldw	r2,-36(fp)
   10b48:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10b4c:	00004206 	br	10c58 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   10b50:	e0bffc17 	ldw	r2,-16(fp)
   10b54:	1080020b 	ldhu	r2,8(r2)
   10b58:	0084303a 	nor	r2,zero,r2
   10b5c:	1007883a 	mov	r3,r2
   10b60:	e0bffd0b 	ldhu	r2,-12(fp)
   10b64:	1884703a 	and	r2,r3,r2
   10b68:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   10b6c:	e0fff30b 	ldhu	r3,-52(fp)
   10b70:	e0bffd0b 	ldhu	r2,-12(fp)
   10b74:	18800b1e 	bne	r3,r2,10ba4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10b78:	e0bff383 	ldbu	r2,-50(fp)
   10b7c:	10800058 	cmpnei	r2,r2,1
   10b80:	10000b1e 	bne	r2,zero,10bb0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   10b84:	e0bffc17 	ldw	r2,-16(fp)
   10b88:	10c0020b 	ldhu	r3,8(r2)
   10b8c:	e0bff30b 	ldhu	r2,-52(fp)
   10b90:	1884b03a 	or	r2,r3,r2
   10b94:	1007883a 	mov	r3,r2
   10b98:	e0bffc17 	ldw	r2,-16(fp)
   10b9c:	10c0020d 	sth	r3,8(r2)
   10ba0:	00000306 	br	10bb0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10ba4:	e0bfff17 	ldw	r2,-4(fp)
   10ba8:	00c01c04 	movi	r3,112
   10bac:	10c00005 	stb	r3,0(r2)
   10bb0:	e0bff417 	ldw	r2,-48(fp)
   10bb4:	e0bff815 	stw	r2,-32(fp)
   10bb8:	e0bff817 	ldw	r2,-32(fp)
   10bbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10bc0:	00002506 	br	10c58 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   10bc4:	e0bffc17 	ldw	r2,-16(fp)
   10bc8:	1080020b 	ldhu	r2,8(r2)
   10bcc:	0084303a 	nor	r2,zero,r2
   10bd0:	1007883a 	mov	r3,r2
   10bd4:	e0bffd0b 	ldhu	r2,-12(fp)
   10bd8:	1884703a 	and	r2,r3,r2
   10bdc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   10be0:	e0bff30b 	ldhu	r2,-52(fp)
   10be4:	10000b26 	beq	r2,zero,10c14 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   10be8:	e0bff383 	ldbu	r2,-50(fp)
   10bec:	10800058 	cmpnei	r2,r2,1
   10bf0:	10000b1e 	bne	r2,zero,10c20 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   10bf4:	e0bffc17 	ldw	r2,-16(fp)
   10bf8:	10c0020b 	ldhu	r3,8(r2)
   10bfc:	e0bff30b 	ldhu	r2,-52(fp)
   10c00:	1884b03a 	or	r2,r3,r2
   10c04:	1007883a 	mov	r3,r2
   10c08:	e0bffc17 	ldw	r2,-16(fp)
   10c0c:	10c0020d 	sth	r3,8(r2)
   10c10:	00000306 	br	10c20 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   10c14:	e0bfff17 	ldw	r2,-4(fp)
   10c18:	00c01c04 	movi	r3,112
   10c1c:	10c00005 	stb	r3,0(r2)
   10c20:	e0bff417 	ldw	r2,-48(fp)
   10c24:	e0bff915 	stw	r2,-28(fp)
   10c28:	e0bff917 	ldw	r2,-28(fp)
   10c2c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   10c30:	00000906 	br	10c58 <OSFlagAccept+0x2f4>
   10c34:	e0bff417 	ldw	r2,-48(fp)
   10c38:	e0bffa15 	stw	r2,-24(fp)
   10c3c:	e0bffa17 	ldw	r2,-24(fp)
   10c40:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   10c44:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   10c48:	e0bfff17 	ldw	r2,-4(fp)
   10c4c:	00c01bc4 	movi	r3,111
   10c50:	10c00005 	stb	r3,0(r2)
             break;
   10c54:	0001883a 	nop
    }
    return (flags_rdy);
   10c58:	e0bff30b 	ldhu	r2,-52(fp)
}
   10c5c:	e037883a 	mov	sp,fp
   10c60:	df000017 	ldw	fp,0(sp)
   10c64:	dec00104 	addi	sp,sp,4
   10c68:	f800283a 	ret

00010c6c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   10c6c:	defff804 	addi	sp,sp,-32
   10c70:	df000715 	stw	fp,28(sp)
   10c74:	df000704 	addi	fp,sp,28
   10c78:	2005883a 	mov	r2,r4
   10c7c:	e17fff15 	stw	r5,-4(fp)
   10c80:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   10c84:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   10c88:	e0bfff17 	ldw	r2,-4(fp)
   10c8c:	1000021e 	bne	r2,zero,10c98 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   10c90:	0005883a 	mov	r2,zero
   10c94:	00003306 	br	10d64 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   10c98:	d0a73403 	ldbu	r2,-25392(gp)
   10c9c:	10803fcc 	andi	r2,r2,255
   10ca0:	10000526 	beq	r2,zero,10cb8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   10ca4:	e0bfff17 	ldw	r2,-4(fp)
   10ca8:	00c00404 	movi	r3,16
   10cac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   10cb0:	0005883a 	mov	r2,zero
   10cb4:	00002b06 	br	10d64 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10cb8:	0005303a 	rdctl	r2,status
   10cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10cc0:	e0fffd17 	ldw	r3,-12(fp)
   10cc4:	00bfff84 	movi	r2,-2
   10cc8:	1884703a 	and	r2,r3,r2
   10ccc:	1001703a 	wrctl	status,r2
  
  return context;
   10cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   10cd4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   10cd8:	d0a73717 	ldw	r2,-25380(gp)
   10cdc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   10ce0:	e0bffb17 	ldw	r2,-20(fp)
   10ce4:	10001726 	beq	r2,zero,10d44 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   10ce8:	d0a73717 	ldw	r2,-25380(gp)
   10cec:	10800117 	ldw	r2,4(r2)
   10cf0:	d0a73715 	stw	r2,-25380(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   10cf4:	e0bffb17 	ldw	r2,-20(fp)
   10cf8:	00c00144 	movi	r3,5
   10cfc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   10d00:	e0bffb17 	ldw	r2,-20(fp)
   10d04:	e0fffe0b 	ldhu	r3,-8(fp)
   10d08:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   10d0c:	e0bffb17 	ldw	r2,-20(fp)
   10d10:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   10d14:	e0bffb17 	ldw	r2,-20(fp)
   10d18:	00c00fc4 	movi	r3,63
   10d1c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10d20:	e0bffb17 	ldw	r2,-20(fp)
   10d24:	100002c5 	stb	zero,11(r2)
   10d28:	e0bff917 	ldw	r2,-28(fp)
   10d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d30:	e0bffa17 	ldw	r2,-24(fp)
   10d34:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   10d38:	e0bfff17 	ldw	r2,-4(fp)
   10d3c:	10000005 	stb	zero,0(r2)
   10d40:	00000706 	br	10d60 <OSFlagCreate+0xf4>
   10d44:	e0bff917 	ldw	r2,-28(fp)
   10d48:	e0bffc15 	stw	r2,-16(fp)
   10d4c:	e0bffc17 	ldw	r2,-16(fp)
   10d50:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   10d54:	e0bfff17 	ldw	r2,-4(fp)
   10d58:	00c01c84 	movi	r3,114
   10d5c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   10d60:	e0bffb17 	ldw	r2,-20(fp)
}
   10d64:	e037883a 	mov	sp,fp
   10d68:	df000017 	ldw	fp,0(sp)
   10d6c:	dec00104 	addi	sp,sp,4
   10d70:	f800283a 	ret

00010d74 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   10d74:	defff204 	addi	sp,sp,-56
   10d78:	dfc00d15 	stw	ra,52(sp)
   10d7c:	df000c15 	stw	fp,48(sp)
   10d80:	df000c04 	addi	fp,sp,48
   10d84:	e13ffd15 	stw	r4,-12(fp)
   10d88:	2805883a 	mov	r2,r5
   10d8c:	e1bfff15 	stw	r6,-4(fp)
   10d90:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   10d94:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   10d98:	e0bfff17 	ldw	r2,-4(fp)
   10d9c:	1000021e 	bne	r2,zero,10da8 <OSFlagDel+0x34>
        return (pgrp);
   10da0:	e0bffd17 	ldw	r2,-12(fp)
   10da4:	00008006 	br	10fa8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   10da8:	e0bffd17 	ldw	r2,-12(fp)
   10dac:	1000051e 	bne	r2,zero,10dc4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10db0:	e0bfff17 	ldw	r2,-4(fp)
   10db4:	00c01b84 	movi	r3,110
   10db8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10dbc:	e0bffd17 	ldw	r2,-12(fp)
   10dc0:	00007906 	br	10fa8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   10dc4:	d0a73403 	ldbu	r2,-25392(gp)
   10dc8:	10803fcc 	andi	r2,r2,255
   10dcc:	10000526 	beq	r2,zero,10de4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   10dd0:	e0bfff17 	ldw	r2,-4(fp)
   10dd4:	00c003c4 	movi	r3,15
   10dd8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10ddc:	e0bffd17 	ldw	r2,-12(fp)
   10de0:	00007106 	br	10fa8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   10de4:	e0bffd17 	ldw	r2,-12(fp)
   10de8:	10800003 	ldbu	r2,0(r2)
   10dec:	10803fcc 	andi	r2,r2,255
   10df0:	10800160 	cmpeqi	r2,r2,5
   10df4:	1000051e 	bne	r2,zero,10e0c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   10df8:	e0bfff17 	ldw	r2,-4(fp)
   10dfc:	00c00044 	movi	r3,1
   10e00:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   10e04:	e0bffd17 	ldw	r2,-12(fp)
   10e08:	00006706 	br	10fa8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10e0c:	0005303a 	rdctl	r2,status
   10e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10e14:	e0fffc17 	ldw	r3,-16(fp)
   10e18:	00bfff84 	movi	r2,-2
   10e1c:	1884703a 	and	r2,r3,r2
   10e20:	1001703a 	wrctl	status,r2
  
  return context;
   10e24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   10e28:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   10e2c:	e0bffd17 	ldw	r2,-12(fp)
   10e30:	10800117 	ldw	r2,4(r2)
   10e34:	10000326 	beq	r2,zero,10e44 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   10e38:	00800044 	movi	r2,1
   10e3c:	e0bff405 	stb	r2,-48(fp)
   10e40:	00000106 	br	10e48 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   10e44:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   10e48:	e0bffe03 	ldbu	r2,-8(fp)
   10e4c:	10000326 	beq	r2,zero,10e5c <OSFlagDel+0xe8>
   10e50:	10800060 	cmpeqi	r2,r2,1
   10e54:	1000231e 	bne	r2,zero,10ee4 <OSFlagDel+0x170>
   10e58:	00004806 	br	10f7c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   10e5c:	e0bff403 	ldbu	r2,-48(fp)
   10e60:	1000161e 	bne	r2,zero,10ebc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   10e64:	e0bffd17 	ldw	r2,-12(fp)
   10e68:	00c00fc4 	movi	r3,63
   10e6c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10e70:	e0bffd17 	ldw	r2,-12(fp)
   10e74:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10e78:	e0bffd17 	ldw	r2,-12(fp)
   10e7c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   10e80:	d0e73717 	ldw	r3,-25380(gp)
   10e84:	e0bffd17 	ldw	r2,-12(fp)
   10e88:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10e8c:	e0bffd17 	ldw	r2,-12(fp)
   10e90:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   10e94:	e0bffd17 	ldw	r2,-12(fp)
   10e98:	d0a73715 	stw	r2,-25380(gp)
   10e9c:	e0bff717 	ldw	r2,-36(fp)
   10ea0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10ea4:	e0bff817 	ldw	r2,-32(fp)
   10ea8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   10eac:	e0bfff17 	ldw	r2,-4(fp)
   10eb0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   10eb4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   10eb8:	00003a06 	br	10fa4 <OSFlagDel+0x230>
   10ebc:	e0bff717 	ldw	r2,-36(fp)
   10ec0:	e0bff915 	stw	r2,-28(fp)
   10ec4:	e0bff917 	ldw	r2,-28(fp)
   10ec8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   10ecc:	e0bfff17 	ldw	r2,-4(fp)
   10ed0:	00c01244 	movi	r3,73
   10ed4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   10ed8:	e0bffd17 	ldw	r2,-12(fp)
   10edc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   10ee0:	00003006 	br	10fa4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   10ee4:	e0bffd17 	ldw	r2,-12(fp)
   10ee8:	10800117 	ldw	r2,4(r2)
   10eec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10ef0:	00000606 	br	10f0c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   10ef4:	000b883a 	mov	r5,zero
   10ef8:	e13ff517 	ldw	r4,-44(fp)
   10efc:	0011ee00 	call	11ee0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   10f00:	e0bff517 	ldw	r2,-44(fp)
   10f04:	10800017 	ldw	r2,0(r2)
   10f08:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   10f0c:	e0bff517 	ldw	r2,-44(fp)
   10f10:	103ff81e 	bne	r2,zero,10ef4 <__alt_data_end+0xfffe01b4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   10f14:	e0bffd17 	ldw	r2,-12(fp)
   10f18:	00c00fc4 	movi	r3,63
   10f1c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   10f20:	e0bffd17 	ldw	r2,-12(fp)
   10f24:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   10f28:	e0bffd17 	ldw	r2,-12(fp)
   10f2c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   10f30:	d0e73717 	ldw	r3,-25380(gp)
   10f34:	e0bffd17 	ldw	r2,-12(fp)
   10f38:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   10f3c:	e0bffd17 	ldw	r2,-12(fp)
   10f40:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   10f44:	e0bffd17 	ldw	r2,-12(fp)
   10f48:	d0a73715 	stw	r2,-25380(gp)
   10f4c:	e0bff717 	ldw	r2,-36(fp)
   10f50:	e0bffa15 	stw	r2,-24(fp)
   10f54:	e0bffa17 	ldw	r2,-24(fp)
   10f58:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   10f5c:	e0bff403 	ldbu	r2,-48(fp)
   10f60:	10800058 	cmpnei	r2,r2,1
   10f64:	1000011e 	bne	r2,zero,10f6c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   10f68:	00101000 	call	10100 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   10f6c:	e0bfff17 	ldw	r2,-4(fp)
   10f70:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   10f74:	e03ff615 	stw	zero,-40(fp)
             break;
   10f78:	00000a06 	br	10fa4 <OSFlagDel+0x230>
   10f7c:	e0bff717 	ldw	r2,-36(fp)
   10f80:	e0bffb15 	stw	r2,-20(fp)
   10f84:	e0bffb17 	ldw	r2,-20(fp)
   10f88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   10f8c:	e0bfff17 	ldw	r2,-4(fp)
   10f90:	00c001c4 	movi	r3,7
   10f94:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   10f98:	e0bffd17 	ldw	r2,-12(fp)
   10f9c:	e0bff615 	stw	r2,-40(fp)
             break;
   10fa0:	0001883a 	nop
    }
    return (pgrp_return);
   10fa4:	e0bff617 	ldw	r2,-40(fp)
}
   10fa8:	e037883a 	mov	sp,fp
   10fac:	dfc00117 	ldw	ra,4(sp)
   10fb0:	df000017 	ldw	fp,0(sp)
   10fb4:	dec00204 	addi	sp,sp,8
   10fb8:	f800283a 	ret

00010fbc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   10fbc:	defff604 	addi	sp,sp,-40
   10fc0:	dfc00915 	stw	ra,36(sp)
   10fc4:	df000815 	stw	fp,32(sp)
   10fc8:	df000804 	addi	fp,sp,32
   10fcc:	e13ffd15 	stw	r4,-12(fp)
   10fd0:	e17ffe15 	stw	r5,-8(fp)
   10fd4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10fdc:	e0bfff17 	ldw	r2,-4(fp)
   10fe0:	1000021e 	bne	r2,zero,10fec <OSFlagNameGet+0x30>
        return (0);
   10fe4:	0005883a 	mov	r2,zero
   10fe8:	00003906 	br	110d0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   10fec:	e0bffd17 	ldw	r2,-12(fp)
   10ff0:	1000051e 	bne	r2,zero,11008 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   10ff4:	e0bfff17 	ldw	r2,-4(fp)
   10ff8:	00c01b84 	movi	r3,110
   10ffc:	10c00005 	stb	r3,0(r2)
        return (0);
   11000:	0005883a 	mov	r2,zero
   11004:	00003206 	br	110d0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11008:	e0bffe17 	ldw	r2,-8(fp)
   1100c:	1000051e 	bne	r2,zero,11024 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   11010:	e0bfff17 	ldw	r2,-4(fp)
   11014:	00c00304 	movi	r3,12
   11018:	10c00005 	stb	r3,0(r2)
        return (0);
   1101c:	0005883a 	mov	r2,zero
   11020:	00002b06 	br	110d0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   11024:	d0a73403 	ldbu	r2,-25392(gp)
   11028:	10803fcc 	andi	r2,r2,255
   1102c:	10000526 	beq	r2,zero,11044 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   11030:	e0bfff17 	ldw	r2,-4(fp)
   11034:	00c00444 	movi	r3,17
   11038:	10c00005 	stb	r3,0(r2)
        return (0);
   1103c:	0005883a 	mov	r2,zero
   11040:	00002306 	br	110d0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11044:	0005303a 	rdctl	r2,status
   11048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1104c:	e0fffc17 	ldw	r3,-16(fp)
   11050:	00bfff84 	movi	r2,-2
   11054:	1884703a 	and	r2,r3,r2
   11058:	1001703a 	wrctl	status,r2
  
  return context;
   1105c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11060:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11064:	e0bffd17 	ldw	r2,-12(fp)
   11068:	10800003 	ldbu	r2,0(r2)
   1106c:	10803fcc 	andi	r2,r2,255
   11070:	10800160 	cmpeqi	r2,r2,5
   11074:	1000091e 	bne	r2,zero,1109c <OSFlagNameGet+0xe0>
   11078:	e0bff817 	ldw	r2,-32(fp)
   1107c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11080:	e0bff917 	ldw	r2,-28(fp)
   11084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   11088:	e0bfff17 	ldw	r2,-4(fp)
   1108c:	00c00044 	movi	r3,1
   11090:	10c00005 	stb	r3,0(r2)
        return (0);
   11094:	0005883a 	mov	r2,zero
   11098:	00000d06 	br	110d0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1109c:	e0bffd17 	ldw	r2,-12(fp)
   110a0:	10800284 	addi	r2,r2,10
   110a4:	100b883a 	mov	r5,r2
   110a8:	e13ffe17 	ldw	r4,-8(fp)
   110ac:	00102440 	call	10244 <OS_StrCopy>
   110b0:	e0bffb05 	stb	r2,-20(fp)
   110b4:	e0bff817 	ldw	r2,-32(fp)
   110b8:	e0bffa15 	stw	r2,-24(fp)
   110bc:	e0bffa17 	ldw	r2,-24(fp)
   110c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   110c4:	e0bfff17 	ldw	r2,-4(fp)
   110c8:	10000005 	stb	zero,0(r2)
    return (len);
   110cc:	e0bffb03 	ldbu	r2,-20(fp)
}
   110d0:	e037883a 	mov	sp,fp
   110d4:	dfc00117 	ldw	ra,4(sp)
   110d8:	df000017 	ldw	fp,0(sp)
   110dc:	dec00204 	addi	sp,sp,8
   110e0:	f800283a 	ret

000110e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   110e4:	defff504 	addi	sp,sp,-44
   110e8:	dfc00a15 	stw	ra,40(sp)
   110ec:	df000915 	stw	fp,36(sp)
   110f0:	df000904 	addi	fp,sp,36
   110f4:	e13ffd15 	stw	r4,-12(fp)
   110f8:	e17ffe15 	stw	r5,-8(fp)
   110fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   11100:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   11104:	e0bfff17 	ldw	r2,-4(fp)
   11108:	10004326 	beq	r2,zero,11218 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1110c:	e0bffd17 	ldw	r2,-12(fp)
   11110:	1000041e 	bne	r2,zero,11124 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11114:	e0bfff17 	ldw	r2,-4(fp)
   11118:	00c01b84 	movi	r3,110
   1111c:	10c00005 	stb	r3,0(r2)
        return;
   11120:	00003e06 	br	1121c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   11124:	e0bffe17 	ldw	r2,-8(fp)
   11128:	1000041e 	bne	r2,zero,1113c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1112c:	e0bfff17 	ldw	r2,-4(fp)
   11130:	00c00304 	movi	r3,12
   11134:	10c00005 	stb	r3,0(r2)
        return;
   11138:	00003806 	br	1121c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1113c:	d0a73403 	ldbu	r2,-25392(gp)
   11140:	10803fcc 	andi	r2,r2,255
   11144:	10000426 	beq	r2,zero,11158 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   11148:	e0bfff17 	ldw	r2,-4(fp)
   1114c:	00c00484 	movi	r3,18
   11150:	10c00005 	stb	r3,0(r2)
        return;
   11154:	00003106 	br	1121c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11158:	0005303a 	rdctl	r2,status
   1115c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11160:	e0fffc17 	ldw	r3,-16(fp)
   11164:	00bfff84 	movi	r2,-2
   11168:	1884703a 	and	r2,r3,r2
   1116c:	1001703a 	wrctl	status,r2
  
  return context;
   11170:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11174:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   11178:	e0bffd17 	ldw	r2,-12(fp)
   1117c:	10800003 	ldbu	r2,0(r2)
   11180:	10803fcc 	andi	r2,r2,255
   11184:	10800160 	cmpeqi	r2,r2,5
   11188:	1000081e 	bne	r2,zero,111ac <OSFlagNameSet+0xc8>
   1118c:	e0bff717 	ldw	r2,-36(fp)
   11190:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11194:	e0bff817 	ldw	r2,-32(fp)
   11198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1119c:	e0bfff17 	ldw	r2,-4(fp)
   111a0:	00c00044 	movi	r3,1
   111a4:	10c00005 	stb	r3,0(r2)
        return;
   111a8:	00001c06 	br	1121c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   111ac:	e13ffe17 	ldw	r4,-8(fp)
   111b0:	00102b80 	call	102b8 <OS_StrLen>
   111b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   111b8:	e0bffa03 	ldbu	r2,-24(fp)
   111bc:	10800830 	cmpltui	r2,r2,32
   111c0:	1000081e 	bne	r2,zero,111e4 <OSFlagNameSet+0x100>
   111c4:	e0bff717 	ldw	r2,-36(fp)
   111c8:	e0bff915 	stw	r2,-28(fp)
   111cc:	e0bff917 	ldw	r2,-28(fp)
   111d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   111d4:	e0bfff17 	ldw	r2,-4(fp)
   111d8:	00c01cc4 	movi	r3,115
   111dc:	10c00005 	stb	r3,0(r2)
        return;
   111e0:	00000e06 	br	1121c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   111e4:	e0bffd17 	ldw	r2,-12(fp)
   111e8:	10800284 	addi	r2,r2,10
   111ec:	e17ffe17 	ldw	r5,-8(fp)
   111f0:	1009883a 	mov	r4,r2
   111f4:	00102440 	call	10244 <OS_StrCopy>
   111f8:	e0bff717 	ldw	r2,-36(fp)
   111fc:	e0bffb15 	stw	r2,-20(fp)
   11200:	e0bffb17 	ldw	r2,-20(fp)
   11204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11208:	e0bfff17 	ldw	r2,-4(fp)
   1120c:	10000005 	stb	zero,0(r2)
    return;
   11210:	0001883a 	nop
   11214:	00000106 	br	1121c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   11218:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1121c:	e037883a 	mov	sp,fp
   11220:	dfc00117 	ldw	ra,4(sp)
   11224:	df000017 	ldw	fp,0(sp)
   11228:	dec00204 	addi	sp,sp,8
   1122c:	f800283a 	ret

00011230 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   11230:	deffe104 	addi	sp,sp,-124
   11234:	dfc01e15 	stw	ra,120(sp)
   11238:	df001d15 	stw	fp,116(sp)
   1123c:	df001d04 	addi	fp,sp,116
   11240:	e13ffc15 	stw	r4,-16(fp)
   11244:	2809883a 	mov	r4,r5
   11248:	3007883a 	mov	r3,r6
   1124c:	3805883a 	mov	r2,r7
   11250:	e13ffd0d 	sth	r4,-12(fp)
   11254:	e0fffe05 	stb	r3,-8(fp)
   11258:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1125c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   11260:	e0800217 	ldw	r2,8(fp)
   11264:	1000021e 	bne	r2,zero,11270 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   11268:	0005883a 	mov	r2,zero
   1126c:	00015906 	br	117d4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   11270:	e0bffc17 	ldw	r2,-16(fp)
   11274:	1000051e 	bne	r2,zero,1128c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11278:	e0800217 	ldw	r2,8(fp)
   1127c:	00c01b84 	movi	r3,110
   11280:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11284:	0005883a 	mov	r2,zero
   11288:	00015206 	br	117d4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1128c:	d0a73403 	ldbu	r2,-25392(gp)
   11290:	10803fcc 	andi	r2,r2,255
   11294:	10000526 	beq	r2,zero,112ac <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   11298:	e0800217 	ldw	r2,8(fp)
   1129c:	00c00084 	movi	r3,2
   112a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   112a4:	0005883a 	mov	r2,zero
   112a8:	00014a06 	br	117d4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   112ac:	d0a72603 	ldbu	r2,-25448(gp)
   112b0:	10803fcc 	andi	r2,r2,255
   112b4:	10000526 	beq	r2,zero,112cc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   112b8:	e0800217 	ldw	r2,8(fp)
   112bc:	00c00344 	movi	r3,13
   112c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   112c4:	0005883a 	mov	r2,zero
   112c8:	00014206 	br	117d4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   112cc:	e0bffc17 	ldw	r2,-16(fp)
   112d0:	10800003 	ldbu	r2,0(r2)
   112d4:	10803fcc 	andi	r2,r2,255
   112d8:	10800160 	cmpeqi	r2,r2,5
   112dc:	1000051e 	bne	r2,zero,112f4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   112e0:	e0800217 	ldw	r2,8(fp)
   112e4:	00c00044 	movi	r3,1
   112e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   112ec:	0005883a 	mov	r2,zero
   112f0:	00013806 	br	117d4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   112f4:	e0fffe03 	ldbu	r3,-8(fp)
   112f8:	00bfe004 	movi	r2,-128
   112fc:	1884703a 	and	r2,r3,r2
   11300:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   11304:	e0bfe603 	ldbu	r2,-104(fp)
   11308:	10000626 	beq	r2,zero,11324 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1130c:	e0bffe03 	ldbu	r2,-8(fp)
   11310:	10801fcc 	andi	r2,r2,127
   11314:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   11318:	00800044 	movi	r2,1
   1131c:	e0bfe405 	stb	r2,-112(fp)
   11320:	00000106 	br	11328 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   11324:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11328:	0005303a 	rdctl	r2,status
   1132c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11330:	e0fff617 	ldw	r3,-40(fp)
   11334:	00bfff84 	movi	r2,-2
   11338:	1884703a 	and	r2,r3,r2
   1133c:	1001703a 	wrctl	status,r2
  
  return context;
   11340:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   11344:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   11348:	e0bffe03 	ldbu	r2,-8(fp)
   1134c:	10c00060 	cmpeqi	r3,r2,1
   11350:	1800921e 	bne	r3,zero,1159c <OSFlagPend+0x36c>
   11354:	10c00088 	cmpgei	r3,r2,2
   11358:	1800021e 	bne	r3,zero,11364 <OSFlagPend+0x134>
   1135c:	10006126 	beq	r2,zero,114e4 <OSFlagPend+0x2b4>
   11360:	0000bb06 	br	11650 <OSFlagPend+0x420>
   11364:	10c000a0 	cmpeqi	r3,r2,2
   11368:	1800031e 	bne	r3,zero,11378 <OSFlagPend+0x148>
   1136c:	108000e0 	cmpeqi	r2,r2,3
   11370:	10002f1e 	bne	r2,zero,11430 <OSFlagPend+0x200>
   11374:	0000b606 	br	11650 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   11378:	e0bffc17 	ldw	r2,-16(fp)
   1137c:	10c0020b 	ldhu	r3,8(r2)
   11380:	e0bffd0b 	ldhu	r2,-12(fp)
   11384:	1884703a 	and	r2,r3,r2
   11388:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1138c:	e0ffe80b 	ldhu	r3,-96(fp)
   11390:	e0bffd0b 	ldhu	r2,-12(fp)
   11394:	1880171e 	bne	r3,r2,113f4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   11398:	e0bfe403 	ldbu	r2,-112(fp)
   1139c:	10800058 	cmpnei	r2,r2,1
   113a0:	1000091e 	bne	r2,zero,113c8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   113a4:	e0bffc17 	ldw	r2,-16(fp)
   113a8:	1080020b 	ldhu	r2,8(r2)
   113ac:	1007883a 	mov	r3,r2
   113b0:	e0bfe80b 	ldhu	r2,-96(fp)
   113b4:	0084303a 	nor	r2,zero,r2
   113b8:	1884703a 	and	r2,r3,r2
   113bc:	1007883a 	mov	r3,r2
   113c0:	e0bffc17 	ldw	r2,-16(fp)
   113c4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   113c8:	d0a73517 	ldw	r2,-25388(gp)
   113cc:	e0ffe80b 	ldhu	r3,-96(fp)
   113d0:	10c00b0d 	sth	r3,44(r2)
   113d4:	e0bfe517 	ldw	r2,-108(fp)
   113d8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   113dc:	e0bfe717 	ldw	r2,-100(fp)
   113e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   113e4:	e0800217 	ldw	r2,8(fp)
   113e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   113ec:	e0bfe80b 	ldhu	r2,-96(fp)
   113f0:	0000f806 	br	117d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   113f4:	e13ffd0b 	ldhu	r4,-12(fp)
   113f8:	e17ffe03 	ldbu	r5,-8(fp)
   113fc:	e0bfff0b 	ldhu	r2,-4(fp)
   11400:	e0fff704 	addi	r3,fp,-36
   11404:	d8800015 	stw	r2,0(sp)
   11408:	280f883a 	mov	r7,r5
   1140c:	200d883a 	mov	r6,r4
   11410:	180b883a 	mov	r5,r3
   11414:	e13ffc17 	ldw	r4,-16(fp)
   11418:	0011ca00 	call	11ca0 <OS_FlagBlock>
   1141c:	e0bfe517 	ldw	r2,-108(fp)
   11420:	e0bfe915 	stw	r2,-92(fp)
   11424:	e0bfe917 	ldw	r2,-92(fp)
   11428:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1142c:	00009206 	br	11678 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   11430:	e0bffc17 	ldw	r2,-16(fp)
   11434:	10c0020b 	ldhu	r3,8(r2)
   11438:	e0bffd0b 	ldhu	r2,-12(fp)
   1143c:	1884703a 	and	r2,r3,r2
   11440:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   11444:	e0bfe80b 	ldhu	r2,-96(fp)
   11448:	10001726 	beq	r2,zero,114a8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1144c:	e0bfe403 	ldbu	r2,-112(fp)
   11450:	10800058 	cmpnei	r2,r2,1
   11454:	1000091e 	bne	r2,zero,1147c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   11458:	e0bffc17 	ldw	r2,-16(fp)
   1145c:	1080020b 	ldhu	r2,8(r2)
   11460:	1007883a 	mov	r3,r2
   11464:	e0bfe80b 	ldhu	r2,-96(fp)
   11468:	0084303a 	nor	r2,zero,r2
   1146c:	1884703a 	and	r2,r3,r2
   11470:	1007883a 	mov	r3,r2
   11474:	e0bffc17 	ldw	r2,-16(fp)
   11478:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1147c:	d0a73517 	ldw	r2,-25388(gp)
   11480:	e0ffe80b 	ldhu	r3,-96(fp)
   11484:	10c00b0d 	sth	r3,44(r2)
   11488:	e0bfe517 	ldw	r2,-108(fp)
   1148c:	e0bfea15 	stw	r2,-88(fp)
   11490:	e0bfea17 	ldw	r2,-88(fp)
   11494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11498:	e0800217 	ldw	r2,8(fp)
   1149c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   114a0:	e0bfe80b 	ldhu	r2,-96(fp)
   114a4:	0000cb06 	br	117d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   114a8:	e13ffd0b 	ldhu	r4,-12(fp)
   114ac:	e17ffe03 	ldbu	r5,-8(fp)
   114b0:	e0bfff0b 	ldhu	r2,-4(fp)
   114b4:	e0fff704 	addi	r3,fp,-36
   114b8:	d8800015 	stw	r2,0(sp)
   114bc:	280f883a 	mov	r7,r5
   114c0:	200d883a 	mov	r6,r4
   114c4:	180b883a 	mov	r5,r3
   114c8:	e13ffc17 	ldw	r4,-16(fp)
   114cc:	0011ca00 	call	11ca0 <OS_FlagBlock>
   114d0:	e0bfe517 	ldw	r2,-108(fp)
   114d4:	e0bfeb15 	stw	r2,-84(fp)
   114d8:	e0bfeb17 	ldw	r2,-84(fp)
   114dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   114e0:	00006506 	br	11678 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   114e4:	e0bffc17 	ldw	r2,-16(fp)
   114e8:	1080020b 	ldhu	r2,8(r2)
   114ec:	0084303a 	nor	r2,zero,r2
   114f0:	1007883a 	mov	r3,r2
   114f4:	e0bffd0b 	ldhu	r2,-12(fp)
   114f8:	1884703a 	and	r2,r3,r2
   114fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   11500:	e0ffe80b 	ldhu	r3,-96(fp)
   11504:	e0bffd0b 	ldhu	r2,-12(fp)
   11508:	1880151e 	bne	r3,r2,11560 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1150c:	e0bfe403 	ldbu	r2,-112(fp)
   11510:	10800058 	cmpnei	r2,r2,1
   11514:	1000071e 	bne	r2,zero,11534 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   11518:	e0bffc17 	ldw	r2,-16(fp)
   1151c:	10c0020b 	ldhu	r3,8(r2)
   11520:	e0bfe80b 	ldhu	r2,-96(fp)
   11524:	1884b03a 	or	r2,r3,r2
   11528:	1007883a 	mov	r3,r2
   1152c:	e0bffc17 	ldw	r2,-16(fp)
   11530:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   11534:	d0a73517 	ldw	r2,-25388(gp)
   11538:	e0ffe80b 	ldhu	r3,-96(fp)
   1153c:	10c00b0d 	sth	r3,44(r2)
   11540:	e0bfe517 	ldw	r2,-108(fp)
   11544:	e0bfec15 	stw	r2,-80(fp)
   11548:	e0bfec17 	ldw	r2,-80(fp)
   1154c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11550:	e0800217 	ldw	r2,8(fp)
   11554:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   11558:	e0bfe80b 	ldhu	r2,-96(fp)
   1155c:	00009d06 	br	117d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11560:	e13ffd0b 	ldhu	r4,-12(fp)
   11564:	e17ffe03 	ldbu	r5,-8(fp)
   11568:	e0bfff0b 	ldhu	r2,-4(fp)
   1156c:	e0fff704 	addi	r3,fp,-36
   11570:	d8800015 	stw	r2,0(sp)
   11574:	280f883a 	mov	r7,r5
   11578:	200d883a 	mov	r6,r4
   1157c:	180b883a 	mov	r5,r3
   11580:	e13ffc17 	ldw	r4,-16(fp)
   11584:	0011ca00 	call	11ca0 <OS_FlagBlock>
   11588:	e0bfe517 	ldw	r2,-108(fp)
   1158c:	e0bfed15 	stw	r2,-76(fp)
   11590:	e0bfed17 	ldw	r2,-76(fp)
   11594:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   11598:	00003706 	br	11678 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1159c:	e0bffc17 	ldw	r2,-16(fp)
   115a0:	1080020b 	ldhu	r2,8(r2)
   115a4:	0084303a 	nor	r2,zero,r2
   115a8:	1007883a 	mov	r3,r2
   115ac:	e0bffd0b 	ldhu	r2,-12(fp)
   115b0:	1884703a 	and	r2,r3,r2
   115b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   115b8:	e0bfe80b 	ldhu	r2,-96(fp)
   115bc:	10001526 	beq	r2,zero,11614 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   115c0:	e0bfe403 	ldbu	r2,-112(fp)
   115c4:	10800058 	cmpnei	r2,r2,1
   115c8:	1000071e 	bne	r2,zero,115e8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   115cc:	e0bffc17 	ldw	r2,-16(fp)
   115d0:	10c0020b 	ldhu	r3,8(r2)
   115d4:	e0bfe80b 	ldhu	r2,-96(fp)
   115d8:	1884b03a 	or	r2,r3,r2
   115dc:	1007883a 	mov	r3,r2
   115e0:	e0bffc17 	ldw	r2,-16(fp)
   115e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   115e8:	d0a73517 	ldw	r2,-25388(gp)
   115ec:	e0ffe80b 	ldhu	r3,-96(fp)
   115f0:	10c00b0d 	sth	r3,44(r2)
   115f4:	e0bfe517 	ldw	r2,-108(fp)
   115f8:	e0bfee15 	stw	r2,-72(fp)
   115fc:	e0bfee17 	ldw	r2,-72(fp)
   11600:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   11604:	e0800217 	ldw	r2,8(fp)
   11608:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1160c:	e0bfe80b 	ldhu	r2,-96(fp)
   11610:	00007006 	br	117d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   11614:	e13ffd0b 	ldhu	r4,-12(fp)
   11618:	e17ffe03 	ldbu	r5,-8(fp)
   1161c:	e0bfff0b 	ldhu	r2,-4(fp)
   11620:	e0fff704 	addi	r3,fp,-36
   11624:	d8800015 	stw	r2,0(sp)
   11628:	280f883a 	mov	r7,r5
   1162c:	200d883a 	mov	r6,r4
   11630:	180b883a 	mov	r5,r3
   11634:	e13ffc17 	ldw	r4,-16(fp)
   11638:	0011ca00 	call	11ca0 <OS_FlagBlock>
   1163c:	e0bfe517 	ldw	r2,-108(fp)
   11640:	e0bfef15 	stw	r2,-68(fp)
   11644:	e0bfef17 	ldw	r2,-68(fp)
   11648:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1164c:	00000a06 	br	11678 <OSFlagPend+0x448>
   11650:	e0bfe517 	ldw	r2,-108(fp)
   11654:	e0bff015 	stw	r2,-64(fp)
   11658:	e0bff017 	ldw	r2,-64(fp)
   1165c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   11660:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   11664:	e0800217 	ldw	r2,8(fp)
   11668:	00c01bc4 	movi	r3,111
   1166c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   11670:	e0bfe80b 	ldhu	r2,-96(fp)
   11674:	00005706 	br	117d4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   11678:	00101000 	call	10100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1167c:	0005303a 	rdctl	r2,status
   11680:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11684:	e0fff117 	ldw	r3,-60(fp)
   11688:	00bfff84 	movi	r2,-2
   1168c:	1884703a 	and	r2,r3,r2
   11690:	1001703a 	wrctl	status,r2
  
  return context;
   11694:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   11698:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1169c:	d0a73517 	ldw	r2,-25388(gp)
   116a0:	10800c43 	ldbu	r2,49(r2)
   116a4:	10803fcc 	andi	r2,r2,255
   116a8:	10001c26 	beq	r2,zero,1171c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   116ac:	d0a73517 	ldw	r2,-25388(gp)
   116b0:	10800c43 	ldbu	r2,49(r2)
   116b4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   116b8:	d0a73517 	ldw	r2,-25388(gp)
   116bc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   116c0:	e0bff704 	addi	r2,fp,-36
   116c4:	1009883a 	mov	r4,r2
   116c8:	0011fd40 	call	11fd4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   116cc:	d0a73517 	ldw	r2,-25388(gp)
   116d0:	10000c05 	stb	zero,48(r2)
   116d4:	e0bfe517 	ldw	r2,-108(fp)
   116d8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116dc:	e0bff217 	ldw	r2,-56(fp)
   116e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   116e4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   116e8:	e0bff303 	ldbu	r2,-52(fp)
   116ec:	108000a0 	cmpeqi	r2,r2,2
   116f0:	10000426 	beq	r2,zero,11704 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   116f4:	e0800217 	ldw	r2,8(fp)
   116f8:	00c00384 	movi	r3,14
   116fc:	10c00005 	stb	r3,0(r2)
                 break;
   11700:	00000406 	br	11714 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   11704:	e0800217 	ldw	r2,8(fp)
   11708:	00c00284 	movi	r3,10
   1170c:	10c00005 	stb	r3,0(r2)
                 break;
   11710:	0001883a 	nop
        }
        return (flags_rdy);
   11714:	e0bfe80b 	ldhu	r2,-96(fp)
   11718:	00002e06 	br	117d4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1171c:	d0a73517 	ldw	r2,-25388(gp)
   11720:	10800b0b 	ldhu	r2,44(r2)
   11724:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   11728:	e0bfe403 	ldbu	r2,-112(fp)
   1172c:	10800058 	cmpnei	r2,r2,1
   11730:	1000211e 	bne	r2,zero,117b8 <OSFlagPend+0x588>
        switch (wait_type) {
   11734:	e0bffe03 	ldbu	r2,-8(fp)
   11738:	10001616 	blt	r2,zero,11794 <OSFlagPend+0x564>
   1173c:	10c00090 	cmplti	r3,r2,2
   11740:	18000c1e 	bne	r3,zero,11774 <OSFlagPend+0x544>
   11744:	10800108 	cmpgei	r2,r2,4
   11748:	1000121e 	bne	r2,zero,11794 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1174c:	e0bffc17 	ldw	r2,-16(fp)
   11750:	1080020b 	ldhu	r2,8(r2)
   11754:	1007883a 	mov	r3,r2
   11758:	e0bfe80b 	ldhu	r2,-96(fp)
   1175c:	0084303a 	nor	r2,zero,r2
   11760:	1884703a 	and	r2,r3,r2
   11764:	1007883a 	mov	r3,r2
   11768:	e0bffc17 	ldw	r2,-16(fp)
   1176c:	10c0020d 	sth	r3,8(r2)
                 break;
   11770:	00001106 	br	117b8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   11774:	e0bffc17 	ldw	r2,-16(fp)
   11778:	10c0020b 	ldhu	r3,8(r2)
   1177c:	e0bfe80b 	ldhu	r2,-96(fp)
   11780:	1884b03a 	or	r2,r3,r2
   11784:	1007883a 	mov	r3,r2
   11788:	e0bffc17 	ldw	r2,-16(fp)
   1178c:	10c0020d 	sth	r3,8(r2)
                 break;
   11790:	00000906 	br	117b8 <OSFlagPend+0x588>
   11794:	e0bfe517 	ldw	r2,-108(fp)
   11798:	e0bff415 	stw	r2,-48(fp)
   1179c:	e0bff417 	ldw	r2,-48(fp)
   117a0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   117a4:	e0800217 	ldw	r2,8(fp)
   117a8:	00c01bc4 	movi	r3,111
   117ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   117b0:	0005883a 	mov	r2,zero
   117b4:	00000706 	br	117d4 <OSFlagPend+0x5a4>
   117b8:	e0bfe517 	ldw	r2,-108(fp)
   117bc:	e0bff515 	stw	r2,-44(fp)
   117c0:	e0bff517 	ldw	r2,-44(fp)
   117c4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   117c8:	e0800217 	ldw	r2,8(fp)
   117cc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   117d0:	e0bfe80b 	ldhu	r2,-96(fp)
}
   117d4:	e037883a 	mov	sp,fp
   117d8:	dfc00117 	ldw	ra,4(sp)
   117dc:	df000017 	ldw	fp,0(sp)
   117e0:	dec00204 	addi	sp,sp,8
   117e4:	f800283a 	ret

000117e8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   117e8:	defffb04 	addi	sp,sp,-20
   117ec:	df000415 	stw	fp,16(sp)
   117f0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   117f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117f8:	0005303a 	rdctl	r2,status
   117fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11800:	e0fffe17 	ldw	r3,-8(fp)
   11804:	00bfff84 	movi	r2,-2
   11808:	1884703a 	and	r2,r3,r2
   1180c:	1001703a 	wrctl	status,r2
  
  return context;
   11810:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   11814:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   11818:	d0a73517 	ldw	r2,-25388(gp)
   1181c:	10800b0b 	ldhu	r2,44(r2)
   11820:	e0bffd0d 	sth	r2,-12(fp)
   11824:	e0bffc17 	ldw	r2,-16(fp)
   11828:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1182c:	e0bfff17 	ldw	r2,-4(fp)
   11830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   11834:	e0bffd0b 	ldhu	r2,-12(fp)
}
   11838:	e037883a 	mov	sp,fp
   1183c:	df000017 	ldw	fp,0(sp)
   11840:	dec00104 	addi	sp,sp,4
   11844:	f800283a 	ret

00011848 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   11848:	deffef04 	addi	sp,sp,-68
   1184c:	dfc01015 	stw	ra,64(sp)
   11850:	df000f15 	stw	fp,60(sp)
   11854:	df000f04 	addi	fp,sp,60
   11858:	e13ffc15 	stw	r4,-16(fp)
   1185c:	2807883a 	mov	r3,r5
   11860:	3005883a 	mov	r2,r6
   11864:	e1ffff15 	stw	r7,-4(fp)
   11868:	e0fffd0d 	sth	r3,-12(fp)
   1186c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   11870:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   11874:	e0bfff17 	ldw	r2,-4(fp)
   11878:	1000021e 	bne	r2,zero,11884 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1187c:	0005883a 	mov	r2,zero
   11880:	0000d106 	br	11bc8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   11884:	e0bffc17 	ldw	r2,-16(fp)
   11888:	1000051e 	bne	r2,zero,118a0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1188c:	e0bfff17 	ldw	r2,-4(fp)
   11890:	00c01b84 	movi	r3,110
   11894:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11898:	0005883a 	mov	r2,zero
   1189c:	0000ca06 	br	11bc8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   118a0:	e0bffc17 	ldw	r2,-16(fp)
   118a4:	10800003 	ldbu	r2,0(r2)
   118a8:	10803fcc 	andi	r2,r2,255
   118ac:	10800160 	cmpeqi	r2,r2,5
   118b0:	1000051e 	bne	r2,zero,118c8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   118b4:	e0bfff17 	ldw	r2,-4(fp)
   118b8:	00c00044 	movi	r3,1
   118bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   118c0:	0005883a 	mov	r2,zero
   118c4:	0000c006 	br	11bc8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   118c8:	0005303a 	rdctl	r2,status
   118cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   118d0:	e0fffb17 	ldw	r3,-20(fp)
   118d4:	00bfff84 	movi	r2,-2
   118d8:	1884703a 	and	r2,r3,r2
   118dc:	1001703a 	wrctl	status,r2
  
  return context;
   118e0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   118e4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   118e8:	e0bffe03 	ldbu	r2,-8(fp)
   118ec:	10000326 	beq	r2,zero,118fc <OSFlagPost+0xb4>
   118f0:	10800060 	cmpeqi	r2,r2,1
   118f4:	10000b1e 	bne	r2,zero,11924 <OSFlagPost+0xdc>
   118f8:	00001206 	br	11944 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   118fc:	e0bffc17 	ldw	r2,-16(fp)
   11900:	1080020b 	ldhu	r2,8(r2)
   11904:	1007883a 	mov	r3,r2
   11908:	e0bffd0b 	ldhu	r2,-12(fp)
   1190c:	0084303a 	nor	r2,zero,r2
   11910:	1884703a 	and	r2,r3,r2
   11914:	1007883a 	mov	r3,r2
   11918:	e0bffc17 	ldw	r2,-16(fp)
   1191c:	10c0020d 	sth	r3,8(r2)
             break;
   11920:	00001106 	br	11968 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   11924:	e0bffc17 	ldw	r2,-16(fp)
   11928:	10c0020b 	ldhu	r3,8(r2)
   1192c:	e0bffd0b 	ldhu	r2,-12(fp)
   11930:	1884b03a 	or	r2,r3,r2
   11934:	1007883a 	mov	r3,r2
   11938:	e0bffc17 	ldw	r2,-16(fp)
   1193c:	10c0020d 	sth	r3,8(r2)
             break;
   11940:	00000906 	br	11968 <OSFlagPost+0x120>
   11944:	e0bff317 	ldw	r2,-52(fp)
   11948:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1194c:	e0bff417 	ldw	r2,-48(fp)
   11950:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   11954:	e0bfff17 	ldw	r2,-4(fp)
   11958:	00c01c44 	movi	r3,113
   1195c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   11960:	0005883a 	mov	r2,zero
   11964:	00009806 	br	11bc8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   11968:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1196c:	e0bffc17 	ldw	r2,-16(fp)
   11970:	10800117 	ldw	r2,4(r2)
   11974:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11978:	00007706 	br	11b58 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1197c:	e0bff117 	ldw	r2,-60(fp)
   11980:	10800483 	ldbu	r2,18(r2)
   11984:	10803fcc 	andi	r2,r2,255
   11988:	10c00060 	cmpeqi	r3,r2,1
   1198c:	18004a1e 	bne	r3,zero,11ab8 <OSFlagPost+0x270>
   11990:	10c00088 	cmpgei	r3,r2,2
   11994:	1800021e 	bne	r3,zero,119a0 <OSFlagPost+0x158>
   11998:	10002f26 	beq	r2,zero,11a58 <OSFlagPost+0x210>
   1199c:	00005b06 	br	11b0c <OSFlagPost+0x2c4>
   119a0:	10c000a0 	cmpeqi	r3,r2,2
   119a4:	1800031e 	bne	r3,zero,119b4 <OSFlagPost+0x16c>
   119a8:	108000e0 	cmpeqi	r2,r2,3
   119ac:	1000171e 	bne	r2,zero,11a0c <OSFlagPost+0x1c4>
   119b0:	00005606 	br	11b0c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   119b4:	e0bffc17 	ldw	r2,-16(fp)
   119b8:	10c0020b 	ldhu	r3,8(r2)
   119bc:	e0bff117 	ldw	r2,-60(fp)
   119c0:	1080040b 	ldhu	r2,16(r2)
   119c4:	1884703a 	and	r2,r3,r2
   119c8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   119cc:	e0bff117 	ldw	r2,-60(fp)
   119d0:	1080040b 	ldhu	r2,16(r2)
   119d4:	10ffffcc 	andi	r3,r2,65535
   119d8:	e0bff60b 	ldhu	r2,-40(fp)
   119dc:	1880541e 	bne	r3,r2,11b30 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   119e0:	e0bff60b 	ldhu	r2,-40(fp)
   119e4:	100b883a 	mov	r5,r2
   119e8:	e13ff117 	ldw	r4,-60(fp)
   119ec:	0011ee00 	call	11ee0 <OS_FlagTaskRdy>
   119f0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   119f4:	e0bff683 	ldbu	r2,-38(fp)
   119f8:	10800058 	cmpnei	r2,r2,1
   119fc:	10004c1e 	bne	r2,zero,11b30 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11a00:	00800044 	movi	r2,1
   11a04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11a08:	00004906 	br	11b30 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11a0c:	e0bffc17 	ldw	r2,-16(fp)
   11a10:	10c0020b 	ldhu	r3,8(r2)
   11a14:	e0bff117 	ldw	r2,-60(fp)
   11a18:	1080040b 	ldhu	r2,16(r2)
   11a1c:	1884703a 	and	r2,r3,r2
   11a20:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11a24:	e0bff60b 	ldhu	r2,-40(fp)
   11a28:	10004326 	beq	r2,zero,11b38 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11a2c:	e0bff60b 	ldhu	r2,-40(fp)
   11a30:	100b883a 	mov	r5,r2
   11a34:	e13ff117 	ldw	r4,-60(fp)
   11a38:	0011ee00 	call	11ee0 <OS_FlagTaskRdy>
   11a3c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11a40:	e0bff683 	ldbu	r2,-38(fp)
   11a44:	10800058 	cmpnei	r2,r2,1
   11a48:	10003b1e 	bne	r2,zero,11b38 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11a4c:	00800044 	movi	r2,1
   11a50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11a54:	00003806 	br	11b38 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11a58:	e0bffc17 	ldw	r2,-16(fp)
   11a5c:	1080020b 	ldhu	r2,8(r2)
   11a60:	0084303a 	nor	r2,zero,r2
   11a64:	1007883a 	mov	r3,r2
   11a68:	e0bff117 	ldw	r2,-60(fp)
   11a6c:	1080040b 	ldhu	r2,16(r2)
   11a70:	1884703a 	and	r2,r3,r2
   11a74:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   11a78:	e0bff117 	ldw	r2,-60(fp)
   11a7c:	1080040b 	ldhu	r2,16(r2)
   11a80:	10ffffcc 	andi	r3,r2,65535
   11a84:	e0bff60b 	ldhu	r2,-40(fp)
   11a88:	18802d1e 	bne	r3,r2,11b40 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11a8c:	e0bff60b 	ldhu	r2,-40(fp)
   11a90:	100b883a 	mov	r5,r2
   11a94:	e13ff117 	ldw	r4,-60(fp)
   11a98:	0011ee00 	call	11ee0 <OS_FlagTaskRdy>
   11a9c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11aa0:	e0bff683 	ldbu	r2,-38(fp)
   11aa4:	10800058 	cmpnei	r2,r2,1
   11aa8:	1000251e 	bne	r2,zero,11b40 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11aac:	00800044 	movi	r2,1
   11ab0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11ab4:	00002206 	br	11b40 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   11ab8:	e0bffc17 	ldw	r2,-16(fp)
   11abc:	1080020b 	ldhu	r2,8(r2)
   11ac0:	0084303a 	nor	r2,zero,r2
   11ac4:	1007883a 	mov	r3,r2
   11ac8:	e0bff117 	ldw	r2,-60(fp)
   11acc:	1080040b 	ldhu	r2,16(r2)
   11ad0:	1884703a 	and	r2,r3,r2
   11ad4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   11ad8:	e0bff60b 	ldhu	r2,-40(fp)
   11adc:	10001a26 	beq	r2,zero,11b48 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   11ae0:	e0bff60b 	ldhu	r2,-40(fp)
   11ae4:	100b883a 	mov	r5,r2
   11ae8:	e13ff117 	ldw	r4,-60(fp)
   11aec:	0011ee00 	call	11ee0 <OS_FlagTaskRdy>
   11af0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   11af4:	e0bff683 	ldbu	r2,-38(fp)
   11af8:	10800058 	cmpnei	r2,r2,1
   11afc:	1000121e 	bne	r2,zero,11b48 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   11b00:	00800044 	movi	r2,1
   11b04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   11b08:	00000f06 	br	11b48 <OSFlagPost+0x300>
   11b0c:	e0bff317 	ldw	r2,-52(fp)
   11b10:	e0bff515 	stw	r2,-44(fp)
   11b14:	e0bff517 	ldw	r2,-44(fp)
   11b18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   11b1c:	e0bfff17 	ldw	r2,-4(fp)
   11b20:	00c01bc4 	movi	r3,111
   11b24:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   11b28:	0005883a 	mov	r2,zero
   11b2c:	00002606 	br	11bc8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11b30:	0001883a 	nop
   11b34:	00000506 	br	11b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11b38:	0001883a 	nop
   11b3c:	00000306 	br	11b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11b40:	0001883a 	nop
   11b44:	00000106 	br	11b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   11b48:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   11b4c:	e0bff117 	ldw	r2,-60(fp)
   11b50:	10800017 	ldw	r2,0(r2)
   11b54:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   11b58:	e0bff117 	ldw	r2,-60(fp)
   11b5c:	103f871e 	bne	r2,zero,1197c <__alt_data_end+0xfffe0c3c>
   11b60:	e0bff317 	ldw	r2,-52(fp)
   11b64:	e0bff715 	stw	r2,-36(fp)
   11b68:	e0bff717 	ldw	r2,-36(fp)
   11b6c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   11b70:	e0bff203 	ldbu	r2,-56(fp)
   11b74:	10800058 	cmpnei	r2,r2,1
   11b78:	1000011e 	bne	r2,zero,11b80 <OSFlagPost+0x338>
        OS_Sched();
   11b7c:	00101000 	call	10100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b80:	0005303a 	rdctl	r2,status
   11b84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b88:	e0fffa17 	ldw	r3,-24(fp)
   11b8c:	00bfff84 	movi	r2,-2
   11b90:	1884703a 	and	r2,r3,r2
   11b94:	1001703a 	wrctl	status,r2
  
  return context;
   11b98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   11b9c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   11ba0:	e0bffc17 	ldw	r2,-16(fp)
   11ba4:	1080020b 	ldhu	r2,8(r2)
   11ba8:	e0bff90d 	sth	r2,-28(fp)
   11bac:	e0bff317 	ldw	r2,-52(fp)
   11bb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11bb4:	e0bff817 	ldw	r2,-32(fp)
   11bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   11bbc:	e0bfff17 	ldw	r2,-4(fp)
   11bc0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   11bc4:	e0bff90b 	ldhu	r2,-28(fp)
}
   11bc8:	e037883a 	mov	sp,fp
   11bcc:	dfc00117 	ldw	ra,4(sp)
   11bd0:	df000017 	ldw	fp,0(sp)
   11bd4:	dec00204 	addi	sp,sp,8
   11bd8:	f800283a 	ret

00011bdc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   11bdc:	defff904 	addi	sp,sp,-28
   11be0:	df000615 	stw	fp,24(sp)
   11be4:	df000604 	addi	fp,sp,24
   11be8:	e13ffe15 	stw	r4,-8(fp)
   11bec:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   11bf0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   11bf4:	e0bfff17 	ldw	r2,-4(fp)
   11bf8:	1000021e 	bne	r2,zero,11c04 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   11bfc:	0005883a 	mov	r2,zero
   11c00:	00002306 	br	11c90 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   11c04:	e0bffe17 	ldw	r2,-8(fp)
   11c08:	1000051e 	bne	r2,zero,11c20 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   11c0c:	e0bfff17 	ldw	r2,-4(fp)
   11c10:	00c01b84 	movi	r3,110
   11c14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11c18:	0005883a 	mov	r2,zero
   11c1c:	00001c06 	br	11c90 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   11c20:	e0bffe17 	ldw	r2,-8(fp)
   11c24:	10800003 	ldbu	r2,0(r2)
   11c28:	10803fcc 	andi	r2,r2,255
   11c2c:	10800160 	cmpeqi	r2,r2,5
   11c30:	1000051e 	bne	r2,zero,11c48 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   11c34:	e0bfff17 	ldw	r2,-4(fp)
   11c38:	00c00044 	movi	r3,1
   11c3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   11c40:	0005883a 	mov	r2,zero
   11c44:	00001206 	br	11c90 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c48:	0005303a 	rdctl	r2,status
   11c4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c50:	e0fffc17 	ldw	r3,-16(fp)
   11c54:	00bfff84 	movi	r2,-2
   11c58:	1884703a 	and	r2,r3,r2
   11c5c:	1001703a 	wrctl	status,r2
  
  return context;
   11c60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   11c64:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   11c68:	e0bffe17 	ldw	r2,-8(fp)
   11c6c:	1080020b 	ldhu	r2,8(r2)
   11c70:	e0bffb0d 	sth	r2,-20(fp)
   11c74:	e0bffa17 	ldw	r2,-24(fp)
   11c78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11c7c:	e0bffd17 	ldw	r2,-12(fp)
   11c80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   11c84:	e0bfff17 	ldw	r2,-4(fp)
   11c88:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   11c8c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   11c90:	e037883a 	mov	sp,fp
   11c94:	df000017 	ldw	fp,0(sp)
   11c98:	dec00104 	addi	sp,sp,4
   11c9c:	f800283a 	ret

00011ca0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   11ca0:	defff804 	addi	sp,sp,-32
   11ca4:	df000715 	stw	fp,28(sp)
   11ca8:	df000704 	addi	fp,sp,28
   11cac:	e13ffb15 	stw	r4,-20(fp)
   11cb0:	e17ffc15 	stw	r5,-16(fp)
   11cb4:	3009883a 	mov	r4,r6
   11cb8:	3807883a 	mov	r3,r7
   11cbc:	e0800117 	ldw	r2,4(fp)
   11cc0:	e13ffd0d 	sth	r4,-12(fp)
   11cc4:	e0fffe05 	stb	r3,-8(fp)
   11cc8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   11ccc:	d0a73517 	ldw	r2,-25388(gp)
   11cd0:	d0e73517 	ldw	r3,-25388(gp)
   11cd4:	18c00c03 	ldbu	r3,48(r3)
   11cd8:	18c00814 	ori	r3,r3,32
   11cdc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   11ce0:	d0a73517 	ldw	r2,-25388(gp)
   11ce4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   11ce8:	d0a73517 	ldw	r2,-25388(gp)
   11cec:	e0ffff0b 	ldhu	r3,-4(fp)
   11cf0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   11cf4:	d0a73517 	ldw	r2,-25388(gp)
   11cf8:	e0fffc17 	ldw	r3,-16(fp)
   11cfc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   11d00:	e0bffc17 	ldw	r2,-16(fp)
   11d04:	e0fffd0b 	ldhu	r3,-12(fp)
   11d08:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   11d0c:	e0bffc17 	ldw	r2,-16(fp)
   11d10:	e0fffe03 	ldbu	r3,-8(fp)
   11d14:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   11d18:	d0e73517 	ldw	r3,-25388(gp)
   11d1c:	e0bffc17 	ldw	r2,-16(fp)
   11d20:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   11d24:	e0bffb17 	ldw	r2,-20(fp)
   11d28:	10c00117 	ldw	r3,4(r2)
   11d2c:	e0bffc17 	ldw	r2,-16(fp)
   11d30:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   11d34:	e0bffc17 	ldw	r2,-16(fp)
   11d38:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   11d3c:	e0bffc17 	ldw	r2,-16(fp)
   11d40:	e0fffb17 	ldw	r3,-20(fp)
   11d44:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   11d48:	e0bffb17 	ldw	r2,-20(fp)
   11d4c:	10800117 	ldw	r2,4(r2)
   11d50:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   11d54:	e0bff917 	ldw	r2,-28(fp)
   11d58:	10000326 	beq	r2,zero,11d68 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   11d5c:	e0bff917 	ldw	r2,-28(fp)
   11d60:	e0fffc17 	ldw	r3,-16(fp)
   11d64:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   11d68:	e0bffb17 	ldw	r2,-20(fp)
   11d6c:	e0fffc17 	ldw	r3,-16(fp)
   11d70:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   11d74:	d0a73517 	ldw	r2,-25388(gp)
   11d78:	10800d03 	ldbu	r2,52(r2)
   11d7c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   11d80:	e0fffa03 	ldbu	r3,-24(fp)
   11d84:	e13ffa03 	ldbu	r4,-24(fp)
   11d88:	d0a73244 	addi	r2,gp,-25399
   11d8c:	2085883a 	add	r2,r4,r2
   11d90:	10800003 	ldbu	r2,0(r2)
   11d94:	1009883a 	mov	r4,r2
   11d98:	d0a73517 	ldw	r2,-25388(gp)
   11d9c:	10800d43 	ldbu	r2,53(r2)
   11da0:	0084303a 	nor	r2,zero,r2
   11da4:	2084703a 	and	r2,r4,r2
   11da8:	1009883a 	mov	r4,r2
   11dac:	d0a73244 	addi	r2,gp,-25399
   11db0:	1885883a 	add	r2,r3,r2
   11db4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   11db8:	e0fffa03 	ldbu	r3,-24(fp)
   11dbc:	d0a73244 	addi	r2,gp,-25399
   11dc0:	1885883a 	add	r2,r3,r2
   11dc4:	10800003 	ldbu	r2,0(r2)
   11dc8:	10803fcc 	andi	r2,r2,255
   11dcc:	1000071e 	bne	r2,zero,11dec <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   11dd0:	d0a73517 	ldw	r2,-25388(gp)
   11dd4:	10800d83 	ldbu	r2,54(r2)
   11dd8:	0084303a 	nor	r2,zero,r2
   11ddc:	1007883a 	mov	r3,r2
   11de0:	d0a73203 	ldbu	r2,-25400(gp)
   11de4:	1884703a 	and	r2,r3,r2
   11de8:	d0a73205 	stb	r2,-25400(gp)
    }
}
   11dec:	0001883a 	nop
   11df0:	e037883a 	mov	sp,fp
   11df4:	df000017 	ldw	fp,0(sp)
   11df8:	dec00104 	addi	sp,sp,4
   11dfc:	f800283a 	ret

00011e00 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   11e00:	defffb04 	addi	sp,sp,-20
   11e04:	dfc00415 	stw	ra,16(sp)
   11e08:	df000315 	stw	fp,12(sp)
   11e0c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   11e10:	0140dc04 	movi	r5,880
   11e14:	010000b4 	movhi	r4,2
   11e18:	210a2704 	addi	r4,r4,10396
   11e1c:	00100440 	call	10044 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   11e20:	008000b4 	movhi	r2,2
   11e24:	108a2704 	addi	r2,r2,10396
   11e28:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   11e2c:	008000b4 	movhi	r2,2
   11e30:	108a3204 	addi	r2,r2,10440
   11e34:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11e38:	e03ffd0d 	sth	zero,-12(fp)
   11e3c:	00001306 	br	11e8c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11e40:	e0bffe17 	ldw	r2,-8(fp)
   11e44:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   11e48:	e0bffe17 	ldw	r2,-8(fp)
   11e4c:	e0ffff17 	ldw	r3,-4(fp)
   11e50:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   11e54:	e0bffe17 	ldw	r2,-8(fp)
   11e58:	00c00fc4 	movi	r3,63
   11e5c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11e60:	e0bffe17 	ldw	r2,-8(fp)
   11e64:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   11e68:	e0bffe17 	ldw	r2,-8(fp)
   11e6c:	10800b04 	addi	r2,r2,44
   11e70:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   11e74:	e0bfff17 	ldw	r2,-4(fp)
   11e78:	10800b04 	addi	r2,r2,44
   11e7c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   11e80:	e0bffd0b 	ldhu	r2,-12(fp)
   11e84:	10800044 	addi	r2,r2,1
   11e88:	e0bffd0d 	sth	r2,-12(fp)
   11e8c:	e0bffd0b 	ldhu	r2,-12(fp)
   11e90:	108004f0 	cmpltui	r2,r2,19
   11e94:	103fea1e 	bne	r2,zero,11e40 <__alt_data_end+0xfffe1100>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   11e98:	e0bffe17 	ldw	r2,-8(fp)
   11e9c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   11ea0:	e0bffe17 	ldw	r2,-8(fp)
   11ea4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   11ea8:	e0bffe17 	ldw	r2,-8(fp)
   11eac:	00c00fc4 	movi	r3,63
   11eb0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   11eb4:	e0bffe17 	ldw	r2,-8(fp)
   11eb8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   11ebc:	008000b4 	movhi	r2,2
   11ec0:	108a2704 	addi	r2,r2,10396
   11ec4:	d0a73715 	stw	r2,-25380(gp)
#endif
}
   11ec8:	0001883a 	nop
   11ecc:	e037883a 	mov	sp,fp
   11ed0:	dfc00117 	ldw	ra,4(sp)
   11ed4:	df000017 	ldw	fp,0(sp)
   11ed8:	dec00204 	addi	sp,sp,8
   11edc:	f800283a 	ret

00011ee0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   11ee0:	defffa04 	addi	sp,sp,-24
   11ee4:	dfc00515 	stw	ra,20(sp)
   11ee8:	df000415 	stw	fp,16(sp)
   11eec:	df000404 	addi	fp,sp,16
   11ef0:	e13ffe15 	stw	r4,-8(fp)
   11ef4:	2805883a 	mov	r2,r5
   11ef8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   11efc:	e0bffe17 	ldw	r2,-8(fp)
   11f00:	10800217 	ldw	r2,8(r2)
   11f04:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   11f08:	e0bffd17 	ldw	r2,-12(fp)
   11f0c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   11f10:	e0bffd17 	ldw	r2,-12(fp)
   11f14:	e0ffff0b 	ldhu	r3,-4(fp)
   11f18:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   11f1c:	e0bffd17 	ldw	r2,-12(fp)
   11f20:	10c00c03 	ldbu	r3,48(r2)
   11f24:	00bff7c4 	movi	r2,-33
   11f28:	1884703a 	and	r2,r3,r2
   11f2c:	1007883a 	mov	r3,r2
   11f30:	e0bffd17 	ldw	r2,-12(fp)
   11f34:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   11f38:	e0bffd17 	ldw	r2,-12(fp)
   11f3c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   11f40:	e0bffd17 	ldw	r2,-12(fp)
   11f44:	10800c03 	ldbu	r2,48(r2)
   11f48:	10803fcc 	andi	r2,r2,255
   11f4c:	1000181e 	bne	r2,zero,11fb0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   11f50:	e0bffd17 	ldw	r2,-12(fp)
   11f54:	10c00d83 	ldbu	r3,54(r2)
   11f58:	d0a73203 	ldbu	r2,-25400(gp)
   11f5c:	1884b03a 	or	r2,r3,r2
   11f60:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   11f64:	e0bffd17 	ldw	r2,-12(fp)
   11f68:	10800d03 	ldbu	r2,52(r2)
   11f6c:	10c03fcc 	andi	r3,r2,255
   11f70:	e0bffd17 	ldw	r2,-12(fp)
   11f74:	10800d03 	ldbu	r2,52(r2)
   11f78:	11003fcc 	andi	r4,r2,255
   11f7c:	d0a73244 	addi	r2,gp,-25399
   11f80:	2085883a 	add	r2,r4,r2
   11f84:	11000003 	ldbu	r4,0(r2)
   11f88:	e0bffd17 	ldw	r2,-12(fp)
   11f8c:	10800d43 	ldbu	r2,53(r2)
   11f90:	2084b03a 	or	r2,r4,r2
   11f94:	1009883a 	mov	r4,r2
   11f98:	d0a73244 	addi	r2,gp,-25399
   11f9c:	1885883a 	add	r2,r3,r2
   11fa0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   11fa4:	00800044 	movi	r2,1
   11fa8:	e0bffc05 	stb	r2,-16(fp)
   11fac:	00000106 	br	11fb4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   11fb0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   11fb4:	e13ffe17 	ldw	r4,-8(fp)
   11fb8:	0011fd40 	call	11fd4 <OS_FlagUnlink>
    return (sched);
   11fbc:	e0bffc03 	ldbu	r2,-16(fp)
}
   11fc0:	e037883a 	mov	sp,fp
   11fc4:	dfc00117 	ldw	ra,4(sp)
   11fc8:	df000017 	ldw	fp,0(sp)
   11fcc:	dec00204 	addi	sp,sp,8
   11fd0:	f800283a 	ret

00011fd4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   11fd4:	defffa04 	addi	sp,sp,-24
   11fd8:	df000515 	stw	fp,20(sp)
   11fdc:	df000504 	addi	fp,sp,20
   11fe0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   11fe4:	e0bfff17 	ldw	r2,-4(fp)
   11fe8:	10800117 	ldw	r2,4(r2)
   11fec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   11ff0:	e0bfff17 	ldw	r2,-4(fp)
   11ff4:	10800017 	ldw	r2,0(r2)
   11ff8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   11ffc:	e0bffb17 	ldw	r2,-20(fp)
   12000:	10000b1e 	bne	r2,zero,12030 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   12004:	e0bfff17 	ldw	r2,-4(fp)
   12008:	10800317 	ldw	r2,12(r2)
   1200c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   12010:	e0bffd17 	ldw	r2,-12(fp)
   12014:	e0fffc17 	ldw	r3,-16(fp)
   12018:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1201c:	e0bffc17 	ldw	r2,-16(fp)
   12020:	10000b26 	beq	r2,zero,12050 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   12024:	e0bffc17 	ldw	r2,-16(fp)
   12028:	10000115 	stw	zero,4(r2)
   1202c:	00000806 	br	12050 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   12030:	e0bffb17 	ldw	r2,-20(fp)
   12034:	e0fffc17 	ldw	r3,-16(fp)
   12038:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1203c:	e0bffc17 	ldw	r2,-16(fp)
   12040:	10000326 	beq	r2,zero,12050 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   12044:	e0bffc17 	ldw	r2,-16(fp)
   12048:	e0fffb17 	ldw	r3,-20(fp)
   1204c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   12050:	e0bfff17 	ldw	r2,-4(fp)
   12054:	10800217 	ldw	r2,8(r2)
   12058:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1205c:	e0bffe17 	ldw	r2,-8(fp)
   12060:	10000a15 	stw	zero,40(r2)
#endif
}
   12064:	0001883a 	nop
   12068:	e037883a 	mov	sp,fp
   1206c:	df000017 	ldw	fp,0(sp)
   12070:	dec00104 	addi	sp,sp,4
   12074:	f800283a 	ret

00012078 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   12078:	defff404 	addi	sp,sp,-48
   1207c:	df000b15 	stw	fp,44(sp)
   12080:	df000b04 	addi	fp,sp,44
   12084:	e13ffc15 	stw	r4,-16(fp)
   12088:	e17ffd15 	stw	r5,-12(fp)
   1208c:	e1bffe15 	stw	r6,-8(fp)
   12090:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12094:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12098:	e0bfff17 	ldw	r2,-4(fp)
   1209c:	1000021e 	bne	r2,zero,120a8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   120a0:	0005883a 	mov	r2,zero
   120a4:	00006506 	br	1223c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   120a8:	e0bffc17 	ldw	r2,-16(fp)
   120ac:	1000051e 	bne	r2,zero,120c4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   120b0:	e0bfff17 	ldw	r2,-4(fp)
   120b4:	00c01884 	movi	r3,98
   120b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   120bc:	0005883a 	mov	r2,zero
   120c0:	00005e06 	br	1223c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   120c4:	e0bffc17 	ldw	r2,-16(fp)
   120c8:	108000cc 	andi	r2,r2,3
   120cc:	10000526 	beq	r2,zero,120e4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   120d0:	e0bfff17 	ldw	r2,-4(fp)
   120d4:	00c01884 	movi	r3,98
   120d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   120dc:	0005883a 	mov	r2,zero
   120e0:	00005606 	br	1223c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   120e4:	e0bffd17 	ldw	r2,-12(fp)
   120e8:	108000a8 	cmpgeui	r2,r2,2
   120ec:	1000051e 	bne	r2,zero,12104 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   120f0:	e0bfff17 	ldw	r2,-4(fp)
   120f4:	00c016c4 	movi	r3,91
   120f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   120fc:	0005883a 	mov	r2,zero
   12100:	00004e06 	br	1223c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   12104:	e0bffe17 	ldw	r2,-8(fp)
   12108:	10800128 	cmpgeui	r2,r2,4
   1210c:	1000051e 	bne	r2,zero,12124 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   12110:	e0bfff17 	ldw	r2,-4(fp)
   12114:	00c01704 	movi	r3,92
   12118:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1211c:	0005883a 	mov	r2,zero
   12120:	00004606 	br	1223c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12124:	0005303a 	rdctl	r2,status
   12128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1212c:	e0fffb17 	ldw	r3,-20(fp)
   12130:	00bfff84 	movi	r2,-2
   12134:	1884703a 	and	r2,r3,r2
   12138:	1001703a 	wrctl	status,r2
  
  return context;
   1213c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12140:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   12144:	d0a72f17 	ldw	r2,-25412(gp)
   12148:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1214c:	d0a72f17 	ldw	r2,-25412(gp)
   12150:	10000326 	beq	r2,zero,12160 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   12154:	d0a72f17 	ldw	r2,-25412(gp)
   12158:	10800117 	ldw	r2,4(r2)
   1215c:	d0a72f15 	stw	r2,-25412(gp)
   12160:	e0bff817 	ldw	r2,-32(fp)
   12164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12168:	e0bff917 	ldw	r2,-28(fp)
   1216c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   12170:	e0bffa17 	ldw	r2,-24(fp)
   12174:	1000051e 	bne	r2,zero,1218c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   12178:	e0bfff17 	ldw	r2,-4(fp)
   1217c:	00c01684 	movi	r3,90
   12180:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   12184:	0005883a 	mov	r2,zero
   12188:	00002c06 	br	1223c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1218c:	e0bffc17 	ldw	r2,-16(fp)
   12190:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   12194:	e0fffc17 	ldw	r3,-16(fp)
   12198:	e0bffe17 	ldw	r2,-8(fp)
   1219c:	1885883a 	add	r2,r3,r2
   121a0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   121a4:	e03ff715 	stw	zero,-36(fp)
   121a8:	00000c06 	br	121dc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   121ac:	e0bff617 	ldw	r2,-40(fp)
   121b0:	e0fff517 	ldw	r3,-44(fp)
   121b4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   121b8:	e0bff517 	ldw	r2,-44(fp)
   121bc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   121c0:	e0fff517 	ldw	r3,-44(fp)
   121c4:	e0bffe17 	ldw	r2,-8(fp)
   121c8:	1885883a 	add	r2,r3,r2
   121cc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   121d0:	e0bff717 	ldw	r2,-36(fp)
   121d4:	10800044 	addi	r2,r2,1
   121d8:	e0bff715 	stw	r2,-36(fp)
   121dc:	e0bffd17 	ldw	r2,-12(fp)
   121e0:	10bfffc4 	addi	r2,r2,-1
   121e4:	e0fff717 	ldw	r3,-36(fp)
   121e8:	18bff036 	bltu	r3,r2,121ac <__alt_data_end+0xfffe146c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   121ec:	e0bff617 	ldw	r2,-40(fp)
   121f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   121f4:	e0bffa17 	ldw	r2,-24(fp)
   121f8:	e0fffc17 	ldw	r3,-16(fp)
   121fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   12200:	e0bffa17 	ldw	r2,-24(fp)
   12204:	e0fffc17 	ldw	r3,-16(fp)
   12208:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1220c:	e0bffa17 	ldw	r2,-24(fp)
   12210:	e0fffd17 	ldw	r3,-12(fp)
   12214:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   12218:	e0bffa17 	ldw	r2,-24(fp)
   1221c:	e0fffd17 	ldw	r3,-12(fp)
   12220:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   12224:	e0bffa17 	ldw	r2,-24(fp)
   12228:	e0fffe17 	ldw	r3,-8(fp)
   1222c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   12230:	e0bfff17 	ldw	r2,-4(fp)
   12234:	10000005 	stb	zero,0(r2)
    return (pmem);
   12238:	e0bffa17 	ldw	r2,-24(fp)
}
   1223c:	e037883a 	mov	sp,fp
   12240:	df000017 	ldw	fp,0(sp)
   12244:	dec00104 	addi	sp,sp,4
   12248:	f800283a 	ret

0001224c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1224c:	defff804 	addi	sp,sp,-32
   12250:	df000715 	stw	fp,28(sp)
   12254:	df000704 	addi	fp,sp,28
   12258:	e13ffe15 	stw	r4,-8(fp)
   1225c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12260:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   12264:	e0bfff17 	ldw	r2,-4(fp)
   12268:	1000021e 	bne	r2,zero,12274 <OSMemGet+0x28>
        return ((void *)0);
   1226c:	0005883a 	mov	r2,zero
   12270:	00002e06 	br	1232c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   12274:	e0bffe17 	ldw	r2,-8(fp)
   12278:	1000051e 	bne	r2,zero,12290 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1227c:	e0bfff17 	ldw	r2,-4(fp)
   12280:	00c01804 	movi	r3,96
   12284:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12288:	0005883a 	mov	r2,zero
   1228c:	00002706 	br	1232c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12290:	0005303a 	rdctl	r2,status
   12294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12298:	e0fffd17 	ldw	r3,-12(fp)
   1229c:	00bfff84 	movi	r2,-2
   122a0:	1884703a 	and	r2,r3,r2
   122a4:	1001703a 	wrctl	status,r2
  
  return context;
   122a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   122ac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   122b0:	e0bffe17 	ldw	r2,-8(fp)
   122b4:	10800417 	ldw	r2,16(r2)
   122b8:	10001426 	beq	r2,zero,1230c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   122bc:	e0bffe17 	ldw	r2,-8(fp)
   122c0:	10800117 	ldw	r2,4(r2)
   122c4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   122c8:	e0bffb17 	ldw	r2,-20(fp)
   122cc:	10c00017 	ldw	r3,0(r2)
   122d0:	e0bffe17 	ldw	r2,-8(fp)
   122d4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   122d8:	e0bffe17 	ldw	r2,-8(fp)
   122dc:	10800417 	ldw	r2,16(r2)
   122e0:	10ffffc4 	addi	r3,r2,-1
   122e4:	e0bffe17 	ldw	r2,-8(fp)
   122e8:	10c00415 	stw	r3,16(r2)
   122ec:	e0bff917 	ldw	r2,-28(fp)
   122f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   122f4:	e0bffa17 	ldw	r2,-24(fp)
   122f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   122fc:	e0bfff17 	ldw	r2,-4(fp)
   12300:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   12304:	e0bffb17 	ldw	r2,-20(fp)
   12308:	00000806 	br	1232c <OSMemGet+0xe0>
   1230c:	e0bff917 	ldw	r2,-28(fp)
   12310:	e0bffc15 	stw	r2,-16(fp)
   12314:	e0bffc17 	ldw	r2,-16(fp)
   12318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1231c:	e0bfff17 	ldw	r2,-4(fp)
   12320:	00c01744 	movi	r3,93
   12324:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   12328:	0005883a 	mov	r2,zero
}
   1232c:	e037883a 	mov	sp,fp
   12330:	df000017 	ldw	fp,0(sp)
   12334:	dec00104 	addi	sp,sp,4
   12338:	f800283a 	ret

0001233c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1233c:	defff704 	addi	sp,sp,-36
   12340:	dfc00815 	stw	ra,32(sp)
   12344:	df000715 	stw	fp,28(sp)
   12348:	df000704 	addi	fp,sp,28
   1234c:	e13ffd15 	stw	r4,-12(fp)
   12350:	e17ffe15 	stw	r5,-8(fp)
   12354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12358:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1235c:	e0bfff17 	ldw	r2,-4(fp)
   12360:	1000021e 	bne	r2,zero,1236c <OSMemNameGet+0x30>
        return (0);
   12364:	0005883a 	mov	r2,zero
   12368:	00002b06 	br	12418 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1236c:	e0bffd17 	ldw	r2,-12(fp)
   12370:	1000051e 	bne	r2,zero,12388 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   12374:	e0bfff17 	ldw	r2,-4(fp)
   12378:	00c01804 	movi	r3,96
   1237c:	10c00005 	stb	r3,0(r2)
        return (0);
   12380:	0005883a 	mov	r2,zero
   12384:	00002406 	br	12418 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   12388:	e0bffe17 	ldw	r2,-8(fp)
   1238c:	1000051e 	bne	r2,zero,123a4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   12390:	e0bfff17 	ldw	r2,-4(fp)
   12394:	00c00304 	movi	r3,12
   12398:	10c00005 	stb	r3,0(r2)
        return (0);
   1239c:	0005883a 	mov	r2,zero
   123a0:	00001d06 	br	12418 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   123a4:	d0a73403 	ldbu	r2,-25392(gp)
   123a8:	10803fcc 	andi	r2,r2,255
   123ac:	10000526 	beq	r2,zero,123c4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   123b0:	e0bfff17 	ldw	r2,-4(fp)
   123b4:	00c00444 	movi	r3,17
   123b8:	10c00005 	stb	r3,0(r2)
        return (0);
   123bc:	0005883a 	mov	r2,zero
   123c0:	00001506 	br	12418 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   123c4:	0005303a 	rdctl	r2,status
   123c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   123cc:	e0fffb17 	ldw	r3,-20(fp)
   123d0:	00bfff84 	movi	r2,-2
   123d4:	1884703a 	and	r2,r3,r2
   123d8:	1001703a 	wrctl	status,r2
  
  return context;
   123dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   123e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   123e4:	e0bffd17 	ldw	r2,-12(fp)
   123e8:	10800504 	addi	r2,r2,20
   123ec:	100b883a 	mov	r5,r2
   123f0:	e13ffe17 	ldw	r4,-8(fp)
   123f4:	00102440 	call	10244 <OS_StrCopy>
   123f8:	e0bffa05 	stb	r2,-24(fp)
   123fc:	e0bff917 	ldw	r2,-28(fp)
   12400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12404:	e0bffc17 	ldw	r2,-16(fp)
   12408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1240c:	e0bfff17 	ldw	r2,-4(fp)
   12410:	10000005 	stb	zero,0(r2)
    return (len);
   12414:	e0bffa03 	ldbu	r2,-24(fp)
}
   12418:	e037883a 	mov	sp,fp
   1241c:	dfc00117 	ldw	ra,4(sp)
   12420:	df000017 	ldw	fp,0(sp)
   12424:	dec00204 	addi	sp,sp,8
   12428:	f800283a 	ret

0001242c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1242c:	defff604 	addi	sp,sp,-40
   12430:	dfc00915 	stw	ra,36(sp)
   12434:	df000815 	stw	fp,32(sp)
   12438:	df000804 	addi	fp,sp,32
   1243c:	e13ffd15 	stw	r4,-12(fp)
   12440:	e17ffe15 	stw	r5,-8(fp)
   12444:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1244c:	e0bfff17 	ldw	r2,-4(fp)
   12450:	10003526 	beq	r2,zero,12528 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   12454:	e0bffd17 	ldw	r2,-12(fp)
   12458:	1000041e 	bne	r2,zero,1246c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1245c:	e0bfff17 	ldw	r2,-4(fp)
   12460:	00c01804 	movi	r3,96
   12464:	10c00005 	stb	r3,0(r2)
        return;
   12468:	00003006 	br	1252c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1246c:	e0bffe17 	ldw	r2,-8(fp)
   12470:	1000041e 	bne	r2,zero,12484 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   12474:	e0bfff17 	ldw	r2,-4(fp)
   12478:	00c00304 	movi	r3,12
   1247c:	10c00005 	stb	r3,0(r2)
        return;
   12480:	00002a06 	br	1252c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   12484:	d0a73403 	ldbu	r2,-25392(gp)
   12488:	10803fcc 	andi	r2,r2,255
   1248c:	10000426 	beq	r2,zero,124a0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   12490:	e0bfff17 	ldw	r2,-4(fp)
   12494:	00c00484 	movi	r3,18
   12498:	10c00005 	stb	r3,0(r2)
        return;
   1249c:	00002306 	br	1252c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124a0:	0005303a 	rdctl	r2,status
   124a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124a8:	e0fffc17 	ldw	r3,-16(fp)
   124ac:	00bfff84 	movi	r2,-2
   124b0:	1884703a 	and	r2,r3,r2
   124b4:	1001703a 	wrctl	status,r2
  
  return context;
   124b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   124bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   124c0:	e13ffe17 	ldw	r4,-8(fp)
   124c4:	00102b80 	call	102b8 <OS_StrLen>
   124c8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   124cc:	e0bffa03 	ldbu	r2,-24(fp)
   124d0:	10800830 	cmpltui	r2,r2,32
   124d4:	1000081e 	bne	r2,zero,124f8 <OSMemNameSet+0xcc>
   124d8:	e0bff817 	ldw	r2,-32(fp)
   124dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   124e0:	e0bff917 	ldw	r2,-28(fp)
   124e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   124e8:	e0bfff17 	ldw	r2,-4(fp)
   124ec:	00c018c4 	movi	r3,99
   124f0:	10c00005 	stb	r3,0(r2)
        return;
   124f4:	00000d06 	br	1252c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   124f8:	e0bffd17 	ldw	r2,-12(fp)
   124fc:	10800504 	addi	r2,r2,20
   12500:	e17ffe17 	ldw	r5,-8(fp)
   12504:	1009883a 	mov	r4,r2
   12508:	00102440 	call	10244 <OS_StrCopy>
   1250c:	e0bff817 	ldw	r2,-32(fp)
   12510:	e0bffb15 	stw	r2,-20(fp)
   12514:	e0bffb17 	ldw	r2,-20(fp)
   12518:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1251c:	e0bfff17 	ldw	r2,-4(fp)
   12520:	10000005 	stb	zero,0(r2)
   12524:	00000106 	br	1252c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   12528:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1252c:	e037883a 	mov	sp,fp
   12530:	dfc00117 	ldw	ra,4(sp)
   12534:	df000017 	ldw	fp,0(sp)
   12538:	dec00204 	addi	sp,sp,8
   1253c:	f800283a 	ret

00012540 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   12540:	defff904 	addi	sp,sp,-28
   12544:	df000615 	stw	fp,24(sp)
   12548:	df000604 	addi	fp,sp,24
   1254c:	e13ffe15 	stw	r4,-8(fp)
   12550:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12554:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12558:	e0bffe17 	ldw	r2,-8(fp)
   1255c:	1000021e 	bne	r2,zero,12568 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12560:	00801804 	movi	r2,96
   12564:	00002806 	br	12608 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   12568:	e0bfff17 	ldw	r2,-4(fp)
   1256c:	1000021e 	bne	r2,zero,12578 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   12570:	008017c4 	movi	r2,95
   12574:	00002406 	br	12608 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12578:	0005303a 	rdctl	r2,status
   1257c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12580:	e0fffd17 	ldw	r3,-12(fp)
   12584:	00bfff84 	movi	r2,-2
   12588:	1884703a 	and	r2,r3,r2
   1258c:	1001703a 	wrctl	status,r2
  
  return context;
   12590:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12594:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   12598:	e0bffe17 	ldw	r2,-8(fp)
   1259c:	10c00417 	ldw	r3,16(r2)
   125a0:	e0bffe17 	ldw	r2,-8(fp)
   125a4:	10800317 	ldw	r2,12(r2)
   125a8:	18800636 	bltu	r3,r2,125c4 <OSMemPut+0x84>
   125ac:	e0bffa17 	ldw	r2,-24(fp)
   125b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125b4:	e0bffb17 	ldw	r2,-20(fp)
   125b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   125bc:	00801784 	movi	r2,94
   125c0:	00001106 	br	12608 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   125c4:	e0bffe17 	ldw	r2,-8(fp)
   125c8:	10c00117 	ldw	r3,4(r2)
   125cc:	e0bfff17 	ldw	r2,-4(fp)
   125d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   125d4:	e0bffe17 	ldw	r2,-8(fp)
   125d8:	e0ffff17 	ldw	r3,-4(fp)
   125dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   125e0:	e0bffe17 	ldw	r2,-8(fp)
   125e4:	10800417 	ldw	r2,16(r2)
   125e8:	10c00044 	addi	r3,r2,1
   125ec:	e0bffe17 	ldw	r2,-8(fp)
   125f0:	10c00415 	stw	r3,16(r2)
   125f4:	e0bffa17 	ldw	r2,-24(fp)
   125f8:	e0bffc15 	stw	r2,-16(fp)
   125fc:	e0bffc17 	ldw	r2,-16(fp)
   12600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   12604:	0005883a 	mov	r2,zero
}
   12608:	e037883a 	mov	sp,fp
   1260c:	df000017 	ldw	fp,0(sp)
   12610:	dec00104 	addi	sp,sp,4
   12614:	f800283a 	ret

00012618 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   12618:	defffa04 	addi	sp,sp,-24
   1261c:	df000515 	stw	fp,20(sp)
   12620:	df000504 	addi	fp,sp,20
   12624:	e13ffe15 	stw	r4,-8(fp)
   12628:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1262c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   12630:	e0bffe17 	ldw	r2,-8(fp)
   12634:	1000021e 	bne	r2,zero,12640 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   12638:	00801804 	movi	r2,96
   1263c:	00002c06 	br	126f0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   12640:	e0bfff17 	ldw	r2,-4(fp)
   12644:	1000021e 	bne	r2,zero,12650 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   12648:	00801844 	movi	r2,97
   1264c:	00002806 	br	126f0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12650:	0005303a 	rdctl	r2,status
   12654:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12658:	e0fffc17 	ldw	r3,-16(fp)
   1265c:	00bfff84 	movi	r2,-2
   12660:	1884703a 	and	r2,r3,r2
   12664:	1001703a 	wrctl	status,r2
  
  return context;
   12668:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1266c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   12670:	e0bffe17 	ldw	r2,-8(fp)
   12674:	10c00017 	ldw	r3,0(r2)
   12678:	e0bfff17 	ldw	r2,-4(fp)
   1267c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   12680:	e0bffe17 	ldw	r2,-8(fp)
   12684:	10c00117 	ldw	r3,4(r2)
   12688:	e0bfff17 	ldw	r2,-4(fp)
   1268c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   12690:	e0bffe17 	ldw	r2,-8(fp)
   12694:	10c00217 	ldw	r3,8(r2)
   12698:	e0bfff17 	ldw	r2,-4(fp)
   1269c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   126a0:	e0bffe17 	ldw	r2,-8(fp)
   126a4:	10c00317 	ldw	r3,12(r2)
   126a8:	e0bfff17 	ldw	r2,-4(fp)
   126ac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   126b0:	e0bffe17 	ldw	r2,-8(fp)
   126b4:	10c00417 	ldw	r3,16(r2)
   126b8:	e0bfff17 	ldw	r2,-4(fp)
   126bc:	10c00415 	stw	r3,16(r2)
   126c0:	e0bffb17 	ldw	r2,-20(fp)
   126c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126c8:	e0bffd17 	ldw	r2,-12(fp)
   126cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   126d0:	e0bfff17 	ldw	r2,-4(fp)
   126d4:	10c00317 	ldw	r3,12(r2)
   126d8:	e0bfff17 	ldw	r2,-4(fp)
   126dc:	10800417 	ldw	r2,16(r2)
   126e0:	1887c83a 	sub	r3,r3,r2
   126e4:	e0bfff17 	ldw	r2,-4(fp)
   126e8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   126ec:	0005883a 	mov	r2,zero
}
   126f0:	e037883a 	mov	sp,fp
   126f4:	df000017 	ldw	fp,0(sp)
   126f8:	dec00104 	addi	sp,sp,4
   126fc:	f800283a 	ret

00012700 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   12700:	defffc04 	addi	sp,sp,-16
   12704:	dfc00315 	stw	ra,12(sp)
   12708:	df000215 	stw	fp,8(sp)
   1270c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   12710:	01430c04 	movi	r5,3120
   12714:	010000b4 	movhi	r4,2
   12718:	210b0304 	addi	r4,r4,11276
   1271c:	00100440 	call	10044 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   12720:	008000b4 	movhi	r2,2
   12724:	108b0304 	addi	r2,r2,11276
   12728:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1272c:	e03fff0d 	sth	zero,-4(fp)
   12730:	00001606 	br	1278c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   12734:	e0bfff0b 	ldhu	r2,-4(fp)
   12738:	10800044 	addi	r2,r2,1
   1273c:	01400d04 	movi	r5,52
   12740:	1009883a 	mov	r4,r2
   12744:	0000bc00 	call	bc0 <__mulsi3>
   12748:	1007883a 	mov	r3,r2
   1274c:	008000b4 	movhi	r2,2
   12750:	108b0304 	addi	r2,r2,11276
   12754:	1887883a 	add	r3,r3,r2
   12758:	e0bffe17 	ldw	r2,-8(fp)
   1275c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   12760:	e0bffe17 	ldw	r2,-8(fp)
   12764:	00c00fc4 	movi	r3,63
   12768:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1276c:	e0bffe17 	ldw	r2,-8(fp)
   12770:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   12774:	e0bffe17 	ldw	r2,-8(fp)
   12778:	10800d04 	addi	r2,r2,52
   1277c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   12780:	e0bfff0b 	ldhu	r2,-4(fp)
   12784:	10800044 	addi	r2,r2,1
   12788:	e0bfff0d 	sth	r2,-4(fp)
   1278c:	e0bfff0b 	ldhu	r2,-4(fp)
   12790:	10800ef0 	cmpltui	r2,r2,59
   12794:	103fe71e 	bne	r2,zero,12734 <__alt_data_end+0xfffe19f4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   12798:	e0bffe17 	ldw	r2,-8(fp)
   1279c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   127a0:	e0bffe17 	ldw	r2,-8(fp)
   127a4:	00c00fc4 	movi	r3,63
   127a8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   127ac:	e0bffe17 	ldw	r2,-8(fp)
   127b0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   127b4:	008000b4 	movhi	r2,2
   127b8:	108b0304 	addi	r2,r2,11276
   127bc:	d0a72f15 	stw	r2,-25412(gp)
#endif
}
   127c0:	0001883a 	nop
   127c4:	e037883a 	mov	sp,fp
   127c8:	dfc00117 	ldw	ra,4(sp)
   127cc:	df000017 	ldw	fp,0(sp)
   127d0:	dec00204 	addi	sp,sp,8
   127d4:	f800283a 	ret

000127d8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   127d8:	defff804 	addi	sp,sp,-32
   127dc:	df000715 	stw	fp,28(sp)
   127e0:	df000704 	addi	fp,sp,28
   127e4:	e13ffe15 	stw	r4,-8(fp)
   127e8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   127ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   127f0:	e0bfff17 	ldw	r2,-4(fp)
   127f4:	1000021e 	bne	r2,zero,12800 <OSQAccept+0x28>
        return ((void *)0);
   127f8:	0005883a 	mov	r2,zero
   127fc:	00004206 	br	12908 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12800:	e0bffe17 	ldw	r2,-8(fp)
   12804:	1000051e 	bne	r2,zero,1281c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   12808:	e0bfff17 	ldw	r2,-4(fp)
   1280c:	00c00104 	movi	r3,4
   12810:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12814:	0005883a 	mov	r2,zero
   12818:	00003b06 	br	12908 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1281c:	e0bffe17 	ldw	r2,-8(fp)
   12820:	10800003 	ldbu	r2,0(r2)
   12824:	10803fcc 	andi	r2,r2,255
   12828:	108000a0 	cmpeqi	r2,r2,2
   1282c:	1000051e 	bne	r2,zero,12844 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   12830:	e0bfff17 	ldw	r2,-4(fp)
   12834:	00c00044 	movi	r3,1
   12838:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1283c:	0005883a 	mov	r2,zero
   12840:	00003106 	br	12908 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12844:	0005303a 	rdctl	r2,status
   12848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1284c:	e0fffd17 	ldw	r3,-12(fp)
   12850:	00bfff84 	movi	r2,-2
   12854:	1884703a 	and	r2,r3,r2
   12858:	1001703a 	wrctl	status,r2
  
  return context;
   1285c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12860:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12864:	e0bffe17 	ldw	r2,-8(fp)
   12868:	10800117 	ldw	r2,4(r2)
   1286c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12870:	e0bffc17 	ldw	r2,-16(fp)
   12874:	1080058b 	ldhu	r2,22(r2)
   12878:	10bfffcc 	andi	r2,r2,65535
   1287c:	10001926 	beq	r2,zero,128e4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12880:	e0bffc17 	ldw	r2,-16(fp)
   12884:	10800417 	ldw	r2,16(r2)
   12888:	11000104 	addi	r4,r2,4
   1288c:	e0fffc17 	ldw	r3,-16(fp)
   12890:	19000415 	stw	r4,16(r3)
   12894:	10800017 	ldw	r2,0(r2)
   12898:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1289c:	e0bffc17 	ldw	r2,-16(fp)
   128a0:	1080058b 	ldhu	r2,22(r2)
   128a4:	10bfffc4 	addi	r2,r2,-1
   128a8:	1007883a 	mov	r3,r2
   128ac:	e0bffc17 	ldw	r2,-16(fp)
   128b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   128b4:	e0bffc17 	ldw	r2,-16(fp)
   128b8:	10c00417 	ldw	r3,16(r2)
   128bc:	e0bffc17 	ldw	r2,-16(fp)
   128c0:	10800217 	ldw	r2,8(r2)
   128c4:	1880041e 	bne	r3,r2,128d8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   128c8:	e0bffc17 	ldw	r2,-16(fp)
   128cc:	10c00117 	ldw	r3,4(r2)
   128d0:	e0bffc17 	ldw	r2,-16(fp)
   128d4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   128d8:	e0bfff17 	ldw	r2,-4(fp)
   128dc:	10000005 	stb	zero,0(r2)
   128e0:	00000406 	br	128f4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   128e4:	e0bfff17 	ldw	r2,-4(fp)
   128e8:	00c007c4 	movi	r3,31
   128ec:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   128f0:	e03ff915 	stw	zero,-28(fp)
   128f4:	e0bffa17 	ldw	r2,-24(fp)
   128f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   128fc:	e0bffb17 	ldw	r2,-20(fp)
   12900:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   12904:	e0bff917 	ldw	r2,-28(fp)
}
   12908:	e037883a 	mov	sp,fp
   1290c:	df000017 	ldw	fp,0(sp)
   12910:	dec00104 	addi	sp,sp,4
   12914:	f800283a 	ret

00012918 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   12918:	defff404 	addi	sp,sp,-48
   1291c:	dfc00b15 	stw	ra,44(sp)
   12920:	df000a15 	stw	fp,40(sp)
   12924:	df000a04 	addi	fp,sp,40
   12928:	e13ffe15 	stw	r4,-8(fp)
   1292c:	2805883a 	mov	r2,r5
   12930:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12934:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12938:	d0a73403 	ldbu	r2,-25392(gp)
   1293c:	10803fcc 	andi	r2,r2,255
   12940:	10000226 	beq	r2,zero,1294c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   12944:	0005883a 	mov	r2,zero
   12948:	00005906 	br	12ab0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1294c:	0005303a 	rdctl	r2,status
   12950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12954:	e0fffd17 	ldw	r3,-12(fp)
   12958:	00bfff84 	movi	r2,-2
   1295c:	1884703a 	and	r2,r3,r2
   12960:	1001703a 	wrctl	status,r2
  
  return context;
   12964:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   12968:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1296c:	d0a73317 	ldw	r2,-25396(gp)
   12970:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   12974:	d0a73317 	ldw	r2,-25396(gp)
   12978:	10000326 	beq	r2,zero,12988 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1297c:	d0a73317 	ldw	r2,-25396(gp)
   12980:	10800117 	ldw	r2,4(r2)
   12984:	d0a73315 	stw	r2,-25396(gp)
   12988:	e0bff717 	ldw	r2,-36(fp)
   1298c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12990:	e0bff817 	ldw	r2,-32(fp)
   12994:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   12998:	e0bff617 	ldw	r2,-40(fp)
   1299c:	10004326 	beq	r2,zero,12aac <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   129a0:	0005303a 	rdctl	r2,status
   129a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   129a8:	e0fff917 	ldw	r3,-28(fp)
   129ac:	00bfff84 	movi	r2,-2
   129b0:	1884703a 	and	r2,r3,r2
   129b4:	1001703a 	wrctl	status,r2
  
  return context;
   129b8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   129bc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   129c0:	d0a73117 	ldw	r2,-25404(gp)
   129c4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   129c8:	e0bffb17 	ldw	r2,-20(fp)
   129cc:	10002d26 	beq	r2,zero,12a84 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   129d0:	d0a73117 	ldw	r2,-25404(gp)
   129d4:	10800017 	ldw	r2,0(r2)
   129d8:	d0a73115 	stw	r2,-25404(gp)
   129dc:	e0bff717 	ldw	r2,-36(fp)
   129e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   129e4:	e0bffa17 	ldw	r2,-24(fp)
   129e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   129ec:	e0bffb17 	ldw	r2,-20(fp)
   129f0:	e0fffe17 	ldw	r3,-8(fp)
   129f4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   129f8:	e0bfff0b 	ldhu	r2,-4(fp)
   129fc:	1085883a 	add	r2,r2,r2
   12a00:	1085883a 	add	r2,r2,r2
   12a04:	1007883a 	mov	r3,r2
   12a08:	e0bffe17 	ldw	r2,-8(fp)
   12a0c:	10c7883a 	add	r3,r2,r3
   12a10:	e0bffb17 	ldw	r2,-20(fp)
   12a14:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   12a18:	e0bffb17 	ldw	r2,-20(fp)
   12a1c:	e0fffe17 	ldw	r3,-8(fp)
   12a20:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   12a24:	e0bffb17 	ldw	r2,-20(fp)
   12a28:	e0fffe17 	ldw	r3,-8(fp)
   12a2c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   12a30:	e0bffb17 	ldw	r2,-20(fp)
   12a34:	e0ffff0b 	ldhu	r3,-4(fp)
   12a38:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   12a3c:	e0bffb17 	ldw	r2,-20(fp)
   12a40:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   12a44:	e0bff617 	ldw	r2,-40(fp)
   12a48:	00c00084 	movi	r3,2
   12a4c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   12a50:	e0bff617 	ldw	r2,-40(fp)
   12a54:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   12a58:	e0bff617 	ldw	r2,-40(fp)
   12a5c:	e0fffb17 	ldw	r3,-20(fp)
   12a60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   12a64:	e0bff617 	ldw	r2,-40(fp)
   12a68:	00c00fc4 	movi	r3,63
   12a6c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   12a70:	e0bff617 	ldw	r2,-40(fp)
   12a74:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   12a78:	e13ff617 	ldw	r4,-40(fp)
   12a7c:	000fc640 	call	fc64 <OS_EventWaitListInit>
   12a80:	00000a06 	br	12aac <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   12a84:	d0e73317 	ldw	r3,-25396(gp)
   12a88:	e0bff617 	ldw	r2,-40(fp)
   12a8c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   12a90:	e0bff617 	ldw	r2,-40(fp)
   12a94:	d0a73315 	stw	r2,-25396(gp)
   12a98:	e0bff717 	ldw	r2,-36(fp)
   12a9c:	e0bffc15 	stw	r2,-16(fp)
   12aa0:	e0bffc17 	ldw	r2,-16(fp)
   12aa4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   12aa8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   12aac:	e0bff617 	ldw	r2,-40(fp)
}
   12ab0:	e037883a 	mov	sp,fp
   12ab4:	dfc00117 	ldw	ra,4(sp)
   12ab8:	df000017 	ldw	fp,0(sp)
   12abc:	dec00204 	addi	sp,sp,8
   12ac0:	f800283a 	ret

00012ac4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   12ac4:	defff204 	addi	sp,sp,-56
   12ac8:	dfc00d15 	stw	ra,52(sp)
   12acc:	df000c15 	stw	fp,48(sp)
   12ad0:	df000c04 	addi	fp,sp,48
   12ad4:	e13ffd15 	stw	r4,-12(fp)
   12ad8:	2805883a 	mov	r2,r5
   12adc:	e1bfff15 	stw	r6,-4(fp)
   12ae0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   12ae4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12ae8:	e0bfff17 	ldw	r2,-4(fp)
   12aec:	1000021e 	bne	r2,zero,12af8 <OSQDel+0x34>
        return (pevent);
   12af0:	e0bffd17 	ldw	r2,-12(fp)
   12af4:	00008e06 	br	12d30 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   12af8:	e0bffd17 	ldw	r2,-12(fp)
   12afc:	1000051e 	bne	r2,zero,12b14 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12b00:	e0bfff17 	ldw	r2,-4(fp)
   12b04:	00c00104 	movi	r3,4
   12b08:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12b0c:	e0bffd17 	ldw	r2,-12(fp)
   12b10:	00008706 	br	12d30 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   12b14:	e0bffd17 	ldw	r2,-12(fp)
   12b18:	10800003 	ldbu	r2,0(r2)
   12b1c:	10803fcc 	andi	r2,r2,255
   12b20:	108000a0 	cmpeqi	r2,r2,2
   12b24:	1000051e 	bne	r2,zero,12b3c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12b28:	e0bfff17 	ldw	r2,-4(fp)
   12b2c:	00c00044 	movi	r3,1
   12b30:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12b34:	e0bffd17 	ldw	r2,-12(fp)
   12b38:	00007d06 	br	12d30 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   12b3c:	d0a73403 	ldbu	r2,-25392(gp)
   12b40:	10803fcc 	andi	r2,r2,255
   12b44:	10000526 	beq	r2,zero,12b5c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   12b48:	e0bfff17 	ldw	r2,-4(fp)
   12b4c:	00c003c4 	movi	r3,15
   12b50:	10c00005 	stb	r3,0(r2)
        return (pevent);
   12b54:	e0bffd17 	ldw	r2,-12(fp)
   12b58:	00007506 	br	12d30 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12b5c:	0005303a 	rdctl	r2,status
   12b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12b64:	e0fffc17 	ldw	r3,-16(fp)
   12b68:	00bfff84 	movi	r2,-2
   12b6c:	1884703a 	and	r2,r3,r2
   12b70:	1001703a 	wrctl	status,r2
  
  return context;
   12b74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12b78:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   12b7c:	e0bffd17 	ldw	r2,-12(fp)
   12b80:	10800283 	ldbu	r2,10(r2)
   12b84:	10803fcc 	andi	r2,r2,255
   12b88:	10000326 	beq	r2,zero,12b98 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   12b8c:	00800044 	movi	r2,1
   12b90:	e0bff405 	stb	r2,-48(fp)
   12b94:	00000106 	br	12b9c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   12b98:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   12b9c:	e0bffe03 	ldbu	r2,-8(fp)
   12ba0:	10000326 	beq	r2,zero,12bb0 <OSQDel+0xec>
   12ba4:	10800060 	cmpeqi	r2,r2,1
   12ba8:	1000301e 	bne	r2,zero,12c6c <OSQDel+0x1a8>
   12bac:	00005506 	br	12d04 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   12bb0:	e0bff403 	ldbu	r2,-48(fp)
   12bb4:	10001e1e 	bne	r2,zero,12c30 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   12bb8:	e0bffd17 	ldw	r2,-12(fp)
   12bbc:	00c00fc4 	movi	r3,63
   12bc0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   12bc4:	e0bffd17 	ldw	r2,-12(fp)
   12bc8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   12bcc:	e0bffd17 	ldw	r2,-12(fp)
   12bd0:	10800117 	ldw	r2,4(r2)
   12bd4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   12bd8:	d0e73117 	ldw	r3,-25404(gp)
   12bdc:	e0bff817 	ldw	r2,-32(fp)
   12be0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   12be4:	e0bff817 	ldw	r2,-32(fp)
   12be8:	d0a73115 	stw	r2,-25404(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12bec:	e0bffd17 	ldw	r2,-12(fp)
   12bf0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   12bf4:	d0e73317 	ldw	r3,-25396(gp)
   12bf8:	e0bffd17 	ldw	r2,-12(fp)
   12bfc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   12c00:	e0bffd17 	ldw	r2,-12(fp)
   12c04:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   12c08:	e0bffd17 	ldw	r2,-12(fp)
   12c0c:	d0a73315 	stw	r2,-25396(gp)
   12c10:	e0bff617 	ldw	r2,-40(fp)
   12c14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c18:	e0bff717 	ldw	r2,-36(fp)
   12c1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   12c20:	e0bfff17 	ldw	r2,-4(fp)
   12c24:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   12c28:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   12c2c:	00003f06 	br	12d2c <OSQDel+0x268>
   12c30:	e0bff617 	ldw	r2,-40(fp)
   12c34:	e0bff915 	stw	r2,-28(fp)
   12c38:	e0bff917 	ldw	r2,-28(fp)
   12c3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   12c40:	e0bfff17 	ldw	r2,-4(fp)
   12c44:	00c01244 	movi	r3,73
   12c48:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   12c4c:	e0bffd17 	ldw	r2,-12(fp)
   12c50:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   12c54:	00003506 	br	12d2c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   12c58:	000f883a 	mov	r7,zero
   12c5c:	01800104 	movi	r6,4
   12c60:	000b883a 	mov	r5,zero
   12c64:	e13ffd17 	ldw	r4,-12(fp)
   12c68:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   12c6c:	e0bffd17 	ldw	r2,-12(fp)
   12c70:	10800283 	ldbu	r2,10(r2)
   12c74:	10803fcc 	andi	r2,r2,255
   12c78:	103ff71e 	bne	r2,zero,12c58 <__alt_data_end+0xfffe1f18>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   12c7c:	e0bffd17 	ldw	r2,-12(fp)
   12c80:	00c00fc4 	movi	r3,63
   12c84:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   12c88:	e0bffd17 	ldw	r2,-12(fp)
   12c8c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   12c90:	e0bffd17 	ldw	r2,-12(fp)
   12c94:	10800117 	ldw	r2,4(r2)
   12c98:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   12c9c:	d0e73117 	ldw	r3,-25404(gp)
   12ca0:	e0bff817 	ldw	r2,-32(fp)
   12ca4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   12ca8:	e0bff817 	ldw	r2,-32(fp)
   12cac:	d0a73115 	stw	r2,-25404(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   12cb0:	e0bffd17 	ldw	r2,-12(fp)
   12cb4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   12cb8:	d0e73317 	ldw	r3,-25396(gp)
   12cbc:	e0bffd17 	ldw	r2,-12(fp)
   12cc0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   12cc4:	e0bffd17 	ldw	r2,-12(fp)
   12cc8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   12ccc:	e0bffd17 	ldw	r2,-12(fp)
   12cd0:	d0a73315 	stw	r2,-25396(gp)
   12cd4:	e0bff617 	ldw	r2,-40(fp)
   12cd8:	e0bffa15 	stw	r2,-24(fp)
   12cdc:	e0bffa17 	ldw	r2,-24(fp)
   12ce0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   12ce4:	e0bff403 	ldbu	r2,-48(fp)
   12ce8:	10800058 	cmpnei	r2,r2,1
   12cec:	1000011e 	bne	r2,zero,12cf4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   12cf0:	00101000 	call	10100 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   12cf4:	e0bfff17 	ldw	r2,-4(fp)
   12cf8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   12cfc:	e03ff515 	stw	zero,-44(fp)
             break;
   12d00:	00000a06 	br	12d2c <OSQDel+0x268>
   12d04:	e0bff617 	ldw	r2,-40(fp)
   12d08:	e0bffb15 	stw	r2,-20(fp)
   12d0c:	e0bffb17 	ldw	r2,-20(fp)
   12d10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   12d14:	e0bfff17 	ldw	r2,-4(fp)
   12d18:	00c001c4 	movi	r3,7
   12d1c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   12d20:	e0bffd17 	ldw	r2,-12(fp)
   12d24:	e0bff515 	stw	r2,-44(fp)
             break;
   12d28:	0001883a 	nop
    }
    return (pevent_return);
   12d2c:	e0bff517 	ldw	r2,-44(fp)
}
   12d30:	e037883a 	mov	sp,fp
   12d34:	dfc00117 	ldw	ra,4(sp)
   12d38:	df000017 	ldw	fp,0(sp)
   12d3c:	dec00204 	addi	sp,sp,8
   12d40:	f800283a 	ret

00012d44 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   12d44:	defffa04 	addi	sp,sp,-24
   12d48:	df000515 	stw	fp,20(sp)
   12d4c:	df000504 	addi	fp,sp,20
   12d50:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   12d54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   12d58:	e0bfff17 	ldw	r2,-4(fp)
   12d5c:	1000021e 	bne	r2,zero,12d68 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   12d60:	00800104 	movi	r2,4
   12d64:	00002106 	br	12dec <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   12d68:	e0bfff17 	ldw	r2,-4(fp)
   12d6c:	10800003 	ldbu	r2,0(r2)
   12d70:	10803fcc 	andi	r2,r2,255
   12d74:	108000a0 	cmpeqi	r2,r2,2
   12d78:	1000021e 	bne	r2,zero,12d84 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   12d7c:	00800044 	movi	r2,1
   12d80:	00001a06 	br	12dec <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12d84:	0005303a 	rdctl	r2,status
   12d88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12d8c:	e0fffd17 	ldw	r3,-12(fp)
   12d90:	00bfff84 	movi	r2,-2
   12d94:	1884703a 	and	r2,r3,r2
   12d98:	1001703a 	wrctl	status,r2
  
  return context;
   12d9c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   12da0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	10800117 	ldw	r2,4(r2)
   12dac:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   12db0:	e0bffc17 	ldw	r2,-16(fp)
   12db4:	10c00117 	ldw	r3,4(r2)
   12db8:	e0bffc17 	ldw	r2,-16(fp)
   12dbc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   12dc0:	e0bffc17 	ldw	r2,-16(fp)
   12dc4:	10c00117 	ldw	r3,4(r2)
   12dc8:	e0bffc17 	ldw	r2,-16(fp)
   12dcc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   12dd0:	e0bffc17 	ldw	r2,-16(fp)
   12dd4:	1000058d 	sth	zero,22(r2)
   12dd8:	e0bffb17 	ldw	r2,-20(fp)
   12ddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12de0:	e0bffe17 	ldw	r2,-8(fp)
   12de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   12de8:	0005883a 	mov	r2,zero
}
   12dec:	e037883a 	mov	sp,fp
   12df0:	df000017 	ldw	fp,0(sp)
   12df4:	dec00104 	addi	sp,sp,4
   12df8:	f800283a 	ret

00012dfc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   12dfc:	defff304 	addi	sp,sp,-52
   12e00:	dfc00c15 	stw	ra,48(sp)
   12e04:	df000b15 	stw	fp,44(sp)
   12e08:	df000b04 	addi	fp,sp,44
   12e0c:	e13ffd15 	stw	r4,-12(fp)
   12e10:	2805883a 	mov	r2,r5
   12e14:	e1bfff15 	stw	r6,-4(fp)
   12e18:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12e1c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   12e20:	e0bfff17 	ldw	r2,-4(fp)
   12e24:	1000021e 	bne	r2,zero,12e30 <OSQPend+0x34>
        return ((void *)0);
   12e28:	0005883a 	mov	r2,zero
   12e2c:	00009106 	br	13074 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   12e30:	e0bffd17 	ldw	r2,-12(fp)
   12e34:	1000051e 	bne	r2,zero,12e4c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   12e38:	e0bfff17 	ldw	r2,-4(fp)
   12e3c:	00c00104 	movi	r3,4
   12e40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12e44:	0005883a 	mov	r2,zero
   12e48:	00008a06 	br	13074 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   12e4c:	e0bffd17 	ldw	r2,-12(fp)
   12e50:	10800003 	ldbu	r2,0(r2)
   12e54:	10803fcc 	andi	r2,r2,255
   12e58:	108000a0 	cmpeqi	r2,r2,2
   12e5c:	1000051e 	bne	r2,zero,12e74 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   12e60:	e0bfff17 	ldw	r2,-4(fp)
   12e64:	00c00044 	movi	r3,1
   12e68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12e6c:	0005883a 	mov	r2,zero
   12e70:	00008006 	br	13074 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   12e74:	d0a73403 	ldbu	r2,-25392(gp)
   12e78:	10803fcc 	andi	r2,r2,255
   12e7c:	10000526 	beq	r2,zero,12e94 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   12e80:	e0bfff17 	ldw	r2,-4(fp)
   12e84:	00c00084 	movi	r3,2
   12e88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12e8c:	0005883a 	mov	r2,zero
   12e90:	00007806 	br	13074 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   12e94:	d0a72603 	ldbu	r2,-25448(gp)
   12e98:	10803fcc 	andi	r2,r2,255
   12e9c:	10000526 	beq	r2,zero,12eb4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   12ea0:	e0bfff17 	ldw	r2,-4(fp)
   12ea4:	00c00344 	movi	r3,13
   12ea8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   12eac:	0005883a 	mov	r2,zero
   12eb0:	00007006 	br	13074 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12eb4:	0005303a 	rdctl	r2,status
   12eb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12ebc:	e0fffc17 	ldw	r3,-16(fp)
   12ec0:	00bfff84 	movi	r2,-2
   12ec4:	1884703a 	and	r2,r3,r2
   12ec8:	1001703a 	wrctl	status,r2
  
  return context;
   12ecc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   12ed0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   12ed4:	e0bffd17 	ldw	r2,-12(fp)
   12ed8:	10800117 	ldw	r2,4(r2)
   12edc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   12ee0:	e0bff817 	ldw	r2,-32(fp)
   12ee4:	1080058b 	ldhu	r2,22(r2)
   12ee8:	10bfffcc 	andi	r2,r2,65535
   12eec:	10001e26 	beq	r2,zero,12f68 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   12ef0:	e0bff817 	ldw	r2,-32(fp)
   12ef4:	10800417 	ldw	r2,16(r2)
   12ef8:	11000104 	addi	r4,r2,4
   12efc:	e0fff817 	ldw	r3,-32(fp)
   12f00:	19000415 	stw	r4,16(r3)
   12f04:	10800017 	ldw	r2,0(r2)
   12f08:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   12f0c:	e0bff817 	ldw	r2,-32(fp)
   12f10:	1080058b 	ldhu	r2,22(r2)
   12f14:	10bfffc4 	addi	r2,r2,-1
   12f18:	1007883a 	mov	r3,r2
   12f1c:	e0bff817 	ldw	r2,-32(fp)
   12f20:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   12f24:	e0bff817 	ldw	r2,-32(fp)
   12f28:	10c00417 	ldw	r3,16(r2)
   12f2c:	e0bff817 	ldw	r2,-32(fp)
   12f30:	10800217 	ldw	r2,8(r2)
   12f34:	1880041e 	bne	r3,r2,12f48 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   12f38:	e0bff817 	ldw	r2,-32(fp)
   12f3c:	10c00117 	ldw	r3,4(r2)
   12f40:	e0bff817 	ldw	r2,-32(fp)
   12f44:	10c00415 	stw	r3,16(r2)
   12f48:	e0bff617 	ldw	r2,-40(fp)
   12f4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f50:	e0bff717 	ldw	r2,-36(fp)
   12f54:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   12f58:	e0bfff17 	ldw	r2,-4(fp)
   12f5c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   12f60:	e0bff517 	ldw	r2,-44(fp)
   12f64:	00004306 	br	13074 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   12f68:	d0a73517 	ldw	r2,-25388(gp)
   12f6c:	d0e73517 	ldw	r3,-25388(gp)
   12f70:	18c00c03 	ldbu	r3,48(r3)
   12f74:	18c00114 	ori	r3,r3,4
   12f78:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   12f7c:	d0a73517 	ldw	r2,-25388(gp)
   12f80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   12f84:	d0a73517 	ldw	r2,-25388(gp)
   12f88:	e0fffe0b 	ldhu	r3,-8(fp)
   12f8c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   12f90:	e13ffd17 	ldw	r4,-12(fp)
   12f94:	000f84c0 	call	f84c <OS_EventTaskWait>
   12f98:	e0bff617 	ldw	r2,-40(fp)
   12f9c:	e0bffb15 	stw	r2,-20(fp)
   12fa0:	e0bffb17 	ldw	r2,-20(fp)
   12fa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   12fa8:	00101000 	call	10100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fac:	0005303a 	rdctl	r2,status
   12fb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fb4:	e0fff917 	ldw	r3,-28(fp)
   12fb8:	00bfff84 	movi	r2,-2
   12fbc:	1884703a 	and	r2,r3,r2
   12fc0:	1001703a 	wrctl	status,r2
  
  return context;
   12fc4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   12fc8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   12fcc:	d0a73517 	ldw	r2,-25388(gp)
   12fd0:	10800c43 	ldbu	r2,49(r2)
   12fd4:	10803fcc 	andi	r2,r2,255
   12fd8:	10000326 	beq	r2,zero,12fe8 <OSQPend+0x1ec>
   12fdc:	108000a0 	cmpeqi	r2,r2,2
   12fe0:	1000071e 	bne	r2,zero,13000 <OSQPend+0x204>
   12fe4:	00000b06 	br	13014 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   12fe8:	d0a73517 	ldw	r2,-25388(gp)
   12fec:	10800917 	ldw	r2,36(r2)
   12ff0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   12ff4:	e0bfff17 	ldw	r2,-4(fp)
   12ff8:	10000005 	stb	zero,0(r2)
             break;
   12ffc:	00000e06 	br	13038 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   13000:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13004:	e0bfff17 	ldw	r2,-4(fp)
   13008:	00c00384 	movi	r3,14
   1300c:	10c00005 	stb	r3,0(r2)
             break;
   13010:	00000906 	br	13038 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   13014:	d0a73517 	ldw	r2,-25388(gp)
   13018:	e17ffd17 	ldw	r5,-12(fp)
   1301c:	1009883a 	mov	r4,r2
   13020:	000faac0 	call	faac <OS_EventTaskRemove>
             pmsg = (void *)0;
   13024:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13028:	e0bfff17 	ldw	r2,-4(fp)
   1302c:	00c00284 	movi	r3,10
   13030:	10c00005 	stb	r3,0(r2)
             break;
   13034:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13038:	d0a73517 	ldw	r2,-25388(gp)
   1303c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13040:	d0a73517 	ldw	r2,-25388(gp)
   13044:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13048:	d0a73517 	ldw	r2,-25388(gp)
   1304c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13050:	d0a73517 	ldw	r2,-25388(gp)
   13054:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   13058:	d0a73517 	ldw	r2,-25388(gp)
   1305c:	10000915 	stw	zero,36(r2)
   13060:	e0bff617 	ldw	r2,-40(fp)
   13064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13068:	e0bffa17 	ldw	r2,-24(fp)
   1306c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   13070:	e0bff517 	ldw	r2,-44(fp)
}
   13074:	e037883a 	mov	sp,fp
   13078:	dfc00117 	ldw	ra,4(sp)
   1307c:	df000017 	ldw	fp,0(sp)
   13080:	dec00204 	addi	sp,sp,8
   13084:	f800283a 	ret

00013088 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13088:	defff604 	addi	sp,sp,-40
   1308c:	dfc00915 	stw	ra,36(sp)
   13090:	df000815 	stw	fp,32(sp)
   13094:	df000804 	addi	fp,sp,32
   13098:	e13ffd15 	stw	r4,-12(fp)
   1309c:	2805883a 	mov	r2,r5
   130a0:	e1bfff15 	stw	r6,-4(fp)
   130a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   130a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   130ac:	e0bfff17 	ldw	r2,-4(fp)
   130b0:	1000021e 	bne	r2,zero,130bc <OSQPendAbort+0x34>
        return (0);
   130b4:	0005883a 	mov	r2,zero
   130b8:	00004906 	br	131e0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   130bc:	e0bffd17 	ldw	r2,-12(fp)
   130c0:	1000051e 	bne	r2,zero,130d8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   130c4:	e0bfff17 	ldw	r2,-4(fp)
   130c8:	00c00104 	movi	r3,4
   130cc:	10c00005 	stb	r3,0(r2)
        return (0);
   130d0:	0005883a 	mov	r2,zero
   130d4:	00004206 	br	131e0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   130d8:	e0bffd17 	ldw	r2,-12(fp)
   130dc:	10800003 	ldbu	r2,0(r2)
   130e0:	10803fcc 	andi	r2,r2,255
   130e4:	108000a0 	cmpeqi	r2,r2,2
   130e8:	1000051e 	bne	r2,zero,13100 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   130ec:	e0bfff17 	ldw	r2,-4(fp)
   130f0:	00c00044 	movi	r3,1
   130f4:	10c00005 	stb	r3,0(r2)
        return (0);
   130f8:	0005883a 	mov	r2,zero
   130fc:	00003806 	br	131e0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13100:	0005303a 	rdctl	r2,status
   13104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13108:	e0fffc17 	ldw	r3,-16(fp)
   1310c:	00bfff84 	movi	r2,-2
   13110:	1884703a 	and	r2,r3,r2
   13114:	1001703a 	wrctl	status,r2
  
  return context;
   13118:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1311c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   13120:	e0bffd17 	ldw	r2,-12(fp)
   13124:	10800283 	ldbu	r2,10(r2)
   13128:	10803fcc 	andi	r2,r2,255
   1312c:	10002526 	beq	r2,zero,131c4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   13130:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13134:	e0bffe03 	ldbu	r2,-8(fp)
   13138:	10800060 	cmpeqi	r2,r2,1
   1313c:	10000e26 	beq	r2,zero,13178 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   13140:	00000806 	br	13164 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   13144:	01c00084 	movi	r7,2
   13148:	01800104 	movi	r6,4
   1314c:	000b883a 	mov	r5,zero
   13150:	e13ffd17 	ldw	r4,-12(fp)
   13154:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                     nbr_tasks++;
   13158:	e0bff803 	ldbu	r2,-32(fp)
   1315c:	10800044 	addi	r2,r2,1
   13160:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   13164:	e0bffd17 	ldw	r2,-12(fp)
   13168:	10800283 	ldbu	r2,10(r2)
   1316c:	10803fcc 	andi	r2,r2,255
   13170:	103ff41e 	bne	r2,zero,13144 <__alt_data_end+0xfffe2404>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13174:	00000906 	br	1319c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   13178:	01c00084 	movi	r7,2
   1317c:	01800104 	movi	r6,4
   13180:	000b883a 	mov	r5,zero
   13184:	e13ffd17 	ldw	r4,-12(fp)
   13188:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1318c:	e0bff803 	ldbu	r2,-32(fp)
   13190:	10800044 	addi	r2,r2,1
   13194:	e0bff805 	stb	r2,-32(fp)
                 break;
   13198:	0001883a 	nop
   1319c:	e0bff917 	ldw	r2,-28(fp)
   131a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131a4:	e0bffa17 	ldw	r2,-24(fp)
   131a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   131ac:	00101000 	call	10100 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	00c00384 	movi	r3,14
   131b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   131bc:	e0bff803 	ldbu	r2,-32(fp)
   131c0:	00000706 	br	131e0 <OSQPendAbort+0x158>
   131c4:	e0bff917 	ldw	r2,-28(fp)
   131c8:	e0bffb15 	stw	r2,-20(fp)
   131cc:	e0bffb17 	ldw	r2,-20(fp)
   131d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   131d4:	e0bfff17 	ldw	r2,-4(fp)
   131d8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   131dc:	0005883a 	mov	r2,zero
}
   131e0:	e037883a 	mov	sp,fp
   131e4:	dfc00117 	ldw	ra,4(sp)
   131e8:	df000017 	ldw	fp,0(sp)
   131ec:	dec00204 	addi	sp,sp,8
   131f0:	f800283a 	ret

000131f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   131f4:	defff604 	addi	sp,sp,-40
   131f8:	dfc00915 	stw	ra,36(sp)
   131fc:	df000815 	stw	fp,32(sp)
   13200:	df000804 	addi	fp,sp,32
   13204:	e13ffe15 	stw	r4,-8(fp)
   13208:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1320c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   13210:	e0bffe17 	ldw	r2,-8(fp)
   13214:	1000021e 	bne	r2,zero,13220 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13218:	00800104 	movi	r2,4
   1321c:	00004a06 	br	13348 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13220:	e0bffe17 	ldw	r2,-8(fp)
   13224:	10800003 	ldbu	r2,0(r2)
   13228:	10803fcc 	andi	r2,r2,255
   1322c:	108000a0 	cmpeqi	r2,r2,2
   13230:	1000021e 	bne	r2,zero,1323c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   13234:	00800044 	movi	r2,1
   13238:	00004306 	br	13348 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1323c:	0005303a 	rdctl	r2,status
   13240:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13244:	e0fffd17 	ldw	r3,-12(fp)
   13248:	00bfff84 	movi	r2,-2
   1324c:	1884703a 	and	r2,r3,r2
   13250:	1001703a 	wrctl	status,r2
  
  return context;
   13254:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13258:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1325c:	e0bffe17 	ldw	r2,-8(fp)
   13260:	10800283 	ldbu	r2,10(r2)
   13264:	10803fcc 	andi	r2,r2,255
   13268:	10000c26 	beq	r2,zero,1329c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1326c:	000f883a 	mov	r7,zero
   13270:	01800104 	movi	r6,4
   13274:	e17fff17 	ldw	r5,-4(fp)
   13278:	e13ffe17 	ldw	r4,-8(fp)
   1327c:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
   13280:	e0bff817 	ldw	r2,-32(fp)
   13284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13288:	e0bff917 	ldw	r2,-28(fp)
   1328c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   13290:	00101000 	call	10100 <OS_Sched>
        return (OS_ERR_NONE);
   13294:	0005883a 	mov	r2,zero
   13298:	00002b06 	br	13348 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1329c:	e0bffe17 	ldw	r2,-8(fp)
   132a0:	10800117 	ldw	r2,4(r2)
   132a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   132a8:	e0bffb17 	ldw	r2,-20(fp)
   132ac:	10c0058b 	ldhu	r3,22(r2)
   132b0:	e0bffb17 	ldw	r2,-20(fp)
   132b4:	1080050b 	ldhu	r2,20(r2)
   132b8:	18ffffcc 	andi	r3,r3,65535
   132bc:	10bfffcc 	andi	r2,r2,65535
   132c0:	18800636 	bltu	r3,r2,132dc <OSQPost+0xe8>
   132c4:	e0bff817 	ldw	r2,-32(fp)
   132c8:	e0bffa15 	stw	r2,-24(fp)
   132cc:	e0bffa17 	ldw	r2,-24(fp)
   132d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   132d4:	00800784 	movi	r2,30
   132d8:	00001b06 	br	13348 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   132dc:	e0bffb17 	ldw	r2,-20(fp)
   132e0:	10800317 	ldw	r2,12(r2)
   132e4:	11000104 	addi	r4,r2,4
   132e8:	e0fffb17 	ldw	r3,-20(fp)
   132ec:	19000315 	stw	r4,12(r3)
   132f0:	e0ffff17 	ldw	r3,-4(fp)
   132f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   132f8:	e0bffb17 	ldw	r2,-20(fp)
   132fc:	1080058b 	ldhu	r2,22(r2)
   13300:	10800044 	addi	r2,r2,1
   13304:	1007883a 	mov	r3,r2
   13308:	e0bffb17 	ldw	r2,-20(fp)
   1330c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   13310:	e0bffb17 	ldw	r2,-20(fp)
   13314:	10c00317 	ldw	r3,12(r2)
   13318:	e0bffb17 	ldw	r2,-20(fp)
   1331c:	10800217 	ldw	r2,8(r2)
   13320:	1880041e 	bne	r3,r2,13334 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   13324:	e0bffb17 	ldw	r2,-20(fp)
   13328:	10c00117 	ldw	r3,4(r2)
   1332c:	e0bffb17 	ldw	r2,-20(fp)
   13330:	10c00315 	stw	r3,12(r2)
   13334:	e0bff817 	ldw	r2,-32(fp)
   13338:	e0bffc15 	stw	r2,-16(fp)
   1333c:	e0bffc17 	ldw	r2,-16(fp)
   13340:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13344:	0005883a 	mov	r2,zero
}
   13348:	e037883a 	mov	sp,fp
   1334c:	dfc00117 	ldw	ra,4(sp)
   13350:	df000017 	ldw	fp,0(sp)
   13354:	dec00204 	addi	sp,sp,8
   13358:	f800283a 	ret

0001335c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1335c:	defff604 	addi	sp,sp,-40
   13360:	dfc00915 	stw	ra,36(sp)
   13364:	df000815 	stw	fp,32(sp)
   13368:	df000804 	addi	fp,sp,32
   1336c:	e13ffe15 	stw	r4,-8(fp)
   13370:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13374:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13378:	e0bffe17 	ldw	r2,-8(fp)
   1337c:	1000021e 	bne	r2,zero,13388 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   13380:	00800104 	movi	r2,4
   13384:	00004c06 	br	134b8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13388:	e0bffe17 	ldw	r2,-8(fp)
   1338c:	10800003 	ldbu	r2,0(r2)
   13390:	10803fcc 	andi	r2,r2,255
   13394:	108000a0 	cmpeqi	r2,r2,2
   13398:	1000021e 	bne	r2,zero,133a4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1339c:	00800044 	movi	r2,1
   133a0:	00004506 	br	134b8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133a4:	0005303a 	rdctl	r2,status
   133a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133ac:	e0fffd17 	ldw	r3,-12(fp)
   133b0:	00bfff84 	movi	r2,-2
   133b4:	1884703a 	and	r2,r3,r2
   133b8:	1001703a 	wrctl	status,r2
  
  return context;
   133bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   133c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   133c4:	e0bffe17 	ldw	r2,-8(fp)
   133c8:	10800283 	ldbu	r2,10(r2)
   133cc:	10803fcc 	andi	r2,r2,255
   133d0:	10000c26 	beq	r2,zero,13404 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   133d4:	000f883a 	mov	r7,zero
   133d8:	01800104 	movi	r6,4
   133dc:	e17fff17 	ldw	r5,-4(fp)
   133e0:	e13ffe17 	ldw	r4,-8(fp)
   133e4:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
   133e8:	e0bff817 	ldw	r2,-32(fp)
   133ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   133f0:	e0bff917 	ldw	r2,-28(fp)
   133f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   133f8:	00101000 	call	10100 <OS_Sched>
        return (OS_ERR_NONE);
   133fc:	0005883a 	mov	r2,zero
   13400:	00002d06 	br	134b8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   13404:	e0bffe17 	ldw	r2,-8(fp)
   13408:	10800117 	ldw	r2,4(r2)
   1340c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   13410:	e0bffb17 	ldw	r2,-20(fp)
   13414:	10c0058b 	ldhu	r3,22(r2)
   13418:	e0bffb17 	ldw	r2,-20(fp)
   1341c:	1080050b 	ldhu	r2,20(r2)
   13420:	18ffffcc 	andi	r3,r3,65535
   13424:	10bfffcc 	andi	r2,r2,65535
   13428:	18800636 	bltu	r3,r2,13444 <OSQPostFront+0xe8>
   1342c:	e0bff817 	ldw	r2,-32(fp)
   13430:	e0bffa15 	stw	r2,-24(fp)
   13434:	e0bffa17 	ldw	r2,-24(fp)
   13438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1343c:	00800784 	movi	r2,30
   13440:	00001d06 	br	134b8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   13444:	e0bffb17 	ldw	r2,-20(fp)
   13448:	10c00417 	ldw	r3,16(r2)
   1344c:	e0bffb17 	ldw	r2,-20(fp)
   13450:	10800117 	ldw	r2,4(r2)
   13454:	1880041e 	bne	r3,r2,13468 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   13458:	e0bffb17 	ldw	r2,-20(fp)
   1345c:	10c00217 	ldw	r3,8(r2)
   13460:	e0bffb17 	ldw	r2,-20(fp)
   13464:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   13468:	e0bffb17 	ldw	r2,-20(fp)
   1346c:	10800417 	ldw	r2,16(r2)
   13470:	10ffff04 	addi	r3,r2,-4
   13474:	e0bffb17 	ldw	r2,-20(fp)
   13478:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1347c:	e0bffb17 	ldw	r2,-20(fp)
   13480:	10800417 	ldw	r2,16(r2)
   13484:	e0ffff17 	ldw	r3,-4(fp)
   13488:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1348c:	e0bffb17 	ldw	r2,-20(fp)
   13490:	1080058b 	ldhu	r2,22(r2)
   13494:	10800044 	addi	r2,r2,1
   13498:	1007883a 	mov	r3,r2
   1349c:	e0bffb17 	ldw	r2,-20(fp)
   134a0:	10c0058d 	sth	r3,22(r2)
   134a4:	e0bff817 	ldw	r2,-32(fp)
   134a8:	e0bffc15 	stw	r2,-16(fp)
   134ac:	e0bffc17 	ldw	r2,-16(fp)
   134b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   134b4:	0005883a 	mov	r2,zero
}
   134b8:	e037883a 	mov	sp,fp
   134bc:	dfc00117 	ldw	ra,4(sp)
   134c0:	df000017 	ldw	fp,0(sp)
   134c4:	dec00204 	addi	sp,sp,8
   134c8:	f800283a 	ret

000134cc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   134cc:	defff504 	addi	sp,sp,-44
   134d0:	dfc00a15 	stw	ra,40(sp)
   134d4:	df000915 	stw	fp,36(sp)
   134d8:	df000904 	addi	fp,sp,36
   134dc:	e13ffd15 	stw	r4,-12(fp)
   134e0:	e17ffe15 	stw	r5,-8(fp)
   134e4:	3005883a 	mov	r2,r6
   134e8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   134ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   134f0:	e0bffd17 	ldw	r2,-12(fp)
   134f4:	1000021e 	bne	r2,zero,13500 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   134f8:	00800104 	movi	r2,4
   134fc:	00007106 	br	136c4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   13500:	e0bffd17 	ldw	r2,-12(fp)
   13504:	10800003 	ldbu	r2,0(r2)
   13508:	10803fcc 	andi	r2,r2,255
   1350c:	108000a0 	cmpeqi	r2,r2,2
   13510:	1000021e 	bne	r2,zero,1351c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   13514:	00800044 	movi	r2,1
   13518:	00006a06 	br	136c4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1351c:	0005303a 	rdctl	r2,status
   13520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13524:	e0fffc17 	ldw	r3,-16(fp)
   13528:	00bfff84 	movi	r2,-2
   1352c:	1884703a 	and	r2,r3,r2
   13530:	1001703a 	wrctl	status,r2
  
  return context;
   13534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13538:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1353c:	e0bffd17 	ldw	r2,-12(fp)
   13540:	10800283 	ldbu	r2,10(r2)
   13544:	10803fcc 	andi	r2,r2,255
   13548:	10001d26 	beq	r2,zero,135c0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1354c:	e0bfff03 	ldbu	r2,-4(fp)
   13550:	1080004c 	andi	r2,r2,1
   13554:	10000b26 	beq	r2,zero,13584 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13558:	00000506 	br	13570 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1355c:	000f883a 	mov	r7,zero
   13560:	01800104 	movi	r6,4
   13564:	e17ffe17 	ldw	r5,-8(fp)
   13568:	e13ffd17 	ldw	r4,-12(fp)
   1356c:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   13570:	e0bffd17 	ldw	r2,-12(fp)
   13574:	10800283 	ldbu	r2,10(r2)
   13578:	10803fcc 	andi	r2,r2,255
   1357c:	103ff71e 	bne	r2,zero,1355c <__alt_data_end+0xfffe281c>
   13580:	00000506 	br	13598 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   13584:	000f883a 	mov	r7,zero
   13588:	01800104 	movi	r6,4
   1358c:	e17ffe17 	ldw	r5,-8(fp)
   13590:	e13ffd17 	ldw	r4,-12(fp)
   13594:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
   13598:	e0bff717 	ldw	r2,-36(fp)
   1359c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135a0:	e0bff817 	ldw	r2,-32(fp)
   135a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   135a8:	e0bfff03 	ldbu	r2,-4(fp)
   135ac:	1080010c 	andi	r2,r2,4
   135b0:	1000011e 	bne	r2,zero,135b8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   135b4:	00101000 	call	10100 <OS_Sched>
        }
        return (OS_ERR_NONE);
   135b8:	0005883a 	mov	r2,zero
   135bc:	00004106 	br	136c4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   135c0:	e0bffd17 	ldw	r2,-12(fp)
   135c4:	10800117 	ldw	r2,4(r2)
   135c8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   135cc:	e0bffa17 	ldw	r2,-24(fp)
   135d0:	10c0058b 	ldhu	r3,22(r2)
   135d4:	e0bffa17 	ldw	r2,-24(fp)
   135d8:	1080050b 	ldhu	r2,20(r2)
   135dc:	18ffffcc 	andi	r3,r3,65535
   135e0:	10bfffcc 	andi	r2,r2,65535
   135e4:	18800636 	bltu	r3,r2,13600 <OSQPostOpt+0x134>
   135e8:	e0bff717 	ldw	r2,-36(fp)
   135ec:	e0bff915 	stw	r2,-28(fp)
   135f0:	e0bff917 	ldw	r2,-28(fp)
   135f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   135f8:	00800784 	movi	r2,30
   135fc:	00003106 	br	136c4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   13600:	e0bfff03 	ldbu	r2,-4(fp)
   13604:	1080008c 	andi	r2,r2,2
   13608:	10001326 	beq	r2,zero,13658 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1360c:	e0bffa17 	ldw	r2,-24(fp)
   13610:	10c00417 	ldw	r3,16(r2)
   13614:	e0bffa17 	ldw	r2,-24(fp)
   13618:	10800117 	ldw	r2,4(r2)
   1361c:	1880041e 	bne	r3,r2,13630 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   13620:	e0bffa17 	ldw	r2,-24(fp)
   13624:	10c00217 	ldw	r3,8(r2)
   13628:	e0bffa17 	ldw	r2,-24(fp)
   1362c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   13630:	e0bffa17 	ldw	r2,-24(fp)
   13634:	10800417 	ldw	r2,16(r2)
   13638:	10ffff04 	addi	r3,r2,-4
   1363c:	e0bffa17 	ldw	r2,-24(fp)
   13640:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   13644:	e0bffa17 	ldw	r2,-24(fp)
   13648:	10800417 	ldw	r2,16(r2)
   1364c:	e0fffe17 	ldw	r3,-8(fp)
   13650:	10c00015 	stw	r3,0(r2)
   13654:	00001006 	br	13698 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   13658:	e0bffa17 	ldw	r2,-24(fp)
   1365c:	10800317 	ldw	r2,12(r2)
   13660:	11000104 	addi	r4,r2,4
   13664:	e0fffa17 	ldw	r3,-24(fp)
   13668:	19000315 	stw	r4,12(r3)
   1366c:	e0fffe17 	ldw	r3,-8(fp)
   13670:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   13674:	e0bffa17 	ldw	r2,-24(fp)
   13678:	10c00317 	ldw	r3,12(r2)
   1367c:	e0bffa17 	ldw	r2,-24(fp)
   13680:	10800217 	ldw	r2,8(r2)
   13684:	1880041e 	bne	r3,r2,13698 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   13688:	e0bffa17 	ldw	r2,-24(fp)
   1368c:	10c00117 	ldw	r3,4(r2)
   13690:	e0bffa17 	ldw	r2,-24(fp)
   13694:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   13698:	e0bffa17 	ldw	r2,-24(fp)
   1369c:	1080058b 	ldhu	r2,22(r2)
   136a0:	10800044 	addi	r2,r2,1
   136a4:	1007883a 	mov	r3,r2
   136a8:	e0bffa17 	ldw	r2,-24(fp)
   136ac:	10c0058d 	sth	r3,22(r2)
   136b0:	e0bff717 	ldw	r2,-36(fp)
   136b4:	e0bffb15 	stw	r2,-20(fp)
   136b8:	e0bffb17 	ldw	r2,-20(fp)
   136bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   136c0:	0005883a 	mov	r2,zero
}
   136c4:	e037883a 	mov	sp,fp
   136c8:	dfc00117 	ldw	ra,4(sp)
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00204 	addi	sp,sp,8
   136d4:	f800283a 	ret

000136d8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   136d8:	defff604 	addi	sp,sp,-40
   136dc:	df000915 	stw	fp,36(sp)
   136e0:	df000904 	addi	fp,sp,36
   136e4:	e13ffe15 	stw	r4,-8(fp)
   136e8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   136ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   136f0:	e0bffe17 	ldw	r2,-8(fp)
   136f4:	1000021e 	bne	r2,zero,13700 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   136f8:	00800104 	movi	r2,4
   136fc:	00004906 	br	13824 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   13700:	e0bfff17 	ldw	r2,-4(fp)
   13704:	1000021e 	bne	r2,zero,13710 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   13708:	00800244 	movi	r2,9
   1370c:	00004506 	br	13824 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   13710:	e0bffe17 	ldw	r2,-8(fp)
   13714:	10800003 	ldbu	r2,0(r2)
   13718:	10803fcc 	andi	r2,r2,255
   1371c:	108000a0 	cmpeqi	r2,r2,2
   13720:	1000021e 	bne	r2,zero,1372c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   13724:	00800044 	movi	r2,1
   13728:	00003e06 	br	13824 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1372c:	0005303a 	rdctl	r2,status
   13730:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13734:	e0fffd17 	ldw	r3,-12(fp)
   13738:	00bfff84 	movi	r2,-2
   1373c:	1884703a 	and	r2,r3,r2
   13740:	1001703a 	wrctl	status,r2
  
  return context;
   13744:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   13748:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1374c:	e0bffe17 	ldw	r2,-8(fp)
   13750:	10c00283 	ldbu	r3,10(r2)
   13754:	e0bfff17 	ldw	r2,-4(fp)
   13758:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1375c:	e0bffe17 	ldw	r2,-8(fp)
   13760:	108002c4 	addi	r2,r2,11
   13764:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   13768:	e0bfff17 	ldw	r2,-4(fp)
   1376c:	10800204 	addi	r2,r2,8
   13770:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   13774:	e03ff705 	stb	zero,-36(fp)
   13778:	00000b06 	br	137a8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1377c:	e0bff917 	ldw	r2,-28(fp)
   13780:	10c00044 	addi	r3,r2,1
   13784:	e0fff915 	stw	r3,-28(fp)
   13788:	e0fff817 	ldw	r3,-32(fp)
   1378c:	19000044 	addi	r4,r3,1
   13790:	e13ff815 	stw	r4,-32(fp)
   13794:	18c00003 	ldbu	r3,0(r3)
   13798:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1379c:	e0bff703 	ldbu	r2,-36(fp)
   137a0:	10800044 	addi	r2,r2,1
   137a4:	e0bff705 	stb	r2,-36(fp)
   137a8:	e0bff703 	ldbu	r2,-36(fp)
   137ac:	108000f0 	cmpltui	r2,r2,3
   137b0:	103ff21e 	bne	r2,zero,1377c <__alt_data_end+0xfffe2a3c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   137b4:	e0bffe17 	ldw	r2,-8(fp)
   137b8:	10800117 	ldw	r2,4(r2)
   137bc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   137c0:	e0bffc17 	ldw	r2,-16(fp)
   137c4:	1080058b 	ldhu	r2,22(r2)
   137c8:	10bfffcc 	andi	r2,r2,65535
   137cc:	10000626 	beq	r2,zero,137e8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   137d0:	e0bffc17 	ldw	r2,-16(fp)
   137d4:	10800417 	ldw	r2,16(r2)
   137d8:	10c00017 	ldw	r3,0(r2)
   137dc:	e0bfff17 	ldw	r2,-4(fp)
   137e0:	10c00015 	stw	r3,0(r2)
   137e4:	00000206 	br	137f0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   137e8:	e0bfff17 	ldw	r2,-4(fp)
   137ec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   137f0:	e0bffc17 	ldw	r2,-16(fp)
   137f4:	10c0058b 	ldhu	r3,22(r2)
   137f8:	e0bfff17 	ldw	r2,-4(fp)
   137fc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   13800:	e0bffc17 	ldw	r2,-16(fp)
   13804:	10c0050b 	ldhu	r3,20(r2)
   13808:	e0bfff17 	ldw	r2,-4(fp)
   1380c:	10c0018d 	sth	r3,6(r2)
   13810:	e0bffa17 	ldw	r2,-24(fp)
   13814:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13818:	e0bffb17 	ldw	r2,-20(fp)
   1381c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   13820:	0005883a 	mov	r2,zero
}
   13824:	e037883a 	mov	sp,fp
   13828:	df000017 	ldw	fp,0(sp)
   1382c:	dec00104 	addi	sp,sp,4
   13830:	f800283a 	ret

00013834 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   13834:	defffb04 	addi	sp,sp,-20
   13838:	dfc00415 	stw	ra,16(sp)
   1383c:	df000315 	stw	fp,12(sp)
   13840:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   13844:	01407804 	movi	r5,480
   13848:	010000b4 	movhi	r4,2
   1384c:	21100f04 	addi	r4,r4,16444
   13850:	00100440 	call	10044 <OS_MemClr>
    pq1 = &OSQTbl[0];
   13854:	008000b4 	movhi	r2,2
   13858:	10900f04 	addi	r2,r2,16444
   1385c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   13860:	008000b4 	movhi	r2,2
   13864:	10901504 	addi	r2,r2,16468
   13868:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1386c:	e03ffd0d 	sth	zero,-12(fp)
   13870:	00000c06 	br	138a4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   13874:	e0bffe17 	ldw	r2,-8(fp)
   13878:	e0ffff17 	ldw	r3,-4(fp)
   1387c:	10c00015 	stw	r3,0(r2)
        pq1++;
   13880:	e0bffe17 	ldw	r2,-8(fp)
   13884:	10800604 	addi	r2,r2,24
   13888:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1388c:	e0bfff17 	ldw	r2,-4(fp)
   13890:	10800604 	addi	r2,r2,24
   13894:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   13898:	e0bffd0b 	ldhu	r2,-12(fp)
   1389c:	10800044 	addi	r2,r2,1
   138a0:	e0bffd0d 	sth	r2,-12(fp)
   138a4:	e0bffd0b 	ldhu	r2,-12(fp)
   138a8:	108004f0 	cmpltui	r2,r2,19
   138ac:	103ff11e 	bne	r2,zero,13874 <__alt_data_end+0xfffe2b34>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   138b0:	e0bffe17 	ldw	r2,-8(fp)
   138b4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   138b8:	008000b4 	movhi	r2,2
   138bc:	10900f04 	addi	r2,r2,16444
   138c0:	d0a73115 	stw	r2,-25404(gp)
#endif
}
   138c4:	0001883a 	nop
   138c8:	e037883a 	mov	sp,fp
   138cc:	dfc00117 	ldw	ra,4(sp)
   138d0:	df000017 	ldw	fp,0(sp)
   138d4:	dec00204 	addi	sp,sp,8
   138d8:	f800283a 	ret

000138dc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   138dc:	defffa04 	addi	sp,sp,-24
   138e0:	df000515 	stw	fp,20(sp)
   138e4:	df000504 	addi	fp,sp,20
   138e8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   138ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   138f0:	e0bfff17 	ldw	r2,-4(fp)
   138f4:	1000021e 	bne	r2,zero,13900 <OSSemAccept+0x24>
        return (0);
   138f8:	0005883a 	mov	r2,zero
   138fc:	00001f06 	br	1397c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13900:	e0bfff17 	ldw	r2,-4(fp)
   13904:	10800003 	ldbu	r2,0(r2)
   13908:	10803fcc 	andi	r2,r2,255
   1390c:	108000e0 	cmpeqi	r2,r2,3
   13910:	1000021e 	bne	r2,zero,1391c <OSSemAccept+0x40>
        return (0);
   13914:	0005883a 	mov	r2,zero
   13918:	00001806 	br	1397c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1391c:	0005303a 	rdctl	r2,status
   13920:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13924:	e0fffe17 	ldw	r3,-8(fp)
   13928:	00bfff84 	movi	r2,-2
   1392c:	1884703a 	and	r2,r3,r2
   13930:	1001703a 	wrctl	status,r2
  
  return context;
   13934:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   13938:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1393c:	e0bfff17 	ldw	r2,-4(fp)
   13940:	1080020b 	ldhu	r2,8(r2)
   13944:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   13948:	e0bffd0b 	ldhu	r2,-12(fp)
   1394c:	10000626 	beq	r2,zero,13968 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   13950:	e0bfff17 	ldw	r2,-4(fp)
   13954:	1080020b 	ldhu	r2,8(r2)
   13958:	10bfffc4 	addi	r2,r2,-1
   1395c:	1007883a 	mov	r3,r2
   13960:	e0bfff17 	ldw	r2,-4(fp)
   13964:	10c0020d 	sth	r3,8(r2)
   13968:	e0bffb17 	ldw	r2,-20(fp)
   1396c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13970:	e0bffc17 	ldw	r2,-16(fp)
   13974:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   13978:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1397c:	e037883a 	mov	sp,fp
   13980:	df000017 	ldw	fp,0(sp)
   13984:	dec00104 	addi	sp,sp,4
   13988:	f800283a 	ret

0001398c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1398c:	defff904 	addi	sp,sp,-28
   13990:	dfc00615 	stw	ra,24(sp)
   13994:	df000515 	stw	fp,20(sp)
   13998:	df000504 	addi	fp,sp,20
   1399c:	2005883a 	mov	r2,r4
   139a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   139a4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   139a8:	d0a73403 	ldbu	r2,-25392(gp)
   139ac:	10803fcc 	andi	r2,r2,255
   139b0:	10000226 	beq	r2,zero,139bc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   139b4:	0005883a 	mov	r2,zero
   139b8:	00002506 	br	13a50 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   139bc:	0005303a 	rdctl	r2,status
   139c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139c4:	e0fffe17 	ldw	r3,-8(fp)
   139c8:	00bfff84 	movi	r2,-2
   139cc:	1884703a 	and	r2,r3,r2
   139d0:	1001703a 	wrctl	status,r2
  
  return context;
   139d4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   139d8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   139dc:	d0a73317 	ldw	r2,-25396(gp)
   139e0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   139e4:	d0a73317 	ldw	r2,-25396(gp)
   139e8:	10000326 	beq	r2,zero,139f8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   139ec:	d0a73317 	ldw	r2,-25396(gp)
   139f0:	10800117 	ldw	r2,4(r2)
   139f4:	d0a73315 	stw	r2,-25396(gp)
   139f8:	e0bffb17 	ldw	r2,-20(fp)
   139fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13a00:	e0bffc17 	ldw	r2,-16(fp)
   13a04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   13a08:	e0bffd17 	ldw	r2,-12(fp)
   13a0c:	10000f26 	beq	r2,zero,13a4c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   13a10:	e0bffd17 	ldw	r2,-12(fp)
   13a14:	00c000c4 	movi	r3,3
   13a18:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   13a1c:	e0bffd17 	ldw	r2,-12(fp)
   13a20:	e0ffff0b 	ldhu	r3,-4(fp)
   13a24:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   13a28:	e0bffd17 	ldw	r2,-12(fp)
   13a2c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   13a30:	e0bffd17 	ldw	r2,-12(fp)
   13a34:	00c00fc4 	movi	r3,63
   13a38:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   13a3c:	e0bffd17 	ldw	r2,-12(fp)
   13a40:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   13a44:	e13ffd17 	ldw	r4,-12(fp)
   13a48:	000fc640 	call	fc64 <OS_EventWaitListInit>
    }
    return (pevent);
   13a4c:	e0bffd17 	ldw	r2,-12(fp)
}
   13a50:	e037883a 	mov	sp,fp
   13a54:	dfc00117 	ldw	ra,4(sp)
   13a58:	df000017 	ldw	fp,0(sp)
   13a5c:	dec00204 	addi	sp,sp,8
   13a60:	f800283a 	ret

00013a64 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13a64:	defff304 	addi	sp,sp,-52
   13a68:	dfc00c15 	stw	ra,48(sp)
   13a6c:	df000b15 	stw	fp,44(sp)
   13a70:	df000b04 	addi	fp,sp,44
   13a74:	e13ffd15 	stw	r4,-12(fp)
   13a78:	2805883a 	mov	r2,r5
   13a7c:	e1bfff15 	stw	r6,-4(fp)
   13a80:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   13a84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	1000021e 	bne	r2,zero,13a98 <OSSemDel+0x34>
        return (pevent);
   13a90:	e0bffd17 	ldw	r2,-12(fp)
   13a94:	00007e06 	br	13c90 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   13a98:	e0bffd17 	ldw	r2,-12(fp)
   13a9c:	1000051e 	bne	r2,zero,13ab4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13aa0:	e0bfff17 	ldw	r2,-4(fp)
   13aa4:	00c00104 	movi	r3,4
   13aa8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13aac:	e0bffd17 	ldw	r2,-12(fp)
   13ab0:	00007706 	br	13c90 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   13ab4:	e0bffd17 	ldw	r2,-12(fp)
   13ab8:	10800003 	ldbu	r2,0(r2)
   13abc:	10803fcc 	andi	r2,r2,255
   13ac0:	108000e0 	cmpeqi	r2,r2,3
   13ac4:	1000051e 	bne	r2,zero,13adc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13ac8:	e0bfff17 	ldw	r2,-4(fp)
   13acc:	00c00044 	movi	r3,1
   13ad0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13ad4:	e0bffd17 	ldw	r2,-12(fp)
   13ad8:	00006d06 	br	13c90 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   13adc:	d0a73403 	ldbu	r2,-25392(gp)
   13ae0:	10803fcc 	andi	r2,r2,255
   13ae4:	10000526 	beq	r2,zero,13afc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   13ae8:	e0bfff17 	ldw	r2,-4(fp)
   13aec:	00c003c4 	movi	r3,15
   13af0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   13af4:	e0bffd17 	ldw	r2,-12(fp)
   13af8:	00006506 	br	13c90 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13afc:	0005303a 	rdctl	r2,status
   13b00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b04:	e0fffc17 	ldw	r3,-16(fp)
   13b08:	00bfff84 	movi	r2,-2
   13b0c:	1884703a 	and	r2,r3,r2
   13b10:	1001703a 	wrctl	status,r2
  
  return context;
   13b14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13b18:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   13b1c:	e0bffd17 	ldw	r2,-12(fp)
   13b20:	10800283 	ldbu	r2,10(r2)
   13b24:	10803fcc 	andi	r2,r2,255
   13b28:	10000326 	beq	r2,zero,13b38 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13b2c:	00800044 	movi	r2,1
   13b30:	e0bff505 	stb	r2,-44(fp)
   13b34:	00000106 	br	13b3c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13b38:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   13b3c:	e0bffe03 	ldbu	r2,-8(fp)
   13b40:	10000326 	beq	r2,zero,13b50 <OSSemDel+0xec>
   13b44:	10800060 	cmpeqi	r2,r2,1
   13b48:	1000281e 	bne	r2,zero,13bec <OSSemDel+0x188>
   13b4c:	00004506 	br	13c64 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   13b50:	e0bff503 	ldbu	r2,-44(fp)
   13b54:	1000161e 	bne	r2,zero,13bb0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   13b58:	e0bffd17 	ldw	r2,-12(fp)
   13b5c:	00c00fc4 	movi	r3,63
   13b60:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13b6c:	e0bffd17 	ldw	r2,-12(fp)
   13b70:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   13b74:	d0e73317 	ldw	r3,-25396(gp)
   13b78:	e0bffd17 	ldw	r2,-12(fp)
   13b7c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   13b80:	e0bffd17 	ldw	r2,-12(fp)
   13b84:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	d0a73315 	stw	r2,-25396(gp)
   13b90:	e0bff717 	ldw	r2,-36(fp)
   13b94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b98:	e0bff817 	ldw	r2,-32(fp)
   13b9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   13ba0:	e0bfff17 	ldw	r2,-4(fp)
   13ba4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   13ba8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   13bac:	00003706 	br	13c8c <OSSemDel+0x228>
   13bb0:	e0bff717 	ldw	r2,-36(fp)
   13bb4:	e0bff915 	stw	r2,-28(fp)
   13bb8:	e0bff917 	ldw	r2,-28(fp)
   13bbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   13bc0:	e0bfff17 	ldw	r2,-4(fp)
   13bc4:	00c01244 	movi	r3,73
   13bc8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   13bcc:	e0bffd17 	ldw	r2,-12(fp)
   13bd0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   13bd4:	00002d06 	br	13c8c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   13bd8:	000f883a 	mov	r7,zero
   13bdc:	01800044 	movi	r6,1
   13be0:	000b883a 	mov	r5,zero
   13be4:	e13ffd17 	ldw	r4,-12(fp)
   13be8:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   13bec:	e0bffd17 	ldw	r2,-12(fp)
   13bf0:	10800283 	ldbu	r2,10(r2)
   13bf4:	10803fcc 	andi	r2,r2,255
   13bf8:	103ff71e 	bne	r2,zero,13bd8 <__alt_data_end+0xfffe2e98>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   13bfc:	e0bffd17 	ldw	r2,-12(fp)
   13c00:	00c00fc4 	movi	r3,63
   13c04:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   13c08:	e0bffd17 	ldw	r2,-12(fp)
   13c0c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   13c10:	e0bffd17 	ldw	r2,-12(fp)
   13c14:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   13c18:	d0e73317 	ldw	r3,-25396(gp)
   13c1c:	e0bffd17 	ldw	r2,-12(fp)
   13c20:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   13c24:	e0bffd17 	ldw	r2,-12(fp)
   13c28:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   13c2c:	e0bffd17 	ldw	r2,-12(fp)
   13c30:	d0a73315 	stw	r2,-25396(gp)
   13c34:	e0bff717 	ldw	r2,-36(fp)
   13c38:	e0bffa15 	stw	r2,-24(fp)
   13c3c:	e0bffa17 	ldw	r2,-24(fp)
   13c40:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   13c44:	e0bff503 	ldbu	r2,-44(fp)
   13c48:	10800058 	cmpnei	r2,r2,1
   13c4c:	1000011e 	bne	r2,zero,13c54 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13c50:	00101000 	call	10100 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   13c54:	e0bfff17 	ldw	r2,-4(fp)
   13c58:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   13c5c:	e03ff615 	stw	zero,-40(fp)
             break;
   13c60:	00000a06 	br	13c8c <OSSemDel+0x228>
   13c64:	e0bff717 	ldw	r2,-36(fp)
   13c68:	e0bffb15 	stw	r2,-20(fp)
   13c6c:	e0bffb17 	ldw	r2,-20(fp)
   13c70:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   13c74:	e0bfff17 	ldw	r2,-4(fp)
   13c78:	00c001c4 	movi	r3,7
   13c7c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   13c80:	e0bffd17 	ldw	r2,-12(fp)
   13c84:	e0bff615 	stw	r2,-40(fp)
             break;
   13c88:	0001883a 	nop
    }
    return (pevent_return);
   13c8c:	e0bff617 	ldw	r2,-40(fp)
}
   13c90:	e037883a 	mov	sp,fp
   13c94:	dfc00117 	ldw	ra,4(sp)
   13c98:	df000017 	ldw	fp,0(sp)
   13c9c:	dec00204 	addi	sp,sp,8
   13ca0:	f800283a 	ret

00013ca4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   13ca4:	defff504 	addi	sp,sp,-44
   13ca8:	dfc00a15 	stw	ra,40(sp)
   13cac:	df000915 	stw	fp,36(sp)
   13cb0:	df000904 	addi	fp,sp,36
   13cb4:	e13ffd15 	stw	r4,-12(fp)
   13cb8:	2805883a 	mov	r2,r5
   13cbc:	e1bfff15 	stw	r6,-4(fp)
   13cc0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13cc4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13cc8:	e0bfff17 	ldw	r2,-4(fp)
   13ccc:	10007226 	beq	r2,zero,13e98 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13cd0:	e0bffd17 	ldw	r2,-12(fp)
   13cd4:	1000041e 	bne	r2,zero,13ce8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   13cd8:	e0bfff17 	ldw	r2,-4(fp)
   13cdc:	00c00104 	movi	r3,4
   13ce0:	10c00005 	stb	r3,0(r2)
        return;
   13ce4:	00006d06 	br	13e9c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13ce8:	e0bffd17 	ldw	r2,-12(fp)
   13cec:	10800003 	ldbu	r2,0(r2)
   13cf0:	10803fcc 	andi	r2,r2,255
   13cf4:	108000e0 	cmpeqi	r2,r2,3
   13cf8:	1000041e 	bne	r2,zero,13d0c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   13cfc:	e0bfff17 	ldw	r2,-4(fp)
   13d00:	00c00044 	movi	r3,1
   13d04:	10c00005 	stb	r3,0(r2)
        return;
   13d08:	00006406 	br	13e9c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   13d0c:	d0a73403 	ldbu	r2,-25392(gp)
   13d10:	10803fcc 	andi	r2,r2,255
   13d14:	10000426 	beq	r2,zero,13d28 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   13d18:	e0bfff17 	ldw	r2,-4(fp)
   13d1c:	00c00084 	movi	r3,2
   13d20:	10c00005 	stb	r3,0(r2)
        return;
   13d24:	00005d06 	br	13e9c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   13d28:	d0a72603 	ldbu	r2,-25448(gp)
   13d2c:	10803fcc 	andi	r2,r2,255
   13d30:	10000426 	beq	r2,zero,13d44 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   13d34:	e0bfff17 	ldw	r2,-4(fp)
   13d38:	00c00344 	movi	r3,13
   13d3c:	10c00005 	stb	r3,0(r2)
        return;
   13d40:	00005606 	br	13e9c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13d44:	0005303a 	rdctl	r2,status
   13d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13d4c:	e0fffc17 	ldw	r3,-16(fp)
   13d50:	00bfff84 	movi	r2,-2
   13d54:	1884703a 	and	r2,r3,r2
   13d58:	1001703a 	wrctl	status,r2
  
  return context;
   13d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13d60:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   13d64:	e0bffd17 	ldw	r2,-12(fp)
   13d68:	1080020b 	ldhu	r2,8(r2)
   13d6c:	10bfffcc 	andi	r2,r2,65535
   13d70:	10000d26 	beq	r2,zero,13da8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   13d74:	e0bffd17 	ldw	r2,-12(fp)
   13d78:	1080020b 	ldhu	r2,8(r2)
   13d7c:	10bfffc4 	addi	r2,r2,-1
   13d80:	1007883a 	mov	r3,r2
   13d84:	e0bffd17 	ldw	r2,-12(fp)
   13d88:	10c0020d 	sth	r3,8(r2)
   13d8c:	e0bff717 	ldw	r2,-36(fp)
   13d90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d94:	e0bff817 	ldw	r2,-32(fp)
   13d98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   13d9c:	e0bfff17 	ldw	r2,-4(fp)
   13da0:	10000005 	stb	zero,0(r2)
        return;
   13da4:	00003d06 	br	13e9c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   13da8:	d0a73517 	ldw	r2,-25388(gp)
   13dac:	d0e73517 	ldw	r3,-25388(gp)
   13db0:	18c00c03 	ldbu	r3,48(r3)
   13db4:	18c00054 	ori	r3,r3,1
   13db8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13dbc:	d0a73517 	ldw	r2,-25388(gp)
   13dc0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   13dc4:	d0a73517 	ldw	r2,-25388(gp)
   13dc8:	e0fffe0b 	ldhu	r3,-8(fp)
   13dcc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   13dd0:	e13ffd17 	ldw	r4,-12(fp)
   13dd4:	000f84c0 	call	f84c <OS_EventTaskWait>
   13dd8:	e0bff717 	ldw	r2,-36(fp)
   13ddc:	e0bffb15 	stw	r2,-20(fp)
   13de0:	e0bffb17 	ldw	r2,-20(fp)
   13de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   13de8:	00101000 	call	10100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13dec:	0005303a 	rdctl	r2,status
   13df0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13df4:	e0fff917 	ldw	r3,-28(fp)
   13df8:	00bfff84 	movi	r2,-2
   13dfc:	1884703a 	and	r2,r3,r2
   13e00:	1001703a 	wrctl	status,r2
  
  return context;
   13e04:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   13e08:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   13e0c:	d0a73517 	ldw	r2,-25388(gp)
   13e10:	10800c43 	ldbu	r2,49(r2)
   13e14:	10803fcc 	andi	r2,r2,255
   13e18:	10000326 	beq	r2,zero,13e28 <OSSemPend+0x184>
   13e1c:	108000a0 	cmpeqi	r2,r2,2
   13e20:	1000041e 	bne	r2,zero,13e34 <OSSemPend+0x190>
   13e24:	00000706 	br	13e44 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   13e28:	e0bfff17 	ldw	r2,-4(fp)
   13e2c:	10000005 	stb	zero,0(r2)
             break;
   13e30:	00000c06 	br	13e64 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   13e34:	e0bfff17 	ldw	r2,-4(fp)
   13e38:	00c00384 	movi	r3,14
   13e3c:	10c00005 	stb	r3,0(r2)
             break;
   13e40:	00000806 	br	13e64 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   13e44:	d0a73517 	ldw	r2,-25388(gp)
   13e48:	e17ffd17 	ldw	r5,-12(fp)
   13e4c:	1009883a 	mov	r4,r2
   13e50:	000faac0 	call	faac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   13e54:	e0bfff17 	ldw	r2,-4(fp)
   13e58:	00c00284 	movi	r3,10
   13e5c:	10c00005 	stb	r3,0(r2)
             break;
   13e60:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   13e64:	d0a73517 	ldw	r2,-25388(gp)
   13e68:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   13e6c:	d0a73517 	ldw	r2,-25388(gp)
   13e70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   13e74:	d0a73517 	ldw	r2,-25388(gp)
   13e78:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   13e7c:	d0a73517 	ldw	r2,-25388(gp)
   13e80:	10000815 	stw	zero,32(r2)
   13e84:	e0bff717 	ldw	r2,-36(fp)
   13e88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e8c:	e0bffa17 	ldw	r2,-24(fp)
   13e90:	1001703a 	wrctl	status,r2
   13e94:	00000106 	br	13e9c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   13e98:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   13e9c:	e037883a 	mov	sp,fp
   13ea0:	dfc00117 	ldw	ra,4(sp)
   13ea4:	df000017 	ldw	fp,0(sp)
   13ea8:	dec00204 	addi	sp,sp,8
   13eac:	f800283a 	ret

00013eb0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   13eb0:	defff604 	addi	sp,sp,-40
   13eb4:	dfc00915 	stw	ra,36(sp)
   13eb8:	df000815 	stw	fp,32(sp)
   13ebc:	df000804 	addi	fp,sp,32
   13ec0:	e13ffd15 	stw	r4,-12(fp)
   13ec4:	2805883a 	mov	r2,r5
   13ec8:	e1bfff15 	stw	r6,-4(fp)
   13ecc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   13ed0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   13ed4:	e0bfff17 	ldw	r2,-4(fp)
   13ed8:	1000021e 	bne	r2,zero,13ee4 <OSSemPendAbort+0x34>
        return (0);
   13edc:	0005883a 	mov	r2,zero
   13ee0:	00004906 	br	14008 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   13ee4:	e0bffd17 	ldw	r2,-12(fp)
   13ee8:	1000051e 	bne	r2,zero,13f00 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   13eec:	e0bfff17 	ldw	r2,-4(fp)
   13ef0:	00c00104 	movi	r3,4
   13ef4:	10c00005 	stb	r3,0(r2)
        return (0);
   13ef8:	0005883a 	mov	r2,zero
   13efc:	00004206 	br	14008 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   13f00:	e0bffd17 	ldw	r2,-12(fp)
   13f04:	10800003 	ldbu	r2,0(r2)
   13f08:	10803fcc 	andi	r2,r2,255
   13f0c:	108000e0 	cmpeqi	r2,r2,3
   13f10:	1000051e 	bne	r2,zero,13f28 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   13f14:	e0bfff17 	ldw	r2,-4(fp)
   13f18:	00c00044 	movi	r3,1
   13f1c:	10c00005 	stb	r3,0(r2)
        return (0);
   13f20:	0005883a 	mov	r2,zero
   13f24:	00003806 	br	14008 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f28:	0005303a 	rdctl	r2,status
   13f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f30:	e0fffc17 	ldw	r3,-16(fp)
   13f34:	00bfff84 	movi	r2,-2
   13f38:	1884703a 	and	r2,r3,r2
   13f3c:	1001703a 	wrctl	status,r2
  
  return context;
   13f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13f44:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   13f48:	e0bffd17 	ldw	r2,-12(fp)
   13f4c:	10800283 	ldbu	r2,10(r2)
   13f50:	10803fcc 	andi	r2,r2,255
   13f54:	10002526 	beq	r2,zero,13fec <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   13f58:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   13f5c:	e0bffe03 	ldbu	r2,-8(fp)
   13f60:	10800060 	cmpeqi	r2,r2,1
   13f64:	10000e26 	beq	r2,zero,13fa0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13f68:	00000806 	br	13f8c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13f6c:	01c00084 	movi	r7,2
   13f70:	01800044 	movi	r6,1
   13f74:	000b883a 	mov	r5,zero
   13f78:	e13ffd17 	ldw	r4,-12(fp)
   13f7c:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                     nbr_tasks++;
   13f80:	e0bff803 	ldbu	r2,-32(fp)
   13f84:	10800044 	addi	r2,r2,1
   13f88:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   13f8c:	e0bffd17 	ldw	r2,-12(fp)
   13f90:	10800283 	ldbu	r2,10(r2)
   13f94:	10803fcc 	andi	r2,r2,255
   13f98:	103ff41e 	bne	r2,zero,13f6c <__alt_data_end+0xfffe322c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   13f9c:	00000906 	br	13fc4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   13fa0:	01c00084 	movi	r7,2
   13fa4:	01800044 	movi	r6,1
   13fa8:	000b883a 	mov	r5,zero
   13fac:	e13ffd17 	ldw	r4,-12(fp)
   13fb0:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
                 nbr_tasks++;
   13fb4:	e0bff803 	ldbu	r2,-32(fp)
   13fb8:	10800044 	addi	r2,r2,1
   13fbc:	e0bff805 	stb	r2,-32(fp)
                 break;
   13fc0:	0001883a 	nop
   13fc4:	e0bff917 	ldw	r2,-28(fp)
   13fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fcc:	e0bffa17 	ldw	r2,-24(fp)
   13fd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   13fd4:	00101000 	call	10100 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   13fd8:	e0bfff17 	ldw	r2,-4(fp)
   13fdc:	00c00384 	movi	r3,14
   13fe0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   13fe4:	e0bff803 	ldbu	r2,-32(fp)
   13fe8:	00000706 	br	14008 <OSSemPendAbort+0x158>
   13fec:	e0bff917 	ldw	r2,-28(fp)
   13ff0:	e0bffb15 	stw	r2,-20(fp)
   13ff4:	e0bffb17 	ldw	r2,-20(fp)
   13ff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13ffc:	e0bfff17 	ldw	r2,-4(fp)
   14000:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   14004:	0005883a 	mov	r2,zero
}
   14008:	e037883a 	mov	sp,fp
   1400c:	dfc00117 	ldw	ra,4(sp)
   14010:	df000017 	ldw	fp,0(sp)
   14014:	dec00204 	addi	sp,sp,8
   14018:	f800283a 	ret

0001401c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1401c:	defff804 	addi	sp,sp,-32
   14020:	dfc00715 	stw	ra,28(sp)
   14024:	df000615 	stw	fp,24(sp)
   14028:	df000604 	addi	fp,sp,24
   1402c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14030:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14034:	e0bfff17 	ldw	r2,-4(fp)
   14038:	1000021e 	bne	r2,zero,14044 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1403c:	00800104 	movi	r2,4
   14040:	00003506 	br	14118 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   14044:	e0bfff17 	ldw	r2,-4(fp)
   14048:	10800003 	ldbu	r2,0(r2)
   1404c:	10803fcc 	andi	r2,r2,255
   14050:	108000e0 	cmpeqi	r2,r2,3
   14054:	1000021e 	bne	r2,zero,14060 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   14058:	00800044 	movi	r2,1
   1405c:	00002e06 	br	14118 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14060:	0005303a 	rdctl	r2,status
   14064:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14068:	e0fffe17 	ldw	r3,-8(fp)
   1406c:	00bfff84 	movi	r2,-2
   14070:	1884703a 	and	r2,r3,r2
   14074:	1001703a 	wrctl	status,r2
  
  return context;
   14078:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1407c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   14080:	e0bfff17 	ldw	r2,-4(fp)
   14084:	10800283 	ldbu	r2,10(r2)
   14088:	10803fcc 	andi	r2,r2,255
   1408c:	10000c26 	beq	r2,zero,140c0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   14090:	000f883a 	mov	r7,zero
   14094:	01800044 	movi	r6,1
   14098:	000b883a 	mov	r5,zero
   1409c:	e13fff17 	ldw	r4,-4(fp)
   140a0:	000f6b40 	call	f6b4 <OS_EventTaskRdy>
   140a4:	e0bffa17 	ldw	r2,-24(fp)
   140a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140ac:	e0bffb17 	ldw	r2,-20(fp)
   140b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   140b4:	00101000 	call	10100 <OS_Sched>
        return (OS_ERR_NONE);
   140b8:	0005883a 	mov	r2,zero
   140bc:	00001606 	br	14118 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   140c0:	e0bfff17 	ldw	r2,-4(fp)
   140c4:	1080020b 	ldhu	r2,8(r2)
   140c8:	10ffffcc 	andi	r3,r2,65535
   140cc:	00bfffd4 	movui	r2,65535
   140d0:	18800c26 	beq	r3,r2,14104 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   140d4:	e0bfff17 	ldw	r2,-4(fp)
   140d8:	1080020b 	ldhu	r2,8(r2)
   140dc:	10800044 	addi	r2,r2,1
   140e0:	1007883a 	mov	r3,r2
   140e4:	e0bfff17 	ldw	r2,-4(fp)
   140e8:	10c0020d 	sth	r3,8(r2)
   140ec:	e0bffa17 	ldw	r2,-24(fp)
   140f0:	e0bffc15 	stw	r2,-16(fp)
   140f4:	e0bffc17 	ldw	r2,-16(fp)
   140f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   140fc:	0005883a 	mov	r2,zero
   14100:	00000506 	br	14118 <OSSemPost+0xfc>
   14104:	e0bffa17 	ldw	r2,-24(fp)
   14108:	e0bffd15 	stw	r2,-12(fp)
   1410c:	e0bffd17 	ldw	r2,-12(fp)
   14110:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   14114:	00800c84 	movi	r2,50
}
   14118:	e037883a 	mov	sp,fp
   1411c:	dfc00117 	ldw	ra,4(sp)
   14120:	df000017 	ldw	fp,0(sp)
   14124:	dec00204 	addi	sp,sp,8
   14128:	f800283a 	ret

0001412c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1412c:	defff704 	addi	sp,sp,-36
   14130:	df000815 	stw	fp,32(sp)
   14134:	df000804 	addi	fp,sp,32
   14138:	e13ffe15 	stw	r4,-8(fp)
   1413c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14140:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14144:	e0bffe17 	ldw	r2,-8(fp)
   14148:	1000021e 	bne	r2,zero,14154 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1414c:	00800104 	movi	r2,4
   14150:	00003606 	br	1422c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   14154:	e0bfff17 	ldw	r2,-4(fp)
   14158:	1000021e 	bne	r2,zero,14164 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1415c:	00800244 	movi	r2,9
   14160:	00003206 	br	1422c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   14164:	e0bffe17 	ldw	r2,-8(fp)
   14168:	10800003 	ldbu	r2,0(r2)
   1416c:	10803fcc 	andi	r2,r2,255
   14170:	108000e0 	cmpeqi	r2,r2,3
   14174:	1000021e 	bne	r2,zero,14180 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   14178:	00800044 	movi	r2,1
   1417c:	00002b06 	br	1422c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14180:	0005303a 	rdctl	r2,status
   14184:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14188:	e0fffd17 	ldw	r3,-12(fp)
   1418c:	00bfff84 	movi	r2,-2
   14190:	1884703a 	and	r2,r3,r2
   14194:	1001703a 	wrctl	status,r2
  
  return context;
   14198:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1419c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   141a0:	e0bffe17 	ldw	r2,-8(fp)
   141a4:	10c00283 	ldbu	r3,10(r2)
   141a8:	e0bfff17 	ldw	r2,-4(fp)
   141ac:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   141b0:	e0bffe17 	ldw	r2,-8(fp)
   141b4:	108002c4 	addi	r2,r2,11
   141b8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   141bc:	e0bfff17 	ldw	r2,-4(fp)
   141c0:	10800084 	addi	r2,r2,2
   141c4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   141c8:	e03ffa05 	stb	zero,-24(fp)
   141cc:	00000b06 	br	141fc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   141d0:	e0bff917 	ldw	r2,-28(fp)
   141d4:	10c00044 	addi	r3,r2,1
   141d8:	e0fff915 	stw	r3,-28(fp)
   141dc:	e0fff817 	ldw	r3,-32(fp)
   141e0:	19000044 	addi	r4,r3,1
   141e4:	e13ff815 	stw	r4,-32(fp)
   141e8:	18c00003 	ldbu	r3,0(r3)
   141ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   141f0:	e0bffa03 	ldbu	r2,-24(fp)
   141f4:	10800044 	addi	r2,r2,1
   141f8:	e0bffa05 	stb	r2,-24(fp)
   141fc:	e0bffa03 	ldbu	r2,-24(fp)
   14200:	108000f0 	cmpltui	r2,r2,3
   14204:	103ff21e 	bne	r2,zero,141d0 <__alt_data_end+0xfffe3490>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   14208:	e0bffe17 	ldw	r2,-8(fp)
   1420c:	10c0020b 	ldhu	r3,8(r2)
   14210:	e0bfff17 	ldw	r2,-4(fp)
   14214:	10c0000d 	sth	r3,0(r2)
   14218:	e0bffb17 	ldw	r2,-20(fp)
   1421c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14220:	e0bffc17 	ldw	r2,-16(fp)
   14224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   14228:	0005883a 	mov	r2,zero
}
   1422c:	e037883a 	mov	sp,fp
   14230:	df000017 	ldw	fp,0(sp)
   14234:	dec00104 	addi	sp,sp,4
   14238:	f800283a 	ret

0001423c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1423c:	defff904 	addi	sp,sp,-28
   14240:	df000615 	stw	fp,24(sp)
   14244:	df000604 	addi	fp,sp,24
   14248:	e13ffd15 	stw	r4,-12(fp)
   1424c:	2805883a 	mov	r2,r5
   14250:	e1bfff15 	stw	r6,-4(fp)
   14254:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14258:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1425c:	e0bfff17 	ldw	r2,-4(fp)
   14260:	10003126 	beq	r2,zero,14328 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   14264:	e0bffd17 	ldw	r2,-12(fp)
   14268:	1000041e 	bne	r2,zero,1427c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1426c:	e0bfff17 	ldw	r2,-4(fp)
   14270:	00c00104 	movi	r3,4
   14274:	10c00005 	stb	r3,0(r2)
        return;
   14278:	00002c06 	br	1432c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1427c:	e0bffd17 	ldw	r2,-12(fp)
   14280:	10800003 	ldbu	r2,0(r2)
   14284:	10803fcc 	andi	r2,r2,255
   14288:	108000e0 	cmpeqi	r2,r2,3
   1428c:	1000041e 	bne	r2,zero,142a0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   14290:	e0bfff17 	ldw	r2,-4(fp)
   14294:	00c00044 	movi	r3,1
   14298:	10c00005 	stb	r3,0(r2)
        return;
   1429c:	00002306 	br	1432c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   142a0:	0005303a 	rdctl	r2,status
   142a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   142a8:	e0fffc17 	ldw	r3,-16(fp)
   142ac:	00bfff84 	movi	r2,-2
   142b0:	1884703a 	and	r2,r3,r2
   142b4:	1001703a 	wrctl	status,r2
  
  return context;
   142b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   142bc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   142c0:	e0bfff17 	ldw	r2,-4(fp)
   142c4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   142c8:	e0bffd17 	ldw	r2,-12(fp)
   142cc:	1080020b 	ldhu	r2,8(r2)
   142d0:	10bfffcc 	andi	r2,r2,65535
   142d4:	10000426 	beq	r2,zero,142e8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   142d8:	e0bffd17 	ldw	r2,-12(fp)
   142dc:	e0fffe0b 	ldhu	r3,-8(fp)
   142e0:	10c0020d 	sth	r3,8(r2)
   142e4:	00000b06 	br	14314 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   142e8:	e0bffd17 	ldw	r2,-12(fp)
   142ec:	10800283 	ldbu	r2,10(r2)
   142f0:	10803fcc 	andi	r2,r2,255
   142f4:	1000041e 	bne	r2,zero,14308 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   142f8:	e0bffd17 	ldw	r2,-12(fp)
   142fc:	e0fffe0b 	ldhu	r3,-8(fp)
   14300:	10c0020d 	sth	r3,8(r2)
   14304:	00000306 	br	14314 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   14308:	e0bfff17 	ldw	r2,-4(fp)
   1430c:	00c01244 	movi	r3,73
   14310:	10c00005 	stb	r3,0(r2)
   14314:	e0bffa17 	ldw	r2,-24(fp)
   14318:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1431c:	e0bffb17 	ldw	r2,-20(fp)
   14320:	1001703a 	wrctl	status,r2
   14324:	00000106 	br	1432c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   14328:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1432c:	e037883a 	mov	sp,fp
   14330:	df000017 	ldw	fp,0(sp)
   14334:	dec00104 	addi	sp,sp,4
   14338:	f800283a 	ret

0001433c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1433c:	defff104 	addi	sp,sp,-60
   14340:	dfc00e15 	stw	ra,56(sp)
   14344:	df000d15 	stw	fp,52(sp)
   14348:	df000d04 	addi	fp,sp,52
   1434c:	2007883a 	mov	r3,r4
   14350:	2805883a 	mov	r2,r5
   14354:	e0fffe05 	stb	r3,-8(fp)
   14358:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1435c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   14360:	e0bffe03 	ldbu	r2,-8(fp)
   14364:	10800530 	cmpltui	r2,r2,20
   14368:	1000051e 	bne	r2,zero,14380 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1436c:	e0bffe03 	ldbu	r2,-8(fp)
   14370:	10803fe0 	cmpeqi	r2,r2,255
   14374:	1000021e 	bne	r2,zero,14380 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   14378:	00800a84 	movi	r2,42
   1437c:	00012606 	br	14818 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   14380:	e0bfff03 	ldbu	r2,-4(fp)
   14384:	10800530 	cmpltui	r2,r2,20
   14388:	1000021e 	bne	r2,zero,14394 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1438c:	00800a84 	movi	r2,42
   14390:	00012106 	br	14818 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14394:	0005303a 	rdctl	r2,status
   14398:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1439c:	e0fffd17 	ldw	r3,-12(fp)
   143a0:	00bfff84 	movi	r2,-2
   143a4:	1884703a 	and	r2,r3,r2
   143a8:	1001703a 	wrctl	status,r2
  
  return context;
   143ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   143b0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   143b4:	e0ffff03 	ldbu	r3,-4(fp)
   143b8:	008000b4 	movhi	r2,2
   143bc:	10969b04 	addi	r2,r2,23148
   143c0:	18c7883a 	add	r3,r3,r3
   143c4:	18c7883a 	add	r3,r3,r3
   143c8:	10c5883a 	add	r2,r2,r3
   143cc:	10800017 	ldw	r2,0(r2)
   143d0:	10000626 	beq	r2,zero,143ec <OSTaskChangePrio+0xb0>
   143d4:	e0bff517 	ldw	r2,-44(fp)
   143d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   143dc:	e0bff617 	ldw	r2,-40(fp)
   143e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   143e4:	00800a04 	movi	r2,40
   143e8:	00010b06 	br	14818 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   143ec:	e0bffe03 	ldbu	r2,-8(fp)
   143f0:	10803fd8 	cmpnei	r2,r2,255
   143f4:	1000031e 	bne	r2,zero,14404 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   143f8:	d0a73517 	ldw	r2,-25388(gp)
   143fc:	10800c83 	ldbu	r2,50(r2)
   14400:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   14404:	e0fffe03 	ldbu	r3,-8(fp)
   14408:	008000b4 	movhi	r2,2
   1440c:	10969b04 	addi	r2,r2,23148
   14410:	18c7883a 	add	r3,r3,r3
   14414:	18c7883a 	add	r3,r3,r3
   14418:	10c5883a 	add	r2,r2,r3
   1441c:	10800017 	ldw	r2,0(r2)
   14420:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   14424:	e0bff817 	ldw	r2,-32(fp)
   14428:	1000061e 	bne	r2,zero,14444 <OSTaskChangePrio+0x108>
   1442c:	e0bff517 	ldw	r2,-44(fp)
   14430:	e0bff715 	stw	r2,-36(fp)
   14434:	e0bff717 	ldw	r2,-36(fp)
   14438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1443c:	00800a44 	movi	r2,41
   14440:	0000f506 	br	14818 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   14444:	e0bff817 	ldw	r2,-32(fp)
   14448:	10800058 	cmpnei	r2,r2,1
   1444c:	1000061e 	bne	r2,zero,14468 <OSTaskChangePrio+0x12c>
   14450:	e0bff517 	ldw	r2,-44(fp)
   14454:	e0bff915 	stw	r2,-28(fp)
   14458:	e0bff917 	ldw	r2,-28(fp)
   1445c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   14460:	008010c4 	movi	r2,67
   14464:	0000ec06 	br	14818 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   14468:	e0bfff03 	ldbu	r2,-4(fp)
   1446c:	1004d0fa 	srli	r2,r2,3
   14470:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   14474:	e0bfff03 	ldbu	r2,-4(fp)
   14478:	108001cc 	andi	r2,r2,7
   1447c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   14480:	e0bffb03 	ldbu	r2,-20(fp)
   14484:	00c00044 	movi	r3,1
   14488:	1884983a 	sll	r2,r3,r2
   1448c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   14490:	e0bffb43 	ldbu	r2,-19(fp)
   14494:	00c00044 	movi	r3,1
   14498:	1884983a 	sll	r2,r3,r2
   1449c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   144a0:	e0fffe03 	ldbu	r3,-8(fp)
   144a4:	008000b4 	movhi	r2,2
   144a8:	10969b04 	addi	r2,r2,23148
   144ac:	18c7883a 	add	r3,r3,r3
   144b0:	18c7883a 	add	r3,r3,r3
   144b4:	10c5883a 	add	r2,r2,r3
   144b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   144bc:	e0ffff03 	ldbu	r3,-4(fp)
   144c0:	008000b4 	movhi	r2,2
   144c4:	10969b04 	addi	r2,r2,23148
   144c8:	18c7883a 	add	r3,r3,r3
   144cc:	18c7883a 	add	r3,r3,r3
   144d0:	10c5883a 	add	r2,r2,r3
   144d4:	e0fff817 	ldw	r3,-32(fp)
   144d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   144dc:	e0bff817 	ldw	r2,-32(fp)
   144e0:	10800d03 	ldbu	r2,52(r2)
   144e4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   144e8:	e0bff817 	ldw	r2,-32(fp)
   144ec:	10800d83 	ldbu	r2,54(r2)
   144f0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   144f4:	e0bff817 	ldw	r2,-32(fp)
   144f8:	10800d43 	ldbu	r2,53(r2)
   144fc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   14500:	e0fffc03 	ldbu	r3,-16(fp)
   14504:	d0a73244 	addi	r2,gp,-25399
   14508:	1885883a 	add	r2,r3,r2
   1450c:	10c00003 	ldbu	r3,0(r2)
   14510:	e0bffc83 	ldbu	r2,-14(fp)
   14514:	1884703a 	and	r2,r3,r2
   14518:	10803fcc 	andi	r2,r2,255
   1451c:	10002826 	beq	r2,zero,145c0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   14520:	e0fffc03 	ldbu	r3,-16(fp)
   14524:	e13ffc03 	ldbu	r4,-16(fp)
   14528:	d0a73244 	addi	r2,gp,-25399
   1452c:	2085883a 	add	r2,r4,r2
   14530:	10800003 	ldbu	r2,0(r2)
   14534:	1009883a 	mov	r4,r2
   14538:	e0bffc83 	ldbu	r2,-14(fp)
   1453c:	0084303a 	nor	r2,zero,r2
   14540:	2084703a 	and	r2,r4,r2
   14544:	1009883a 	mov	r4,r2
   14548:	d0a73244 	addi	r2,gp,-25399
   1454c:	1885883a 	add	r2,r3,r2
   14550:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   14554:	e0fffc03 	ldbu	r3,-16(fp)
   14558:	d0a73244 	addi	r2,gp,-25399
   1455c:	1885883a 	add	r2,r3,r2
   14560:	10800003 	ldbu	r2,0(r2)
   14564:	10803fcc 	andi	r2,r2,255
   14568:	1000061e 	bne	r2,zero,14584 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1456c:	e0bffc43 	ldbu	r2,-15(fp)
   14570:	0084303a 	nor	r2,zero,r2
   14574:	1007883a 	mov	r3,r2
   14578:	d0a73203 	ldbu	r2,-25400(gp)
   1457c:	1884703a 	and	r2,r3,r2
   14580:	d0a73205 	stb	r2,-25400(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   14584:	d0e73203 	ldbu	r3,-25400(gp)
   14588:	e0bffb83 	ldbu	r2,-18(fp)
   1458c:	1884b03a 	or	r2,r3,r2
   14590:	d0a73205 	stb	r2,-25400(gp)
         OSRdyTbl[y_new] |= bitx_new;
   14594:	e0fffb03 	ldbu	r3,-20(fp)
   14598:	e13ffb03 	ldbu	r4,-20(fp)
   1459c:	d0a73244 	addi	r2,gp,-25399
   145a0:	2085883a 	add	r2,r4,r2
   145a4:	11000003 	ldbu	r4,0(r2)
   145a8:	e0bffbc3 	ldbu	r2,-17(fp)
   145ac:	2084b03a 	or	r2,r4,r2
   145b0:	1009883a 	mov	r4,r2
   145b4:	d0a73244 	addi	r2,gp,-25399
   145b8:	1885883a 	add	r2,r3,r2
   145bc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   145c0:	e0bff817 	ldw	r2,-32(fp)
   145c4:	10800717 	ldw	r2,28(r2)
   145c8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   145cc:	e0bff317 	ldw	r2,-52(fp)
   145d0:	10003326 	beq	r2,zero,146a0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   145d4:	e0bffc03 	ldbu	r2,-16(fp)
   145d8:	e0fffc03 	ldbu	r3,-16(fp)
   145dc:	e13ff317 	ldw	r4,-52(fp)
   145e0:	20c7883a 	add	r3,r4,r3
   145e4:	18c002c4 	addi	r3,r3,11
   145e8:	18c00003 	ldbu	r3,0(r3)
   145ec:	1809883a 	mov	r4,r3
   145f0:	e0fffc83 	ldbu	r3,-14(fp)
   145f4:	00c6303a 	nor	r3,zero,r3
   145f8:	20c6703a 	and	r3,r4,r3
   145fc:	1809883a 	mov	r4,r3
   14600:	e0fff317 	ldw	r3,-52(fp)
   14604:	1885883a 	add	r2,r3,r2
   14608:	108002c4 	addi	r2,r2,11
   1460c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   14610:	e0bffc03 	ldbu	r2,-16(fp)
   14614:	e0fff317 	ldw	r3,-52(fp)
   14618:	1885883a 	add	r2,r3,r2
   1461c:	108002c4 	addi	r2,r2,11
   14620:	10800003 	ldbu	r2,0(r2)
   14624:	10803fcc 	andi	r2,r2,255
   14628:	1000091e 	bne	r2,zero,14650 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1462c:	e0bff317 	ldw	r2,-52(fp)
   14630:	10800283 	ldbu	r2,10(r2)
   14634:	1007883a 	mov	r3,r2
   14638:	e0bffc43 	ldbu	r2,-15(fp)
   1463c:	0084303a 	nor	r2,zero,r2
   14640:	1884703a 	and	r2,r3,r2
   14644:	1007883a 	mov	r3,r2
   14648:	e0bff317 	ldw	r2,-52(fp)
   1464c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   14650:	e0bff317 	ldw	r2,-52(fp)
   14654:	10c00283 	ldbu	r3,10(r2)
   14658:	e0bffb83 	ldbu	r2,-18(fp)
   1465c:	1884b03a 	or	r2,r3,r2
   14660:	1007883a 	mov	r3,r2
   14664:	e0bff317 	ldw	r2,-52(fp)
   14668:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1466c:	e0bffb03 	ldbu	r2,-20(fp)
   14670:	e0fffb03 	ldbu	r3,-20(fp)
   14674:	e13ff317 	ldw	r4,-52(fp)
   14678:	20c7883a 	add	r3,r4,r3
   1467c:	18c002c4 	addi	r3,r3,11
   14680:	19000003 	ldbu	r4,0(r3)
   14684:	e0fffbc3 	ldbu	r3,-17(fp)
   14688:	20c6b03a 	or	r3,r4,r3
   1468c:	1809883a 	mov	r4,r3
   14690:	e0fff317 	ldw	r3,-52(fp)
   14694:	1885883a 	add	r2,r3,r2
   14698:	108002c4 	addi	r2,r2,11
   1469c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   146a0:	e0bff817 	ldw	r2,-32(fp)
   146a4:	10800817 	ldw	r2,32(r2)
   146a8:	10004226 	beq	r2,zero,147b4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   146ac:	e0bff817 	ldw	r2,-32(fp)
   146b0:	10800817 	ldw	r2,32(r2)
   146b4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   146b8:	e0bff417 	ldw	r2,-48(fp)
   146bc:	10800017 	ldw	r2,0(r2)
   146c0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   146c4:	00003906 	br	147ac <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   146c8:	e0bffc03 	ldbu	r2,-16(fp)
   146cc:	e0fffc03 	ldbu	r3,-16(fp)
   146d0:	e13ff317 	ldw	r4,-52(fp)
   146d4:	20c7883a 	add	r3,r4,r3
   146d8:	18c002c4 	addi	r3,r3,11
   146dc:	18c00003 	ldbu	r3,0(r3)
   146e0:	1809883a 	mov	r4,r3
   146e4:	e0fffc83 	ldbu	r3,-14(fp)
   146e8:	00c6303a 	nor	r3,zero,r3
   146ec:	20c6703a 	and	r3,r4,r3
   146f0:	1809883a 	mov	r4,r3
   146f4:	e0fff317 	ldw	r3,-52(fp)
   146f8:	1885883a 	add	r2,r3,r2
   146fc:	108002c4 	addi	r2,r2,11
   14700:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   14704:	e0bffc03 	ldbu	r2,-16(fp)
   14708:	e0fff317 	ldw	r3,-52(fp)
   1470c:	1885883a 	add	r2,r3,r2
   14710:	108002c4 	addi	r2,r2,11
   14714:	10800003 	ldbu	r2,0(r2)
   14718:	10803fcc 	andi	r2,r2,255
   1471c:	1000091e 	bne	r2,zero,14744 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   14720:	e0bff317 	ldw	r2,-52(fp)
   14724:	10800283 	ldbu	r2,10(r2)
   14728:	1007883a 	mov	r3,r2
   1472c:	e0bffc43 	ldbu	r2,-15(fp)
   14730:	0084303a 	nor	r2,zero,r2
   14734:	1884703a 	and	r2,r3,r2
   14738:	1007883a 	mov	r3,r2
   1473c:	e0bff317 	ldw	r2,-52(fp)
   14740:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   14744:	e0bff317 	ldw	r2,-52(fp)
   14748:	10c00283 	ldbu	r3,10(r2)
   1474c:	e0bffb83 	ldbu	r2,-18(fp)
   14750:	1884b03a 	or	r2,r3,r2
   14754:	1007883a 	mov	r3,r2
   14758:	e0bff317 	ldw	r2,-52(fp)
   1475c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   14760:	e0bffb03 	ldbu	r2,-20(fp)
   14764:	e0fffb03 	ldbu	r3,-20(fp)
   14768:	e13ff317 	ldw	r4,-52(fp)
   1476c:	20c7883a 	add	r3,r4,r3
   14770:	18c002c4 	addi	r3,r3,11
   14774:	19000003 	ldbu	r4,0(r3)
   14778:	e0fffbc3 	ldbu	r3,-17(fp)
   1477c:	20c6b03a 	or	r3,r4,r3
   14780:	1809883a 	mov	r4,r3
   14784:	e0fff317 	ldw	r3,-52(fp)
   14788:	1885883a 	add	r2,r3,r2
   1478c:	108002c4 	addi	r2,r2,11
   14790:	11000005 	stb	r4,0(r2)
            pevents++;
   14794:	e0bff417 	ldw	r2,-48(fp)
   14798:	10800104 	addi	r2,r2,4
   1479c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   147a0:	e0bff417 	ldw	r2,-48(fp)
   147a4:	10800017 	ldw	r2,0(r2)
   147a8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   147ac:	e0bff317 	ldw	r2,-52(fp)
   147b0:	103fc51e 	bne	r2,zero,146c8 <__alt_data_end+0xfffe3988>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   147b4:	e0bff817 	ldw	r2,-32(fp)
   147b8:	e0ffff03 	ldbu	r3,-4(fp)
   147bc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   147c0:	e0bff817 	ldw	r2,-32(fp)
   147c4:	e0fffb03 	ldbu	r3,-20(fp)
   147c8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   147cc:	e0bff817 	ldw	r2,-32(fp)
   147d0:	e0fffb43 	ldbu	r3,-19(fp)
   147d4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   147d8:	e0bff817 	ldw	r2,-32(fp)
   147dc:	e0fffb83 	ldbu	r3,-18(fp)
   147e0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   147e4:	e0bff817 	ldw	r2,-32(fp)
   147e8:	e0fffbc3 	ldbu	r3,-17(fp)
   147ec:	10c00d45 	stb	r3,53(r2)
   147f0:	e0bff517 	ldw	r2,-44(fp)
   147f4:	e0bffa15 	stw	r2,-24(fp)
   147f8:	e0bffa17 	ldw	r2,-24(fp)
   147fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14800:	d0a72643 	ldbu	r2,-25447(gp)
   14804:	10803fcc 	andi	r2,r2,255
   14808:	10800058 	cmpnei	r2,r2,1
   1480c:	1000011e 	bne	r2,zero,14814 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   14810:	00101000 	call	10100 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14814:	0005883a 	mov	r2,zero
}
   14818:	e037883a 	mov	sp,fp
   1481c:	dfc00117 	ldw	ra,4(sp)
   14820:	df000017 	ldw	fp,0(sp)
   14824:	dec00204 	addi	sp,sp,8
   14828:	f800283a 	ret

0001482c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1482c:	deffee04 	addi	sp,sp,-72
   14830:	dfc01115 	stw	ra,68(sp)
   14834:	df001015 	stw	fp,64(sp)
   14838:	df001004 	addi	fp,sp,64
   1483c:	e13ffc15 	stw	r4,-16(fp)
   14840:	e17ffd15 	stw	r5,-12(fp)
   14844:	e1bffe15 	stw	r6,-8(fp)
   14848:	3805883a 	mov	r2,r7
   1484c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14850:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14854:	e0bfff03 	ldbu	r2,-4(fp)
   14858:	10800570 	cmpltui	r2,r2,21
   1485c:	1000021e 	bne	r2,zero,14868 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   14860:	00800a84 	movi	r2,42
   14864:	00005706 	br	149c4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14868:	0005303a 	rdctl	r2,status
   1486c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14870:	e0fffb17 	ldw	r3,-20(fp)
   14874:	00bfff84 	movi	r2,-2
   14878:	1884703a 	and	r2,r3,r2
   1487c:	1001703a 	wrctl	status,r2
  
  return context;
   14880:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14884:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14888:	d0a73403 	ldbu	r2,-25392(gp)
   1488c:	10803fcc 	andi	r2,r2,255
   14890:	10000626 	beq	r2,zero,148ac <OSTaskCreate+0x80>
   14894:	e0bff317 	ldw	r2,-52(fp)
   14898:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1489c:	e0bff417 	ldw	r2,-48(fp)
   148a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   148a4:	00800f04 	movi	r2,60
   148a8:	00004606 	br	149c4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   148ac:	e0ffff03 	ldbu	r3,-4(fp)
   148b0:	008000b4 	movhi	r2,2
   148b4:	10969b04 	addi	r2,r2,23148
   148b8:	18c7883a 	add	r3,r3,r3
   148bc:	18c7883a 	add	r3,r3,r3
   148c0:	10c5883a 	add	r2,r2,r3
   148c4:	10800017 	ldw	r2,0(r2)
   148c8:	1000391e 	bne	r2,zero,149b0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   148cc:	e0ffff03 	ldbu	r3,-4(fp)
   148d0:	008000b4 	movhi	r2,2
   148d4:	10969b04 	addi	r2,r2,23148
   148d8:	18c7883a 	add	r3,r3,r3
   148dc:	18c7883a 	add	r3,r3,r3
   148e0:	10c5883a 	add	r2,r2,r3
   148e4:	00c00044 	movi	r3,1
   148e8:	10c00015 	stw	r3,0(r2)
   148ec:	e0bff317 	ldw	r2,-52(fp)
   148f0:	e0bff515 	stw	r2,-44(fp)
   148f4:	e0bff517 	ldw	r2,-44(fp)
   148f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   148fc:	000f883a 	mov	r7,zero
   14900:	e1bffe17 	ldw	r6,-8(fp)
   14904:	e17ffd17 	ldw	r5,-12(fp)
   14908:	e13ffc17 	ldw	r4,-16(fp)
   1490c:	0017ad80 	call	17ad8 <OSTaskStkInit>
   14910:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   14914:	e0bfff03 	ldbu	r2,-4(fp)
   14918:	d8000215 	stw	zero,8(sp)
   1491c:	d8000115 	stw	zero,4(sp)
   14920:	d8000015 	stw	zero,0(sp)
   14924:	000f883a 	mov	r7,zero
   14928:	000d883a 	mov	r6,zero
   1492c:	e17ff717 	ldw	r5,-36(fp)
   14930:	1009883a 	mov	r4,r2
   14934:	00105000 	call	10500 <OS_TCBInit>
   14938:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1493c:	e0bff803 	ldbu	r2,-32(fp)
   14940:	1000061e 	bne	r2,zero,1495c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   14944:	d0a72643 	ldbu	r2,-25447(gp)
   14948:	10803fcc 	andi	r2,r2,255
   1494c:	10800058 	cmpnei	r2,r2,1
   14950:	1000151e 	bne	r2,zero,149a8 <OSTaskCreate+0x17c>
                OS_Sched();
   14954:	00101000 	call	10100 <OS_Sched>
   14958:	00001306 	br	149a8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1495c:	0005303a 	rdctl	r2,status
   14960:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14964:	e0fffa17 	ldw	r3,-24(fp)
   14968:	00bfff84 	movi	r2,-2
   1496c:	1884703a 	and	r2,r3,r2
   14970:	1001703a 	wrctl	status,r2
  
  return context;
   14974:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14978:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1497c:	e0ffff03 	ldbu	r3,-4(fp)
   14980:	008000b4 	movhi	r2,2
   14984:	10969b04 	addi	r2,r2,23148
   14988:	18c7883a 	add	r3,r3,r3
   1498c:	18c7883a 	add	r3,r3,r3
   14990:	10c5883a 	add	r2,r2,r3
   14994:	10000015 	stw	zero,0(r2)
   14998:	e0bff317 	ldw	r2,-52(fp)
   1499c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149a0:	e0bff617 	ldw	r2,-40(fp)
   149a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   149a8:	e0bff803 	ldbu	r2,-32(fp)
   149ac:	00000506 	br	149c4 <OSTaskCreate+0x198>
   149b0:	e0bff317 	ldw	r2,-52(fp)
   149b4:	e0bff915 	stw	r2,-28(fp)
   149b8:	e0bff917 	ldw	r2,-28(fp)
   149bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   149c0:	00800a04 	movi	r2,40
}
   149c4:	e037883a 	mov	sp,fp
   149c8:	dfc00117 	ldw	ra,4(sp)
   149cc:	df000017 	ldw	fp,0(sp)
   149d0:	dec00204 	addi	sp,sp,8
   149d4:	f800283a 	ret

000149d8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   149d8:	deffec04 	addi	sp,sp,-80
   149dc:	dfc01315 	stw	ra,76(sp)
   149e0:	df001215 	stw	fp,72(sp)
   149e4:	df001204 	addi	fp,sp,72
   149e8:	e13ffa15 	stw	r4,-24(fp)
   149ec:	e17ffb15 	stw	r5,-20(fp)
   149f0:	e1bffc15 	stw	r6,-16(fp)
   149f4:	3809883a 	mov	r4,r7
   149f8:	e0c00217 	ldw	r3,8(fp)
   149fc:	e0800617 	ldw	r2,24(fp)
   14a00:	e13ffd05 	stb	r4,-12(fp)
   14a04:	e0fffe0d 	sth	r3,-8(fp)
   14a08:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   14a0c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   14a10:	e0bffd03 	ldbu	r2,-12(fp)
   14a14:	10800570 	cmpltui	r2,r2,21
   14a18:	1000021e 	bne	r2,zero,14a24 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   14a1c:	00800a84 	movi	r2,42
   14a20:	00006106 	br	14ba8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a24:	0005303a 	rdctl	r2,status
   14a28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a2c:	e0fff917 	ldw	r3,-28(fp)
   14a30:	00bfff84 	movi	r2,-2
   14a34:	1884703a 	and	r2,r3,r2
   14a38:	1001703a 	wrctl	status,r2
  
  return context;
   14a3c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a40:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   14a44:	d0a73403 	ldbu	r2,-25392(gp)
   14a48:	10803fcc 	andi	r2,r2,255
   14a4c:	10000626 	beq	r2,zero,14a68 <OSTaskCreateExt+0x90>
   14a50:	e0bff117 	ldw	r2,-60(fp)
   14a54:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14a58:	e0bff217 	ldw	r2,-56(fp)
   14a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   14a60:	00800f04 	movi	r2,60
   14a64:	00005006 	br	14ba8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   14a68:	e0fffd03 	ldbu	r3,-12(fp)
   14a6c:	008000b4 	movhi	r2,2
   14a70:	10969b04 	addi	r2,r2,23148
   14a74:	18c7883a 	add	r3,r3,r3
   14a78:	18c7883a 	add	r3,r3,r3
   14a7c:	10c5883a 	add	r2,r2,r3
   14a80:	10800017 	ldw	r2,0(r2)
   14a84:	1000431e 	bne	r2,zero,14b94 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   14a88:	e0fffd03 	ldbu	r3,-12(fp)
   14a8c:	008000b4 	movhi	r2,2
   14a90:	10969b04 	addi	r2,r2,23148
   14a94:	18c7883a 	add	r3,r3,r3
   14a98:	18c7883a 	add	r3,r3,r3
   14a9c:	10c5883a 	add	r2,r2,r3
   14aa0:	00c00044 	movi	r3,1
   14aa4:	10c00015 	stw	r3,0(r2)
   14aa8:	e0bff117 	ldw	r2,-60(fp)
   14aac:	e0bff315 	stw	r2,-52(fp)
   14ab0:	e0bff317 	ldw	r2,-52(fp)
   14ab4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   14ab8:	e0bfff0b 	ldhu	r2,-4(fp)
   14abc:	100d883a 	mov	r6,r2
   14ac0:	e1400417 	ldw	r5,16(fp)
   14ac4:	e1000317 	ldw	r4,12(fp)
   14ac8:	0015a380 	call	15a38 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   14acc:	e0bfff0b 	ldhu	r2,-4(fp)
   14ad0:	100f883a 	mov	r7,r2
   14ad4:	e1bffc17 	ldw	r6,-16(fp)
   14ad8:	e17ffb17 	ldw	r5,-20(fp)
   14adc:	e13ffa17 	ldw	r4,-24(fp)
   14ae0:	0017ad80 	call	17ad8 <OSTaskStkInit>
   14ae4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   14ae8:	e0fffd03 	ldbu	r3,-12(fp)
   14aec:	e13ffe0b 	ldhu	r4,-8(fp)
   14af0:	e0bfff0b 	ldhu	r2,-4(fp)
   14af4:	d8800215 	stw	r2,8(sp)
   14af8:	e0800517 	ldw	r2,20(fp)
   14afc:	d8800115 	stw	r2,4(sp)
   14b00:	e0800417 	ldw	r2,16(fp)
   14b04:	d8800015 	stw	r2,0(sp)
   14b08:	200f883a 	mov	r7,r4
   14b0c:	e1800317 	ldw	r6,12(fp)
   14b10:	e17ff517 	ldw	r5,-44(fp)
   14b14:	1809883a 	mov	r4,r3
   14b18:	00105000 	call	10500 <OS_TCBInit>
   14b1c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   14b20:	e0bff603 	ldbu	r2,-40(fp)
   14b24:	1000061e 	bne	r2,zero,14b40 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   14b28:	d0a72643 	ldbu	r2,-25447(gp)
   14b2c:	10803fcc 	andi	r2,r2,255
   14b30:	10800058 	cmpnei	r2,r2,1
   14b34:	1000151e 	bne	r2,zero,14b8c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   14b38:	00101000 	call	10100 <OS_Sched>
   14b3c:	00001306 	br	14b8c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b40:	0005303a 	rdctl	r2,status
   14b44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b48:	e0fff817 	ldw	r3,-32(fp)
   14b4c:	00bfff84 	movi	r2,-2
   14b50:	1884703a 	and	r2,r3,r2
   14b54:	1001703a 	wrctl	status,r2
  
  return context;
   14b58:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   14b5c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   14b60:	e0fffd03 	ldbu	r3,-12(fp)
   14b64:	008000b4 	movhi	r2,2
   14b68:	10969b04 	addi	r2,r2,23148
   14b6c:	18c7883a 	add	r3,r3,r3
   14b70:	18c7883a 	add	r3,r3,r3
   14b74:	10c5883a 	add	r2,r2,r3
   14b78:	10000015 	stw	zero,0(r2)
   14b7c:	e0bff117 	ldw	r2,-60(fp)
   14b80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14b84:	e0bff417 	ldw	r2,-48(fp)
   14b88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   14b8c:	e0bff603 	ldbu	r2,-40(fp)
   14b90:	00000506 	br	14ba8 <OSTaskCreateExt+0x1d0>
   14b94:	e0bff117 	ldw	r2,-60(fp)
   14b98:	e0bff715 	stw	r2,-36(fp)
   14b9c:	e0bff717 	ldw	r2,-36(fp)
   14ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   14ba4:	00800a04 	movi	r2,40
}
   14ba8:	e037883a 	mov	sp,fp
   14bac:	dfc00117 	ldw	ra,4(sp)
   14bb0:	df000017 	ldw	fp,0(sp)
   14bb4:	dec00204 	addi	sp,sp,8
   14bb8:	f800283a 	ret

00014bbc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   14bbc:	defff404 	addi	sp,sp,-48
   14bc0:	dfc00b15 	stw	ra,44(sp)
   14bc4:	df000a15 	stw	fp,40(sp)
   14bc8:	df000a04 	addi	fp,sp,40
   14bcc:	2005883a 	mov	r2,r4
   14bd0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   14bd4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   14bd8:	d0a73403 	ldbu	r2,-25392(gp)
   14bdc:	10803fcc 	andi	r2,r2,255
   14be0:	10000226 	beq	r2,zero,14bec <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   14be4:	00801004 	movi	r2,64
   14be8:	0000c006 	br	14eec <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   14bec:	e0bfff03 	ldbu	r2,-4(fp)
   14bf0:	10800518 	cmpnei	r2,r2,20
   14bf4:	1000021e 	bne	r2,zero,14c00 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   14bf8:	00800f84 	movi	r2,62
   14bfc:	0000bb06 	br	14eec <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   14c00:	e0bfff03 	ldbu	r2,-4(fp)
   14c04:	10800530 	cmpltui	r2,r2,20
   14c08:	1000051e 	bne	r2,zero,14c20 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   14c0c:	e0bfff03 	ldbu	r2,-4(fp)
   14c10:	10803fe0 	cmpeqi	r2,r2,255
   14c14:	1000021e 	bne	r2,zero,14c20 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   14c18:	00800a84 	movi	r2,42
   14c1c:	0000b306 	br	14eec <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c20:	0005303a 	rdctl	r2,status
   14c24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c28:	e0fffe17 	ldw	r3,-8(fp)
   14c2c:	00bfff84 	movi	r2,-2
   14c30:	1884703a 	and	r2,r3,r2
   14c34:	1001703a 	wrctl	status,r2
  
  return context;
   14c38:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   14c3c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   14c40:	e0bfff03 	ldbu	r2,-4(fp)
   14c44:	10803fd8 	cmpnei	r2,r2,255
   14c48:	1000031e 	bne	r2,zero,14c58 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   14c4c:	d0a73517 	ldw	r2,-25388(gp)
   14c50:	10800c83 	ldbu	r2,50(r2)
   14c54:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   14c58:	e0ffff03 	ldbu	r3,-4(fp)
   14c5c:	008000b4 	movhi	r2,2
   14c60:	10969b04 	addi	r2,r2,23148
   14c64:	18c7883a 	add	r3,r3,r3
   14c68:	18c7883a 	add	r3,r3,r3
   14c6c:	10c5883a 	add	r2,r2,r3
   14c70:	10800017 	ldw	r2,0(r2)
   14c74:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   14c78:	e0bff817 	ldw	r2,-32(fp)
   14c7c:	1000061e 	bne	r2,zero,14c98 <OSTaskDel+0xdc>
   14c80:	e0bff617 	ldw	r2,-40(fp)
   14c84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c88:	e0bff717 	ldw	r2,-36(fp)
   14c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   14c90:	008010c4 	movi	r2,67
   14c94:	00009506 	br	14eec <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   14c98:	e0bff817 	ldw	r2,-32(fp)
   14c9c:	10800058 	cmpnei	r2,r2,1
   14ca0:	1000061e 	bne	r2,zero,14cbc <OSTaskDel+0x100>
   14ca4:	e0bff617 	ldw	r2,-40(fp)
   14ca8:	e0bff915 	stw	r2,-28(fp)
   14cac:	e0bff917 	ldw	r2,-28(fp)
   14cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   14cb4:	00800f44 	movi	r2,61
   14cb8:	00008c06 	br	14eec <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   14cbc:	e0bff817 	ldw	r2,-32(fp)
   14cc0:	10800d03 	ldbu	r2,52(r2)
   14cc4:	10c03fcc 	andi	r3,r2,255
   14cc8:	e0bff817 	ldw	r2,-32(fp)
   14ccc:	10800d03 	ldbu	r2,52(r2)
   14cd0:	11003fcc 	andi	r4,r2,255
   14cd4:	d0a73244 	addi	r2,gp,-25399
   14cd8:	2085883a 	add	r2,r4,r2
   14cdc:	10800003 	ldbu	r2,0(r2)
   14ce0:	1009883a 	mov	r4,r2
   14ce4:	e0bff817 	ldw	r2,-32(fp)
   14ce8:	10800d43 	ldbu	r2,53(r2)
   14cec:	0084303a 	nor	r2,zero,r2
   14cf0:	2084703a 	and	r2,r4,r2
   14cf4:	1009883a 	mov	r4,r2
   14cf8:	d0a73244 	addi	r2,gp,-25399
   14cfc:	1885883a 	add	r2,r3,r2
   14d00:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   14d04:	e0bff817 	ldw	r2,-32(fp)
   14d08:	10800d03 	ldbu	r2,52(r2)
   14d0c:	10c03fcc 	andi	r3,r2,255
   14d10:	d0a73244 	addi	r2,gp,-25399
   14d14:	1885883a 	add	r2,r3,r2
   14d18:	10800003 	ldbu	r2,0(r2)
   14d1c:	10803fcc 	andi	r2,r2,255
   14d20:	1000071e 	bne	r2,zero,14d40 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   14d24:	e0bff817 	ldw	r2,-32(fp)
   14d28:	10800d83 	ldbu	r2,54(r2)
   14d2c:	0084303a 	nor	r2,zero,r2
   14d30:	1007883a 	mov	r3,r2
   14d34:	d0a73203 	ldbu	r2,-25400(gp)
   14d38:	1884703a 	and	r2,r3,r2
   14d3c:	d0a73205 	stb	r2,-25400(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   14d40:	e0bff817 	ldw	r2,-32(fp)
   14d44:	10800717 	ldw	r2,28(r2)
   14d48:	10000526 	beq	r2,zero,14d60 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   14d4c:	e0bff817 	ldw	r2,-32(fp)
   14d50:	10800717 	ldw	r2,28(r2)
   14d54:	100b883a 	mov	r5,r2
   14d58:	e13ff817 	ldw	r4,-32(fp)
   14d5c:	000faac0 	call	faac <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   14d60:	e0bff817 	ldw	r2,-32(fp)
   14d64:	10800817 	ldw	r2,32(r2)
   14d68:	10000526 	beq	r2,zero,14d80 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14d6c:	e0bff817 	ldw	r2,-32(fp)
   14d70:	10800817 	ldw	r2,32(r2)
   14d74:	100b883a 	mov	r5,r2
   14d78:	e13ff817 	ldw	r4,-32(fp)
   14d7c:	000fb640 	call	fb64 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   14d80:	e0bff817 	ldw	r2,-32(fp)
   14d84:	10800a17 	ldw	r2,40(r2)
   14d88:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   14d8c:	e0bffb17 	ldw	r2,-20(fp)
   14d90:	10000226 	beq	r2,zero,14d9c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   14d94:	e13ffb17 	ldw	r4,-20(fp)
   14d98:	0011fd40 	call	11fd4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   14d9c:	e0bff817 	ldw	r2,-32(fp)
   14da0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   14da4:	e0bff817 	ldw	r2,-32(fp)
   14da8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14dac:	e0bff817 	ldw	r2,-32(fp)
   14db0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   14db4:	d0a72603 	ldbu	r2,-25448(gp)
   14db8:	10803fcc 	andi	r2,r2,255
   14dbc:	10803fe0 	cmpeqi	r2,r2,255
   14dc0:	1000031e 	bne	r2,zero,14dd0 <OSTaskDel+0x214>
        OSLockNesting++;
   14dc4:	d0a72603 	ldbu	r2,-25448(gp)
   14dc8:	10800044 	addi	r2,r2,1
   14dcc:	d0a72605 	stb	r2,-25448(gp)
   14dd0:	e0bff617 	ldw	r2,-40(fp)
   14dd4:	e0bffd15 	stw	r2,-12(fp)
   14dd8:	e0bffd17 	ldw	r2,-12(fp)
   14ddc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   14de0:	000f6940 	call	f694 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14de4:	0005303a 	rdctl	r2,status
   14de8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14dec:	e0fffa17 	ldw	r3,-24(fp)
   14df0:	00bfff84 	movi	r2,-2
   14df4:	1884703a 	and	r2,r3,r2
   14df8:	1001703a 	wrctl	status,r2
  
  return context;
   14dfc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   14e00:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   14e04:	d0a72603 	ldbu	r2,-25448(gp)
   14e08:	10803fcc 	andi	r2,r2,255
   14e0c:	10000326 	beq	r2,zero,14e1c <OSTaskDel+0x260>
        OSLockNesting--;
   14e10:	d0a72603 	ldbu	r2,-25448(gp)
   14e14:	10bfffc4 	addi	r2,r2,-1
   14e18:	d0a72605 	stb	r2,-25448(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   14e1c:	e13ff817 	ldw	r4,-32(fp)
   14e20:	0017c580 	call	17c58 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   14e24:	d0a72e43 	ldbu	r2,-25415(gp)
   14e28:	10bfffc4 	addi	r2,r2,-1
   14e2c:	d0a72e45 	stb	r2,-25415(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   14e30:	e0ffff03 	ldbu	r3,-4(fp)
   14e34:	008000b4 	movhi	r2,2
   14e38:	10969b04 	addi	r2,r2,23148
   14e3c:	18c7883a 	add	r3,r3,r3
   14e40:	18c7883a 	add	r3,r3,r3
   14e44:	10c5883a 	add	r2,r2,r3
   14e48:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   14e4c:	e0bff817 	ldw	r2,-32(fp)
   14e50:	10800617 	ldw	r2,24(r2)
   14e54:	1000071e 	bne	r2,zero,14e74 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   14e58:	e0bff817 	ldw	r2,-32(fp)
   14e5c:	10800517 	ldw	r2,20(r2)
   14e60:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   14e64:	e0bff817 	ldw	r2,-32(fp)
   14e68:	10800517 	ldw	r2,20(r2)
   14e6c:	d0a72915 	stw	r2,-25436(gp)
   14e70:	00000a06 	br	14e9c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   14e74:	e0bff817 	ldw	r2,-32(fp)
   14e78:	10800617 	ldw	r2,24(r2)
   14e7c:	e0fff817 	ldw	r3,-32(fp)
   14e80:	18c00517 	ldw	r3,20(r3)
   14e84:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   14e88:	e0bff817 	ldw	r2,-32(fp)
   14e8c:	10800517 	ldw	r2,20(r2)
   14e90:	e0fff817 	ldw	r3,-32(fp)
   14e94:	18c00617 	ldw	r3,24(r3)
   14e98:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   14e9c:	d0e72d17 	ldw	r3,-25420(gp)
   14ea0:	e0bff817 	ldw	r2,-32(fp)
   14ea4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   14ea8:	e0bff817 	ldw	r2,-32(fp)
   14eac:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   14eb0:	e0bff817 	ldw	r2,-32(fp)
   14eb4:	00c00fc4 	movi	r3,63
   14eb8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   14ebc:	e0bff817 	ldw	r2,-32(fp)
   14ec0:	10001345 	stb	zero,77(r2)
   14ec4:	e0bff617 	ldw	r2,-40(fp)
   14ec8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ecc:	e0bffc17 	ldw	r2,-16(fp)
   14ed0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   14ed4:	d0a72643 	ldbu	r2,-25447(gp)
   14ed8:	10803fcc 	andi	r2,r2,255
   14edc:	10800058 	cmpnei	r2,r2,1
   14ee0:	1000011e 	bne	r2,zero,14ee8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   14ee4:	00101000 	call	10100 <OS_Sched>
    }
    return (OS_ERR_NONE);
   14ee8:	0005883a 	mov	r2,zero
}
   14eec:	e037883a 	mov	sp,fp
   14ef0:	dfc00117 	ldw	ra,4(sp)
   14ef4:	df000017 	ldw	fp,0(sp)
   14ef8:	dec00204 	addi	sp,sp,8
   14efc:	f800283a 	ret

00014f00 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   14f00:	defff504 	addi	sp,sp,-44
   14f04:	df000a15 	stw	fp,40(sp)
   14f08:	df000a04 	addi	fp,sp,40
   14f0c:	2005883a 	mov	r2,r4
   14f10:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14f14:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   14f18:	e0bfff03 	ldbu	r2,-4(fp)
   14f1c:	10800518 	cmpnei	r2,r2,20
   14f20:	1000021e 	bne	r2,zero,14f2c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   14f24:	00800f84 	movi	r2,62
   14f28:	00004506 	br	15040 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   14f2c:	e0bfff03 	ldbu	r2,-4(fp)
   14f30:	10800530 	cmpltui	r2,r2,20
   14f34:	1000051e 	bne	r2,zero,14f4c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   14f38:	e0bfff03 	ldbu	r2,-4(fp)
   14f3c:	10803fe0 	cmpeqi	r2,r2,255
   14f40:	1000021e 	bne	r2,zero,14f4c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   14f44:	00800a84 	movi	r2,42
   14f48:	00003d06 	br	15040 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   14f4c:	e0bfff03 	ldbu	r2,-4(fp)
   14f50:	10803fd8 	cmpnei	r2,r2,255
   14f54:	1000111e 	bne	r2,zero,14f9c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f58:	0005303a 	rdctl	r2,status
   14f5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f60:	e0fff917 	ldw	r3,-28(fp)
   14f64:	00bfff84 	movi	r2,-2
   14f68:	1884703a 	and	r2,r3,r2
   14f6c:	1001703a 	wrctl	status,r2
  
  return context;
   14f70:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   14f74:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   14f78:	d0a73517 	ldw	r2,-25388(gp)
   14f7c:	10800dc3 	ldbu	r2,55(r2)
   14f80:	e0bff805 	stb	r2,-32(fp)
   14f84:	e0bff617 	ldw	r2,-40(fp)
   14f88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14f8c:	e0bffe17 	ldw	r2,-8(fp)
   14f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   14f94:	e0bff803 	ldbu	r2,-32(fp)
   14f98:	00002906 	br	15040 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f9c:	0005303a 	rdctl	r2,status
   14fa0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14fa4:	e0fff717 	ldw	r3,-36(fp)
   14fa8:	00bfff84 	movi	r2,-2
   14fac:	1884703a 	and	r2,r3,r2
   14fb0:	1001703a 	wrctl	status,r2
  
  return context;
   14fb4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   14fb8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   14fbc:	e0ffff03 	ldbu	r3,-4(fp)
   14fc0:	008000b4 	movhi	r2,2
   14fc4:	10969b04 	addi	r2,r2,23148
   14fc8:	18c7883a 	add	r3,r3,r3
   14fcc:	18c7883a 	add	r3,r3,r3
   14fd0:	10c5883a 	add	r2,r2,r3
   14fd4:	10800017 	ldw	r2,0(r2)
   14fd8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   14fdc:	e0bffb17 	ldw	r2,-20(fp)
   14fe0:	1000061e 	bne	r2,zero,14ffc <OSTaskDelReq+0xfc>
   14fe4:	e0bff617 	ldw	r2,-40(fp)
   14fe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14fec:	e0bffa17 	ldw	r2,-24(fp)
   14ff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   14ff4:	008010c4 	movi	r2,67
   14ff8:	00001106 	br	15040 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   14ffc:	e0bffb17 	ldw	r2,-20(fp)
   15000:	10800058 	cmpnei	r2,r2,1
   15004:	1000061e 	bne	r2,zero,15020 <OSTaskDelReq+0x120>
   15008:	e0bff617 	ldw	r2,-40(fp)
   1500c:	e0bffc15 	stw	r2,-16(fp)
   15010:	e0bffc17 	ldw	r2,-16(fp)
   15014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   15018:	00800f44 	movi	r2,61
   1501c:	00000806 	br	15040 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   15020:	e0bffb17 	ldw	r2,-20(fp)
   15024:	00c00fc4 	movi	r3,63
   15028:	10c00dc5 	stb	r3,55(r2)
   1502c:	e0bff617 	ldw	r2,-40(fp)
   15030:	e0bffd15 	stw	r2,-12(fp)
   15034:	e0bffd17 	ldw	r2,-12(fp)
   15038:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1503c:	0005883a 	mov	r2,zero
}
   15040:	e037883a 	mov	sp,fp
   15044:	df000017 	ldw	fp,0(sp)
   15048:	dec00104 	addi	sp,sp,4
   1504c:	f800283a 	ret

00015050 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   15050:	defff404 	addi	sp,sp,-48
   15054:	dfc00b15 	stw	ra,44(sp)
   15058:	df000a15 	stw	fp,40(sp)
   1505c:	df000a04 	addi	fp,sp,40
   15060:	2005883a 	mov	r2,r4
   15064:	e17ffe15 	stw	r5,-8(fp)
   15068:	e1bfff15 	stw	r6,-4(fp)
   1506c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   15070:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   15074:	e0bfff17 	ldw	r2,-4(fp)
   15078:	1000021e 	bne	r2,zero,15084 <OSTaskNameGet+0x34>
        return (0);
   1507c:	0005883a 	mov	r2,zero
   15080:	00005406 	br	151d4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   15084:	e0bffd03 	ldbu	r2,-12(fp)
   15088:	10800570 	cmpltui	r2,r2,21
   1508c:	1000081e 	bne	r2,zero,150b0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   15090:	e0bffd03 	ldbu	r2,-12(fp)
   15094:	10803fe0 	cmpeqi	r2,r2,255
   15098:	1000051e 	bne	r2,zero,150b0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1509c:	e0bfff17 	ldw	r2,-4(fp)
   150a0:	00c00a84 	movi	r3,42
   150a4:	10c00005 	stb	r3,0(r2)
            return (0);
   150a8:	0005883a 	mov	r2,zero
   150ac:	00004906 	br	151d4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   150b0:	e0bffe17 	ldw	r2,-8(fp)
   150b4:	1000051e 	bne	r2,zero,150cc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   150b8:	e0bfff17 	ldw	r2,-4(fp)
   150bc:	00c00304 	movi	r3,12
   150c0:	10c00005 	stb	r3,0(r2)
        return (0);
   150c4:	0005883a 	mov	r2,zero
   150c8:	00004206 	br	151d4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   150cc:	d0a73403 	ldbu	r2,-25392(gp)
   150d0:	10803fcc 	andi	r2,r2,255
   150d4:	10000526 	beq	r2,zero,150ec <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   150d8:	e0bfff17 	ldw	r2,-4(fp)
   150dc:	00c00444 	movi	r3,17
   150e0:	10c00005 	stb	r3,0(r2)
        return (0);
   150e4:	0005883a 	mov	r2,zero
   150e8:	00003a06 	br	151d4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   150ec:	0005303a 	rdctl	r2,status
   150f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   150f4:	e0fffc17 	ldw	r3,-16(fp)
   150f8:	00bfff84 	movi	r2,-2
   150fc:	1884703a 	and	r2,r3,r2
   15100:	1001703a 	wrctl	status,r2
  
  return context;
   15104:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15108:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1510c:	e0bffd03 	ldbu	r2,-12(fp)
   15110:	10803fd8 	cmpnei	r2,r2,255
   15114:	1000031e 	bne	r2,zero,15124 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   15118:	d0a73517 	ldw	r2,-25388(gp)
   1511c:	10800c83 	ldbu	r2,50(r2)
   15120:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15124:	e0fffd03 	ldbu	r3,-12(fp)
   15128:	008000b4 	movhi	r2,2
   1512c:	10969b04 	addi	r2,r2,23148
   15130:	18c7883a 	add	r3,r3,r3
   15134:	18c7883a 	add	r3,r3,r3
   15138:	10c5883a 	add	r2,r2,r3
   1513c:	10800017 	ldw	r2,0(r2)
   15140:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   15144:	e0bff817 	ldw	r2,-32(fp)
   15148:	1000091e 	bne	r2,zero,15170 <OSTaskNameGet+0x120>
   1514c:	e0bff617 	ldw	r2,-40(fp)
   15150:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15154:	e0bff717 	ldw	r2,-36(fp)
   15158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1515c:	e0bfff17 	ldw	r2,-4(fp)
   15160:	00c010c4 	movi	r3,67
   15164:	10c00005 	stb	r3,0(r2)
        return (0);
   15168:	0005883a 	mov	r2,zero
   1516c:	00001906 	br	151d4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   15170:	e0bff817 	ldw	r2,-32(fp)
   15174:	10800058 	cmpnei	r2,r2,1
   15178:	1000091e 	bne	r2,zero,151a0 <OSTaskNameGet+0x150>
   1517c:	e0bff617 	ldw	r2,-40(fp)
   15180:	e0bff915 	stw	r2,-28(fp)
   15184:	e0bff917 	ldw	r2,-28(fp)
   15188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1518c:	e0bfff17 	ldw	r2,-4(fp)
   15190:	00c010c4 	movi	r3,67
   15194:	10c00005 	stb	r3,0(r2)
        return (0);
   15198:	0005883a 	mov	r2,zero
   1519c:	00000d06 	br	151d4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   151a0:	e0bff817 	ldw	r2,-32(fp)
   151a4:	10801304 	addi	r2,r2,76
   151a8:	100b883a 	mov	r5,r2
   151ac:	e13ffe17 	ldw	r4,-8(fp)
   151b0:	00102440 	call	10244 <OS_StrCopy>
   151b4:	e0bffb05 	stb	r2,-20(fp)
   151b8:	e0bff617 	ldw	r2,-40(fp)
   151bc:	e0bffa15 	stw	r2,-24(fp)
   151c0:	e0bffa17 	ldw	r2,-24(fp)
   151c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   151c8:	e0bfff17 	ldw	r2,-4(fp)
   151cc:	10000005 	stb	zero,0(r2)
    return (len);
   151d0:	e0bffb03 	ldbu	r2,-20(fp)
}
   151d4:	e037883a 	mov	sp,fp
   151d8:	dfc00117 	ldw	ra,4(sp)
   151dc:	df000017 	ldw	fp,0(sp)
   151e0:	dec00204 	addi	sp,sp,8
   151e4:	f800283a 	ret

000151e8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   151e8:	defff304 	addi	sp,sp,-52
   151ec:	dfc00c15 	stw	ra,48(sp)
   151f0:	df000b15 	stw	fp,44(sp)
   151f4:	df000b04 	addi	fp,sp,44
   151f8:	2005883a 	mov	r2,r4
   151fc:	e17ffe15 	stw	r5,-8(fp)
   15200:	e1bfff15 	stw	r6,-4(fp)
   15204:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   15208:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1520c:	e0bfff17 	ldw	r2,-4(fp)
   15210:	10005c26 	beq	r2,zero,15384 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   15214:	e0bffd03 	ldbu	r2,-12(fp)
   15218:	10800570 	cmpltui	r2,r2,21
   1521c:	1000071e 	bne	r2,zero,1523c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   15220:	e0bffd03 	ldbu	r2,-12(fp)
   15224:	10803fe0 	cmpeqi	r2,r2,255
   15228:	1000041e 	bne	r2,zero,1523c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1522c:	e0bfff17 	ldw	r2,-4(fp)
   15230:	00c00a84 	movi	r3,42
   15234:	10c00005 	stb	r3,0(r2)
            return;
   15238:	00005306 	br	15388 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1523c:	e0bffe17 	ldw	r2,-8(fp)
   15240:	1000041e 	bne	r2,zero,15254 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   15244:	e0bfff17 	ldw	r2,-4(fp)
   15248:	00c00304 	movi	r3,12
   1524c:	10c00005 	stb	r3,0(r2)
        return;
   15250:	00004d06 	br	15388 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   15254:	d0a73403 	ldbu	r2,-25392(gp)
   15258:	10803fcc 	andi	r2,r2,255
   1525c:	10000426 	beq	r2,zero,15270 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	00c00484 	movi	r3,18
   15268:	10c00005 	stb	r3,0(r2)
        return;
   1526c:	00004606 	br	15388 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15270:	0005303a 	rdctl	r2,status
   15274:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15278:	e0fffc17 	ldw	r3,-16(fp)
   1527c:	00bfff84 	movi	r2,-2
   15280:	1884703a 	and	r2,r3,r2
   15284:	1001703a 	wrctl	status,r2
  
  return context;
   15288:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1528c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   15290:	e0bffd03 	ldbu	r2,-12(fp)
   15294:	10803fd8 	cmpnei	r2,r2,255
   15298:	1000031e 	bne	r2,zero,152a8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1529c:	d0a73517 	ldw	r2,-25388(gp)
   152a0:	10800c83 	ldbu	r2,50(r2)
   152a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   152a8:	e0fffd03 	ldbu	r3,-12(fp)
   152ac:	008000b4 	movhi	r2,2
   152b0:	10969b04 	addi	r2,r2,23148
   152b4:	18c7883a 	add	r3,r3,r3
   152b8:	18c7883a 	add	r3,r3,r3
   152bc:	10c5883a 	add	r2,r2,r3
   152c0:	10800017 	ldw	r2,0(r2)
   152c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   152c8:	e0bff717 	ldw	r2,-36(fp)
   152cc:	1000081e 	bne	r2,zero,152f0 <OSTaskNameSet+0x108>
   152d0:	e0bff517 	ldw	r2,-44(fp)
   152d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   152d8:	e0bff617 	ldw	r2,-40(fp)
   152dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   152e0:	e0bfff17 	ldw	r2,-4(fp)
   152e4:	00c010c4 	movi	r3,67
   152e8:	10c00005 	stb	r3,0(r2)
        return;
   152ec:	00002606 	br	15388 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   152f0:	e0bff717 	ldw	r2,-36(fp)
   152f4:	10800058 	cmpnei	r2,r2,1
   152f8:	1000081e 	bne	r2,zero,1531c <OSTaskNameSet+0x134>
   152fc:	e0bff517 	ldw	r2,-44(fp)
   15300:	e0bff815 	stw	r2,-32(fp)
   15304:	e0bff817 	ldw	r2,-32(fp)
   15308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1530c:	e0bfff17 	ldw	r2,-4(fp)
   15310:	00c010c4 	movi	r3,67
   15314:	10c00005 	stb	r3,0(r2)
        return;
   15318:	00001b06 	br	15388 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1531c:	e13ffe17 	ldw	r4,-8(fp)
   15320:	00102b80 	call	102b8 <OS_StrLen>
   15324:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   15328:	e0bffa03 	ldbu	r2,-24(fp)
   1532c:	10800830 	cmpltui	r2,r2,32
   15330:	1000081e 	bne	r2,zero,15354 <OSTaskNameSet+0x16c>
   15334:	e0bff517 	ldw	r2,-44(fp)
   15338:	e0bff915 	stw	r2,-28(fp)
   1533c:	e0bff917 	ldw	r2,-28(fp)
   15340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   15344:	e0bfff17 	ldw	r2,-4(fp)
   15348:	00c01044 	movi	r3,65
   1534c:	10c00005 	stb	r3,0(r2)
        return;
   15350:	00000d06 	br	15388 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   15354:	e0bff717 	ldw	r2,-36(fp)
   15358:	10801304 	addi	r2,r2,76
   1535c:	e17ffe17 	ldw	r5,-8(fp)
   15360:	1009883a 	mov	r4,r2
   15364:	00102440 	call	10244 <OS_StrCopy>
   15368:	e0bff517 	ldw	r2,-44(fp)
   1536c:	e0bffb15 	stw	r2,-20(fp)
   15370:	e0bffb17 	ldw	r2,-20(fp)
   15374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   15378:	e0bfff17 	ldw	r2,-4(fp)
   1537c:	10000005 	stb	zero,0(r2)
   15380:	00000106 	br	15388 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   15384:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   15388:	e037883a 	mov	sp,fp
   1538c:	dfc00117 	ldw	ra,4(sp)
   15390:	df000017 	ldw	fp,0(sp)
   15394:	dec00204 	addi	sp,sp,8
   15398:	f800283a 	ret

0001539c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1539c:	defff404 	addi	sp,sp,-48
   153a0:	dfc00b15 	stw	ra,44(sp)
   153a4:	df000a15 	stw	fp,40(sp)
   153a8:	df000a04 	addi	fp,sp,40
   153ac:	2005883a 	mov	r2,r4
   153b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   153b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   153b8:	e0bfff03 	ldbu	r2,-4(fp)
   153bc:	10800530 	cmpltui	r2,r2,20
   153c0:	1000021e 	bne	r2,zero,153cc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   153c4:	00800a84 	movi	r2,42
   153c8:	00006406 	br	1555c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153cc:	0005303a 	rdctl	r2,status
   153d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153d4:	e0fffe17 	ldw	r3,-8(fp)
   153d8:	00bfff84 	movi	r2,-2
   153dc:	1884703a 	and	r2,r3,r2
   153e0:	1001703a 	wrctl	status,r2
  
  return context;
   153e4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   153e8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   153ec:	e0ffff03 	ldbu	r3,-4(fp)
   153f0:	008000b4 	movhi	r2,2
   153f4:	10969b04 	addi	r2,r2,23148
   153f8:	18c7883a 	add	r3,r3,r3
   153fc:	18c7883a 	add	r3,r3,r3
   15400:	10c5883a 	add	r2,r2,r3
   15404:	10800017 	ldw	r2,0(r2)
   15408:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1540c:	e0bff817 	ldw	r2,-32(fp)
   15410:	1000061e 	bne	r2,zero,1542c <OSTaskResume+0x90>
   15414:	e0bff617 	ldw	r2,-40(fp)
   15418:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1541c:	e0bff717 	ldw	r2,-36(fp)
   15420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   15424:	00801184 	movi	r2,70
   15428:	00004c06 	br	1555c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1542c:	e0bff817 	ldw	r2,-32(fp)
   15430:	10800058 	cmpnei	r2,r2,1
   15434:	1000061e 	bne	r2,zero,15450 <OSTaskResume+0xb4>
   15438:	e0bff617 	ldw	r2,-40(fp)
   1543c:	e0bff915 	stw	r2,-28(fp)
   15440:	e0bff917 	ldw	r2,-28(fp)
   15444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15448:	008010c4 	movi	r2,67
   1544c:	00004306 	br	1555c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   15450:	e0bff817 	ldw	r2,-32(fp)
   15454:	10800c03 	ldbu	r2,48(r2)
   15458:	10803fcc 	andi	r2,r2,255
   1545c:	1080020c 	andi	r2,r2,8
   15460:	10003926 	beq	r2,zero,15548 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   15464:	e0bff817 	ldw	r2,-32(fp)
   15468:	10c00c03 	ldbu	r3,48(r2)
   1546c:	00bffdc4 	movi	r2,-9
   15470:	1884703a 	and	r2,r3,r2
   15474:	1007883a 	mov	r3,r2
   15478:	e0bff817 	ldw	r2,-32(fp)
   1547c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   15480:	e0bff817 	ldw	r2,-32(fp)
   15484:	10800c03 	ldbu	r2,48(r2)
   15488:	10803fcc 	andi	r2,r2,255
   1548c:	1000281e 	bne	r2,zero,15530 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   15490:	e0bff817 	ldw	r2,-32(fp)
   15494:	10800b8b 	ldhu	r2,46(r2)
   15498:	10bfffcc 	andi	r2,r2,65535
   1549c:	10001f1e 	bne	r2,zero,1551c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   154a0:	e0bff817 	ldw	r2,-32(fp)
   154a4:	10c00d83 	ldbu	r3,54(r2)
   154a8:	d0a73203 	ldbu	r2,-25400(gp)
   154ac:	1884b03a 	or	r2,r3,r2
   154b0:	d0a73205 	stb	r2,-25400(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   154b4:	e0bff817 	ldw	r2,-32(fp)
   154b8:	10800d03 	ldbu	r2,52(r2)
   154bc:	10c03fcc 	andi	r3,r2,255
   154c0:	e0bff817 	ldw	r2,-32(fp)
   154c4:	10800d03 	ldbu	r2,52(r2)
   154c8:	11003fcc 	andi	r4,r2,255
   154cc:	d0a73244 	addi	r2,gp,-25399
   154d0:	2085883a 	add	r2,r4,r2
   154d4:	11000003 	ldbu	r4,0(r2)
   154d8:	e0bff817 	ldw	r2,-32(fp)
   154dc:	10800d43 	ldbu	r2,53(r2)
   154e0:	2084b03a 	or	r2,r4,r2
   154e4:	1009883a 	mov	r4,r2
   154e8:	d0a73244 	addi	r2,gp,-25399
   154ec:	1885883a 	add	r2,r3,r2
   154f0:	11000005 	stb	r4,0(r2)
   154f4:	e0bff617 	ldw	r2,-40(fp)
   154f8:	e0bffa15 	stw	r2,-24(fp)
   154fc:	e0bffa17 	ldw	r2,-24(fp)
   15500:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   15504:	d0a72643 	ldbu	r2,-25447(gp)
   15508:	10803fcc 	andi	r2,r2,255
   1550c:	10800058 	cmpnei	r2,r2,1
   15510:	10000b1e 	bne	r2,zero,15540 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   15514:	00101000 	call	10100 <OS_Sched>
   15518:	00000906 	br	15540 <OSTaskResume+0x1a4>
   1551c:	e0bff617 	ldw	r2,-40(fp)
   15520:	e0bffb15 	stw	r2,-20(fp)
   15524:	e0bffb17 	ldw	r2,-20(fp)
   15528:	1001703a 	wrctl	status,r2
   1552c:	00000406 	br	15540 <OSTaskResume+0x1a4>
   15530:	e0bff617 	ldw	r2,-40(fp)
   15534:	e0bffc15 	stw	r2,-16(fp)
   15538:	e0bffc17 	ldw	r2,-16(fp)
   1553c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   15540:	0005883a 	mov	r2,zero
   15544:	00000506 	br	1555c <OSTaskResume+0x1c0>
   15548:	e0bff617 	ldw	r2,-40(fp)
   1554c:	e0bffd15 	stw	r2,-12(fp)
   15550:	e0bffd17 	ldw	r2,-12(fp)
   15554:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   15558:	00801104 	movi	r2,68
}
   1555c:	e037883a 	mov	sp,fp
   15560:	dfc00117 	ldw	ra,4(sp)
   15564:	df000017 	ldw	fp,0(sp)
   15568:	dec00204 	addi	sp,sp,8
   1556c:	f800283a 	ret

00015570 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   15570:	defff304 	addi	sp,sp,-52
   15574:	df000c15 	stw	fp,48(sp)
   15578:	df000c04 	addi	fp,sp,48
   1557c:	2005883a 	mov	r2,r4
   15580:	e17fff15 	stw	r5,-4(fp)
   15584:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15588:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1558c:	e0bffe03 	ldbu	r2,-8(fp)
   15590:	10800570 	cmpltui	r2,r2,21
   15594:	1000051e 	bne	r2,zero,155ac <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   15598:	e0bffe03 	ldbu	r2,-8(fp)
   1559c:	10803fe0 	cmpeqi	r2,r2,255
   155a0:	1000021e 	bne	r2,zero,155ac <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   155a4:	00800a84 	movi	r2,42
   155a8:	00005d06 	br	15720 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   155ac:	e0bfff17 	ldw	r2,-4(fp)
   155b0:	1000021e 	bne	r2,zero,155bc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   155b4:	00800244 	movi	r2,9
   155b8:	00005906 	br	15720 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   155bc:	e0bfff17 	ldw	r2,-4(fp)
   155c0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   155c4:	e0bfff17 	ldw	r2,-4(fp)
   155c8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   155cc:	0005303a 	rdctl	r2,status
   155d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   155d4:	e0fffd17 	ldw	r3,-12(fp)
   155d8:	00bfff84 	movi	r2,-2
   155dc:	1884703a 	and	r2,r3,r2
   155e0:	1001703a 	wrctl	status,r2
  
  return context;
   155e4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   155e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   155ec:	e0bffe03 	ldbu	r2,-8(fp)
   155f0:	10803fd8 	cmpnei	r2,r2,255
   155f4:	1000031e 	bne	r2,zero,15604 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   155f8:	d0a73517 	ldw	r2,-25388(gp)
   155fc:	10800c83 	ldbu	r2,50(r2)
   15600:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   15604:	e0fffe03 	ldbu	r3,-8(fp)
   15608:	008000b4 	movhi	r2,2
   1560c:	10969b04 	addi	r2,r2,23148
   15610:	18c7883a 	add	r3,r3,r3
   15614:	18c7883a 	add	r3,r3,r3
   15618:	10c5883a 	add	r2,r2,r3
   1561c:	10800017 	ldw	r2,0(r2)
   15620:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   15624:	e0bff817 	ldw	r2,-32(fp)
   15628:	1000061e 	bne	r2,zero,15644 <OSTaskStkChk+0xd4>
   1562c:	e0bff617 	ldw	r2,-40(fp)
   15630:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15634:	e0bff717 	ldw	r2,-36(fp)
   15638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1563c:	008010c4 	movi	r2,67
   15640:	00003706 	br	15720 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15644:	e0bff817 	ldw	r2,-32(fp)
   15648:	10800058 	cmpnei	r2,r2,1
   1564c:	1000061e 	bne	r2,zero,15668 <OSTaskStkChk+0xf8>
   15650:	e0bff617 	ldw	r2,-40(fp)
   15654:	e0bff915 	stw	r2,-28(fp)
   15658:	e0bff917 	ldw	r2,-28(fp)
   1565c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15660:	008010c4 	movi	r2,67
   15664:	00002e06 	br	15720 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   15668:	e0bff817 	ldw	r2,-32(fp)
   1566c:	1080040b 	ldhu	r2,16(r2)
   15670:	10bfffcc 	andi	r2,r2,65535
   15674:	1080004c 	andi	r2,r2,1
   15678:	1000061e 	bne	r2,zero,15694 <OSTaskStkChk+0x124>
   1567c:	e0bff617 	ldw	r2,-40(fp)
   15680:	e0bffa15 	stw	r2,-24(fp)
   15684:	e0bffa17 	ldw	r2,-24(fp)
   15688:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1568c:	00801144 	movi	r2,69
   15690:	00002306 	br	15720 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   15694:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   15698:	e0bff817 	ldw	r2,-32(fp)
   1569c:	10800317 	ldw	r2,12(r2)
   156a0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   156a4:	e0bff817 	ldw	r2,-32(fp)
   156a8:	10800217 	ldw	r2,8(r2)
   156ac:	e0bff415 	stw	r2,-48(fp)
   156b0:	e0bff617 	ldw	r2,-40(fp)
   156b4:	e0bffb15 	stw	r2,-20(fp)
   156b8:	e0bffb17 	ldw	r2,-20(fp)
   156bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   156c0:	00000306 	br	156d0 <OSTaskStkChk+0x160>
        nfree++;
   156c4:	e0bff517 	ldw	r2,-44(fp)
   156c8:	10800044 	addi	r2,r2,1
   156cc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   156d0:	e0bff417 	ldw	r2,-48(fp)
   156d4:	10c00104 	addi	r3,r2,4
   156d8:	e0fff415 	stw	r3,-48(fp)
   156dc:	10800017 	ldw	r2,0(r2)
   156e0:	103ff826 	beq	r2,zero,156c4 <__alt_data_end+0xfffe4984>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   156e4:	e0bff517 	ldw	r2,-44(fp)
   156e8:	1085883a 	add	r2,r2,r2
   156ec:	1085883a 	add	r2,r2,r2
   156f0:	1007883a 	mov	r3,r2
   156f4:	e0bfff17 	ldw	r2,-4(fp)
   156f8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   156fc:	e0fffc17 	ldw	r3,-16(fp)
   15700:	e0bff517 	ldw	r2,-44(fp)
   15704:	1885c83a 	sub	r2,r3,r2
   15708:	1085883a 	add	r2,r2,r2
   1570c:	1085883a 	add	r2,r2,r2
   15710:	1007883a 	mov	r3,r2
   15714:	e0bfff17 	ldw	r2,-4(fp)
   15718:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1571c:	0005883a 	mov	r2,zero
}
   15720:	e037883a 	mov	sp,fp
   15724:	df000017 	ldw	fp,0(sp)
   15728:	dec00104 	addi	sp,sp,4
   1572c:	f800283a 	ret

00015730 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   15730:	defff504 	addi	sp,sp,-44
   15734:	dfc00a15 	stw	ra,40(sp)
   15738:	df000915 	stw	fp,36(sp)
   1573c:	df000904 	addi	fp,sp,36
   15740:	2005883a 	mov	r2,r4
   15744:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15748:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1574c:	e0bfff03 	ldbu	r2,-4(fp)
   15750:	10800518 	cmpnei	r2,r2,20
   15754:	1000021e 	bne	r2,zero,15760 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   15758:	008011c4 	movi	r2,71
   1575c:	00006806 	br	15900 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   15760:	e0bfff03 	ldbu	r2,-4(fp)
   15764:	10800530 	cmpltui	r2,r2,20
   15768:	1000051e 	bne	r2,zero,15780 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1576c:	e0bfff03 	ldbu	r2,-4(fp)
   15770:	10803fe0 	cmpeqi	r2,r2,255
   15774:	1000021e 	bne	r2,zero,15780 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   15778:	00800a84 	movi	r2,42
   1577c:	00006006 	br	15900 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15780:	0005303a 	rdctl	r2,status
   15784:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15788:	e0fffe17 	ldw	r3,-8(fp)
   1578c:	00bfff84 	movi	r2,-2
   15790:	1884703a 	and	r2,r3,r2
   15794:	1001703a 	wrctl	status,r2
  
  return context;
   15798:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1579c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   157a0:	e0bfff03 	ldbu	r2,-4(fp)
   157a4:	10803fd8 	cmpnei	r2,r2,255
   157a8:	1000061e 	bne	r2,zero,157c4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   157ac:	d0a73517 	ldw	r2,-25388(gp)
   157b0:	10800c83 	ldbu	r2,50(r2)
   157b4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   157b8:	00800044 	movi	r2,1
   157bc:	e0bff705 	stb	r2,-36(fp)
   157c0:	00000906 	br	157e8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   157c4:	d0a73517 	ldw	r2,-25388(gp)
   157c8:	10800c83 	ldbu	r2,50(r2)
   157cc:	10c03fcc 	andi	r3,r2,255
   157d0:	e0bfff03 	ldbu	r2,-4(fp)
   157d4:	1880031e 	bne	r3,r2,157e4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   157d8:	00800044 	movi	r2,1
   157dc:	e0bff705 	stb	r2,-36(fp)
   157e0:	00000106 	br	157e8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   157e4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   157e8:	e0ffff03 	ldbu	r3,-4(fp)
   157ec:	008000b4 	movhi	r2,2
   157f0:	10969b04 	addi	r2,r2,23148
   157f4:	18c7883a 	add	r3,r3,r3
   157f8:	18c7883a 	add	r3,r3,r3
   157fc:	10c5883a 	add	r2,r2,r3
   15800:	10800017 	ldw	r2,0(r2)
   15804:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   15808:	e0bffa17 	ldw	r2,-24(fp)
   1580c:	1000061e 	bne	r2,zero,15828 <OSTaskSuspend+0xf8>
   15810:	e0bff817 	ldw	r2,-32(fp)
   15814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15818:	e0bff917 	ldw	r2,-28(fp)
   1581c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   15820:	00801204 	movi	r2,72
   15824:	00003606 	br	15900 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   15828:	e0bffa17 	ldw	r2,-24(fp)
   1582c:	10800058 	cmpnei	r2,r2,1
   15830:	1000061e 	bne	r2,zero,1584c <OSTaskSuspend+0x11c>
   15834:	e0bff817 	ldw	r2,-32(fp)
   15838:	e0bffb15 	stw	r2,-20(fp)
   1583c:	e0bffb17 	ldw	r2,-20(fp)
   15840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   15844:	008010c4 	movi	r2,67
   15848:	00002d06 	br	15900 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1584c:	e0bffa17 	ldw	r2,-24(fp)
   15850:	10800d03 	ldbu	r2,52(r2)
   15854:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   15858:	e0fffd03 	ldbu	r3,-12(fp)
   1585c:	e13ffd03 	ldbu	r4,-12(fp)
   15860:	d0a73244 	addi	r2,gp,-25399
   15864:	2085883a 	add	r2,r4,r2
   15868:	10800003 	ldbu	r2,0(r2)
   1586c:	1009883a 	mov	r4,r2
   15870:	e0bffa17 	ldw	r2,-24(fp)
   15874:	10800d43 	ldbu	r2,53(r2)
   15878:	0084303a 	nor	r2,zero,r2
   1587c:	2084703a 	and	r2,r4,r2
   15880:	1009883a 	mov	r4,r2
   15884:	d0a73244 	addi	r2,gp,-25399
   15888:	1885883a 	add	r2,r3,r2
   1588c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   15890:	e0fffd03 	ldbu	r3,-12(fp)
   15894:	d0a73244 	addi	r2,gp,-25399
   15898:	1885883a 	add	r2,r3,r2
   1589c:	10800003 	ldbu	r2,0(r2)
   158a0:	10803fcc 	andi	r2,r2,255
   158a4:	1000071e 	bne	r2,zero,158c4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   158a8:	e0bffa17 	ldw	r2,-24(fp)
   158ac:	10800d83 	ldbu	r2,54(r2)
   158b0:	0084303a 	nor	r2,zero,r2
   158b4:	1007883a 	mov	r3,r2
   158b8:	d0a73203 	ldbu	r2,-25400(gp)
   158bc:	1884703a 	and	r2,r3,r2
   158c0:	d0a73205 	stb	r2,-25400(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   158c4:	e0bffa17 	ldw	r2,-24(fp)
   158c8:	10800c03 	ldbu	r2,48(r2)
   158cc:	10800214 	ori	r2,r2,8
   158d0:	1007883a 	mov	r3,r2
   158d4:	e0bffa17 	ldw	r2,-24(fp)
   158d8:	10c00c05 	stb	r3,48(r2)
   158dc:	e0bff817 	ldw	r2,-32(fp)
   158e0:	e0bffc15 	stw	r2,-16(fp)
   158e4:	e0bffc17 	ldw	r2,-16(fp)
   158e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   158ec:	e0bff703 	ldbu	r2,-36(fp)
   158f0:	10800058 	cmpnei	r2,r2,1
   158f4:	1000011e 	bne	r2,zero,158fc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   158f8:	00101000 	call	10100 <OS_Sched>
    }
    return (OS_ERR_NONE);
   158fc:	0005883a 	mov	r2,zero
}
   15900:	e037883a 	mov	sp,fp
   15904:	dfc00117 	ldw	ra,4(sp)
   15908:	df000017 	ldw	fp,0(sp)
   1590c:	dec00204 	addi	sp,sp,8
   15910:	f800283a 	ret

00015914 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   15914:	defff604 	addi	sp,sp,-40
   15918:	dfc00915 	stw	ra,36(sp)
   1591c:	df000815 	stw	fp,32(sp)
   15920:	df000804 	addi	fp,sp,32
   15924:	2005883a 	mov	r2,r4
   15928:	e17fff15 	stw	r5,-4(fp)
   1592c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15930:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   15934:	e0bffe03 	ldbu	r2,-8(fp)
   15938:	10800570 	cmpltui	r2,r2,21
   1593c:	1000051e 	bne	r2,zero,15954 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   15940:	e0bffe03 	ldbu	r2,-8(fp)
   15944:	10803fe0 	cmpeqi	r2,r2,255
   15948:	1000021e 	bne	r2,zero,15954 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1594c:	00800a84 	movi	r2,42
   15950:	00003406 	br	15a24 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   15954:	e0bfff17 	ldw	r2,-4(fp)
   15958:	1000021e 	bne	r2,zero,15964 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1595c:	00800244 	movi	r2,9
   15960:	00003006 	br	15a24 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15964:	0005303a 	rdctl	r2,status
   15968:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1596c:	e0fffd17 	ldw	r3,-12(fp)
   15970:	00bfff84 	movi	r2,-2
   15974:	1884703a 	and	r2,r3,r2
   15978:	1001703a 	wrctl	status,r2
  
  return context;
   1597c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   15980:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   15984:	e0bffe03 	ldbu	r2,-8(fp)
   15988:	10803fd8 	cmpnei	r2,r2,255
   1598c:	1000031e 	bne	r2,zero,1599c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   15990:	d0a73517 	ldw	r2,-25388(gp)
   15994:	10800c83 	ldbu	r2,50(r2)
   15998:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1599c:	e0fffe03 	ldbu	r3,-8(fp)
   159a0:	008000b4 	movhi	r2,2
   159a4:	10969b04 	addi	r2,r2,23148
   159a8:	18c7883a 	add	r3,r3,r3
   159ac:	18c7883a 	add	r3,r3,r3
   159b0:	10c5883a 	add	r2,r2,r3
   159b4:	10800017 	ldw	r2,0(r2)
   159b8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   159bc:	e0bffa17 	ldw	r2,-24(fp)
   159c0:	1000061e 	bne	r2,zero,159dc <OSTaskQuery+0xc8>
   159c4:	e0bff817 	ldw	r2,-32(fp)
   159c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159cc:	e0bff917 	ldw	r2,-28(fp)
   159d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   159d4:	00800a44 	movi	r2,41
   159d8:	00001206 	br	15a24 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   159dc:	e0bffa17 	ldw	r2,-24(fp)
   159e0:	10800058 	cmpnei	r2,r2,1
   159e4:	1000061e 	bne	r2,zero,15a00 <OSTaskQuery+0xec>
   159e8:	e0bff817 	ldw	r2,-32(fp)
   159ec:	e0bffb15 	stw	r2,-20(fp)
   159f0:	e0bffb17 	ldw	r2,-20(fp)
   159f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   159f8:	008010c4 	movi	r2,67
   159fc:	00000906 	br	15a24 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   15a00:	01801b04 	movi	r6,108
   15a04:	e17ffa17 	ldw	r5,-24(fp)
   15a08:	e13fff17 	ldw	r4,-4(fp)
   15a0c:	00100980 	call	10098 <OS_MemCopy>
   15a10:	e0bff817 	ldw	r2,-32(fp)
   15a14:	e0bffc15 	stw	r2,-16(fp)
   15a18:	e0bffc17 	ldw	r2,-16(fp)
   15a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15a20:	0005883a 	mov	r2,zero
}
   15a24:	e037883a 	mov	sp,fp
   15a28:	dfc00117 	ldw	ra,4(sp)
   15a2c:	df000017 	ldw	fp,0(sp)
   15a30:	dec00204 	addi	sp,sp,8
   15a34:	f800283a 	ret

00015a38 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   15a38:	defffc04 	addi	sp,sp,-16
   15a3c:	df000315 	stw	fp,12(sp)
   15a40:	df000304 	addi	fp,sp,12
   15a44:	e13ffd15 	stw	r4,-12(fp)
   15a48:	e17ffe15 	stw	r5,-8(fp)
   15a4c:	3005883a 	mov	r2,r6
   15a50:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   15a54:	e0bfff0b 	ldhu	r2,-4(fp)
   15a58:	1080004c 	andi	r2,r2,1
   15a5c:	10000d26 	beq	r2,zero,15a94 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   15a60:	e0bfff0b 	ldhu	r2,-4(fp)
   15a64:	1080008c 	andi	r2,r2,2
   15a68:	10000a26 	beq	r2,zero,15a94 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15a6c:	00000706 	br	15a8c <OS_TaskStkClr+0x54>
                size--;
   15a70:	e0bffe17 	ldw	r2,-8(fp)
   15a74:	10bfffc4 	addi	r2,r2,-1
   15a78:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   15a7c:	e0bffd17 	ldw	r2,-12(fp)
   15a80:	10c00104 	addi	r3,r2,4
   15a84:	e0fffd15 	stw	r3,-12(fp)
   15a88:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   15a8c:	e0bffe17 	ldw	r2,-8(fp)
   15a90:	103ff71e 	bne	r2,zero,15a70 <__alt_data_end+0xfffe4d30>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   15a94:	0001883a 	nop
   15a98:	e037883a 	mov	sp,fp
   15a9c:	df000017 	ldw	fp,0(sp)
   15aa0:	dec00104 	addi	sp,sp,4
   15aa4:	f800283a 	ret

00015aa8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   15aa8:	defff904 	addi	sp,sp,-28
   15aac:	dfc00615 	stw	ra,24(sp)
   15ab0:	df000515 	stw	fp,20(sp)
   15ab4:	df000504 	addi	fp,sp,20
   15ab8:	2005883a 	mov	r2,r4
   15abc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15ac0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15ac4:	d0a73403 	ldbu	r2,-25392(gp)
   15ac8:	10803fcc 	andi	r2,r2,255
   15acc:	1000311e 	bne	r2,zero,15b94 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   15ad0:	e0bfff0b 	ldhu	r2,-4(fp)
   15ad4:	10003026 	beq	r2,zero,15b98 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15ad8:	0005303a 	rdctl	r2,status
   15adc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15ae0:	e0fffe17 	ldw	r3,-8(fp)
   15ae4:	00bfff84 	movi	r2,-2
   15ae8:	1884703a 	and	r2,r3,r2
   15aec:	1001703a 	wrctl	status,r2
  
  return context;
   15af0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   15af4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   15af8:	d0a73517 	ldw	r2,-25388(gp)
   15afc:	10800d03 	ldbu	r2,52(r2)
   15b00:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   15b04:	e0fffd03 	ldbu	r3,-12(fp)
   15b08:	e13ffd03 	ldbu	r4,-12(fp)
   15b0c:	d0a73244 	addi	r2,gp,-25399
   15b10:	2085883a 	add	r2,r4,r2
   15b14:	10800003 	ldbu	r2,0(r2)
   15b18:	1009883a 	mov	r4,r2
   15b1c:	d0a73517 	ldw	r2,-25388(gp)
   15b20:	10800d43 	ldbu	r2,53(r2)
   15b24:	0084303a 	nor	r2,zero,r2
   15b28:	2084703a 	and	r2,r4,r2
   15b2c:	1009883a 	mov	r4,r2
   15b30:	d0a73244 	addi	r2,gp,-25399
   15b34:	1885883a 	add	r2,r3,r2
   15b38:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   15b3c:	e0fffd03 	ldbu	r3,-12(fp)
   15b40:	d0a73244 	addi	r2,gp,-25399
   15b44:	1885883a 	add	r2,r3,r2
   15b48:	10800003 	ldbu	r2,0(r2)
   15b4c:	10803fcc 	andi	r2,r2,255
   15b50:	1000071e 	bne	r2,zero,15b70 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   15b54:	d0a73517 	ldw	r2,-25388(gp)
   15b58:	10800d83 	ldbu	r2,54(r2)
   15b5c:	0084303a 	nor	r2,zero,r2
   15b60:	1007883a 	mov	r3,r2
   15b64:	d0a73203 	ldbu	r2,-25400(gp)
   15b68:	1884703a 	and	r2,r3,r2
   15b6c:	d0a73205 	stb	r2,-25400(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   15b70:	d0a73517 	ldw	r2,-25388(gp)
   15b74:	e0ffff0b 	ldhu	r3,-4(fp)
   15b78:	10c00b8d 	sth	r3,46(r2)
   15b7c:	e0bffb17 	ldw	r2,-20(fp)
   15b80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b84:	e0bffc17 	ldw	r2,-16(fp)
   15b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   15b8c:	00101000 	call	10100 <OS_Sched>
   15b90:	00000106 	br	15b98 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   15b94:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   15b98:	e037883a 	mov	sp,fp
   15b9c:	dfc00117 	ldw	ra,4(sp)
   15ba0:	df000017 	ldw	fp,0(sp)
   15ba4:	dec00204 	addi	sp,sp,8
   15ba8:	f800283a 	ret

00015bac <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   15bac:	defff704 	addi	sp,sp,-36
   15bb0:	dfc00815 	stw	ra,32(sp)
   15bb4:	df000715 	stw	fp,28(sp)
   15bb8:	dc000615 	stw	r16,24(sp)
   15bbc:	df000704 	addi	fp,sp,28
   15bc0:	2011883a 	mov	r8,r4
   15bc4:	2809883a 	mov	r4,r5
   15bc8:	3007883a 	mov	r3,r6
   15bcc:	3805883a 	mov	r2,r7
   15bd0:	e23ffb05 	stb	r8,-20(fp)
   15bd4:	e13ffc05 	stb	r4,-16(fp)
   15bd8:	e0fffd05 	stb	r3,-12(fp)
   15bdc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   15be0:	d0a73403 	ldbu	r2,-25392(gp)
   15be4:	10803fcc 	andi	r2,r2,255
   15be8:	10000226 	beq	r2,zero,15bf4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   15bec:	00801544 	movi	r2,85
   15bf0:	00004706 	br	15d10 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   15bf4:	e0bffb03 	ldbu	r2,-20(fp)
   15bf8:	1000081e 	bne	r2,zero,15c1c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   15bfc:	e0bffc03 	ldbu	r2,-16(fp)
   15c00:	1000061e 	bne	r2,zero,15c1c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   15c04:	e0bffd03 	ldbu	r2,-12(fp)
   15c08:	1000041e 	bne	r2,zero,15c1c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   15c0c:	e0bffe0b 	ldhu	r2,-8(fp)
   15c10:	1000021e 	bne	r2,zero,15c1c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   15c14:	00801504 	movi	r2,84
   15c18:	00003d06 	br	15d10 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   15c1c:	e0bffc03 	ldbu	r2,-16(fp)
   15c20:	10800f30 	cmpltui	r2,r2,60
   15c24:	1000021e 	bne	r2,zero,15c30 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   15c28:	00801444 	movi	r2,81
   15c2c:	00003806 	br	15d10 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   15c30:	e0bffd03 	ldbu	r2,-12(fp)
   15c34:	10800f30 	cmpltui	r2,r2,60
   15c38:	1000021e 	bne	r2,zero,15c44 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   15c3c:	00801484 	movi	r2,82
   15c40:	00003306 	br	15d10 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   15c44:	e0bffe0b 	ldhu	r2,-8(fp)
   15c48:	1080fa30 	cmpltui	r2,r2,1000
   15c4c:	1000021e 	bne	r2,zero,15c58 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   15c50:	008014c4 	movi	r2,83
   15c54:	00002e06 	br	15d10 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15c58:	e0bffb03 	ldbu	r2,-20(fp)
   15c5c:	01438404 	movi	r5,3600
   15c60:	1009883a 	mov	r4,r2
   15c64:	0000bc00 	call	bc0 <__mulsi3>
   15c68:	1021883a 	mov	r16,r2
   15c6c:	e0bffc03 	ldbu	r2,-16(fp)
   15c70:	01400f04 	movi	r5,60
   15c74:	1009883a 	mov	r4,r2
   15c78:	0000bc00 	call	bc0 <__mulsi3>
   15c7c:	8087883a 	add	r3,r16,r2
   15c80:	e0bffd03 	ldbu	r2,-12(fp)
   15c84:	1885883a 	add	r2,r3,r2
   15c88:	0140fa04 	movi	r5,1000
   15c8c:	1009883a 	mov	r4,r2
   15c90:	0000bc00 	call	bc0 <__mulsi3>
   15c94:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   15c98:	e0bffe0b 	ldhu	r2,-8(fp)
   15c9c:	0140fa04 	movi	r5,1000
   15ca0:	1009883a 	mov	r4,r2
   15ca4:	0000bc00 	call	bc0 <__mulsi3>
   15ca8:	0140fa04 	movi	r5,1000
   15cac:	1009883a 	mov	r4,r2
   15cb0:	0000b040 	call	b04 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   15cb4:	8085883a 	add	r2,r16,r2
   15cb8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   15cbc:	e0bffa17 	ldw	r2,-24(fp)
   15cc0:	1004d43a 	srli	r2,r2,16
   15cc4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   15cc8:	e0bffa17 	ldw	r2,-24(fp)
   15ccc:	10bfffcc 	andi	r2,r2,65535
   15cd0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   15cd4:	e0bffa17 	ldw	r2,-24(fp)
   15cd8:	10bfffcc 	andi	r2,r2,65535
   15cdc:	1009883a 	mov	r4,r2
   15ce0:	0015aa80 	call	15aa8 <OSTimeDly>
    while (loops > 0) {
   15ce4:	00000706 	br	15d04 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   15ce8:	01200014 	movui	r4,32768
   15cec:	0015aa80 	call	15aa8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   15cf0:	01200014 	movui	r4,32768
   15cf4:	0015aa80 	call	15aa8 <OSTimeDly>
        loops--;
   15cf8:	e0bff90b 	ldhu	r2,-28(fp)
   15cfc:	10bfffc4 	addi	r2,r2,-1
   15d00:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   15d04:	e0bff90b 	ldhu	r2,-28(fp)
   15d08:	103ff71e 	bne	r2,zero,15ce8 <__alt_data_end+0xfffe4fa8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   15d0c:	0005883a 	mov	r2,zero
}
   15d10:	e6ffff04 	addi	sp,fp,-4
   15d14:	dfc00217 	ldw	ra,8(sp)
   15d18:	df000117 	ldw	fp,4(sp)
   15d1c:	dc000017 	ldw	r16,0(sp)
   15d20:	dec00304 	addi	sp,sp,12
   15d24:	f800283a 	ret

00015d28 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   15d28:	defff504 	addi	sp,sp,-44
   15d2c:	dfc00a15 	stw	ra,40(sp)
   15d30:	df000915 	stw	fp,36(sp)
   15d34:	df000904 	addi	fp,sp,36
   15d38:	2005883a 	mov	r2,r4
   15d3c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15d40:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   15d44:	e0bfff03 	ldbu	r2,-4(fp)
   15d48:	10800530 	cmpltui	r2,r2,20
   15d4c:	1000021e 	bne	r2,zero,15d58 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   15d50:	00800a84 	movi	r2,42
   15d54:	00006406 	br	15ee8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d58:	0005303a 	rdctl	r2,status
   15d5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d60:	e0fffe17 	ldw	r3,-8(fp)
   15d64:	00bfff84 	movi	r2,-2
   15d68:	1884703a 	and	r2,r3,r2
   15d6c:	1001703a 	wrctl	status,r2
  
  return context;
   15d70:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15d74:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   15d78:	e0ffff03 	ldbu	r3,-4(fp)
   15d7c:	008000b4 	movhi	r2,2
   15d80:	10969b04 	addi	r2,r2,23148
   15d84:	18c7883a 	add	r3,r3,r3
   15d88:	18c7883a 	add	r3,r3,r3
   15d8c:	10c5883a 	add	r2,r2,r3
   15d90:	10800017 	ldw	r2,0(r2)
   15d94:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   15d98:	e0bff917 	ldw	r2,-28(fp)
   15d9c:	1000061e 	bne	r2,zero,15db8 <OSTimeDlyResume+0x90>
   15da0:	e0bff717 	ldw	r2,-36(fp)
   15da4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15da8:	e0bff817 	ldw	r2,-32(fp)
   15dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15db0:	008010c4 	movi	r2,67
   15db4:	00004c06 	br	15ee8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   15db8:	e0bff917 	ldw	r2,-28(fp)
   15dbc:	10800058 	cmpnei	r2,r2,1
   15dc0:	1000061e 	bne	r2,zero,15ddc <OSTimeDlyResume+0xb4>
   15dc4:	e0bff717 	ldw	r2,-36(fp)
   15dc8:	e0bffa15 	stw	r2,-24(fp)
   15dcc:	e0bffa17 	ldw	r2,-24(fp)
   15dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   15dd4:	008010c4 	movi	r2,67
   15dd8:	00004306 	br	15ee8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   15ddc:	e0bff917 	ldw	r2,-28(fp)
   15de0:	10800b8b 	ldhu	r2,46(r2)
   15de4:	10bfffcc 	andi	r2,r2,65535
   15de8:	1000061e 	bne	r2,zero,15e04 <OSTimeDlyResume+0xdc>
   15dec:	e0bff717 	ldw	r2,-36(fp)
   15df0:	e0bffb15 	stw	r2,-20(fp)
   15df4:	e0bffb17 	ldw	r2,-20(fp)
   15df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   15dfc:	00801404 	movi	r2,80
   15e00:	00003906 	br	15ee8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   15e04:	e0bff917 	ldw	r2,-28(fp)
   15e08:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   15e0c:	e0bff917 	ldw	r2,-28(fp)
   15e10:	10800c03 	ldbu	r2,48(r2)
   15e14:	10803fcc 	andi	r2,r2,255
   15e18:	10800dcc 	andi	r2,r2,55
   15e1c:	10000b26 	beq	r2,zero,15e4c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   15e20:	e0bff917 	ldw	r2,-28(fp)
   15e24:	10c00c03 	ldbu	r3,48(r2)
   15e28:	00bff204 	movi	r2,-56
   15e2c:	1884703a 	and	r2,r3,r2
   15e30:	1007883a 	mov	r3,r2
   15e34:	e0bff917 	ldw	r2,-28(fp)
   15e38:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   15e3c:	e0bff917 	ldw	r2,-28(fp)
   15e40:	00c00044 	movi	r3,1
   15e44:	10c00c45 	stb	r3,49(r2)
   15e48:	00000206 	br	15e54 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   15e4c:	e0bff917 	ldw	r2,-28(fp)
   15e50:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   15e54:	e0bff917 	ldw	r2,-28(fp)
   15e58:	10800c03 	ldbu	r2,48(r2)
   15e5c:	10803fcc 	andi	r2,r2,255
   15e60:	1080020c 	andi	r2,r2,8
   15e64:	10001b1e 	bne	r2,zero,15ed4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   15e68:	e0bff917 	ldw	r2,-28(fp)
   15e6c:	10c00d83 	ldbu	r3,54(r2)
   15e70:	d0a73203 	ldbu	r2,-25400(gp)
   15e74:	1884b03a 	or	r2,r3,r2
   15e78:	d0a73205 	stb	r2,-25400(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15e7c:	e0bff917 	ldw	r2,-28(fp)
   15e80:	10800d03 	ldbu	r2,52(r2)
   15e84:	10c03fcc 	andi	r3,r2,255
   15e88:	e0bff917 	ldw	r2,-28(fp)
   15e8c:	10800d03 	ldbu	r2,52(r2)
   15e90:	11003fcc 	andi	r4,r2,255
   15e94:	d0a73244 	addi	r2,gp,-25399
   15e98:	2085883a 	add	r2,r4,r2
   15e9c:	11000003 	ldbu	r4,0(r2)
   15ea0:	e0bff917 	ldw	r2,-28(fp)
   15ea4:	10800d43 	ldbu	r2,53(r2)
   15ea8:	2084b03a 	or	r2,r4,r2
   15eac:	1009883a 	mov	r4,r2
   15eb0:	d0a73244 	addi	r2,gp,-25399
   15eb4:	1885883a 	add	r2,r3,r2
   15eb8:	11000005 	stb	r4,0(r2)
   15ebc:	e0bff717 	ldw	r2,-36(fp)
   15ec0:	e0bffc15 	stw	r2,-16(fp)
   15ec4:	e0bffc17 	ldw	r2,-16(fp)
   15ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   15ecc:	00101000 	call	10100 <OS_Sched>
   15ed0:	00000406 	br	15ee4 <OSTimeDlyResume+0x1bc>
   15ed4:	e0bff717 	ldw	r2,-36(fp)
   15ed8:	e0bffd15 	stw	r2,-12(fp)
   15edc:	e0bffd17 	ldw	r2,-12(fp)
   15ee0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   15ee4:	0005883a 	mov	r2,zero
}
   15ee8:	e037883a 	mov	sp,fp
   15eec:	dfc00117 	ldw	ra,4(sp)
   15ef0:	df000017 	ldw	fp,0(sp)
   15ef4:	dec00204 	addi	sp,sp,8
   15ef8:	f800283a 	ret

00015efc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   15efc:	defffb04 	addi	sp,sp,-20
   15f00:	df000415 	stw	fp,16(sp)
   15f04:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15f08:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f0c:	0005303a 	rdctl	r2,status
   15f10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f14:	e0fffe17 	ldw	r3,-8(fp)
   15f18:	00bfff84 	movi	r2,-2
   15f1c:	1884703a 	and	r2,r3,r2
   15f20:	1001703a 	wrctl	status,r2
  
  return context;
   15f24:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   15f28:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   15f2c:	d0a73617 	ldw	r2,-25384(gp)
   15f30:	e0bffd15 	stw	r2,-12(fp)
   15f34:	e0bffc17 	ldw	r2,-16(fp)
   15f38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f3c:	e0bfff17 	ldw	r2,-4(fp)
   15f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   15f44:	e0bffd17 	ldw	r2,-12(fp)
}
   15f48:	e037883a 	mov	sp,fp
   15f4c:	df000017 	ldw	fp,0(sp)
   15f50:	dec00104 	addi	sp,sp,4
   15f54:	f800283a 	ret

00015f58 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   15f58:	defffb04 	addi	sp,sp,-20
   15f5c:	df000415 	stw	fp,16(sp)
   15f60:	df000404 	addi	fp,sp,16
   15f64:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   15f68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15f6c:	0005303a 	rdctl	r2,status
   15f70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f74:	e0fffd17 	ldw	r3,-12(fp)
   15f78:	00bfff84 	movi	r2,-2
   15f7c:	1884703a 	and	r2,r3,r2
   15f80:	1001703a 	wrctl	status,r2
  
  return context;
   15f84:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   15f88:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   15f8c:	e0bfff17 	ldw	r2,-4(fp)
   15f90:	d0a73615 	stw	r2,-25384(gp)
   15f94:	e0bffc17 	ldw	r2,-16(fp)
   15f98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f9c:	e0bffe17 	ldw	r2,-8(fp)
   15fa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   15fa4:	0001883a 	nop
   15fa8:	e037883a 	mov	sp,fp
   15fac:	df000017 	ldw	fp,0(sp)
   15fb0:	dec00104 	addi	sp,sp,4
   15fb4:	f800283a 	ret

00015fb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   15fb8:	defffd04 	addi	sp,sp,-12
   15fbc:	dfc00215 	stw	ra,8(sp)
   15fc0:	df000115 	stw	fp,4(sp)
   15fc4:	df000104 	addi	fp,sp,4
   15fc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   15fcc:	d1600804 	addi	r5,gp,-32736
   15fd0:	e13fff17 	ldw	r4,-4(fp)
   15fd4:	00170380 	call	17038 <alt_dev_llist_insert>
}
   15fd8:	e037883a 	mov	sp,fp
   15fdc:	dfc00117 	ldw	ra,4(sp)
   15fe0:	df000017 	ldw	fp,0(sp)
   15fe4:	dec00204 	addi	sp,sp,8
   15fe8:	f800283a 	ret

00015fec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   15fec:	defffd04 	addi	sp,sp,-12
   15ff0:	dfc00215 	stw	ra,8(sp)
   15ff4:	df000115 	stw	fp,4(sp)
   15ff8:	df000104 	addi	fp,sp,4
   15ffc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   16000:	00179e40 	call	179e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   16004:	00800044 	movi	r2,1
   16008:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1600c:	0001883a 	nop
   16010:	e037883a 	mov	sp,fp
   16014:	dfc00117 	ldw	ra,4(sp)
   16018:	df000017 	ldw	fp,0(sp)
   1601c:	dec00204 	addi	sp,sp,8
   16020:	f800283a 	ret

00016024 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   16024:	defffe04 	addi	sp,sp,-8
   16028:	dfc00115 	stw	ra,4(sp)
   1602c:	df000015 	stw	fp,0(sp)
   16030:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   16034:	01c0fa04 	movi	r7,1000
   16038:	01800284 	movi	r6,10
   1603c:	000b883a 	mov	r5,zero
   16040:	01000134 	movhi	r4,4
   16044:	21080804 	addi	r4,r4,8224
   16048:	0016e340 	call	16e34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1604c:	01800204 	movi	r6,8
   16050:	000b883a 	mov	r5,zero
   16054:	010000b4 	movhi	r4,2
   16058:	2126c304 	addi	r4,r4,-25844
   1605c:	00161f40 	call	161f4 <altera_avalon_jtag_uart_init>
   16060:	010000b4 	movhi	r4,2
   16064:	2126b904 	addi	r4,r4,-25884
   16068:	0015fb80 	call	15fb8 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
   1606c:	010000b4 	movhi	r4,2
   16070:	212ad404 	addi	r4,r4,-21680
   16074:	0015fb80 	call	15fb8 <alt_dev_reg>
}
   16078:	0001883a 	nop
   1607c:	e037883a 	mov	sp,fp
   16080:	dfc00117 	ldw	ra,4(sp)
   16084:	df000017 	ldw	fp,0(sp)
   16088:	dec00204 	addi	sp,sp,8
   1608c:	f800283a 	ret

00016090 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   16090:	defffa04 	addi	sp,sp,-24
   16094:	dfc00515 	stw	ra,20(sp)
   16098:	df000415 	stw	fp,16(sp)
   1609c:	df000404 	addi	fp,sp,16
   160a0:	e13ffd15 	stw	r4,-12(fp)
   160a4:	e17ffe15 	stw	r5,-8(fp)
   160a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   160ac:	e0bffd17 	ldw	r2,-12(fp)
   160b0:	10800017 	ldw	r2,0(r2)
   160b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   160b8:	e0bffc17 	ldw	r2,-16(fp)
   160bc:	10c00a04 	addi	r3,r2,40
   160c0:	e0bffd17 	ldw	r2,-12(fp)
   160c4:	10800217 	ldw	r2,8(r2)
   160c8:	100f883a 	mov	r7,r2
   160cc:	e1bfff17 	ldw	r6,-4(fp)
   160d0:	e17ffe17 	ldw	r5,-8(fp)
   160d4:	1809883a 	mov	r4,r3
   160d8:	001683c0 	call	1683c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   160dc:	e037883a 	mov	sp,fp
   160e0:	dfc00117 	ldw	ra,4(sp)
   160e4:	df000017 	ldw	fp,0(sp)
   160e8:	dec00204 	addi	sp,sp,8
   160ec:	f800283a 	ret

000160f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   160f0:	defffa04 	addi	sp,sp,-24
   160f4:	dfc00515 	stw	ra,20(sp)
   160f8:	df000415 	stw	fp,16(sp)
   160fc:	df000404 	addi	fp,sp,16
   16100:	e13ffd15 	stw	r4,-12(fp)
   16104:	e17ffe15 	stw	r5,-8(fp)
   16108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1610c:	e0bffd17 	ldw	r2,-12(fp)
   16110:	10800017 	ldw	r2,0(r2)
   16114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   16118:	e0bffc17 	ldw	r2,-16(fp)
   1611c:	10c00a04 	addi	r3,r2,40
   16120:	e0bffd17 	ldw	r2,-12(fp)
   16124:	10800217 	ldw	r2,8(r2)
   16128:	100f883a 	mov	r7,r2
   1612c:	e1bfff17 	ldw	r6,-4(fp)
   16130:	e17ffe17 	ldw	r5,-8(fp)
   16134:	1809883a 	mov	r4,r3
   16138:	0016af80 	call	16af8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1613c:	e037883a 	mov	sp,fp
   16140:	dfc00117 	ldw	ra,4(sp)
   16144:	df000017 	ldw	fp,0(sp)
   16148:	dec00204 	addi	sp,sp,8
   1614c:	f800283a 	ret

00016150 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   16150:	defffc04 	addi	sp,sp,-16
   16154:	dfc00315 	stw	ra,12(sp)
   16158:	df000215 	stw	fp,8(sp)
   1615c:	df000204 	addi	fp,sp,8
   16160:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   16164:	e0bfff17 	ldw	r2,-4(fp)
   16168:	10800017 	ldw	r2,0(r2)
   1616c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   16170:	e0bffe17 	ldw	r2,-8(fp)
   16174:	10c00a04 	addi	r3,r2,40
   16178:	e0bfff17 	ldw	r2,-4(fp)
   1617c:	10800217 	ldw	r2,8(r2)
   16180:	100b883a 	mov	r5,r2
   16184:	1809883a 	mov	r4,r3
   16188:	00166e40 	call	166e4 <altera_avalon_jtag_uart_close>
}
   1618c:	e037883a 	mov	sp,fp
   16190:	dfc00117 	ldw	ra,4(sp)
   16194:	df000017 	ldw	fp,0(sp)
   16198:	dec00204 	addi	sp,sp,8
   1619c:	f800283a 	ret

000161a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   161a0:	defffa04 	addi	sp,sp,-24
   161a4:	dfc00515 	stw	ra,20(sp)
   161a8:	df000415 	stw	fp,16(sp)
   161ac:	df000404 	addi	fp,sp,16
   161b0:	e13ffd15 	stw	r4,-12(fp)
   161b4:	e17ffe15 	stw	r5,-8(fp)
   161b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   161bc:	e0bffd17 	ldw	r2,-12(fp)
   161c0:	10800017 	ldw	r2,0(r2)
   161c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   161c8:	e0bffc17 	ldw	r2,-16(fp)
   161cc:	10800a04 	addi	r2,r2,40
   161d0:	e1bfff17 	ldw	r6,-4(fp)
   161d4:	e17ffe17 	ldw	r5,-8(fp)
   161d8:	1009883a 	mov	r4,r2
   161dc:	001674c0 	call	1674c <altera_avalon_jtag_uart_ioctl>
}
   161e0:	e037883a 	mov	sp,fp
   161e4:	dfc00117 	ldw	ra,4(sp)
   161e8:	df000017 	ldw	fp,0(sp)
   161ec:	dec00204 	addi	sp,sp,8
   161f0:	f800283a 	ret

000161f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   161f4:	defff104 	addi	sp,sp,-60
   161f8:	dfc00e15 	stw	ra,56(sp)
   161fc:	df000d15 	stw	fp,52(sp)
   16200:	df000d04 	addi	fp,sp,52
   16204:	e13ff915 	stw	r4,-28(fp)
   16208:	e17ffa15 	stw	r5,-24(fp)
   1620c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   16210:	e0bff917 	ldw	r2,-28(fp)
   16214:	10800c04 	addi	r2,r2,48
   16218:	e0bff415 	stw	r2,-48(fp)
   1621c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   16220:	e0bff80b 	ldhu	r2,-32(fp)
   16224:	e0fff884 	addi	r3,fp,-30
   16228:	180b883a 	mov	r5,r3
   1622c:	1009883a 	mov	r4,r2
   16230:	0010c6c0 	call	10c6c <OSFlagCreate>
   16234:	1007883a 	mov	r3,r2
   16238:	e0bff417 	ldw	r2,-48(fp)
   1623c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   16240:	e0bff917 	ldw	r2,-28(fp)
   16244:	10800a04 	addi	r2,r2,40
   16248:	e0bff515 	stw	r2,-44(fp)
   1624c:	00800044 	movi	r2,1
   16250:	e0bff78d 	sth	r2,-34(fp)
   16254:	e0bff78b 	ldhu	r2,-34(fp)
   16258:	1009883a 	mov	r4,r2
   1625c:	001398c0 	call	1398c <OSSemCreate>
   16260:	1007883a 	mov	r3,r2
   16264:	e0bff517 	ldw	r2,-44(fp)
   16268:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1626c:	e0bff917 	ldw	r2,-28(fp)
   16270:	10800b04 	addi	r2,r2,44
   16274:	e0bff615 	stw	r2,-40(fp)
   16278:	00800044 	movi	r2,1
   1627c:	e0bff70d 	sth	r2,-36(fp)
   16280:	e0bff70b 	ldhu	r2,-36(fp)
   16284:	1009883a 	mov	r4,r2
   16288:	001398c0 	call	1398c <OSSemCreate>
   1628c:	1007883a 	mov	r3,r2
   16290:	e0bff617 	ldw	r2,-40(fp)
   16294:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16298:	e0bff917 	ldw	r2,-28(fp)
   1629c:	00c00044 	movi	r3,1
   162a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   162a4:	e0bff917 	ldw	r2,-28(fp)
   162a8:	10800017 	ldw	r2,0(r2)
   162ac:	10800104 	addi	r2,r2,4
   162b0:	1007883a 	mov	r3,r2
   162b4:	e0bff917 	ldw	r2,-28(fp)
   162b8:	10800817 	ldw	r2,32(r2)
   162bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   162c0:	e0bffa17 	ldw	r2,-24(fp)
   162c4:	e0fffb17 	ldw	r3,-20(fp)
   162c8:	d8000015 	stw	zero,0(sp)
   162cc:	e1fff917 	ldw	r7,-28(fp)
   162d0:	01800074 	movhi	r6,1
   162d4:	3198cf04 	addi	r6,r6,25404
   162d8:	180b883a 	mov	r5,r3
   162dc:	1009883a 	mov	r4,r2
   162e0:	00171bc0 	call	171bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   162e4:	e0bff917 	ldw	r2,-28(fp)
   162e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   162ec:	e0bff917 	ldw	r2,-28(fp)
   162f0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   162f4:	d0e73b17 	ldw	r3,-25364(gp)
   162f8:	e1fff917 	ldw	r7,-28(fp)
   162fc:	01800074 	movhi	r6,1
   16300:	31997804 	addi	r6,r6,26080
   16304:	180b883a 	mov	r5,r3
   16308:	1009883a 	mov	r4,r2
   1630c:	0016eb00 	call	16eb0 <alt_alarm_start>
   16310:	1000040e 	bge	r2,zero,16324 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   16314:	e0fff917 	ldw	r3,-28(fp)
   16318:	00a00034 	movhi	r2,32768
   1631c:	10bfffc4 	addi	r2,r2,-1
   16320:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   16324:	0001883a 	nop
   16328:	e037883a 	mov	sp,fp
   1632c:	dfc00117 	ldw	ra,4(sp)
   16330:	df000017 	ldw	fp,0(sp)
   16334:	dec00204 	addi	sp,sp,8
   16338:	f800283a 	ret

0001633c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1633c:	defff204 	addi	sp,sp,-56
   16340:	dfc00d15 	stw	ra,52(sp)
   16344:	df000c15 	stw	fp,48(sp)
   16348:	df000c04 	addi	fp,sp,48
   1634c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   16350:	e0bfff17 	ldw	r2,-4(fp)
   16354:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
   16358:	e0bff617 	ldw	r2,-40(fp)
   1635c:	10800017 	ldw	r2,0(r2)
   16360:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   16364:	e0bff717 	ldw	r2,-36(fp)
   16368:	10800104 	addi	r2,r2,4
   1636c:	10800037 	ldwio	r2,0(r2)
   16370:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   16374:	e0bff817 	ldw	r2,-32(fp)
   16378:	1080c00c 	andi	r2,r2,768
   1637c:	10009126 	beq	r2,zero,165c4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   16380:	e0bff817 	ldw	r2,-32(fp)
   16384:	1080400c 	andi	r2,r2,256
   16388:	10004726 	beq	r2,zero,164a8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1638c:	00800074 	movhi	r2,1
   16390:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16394:	e0bff617 	ldw	r2,-40(fp)
   16398:	10800d17 	ldw	r2,52(r2)
   1639c:	10800044 	addi	r2,r2,1
   163a0:	1081ffcc 	andi	r2,r2,2047
   163a4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
   163a8:	e0bff617 	ldw	r2,-40(fp)
   163ac:	10c00e17 	ldw	r3,56(r2)
   163b0:	e0bff917 	ldw	r2,-28(fp)
   163b4:	18802726 	beq	r3,r2,16454 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   163b8:	e0bff717 	ldw	r2,-36(fp)
   163bc:	10800037 	ldwio	r2,0(r2)
   163c0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   163c4:	e0bff417 	ldw	r2,-48(fp)
   163c8:	10a0000c 	andi	r2,r2,32768
   163cc:	10002326 	beq	r2,zero,1645c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   163d0:	e0bff617 	ldw	r2,-40(fp)
   163d4:	10800d17 	ldw	r2,52(r2)
   163d8:	e0fff417 	ldw	r3,-48(fp)
   163dc:	1809883a 	mov	r4,r3
   163e0:	e0fff617 	ldw	r3,-40(fp)
   163e4:	1885883a 	add	r2,r3,r2
   163e8:	10801104 	addi	r2,r2,68
   163ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   163f0:	e0bff617 	ldw	r2,-40(fp)
   163f4:	10800d17 	ldw	r2,52(r2)
   163f8:	10800044 	addi	r2,r2,1
   163fc:	10c1ffcc 	andi	r3,r2,2047
   16400:	e0bff617 	ldw	r2,-40(fp)
   16404:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   16408:	e0bff617 	ldw	r2,-40(fp)
   1640c:	10800c17 	ldw	r2,48(r2)
   16410:	e0bffb15 	stw	r2,-20(fp)
   16414:	00800044 	movi	r2,1
   16418:	e0bffc0d 	sth	r2,-16(fp)
   1641c:	00800044 	movi	r2,1
   16420:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16424:	d0a72643 	ldbu	r2,-25447(gp)
   16428:	10803fcc 	andi	r2,r2,255
   1642c:	103fd926 	beq	r2,zero,16394 <__alt_data_end+0xfffe5654>
  {
    OSFlagPost (group, flags, opt, &err);
   16430:	e0bffc0b 	ldhu	r2,-16(fp)
   16434:	e0fffc83 	ldbu	r3,-14(fp)
   16438:	e13ffdc4 	addi	r4,fp,-9
   1643c:	200f883a 	mov	r7,r4
   16440:	180d883a 	mov	r6,r3
   16444:	100b883a 	mov	r5,r2
   16448:	e13ffb17 	ldw	r4,-20(fp)
   1644c:	00118480 	call	11848 <OSFlagPost>
      }
   16450:	003fd006 	br	16394 <__alt_data_end+0xfffe5654>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   16454:	0001883a 	nop
   16458:	00000106 	br	16460 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1645c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   16460:	e0bff417 	ldw	r2,-48(fp)
   16464:	10bfffec 	andhi	r2,r2,65535
   16468:	10000f26 	beq	r2,zero,164a8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1646c:	e0bff617 	ldw	r2,-40(fp)
   16470:	10c00817 	ldw	r3,32(r2)
   16474:	00bfff84 	movi	r2,-2
   16478:	1886703a 	and	r3,r3,r2
   1647c:	e0bff617 	ldw	r2,-40(fp)
   16480:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   16484:	e0bff717 	ldw	r2,-36(fp)
   16488:	10800104 	addi	r2,r2,4
   1648c:	1007883a 	mov	r3,r2
   16490:	e0bff617 	ldw	r2,-40(fp)
   16494:	10800817 	ldw	r2,32(r2)
   16498:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1649c:	e0bff717 	ldw	r2,-36(fp)
   164a0:	10800104 	addi	r2,r2,4
   164a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   164a8:	e0bff817 	ldw	r2,-32(fp)
   164ac:	1080800c 	andi	r2,r2,512
   164b0:	103fac26 	beq	r2,zero,16364 <__alt_data_end+0xfffe5624>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   164b4:	e0bff817 	ldw	r2,-32(fp)
   164b8:	1004d43a 	srli	r2,r2,16
   164bc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   164c0:	00002606 	br	1655c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   164c4:	e0bff717 	ldw	r2,-36(fp)
   164c8:	e0fff617 	ldw	r3,-40(fp)
   164cc:	18c01017 	ldw	r3,64(r3)
   164d0:	e13ff617 	ldw	r4,-40(fp)
   164d4:	20c7883a 	add	r3,r4,r3
   164d8:	18c21104 	addi	r3,r3,2116
   164dc:	18c00003 	ldbu	r3,0(r3)
   164e0:	18c03fcc 	andi	r3,r3,255
   164e4:	18c0201c 	xori	r3,r3,128
   164e8:	18ffe004 	addi	r3,r3,-128
   164ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   164f0:	e0bff617 	ldw	r2,-40(fp)
   164f4:	10801017 	ldw	r2,64(r2)
   164f8:	10800044 	addi	r2,r2,1
   164fc:	10c1ffcc 	andi	r3,r2,2047
   16500:	e0bff617 	ldw	r2,-40(fp)
   16504:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   16508:	e0bff617 	ldw	r2,-40(fp)
   1650c:	10800c17 	ldw	r2,48(r2)
   16510:	e0bffa15 	stw	r2,-24(fp)
   16514:	00800084 	movi	r2,2
   16518:	e0bffd0d 	sth	r2,-12(fp)
   1651c:	00800044 	movi	r2,1
   16520:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   16524:	d0a72643 	ldbu	r2,-25447(gp)
   16528:	10803fcc 	andi	r2,r2,255
   1652c:	10000826 	beq	r2,zero,16550 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
   16530:	e0bffd0b 	ldhu	r2,-12(fp)
   16534:	e0fffd83 	ldbu	r3,-10(fp)
   16538:	e13ffe04 	addi	r4,fp,-8
   1653c:	200f883a 	mov	r7,r4
   16540:	180d883a 	mov	r6,r3
   16544:	100b883a 	mov	r5,r2
   16548:	e13ffa17 	ldw	r4,-24(fp)
   1654c:	00118480 	call	11848 <OSFlagPost>

        space--;
   16550:	e0bff517 	ldw	r2,-44(fp)
   16554:	10bfffc4 	addi	r2,r2,-1
   16558:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1655c:	e0bff517 	ldw	r2,-44(fp)
   16560:	10000526 	beq	r2,zero,16578 <altera_avalon_jtag_uart_irq+0x23c>
   16564:	e0bff617 	ldw	r2,-40(fp)
   16568:	10c01017 	ldw	r3,64(r2)
   1656c:	e0bff617 	ldw	r2,-40(fp)
   16570:	10800f17 	ldw	r2,60(r2)
   16574:	18bfd31e 	bne	r3,r2,164c4 <__alt_data_end+0xfffe5784>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   16578:	e0bff517 	ldw	r2,-44(fp)
   1657c:	103f7926 	beq	r2,zero,16364 <__alt_data_end+0xfffe5624>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16580:	e0bff617 	ldw	r2,-40(fp)
   16584:	10c00817 	ldw	r3,32(r2)
   16588:	00bfff44 	movi	r2,-3
   1658c:	1886703a 	and	r3,r3,r2
   16590:	e0bff617 	ldw	r2,-40(fp)
   16594:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16598:	e0bff617 	ldw	r2,-40(fp)
   1659c:	10800017 	ldw	r2,0(r2)
   165a0:	10800104 	addi	r2,r2,4
   165a4:	1007883a 	mov	r3,r2
   165a8:	e0bff617 	ldw	r2,-40(fp)
   165ac:	10800817 	ldw	r2,32(r2)
   165b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   165b4:	e0bff717 	ldw	r2,-36(fp)
   165b8:	10800104 	addi	r2,r2,4
   165bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   165c0:	003f6806 	br	16364 <__alt_data_end+0xfffe5624>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   165c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   165c8:	0001883a 	nop
   165cc:	e037883a 	mov	sp,fp
   165d0:	dfc00117 	ldw	ra,4(sp)
   165d4:	df000017 	ldw	fp,0(sp)
   165d8:	dec00204 	addi	sp,sp,8
   165dc:	f800283a 	ret

000165e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   165e0:	defff904 	addi	sp,sp,-28
   165e4:	dfc00615 	stw	ra,24(sp)
   165e8:	df000515 	stw	fp,20(sp)
   165ec:	df000504 	addi	fp,sp,20
   165f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   165f4:	e0bfff17 	ldw	r2,-4(fp)
   165f8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   165fc:	e0bffb17 	ldw	r2,-20(fp)
   16600:	10800017 	ldw	r2,0(r2)
   16604:	10800104 	addi	r2,r2,4
   16608:	10800037 	ldwio	r2,0(r2)
   1660c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   16610:	e0bffc17 	ldw	r2,-16(fp)
   16614:	1081000c 	andi	r2,r2,1024
   16618:	10000b26 	beq	r2,zero,16648 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1661c:	e0bffb17 	ldw	r2,-20(fp)
   16620:	10800017 	ldw	r2,0(r2)
   16624:	10800104 	addi	r2,r2,4
   16628:	1007883a 	mov	r3,r2
   1662c:	e0bffb17 	ldw	r2,-20(fp)
   16630:	10800817 	ldw	r2,32(r2)
   16634:	10810014 	ori	r2,r2,1024
   16638:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1663c:	e0bffb17 	ldw	r2,-20(fp)
   16640:	10000915 	stw	zero,36(r2)
   16644:	00002106 	br	166cc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   16648:	e0bffb17 	ldw	r2,-20(fp)
   1664c:	10c00917 	ldw	r3,36(r2)
   16650:	00a00034 	movhi	r2,32768
   16654:	10bfff04 	addi	r2,r2,-4
   16658:	10c01c36 	bltu	r2,r3,166cc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1665c:	e0bffb17 	ldw	r2,-20(fp)
   16660:	10800917 	ldw	r2,36(r2)
   16664:	10c00044 	addi	r3,r2,1
   16668:	e0bffb17 	ldw	r2,-20(fp)
   1666c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   16670:	e0bffb17 	ldw	r2,-20(fp)
   16674:	10c00917 	ldw	r3,36(r2)
   16678:	e0bffb17 	ldw	r2,-20(fp)
   1667c:	10800117 	ldw	r2,4(r2)
   16680:	18801236 	bltu	r3,r2,166cc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   16684:	e0bffb17 	ldw	r2,-20(fp)
   16688:	10800c17 	ldw	r2,48(r2)
   1668c:	e0bffd15 	stw	r2,-12(fp)
   16690:	00800104 	movi	r2,4
   16694:	e0bffe0d 	sth	r2,-8(fp)
   16698:	00800044 	movi	r2,1
   1669c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   166a0:	d0a72643 	ldbu	r2,-25447(gp)
   166a4:	10803fcc 	andi	r2,r2,255
   166a8:	10000826 	beq	r2,zero,166cc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   166ac:	e0bffe0b 	ldhu	r2,-8(fp)
   166b0:	e0fffe83 	ldbu	r3,-6(fp)
   166b4:	e13ffec4 	addi	r4,fp,-5
   166b8:	200f883a 	mov	r7,r4
   166bc:	180d883a 	mov	r6,r3
   166c0:	100b883a 	mov	r5,r2
   166c4:	e13ffd17 	ldw	r4,-12(fp)
   166c8:	00118480 	call	11848 <OSFlagPost>
   166cc:	d0a73b17 	ldw	r2,-25364(gp)
    }
  }

  return alt_ticks_per_second();
}
   166d0:	e037883a 	mov	sp,fp
   166d4:	dfc00117 	ldw	ra,4(sp)
   166d8:	df000017 	ldw	fp,0(sp)
   166dc:	dec00204 	addi	sp,sp,8
   166e0:	f800283a 	ret

000166e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   166e4:	defffd04 	addi	sp,sp,-12
   166e8:	df000215 	stw	fp,8(sp)
   166ec:	df000204 	addi	fp,sp,8
   166f0:	e13ffe15 	stw	r4,-8(fp)
   166f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   166f8:	00000506 	br	16710 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   166fc:	e0bfff17 	ldw	r2,-4(fp)
   16700:	1090000c 	andi	r2,r2,16384
   16704:	10000226 	beq	r2,zero,16710 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   16708:	00bffd44 	movi	r2,-11
   1670c:	00000b06 	br	1673c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   16710:	e0bffe17 	ldw	r2,-8(fp)
   16714:	10c01017 	ldw	r3,64(r2)
   16718:	e0bffe17 	ldw	r2,-8(fp)
   1671c:	10800f17 	ldw	r2,60(r2)
   16720:	18800526 	beq	r3,r2,16738 <altera_avalon_jtag_uart_close+0x54>
   16724:	e0bffe17 	ldw	r2,-8(fp)
   16728:	10c00917 	ldw	r3,36(r2)
   1672c:	e0bffe17 	ldw	r2,-8(fp)
   16730:	10800117 	ldw	r2,4(r2)
   16734:	18bff136 	bltu	r3,r2,166fc <__alt_data_end+0xfffe59bc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   16738:	0005883a 	mov	r2,zero
}
   1673c:	e037883a 	mov	sp,fp
   16740:	df000017 	ldw	fp,0(sp)
   16744:	dec00104 	addi	sp,sp,4
   16748:	f800283a 	ret

0001674c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1674c:	defffa04 	addi	sp,sp,-24
   16750:	df000515 	stw	fp,20(sp)
   16754:	df000504 	addi	fp,sp,20
   16758:	e13ffd15 	stw	r4,-12(fp)
   1675c:	e17ffe15 	stw	r5,-8(fp)
   16760:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   16764:	00bff9c4 	movi	r2,-25
   16768:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1676c:	e0bffe17 	ldw	r2,-8(fp)
   16770:	10da8060 	cmpeqi	r3,r2,27137
   16774:	1800031e 	bne	r3,zero,16784 <altera_avalon_jtag_uart_ioctl+0x38>
   16778:	109a80a0 	cmpeqi	r2,r2,27138
   1677c:	1000181e 	bne	r2,zero,167e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   16780:	00002906 	br	16828 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   16784:	e0bffd17 	ldw	r2,-12(fp)
   16788:	10c00117 	ldw	r3,4(r2)
   1678c:	00a00034 	movhi	r2,32768
   16790:	10bfffc4 	addi	r2,r2,-1
   16794:	18802126 	beq	r3,r2,1681c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   16798:	e0bfff17 	ldw	r2,-4(fp)
   1679c:	10800017 	ldw	r2,0(r2)
   167a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   167a4:	e0bffc17 	ldw	r2,-16(fp)
   167a8:	10800090 	cmplti	r2,r2,2
   167ac:	1000061e 	bne	r2,zero,167c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   167b0:	e0fffc17 	ldw	r3,-16(fp)
   167b4:	00a00034 	movhi	r2,32768
   167b8:	10bfffc4 	addi	r2,r2,-1
   167bc:	18800226 	beq	r3,r2,167c8 <altera_avalon_jtag_uart_ioctl+0x7c>
   167c0:	e0bffc17 	ldw	r2,-16(fp)
   167c4:	00000206 	br	167d0 <altera_avalon_jtag_uart_ioctl+0x84>
   167c8:	00a00034 	movhi	r2,32768
   167cc:	10bfff84 	addi	r2,r2,-2
   167d0:	e0fffd17 	ldw	r3,-12(fp)
   167d4:	18800115 	stw	r2,4(r3)
      rc = 0;
   167d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   167dc:	00000f06 	br	1681c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   167e0:	e0bffd17 	ldw	r2,-12(fp)
   167e4:	10c00117 	ldw	r3,4(r2)
   167e8:	00a00034 	movhi	r2,32768
   167ec:	10bfffc4 	addi	r2,r2,-1
   167f0:	18800c26 	beq	r3,r2,16824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   167f4:	e0bffd17 	ldw	r2,-12(fp)
   167f8:	10c00917 	ldw	r3,36(r2)
   167fc:	e0bffd17 	ldw	r2,-12(fp)
   16800:	10800117 	ldw	r2,4(r2)
   16804:	1885803a 	cmpltu	r2,r3,r2
   16808:	10c03fcc 	andi	r3,r2,255
   1680c:	e0bfff17 	ldw	r2,-4(fp)
   16810:	10c00015 	stw	r3,0(r2)
      rc = 0;
   16814:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   16818:	00000206 	br	16824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1681c:	0001883a 	nop
   16820:	00000106 	br	16828 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   16824:	0001883a 	nop

  default:
    break;
  }

  return rc;
   16828:	e0bffb17 	ldw	r2,-20(fp)
}
   1682c:	e037883a 	mov	sp,fp
   16830:	df000017 	ldw	fp,0(sp)
   16834:	dec00104 	addi	sp,sp,4
   16838:	f800283a 	ret

0001683c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1683c:	deffed04 	addi	sp,sp,-76
   16840:	dfc01215 	stw	ra,72(sp)
   16844:	df001115 	stw	fp,68(sp)
   16848:	df001104 	addi	fp,sp,68
   1684c:	e13ffc15 	stw	r4,-16(fp)
   16850:	e17ffd15 	stw	r5,-12(fp)
   16854:	e1bffe15 	stw	r6,-8(fp)
   16858:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1685c:	e0bffd17 	ldw	r2,-12(fp)
   16860:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   16864:	e0bffc17 	ldw	r2,-16(fp)
   16868:	10800a17 	ldw	r2,40(r2)
   1686c:	e0bff815 	stw	r2,-32(fp)
   16870:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   16874:	e0bff90b 	ldhu	r2,-28(fp)
   16878:	e0fffb04 	addi	r3,fp,-20
   1687c:	180d883a 	mov	r6,r3
   16880:	100b883a 	mov	r5,r2
   16884:	e13ff817 	ldw	r4,-32(fp)
   16888:	0013ca40 	call	13ca4 <OSSemPend>

  while (space > 0)
   1688c:	00006106 	br	16a14 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   16890:	e0bffc17 	ldw	r2,-16(fp)
   16894:	10800d17 	ldw	r2,52(r2)
   16898:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1689c:	e0bffc17 	ldw	r2,-16(fp)
   168a0:	10800e17 	ldw	r2,56(r2)
   168a4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   168a8:	e0fff317 	ldw	r3,-52(fp)
   168ac:	e0bff417 	ldw	r2,-48(fp)
   168b0:	18800536 	bltu	r3,r2,168c8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   168b4:	e0fff317 	ldw	r3,-52(fp)
   168b8:	e0bff417 	ldw	r2,-48(fp)
   168bc:	1885c83a 	sub	r2,r3,r2
   168c0:	e0bff115 	stw	r2,-60(fp)
   168c4:	00000406 	br	168d8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   168c8:	00c20004 	movi	r3,2048
   168cc:	e0bff417 	ldw	r2,-48(fp)
   168d0:	1885c83a 	sub	r2,r3,r2
   168d4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   168d8:	e0bff117 	ldw	r2,-60(fp)
   168dc:	10001e26 	beq	r2,zero,16958 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   168e0:	e0fffe17 	ldw	r3,-8(fp)
   168e4:	e0bff117 	ldw	r2,-60(fp)
   168e8:	1880022e 	bgeu	r3,r2,168f4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   168ec:	e0bffe17 	ldw	r2,-8(fp)
   168f0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   168f4:	e0bffc17 	ldw	r2,-16(fp)
   168f8:	10c01104 	addi	r3,r2,68
   168fc:	e0bff417 	ldw	r2,-48(fp)
   16900:	1885883a 	add	r2,r3,r2
   16904:	e1bff117 	ldw	r6,-60(fp)
   16908:	100b883a 	mov	r5,r2
   1690c:	e13ff017 	ldw	r4,-64(fp)
   16910:	000141c0 	call	141c <memcpy>
      ptr   += n;
   16914:	e0fff017 	ldw	r3,-64(fp)
   16918:	e0bff117 	ldw	r2,-60(fp)
   1691c:	1885883a 	add	r2,r3,r2
   16920:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   16924:	e0fffe17 	ldw	r3,-8(fp)
   16928:	e0bff117 	ldw	r2,-60(fp)
   1692c:	1885c83a 	sub	r2,r3,r2
   16930:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16934:	e0fff417 	ldw	r3,-48(fp)
   16938:	e0bff117 	ldw	r2,-60(fp)
   1693c:	1885883a 	add	r2,r3,r2
   16940:	10c1ffcc 	andi	r3,r2,2047
   16944:	e0bffc17 	ldw	r2,-16(fp)
   16948:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1694c:	e0bffe17 	ldw	r2,-8(fp)
   16950:	00bfcf16 	blt	zero,r2,16890 <__alt_data_end+0xfffe5b50>
   16954:	00000106 	br	1695c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   16958:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1695c:	e0fff017 	ldw	r3,-64(fp)
   16960:	e0bffd17 	ldw	r2,-12(fp)
   16964:	18802e1e 	bne	r3,r2,16a20 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   16968:	e0bfff17 	ldw	r2,-4(fp)
   1696c:	1090000c 	andi	r2,r2,16384
   16970:	10002d1e 	bne	r2,zero,16a28 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   16974:	d0a72643 	ldbu	r2,-25447(gp)
   16978:	10803fcc 	andi	r2,r2,255
   1697c:	10800058 	cmpnei	r2,r2,1
   16980:	1000161e 	bne	r2,zero,169dc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   16984:	e0bffc17 	ldw	r2,-16(fp)
   16988:	10800c17 	ldw	r2,48(r2)
   1698c:	e0bff215 	stw	r2,-56(fp)
   16990:	00800144 	movi	r2,5
   16994:	e0bff98d 	sth	r2,-26(fp)
   16998:	00bfe0c4 	movi	r2,-125
   1699c:	e0bffa05 	stb	r2,-24(fp)
   169a0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   169a4:	d0a72643 	ldbu	r2,-25447(gp)
   169a8:	10803fcc 	andi	r2,r2,255
   169ac:	10001526 	beq	r2,zero,16a04 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   169b0:	e0fff98b 	ldhu	r3,-26(fp)
   169b4:	e13ffa03 	ldbu	r4,-24(fp)
   169b8:	e17ffa8b 	ldhu	r5,-22(fp)
   169bc:	e0bffb44 	addi	r2,fp,-19
   169c0:	d8800015 	stw	r2,0(sp)
   169c4:	280f883a 	mov	r7,r5
   169c8:	200d883a 	mov	r6,r4
   169cc:	180b883a 	mov	r5,r3
   169d0:	e13ff217 	ldw	r4,-56(fp)
   169d4:	00112300 	call	11230 <OSFlagPend>
   169d8:	00000a06 	br	16a04 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   169dc:	0001883a 	nop
   169e0:	e0bffc17 	ldw	r2,-16(fp)
   169e4:	10c00d17 	ldw	r3,52(r2)
   169e8:	e0bff317 	ldw	r2,-52(fp)
   169ec:	1880051e 	bne	r3,r2,16a04 <altera_avalon_jtag_uart_read+0x1c8>
   169f0:	e0bffc17 	ldw	r2,-16(fp)
   169f4:	10c00917 	ldw	r3,36(r2)
   169f8:	e0bffc17 	ldw	r2,-16(fp)
   169fc:	10800117 	ldw	r2,4(r2)
   16a00:	18bff736 	bltu	r3,r2,169e0 <__alt_data_end+0xfffe5ca0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   16a04:	e0bffc17 	ldw	r2,-16(fp)
   16a08:	10c00d17 	ldw	r3,52(r2)
   16a0c:	e0bff317 	ldw	r2,-52(fp)
   16a10:	18800726 	beq	r3,r2,16a30 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   16a14:	e0bffe17 	ldw	r2,-8(fp)
   16a18:	00bf9d16 	blt	zero,r2,16890 <__alt_data_end+0xfffe5b50>
   16a1c:	00000506 	br	16a34 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   16a20:	0001883a 	nop
   16a24:	00000306 	br	16a34 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   16a28:	0001883a 	nop
   16a2c:	00000106 	br	16a34 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   16a30:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   16a34:	e0bffc17 	ldw	r2,-16(fp)
   16a38:	10800a17 	ldw	r2,40(r2)
   16a3c:	1009883a 	mov	r4,r2
   16a40:	001401c0 	call	1401c <OSSemPost>

  if (ptr != buffer)
   16a44:	e0fff017 	ldw	r3,-64(fp)
   16a48:	e0bffd17 	ldw	r2,-12(fp)
   16a4c:	18801826 	beq	r3,r2,16ab0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16a50:	0005303a 	rdctl	r2,status
   16a54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16a58:	e0fff717 	ldw	r3,-36(fp)
   16a5c:	00bfff84 	movi	r2,-2
   16a60:	1884703a 	and	r2,r3,r2
   16a64:	1001703a 	wrctl	status,r2
  
  return context;
   16a68:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   16a6c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   16a70:	e0bffc17 	ldw	r2,-16(fp)
   16a74:	10800817 	ldw	r2,32(r2)
   16a78:	10c00054 	ori	r3,r2,1
   16a7c:	e0bffc17 	ldw	r2,-16(fp)
   16a80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16a84:	e0bffc17 	ldw	r2,-16(fp)
   16a88:	10800017 	ldw	r2,0(r2)
   16a8c:	10800104 	addi	r2,r2,4
   16a90:	1007883a 	mov	r3,r2
   16a94:	e0bffc17 	ldw	r2,-16(fp)
   16a98:	10800817 	ldw	r2,32(r2)
   16a9c:	18800035 	stwio	r2,0(r3)
   16aa0:	e0bff617 	ldw	r2,-40(fp)
   16aa4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16aa8:	e0bff517 	ldw	r2,-44(fp)
   16aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   16ab0:	e0fff017 	ldw	r3,-64(fp)
   16ab4:	e0bffd17 	ldw	r2,-12(fp)
   16ab8:	18800426 	beq	r3,r2,16acc <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   16abc:	e0fff017 	ldw	r3,-64(fp)
   16ac0:	e0bffd17 	ldw	r2,-12(fp)
   16ac4:	1885c83a 	sub	r2,r3,r2
   16ac8:	00000606 	br	16ae4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   16acc:	e0bfff17 	ldw	r2,-4(fp)
   16ad0:	1090000c 	andi	r2,r2,16384
   16ad4:	10000226 	beq	r2,zero,16ae0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   16ad8:	00bffd44 	movi	r2,-11
   16adc:	00000106 	br	16ae4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   16ae0:	00bffec4 	movi	r2,-5
}
   16ae4:	e037883a 	mov	sp,fp
   16ae8:	dfc00117 	ldw	ra,4(sp)
   16aec:	df000017 	ldw	fp,0(sp)
   16af0:	dec00204 	addi	sp,sp,8
   16af4:	f800283a 	ret

00016af8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   16af8:	deffed04 	addi	sp,sp,-76
   16afc:	dfc01215 	stw	ra,72(sp)
   16b00:	df001115 	stw	fp,68(sp)
   16b04:	df001104 	addi	fp,sp,68
   16b08:	e13ffc15 	stw	r4,-16(fp)
   16b0c:	e17ffd15 	stw	r5,-12(fp)
   16b10:	e1bffe15 	stw	r6,-8(fp)
   16b14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   16b18:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   16b1c:	e0bffd17 	ldw	r2,-12(fp)
   16b20:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   16b24:	e0bffc17 	ldw	r2,-16(fp)
   16b28:	10800b17 	ldw	r2,44(r2)
   16b2c:	e0bff815 	stw	r2,-32(fp)
   16b30:	e03ff90d 	sth	zero,-28(fp)
   16b34:	e0bff90b 	ldhu	r2,-28(fp)
   16b38:	e0fffb44 	addi	r3,fp,-19
   16b3c:	180d883a 	mov	r6,r3
   16b40:	100b883a 	mov	r5,r2
   16b44:	e13ff817 	ldw	r4,-32(fp)
   16b48:	0013ca40 	call	13ca4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16b4c:	00003706 	br	16c2c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   16b50:	e0bffc17 	ldw	r2,-16(fp)
   16b54:	10800f17 	ldw	r2,60(r2)
   16b58:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   16b5c:	e0bffc17 	ldw	r2,-16(fp)
   16b60:	10801017 	ldw	r2,64(r2)
   16b64:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   16b68:	e0fff417 	ldw	r3,-48(fp)
   16b6c:	e0bff017 	ldw	r2,-64(fp)
   16b70:	1880062e 	bgeu	r3,r2,16b8c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   16b74:	e0fff017 	ldw	r3,-64(fp)
   16b78:	e0bff417 	ldw	r2,-48(fp)
   16b7c:	1885c83a 	sub	r2,r3,r2
   16b80:	10bfffc4 	addi	r2,r2,-1
   16b84:	e0bff115 	stw	r2,-60(fp)
   16b88:	00000b06 	br	16bb8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   16b8c:	e0bff017 	ldw	r2,-64(fp)
   16b90:	10000526 	beq	r2,zero,16ba8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   16b94:	00c20004 	movi	r3,2048
   16b98:	e0bff417 	ldw	r2,-48(fp)
   16b9c:	1885c83a 	sub	r2,r3,r2
   16ba0:	e0bff115 	stw	r2,-60(fp)
   16ba4:	00000406 	br	16bb8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   16ba8:	00c1ffc4 	movi	r3,2047
   16bac:	e0bff417 	ldw	r2,-48(fp)
   16bb0:	1885c83a 	sub	r2,r3,r2
   16bb4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   16bb8:	e0bff117 	ldw	r2,-60(fp)
   16bbc:	10001e26 	beq	r2,zero,16c38 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   16bc0:	e0fffe17 	ldw	r3,-8(fp)
   16bc4:	e0bff117 	ldw	r2,-60(fp)
   16bc8:	1880022e 	bgeu	r3,r2,16bd4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   16bcc:	e0bffe17 	ldw	r2,-8(fp)
   16bd0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   16bd4:	e0bffc17 	ldw	r2,-16(fp)
   16bd8:	10c21104 	addi	r3,r2,2116
   16bdc:	e0bff417 	ldw	r2,-48(fp)
   16be0:	1885883a 	add	r2,r3,r2
   16be4:	e1bff117 	ldw	r6,-60(fp)
   16be8:	e17ffd17 	ldw	r5,-12(fp)
   16bec:	1009883a 	mov	r4,r2
   16bf0:	000141c0 	call	141c <memcpy>
      ptr   += n;
   16bf4:	e0fffd17 	ldw	r3,-12(fp)
   16bf8:	e0bff117 	ldw	r2,-60(fp)
   16bfc:	1885883a 	add	r2,r3,r2
   16c00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   16c04:	e0fffe17 	ldw	r3,-8(fp)
   16c08:	e0bff117 	ldw	r2,-60(fp)
   16c0c:	1885c83a 	sub	r2,r3,r2
   16c10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   16c14:	e0fff417 	ldw	r3,-48(fp)
   16c18:	e0bff117 	ldw	r2,-60(fp)
   16c1c:	1885883a 	add	r2,r3,r2
   16c20:	10c1ffcc 	andi	r3,r2,2047
   16c24:	e0bffc17 	ldw	r2,-16(fp)
   16c28:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   16c2c:	e0bffe17 	ldw	r2,-8(fp)
   16c30:	00bfc716 	blt	zero,r2,16b50 <__alt_data_end+0xfffe5e10>
   16c34:	00000106 	br	16c3c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   16c38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c3c:	0005303a 	rdctl	r2,status
   16c40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c44:	e0fff717 	ldw	r3,-36(fp)
   16c48:	00bfff84 	movi	r2,-2
   16c4c:	1884703a 	and	r2,r3,r2
   16c50:	1001703a 	wrctl	status,r2
  
  return context;
   16c54:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   16c58:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   16c5c:	e0bffc17 	ldw	r2,-16(fp)
   16c60:	10800817 	ldw	r2,32(r2)
   16c64:	10c00094 	ori	r3,r2,2
   16c68:	e0bffc17 	ldw	r2,-16(fp)
   16c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   16c70:	e0bffc17 	ldw	r2,-16(fp)
   16c74:	10800017 	ldw	r2,0(r2)
   16c78:	10800104 	addi	r2,r2,4
   16c7c:	1007883a 	mov	r3,r2
   16c80:	e0bffc17 	ldw	r2,-16(fp)
   16c84:	10800817 	ldw	r2,32(r2)
   16c88:	18800035 	stwio	r2,0(r3)
   16c8c:	e0bff617 	ldw	r2,-40(fp)
   16c90:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c94:	e0bff317 	ldw	r2,-52(fp)
   16c98:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   16c9c:	e0bffe17 	ldw	r2,-8(fp)
   16ca0:	00802a0e 	bge	zero,r2,16d4c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   16ca4:	e0bfff17 	ldw	r2,-4(fp)
   16ca8:	1090000c 	andi	r2,r2,16384
   16cac:	10002a1e 	bne	r2,zero,16d58 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   16cb0:	d0a72643 	ldbu	r2,-25447(gp)
   16cb4:	10803fcc 	andi	r2,r2,255
   16cb8:	10800058 	cmpnei	r2,r2,1
   16cbc:	1000161e 	bne	r2,zero,16d18 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   16cc0:	e0bffc17 	ldw	r2,-16(fp)
   16cc4:	10800c17 	ldw	r2,48(r2)
   16cc8:	e0bff515 	stw	r2,-44(fp)
   16ccc:	00800184 	movi	r2,6
   16cd0:	e0bff98d 	sth	r2,-26(fp)
   16cd4:	00bfe0c4 	movi	r2,-125
   16cd8:	e0bffa05 	stb	r2,-24(fp)
   16cdc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   16ce0:	d0a72643 	ldbu	r2,-25447(gp)
   16ce4:	10803fcc 	andi	r2,r2,255
   16ce8:	10001526 	beq	r2,zero,16d40 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   16cec:	e0fff98b 	ldhu	r3,-26(fp)
   16cf0:	e13ffa03 	ldbu	r4,-24(fp)
   16cf4:	e17ffa8b 	ldhu	r5,-22(fp)
   16cf8:	e0bffb04 	addi	r2,fp,-20
   16cfc:	d8800015 	stw	r2,0(sp)
   16d00:	280f883a 	mov	r7,r5
   16d04:	200d883a 	mov	r6,r4
   16d08:	180b883a 	mov	r5,r3
   16d0c:	e13ff517 	ldw	r4,-44(fp)
   16d10:	00112300 	call	11230 <OSFlagPend>
   16d14:	00000a06 	br	16d40 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   16d18:	0001883a 	nop
   16d1c:	e0bffc17 	ldw	r2,-16(fp)
   16d20:	10c01017 	ldw	r3,64(r2)
   16d24:	e0bff017 	ldw	r2,-64(fp)
   16d28:	1880051e 	bne	r3,r2,16d40 <altera_avalon_jtag_uart_write+0x248>
   16d2c:	e0bffc17 	ldw	r2,-16(fp)
   16d30:	10c00917 	ldw	r3,36(r2)
   16d34:	e0bffc17 	ldw	r2,-16(fp)
   16d38:	10800117 	ldw	r2,4(r2)
   16d3c:	18bff736 	bltu	r3,r2,16d1c <__alt_data_end+0xfffe5fdc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   16d40:	e0bffc17 	ldw	r2,-16(fp)
   16d44:	10800917 	ldw	r2,36(r2)
   16d48:	1000051e 	bne	r2,zero,16d60 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   16d4c:	e0bffe17 	ldw	r2,-8(fp)
   16d50:	00bfb616 	blt	zero,r2,16c2c <__alt_data_end+0xfffe5eec>
   16d54:	00000306 	br	16d64 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   16d58:	0001883a 	nop
   16d5c:	00000106 	br	16d64 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   16d60:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   16d64:	e0bffc17 	ldw	r2,-16(fp)
   16d68:	10800b17 	ldw	r2,44(r2)
   16d6c:	1009883a 	mov	r4,r2
   16d70:	001401c0 	call	1401c <OSSemPost>

  if (ptr != start)
   16d74:	e0fffd17 	ldw	r3,-12(fp)
   16d78:	e0bff217 	ldw	r2,-56(fp)
   16d7c:	18800426 	beq	r3,r2,16d90 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   16d80:	e0fffd17 	ldw	r3,-12(fp)
   16d84:	e0bff217 	ldw	r2,-56(fp)
   16d88:	1885c83a 	sub	r2,r3,r2
   16d8c:	00000606 	br	16da8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   16d90:	e0bfff17 	ldw	r2,-4(fp)
   16d94:	1090000c 	andi	r2,r2,16384
   16d98:	10000226 	beq	r2,zero,16da4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   16d9c:	00bffd44 	movi	r2,-11
   16da0:	00000106 	br	16da8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   16da4:	00bffec4 	movi	r2,-5
}
   16da8:	e037883a 	mov	sp,fp
   16dac:	dfc00117 	ldw	ra,4(sp)
   16db0:	df000017 	ldw	fp,0(sp)
   16db4:	dec00204 	addi	sp,sp,8
   16db8:	f800283a 	ret

00016dbc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   16dbc:	defffa04 	addi	sp,sp,-24
   16dc0:	dfc00515 	stw	ra,20(sp)
   16dc4:	df000415 	stw	fp,16(sp)
   16dc8:	df000404 	addi	fp,sp,16
   16dcc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   16dd0:	0007883a 	mov	r3,zero
   16dd4:	e0bfff17 	ldw	r2,-4(fp)
   16dd8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   16ddc:	e0bfff17 	ldw	r2,-4(fp)
   16de0:	10800104 	addi	r2,r2,4
   16de4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16de8:	0005303a 	rdctl	r2,status
   16dec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16df0:	e0fffd17 	ldw	r3,-12(fp)
   16df4:	00bfff84 	movi	r2,-2
   16df8:	1884703a 	and	r2,r3,r2
   16dfc:	1001703a 	wrctl	status,r2
  
  return context;
   16e00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   16e04:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   16e08:	00178dc0 	call	178dc <alt_tick>
   16e0c:	e0bffc17 	ldw	r2,-16(fp)
   16e10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e14:	e0bffe17 	ldw	r2,-8(fp)
   16e18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   16e1c:	0001883a 	nop
   16e20:	e037883a 	mov	sp,fp
   16e24:	dfc00117 	ldw	ra,4(sp)
   16e28:	df000017 	ldw	fp,0(sp)
   16e2c:	dec00204 	addi	sp,sp,8
   16e30:	f800283a 	ret

00016e34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   16e34:	defff804 	addi	sp,sp,-32
   16e38:	dfc00715 	stw	ra,28(sp)
   16e3c:	df000615 	stw	fp,24(sp)
   16e40:	df000604 	addi	fp,sp,24
   16e44:	e13ffc15 	stw	r4,-16(fp)
   16e48:	e17ffd15 	stw	r5,-12(fp)
   16e4c:	e1bffe15 	stw	r6,-8(fp)
   16e50:	e1ffff15 	stw	r7,-4(fp)
   16e54:	e0bfff17 	ldw	r2,-4(fp)
   16e58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   16e5c:	d0a73b17 	ldw	r2,-25364(gp)
   16e60:	1000021e 	bne	r2,zero,16e6c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   16e64:	e0bffb17 	ldw	r2,-20(fp)
   16e68:	d0a73b15 	stw	r2,-25364(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   16e6c:	e0bffc17 	ldw	r2,-16(fp)
   16e70:	10800104 	addi	r2,r2,4
   16e74:	00c001c4 	movi	r3,7
   16e78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   16e7c:	d8000015 	stw	zero,0(sp)
   16e80:	e1fffc17 	ldw	r7,-16(fp)
   16e84:	01800074 	movhi	r6,1
   16e88:	319b6f04 	addi	r6,r6,28092
   16e8c:	e17ffe17 	ldw	r5,-8(fp)
   16e90:	e13ffd17 	ldw	r4,-12(fp)
   16e94:	00171bc0 	call	171bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   16e98:	0001883a 	nop
   16e9c:	e037883a 	mov	sp,fp
   16ea0:	dfc00117 	ldw	ra,4(sp)
   16ea4:	df000017 	ldw	fp,0(sp)
   16ea8:	dec00204 	addi	sp,sp,8
   16eac:	f800283a 	ret

00016eb0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   16eb0:	defff504 	addi	sp,sp,-44
   16eb4:	df000a15 	stw	fp,40(sp)
   16eb8:	df000a04 	addi	fp,sp,40
   16ebc:	e13ffc15 	stw	r4,-16(fp)
   16ec0:	e17ffd15 	stw	r5,-12(fp)
   16ec4:	e1bffe15 	stw	r6,-8(fp)
   16ec8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   16ecc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   16ed0:	d0a73b17 	ldw	r2,-25364(gp)
  
  if (alt_ticks_per_second ())
   16ed4:	10003c26 	beq	r2,zero,16fc8 <alt_alarm_start+0x118>
  {
    if (alarm)
   16ed8:	e0bffc17 	ldw	r2,-16(fp)
   16edc:	10003826 	beq	r2,zero,16fc0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   16ee0:	e0bffc17 	ldw	r2,-16(fp)
   16ee4:	e0fffe17 	ldw	r3,-8(fp)
   16ee8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   16eec:	e0bffc17 	ldw	r2,-16(fp)
   16ef0:	e0ffff17 	ldw	r3,-4(fp)
   16ef4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16ef8:	0005303a 	rdctl	r2,status
   16efc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f00:	e0fff917 	ldw	r3,-28(fp)
   16f04:	00bfff84 	movi	r2,-2
   16f08:	1884703a 	and	r2,r3,r2
   16f0c:	1001703a 	wrctl	status,r2
  
  return context;
   16f10:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   16f14:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   16f18:	d0a73c17 	ldw	r2,-25360(gp)
      
      current_nticks = alt_nticks();
   16f1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   16f20:	e0fffd17 	ldw	r3,-12(fp)
   16f24:	e0bff617 	ldw	r2,-40(fp)
   16f28:	1885883a 	add	r2,r3,r2
   16f2c:	10c00044 	addi	r3,r2,1
   16f30:	e0bffc17 	ldw	r2,-16(fp)
   16f34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   16f38:	e0bffc17 	ldw	r2,-16(fp)
   16f3c:	10c00217 	ldw	r3,8(r2)
   16f40:	e0bff617 	ldw	r2,-40(fp)
   16f44:	1880042e 	bgeu	r3,r2,16f58 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   16f48:	e0bffc17 	ldw	r2,-16(fp)
   16f4c:	00c00044 	movi	r3,1
   16f50:	10c00405 	stb	r3,16(r2)
   16f54:	00000206 	br	16f60 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   16f58:	e0bffc17 	ldw	r2,-16(fp)
   16f5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   16f60:	e0bffc17 	ldw	r2,-16(fp)
   16f64:	d0e02d04 	addi	r3,gp,-32588
   16f68:	e0fffa15 	stw	r3,-24(fp)
   16f6c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   16f70:	e0bffb17 	ldw	r2,-20(fp)
   16f74:	e0fffa17 	ldw	r3,-24(fp)
   16f78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   16f7c:	e0bffa17 	ldw	r2,-24(fp)
   16f80:	10c00017 	ldw	r3,0(r2)
   16f84:	e0bffb17 	ldw	r2,-20(fp)
   16f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   16f8c:	e0bffa17 	ldw	r2,-24(fp)
   16f90:	10800017 	ldw	r2,0(r2)
   16f94:	e0fffb17 	ldw	r3,-20(fp)
   16f98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   16f9c:	e0bffa17 	ldw	r2,-24(fp)
   16fa0:	e0fffb17 	ldw	r3,-20(fp)
   16fa4:	10c00015 	stw	r3,0(r2)
   16fa8:	e0bff817 	ldw	r2,-32(fp)
   16fac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fb0:	e0bff717 	ldw	r2,-36(fp)
   16fb4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   16fb8:	0005883a 	mov	r2,zero
   16fbc:	00000306 	br	16fcc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   16fc0:	00bffa84 	movi	r2,-22
   16fc4:	00000106 	br	16fcc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   16fc8:	00bfde84 	movi	r2,-134
  }
}
   16fcc:	e037883a 	mov	sp,fp
   16fd0:	df000017 	ldw	fp,0(sp)
   16fd4:	dec00104 	addi	sp,sp,4
   16fd8:	f800283a 	ret

00016fdc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   16fdc:	deffff04 	addi	sp,sp,-4
   16fe0:	df000015 	stw	fp,0(sp)
   16fe4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   16fe8:	0001883a 	nop
   16fec:	e037883a 	mov	sp,fp
   16ff0:	df000017 	ldw	fp,0(sp)
   16ff4:	dec00104 	addi	sp,sp,4
   16ff8:	f800283a 	ret

00016ffc <alt_get_errno>:
   16ffc:	defffe04 	addi	sp,sp,-8
   17000:	dfc00115 	stw	ra,4(sp)
   17004:	df000015 	stw	fp,0(sp)
   17008:	d839883a 	mov	fp,sp
   1700c:	d0a00b17 	ldw	r2,-32724(gp)
   17010:	10000326 	beq	r2,zero,17020 <alt_get_errno+0x24>
   17014:	d0a00b17 	ldw	r2,-32724(gp)
   17018:	103ee83a 	callr	r2
   1701c:	00000106 	br	17024 <alt_get_errno+0x28>
   17020:	d0a71a04 	addi	r2,gp,-25496
   17024:	e037883a 	mov	sp,fp
   17028:	dfc00117 	ldw	ra,4(sp)
   1702c:	df000017 	ldw	fp,0(sp)
   17030:	dec00204 	addi	sp,sp,8
   17034:	f800283a 	ret

00017038 <alt_dev_llist_insert>:
   17038:	defffa04 	addi	sp,sp,-24
   1703c:	dfc00515 	stw	ra,20(sp)
   17040:	df000415 	stw	fp,16(sp)
   17044:	df000404 	addi	fp,sp,16
   17048:	e13ffe15 	stw	r4,-8(fp)
   1704c:	e17fff15 	stw	r5,-4(fp)
   17050:	e0bffe17 	ldw	r2,-8(fp)
   17054:	10000326 	beq	r2,zero,17064 <alt_dev_llist_insert+0x2c>
   17058:	e0bffe17 	ldw	r2,-8(fp)
   1705c:	10800217 	ldw	r2,8(r2)
   17060:	1000061e 	bne	r2,zero,1707c <alt_dev_llist_insert+0x44>
   17064:	0016ffc0 	call	16ffc <alt_get_errno>
   17068:	1007883a 	mov	r3,r2
   1706c:	00800584 	movi	r2,22
   17070:	18800015 	stw	r2,0(r3)
   17074:	00bffa84 	movi	r2,-22
   17078:	00001306 	br	170c8 <alt_dev_llist_insert+0x90>
   1707c:	e0bffe17 	ldw	r2,-8(fp)
   17080:	e0ffff17 	ldw	r3,-4(fp)
   17084:	e0fffc15 	stw	r3,-16(fp)
   17088:	e0bffd15 	stw	r2,-12(fp)
   1708c:	e0bffd17 	ldw	r2,-12(fp)
   17090:	e0fffc17 	ldw	r3,-16(fp)
   17094:	10c00115 	stw	r3,4(r2)
   17098:	e0bffc17 	ldw	r2,-16(fp)
   1709c:	10c00017 	ldw	r3,0(r2)
   170a0:	e0bffd17 	ldw	r2,-12(fp)
   170a4:	10c00015 	stw	r3,0(r2)
   170a8:	e0bffc17 	ldw	r2,-16(fp)
   170ac:	10800017 	ldw	r2,0(r2)
   170b0:	e0fffd17 	ldw	r3,-12(fp)
   170b4:	10c00115 	stw	r3,4(r2)
   170b8:	e0bffc17 	ldw	r2,-16(fp)
   170bc:	e0fffd17 	ldw	r3,-12(fp)
   170c0:	10c00015 	stw	r3,0(r2)
   170c4:	0005883a 	mov	r2,zero
   170c8:	e037883a 	mov	sp,fp
   170cc:	dfc00117 	ldw	ra,4(sp)
   170d0:	df000017 	ldw	fp,0(sp)
   170d4:	dec00204 	addi	sp,sp,8
   170d8:	f800283a 	ret

000170dc <_do_ctors>:
   170dc:	defffd04 	addi	sp,sp,-12
   170e0:	dfc00215 	stw	ra,8(sp)
   170e4:	df000115 	stw	fp,4(sp)
   170e8:	df000104 	addi	fp,sp,4
   170ec:	008000b4 	movhi	r2,2
   170f0:	10a10604 	addi	r2,r2,-31720
   170f4:	e0bfff15 	stw	r2,-4(fp)
   170f8:	00000606 	br	17114 <_do_ctors+0x38>
   170fc:	e0bfff17 	ldw	r2,-4(fp)
   17100:	10800017 	ldw	r2,0(r2)
   17104:	103ee83a 	callr	r2
   17108:	e0bfff17 	ldw	r2,-4(fp)
   1710c:	10bfff04 	addi	r2,r2,-4
   17110:	e0bfff15 	stw	r2,-4(fp)
   17114:	e0ffff17 	ldw	r3,-4(fp)
   17118:	008000b4 	movhi	r2,2
   1711c:	10a10704 	addi	r2,r2,-31716
   17120:	18bff62e 	bgeu	r3,r2,170fc <__alt_data_end+0xfffe63bc>
   17124:	0001883a 	nop
   17128:	e037883a 	mov	sp,fp
   1712c:	dfc00117 	ldw	ra,4(sp)
   17130:	df000017 	ldw	fp,0(sp)
   17134:	dec00204 	addi	sp,sp,8
   17138:	f800283a 	ret

0001713c <_do_dtors>:
   1713c:	defffd04 	addi	sp,sp,-12
   17140:	dfc00215 	stw	ra,8(sp)
   17144:	df000115 	stw	fp,4(sp)
   17148:	df000104 	addi	fp,sp,4
   1714c:	008000b4 	movhi	r2,2
   17150:	10a10604 	addi	r2,r2,-31720
   17154:	e0bfff15 	stw	r2,-4(fp)
   17158:	00000606 	br	17174 <_do_dtors+0x38>
   1715c:	e0bfff17 	ldw	r2,-4(fp)
   17160:	10800017 	ldw	r2,0(r2)
   17164:	103ee83a 	callr	r2
   17168:	e0bfff17 	ldw	r2,-4(fp)
   1716c:	10bfff04 	addi	r2,r2,-4
   17170:	e0bfff15 	stw	r2,-4(fp)
   17174:	e0ffff17 	ldw	r3,-4(fp)
   17178:	008000b4 	movhi	r2,2
   1717c:	10a10704 	addi	r2,r2,-31716
   17180:	18bff62e 	bgeu	r3,r2,1715c <__alt_data_end+0xfffe641c>
   17184:	0001883a 	nop
   17188:	e037883a 	mov	sp,fp
   1718c:	dfc00117 	ldw	ra,4(sp)
   17190:	df000017 	ldw	fp,0(sp)
   17194:	dec00204 	addi	sp,sp,8
   17198:	f800283a 	ret

0001719c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1719c:	deffff04 	addi	sp,sp,-4
   171a0:	df000015 	stw	fp,0(sp)
   171a4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   171a8:	0001883a 	nop
   171ac:	e037883a 	mov	sp,fp
   171b0:	df000017 	ldw	fp,0(sp)
   171b4:	dec00104 	addi	sp,sp,4
   171b8:	f800283a 	ret

000171bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   171bc:	defff904 	addi	sp,sp,-28
   171c0:	dfc00615 	stw	ra,24(sp)
   171c4:	df000515 	stw	fp,20(sp)
   171c8:	df000504 	addi	fp,sp,20
   171cc:	e13ffc15 	stw	r4,-16(fp)
   171d0:	e17ffd15 	stw	r5,-12(fp)
   171d4:	e1bffe15 	stw	r6,-8(fp)
   171d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   171dc:	e0800217 	ldw	r2,8(fp)
   171e0:	d8800015 	stw	r2,0(sp)
   171e4:	e1ffff17 	ldw	r7,-4(fp)
   171e8:	e1bffe17 	ldw	r6,-8(fp)
   171ec:	e17ffd17 	ldw	r5,-12(fp)
   171f0:	e13ffc17 	ldw	r4,-16(fp)
   171f4:	001736c0 	call	1736c <alt_iic_isr_register>
}  
   171f8:	e037883a 	mov	sp,fp
   171fc:	dfc00117 	ldw	ra,4(sp)
   17200:	df000017 	ldw	fp,0(sp)
   17204:	dec00204 	addi	sp,sp,8
   17208:	f800283a 	ret

0001720c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   1720c:	defff904 	addi	sp,sp,-28
   17210:	df000615 	stw	fp,24(sp)
   17214:	df000604 	addi	fp,sp,24
   17218:	e13ffe15 	stw	r4,-8(fp)
   1721c:	e17fff15 	stw	r5,-4(fp)
   17220:	e0bfff17 	ldw	r2,-4(fp)
   17224:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17228:	0005303a 	rdctl	r2,status
   1722c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17230:	e0fffb17 	ldw	r3,-20(fp)
   17234:	00bfff84 	movi	r2,-2
   17238:	1884703a 	and	r2,r3,r2
   1723c:	1001703a 	wrctl	status,r2
  
  return context;
   17240:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   17244:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   17248:	00c00044 	movi	r3,1
   1724c:	e0bffa17 	ldw	r2,-24(fp)
   17250:	1884983a 	sll	r2,r3,r2
   17254:	1007883a 	mov	r3,r2
   17258:	d0a73a17 	ldw	r2,-25368(gp)
   1725c:	1884b03a 	or	r2,r3,r2
   17260:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   17264:	d0a73a17 	ldw	r2,-25368(gp)
   17268:	100170fa 	wrctl	ienable,r2
   1726c:	e0bffc17 	ldw	r2,-16(fp)
   17270:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17274:	e0bffd17 	ldw	r2,-12(fp)
   17278:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1727c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   17280:	0001883a 	nop
}
   17284:	e037883a 	mov	sp,fp
   17288:	df000017 	ldw	fp,0(sp)
   1728c:	dec00104 	addi	sp,sp,4
   17290:	f800283a 	ret

00017294 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   17294:	defff904 	addi	sp,sp,-28
   17298:	df000615 	stw	fp,24(sp)
   1729c:	df000604 	addi	fp,sp,24
   172a0:	e13ffe15 	stw	r4,-8(fp)
   172a4:	e17fff15 	stw	r5,-4(fp)
   172a8:	e0bfff17 	ldw	r2,-4(fp)
   172ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   172b0:	0005303a 	rdctl	r2,status
   172b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   172b8:	e0fffb17 	ldw	r3,-20(fp)
   172bc:	00bfff84 	movi	r2,-2
   172c0:	1884703a 	and	r2,r3,r2
   172c4:	1001703a 	wrctl	status,r2
  
  return context;
   172c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   172cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   172d0:	00c00044 	movi	r3,1
   172d4:	e0bffa17 	ldw	r2,-24(fp)
   172d8:	1884983a 	sll	r2,r3,r2
   172dc:	0084303a 	nor	r2,zero,r2
   172e0:	1007883a 	mov	r3,r2
   172e4:	d0a73a17 	ldw	r2,-25368(gp)
   172e8:	1884703a 	and	r2,r3,r2
   172ec:	d0a73a15 	stw	r2,-25368(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   172f0:	d0a73a17 	ldw	r2,-25368(gp)
   172f4:	100170fa 	wrctl	ienable,r2
   172f8:	e0bffc17 	ldw	r2,-16(fp)
   172fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17300:	e0bffd17 	ldw	r2,-12(fp)
   17304:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   17308:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   1730c:	0001883a 	nop
}
   17310:	e037883a 	mov	sp,fp
   17314:	df000017 	ldw	fp,0(sp)
   17318:	dec00104 	addi	sp,sp,4
   1731c:	f800283a 	ret

00017320 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   17320:	defffc04 	addi	sp,sp,-16
   17324:	df000315 	stw	fp,12(sp)
   17328:	df000304 	addi	fp,sp,12
   1732c:	e13ffe15 	stw	r4,-8(fp)
   17330:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   17334:	000530fa 	rdctl	r2,ienable
   17338:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   1733c:	00c00044 	movi	r3,1
   17340:	e0bfff17 	ldw	r2,-4(fp)
   17344:	1884983a 	sll	r2,r3,r2
   17348:	1007883a 	mov	r3,r2
   1734c:	e0bffd17 	ldw	r2,-12(fp)
   17350:	1884703a 	and	r2,r3,r2
   17354:	1004c03a 	cmpne	r2,r2,zero
   17358:	10803fcc 	andi	r2,r2,255
}
   1735c:	e037883a 	mov	sp,fp
   17360:	df000017 	ldw	fp,0(sp)
   17364:	dec00104 	addi	sp,sp,4
   17368:	f800283a 	ret

0001736c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1736c:	defff504 	addi	sp,sp,-44
   17370:	dfc00a15 	stw	ra,40(sp)
   17374:	df000915 	stw	fp,36(sp)
   17378:	df000904 	addi	fp,sp,36
   1737c:	e13ffc15 	stw	r4,-16(fp)
   17380:	e17ffd15 	stw	r5,-12(fp)
   17384:	e1bffe15 	stw	r6,-8(fp)
   17388:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   1738c:	00bffa84 	movi	r2,-22
   17390:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   17394:	e0bffd17 	ldw	r2,-12(fp)
   17398:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1739c:	e0bff817 	ldw	r2,-32(fp)
   173a0:	10800808 	cmpgei	r2,r2,32
   173a4:	1000271e 	bne	r2,zero,17444 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   173a8:	0005303a 	rdctl	r2,status
   173ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173b0:	e0fffb17 	ldw	r3,-20(fp)
   173b4:	00bfff84 	movi	r2,-2
   173b8:	1884703a 	and	r2,r3,r2
   173bc:	1001703a 	wrctl	status,r2
  
  return context;
   173c0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   173c4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   173c8:	008000b4 	movhi	r2,2
   173cc:	1096b004 	addi	r2,r2,23232
   173d0:	e0fff817 	ldw	r3,-32(fp)
   173d4:	180690fa 	slli	r3,r3,3
   173d8:	10c5883a 	add	r2,r2,r3
   173dc:	e0fffe17 	ldw	r3,-8(fp)
   173e0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   173e4:	008000b4 	movhi	r2,2
   173e8:	1096b004 	addi	r2,r2,23232
   173ec:	e0fff817 	ldw	r3,-32(fp)
   173f0:	180690fa 	slli	r3,r3,3
   173f4:	10c5883a 	add	r2,r2,r3
   173f8:	10800104 	addi	r2,r2,4
   173fc:	e0ffff17 	ldw	r3,-4(fp)
   17400:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   17404:	e0bffe17 	ldw	r2,-8(fp)
   17408:	10000526 	beq	r2,zero,17420 <alt_iic_isr_register+0xb4>
   1740c:	e0bff817 	ldw	r2,-32(fp)
   17410:	100b883a 	mov	r5,r2
   17414:	e13ffc17 	ldw	r4,-16(fp)
   17418:	001720c0 	call	1720c <alt_ic_irq_enable>
   1741c:	00000406 	br	17430 <alt_iic_isr_register+0xc4>
   17420:	e0bff817 	ldw	r2,-32(fp)
   17424:	100b883a 	mov	r5,r2
   17428:	e13ffc17 	ldw	r4,-16(fp)
   1742c:	00172940 	call	17294 <alt_ic_irq_disable>
   17430:	e0bff715 	stw	r2,-36(fp)
   17434:	e0bffa17 	ldw	r2,-24(fp)
   17438:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1743c:	e0bff917 	ldw	r2,-28(fp)
   17440:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   17444:	e0bff717 	ldw	r2,-36(fp)
}
   17448:	e037883a 	mov	sp,fp
   1744c:	dfc00117 	ldw	ra,4(sp)
   17450:	df000017 	ldw	fp,0(sp)
   17454:	dec00204 	addi	sp,sp,8
   17458:	f800283a 	ret

0001745c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1745c:	defff804 	addi	sp,sp,-32
   17460:	dfc00715 	stw	ra,28(sp)
   17464:	df000615 	stw	fp,24(sp)
   17468:	dc000515 	stw	r16,20(sp)
   1746c:	df000604 	addi	fp,sp,24
   17470:	e13ffb15 	stw	r4,-20(fp)
   17474:	e17ffc15 	stw	r5,-16(fp)
   17478:	e1bffd15 	stw	r6,-12(fp)
   1747c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   17480:	e1bffe17 	ldw	r6,-8(fp)
   17484:	e17ffd17 	ldw	r5,-12(fp)
   17488:	e13ffc17 	ldw	r4,-16(fp)
   1748c:	00176e40 	call	176e4 <open>
   17490:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   17494:	e0bffa17 	ldw	r2,-24(fp)
   17498:	10002216 	blt	r2,zero,17524 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   1749c:	040000b4 	movhi	r16,2
   174a0:	84265904 	addi	r16,r16,-26268
   174a4:	e0bffa17 	ldw	r2,-24(fp)
   174a8:	01400304 	movi	r5,12
   174ac:	1009883a 	mov	r4,r2
   174b0:	0000bc00 	call	bc0 <__mulsi3>
   174b4:	8085883a 	add	r2,r16,r2
   174b8:	10c00017 	ldw	r3,0(r2)
   174bc:	e0bffb17 	ldw	r2,-20(fp)
   174c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   174c4:	040000b4 	movhi	r16,2
   174c8:	84265904 	addi	r16,r16,-26268
   174cc:	e0bffa17 	ldw	r2,-24(fp)
   174d0:	01400304 	movi	r5,12
   174d4:	1009883a 	mov	r4,r2
   174d8:	0000bc00 	call	bc0 <__mulsi3>
   174dc:	8085883a 	add	r2,r16,r2
   174e0:	10800104 	addi	r2,r2,4
   174e4:	10c00017 	ldw	r3,0(r2)
   174e8:	e0bffb17 	ldw	r2,-20(fp)
   174ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   174f0:	040000b4 	movhi	r16,2
   174f4:	84265904 	addi	r16,r16,-26268
   174f8:	e0bffa17 	ldw	r2,-24(fp)
   174fc:	01400304 	movi	r5,12
   17500:	1009883a 	mov	r4,r2
   17504:	0000bc00 	call	bc0 <__mulsi3>
   17508:	8085883a 	add	r2,r16,r2
   1750c:	10800204 	addi	r2,r2,8
   17510:	10c00017 	ldw	r3,0(r2)
   17514:	e0bffb17 	ldw	r2,-20(fp)
   17518:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1751c:	e13ffa17 	ldw	r4,-24(fp)
   17520:	000e2400 	call	e240 <alt_release_fd>
  }
} 
   17524:	0001883a 	nop
   17528:	e6ffff04 	addi	sp,fp,-4
   1752c:	dfc00217 	ldw	ra,8(sp)
   17530:	df000117 	ldw	fp,4(sp)
   17534:	dc000017 	ldw	r16,0(sp)
   17538:	dec00304 	addi	sp,sp,12
   1753c:	f800283a 	ret

00017540 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   17540:	defffb04 	addi	sp,sp,-20
   17544:	dfc00415 	stw	ra,16(sp)
   17548:	df000315 	stw	fp,12(sp)
   1754c:	df000304 	addi	fp,sp,12
   17550:	e13ffd15 	stw	r4,-12(fp)
   17554:	e17ffe15 	stw	r5,-8(fp)
   17558:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1755c:	01c07fc4 	movi	r7,511
   17560:	01800044 	movi	r6,1
   17564:	e17ffd17 	ldw	r5,-12(fp)
   17568:	010000b4 	movhi	r4,2
   1756c:	21265c04 	addi	r4,r4,-26256
   17570:	001745c0 	call	1745c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   17574:	01c07fc4 	movi	r7,511
   17578:	000d883a 	mov	r6,zero
   1757c:	e17ffe17 	ldw	r5,-8(fp)
   17580:	010000b4 	movhi	r4,2
   17584:	21265904 	addi	r4,r4,-26268
   17588:	001745c0 	call	1745c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1758c:	01c07fc4 	movi	r7,511
   17590:	01800044 	movi	r6,1
   17594:	e17fff17 	ldw	r5,-4(fp)
   17598:	010000b4 	movhi	r4,2
   1759c:	21265f04 	addi	r4,r4,-26244
   175a0:	001745c0 	call	1745c <alt_open_fd>
}  
   175a4:	0001883a 	nop
   175a8:	e037883a 	mov	sp,fp
   175ac:	dfc00117 	ldw	ra,4(sp)
   175b0:	df000017 	ldw	fp,0(sp)
   175b4:	dec00204 	addi	sp,sp,8
   175b8:	f800283a 	ret

000175bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   175bc:	defffe04 	addi	sp,sp,-8
   175c0:	dfc00115 	stw	ra,4(sp)
   175c4:	df000015 	stw	fp,0(sp)
   175c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   175cc:	d0a00b17 	ldw	r2,-32724(gp)
   175d0:	10000326 	beq	r2,zero,175e0 <alt_get_errno+0x24>
   175d4:	d0a00b17 	ldw	r2,-32724(gp)
   175d8:	103ee83a 	callr	r2
   175dc:	00000106 	br	175e4 <alt_get_errno+0x28>
   175e0:	d0a71a04 	addi	r2,gp,-25496
}
   175e4:	e037883a 	mov	sp,fp
   175e8:	dfc00117 	ldw	ra,4(sp)
   175ec:	df000017 	ldw	fp,0(sp)
   175f0:	dec00204 	addi	sp,sp,8
   175f4:	f800283a 	ret

000175f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   175f8:	defffb04 	addi	sp,sp,-20
   175fc:	dfc00415 	stw	ra,16(sp)
   17600:	df000315 	stw	fp,12(sp)
   17604:	dc000215 	stw	r16,8(sp)
   17608:	df000304 	addi	fp,sp,12
   1760c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   17610:	e0bffe17 	ldw	r2,-8(fp)
   17614:	10800217 	ldw	r2,8(r2)
   17618:	10d00034 	orhi	r3,r2,16384
   1761c:	e0bffe17 	ldw	r2,-8(fp)
   17620:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   17624:	e03ffd15 	stw	zero,-12(fp)
   17628:	00002306 	br	176b8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1762c:	040000b4 	movhi	r16,2
   17630:	84265904 	addi	r16,r16,-26268
   17634:	e0bffd17 	ldw	r2,-12(fp)
   17638:	01400304 	movi	r5,12
   1763c:	1009883a 	mov	r4,r2
   17640:	0000bc00 	call	bc0 <__mulsi3>
   17644:	8085883a 	add	r2,r16,r2
   17648:	10c00017 	ldw	r3,0(r2)
   1764c:	e0bffe17 	ldw	r2,-8(fp)
   17650:	10800017 	ldw	r2,0(r2)
   17654:	1880151e 	bne	r3,r2,176ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   17658:	040000b4 	movhi	r16,2
   1765c:	84265904 	addi	r16,r16,-26268
   17660:	e0bffd17 	ldw	r2,-12(fp)
   17664:	01400304 	movi	r5,12
   17668:	1009883a 	mov	r4,r2
   1766c:	0000bc00 	call	bc0 <__mulsi3>
   17670:	8085883a 	add	r2,r16,r2
   17674:	10800204 	addi	r2,r2,8
   17678:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1767c:	10000b0e 	bge	r2,zero,176ac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   17680:	01400304 	movi	r5,12
   17684:	e13ffd17 	ldw	r4,-12(fp)
   17688:	0000bc00 	call	bc0 <__mulsi3>
   1768c:	1007883a 	mov	r3,r2
   17690:	008000b4 	movhi	r2,2
   17694:	10a65904 	addi	r2,r2,-26268
   17698:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1769c:	e0bffe17 	ldw	r2,-8(fp)
   176a0:	18800226 	beq	r3,r2,176ac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   176a4:	00bffcc4 	movi	r2,-13
   176a8:	00000806 	br	176cc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   176ac:	e0bffd17 	ldw	r2,-12(fp)
   176b0:	10800044 	addi	r2,r2,1
   176b4:	e0bffd15 	stw	r2,-12(fp)
   176b8:	d0a00a17 	ldw	r2,-32728(gp)
   176bc:	1007883a 	mov	r3,r2
   176c0:	e0bffd17 	ldw	r2,-12(fp)
   176c4:	18bfd92e 	bgeu	r3,r2,1762c <__alt_data_end+0xfffe68ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   176c8:	0005883a 	mov	r2,zero
}
   176cc:	e6ffff04 	addi	sp,fp,-4
   176d0:	dfc00217 	ldw	ra,8(sp)
   176d4:	df000117 	ldw	fp,4(sp)
   176d8:	dc000017 	ldw	r16,0(sp)
   176dc:	dec00304 	addi	sp,sp,12
   176e0:	f800283a 	ret

000176e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   176e4:	defff604 	addi	sp,sp,-40
   176e8:	dfc00915 	stw	ra,36(sp)
   176ec:	df000815 	stw	fp,32(sp)
   176f0:	df000804 	addi	fp,sp,32
   176f4:	e13ffd15 	stw	r4,-12(fp)
   176f8:	e17ffe15 	stw	r5,-8(fp)
   176fc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   17700:	00bfffc4 	movi	r2,-1
   17704:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   17708:	00bffb44 	movi	r2,-19
   1770c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   17710:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   17714:	d1600804 	addi	r5,gp,-32736
   17718:	e13ffd17 	ldw	r4,-12(fp)
   1771c:	0017d600 	call	17d60 <alt_find_dev>
   17720:	e0bff815 	stw	r2,-32(fp)
   17724:	e0bff817 	ldw	r2,-32(fp)
   17728:	1000051e 	bne	r2,zero,17740 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1772c:	e13ffd17 	ldw	r4,-12(fp)
   17730:	0017df00 	call	17df0 <alt_find_file>
   17734:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   17738:	00800044 	movi	r2,1
   1773c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   17740:	e0bff817 	ldw	r2,-32(fp)
   17744:	10002b26 	beq	r2,zero,177f4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   17748:	e13ff817 	ldw	r4,-32(fp)
   1774c:	0017ef80 	call	17ef8 <alt_get_fd>
   17750:	e0bff915 	stw	r2,-28(fp)
   17754:	e0bff917 	ldw	r2,-28(fp)
   17758:	1000030e 	bge	r2,zero,17768 <open+0x84>
    {
      status = index;
   1775c:	e0bff917 	ldw	r2,-28(fp)
   17760:	e0bffa15 	stw	r2,-24(fp)
   17764:	00002506 	br	177fc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   17768:	01400304 	movi	r5,12
   1776c:	e13ff917 	ldw	r4,-28(fp)
   17770:	0000bc00 	call	bc0 <__mulsi3>
   17774:	1007883a 	mov	r3,r2
   17778:	008000b4 	movhi	r2,2
   1777c:	10a65904 	addi	r2,r2,-26268
   17780:	1885883a 	add	r2,r3,r2
   17784:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   17788:	e0fffe17 	ldw	r3,-8(fp)
   1778c:	00900034 	movhi	r2,16384
   17790:	10bfffc4 	addi	r2,r2,-1
   17794:	1886703a 	and	r3,r3,r2
   17798:	e0bffc17 	ldw	r2,-16(fp)
   1779c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   177a0:	e0bffb17 	ldw	r2,-20(fp)
   177a4:	1000051e 	bne	r2,zero,177bc <open+0xd8>
   177a8:	e13ffc17 	ldw	r4,-16(fp)
   177ac:	00175f80 	call	175f8 <alt_file_locked>
   177b0:	e0bffa15 	stw	r2,-24(fp)
   177b4:	e0bffa17 	ldw	r2,-24(fp)
   177b8:	10001016 	blt	r2,zero,177fc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   177bc:	e0bff817 	ldw	r2,-32(fp)
   177c0:	10800317 	ldw	r2,12(r2)
   177c4:	10000826 	beq	r2,zero,177e8 <open+0x104>
   177c8:	e0bff817 	ldw	r2,-32(fp)
   177cc:	10800317 	ldw	r2,12(r2)
   177d0:	e1ffff17 	ldw	r7,-4(fp)
   177d4:	e1bffe17 	ldw	r6,-8(fp)
   177d8:	e17ffd17 	ldw	r5,-12(fp)
   177dc:	e13ffc17 	ldw	r4,-16(fp)
   177e0:	103ee83a 	callr	r2
   177e4:	00000106 	br	177ec <open+0x108>
   177e8:	0005883a 	mov	r2,zero
   177ec:	e0bffa15 	stw	r2,-24(fp)
   177f0:	00000206 	br	177fc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   177f4:	00bffb44 	movi	r2,-19
   177f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   177fc:	e0bffa17 	ldw	r2,-24(fp)
   17800:	1000090e 	bge	r2,zero,17828 <open+0x144>
  {
    alt_release_fd (index);  
   17804:	e13ff917 	ldw	r4,-28(fp)
   17808:	000e2400 	call	e240 <alt_release_fd>
    ALT_ERRNO = -status;
   1780c:	00175bc0 	call	175bc <alt_get_errno>
   17810:	1007883a 	mov	r3,r2
   17814:	e0bffa17 	ldw	r2,-24(fp)
   17818:	0085c83a 	sub	r2,zero,r2
   1781c:	18800015 	stw	r2,0(r3)
    return -1;
   17820:	00bfffc4 	movi	r2,-1
   17824:	00000106 	br	1782c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   17828:	e0bff917 	ldw	r2,-28(fp)
}
   1782c:	e037883a 	mov	sp,fp
   17830:	dfc00117 	ldw	ra,4(sp)
   17834:	df000017 	ldw	fp,0(sp)
   17838:	dec00204 	addi	sp,sp,8
   1783c:	f800283a 	ret

00017840 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   17840:	defffa04 	addi	sp,sp,-24
   17844:	df000515 	stw	fp,20(sp)
   17848:	df000504 	addi	fp,sp,20
   1784c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17850:	0005303a 	rdctl	r2,status
   17854:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17858:	e0fffc17 	ldw	r3,-16(fp)
   1785c:	00bfff84 	movi	r2,-2
   17860:	1884703a 	and	r2,r3,r2
   17864:	1001703a 	wrctl	status,r2
  
  return context;
   17868:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1786c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   17870:	e0bfff17 	ldw	r2,-4(fp)
   17874:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   17878:	e0bffd17 	ldw	r2,-12(fp)
   1787c:	10800017 	ldw	r2,0(r2)
   17880:	e0fffd17 	ldw	r3,-12(fp)
   17884:	18c00117 	ldw	r3,4(r3)
   17888:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1788c:	e0bffd17 	ldw	r2,-12(fp)
   17890:	10800117 	ldw	r2,4(r2)
   17894:	e0fffd17 	ldw	r3,-12(fp)
   17898:	18c00017 	ldw	r3,0(r3)
   1789c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   178a0:	e0bffd17 	ldw	r2,-12(fp)
   178a4:	e0fffd17 	ldw	r3,-12(fp)
   178a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   178ac:	e0bffd17 	ldw	r2,-12(fp)
   178b0:	e0fffd17 	ldw	r3,-12(fp)
   178b4:	10c00015 	stw	r3,0(r2)
   178b8:	e0bffb17 	ldw	r2,-20(fp)
   178bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   178c0:	e0bffe17 	ldw	r2,-8(fp)
   178c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   178c8:	0001883a 	nop
   178cc:	e037883a 	mov	sp,fp
   178d0:	df000017 	ldw	fp,0(sp)
   178d4:	dec00104 	addi	sp,sp,4
   178d8:	f800283a 	ret

000178dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   178dc:	defffb04 	addi	sp,sp,-20
   178e0:	dfc00415 	stw	ra,16(sp)
   178e4:	df000315 	stw	fp,12(sp)
   178e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   178ec:	d0a02d17 	ldw	r2,-32588(gp)
   178f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   178f4:	d0a73c17 	ldw	r2,-25360(gp)
   178f8:	10800044 	addi	r2,r2,1
   178fc:	d0a73c15 	stw	r2,-25360(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   17900:	00002e06 	br	179bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   17904:	e0bffd17 	ldw	r2,-12(fp)
   17908:	10800017 	ldw	r2,0(r2)
   1790c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   17910:	e0bffd17 	ldw	r2,-12(fp)
   17914:	10800403 	ldbu	r2,16(r2)
   17918:	10803fcc 	andi	r2,r2,255
   1791c:	10000426 	beq	r2,zero,17930 <alt_tick+0x54>
   17920:	d0a73c17 	ldw	r2,-25360(gp)
   17924:	1000021e 	bne	r2,zero,17930 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   17928:	e0bffd17 	ldw	r2,-12(fp)
   1792c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   17930:	e0bffd17 	ldw	r2,-12(fp)
   17934:	10800217 	ldw	r2,8(r2)
   17938:	d0e73c17 	ldw	r3,-25360(gp)
   1793c:	18801d36 	bltu	r3,r2,179b4 <alt_tick+0xd8>
   17940:	e0bffd17 	ldw	r2,-12(fp)
   17944:	10800403 	ldbu	r2,16(r2)
   17948:	10803fcc 	andi	r2,r2,255
   1794c:	1000191e 	bne	r2,zero,179b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   17950:	e0bffd17 	ldw	r2,-12(fp)
   17954:	10800317 	ldw	r2,12(r2)
   17958:	e0fffd17 	ldw	r3,-12(fp)
   1795c:	18c00517 	ldw	r3,20(r3)
   17960:	1809883a 	mov	r4,r3
   17964:	103ee83a 	callr	r2
   17968:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1796c:	e0bfff17 	ldw	r2,-4(fp)
   17970:	1000031e 	bne	r2,zero,17980 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   17974:	e13ffd17 	ldw	r4,-12(fp)
   17978:	00178400 	call	17840 <alt_alarm_stop>
   1797c:	00000d06 	br	179b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   17980:	e0bffd17 	ldw	r2,-12(fp)
   17984:	10c00217 	ldw	r3,8(r2)
   17988:	e0bfff17 	ldw	r2,-4(fp)
   1798c:	1887883a 	add	r3,r3,r2
   17990:	e0bffd17 	ldw	r2,-12(fp)
   17994:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   17998:	e0bffd17 	ldw	r2,-12(fp)
   1799c:	10c00217 	ldw	r3,8(r2)
   179a0:	d0a73c17 	ldw	r2,-25360(gp)
   179a4:	1880032e 	bgeu	r3,r2,179b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   179a8:	e0bffd17 	ldw	r2,-12(fp)
   179ac:	00c00044 	movi	r3,1
   179b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   179b4:	e0bffe17 	ldw	r2,-8(fp)
   179b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   179bc:	e0fffd17 	ldw	r3,-12(fp)
   179c0:	d0a02d04 	addi	r2,gp,-32588
   179c4:	18bfcf1e 	bne	r3,r2,17904 <__alt_data_end+0xfffe6bc4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   179c8:	000f4540 	call	f454 <OSTimeTick>
}
   179cc:	0001883a 	nop
   179d0:	e037883a 	mov	sp,fp
   179d4:	dfc00117 	ldw	ra,4(sp)
   179d8:	df000017 	ldw	fp,0(sp)
   179dc:	dec00204 	addi	sp,sp,8
   179e0:	f800283a 	ret

000179e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   179e4:	deffff04 	addi	sp,sp,-4
   179e8:	df000015 	stw	fp,0(sp)
   179ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   179f0:	000170fa 	wrctl	ienable,zero
}
   179f4:	0001883a 	nop
   179f8:	e037883a 	mov	sp,fp
   179fc:	df000017 	ldw	fp,0(sp)
   17a00:	dec00104 	addi	sp,sp,4
   17a04:	f800283a 	ret

00017a08 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   17a08:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   17a0c:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   17a10:	d1273517 	ldw	r4,-25388(gp)

      stw ra,  0(sp)
   17a14:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   17a18:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   17a1c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   17a20:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   17a24:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   17a28:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   17a2c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   17a30:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   17a34:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   17a38:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   17a3c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   17a40:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   17a44:	0017c7c0 	call	17c7c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   17a48:	d1273017 	ldw	r4,-25408(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   17a4c:	d1672807 	ldb	r5,-25440(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   17a50:	d1273515 	stw	r4,-25388(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   17a54:	d1672845 	stb	r5,-25439(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   17a58:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   17a5c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   17a60:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   17a64:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   17a68:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   17a6c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   17a70:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   17a74:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   17a78:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   17a7c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   17a80:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   17a84:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   17a88:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   17a8c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   17a90:	f800283a 	ret

00017a94 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   17a94:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   17a98:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   17a9c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   17aa0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   17aa4:	0017c7c0 	call	17c7c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   17aa8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   17aac:	d4a72645 	stb	r18,-25447(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   17ab0:	003fe506 	br	17a48 <__alt_data_end+0xfffe6d08>

00017ab4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   17ab4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   17ab8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   17abc:	10800054 	ori	r2,r2,1
      wrctl status, r2
   17ac0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   17ac4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   17ac8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   17acc:	dec00204 	addi	sp,sp,8

      callr r2
   17ad0:	103ee83a 	callr	r2

      nop
   17ad4:	0001883a 	nop

00017ad8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   17ad8:	defff704 	addi	sp,sp,-36
   17adc:	dfc00815 	stw	ra,32(sp)
   17ae0:	df000715 	stw	fp,28(sp)
   17ae4:	df000704 	addi	fp,sp,28
   17ae8:	e13ffc15 	stw	r4,-16(fp)
   17aec:	e17ffd15 	stw	r5,-12(fp)
   17af0:	e1bffe15 	stw	r6,-8(fp)
   17af4:	3805883a 	mov	r2,r7
   17af8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   17afc:	e0fffe17 	ldw	r3,-8(fp)
   17b00:	00bfff04 	movi	r2,-4
   17b04:	1884703a 	and	r2,r3,r2
   17b08:	10bef704 	addi	r2,r2,-1060
   17b0c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   17b10:	01810904 	movi	r6,1060
   17b14:	000b883a 	mov	r5,zero
   17b18:	e13ff917 	ldw	r4,-28(fp)
   17b1c:	00015640 	call	1564 <memset>
   17b20:	e0bff917 	ldw	r2,-28(fp)
   17b24:	10c0bb04 	addi	r3,r2,748
   17b28:	e0bff917 	ldw	r2,-28(fp)
   17b2c:	10c00115 	stw	r3,4(r2)
   17b30:	e0bff917 	ldw	r2,-28(fp)
   17b34:	10c0d504 	addi	r3,r2,852
   17b38:	e0bff917 	ldw	r2,-28(fp)
   17b3c:	10c00215 	stw	r3,8(r2)
   17b40:	e0bff917 	ldw	r2,-28(fp)
   17b44:	10c0ef04 	addi	r3,r2,956
   17b48:	e0bff917 	ldw	r2,-28(fp)
   17b4c:	10c00315 	stw	r3,12(r2)
   17b50:	e0fff917 	ldw	r3,-28(fp)
   17b54:	008000b4 	movhi	r2,2
   17b58:	10a42504 	addi	r2,r2,-28524
   17b5c:	18800d15 	stw	r2,52(r3)
   17b60:	e0bff917 	ldw	r2,-28(fp)
   17b64:	00c00044 	movi	r3,1
   17b68:	10c02915 	stw	r3,164(r2)
   17b6c:	10002a15 	stw	zero,168(r2)
   17b70:	e0bff917 	ldw	r2,-28(fp)
   17b74:	00ccc384 	movi	r3,13070
   17b78:	10c02b0d 	sth	r3,172(r2)
   17b7c:	e0bff917 	ldw	r2,-28(fp)
   17b80:	00eaf344 	movi	r3,-21555
   17b84:	10c02b8d 	sth	r3,174(r2)
   17b88:	e0bff917 	ldw	r2,-28(fp)
   17b8c:	00c48d04 	movi	r3,4660
   17b90:	10c02c0d 	sth	r3,176(r2)
   17b94:	e0bff917 	ldw	r2,-28(fp)
   17b98:	00f99b44 	movi	r3,-6547
   17b9c:	10c02c8d 	sth	r3,178(r2)
   17ba0:	e0bff917 	ldw	r2,-28(fp)
   17ba4:	00f7bb04 	movi	r3,-8468
   17ba8:	10c02d0d 	sth	r3,180(r2)
   17bac:	e0bff917 	ldw	r2,-28(fp)
   17bb0:	00c00144 	movi	r3,5
   17bb4:	10c02d8d 	sth	r3,182(r2)
   17bb8:	e0bff917 	ldw	r2,-28(fp)
   17bbc:	00c002c4 	movi	r3,11
   17bc0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   17bc4:	e0bff917 	ldw	r2,-28(fp)
   17bc8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   17bcc:	e0bffa17 	ldw	r2,-24(fp)
   17bd0:	10bff304 	addi	r2,r2,-52
   17bd4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   17bd8:	e0bffb17 	ldw	r2,-20(fp)
   17bdc:	10800c04 	addi	r2,r2,48
   17be0:	e0fffc17 	ldw	r3,-16(fp)
   17be4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   17be8:	e0bffb17 	ldw	r2,-20(fp)
   17bec:	10800b04 	addi	r2,r2,44
   17bf0:	e0fffd17 	ldw	r3,-12(fp)
   17bf4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   17bf8:	e0bffb17 	ldw	r2,-20(fp)
   17bfc:	10800a04 	addi	r2,r2,40
   17c00:	e0fff917 	ldw	r3,-28(fp)
   17c04:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   17c08:	00800074 	movhi	r2,1
   17c0c:	109ead04 	addi	r2,r2,31412
   17c10:	10c00104 	addi	r3,r2,4
   17c14:	e0bffb17 	ldw	r2,-20(fp)
   17c18:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   17c1c:	e0bffb17 	ldw	r2,-20(fp)
}
   17c20:	e037883a 	mov	sp,fp
   17c24:	dfc00117 	ldw	ra,4(sp)
   17c28:	df000017 	ldw	fp,0(sp)
   17c2c:	dec00204 	addi	sp,sp,8
   17c30:	f800283a 	ret

00017c34 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   17c34:	defffe04 	addi	sp,sp,-8
   17c38:	df000115 	stw	fp,4(sp)
   17c3c:	df000104 	addi	fp,sp,4
   17c40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   17c44:	0001883a 	nop
   17c48:	e037883a 	mov	sp,fp
   17c4c:	df000017 	ldw	fp,0(sp)
   17c50:	dec00104 	addi	sp,sp,4
   17c54:	f800283a 	ret

00017c58 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   17c58:	defffe04 	addi	sp,sp,-8
   17c5c:	df000115 	stw	fp,4(sp)
   17c60:	df000104 	addi	fp,sp,4
   17c64:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   17c68:	0001883a 	nop
   17c6c:	e037883a 	mov	sp,fp
   17c70:	df000017 	ldw	fp,0(sp)
   17c74:	dec00104 	addi	sp,sp,4
   17c78:	f800283a 	ret

00017c7c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   17c7c:	deffff04 	addi	sp,sp,-4
   17c80:	df000015 	stw	fp,0(sp)
   17c84:	d839883a 	mov	fp,sp
}
   17c88:	0001883a 	nop
   17c8c:	e037883a 	mov	sp,fp
   17c90:	df000017 	ldw	fp,0(sp)
   17c94:	dec00104 	addi	sp,sp,4
   17c98:	f800283a 	ret

00017c9c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   17c9c:	deffff04 	addi	sp,sp,-4
   17ca0:	df000015 	stw	fp,0(sp)
   17ca4:	d839883a 	mov	fp,sp
}
   17ca8:	0001883a 	nop
   17cac:	e037883a 	mov	sp,fp
   17cb0:	df000017 	ldw	fp,0(sp)
   17cb4:	dec00104 	addi	sp,sp,4
   17cb8:	f800283a 	ret

00017cbc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   17cbc:	deffff04 	addi	sp,sp,-4
   17cc0:	df000015 	stw	fp,0(sp)
   17cc4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   17cc8:	0001883a 	nop
   17ccc:	e037883a 	mov	sp,fp
   17cd0:	df000017 	ldw	fp,0(sp)
   17cd4:	dec00104 	addi	sp,sp,4
   17cd8:	f800283a 	ret

00017cdc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   17cdc:	deffff04 	addi	sp,sp,-4
   17ce0:	df000015 	stw	fp,0(sp)
   17ce4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   17ce8:	0001883a 	nop
   17cec:	e037883a 	mov	sp,fp
   17cf0:	df000017 	ldw	fp,0(sp)
   17cf4:	dec00104 	addi	sp,sp,4
   17cf8:	f800283a 	ret

00017cfc <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   17cfc:	deffff04 	addi	sp,sp,-4
   17d00:	df000015 	stw	fp,0(sp)
   17d04:	d839883a 	mov	fp,sp
}
   17d08:	0001883a 	nop
   17d0c:	e037883a 	mov	sp,fp
   17d10:	df000017 	ldw	fp,0(sp)
   17d14:	dec00104 	addi	sp,sp,4
   17d18:	f800283a 	ret

00017d1c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   17d1c:	deffff04 	addi	sp,sp,-4
   17d20:	df000015 	stw	fp,0(sp)
   17d24:	d839883a 	mov	fp,sp
}
   17d28:	0001883a 	nop
   17d2c:	e037883a 	mov	sp,fp
   17d30:	df000017 	ldw	fp,0(sp)
   17d34:	dec00104 	addi	sp,sp,4
   17d38:	f800283a 	ret

00017d3c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   17d3c:	defffe04 	addi	sp,sp,-8
   17d40:	df000115 	stw	fp,4(sp)
   17d44:	df000104 	addi	fp,sp,4
   17d48:	e13fff15 	stw	r4,-4(fp)
}
   17d4c:	0001883a 	nop
   17d50:	e037883a 	mov	sp,fp
   17d54:	df000017 	ldw	fp,0(sp)
   17d58:	dec00104 	addi	sp,sp,4
   17d5c:	f800283a 	ret

00017d60 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   17d60:	defffa04 	addi	sp,sp,-24
   17d64:	dfc00515 	stw	ra,20(sp)
   17d68:	df000415 	stw	fp,16(sp)
   17d6c:	df000404 	addi	fp,sp,16
   17d70:	e13ffe15 	stw	r4,-8(fp)
   17d74:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   17d78:	e0bfff17 	ldw	r2,-4(fp)
   17d7c:	10800017 	ldw	r2,0(r2)
   17d80:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   17d84:	e13ffe17 	ldw	r4,-8(fp)
   17d88:	00018400 	call	1840 <strlen>
   17d8c:	10800044 	addi	r2,r2,1
   17d90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17d94:	00000d06 	br	17dcc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   17d98:	e0bffc17 	ldw	r2,-16(fp)
   17d9c:	10800217 	ldw	r2,8(r2)
   17da0:	e0fffd17 	ldw	r3,-12(fp)
   17da4:	180d883a 	mov	r6,r3
   17da8:	e17ffe17 	ldw	r5,-8(fp)
   17dac:	1009883a 	mov	r4,r2
   17db0:	00180d40 	call	180d4 <memcmp>
   17db4:	1000021e 	bne	r2,zero,17dc0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   17db8:	e0bffc17 	ldw	r2,-16(fp)
   17dbc:	00000706 	br	17ddc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   17dc0:	e0bffc17 	ldw	r2,-16(fp)
   17dc4:	10800017 	ldw	r2,0(r2)
   17dc8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   17dcc:	e0fffc17 	ldw	r3,-16(fp)
   17dd0:	e0bfff17 	ldw	r2,-4(fp)
   17dd4:	18bff01e 	bne	r3,r2,17d98 <__alt_data_end+0xfffe7058>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   17dd8:	0005883a 	mov	r2,zero
}
   17ddc:	e037883a 	mov	sp,fp
   17de0:	dfc00117 	ldw	ra,4(sp)
   17de4:	df000017 	ldw	fp,0(sp)
   17de8:	dec00204 	addi	sp,sp,8
   17dec:	f800283a 	ret

00017df0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   17df0:	defffb04 	addi	sp,sp,-20
   17df4:	dfc00415 	stw	ra,16(sp)
   17df8:	df000315 	stw	fp,12(sp)
   17dfc:	df000304 	addi	fp,sp,12
   17e00:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   17e04:	d0a00617 	ldw	r2,-32744(gp)
   17e08:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17e0c:	00003106 	br	17ed4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   17e10:	e0bffd17 	ldw	r2,-12(fp)
   17e14:	10800217 	ldw	r2,8(r2)
   17e18:	1009883a 	mov	r4,r2
   17e1c:	00018400 	call	1840 <strlen>
   17e20:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   17e24:	e0bffd17 	ldw	r2,-12(fp)
   17e28:	10c00217 	ldw	r3,8(r2)
   17e2c:	e0bffe17 	ldw	r2,-8(fp)
   17e30:	10bfffc4 	addi	r2,r2,-1
   17e34:	1885883a 	add	r2,r3,r2
   17e38:	10800003 	ldbu	r2,0(r2)
   17e3c:	10803fcc 	andi	r2,r2,255
   17e40:	1080201c 	xori	r2,r2,128
   17e44:	10bfe004 	addi	r2,r2,-128
   17e48:	10800bd8 	cmpnei	r2,r2,47
   17e4c:	1000031e 	bne	r2,zero,17e5c <alt_find_file+0x6c>
    {
      len -= 1;
   17e50:	e0bffe17 	ldw	r2,-8(fp)
   17e54:	10bfffc4 	addi	r2,r2,-1
   17e58:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17e5c:	e0bffe17 	ldw	r2,-8(fp)
   17e60:	e0ffff17 	ldw	r3,-4(fp)
   17e64:	1885883a 	add	r2,r3,r2
   17e68:	10800003 	ldbu	r2,0(r2)
   17e6c:	10803fcc 	andi	r2,r2,255
   17e70:	1080201c 	xori	r2,r2,128
   17e74:	10bfe004 	addi	r2,r2,-128
   17e78:	10800be0 	cmpeqi	r2,r2,47
   17e7c:	1000081e 	bne	r2,zero,17ea0 <alt_find_file+0xb0>
   17e80:	e0bffe17 	ldw	r2,-8(fp)
   17e84:	e0ffff17 	ldw	r3,-4(fp)
   17e88:	1885883a 	add	r2,r3,r2
   17e8c:	10800003 	ldbu	r2,0(r2)
   17e90:	10803fcc 	andi	r2,r2,255
   17e94:	1080201c 	xori	r2,r2,128
   17e98:	10bfe004 	addi	r2,r2,-128
   17e9c:	10000a1e 	bne	r2,zero,17ec8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   17ea0:	e0bffd17 	ldw	r2,-12(fp)
   17ea4:	10800217 	ldw	r2,8(r2)
   17ea8:	e0fffe17 	ldw	r3,-8(fp)
   17eac:	180d883a 	mov	r6,r3
   17eb0:	e17fff17 	ldw	r5,-4(fp)
   17eb4:	1009883a 	mov	r4,r2
   17eb8:	00180d40 	call	180d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   17ebc:	1000021e 	bne	r2,zero,17ec8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   17ec0:	e0bffd17 	ldw	r2,-12(fp)
   17ec4:	00000706 	br	17ee4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   17ec8:	e0bffd17 	ldw	r2,-12(fp)
   17ecc:	10800017 	ldw	r2,0(r2)
   17ed0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   17ed4:	e0fffd17 	ldw	r3,-12(fp)
   17ed8:	d0a00604 	addi	r2,gp,-32744
   17edc:	18bfcc1e 	bne	r3,r2,17e10 <__alt_data_end+0xfffe70d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   17ee0:	0005883a 	mov	r2,zero
}
   17ee4:	e037883a 	mov	sp,fp
   17ee8:	dfc00117 	ldw	ra,4(sp)
   17eec:	df000017 	ldw	fp,0(sp)
   17ef0:	dec00204 	addi	sp,sp,8
   17ef4:	f800283a 	ret

00017ef8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   17ef8:	defff804 	addi	sp,sp,-32
   17efc:	dfc00715 	stw	ra,28(sp)
   17f00:	df000615 	stw	fp,24(sp)
   17f04:	dc000515 	stw	r16,20(sp)
   17f08:	df000604 	addi	fp,sp,24
   17f0c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   17f10:	00bffa04 	movi	r2,-24
   17f14:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   17f18:	d0a71e17 	ldw	r2,-25480(gp)
   17f1c:	e0bffc15 	stw	r2,-16(fp)
   17f20:	e03ffd0d 	sth	zero,-12(fp)
   17f24:	e0bffd0b 	ldhu	r2,-12(fp)
   17f28:	e0fffd84 	addi	r3,fp,-10
   17f2c:	180d883a 	mov	r6,r3
   17f30:	100b883a 	mov	r5,r2
   17f34:	e13ffc17 	ldw	r4,-16(fp)
   17f38:	0013ca40 	call	13ca4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17f3c:	e03ffa15 	stw	zero,-24(fp)
   17f40:	00001d06 	br	17fb8 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   17f44:	040000b4 	movhi	r16,2
   17f48:	84265904 	addi	r16,r16,-26268
   17f4c:	e0bffa17 	ldw	r2,-24(fp)
   17f50:	01400304 	movi	r5,12
   17f54:	1009883a 	mov	r4,r2
   17f58:	0000bc00 	call	bc0 <__mulsi3>
   17f5c:	8085883a 	add	r2,r16,r2
   17f60:	10800017 	ldw	r2,0(r2)
   17f64:	1000111e 	bne	r2,zero,17fac <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   17f68:	040000b4 	movhi	r16,2
   17f6c:	84265904 	addi	r16,r16,-26268
   17f70:	e0bffa17 	ldw	r2,-24(fp)
   17f74:	01400304 	movi	r5,12
   17f78:	1009883a 	mov	r4,r2
   17f7c:	0000bc00 	call	bc0 <__mulsi3>
   17f80:	8085883a 	add	r2,r16,r2
   17f84:	e0fffe17 	ldw	r3,-8(fp)
   17f88:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   17f8c:	d0e00a17 	ldw	r3,-32728(gp)
   17f90:	e0bffa17 	ldw	r2,-24(fp)
   17f94:	1880020e 	bge	r3,r2,17fa0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   17f98:	e0bffa17 	ldw	r2,-24(fp)
   17f9c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   17fa0:	e0bffa17 	ldw	r2,-24(fp)
   17fa4:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   17fa8:	00000606 	br	17fc4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   17fac:	e0bffa17 	ldw	r2,-24(fp)
   17fb0:	10800044 	addi	r2,r2,1
   17fb4:	e0bffa15 	stw	r2,-24(fp)
   17fb8:	e0bffa17 	ldw	r2,-24(fp)
   17fbc:	10800810 	cmplti	r2,r2,32
   17fc0:	103fe01e 	bne	r2,zero,17f44 <__alt_data_end+0xfffe7204>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   17fc4:	d0a71e17 	ldw	r2,-25480(gp)
   17fc8:	1009883a 	mov	r4,r2
   17fcc:	001401c0 	call	1401c <OSSemPost>

  return rc;
   17fd0:	e0bffb17 	ldw	r2,-20(fp)
}
   17fd4:	e6ffff04 	addi	sp,fp,-4
   17fd8:	dfc00217 	ldw	ra,8(sp)
   17fdc:	df000117 	ldw	fp,4(sp)
   17fe0:	dc000017 	ldw	r16,0(sp)
   17fe4:	dec00304 	addi	sp,sp,12
   17fe8:	f800283a 	ret

00017fec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   17fec:	defffe04 	addi	sp,sp,-8
   17ff0:	df000115 	stw	fp,4(sp)
   17ff4:	df000104 	addi	fp,sp,4
   17ff8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   17ffc:	e0bfff17 	ldw	r2,-4(fp)
   18000:	10bffe84 	addi	r2,r2,-6
   18004:	10c00428 	cmpgeui	r3,r2,16
   18008:	18001a1e 	bne	r3,zero,18074 <alt_exception_cause_generated_bad_addr+0x88>
   1800c:	100690ba 	slli	r3,r2,2
   18010:	008000b4 	movhi	r2,2
   18014:	10a00904 	addi	r2,r2,-32732
   18018:	1885883a 	add	r2,r3,r2
   1801c:	10800017 	ldw	r2,0(r2)
   18020:	1000683a 	jmp	r2
   18024:	00018064 	muli	zero,zero,1537
   18028:	00018064 	muli	zero,zero,1537
   1802c:	00018074 	movhi	zero,1537
   18030:	00018074 	movhi	zero,1537
   18034:	00018074 	movhi	zero,1537
   18038:	00018064 	muli	zero,zero,1537
   1803c:	0001806c 	andhi	zero,zero,1537
   18040:	00018074 	movhi	zero,1537
   18044:	00018064 	muli	zero,zero,1537
   18048:	00018064 	muli	zero,zero,1537
   1804c:	00018074 	movhi	zero,1537
   18050:	00018064 	muli	zero,zero,1537
   18054:	0001806c 	andhi	zero,zero,1537
   18058:	00018074 	movhi	zero,1537
   1805c:	00018074 	movhi	zero,1537
   18060:	00018064 	muli	zero,zero,1537
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   18064:	00800044 	movi	r2,1
   18068:	00000306 	br	18078 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1806c:	0005883a 	mov	r2,zero
   18070:	00000106 	br	18078 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   18074:	0005883a 	mov	r2,zero
  }
}
   18078:	e037883a 	mov	sp,fp
   1807c:	df000017 	ldw	fp,0(sp)
   18080:	dec00104 	addi	sp,sp,4
   18084:	f800283a 	ret

00018088 <atexit>:
   18088:	200b883a 	mov	r5,r4
   1808c:	000f883a 	mov	r7,zero
   18090:	000d883a 	mov	r6,zero
   18094:	0009883a 	mov	r4,zero
   18098:	00181501 	jmpi	18150 <__register_exitproc>

0001809c <exit>:
   1809c:	defffe04 	addi	sp,sp,-8
   180a0:	000b883a 	mov	r5,zero
   180a4:	dc000015 	stw	r16,0(sp)
   180a8:	dfc00115 	stw	ra,4(sp)
   180ac:	2021883a 	mov	r16,r4
   180b0:	00182680 	call	18268 <__call_exitprocs>
   180b4:	008000b4 	movhi	r2,2
   180b8:	10aae104 	addi	r2,r2,-21628
   180bc:	11000017 	ldw	r4,0(r2)
   180c0:	20800f17 	ldw	r2,60(r4)
   180c4:	10000126 	beq	r2,zero,180cc <exit+0x30>
   180c8:	103ee83a 	callr	r2
   180cc:	8009883a 	mov	r4,r16
   180d0:	00183e80 	call	183e8 <_exit>

000180d4 <memcmp>:
   180d4:	01c000c4 	movi	r7,3
   180d8:	3980192e 	bgeu	r7,r6,18140 <memcmp+0x6c>
   180dc:	2144b03a 	or	r2,r4,r5
   180e0:	11c4703a 	and	r2,r2,r7
   180e4:	10000f26 	beq	r2,zero,18124 <memcmp+0x50>
   180e8:	20800003 	ldbu	r2,0(r4)
   180ec:	28c00003 	ldbu	r3,0(r5)
   180f0:	10c0151e 	bne	r2,r3,18148 <memcmp+0x74>
   180f4:	31bfff84 	addi	r6,r6,-2
   180f8:	01ffffc4 	movi	r7,-1
   180fc:	00000406 	br	18110 <memcmp+0x3c>
   18100:	20800003 	ldbu	r2,0(r4)
   18104:	28c00003 	ldbu	r3,0(r5)
   18108:	31bfffc4 	addi	r6,r6,-1
   1810c:	10c00e1e 	bne	r2,r3,18148 <memcmp+0x74>
   18110:	21000044 	addi	r4,r4,1
   18114:	29400044 	addi	r5,r5,1
   18118:	31fff91e 	bne	r6,r7,18100 <__alt_data_end+0xfffe73c0>
   1811c:	0005883a 	mov	r2,zero
   18120:	f800283a 	ret
   18124:	20c00017 	ldw	r3,0(r4)
   18128:	28800017 	ldw	r2,0(r5)
   1812c:	18bfee1e 	bne	r3,r2,180e8 <__alt_data_end+0xfffe73a8>
   18130:	31bfff04 	addi	r6,r6,-4
   18134:	21000104 	addi	r4,r4,4
   18138:	29400104 	addi	r5,r5,4
   1813c:	39bff936 	bltu	r7,r6,18124 <__alt_data_end+0xfffe73e4>
   18140:	303fe91e 	bne	r6,zero,180e8 <__alt_data_end+0xfffe73a8>
   18144:	003ff506 	br	1811c <__alt_data_end+0xfffe73dc>
   18148:	10c5c83a 	sub	r2,r2,r3
   1814c:	f800283a 	ret

00018150 <__register_exitproc>:
   18150:	defffa04 	addi	sp,sp,-24
   18154:	dc000315 	stw	r16,12(sp)
   18158:	040000b4 	movhi	r16,2
   1815c:	842ae104 	addi	r16,r16,-21628
   18160:	80c00017 	ldw	r3,0(r16)
   18164:	dc400415 	stw	r17,16(sp)
   18168:	dfc00515 	stw	ra,20(sp)
   1816c:	18805217 	ldw	r2,328(r3)
   18170:	2023883a 	mov	r17,r4
   18174:	10003726 	beq	r2,zero,18254 <__register_exitproc+0x104>
   18178:	10c00117 	ldw	r3,4(r2)
   1817c:	010007c4 	movi	r4,31
   18180:	20c00e16 	blt	r4,r3,181bc <__register_exitproc+0x6c>
   18184:	1a000044 	addi	r8,r3,1
   18188:	8800221e 	bne	r17,zero,18214 <__register_exitproc+0xc4>
   1818c:	18c00084 	addi	r3,r3,2
   18190:	18c7883a 	add	r3,r3,r3
   18194:	18c7883a 	add	r3,r3,r3
   18198:	12000115 	stw	r8,4(r2)
   1819c:	10c7883a 	add	r3,r2,r3
   181a0:	19400015 	stw	r5,0(r3)
   181a4:	0005883a 	mov	r2,zero
   181a8:	dfc00517 	ldw	ra,20(sp)
   181ac:	dc400417 	ldw	r17,16(sp)
   181b0:	dc000317 	ldw	r16,12(sp)
   181b4:	dec00604 	addi	sp,sp,24
   181b8:	f800283a 	ret
   181bc:	00800034 	movhi	r2,0
   181c0:	1082fa04 	addi	r2,r2,3048
   181c4:	10002626 	beq	r2,zero,18260 <__register_exitproc+0x110>
   181c8:	01006404 	movi	r4,400
   181cc:	d9400015 	stw	r5,0(sp)
   181d0:	d9800115 	stw	r6,4(sp)
   181d4:	d9c00215 	stw	r7,8(sp)
   181d8:	0000be80 	call	be8 <malloc>
   181dc:	d9400017 	ldw	r5,0(sp)
   181e0:	d9800117 	ldw	r6,4(sp)
   181e4:	d9c00217 	ldw	r7,8(sp)
   181e8:	10001d26 	beq	r2,zero,18260 <__register_exitproc+0x110>
   181ec:	81000017 	ldw	r4,0(r16)
   181f0:	10000115 	stw	zero,4(r2)
   181f4:	02000044 	movi	r8,1
   181f8:	22405217 	ldw	r9,328(r4)
   181fc:	0007883a 	mov	r3,zero
   18200:	12400015 	stw	r9,0(r2)
   18204:	20805215 	stw	r2,328(r4)
   18208:	10006215 	stw	zero,392(r2)
   1820c:	10006315 	stw	zero,396(r2)
   18210:	883fde26 	beq	r17,zero,1818c <__alt_data_end+0xfffe744c>
   18214:	18c9883a 	add	r4,r3,r3
   18218:	2109883a 	add	r4,r4,r4
   1821c:	1109883a 	add	r4,r2,r4
   18220:	21802215 	stw	r6,136(r4)
   18224:	01800044 	movi	r6,1
   18228:	12406217 	ldw	r9,392(r2)
   1822c:	30cc983a 	sll	r6,r6,r3
   18230:	4992b03a 	or	r9,r9,r6
   18234:	12406215 	stw	r9,392(r2)
   18238:	21c04215 	stw	r7,264(r4)
   1823c:	01000084 	movi	r4,2
   18240:	893fd21e 	bne	r17,r4,1818c <__alt_data_end+0xfffe744c>
   18244:	11006317 	ldw	r4,396(r2)
   18248:	218cb03a 	or	r6,r4,r6
   1824c:	11806315 	stw	r6,396(r2)
   18250:	003fce06 	br	1818c <__alt_data_end+0xfffe744c>
   18254:	18805304 	addi	r2,r3,332
   18258:	18805215 	stw	r2,328(r3)
   1825c:	003fc606 	br	18178 <__alt_data_end+0xfffe7438>
   18260:	00bfffc4 	movi	r2,-1
   18264:	003fd006 	br	181a8 <__alt_data_end+0xfffe7468>

00018268 <__call_exitprocs>:
   18268:	defff504 	addi	sp,sp,-44
   1826c:	df000915 	stw	fp,36(sp)
   18270:	dd400615 	stw	r21,24(sp)
   18274:	dc800315 	stw	r18,12(sp)
   18278:	dfc00a15 	stw	ra,40(sp)
   1827c:	ddc00815 	stw	r23,32(sp)
   18280:	dd800715 	stw	r22,28(sp)
   18284:	dd000515 	stw	r20,20(sp)
   18288:	dcc00415 	stw	r19,16(sp)
   1828c:	dc400215 	stw	r17,8(sp)
   18290:	dc000115 	stw	r16,4(sp)
   18294:	d9000015 	stw	r4,0(sp)
   18298:	2839883a 	mov	fp,r5
   1829c:	04800044 	movi	r18,1
   182a0:	057fffc4 	movi	r21,-1
   182a4:	008000b4 	movhi	r2,2
   182a8:	10aae104 	addi	r2,r2,-21628
   182ac:	12000017 	ldw	r8,0(r2)
   182b0:	45005217 	ldw	r20,328(r8)
   182b4:	44c05204 	addi	r19,r8,328
   182b8:	a0001c26 	beq	r20,zero,1832c <__call_exitprocs+0xc4>
   182bc:	a0800117 	ldw	r2,4(r20)
   182c0:	15ffffc4 	addi	r23,r2,-1
   182c4:	b8000d16 	blt	r23,zero,182fc <__call_exitprocs+0x94>
   182c8:	14000044 	addi	r16,r2,1
   182cc:	8421883a 	add	r16,r16,r16
   182d0:	8421883a 	add	r16,r16,r16
   182d4:	84402004 	addi	r17,r16,128
   182d8:	a463883a 	add	r17,r20,r17
   182dc:	a421883a 	add	r16,r20,r16
   182e0:	e0001e26 	beq	fp,zero,1835c <__call_exitprocs+0xf4>
   182e4:	80804017 	ldw	r2,256(r16)
   182e8:	e0801c26 	beq	fp,r2,1835c <__call_exitprocs+0xf4>
   182ec:	bdffffc4 	addi	r23,r23,-1
   182f0:	843fff04 	addi	r16,r16,-4
   182f4:	8c7fff04 	addi	r17,r17,-4
   182f8:	bd7ff91e 	bne	r23,r21,182e0 <__alt_data_end+0xfffe75a0>
   182fc:	00800034 	movhi	r2,0
   18300:	1082ff04 	addi	r2,r2,3068
   18304:	10000926 	beq	r2,zero,1832c <__call_exitprocs+0xc4>
   18308:	a0800117 	ldw	r2,4(r20)
   1830c:	1000301e 	bne	r2,zero,183d0 <__call_exitprocs+0x168>
   18310:	a0800017 	ldw	r2,0(r20)
   18314:	10003226 	beq	r2,zero,183e0 <__call_exitprocs+0x178>
   18318:	a009883a 	mov	r4,r20
   1831c:	98800015 	stw	r2,0(r19)
   18320:	0000bfc0 	call	bfc <free>
   18324:	9d000017 	ldw	r20,0(r19)
   18328:	a03fe41e 	bne	r20,zero,182bc <__alt_data_end+0xfffe757c>
   1832c:	dfc00a17 	ldw	ra,40(sp)
   18330:	df000917 	ldw	fp,36(sp)
   18334:	ddc00817 	ldw	r23,32(sp)
   18338:	dd800717 	ldw	r22,28(sp)
   1833c:	dd400617 	ldw	r21,24(sp)
   18340:	dd000517 	ldw	r20,20(sp)
   18344:	dcc00417 	ldw	r19,16(sp)
   18348:	dc800317 	ldw	r18,12(sp)
   1834c:	dc400217 	ldw	r17,8(sp)
   18350:	dc000117 	ldw	r16,4(sp)
   18354:	dec00b04 	addi	sp,sp,44
   18358:	f800283a 	ret
   1835c:	a0800117 	ldw	r2,4(r20)
   18360:	80c00017 	ldw	r3,0(r16)
   18364:	10bfffc4 	addi	r2,r2,-1
   18368:	15c01426 	beq	r2,r23,183bc <__call_exitprocs+0x154>
   1836c:	80000015 	stw	zero,0(r16)
   18370:	183fde26 	beq	r3,zero,182ec <__alt_data_end+0xfffe75ac>
   18374:	95c8983a 	sll	r4,r18,r23
   18378:	a0806217 	ldw	r2,392(r20)
   1837c:	a5800117 	ldw	r22,4(r20)
   18380:	2084703a 	and	r2,r4,r2
   18384:	10000b26 	beq	r2,zero,183b4 <__call_exitprocs+0x14c>
   18388:	a0806317 	ldw	r2,396(r20)
   1838c:	2088703a 	and	r4,r4,r2
   18390:	20000c1e 	bne	r4,zero,183c4 <__call_exitprocs+0x15c>
   18394:	89400017 	ldw	r5,0(r17)
   18398:	d9000017 	ldw	r4,0(sp)
   1839c:	183ee83a 	callr	r3
   183a0:	a0800117 	ldw	r2,4(r20)
   183a4:	15bfbf1e 	bne	r2,r22,182a4 <__alt_data_end+0xfffe7564>
   183a8:	98800017 	ldw	r2,0(r19)
   183ac:	153fcf26 	beq	r2,r20,182ec <__alt_data_end+0xfffe75ac>
   183b0:	003fbc06 	br	182a4 <__alt_data_end+0xfffe7564>
   183b4:	183ee83a 	callr	r3
   183b8:	003ff906 	br	183a0 <__alt_data_end+0xfffe7660>
   183bc:	a5c00115 	stw	r23,4(r20)
   183c0:	003feb06 	br	18370 <__alt_data_end+0xfffe7630>
   183c4:	89000017 	ldw	r4,0(r17)
   183c8:	183ee83a 	callr	r3
   183cc:	003ff406 	br	183a0 <__alt_data_end+0xfffe7660>
   183d0:	a0800017 	ldw	r2,0(r20)
   183d4:	a027883a 	mov	r19,r20
   183d8:	1029883a 	mov	r20,r2
   183dc:	003fb606 	br	182b8 <__alt_data_end+0xfffe7578>
   183e0:	0005883a 	mov	r2,zero
   183e4:	003ffb06 	br	183d4 <__alt_data_end+0xfffe7694>

000183e8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   183e8:	defffd04 	addi	sp,sp,-12
   183ec:	df000215 	stw	fp,8(sp)
   183f0:	df000204 	addi	fp,sp,8
   183f4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   183f8:	d0272645 	stb	zero,-25447(gp)
   183fc:	e0bfff17 	ldw	r2,-4(fp)
   18400:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   18404:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   18408:	10000226 	beq	r2,zero,18414 <_exit+0x2c>
    ALT_SIM_FAIL();
   1840c:	002af070 	cmpltui	zero,zero,43969
   18410:	00000106 	br	18418 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   18414:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   18418:	003fff06 	br	18418 <__alt_data_end+0xfffe76d8>
