
nios_ii.elf:     file format elf32-littlenios2
nios_ii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d248 memsz 0x0000d248 flags r-x
    LOAD off    0x0000e268 vaddr 0x0000d268 paddr 0x0000ed88 align 2**12
         filesz 0x00001b20 memsz 0x00001b20 flags rw-
    LOAD off    0x000108a8 vaddr 0x000108a8 paddr 0x000108a8 align 2**12
         filesz 0x00000000 memsz 0x000073e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ced0  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000168  0000d100  0000d100  0000e100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b20  0000d268  0000ed88  0000e268  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073e0  000108a8  000108a8  000108a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00017c88  00017c88  0000fd88  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000fd88  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b60  00000000  00000000  0000fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001f5f1  00000000  00000000  00010910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a42  00000000  00000000  0002ff01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008a88  00000000  00000000  00037943  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025ac  00000000  00000000  000403cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038d1  00000000  00000000  00042978  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035c6  00000000  00000000  00046249  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00049810  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000548  00000000  00000000  00049820  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0004dafe  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004db04  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004db10  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004db11  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004db12  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004db1d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004db28  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0004db33  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0004db41  2**0
                  CONTENTS, READONLY
 26 .jdi          000045ae  00000000  00000000  0004db6b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00040480  00000000  00000000  00052119  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000d100 l    d  .rodata	00000000 .rodata
0000d268 l    d  .rwdata	00000000 .rwdata
000108a8 l    d  .bss	00000000 .bss
00017c88 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ii_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
0000d268 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000c60 l     F .text	00000008 __fp_unlock
00000c74 l     F .text	0000019c __sinit.part.1
00000e10 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00002474 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002588 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000025b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000026a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00002790 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000287c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00002a50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ecfc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00002cc4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000ed00 l     O .rwdata	00000004 lockid
000108cc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000ed04 l     O .rwdata	00000004 lockid
000108d4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000046fc l     F .text	00000048 OS_InitMisc
00004744 l     F .text	0000006c OS_InitRdyList
000048b0 l     F .text	000000e4 OS_InitTCBList
0000461c l     F .text	000000e0 OS_InitEventList
000047b0 l     F .text	00000080 OS_InitTaskIdle
00004830 l     F .text	00000080 OS_InitTaskStat
00004b20 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00006830 l     F .text	000000f4 OS_FlagTaskRdy
000065f0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a908 l     F .text	00000034 alt_dev_reg
0000dc3c l     O .rwdata	0000106c jtag_uart_0
0000eca8 l     O .rwdata	0000002c adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ac8c l     F .text	000002a4 altera_avalon_jtag_uart_irq
0000af30 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b70c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b94c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bdac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bf0c l     F .text	0000003c alt_get_errno
0000bf48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00010938 g     O .bss	00000004 alt_instruction_exception_handler
0000058c g     F .text	00000018 putchar
0000ed52 g     O .rwdata	00000002 OSTaskNameSize
00002338 g     F .text	00000054 _isatty_r
00002994 g     F .text	000000bc alt_main
00017b88 g     O .bss	00000100 alt_irq
0000238c g     F .text	00000060 _lseek_r
00007050 g     F .text	000000d8 OS_MemInit
0000ed88 g       *ABS*	00000000 __flash_rwdata_start
0000a8a8 g     F .text	00000060 OSTimeSet
00003370 g     F .text	00000610 OSEventPendMulti
00017c88 g       *ABS*	00000000 __alt_heap_start
0000c584 g     F .text	00000024 OSTaskCreateHook
0000ed2a g     O .rwdata	00000002 OSMboxEn
00010964 g     O .bss	00002000 TaskADCToFFTStack
000039d8 g     F .text	0000004c OSIntEnter
000020c0 g     F .text	0000005c __sseek
00000fc0 g     F .text	00000010 __sinit
0000070c g     F .text	00000140 __swbuf_r
0000ed3a g     O .rwdata	00000002 OSQEn
00000e18 g     F .text	00000078 __sfmoreglue
00003044 g     F .text	000000cc __malloc_unlock
0000c5ec g     F .text	00000020 OSTaskStatHook
000108dc g     O .bss	00000001 OSLockNesting
0000032c g     F .text	00000130 Bel_FFT_Init
0000ed78 g     O .rwdata	00000002 OSDataSize
000108dd g     O .bss	00000001 OSRunning
0000c62c g     F .text	00000020 OSInitHookBegin
0000ed70 g     O .rwdata	00000002 OSTmrSize
00000fa8 g     F .text	00000018 _cleanup
000108e0 g     O .bss	00000004 OSIdleCtr
0000c334 g     F .text	00000024 altera_nios2_gen2_irq_init
0000c404 g       .text	00000000 OSStartTsk
00004e50 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
0000ed76 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ed16 g     O .rwdata	00000002 OSEventSize
000108e4 g     O .bss	00000001 OSPrioHighRdy
000022dc g     F .text	0000005c _fstat_r
0000c5a8 g     F .text	00000024 OSTaskDelHook
000108b8 g     O .bss	00000004 errno
0000203c g     F .text	00000008 __seofread
0000c3e4 g       .text	00000000 OSStartHighRdy
00009328 g     F .text	000001e4 OSTaskCreateExt
00006138 g     F .text	00000060 OSFlagPendGetFlagsRdy
0000ed56 g     O .rwdata	00000002 OSTaskStatStkSize
000052b4 g     F .text	00000308 OSFlagAccept
00007694 g     F .text	000000b8 OSQFlush
00007128 g     F .text	00000140 OSQAccept
000108c4 g     O .bss	00000004 alt_argv
00016cd4 g       *ABS*	00000000 _gp
0000917c g     F .text	000001ac OSTaskCreate
00008c8c g     F .text	000004f0 OSTaskChangePrio
000108d8 g     O .bss	00000004 alt_heapsem
00005124 g     F .text	00000190 OSDebugInit
0000950c g     F .text	00000344 OSTaskDel
0000dabc g     O .rwdata	00000180 alt_fd_list
00014964 g     O .bss	00000370 OSFlagTbl
00000584 g     F .text	00000008 _putchar_r
000043fc g     F .text	000000b8 OS_EventTaskRemove
0000c6b0 g     F .text	00000090 alt_find_dev
0000caa0 g     F .text	00000148 memcpy
0000ed40 g     O .rwdata	00000002 OSRdyTblSize
00000c68 g     F .text	0000000c _cleanup_r
0000be90 g     F .text	0000007c alt_io_redirect
0000d100 g       *ABS*	00000000 __DTOR_END__
0000c93c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00003110 g     F .text	00000120 OSEventNameGet
0000ed24 g     O .rwdata	00000002 OSFlagMax
00003a24 g     F .text	000000f8 OSIntExit
0000ed5e g     O .rwdata	00000002 OSTCBSize
000108e5 g     O .bss	00000001 OSPrioCur
0000b18c g     F .text	000002bc altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000d010 g     F .text	00000064 .hidden __udivsi3
000026e4 g     F .text	000000ac isatty
0000ed44 g     O .rwdata	00000002 OSStkWidth
0000ed38 g     O .rwdata	00000002 OSPtrSize
0000ed18 g     O .rwdata	00000002 OSEventTblSize
0000c358 g       .text	00000000 OSCtxSw
000108b4 g     O .bss	00000004 __malloc_top_pad
000108e8 g     O .bss	00000004 OSTCBList
000108bc g     O .bss	00000004 alt_fd_list_lock
000002f8 g     F .text	00000034 TaskADCToFFT
00014cd4 g     O .bss	00000c30 OSMemTbl
000108ec g     O .bss	00000001 OSTickStepState
00001f94 g     F .text	00000054 _sbrk_r
0000ed3c g     O .rwdata	00000002 OSQMax
00015904 g     O .bss	00000800 OSTaskStatStk
00006c8c g     F .text	000000f0 OSMemNameGet
0000ed1c g     O .rwdata	00000002 OSFlagEn
000023ec g     F .text	00000060 _read_r
0000ed62 g     O .rwdata	00000002 OSTimeTickHookEn
00007b44 g     F .text	00000168 OSQPost
00006924 g     F .text	000000a4 OS_FlagUnlink
0000ecf4 g     O .rwdata	00000004 alt_max_fd
000049e8 g     F .text	00000068 OS_MemCopy
00004a50 g     F .text	000000d0 OS_Sched
000021d8 g     F .text	000000f0 _fclose_r
00006b9c g     F .text	000000f0 OSMemGet
00009b38 g     F .text	000001b4 OSTaskNameSet
00000c30 g     F .text	00000030 fflush
000108b0 g     O .bss	00000004 __malloc_max_sbrked_mem
000108f0 g     O .bss	00000004 OSCtxSwCtr
0000c60c g     F .text	00000020 OSTimeTickHook
0000ed26 g     O .rwdata	00000002 OSFlagNameSize
000044b4 g     F .text	00000100 OS_EventTaskRemoveMulti
000042ac g     F .text	00000150 OS_EventTaskWaitMulti
0000ed3e g     O .rwdata	00000002 OSQSize
000028b8 g     F .text	000000dc lseek
000085f4 g     F .text	0000020c OSSemPend
0000ecd4 g     O .rwdata	00000004 _global_impure_ptr
0000ed28 g     O .rwdata	00000002 OSLowestPrio
00017c88 g       *ABS*	00000000 __bss_end
0000bcbc g     F .text	000000f0 alt_iic_isr_register
0000c68c g     F .text	00000024 OSTCBInitHook
0000ed6e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000c22c g     F .text	00000108 alt_tick
0000ed10 g     O .rwdata	00000002 OSEventEn
0000ed6a g     O .rwdata	00000002 OSTmrCfgNameSize
00000fe0 g     F .text	00000018 __fp_lock_all
0000bc70 g     F .text	0000004c alt_ic_irq_enabled
00006750 g     F .text	000000e0 OS_FlagInit
0000c190 g     F .text	0000009c alt_alarm_stop
0000ed4c g     O .rwdata	00000002 OSTaskIdleStkSize
0001092c g     O .bss	00000004 alt_irq_active
0000822c g     F .text	000000b0 OSSemAccept
00006e90 g     F .text	000000d8 OSMemPut
000108a8 g     O .bss	00000004 ADC_value
000069c8 g     F .text	000001d4 OSMemCreate
000108f4 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000da94 g     O .rwdata	00000028 alt_dev_null
0000ed60 g     O .rwdata	00000002 OSTicksPerSec
0000c358 g       .text	00000000 OSIntCtxSw
0000b92c g     F .text	00000020 alt_dcache_flush_all
000108f8 g     O .bss	00000004 OSTCBFreeList
0000ed88 g       *ABS*	00000000 __ram_rwdata_end
00008800 g     F .text	0000016c OSSemPendAbort
0000ecec g     O .rwdata	00000008 alt_dev_list
00002d00 g     F .text	00000100 write
000005a4 g     F .text	000000a0 _putc_r
0000ed64 g     O .rwdata	00000002 OSVersionNbr
00012964 g     O .bss	00002000 TaskStartStack
0000d268 g       *ABS*	00000000 __ram_rodata_end
000025f0 g     F .text	000000b8 fstat
0000ed0c g     O .rwdata	00000004 OSEndiannessTest
0000d074 g     F .text	00000058 .hidden __umodsi3
0000ed1e g     O .rwdata	00000002 OSFlagGrpSize
00017c88 g       *ABS*	00000000 end
0000ab44 g     F .text	00000148 altera_avalon_jtag_uart_init
00004cb8 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000d100 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000b784 g     F .text	0000007c alt_avalon_timer_sc_init
0000b448 g     F .text	000002c4 altera_avalon_jtag_uart_write
00000fd0 g     F .text	00000004 __sfp_lock_acquire
00004994 g     F .text	00000054 OS_MemClr
0000c428 g     F .text	0000015c OSTaskStkInit
00001134 g     F .text	00000310 _free_r
00004004 g     F .text	00000198 OS_EventTaskRdy
0000cd98 g     F .text	00000180 __call_exitprocs
000108fc g     O .bss	00000001 OSCPUUsage
0000ecdc g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
00010930 g     O .bss	00000004 _alt_tick_rate
0000774c g     F .text	0000028c OSQPend
0000a3f8 g     F .text	00000104 OSTimeDly
00010934 g     O .bss	00000004 _alt_nticks
00002a8c g     F .text	00000104 read
0000a974 g     F .text	0000006c alt_sys_init
0000cc80 g     F .text	00000118 __register_exitproc
000108fd g     O .bss	00000001 OSTaskCtr
0000a4fc g     F .text	0000017c OSTimeDlyHMSM
0000b034 g     F .text	00000068 altera_avalon_jtag_uart_close
0000244c g     F .text	00000028 .hidden __mulsi3
0000d268 g       *ABS*	00000000 __ram_rwdata_start
0000d100 g       *ABS*	00000000 __ram_rodata_start
0001093c g     O .bss	00000028 __malloc_current_mallinfo
0000ed12 g     O .rwdata	00000002 OSEventMax
0000896c g     F .text	00000110 OSSemPost
00003ba8 g     F .text	000000dc OSSchedUnlock
0000a9e0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c848 g     F .text	000000f4 alt_get_fd
00010900 g     O .bss	00000004 OSMemFreeList
00003cf4 g     F .text	000000b0 OSStatInit
0000652c g     F .text	000000c4 OSFlagQuery
0000ed48 g     O .rwdata	00000002 OSTaskCreateExtEn
00002184 g     F .text	00000054 _close_r
0000ca24 g     F .text	0000007c memcmp
00003fe4 g     F .text	00000020 OS_Dummy
0000aaa0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017c88 g       *ABS*	00000000 __alt_stack_base
0000aaf0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00000864 g     F .text	00000154 __swsetup_r
00016104 g     O .bss	000001e0 OSQTbl
00000e90 g     F .text	00000118 __sfp
0000d68c g     O .rwdata	00000408 __malloc_av_
00000fdc g     F .text	00000004 __sinit_lock_release
00010904 g     O .bss	00000004 OSTCBHighRdy
00001fe8 g     F .text	00000054 __sread
00010908 g     O .bss	00000004 OSQFreeList
0000c740 g     F .text	00000108 alt_find_file
0000b988 g     F .text	000000a4 alt_dev_llist_insert
00002f24 g     F .text	00000120 __malloc_lock
00002c14 g     F .text	000000b0 sbrk
00003230 g     F .text	00000140 OSEventNameSet
00000bd4 g     F .text	0000005c _fflush_r
0001090c g     O .bss	00000001 OSRdyGrp
000108a8 g       *ABS*	00000000 __bss_start
0000045c g     F .text	00000128 memset
0000026c g     F .text	00000050 main
000108c8 g     O .bss	00000004 alt_envp
000108ac g     O .bss	00000004 __malloc_max_total_mem
0000aa40 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000084c g     F .text	00000018 __swbuf
0000d124 g     O .rodata	00000100 OSUnMapTbl
0000ed42 g     O .rwdata	00000002 OSSemEn
00006198 g     F .text	00000394 OSFlagPost
0000211c g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
000022c8 g     F .text	00000014 fclose
0000419c g     F .text	00000110 OS_EventTaskWait
00004d84 g     F .text	000000cc OS_TaskStatStkChk
00009850 g     F .text	00000150 OSTaskDelReq
00001788 g     F .text	0000080c _malloc_r
0000ecf8 g     O .rwdata	00000004 alt_errno
00003c84 g     F .text	00000070 OSStart
00002ec4 g     F .text	00000060 __env_unlock
00001444 g     F .text	000000c4 _fwalk
00009cec g     F .text	000001d4 OSTaskResume
00006f68 g     F .text	000000e8 OSMemQuery
0000ed54 g     O .rwdata	00000002 OSTaskStatEn
0000ed2e g     O .rwdata	00000002 OSMemMax
00007cac g     F .text	00000170 OSQPostFront
00000644 g     F .text	000000c8 putc
0000cf18 g     F .text	00000084 .hidden __divsi3
0001090d g     O .bss	00000003 OSRdyTbl
0000ed08 g     O .rwdata	00000002 OSDebugEn
00001010 g     F .text	00000124 _malloc_trim_r
0000d100 g       *ABS*	00000000 __CTOR_END__
0000ed20 g     O .rwdata	00000002 OSFlagNodeSize
0000ed68 g     O .rwdata	00000002 OSTmrCfgMax
00007268 g     F .text	000001ac OSQCreate
000099a0 g     F .text	00000198 OSTaskNameGet
0000d100 g       *ABS*	00000000 __flash_rodata_start
00007e1c g     F .text	0000020c OSQPostOpt
00003da4 g     F .text	00000220 OSTimeTick
0000ed50 g     O .rwdata	00000002 OSTaskMax
0000d100 g       *ABS*	00000000 __DTOR_LIST__
000082dc g     F .text	000000d8 OSSemCreate
0000ed74 g     O .rwdata	00000002 OSTmrWheelSize
0000ed4a g     O .rwdata	00000002 OSTaskDelEn
00008a7c g     F .text	00000110 OSSemQuery
00007414 g     F .text	00000280 OSQDel
000079d8 g     F .text	0000016c OSQPendAbort
0000a93c g     F .text	00000038 alt_irq_init
00002b90 g     F .text	00000084 alt_release_fd
0000c9d8 g     F .text	00000014 atexit
00002124 g     F .text	00000060 _write_r
00003b1c g     F .text	0000008c OSSchedLock
000055bc g     F .text	00000108 OSFlagCreate
0000ecd8 g     O .rwdata	00000004 _impure_ptr
000108c0 g     O .bss	00000004 alt_argc
000009b8 g     F .text	0000021c __sflush_r
0000ba8c g     F .text	00000060 _do_dtors
0000ed1a g     O .rwdata	00000002 OSEventMultiEn
000056c4 g     F .text	00000248 OSFlagDel
00010910 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00005b80 g     F .text	000005b8 OSFlagPend
0000ed66 g     O .rwdata	00000002 OSTmrEn
00000ff8 g     F .text	00000018 __fp_unlock_all
0000ece4 g     O .rwdata	00000008 alt_fs_list
00004b94 g     F .text	00000074 OS_StrCopy
0000ed30 g     O .rwdata	00000002 OSMemNameSize
0000c64c g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000ed5c g     O .rwdata	00000002 OSTCBPrioTblMax
0000ed58 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000bb0c g     F .text	00000050 alt_ic_isr_register
0000ed2c g     O .rwdata	00000002 OSMemEn
0000ed36 g     O .rwdata	00000002 OSMutexEn
0000ed88 g       *ABS*	00000000 _edata
00017c88 g       *ABS*	00000000 _end
00010914 g     O .bss	00000001 OSIntNesting
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000b09c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000a678 g     F .text	000001d4 OSTimeDlyResume
00005a34 g     F .text	0000014c OSFlagNameSet
00009ec0 g     F .text	000001c0 OSTaskStkChk
0000bbe4 g     F .text	0000008c alt_ic_irq_disable
0000ed32 g     O .rwdata	00000002 OSMemSize
00002044 g     F .text	0000007c __swrite
0000ece0 g     O .rwdata	00000004 __malloc_trim_threshold
00010918 g     O .bss	00000004 OSTCBCur
0000c9ec g     F .text	00000038 exit
0000ed34 g     O .rwdata	00000002 OSMemTblSize
00001508 g     F .text	000000c4 _fwalk_reent
0000cf9c g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000fd4 g     F .text	00000004 __sfp_lock_release
00003980 g     F .text	00000058 OSInit
0000a264 g     F .text	00000124 OSTaskQuery
00008184 g     F .text	000000a8 OS_QInit
000002bc g     F .text	0000003c TaskStart
00004c08 g     F .text	00000054 OS_StrLen
00006d7c g     F .text	00000114 OSMemNameSet
0000ed4e g     O .rwdata	00000002 OSTaskProfileEn
0001091c g     O .bss	00000004 OSTime
000162e4 g     O .bss	00000800 OSTaskIdleStk
0000d0cc g     F .text	00000034 _exit
0000b800 g     F .text	0000012c alt_alarm_start
0000590c g     F .text	00000128 OSFlagNameGet
0000a84c g     F .text	0000005c OSTimeGet
000015cc g     F .text	000001bc __smakebuf_r
0000cbe8 g     F .text	00000098 strlen
0000c5cc g     F .text	00000020 OSTaskSwHook
0000c034 g     F .text	0000015c open
00016ae4 g     O .bss	00000b40 OSEventTbl
00017624 g     O .bss	00000510 OSTCBTbl
00008b8c g     F .text	00000100 OSSemSet
0000baec g     F .text	00000020 alt_icache_flush_all
0000ed7c g     O .rwdata	00000004 alt_priority_mask
000083b4 g     F .text	00000240 OSSemDel
00010920 g     O .bss	00000004 OSFlagFreeList
0000bb5c g     F .text	00000088 alt_ic_irq_enable
0000ed14 g     O .rwdata	00000002 OSEventNameSize
00010924 g     O .bss	00000001 OSStatRdy
00017b34 g     O .bss	00000054 OSTCBPrioTbl
00002e00 g     F .text	000000c4 __env_lock
0000ed5a g     O .rwdata	00000002 OSTaskSwHookEn
0000ed80 g     O .rwdata	00000008 alt_alarm_list
0000ed22 g     O .rwdata	00000002 OSFlagWidth
0000ba2c g     F .text	00000060 _do_ctors
000024b0 g     F .text	000000d8 close
000108d0 g     O .bss	00000004 alt_envsem
00010928 g     O .bss	00000004 OSIdleCtrRun
00003fc4 g     F .text	00000020 OSVersion
0000ed6c g     O .rwdata	00000002 OSTmrCfgWheelSize
000027f8 g     F .text	00000084 alt_load
0000a388 g     F .text	00000070 OS_TaskStkClr
0000ed46 g     O .rwdata	00000002 OSTaskCreateEn
000045b4 g     F .text	00000068 OS_EventWaitListInit
0000c66c g     F .text	00000020 OSTaskIdleHook
00000fd8 g     F .text	00000004 __sinit_lock_acquire
0000a080 g     F .text	000001e4 OSTaskSuspend
00004c5c g     F .text	0000005c OS_TaskIdle
0000ed72 g     O .rwdata	00000002 OSTmrTblSize
00008028 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00039d80 	call	39d8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109ee204 	addi	r2,r2,31624
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109ee204 	addi	r2,r2,31624
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0003a240 	call	3a24 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a71917 	ldw	r2,-25500(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a71917 	ldw	r2,-25500(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d69b3514 	ori	gp,gp,27860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10822a14 	ori	r2,r2,2216

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18df2214 	ori	r3,r3,31880

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00027f80 	call	27f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00029940 	call	2994 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe7bc8>

0000026c <main>:
};
//
// =========================================================================================
//

int main(void) {
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
	Bel_FFT_Init();
     27c:	000032c0 	call	32c <Bel_FFT_Init>

	OSInit(); // initialize ucos-ii
     280:	00039800 	call	3980 <OSInit>
	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
     284:	01c00144 	movi	r7,5
     288:	01800074 	movhi	r6,1
     28c:	31925804 	addi	r6,r6,18784
     290:	000b883a 	mov	r5,zero
     294:	01000034 	movhi	r4,0
     298:	2100af04 	addi	r4,r4,700
     29c:	000917c0 	call	917c <OSTaskCreate>
	OSStart(); // start multitasking
     2a0:	0003c840 	call	3c84 <OSStart>
	return 0; // never executed
     2a4:	0005883a 	mov	r2,zero
}
     2a8:	e037883a 	mov	sp,fp
     2ac:	dfc00117 	ldw	ra,4(sp)
     2b0:	df000017 	ldw	fp,0(sp)
     2b4:	dec00204 	addi	sp,sp,8
     2b8:	f800283a 	ret

000002bc <TaskStart>:

void TaskStart(void *pdata) {
     2bc:	defffd04 	addi	sp,sp,-12
     2c0:	dfc00215 	stw	ra,8(sp)
     2c4:	df000115 	stw	fp,4(sp)
     2c8:	df000104 	addi	fp,sp,4
     2cc:	e13fff15 	stw	r4,-4(fp)
    OSTaskCreate(TaskADCToFFT, (void *) 0, &TaskADCToFFTStack[TASK_STACKSIZE - 1], 6); // create new task
     2d0:	01c00184 	movi	r7,6
     2d4:	01800074 	movhi	r6,1
     2d8:	318a5804 	addi	r6,r6,10592
     2dc:	000b883a 	mov	r5,zero
     2e0:	01000034 	movhi	r4,0
     2e4:	2100be04 	addi	r4,r4,760
     2e8:	000917c0 	call	917c <OSTaskCreate>

    while (1) {
        OSTimeDly(10000);
     2ec:	0109c404 	movi	r4,10000
     2f0:	000a3f80 	call	a3f8 <OSTimeDly>
    }
     2f4:	003ffd06 	br	2ec <__alt_data_end+0xfffe7c4c>

000002f8 <TaskADCToFFT>:
}

void TaskADCToFFT(void* pdata) {
     2f8:	defffd04 	addi	sp,sp,-12
     2fc:	dfc00215 	stw	ra,8(sp)
     300:	df000115 	stw	fp,4(sp)
     304:	df000104 	addi	fp,sp,4
     308:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		//ADC_value = *ADC;
		//*BEL_FFT_PROJECT = ADC_value;
		OSTimeDlyHMSM(0,0,1,0);
     30c:	000f883a 	mov	r7,zero
     310:	01800044 	movi	r6,1
     314:	000b883a 	mov	r5,zero
     318:	0009883a 	mov	r4,zero
     31c:	000a4fc0 	call	a4fc <OSTimeDlyHMSM>
		printf("y");
     320:	01001e44 	movi	r4,121
     324:	000058c0 	call	58c <putchar>
	}
     328:	003ff806 	br	30c <__alt_data_end+0xfffe7c6c>

0000032c <Bel_FFT_Init>:
}

int Bel_FFT_Init(void) {
     32c:	defbfb04 	addi	sp,sp,-4116
     330:	dfc40415 	stw	ra,4112(sp)
     334:	df040315 	stw	fp,4108(sp)
     338:	df040304 	addi	fp,sp,4108
	// FFT_BASE is the base address of the FFT co-processor. Set bit 31 to bypass the cache on the NIOSII.
	volatile struct bel_fft * belFftPtr = (struct bel_fft *) (FFT_BASE + 0x80000000);
     33c:	008000b4 	movhi	r2,2
     340:	e0bbff15 	stw	r2,-4100(fp)

	int fin[FFT_LEN * 2] = {
     344:	e0bc0004 	addi	r2,fp,-4096
     348:	00c20004 	movi	r3,2048
     34c:	180d883a 	mov	r6,r3
     350:	000b883a 	mov	r5,zero
     354:	1009883a 	mov	r4,r2
     358:	000045c0 	call	45c <memset>
     35c:	008af444 	movi	r2,11217
     360:	e0bc0215 	stw	r2,-4088(fp)
     364:	00903a04 	movi	r2,16616
     368:	e0bc0415 	stw	r2,-4080(fp)
     36c:	008d7384 	movi	r2,13774
     370:	e0bc0615 	stw	r2,-4072(fp)
		0x000040E8, 0x00000000, 0x000035CE, 0x00000000
	};

	int fout[FFT_LEN * 2];

	belFftPtr->Finadr = fin;
     374:	e0bbff17 	ldw	r2,-4100(fp)
     378:	e0fc0004 	addi	r3,fp,-4096
     37c:	10c00315 	stw	r3,12(r2)

	belFftPtr->Foutadr = fout;
     380:	e0bbff17 	ldw	r2,-4100(fp)
     384:	e0fe0004 	addi	r3,fp,-2048
     388:	10c00415 	stw	r3,16(r2)

	belFftPtr->Factors[0].M = 64;
     38c:	e0bbff17 	ldw	r2,-4100(fp)
     390:	00c01004 	movi	r3,64
     394:	10c0050d 	sth	r3,20(r2)
	belFftPtr->Factors[0].P = 4;
     398:	e0bbff17 	ldw	r2,-4100(fp)
     39c:	00c00104 	movi	r3,4
     3a0:	10c0058d 	sth	r3,22(r2)
	belFftPtr->Factors[1].M = 16;
     3a4:	e0bbff17 	ldw	r2,-4100(fp)
     3a8:	00c00404 	movi	r3,16
     3ac:	10c0060d 	sth	r3,24(r2)
	belFftPtr->Factors[1].P = 4;
     3b0:	e0bbff17 	ldw	r2,-4100(fp)
     3b4:	00c00104 	movi	r3,4
     3b8:	10c0068d 	sth	r3,26(r2)
	belFftPtr->Factors[2].M = 4;
     3bc:	e0bbff17 	ldw	r2,-4100(fp)
     3c0:	00c00104 	movi	r3,4
     3c4:	10c0070d 	sth	r3,28(r2)
	belFftPtr->Factors[2].P = 4;
     3c8:	e0bbff17 	ldw	r2,-4100(fp)
     3cc:	00c00104 	movi	r3,4
     3d0:	10c0078d 	sth	r3,30(r2)
	belFftPtr->Factors[3].M = 1;
     3d4:	e0bbff17 	ldw	r2,-4100(fp)
     3d8:	00c00044 	movi	r3,1
     3dc:	10c0080d 	sth	r3,32(r2)
	belFftPtr->Factors[3].P = 4;
     3e0:	e0bbff17 	ldw	r2,-4100(fp)
     3e4:	00c00104 	movi	r3,4
     3e8:	10c0088d 	sth	r3,34(r2)

	belFftPtr->Control.Start = 1;
     3ec:	e0bbff17 	ldw	r2,-4100(fp)
     3f0:	10c00017 	ldw	r3,0(r2)
     3f4:	18c00054 	ori	r3,r3,1
     3f8:	10c00015 	stw	r3,0(r2)
#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     3fc:	00800044 	movi	r2,1
     400:	e0bbfd15 	stw	r2,-4108(fp)
     404:	00000c06 	br	438 <Bel_FFT_Init+0x10c>
		for (int d=1; d<=32767; d++) {}
     408:	00800044 	movi	r2,1
     40c:	e0bbfe15 	stw	r2,-4104(fp)
     410:	00000306 	br	420 <Bel_FFT_Init+0xf4>
     414:	e0bbfe17 	ldw	r2,-4104(fp)
     418:	10800044 	addi	r2,r2,1
     41c:	e0bbfe15 	stw	r2,-4104(fp)
     420:	e0bbfe17 	ldw	r2,-4104(fp)
     424:	00dfffc4 	movi	r3,32767
     428:	18bffa0e 	bge	r3,r2,414 <__alt_data_end+0xfffe7d74>

	belFftPtr->Control.Start = 1;
#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     42c:	e0bbfd17 	ldw	r2,-4108(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bbfd15 	stw	r2,-4108(fp)
     438:	e0bbfd17 	ldw	r2,-4108(fp)
     43c:	00dfffc4 	movi	r3,32767
     440:	18bff10e 	bge	r3,r2,408 <__alt_data_end+0xfffe7d68>
		for (int d=1; d<=32767; d++) {}
#endif

	return 0;
     444:	0005883a 	mov	r2,zero
}
     448:	e037883a 	mov	sp,fp
     44c:	dfc00117 	ldw	ra,4(sp)
     450:	df000017 	ldw	fp,0(sp)
     454:	dec00204 	addi	sp,sp,8
     458:	f800283a 	ret

0000045c <memset>:
     45c:	20c000cc 	andi	r3,r4,3
     460:	2005883a 	mov	r2,r4
     464:	18004426 	beq	r3,zero,578 <memset+0x11c>
     468:	31ffffc4 	addi	r7,r6,-1
     46c:	30004026 	beq	r6,zero,570 <memset+0x114>
     470:	2813883a 	mov	r9,r5
     474:	200d883a 	mov	r6,r4
     478:	2007883a 	mov	r3,r4
     47c:	00000406 	br	490 <memset+0x34>
     480:	3a3fffc4 	addi	r8,r7,-1
     484:	31800044 	addi	r6,r6,1
     488:	38003926 	beq	r7,zero,570 <memset+0x114>
     48c:	400f883a 	mov	r7,r8
     490:	18c00044 	addi	r3,r3,1
     494:	32400005 	stb	r9,0(r6)
     498:	1a0000cc 	andi	r8,r3,3
     49c:	403ff81e 	bne	r8,zero,480 <__alt_data_end+0xfffe7de0>
     4a0:	010000c4 	movi	r4,3
     4a4:	21c02d2e 	bgeu	r4,r7,55c <memset+0x100>
     4a8:	29003fcc 	andi	r4,r5,255
     4ac:	200c923a 	slli	r6,r4,8
     4b0:	3108b03a 	or	r4,r6,r4
     4b4:	200c943a 	slli	r6,r4,16
     4b8:	218cb03a 	or	r6,r4,r6
     4bc:	010003c4 	movi	r4,15
     4c0:	21c0182e 	bgeu	r4,r7,524 <memset+0xc8>
     4c4:	3b3ffc04 	addi	r12,r7,-16
     4c8:	6018d13a 	srli	r12,r12,4
     4cc:	1a000104 	addi	r8,r3,4
     4d0:	1ac00204 	addi	r11,r3,8
     4d4:	6008913a 	slli	r4,r12,4
     4d8:	1a800304 	addi	r10,r3,12
     4dc:	1813883a 	mov	r9,r3
     4e0:	21000504 	addi	r4,r4,20
     4e4:	1909883a 	add	r4,r3,r4
     4e8:	49800015 	stw	r6,0(r9)
     4ec:	41800015 	stw	r6,0(r8)
     4f0:	59800015 	stw	r6,0(r11)
     4f4:	51800015 	stw	r6,0(r10)
     4f8:	42000404 	addi	r8,r8,16
     4fc:	4a400404 	addi	r9,r9,16
     500:	5ac00404 	addi	r11,r11,16
     504:	52800404 	addi	r10,r10,16
     508:	413ff71e 	bne	r8,r4,4e8 <__alt_data_end+0xfffe7e48>
     50c:	63000044 	addi	r12,r12,1
     510:	6018913a 	slli	r12,r12,4
     514:	39c003cc 	andi	r7,r7,15
     518:	010000c4 	movi	r4,3
     51c:	1b07883a 	add	r3,r3,r12
     520:	21c00e2e 	bgeu	r4,r7,55c <memset+0x100>
     524:	1813883a 	mov	r9,r3
     528:	3811883a 	mov	r8,r7
     52c:	010000c4 	movi	r4,3
     530:	49800015 	stw	r6,0(r9)
     534:	423fff04 	addi	r8,r8,-4
     538:	4a400104 	addi	r9,r9,4
     53c:	223ffc36 	bltu	r4,r8,530 <__alt_data_end+0xfffe7e90>
     540:	393fff04 	addi	r4,r7,-4
     544:	2008d0ba 	srli	r4,r4,2
     548:	39c000cc 	andi	r7,r7,3
     54c:	21000044 	addi	r4,r4,1
     550:	2109883a 	add	r4,r4,r4
     554:	2109883a 	add	r4,r4,r4
     558:	1907883a 	add	r3,r3,r4
     55c:	38000526 	beq	r7,zero,574 <memset+0x118>
     560:	19cf883a 	add	r7,r3,r7
     564:	19400005 	stb	r5,0(r3)
     568:	18c00044 	addi	r3,r3,1
     56c:	38fffd1e 	bne	r7,r3,564 <__alt_data_end+0xfffe7ec4>
     570:	f800283a 	ret
     574:	f800283a 	ret
     578:	2007883a 	mov	r3,r4
     57c:	300f883a 	mov	r7,r6
     580:	003fc706 	br	4a0 <__alt_data_end+0xfffe7e00>

00000584 <_putchar_r>:
     584:	21800217 	ldw	r6,8(r4)
     588:	00005a41 	jmpi	5a4 <_putc_r>

0000058c <putchar>:
     58c:	00800074 	movhi	r2,1
     590:	10bb3604 	addi	r2,r2,-4904
     594:	200b883a 	mov	r5,r4
     598:	11000017 	ldw	r4,0(r2)
     59c:	21800217 	ldw	r6,8(r4)
     5a0:	00005a41 	jmpi	5a4 <_putc_r>

000005a4 <_putc_r>:
     5a4:	defffc04 	addi	sp,sp,-16
     5a8:	dc000215 	stw	r16,8(sp)
     5ac:	dfc00315 	stw	ra,12(sp)
     5b0:	2021883a 	mov	r16,r4
     5b4:	20000226 	beq	r4,zero,5c0 <_putc_r+0x1c>
     5b8:	20800e17 	ldw	r2,56(r4)
     5bc:	10001b26 	beq	r2,zero,62c <_putc_r+0x88>
     5c0:	30800217 	ldw	r2,8(r6)
     5c4:	10bfffc4 	addi	r2,r2,-1
     5c8:	30800215 	stw	r2,8(r6)
     5cc:	10000a16 	blt	r2,zero,5f8 <_putc_r+0x54>
     5d0:	30800017 	ldw	r2,0(r6)
     5d4:	11400005 	stb	r5,0(r2)
     5d8:	30800017 	ldw	r2,0(r6)
     5dc:	10c00044 	addi	r3,r2,1
     5e0:	30c00015 	stw	r3,0(r6)
     5e4:	10800003 	ldbu	r2,0(r2)
     5e8:	dfc00317 	ldw	ra,12(sp)
     5ec:	dc000217 	ldw	r16,8(sp)
     5f0:	dec00404 	addi	sp,sp,16
     5f4:	f800283a 	ret
     5f8:	30c00617 	ldw	r3,24(r6)
     5fc:	10c00616 	blt	r2,r3,618 <_putc_r+0x74>
     600:	30800017 	ldw	r2,0(r6)
     604:	00c00284 	movi	r3,10
     608:	11400005 	stb	r5,0(r2)
     60c:	30800017 	ldw	r2,0(r6)
     610:	11400003 	ldbu	r5,0(r2)
     614:	28fff11e 	bne	r5,r3,5dc <__alt_data_end+0xfffe7f3c>
     618:	8009883a 	mov	r4,r16
     61c:	dfc00317 	ldw	ra,12(sp)
     620:	dc000217 	ldw	r16,8(sp)
     624:	dec00404 	addi	sp,sp,16
     628:	000070c1 	jmpi	70c <__swbuf_r>
     62c:	d9400015 	stw	r5,0(sp)
     630:	d9800115 	stw	r6,4(sp)
     634:	0000fc00 	call	fc0 <__sinit>
     638:	d9800117 	ldw	r6,4(sp)
     63c:	d9400017 	ldw	r5,0(sp)
     640:	003fdf06 	br	5c0 <__alt_data_end+0xfffe7f20>

00000644 <putc>:
     644:	00800074 	movhi	r2,1
     648:	defffc04 	addi	sp,sp,-16
     64c:	10bb3604 	addi	r2,r2,-4904
     650:	dc000115 	stw	r16,4(sp)
     654:	14000017 	ldw	r16,0(r2)
     658:	dc400215 	stw	r17,8(sp)
     65c:	dfc00315 	stw	ra,12(sp)
     660:	2023883a 	mov	r17,r4
     664:	80000226 	beq	r16,zero,670 <putc+0x2c>
     668:	80800e17 	ldw	r2,56(r16)
     66c:	10001a26 	beq	r2,zero,6d8 <putc+0x94>
     670:	28800217 	ldw	r2,8(r5)
     674:	10bfffc4 	addi	r2,r2,-1
     678:	28800215 	stw	r2,8(r5)
     67c:	10000b16 	blt	r2,zero,6ac <putc+0x68>
     680:	28800017 	ldw	r2,0(r5)
     684:	14400005 	stb	r17,0(r2)
     688:	28800017 	ldw	r2,0(r5)
     68c:	10c00044 	addi	r3,r2,1
     690:	28c00015 	stw	r3,0(r5)
     694:	10800003 	ldbu	r2,0(r2)
     698:	dfc00317 	ldw	ra,12(sp)
     69c:	dc400217 	ldw	r17,8(sp)
     6a0:	dc000117 	ldw	r16,4(sp)
     6a4:	dec00404 	addi	sp,sp,16
     6a8:	f800283a 	ret
     6ac:	28c00617 	ldw	r3,24(r5)
     6b0:	10c00e16 	blt	r2,r3,6ec <putc+0xa8>
     6b4:	28800017 	ldw	r2,0(r5)
     6b8:	01000284 	movi	r4,10
     6bc:	14400005 	stb	r17,0(r2)
     6c0:	28800017 	ldw	r2,0(r5)
     6c4:	10c00003 	ldbu	r3,0(r2)
     6c8:	193ff01e 	bne	r3,r4,68c <__alt_data_end+0xfffe7fec>
     6cc:	280d883a 	mov	r6,r5
     6d0:	180b883a 	mov	r5,r3
     6d4:	00000706 	br	6f4 <putc+0xb0>
     6d8:	8009883a 	mov	r4,r16
     6dc:	d9400015 	stw	r5,0(sp)
     6e0:	0000fc00 	call	fc0 <__sinit>
     6e4:	d9400017 	ldw	r5,0(sp)
     6e8:	003fe106 	br	670 <__alt_data_end+0xfffe7fd0>
     6ec:	280d883a 	mov	r6,r5
     6f0:	880b883a 	mov	r5,r17
     6f4:	8009883a 	mov	r4,r16
     6f8:	dfc00317 	ldw	ra,12(sp)
     6fc:	dc400217 	ldw	r17,8(sp)
     700:	dc000117 	ldw	r16,4(sp)
     704:	dec00404 	addi	sp,sp,16
     708:	000070c1 	jmpi	70c <__swbuf_r>

0000070c <__swbuf_r>:
     70c:	defffb04 	addi	sp,sp,-20
     710:	dcc00315 	stw	r19,12(sp)
     714:	dc800215 	stw	r18,8(sp)
     718:	dc000015 	stw	r16,0(sp)
     71c:	dfc00415 	stw	ra,16(sp)
     720:	dc400115 	stw	r17,4(sp)
     724:	2025883a 	mov	r18,r4
     728:	2827883a 	mov	r19,r5
     72c:	3021883a 	mov	r16,r6
     730:	20000226 	beq	r4,zero,73c <__swbuf_r+0x30>
     734:	20800e17 	ldw	r2,56(r4)
     738:	10004226 	beq	r2,zero,844 <__swbuf_r+0x138>
     73c:	80800617 	ldw	r2,24(r16)
     740:	8100030b 	ldhu	r4,12(r16)
     744:	80800215 	stw	r2,8(r16)
     748:	2080020c 	andi	r2,r4,8
     74c:	10003626 	beq	r2,zero,828 <__swbuf_r+0x11c>
     750:	80c00417 	ldw	r3,16(r16)
     754:	18003426 	beq	r3,zero,828 <__swbuf_r+0x11c>
     758:	2088000c 	andi	r2,r4,8192
     75c:	9c403fcc 	andi	r17,r19,255
     760:	10001a26 	beq	r2,zero,7cc <__swbuf_r+0xc0>
     764:	80800017 	ldw	r2,0(r16)
     768:	81000517 	ldw	r4,20(r16)
     76c:	10c7c83a 	sub	r3,r2,r3
     770:	1900200e 	bge	r3,r4,7f4 <__swbuf_r+0xe8>
     774:	18c00044 	addi	r3,r3,1
     778:	81000217 	ldw	r4,8(r16)
     77c:	11400044 	addi	r5,r2,1
     780:	81400015 	stw	r5,0(r16)
     784:	213fffc4 	addi	r4,r4,-1
     788:	81000215 	stw	r4,8(r16)
     78c:	14c00005 	stb	r19,0(r2)
     790:	80800517 	ldw	r2,20(r16)
     794:	10c01e26 	beq	r2,r3,810 <__swbuf_r+0x104>
     798:	8080030b 	ldhu	r2,12(r16)
     79c:	1080004c 	andi	r2,r2,1
     7a0:	10000226 	beq	r2,zero,7ac <__swbuf_r+0xa0>
     7a4:	00800284 	movi	r2,10
     7a8:	88801926 	beq	r17,r2,810 <__swbuf_r+0x104>
     7ac:	8805883a 	mov	r2,r17
     7b0:	dfc00417 	ldw	ra,16(sp)
     7b4:	dcc00317 	ldw	r19,12(sp)
     7b8:	dc800217 	ldw	r18,8(sp)
     7bc:	dc400117 	ldw	r17,4(sp)
     7c0:	dc000017 	ldw	r16,0(sp)
     7c4:	dec00504 	addi	sp,sp,20
     7c8:	f800283a 	ret
     7cc:	81401917 	ldw	r5,100(r16)
     7d0:	00b7ffc4 	movi	r2,-8193
     7d4:	21080014 	ori	r4,r4,8192
     7d8:	2884703a 	and	r2,r5,r2
     7dc:	80801915 	stw	r2,100(r16)
     7e0:	80800017 	ldw	r2,0(r16)
     7e4:	8100030d 	sth	r4,12(r16)
     7e8:	81000517 	ldw	r4,20(r16)
     7ec:	10c7c83a 	sub	r3,r2,r3
     7f0:	193fe016 	blt	r3,r4,774 <__alt_data_end+0xfffe80d4>
     7f4:	800b883a 	mov	r5,r16
     7f8:	9009883a 	mov	r4,r18
     7fc:	0000bd40 	call	bd4 <_fflush_r>
     800:	1000071e 	bne	r2,zero,820 <__swbuf_r+0x114>
     804:	80800017 	ldw	r2,0(r16)
     808:	00c00044 	movi	r3,1
     80c:	003fda06 	br	778 <__alt_data_end+0xfffe80d8>
     810:	800b883a 	mov	r5,r16
     814:	9009883a 	mov	r4,r18
     818:	0000bd40 	call	bd4 <_fflush_r>
     81c:	103fe326 	beq	r2,zero,7ac <__alt_data_end+0xfffe810c>
     820:	00bfffc4 	movi	r2,-1
     824:	003fe206 	br	7b0 <__alt_data_end+0xfffe8110>
     828:	800b883a 	mov	r5,r16
     82c:	9009883a 	mov	r4,r18
     830:	00008640 	call	864 <__swsetup_r>
     834:	103ffa1e 	bne	r2,zero,820 <__alt_data_end+0xfffe8180>
     838:	8100030b 	ldhu	r4,12(r16)
     83c:	80c00417 	ldw	r3,16(r16)
     840:	003fc506 	br	758 <__alt_data_end+0xfffe80b8>
     844:	0000fc00 	call	fc0 <__sinit>
     848:	003fbc06 	br	73c <__alt_data_end+0xfffe809c>

0000084c <__swbuf>:
     84c:	00800074 	movhi	r2,1
     850:	10bb3604 	addi	r2,r2,-4904
     854:	280d883a 	mov	r6,r5
     858:	200b883a 	mov	r5,r4
     85c:	11000017 	ldw	r4,0(r2)
     860:	000070c1 	jmpi	70c <__swbuf_r>

00000864 <__swsetup_r>:
     864:	00800074 	movhi	r2,1
     868:	defffd04 	addi	sp,sp,-12
     86c:	10bb3604 	addi	r2,r2,-4904
     870:	dc400115 	stw	r17,4(sp)
     874:	2023883a 	mov	r17,r4
     878:	11000017 	ldw	r4,0(r2)
     87c:	dc000015 	stw	r16,0(sp)
     880:	dfc00215 	stw	ra,8(sp)
     884:	2821883a 	mov	r16,r5
     888:	20000226 	beq	r4,zero,894 <__swsetup_r+0x30>
     88c:	20800e17 	ldw	r2,56(r4)
     890:	10003126 	beq	r2,zero,958 <__swsetup_r+0xf4>
     894:	8080030b 	ldhu	r2,12(r16)
     898:	10c0020c 	andi	r3,r2,8
     89c:	1009883a 	mov	r4,r2
     8a0:	18000f26 	beq	r3,zero,8e0 <__swsetup_r+0x7c>
     8a4:	80c00417 	ldw	r3,16(r16)
     8a8:	18001526 	beq	r3,zero,900 <__swsetup_r+0x9c>
     8ac:	1100004c 	andi	r4,r2,1
     8b0:	20001c1e 	bne	r4,zero,924 <__swsetup_r+0xc0>
     8b4:	1080008c 	andi	r2,r2,2
     8b8:	1000291e 	bne	r2,zero,960 <__swsetup_r+0xfc>
     8bc:	80800517 	ldw	r2,20(r16)
     8c0:	80800215 	stw	r2,8(r16)
     8c4:	18001c26 	beq	r3,zero,938 <__swsetup_r+0xd4>
     8c8:	0005883a 	mov	r2,zero
     8cc:	dfc00217 	ldw	ra,8(sp)
     8d0:	dc400117 	ldw	r17,4(sp)
     8d4:	dc000017 	ldw	r16,0(sp)
     8d8:	dec00304 	addi	sp,sp,12
     8dc:	f800283a 	ret
     8e0:	2080040c 	andi	r2,r4,16
     8e4:	10002e26 	beq	r2,zero,9a0 <__swsetup_r+0x13c>
     8e8:	2080010c 	andi	r2,r4,4
     8ec:	10001e1e 	bne	r2,zero,968 <__swsetup_r+0x104>
     8f0:	80c00417 	ldw	r3,16(r16)
     8f4:	20800214 	ori	r2,r4,8
     8f8:	8080030d 	sth	r2,12(r16)
     8fc:	183feb1e 	bne	r3,zero,8ac <__alt_data_end+0xfffe820c>
     900:	1100a00c 	andi	r4,r2,640
     904:	01408004 	movi	r5,512
     908:	217fe826 	beq	r4,r5,8ac <__alt_data_end+0xfffe820c>
     90c:	800b883a 	mov	r5,r16
     910:	8809883a 	mov	r4,r17
     914:	00015cc0 	call	15cc <__smakebuf_r>
     918:	8080030b 	ldhu	r2,12(r16)
     91c:	80c00417 	ldw	r3,16(r16)
     920:	003fe206 	br	8ac <__alt_data_end+0xfffe820c>
     924:	80800517 	ldw	r2,20(r16)
     928:	80000215 	stw	zero,8(r16)
     92c:	0085c83a 	sub	r2,zero,r2
     930:	80800615 	stw	r2,24(r16)
     934:	183fe41e 	bne	r3,zero,8c8 <__alt_data_end+0xfffe8228>
     938:	80c0030b 	ldhu	r3,12(r16)
     93c:	0005883a 	mov	r2,zero
     940:	1900200c 	andi	r4,r3,128
     944:	203fe126 	beq	r4,zero,8cc <__alt_data_end+0xfffe822c>
     948:	18c01014 	ori	r3,r3,64
     94c:	80c0030d 	sth	r3,12(r16)
     950:	00bfffc4 	movi	r2,-1
     954:	003fdd06 	br	8cc <__alt_data_end+0xfffe822c>
     958:	0000fc00 	call	fc0 <__sinit>
     95c:	003fcd06 	br	894 <__alt_data_end+0xfffe81f4>
     960:	0005883a 	mov	r2,zero
     964:	003fd606 	br	8c0 <__alt_data_end+0xfffe8220>
     968:	81400c17 	ldw	r5,48(r16)
     96c:	28000626 	beq	r5,zero,988 <__swsetup_r+0x124>
     970:	80801004 	addi	r2,r16,64
     974:	28800326 	beq	r5,r2,984 <__swsetup_r+0x120>
     978:	8809883a 	mov	r4,r17
     97c:	00011340 	call	1134 <_free_r>
     980:	8100030b 	ldhu	r4,12(r16)
     984:	80000c15 	stw	zero,48(r16)
     988:	80c00417 	ldw	r3,16(r16)
     98c:	00bff6c4 	movi	r2,-37
     990:	1108703a 	and	r4,r2,r4
     994:	80000115 	stw	zero,4(r16)
     998:	80c00015 	stw	r3,0(r16)
     99c:	003fd506 	br	8f4 <__alt_data_end+0xfffe8254>
     9a0:	00800244 	movi	r2,9
     9a4:	88800015 	stw	r2,0(r17)
     9a8:	20801014 	ori	r2,r4,64
     9ac:	8080030d 	sth	r2,12(r16)
     9b0:	00bfffc4 	movi	r2,-1
     9b4:	003fc506 	br	8cc <__alt_data_end+0xfffe822c>

000009b8 <__sflush_r>:
     9b8:	2880030b 	ldhu	r2,12(r5)
     9bc:	defffb04 	addi	sp,sp,-20
     9c0:	dcc00315 	stw	r19,12(sp)
     9c4:	dc400115 	stw	r17,4(sp)
     9c8:	dfc00415 	stw	ra,16(sp)
     9cc:	dc800215 	stw	r18,8(sp)
     9d0:	dc000015 	stw	r16,0(sp)
     9d4:	10c0020c 	andi	r3,r2,8
     9d8:	2823883a 	mov	r17,r5
     9dc:	2027883a 	mov	r19,r4
     9e0:	1800311e 	bne	r3,zero,aa8 <__sflush_r+0xf0>
     9e4:	28c00117 	ldw	r3,4(r5)
     9e8:	10820014 	ori	r2,r2,2048
     9ec:	2880030d 	sth	r2,12(r5)
     9f0:	00c04b0e 	bge	zero,r3,b20 <__sflush_r+0x168>
     9f4:	8a000a17 	ldw	r8,40(r17)
     9f8:	40002326 	beq	r8,zero,a88 <__sflush_r+0xd0>
     9fc:	9c000017 	ldw	r16,0(r19)
     a00:	10c4000c 	andi	r3,r2,4096
     a04:	98000015 	stw	zero,0(r19)
     a08:	18004826 	beq	r3,zero,b2c <__sflush_r+0x174>
     a0c:	89801417 	ldw	r6,80(r17)
     a10:	10c0010c 	andi	r3,r2,4
     a14:	18000626 	beq	r3,zero,a30 <__sflush_r+0x78>
     a18:	88c00117 	ldw	r3,4(r17)
     a1c:	88800c17 	ldw	r2,48(r17)
     a20:	30cdc83a 	sub	r6,r6,r3
     a24:	10000226 	beq	r2,zero,a30 <__sflush_r+0x78>
     a28:	88800f17 	ldw	r2,60(r17)
     a2c:	308dc83a 	sub	r6,r6,r2
     a30:	89400717 	ldw	r5,28(r17)
     a34:	000f883a 	mov	r7,zero
     a38:	9809883a 	mov	r4,r19
     a3c:	403ee83a 	callr	r8
     a40:	00ffffc4 	movi	r3,-1
     a44:	10c04426 	beq	r2,r3,b58 <__sflush_r+0x1a0>
     a48:	88c0030b 	ldhu	r3,12(r17)
     a4c:	89000417 	ldw	r4,16(r17)
     a50:	88000115 	stw	zero,4(r17)
     a54:	197dffcc 	andi	r5,r3,63487
     a58:	8940030d 	sth	r5,12(r17)
     a5c:	89000015 	stw	r4,0(r17)
     a60:	18c4000c 	andi	r3,r3,4096
     a64:	18002c1e 	bne	r3,zero,b18 <__sflush_r+0x160>
     a68:	89400c17 	ldw	r5,48(r17)
     a6c:	9c000015 	stw	r16,0(r19)
     a70:	28000526 	beq	r5,zero,a88 <__sflush_r+0xd0>
     a74:	88801004 	addi	r2,r17,64
     a78:	28800226 	beq	r5,r2,a84 <__sflush_r+0xcc>
     a7c:	9809883a 	mov	r4,r19
     a80:	00011340 	call	1134 <_free_r>
     a84:	88000c15 	stw	zero,48(r17)
     a88:	0005883a 	mov	r2,zero
     a8c:	dfc00417 	ldw	ra,16(sp)
     a90:	dcc00317 	ldw	r19,12(sp)
     a94:	dc800217 	ldw	r18,8(sp)
     a98:	dc400117 	ldw	r17,4(sp)
     a9c:	dc000017 	ldw	r16,0(sp)
     aa0:	dec00504 	addi	sp,sp,20
     aa4:	f800283a 	ret
     aa8:	2c800417 	ldw	r18,16(r5)
     aac:	903ff626 	beq	r18,zero,a88 <__alt_data_end+0xfffe83e8>
     ab0:	2c000017 	ldw	r16,0(r5)
     ab4:	108000cc 	andi	r2,r2,3
     ab8:	2c800015 	stw	r18,0(r5)
     abc:	84a1c83a 	sub	r16,r16,r18
     ac0:	1000131e 	bne	r2,zero,b10 <__sflush_r+0x158>
     ac4:	28800517 	ldw	r2,20(r5)
     ac8:	88800215 	stw	r2,8(r17)
     acc:	04000316 	blt	zero,r16,adc <__sflush_r+0x124>
     ad0:	003fed06 	br	a88 <__alt_data_end+0xfffe83e8>
     ad4:	90a5883a 	add	r18,r18,r2
     ad8:	043feb0e 	bge	zero,r16,a88 <__alt_data_end+0xfffe83e8>
     adc:	88800917 	ldw	r2,36(r17)
     ae0:	89400717 	ldw	r5,28(r17)
     ae4:	800f883a 	mov	r7,r16
     ae8:	900d883a 	mov	r6,r18
     aec:	9809883a 	mov	r4,r19
     af0:	103ee83a 	callr	r2
     af4:	80a1c83a 	sub	r16,r16,r2
     af8:	00bff616 	blt	zero,r2,ad4 <__alt_data_end+0xfffe8434>
     afc:	88c0030b 	ldhu	r3,12(r17)
     b00:	00bfffc4 	movi	r2,-1
     b04:	18c01014 	ori	r3,r3,64
     b08:	88c0030d 	sth	r3,12(r17)
     b0c:	003fdf06 	br	a8c <__alt_data_end+0xfffe83ec>
     b10:	0005883a 	mov	r2,zero
     b14:	003fec06 	br	ac8 <__alt_data_end+0xfffe8428>
     b18:	88801415 	stw	r2,80(r17)
     b1c:	003fd206 	br	a68 <__alt_data_end+0xfffe83c8>
     b20:	28c00f17 	ldw	r3,60(r5)
     b24:	00ffb316 	blt	zero,r3,9f4 <__alt_data_end+0xfffe8354>
     b28:	003fd706 	br	a88 <__alt_data_end+0xfffe83e8>
     b2c:	89400717 	ldw	r5,28(r17)
     b30:	000d883a 	mov	r6,zero
     b34:	01c00044 	movi	r7,1
     b38:	9809883a 	mov	r4,r19
     b3c:	403ee83a 	callr	r8
     b40:	100d883a 	mov	r6,r2
     b44:	00bfffc4 	movi	r2,-1
     b48:	30801426 	beq	r6,r2,b9c <__sflush_r+0x1e4>
     b4c:	8880030b 	ldhu	r2,12(r17)
     b50:	8a000a17 	ldw	r8,40(r17)
     b54:	003fae06 	br	a10 <__alt_data_end+0xfffe8370>
     b58:	98c00017 	ldw	r3,0(r19)
     b5c:	183fba26 	beq	r3,zero,a48 <__alt_data_end+0xfffe83a8>
     b60:	01000744 	movi	r4,29
     b64:	19000626 	beq	r3,r4,b80 <__sflush_r+0x1c8>
     b68:	01000584 	movi	r4,22
     b6c:	19000426 	beq	r3,r4,b80 <__sflush_r+0x1c8>
     b70:	88c0030b 	ldhu	r3,12(r17)
     b74:	18c01014 	ori	r3,r3,64
     b78:	88c0030d 	sth	r3,12(r17)
     b7c:	003fc306 	br	a8c <__alt_data_end+0xfffe83ec>
     b80:	8880030b 	ldhu	r2,12(r17)
     b84:	88c00417 	ldw	r3,16(r17)
     b88:	88000115 	stw	zero,4(r17)
     b8c:	10bdffcc 	andi	r2,r2,63487
     b90:	8880030d 	sth	r2,12(r17)
     b94:	88c00015 	stw	r3,0(r17)
     b98:	003fb306 	br	a68 <__alt_data_end+0xfffe83c8>
     b9c:	98800017 	ldw	r2,0(r19)
     ba0:	103fea26 	beq	r2,zero,b4c <__alt_data_end+0xfffe84ac>
     ba4:	00c00744 	movi	r3,29
     ba8:	10c00226 	beq	r2,r3,bb4 <__sflush_r+0x1fc>
     bac:	00c00584 	movi	r3,22
     bb0:	10c0031e 	bne	r2,r3,bc0 <__sflush_r+0x208>
     bb4:	9c000015 	stw	r16,0(r19)
     bb8:	0005883a 	mov	r2,zero
     bbc:	003fb306 	br	a8c <__alt_data_end+0xfffe83ec>
     bc0:	88c0030b 	ldhu	r3,12(r17)
     bc4:	3005883a 	mov	r2,r6
     bc8:	18c01014 	ori	r3,r3,64
     bcc:	88c0030d 	sth	r3,12(r17)
     bd0:	003fae06 	br	a8c <__alt_data_end+0xfffe83ec>

00000bd4 <_fflush_r>:
     bd4:	defffd04 	addi	sp,sp,-12
     bd8:	dc000115 	stw	r16,4(sp)
     bdc:	dfc00215 	stw	ra,8(sp)
     be0:	2021883a 	mov	r16,r4
     be4:	20000226 	beq	r4,zero,bf0 <_fflush_r+0x1c>
     be8:	20800e17 	ldw	r2,56(r4)
     bec:	10000c26 	beq	r2,zero,c20 <_fflush_r+0x4c>
     bf0:	2880030f 	ldh	r2,12(r5)
     bf4:	1000051e 	bne	r2,zero,c0c <_fflush_r+0x38>
     bf8:	0005883a 	mov	r2,zero
     bfc:	dfc00217 	ldw	ra,8(sp)
     c00:	dc000117 	ldw	r16,4(sp)
     c04:	dec00304 	addi	sp,sp,12
     c08:	f800283a 	ret
     c0c:	8009883a 	mov	r4,r16
     c10:	dfc00217 	ldw	ra,8(sp)
     c14:	dc000117 	ldw	r16,4(sp)
     c18:	dec00304 	addi	sp,sp,12
     c1c:	00009b81 	jmpi	9b8 <__sflush_r>
     c20:	d9400015 	stw	r5,0(sp)
     c24:	0000fc00 	call	fc0 <__sinit>
     c28:	d9400017 	ldw	r5,0(sp)
     c2c:	003ff006 	br	bf0 <__alt_data_end+0xfffe8550>

00000c30 <fflush>:
     c30:	20000526 	beq	r4,zero,c48 <fflush+0x18>
     c34:	00800074 	movhi	r2,1
     c38:	10bb3604 	addi	r2,r2,-4904
     c3c:	200b883a 	mov	r5,r4
     c40:	11000017 	ldw	r4,0(r2)
     c44:	0000bd41 	jmpi	bd4 <_fflush_r>
     c48:	00800074 	movhi	r2,1
     c4c:	10bb3504 	addi	r2,r2,-4908
     c50:	11000017 	ldw	r4,0(r2)
     c54:	01400034 	movhi	r5,0
     c58:	2942f504 	addi	r5,r5,3028
     c5c:	00015081 	jmpi	1508 <_fwalk_reent>

00000c60 <__fp_unlock>:
     c60:	0005883a 	mov	r2,zero
     c64:	f800283a 	ret

00000c68 <_cleanup_r>:
     c68:	01400034 	movhi	r5,0
     c6c:	29487604 	addi	r5,r5,8664
     c70:	00015081 	jmpi	1508 <_fwalk_reent>

00000c74 <__sinit.part.1>:
     c74:	defff704 	addi	sp,sp,-36
     c78:	00c00034 	movhi	r3,0
     c7c:	dfc00815 	stw	ra,32(sp)
     c80:	ddc00715 	stw	r23,28(sp)
     c84:	dd800615 	stw	r22,24(sp)
     c88:	dd400515 	stw	r21,20(sp)
     c8c:	dd000415 	stw	r20,16(sp)
     c90:	dcc00315 	stw	r19,12(sp)
     c94:	dc800215 	stw	r18,8(sp)
     c98:	dc400115 	stw	r17,4(sp)
     c9c:	dc000015 	stw	r16,0(sp)
     ca0:	18c31a04 	addi	r3,r3,3176
     ca4:	24000117 	ldw	r16,4(r4)
     ca8:	20c00f15 	stw	r3,60(r4)
     cac:	2080bb04 	addi	r2,r4,748
     cb0:	00c000c4 	movi	r3,3
     cb4:	20c0b915 	stw	r3,740(r4)
     cb8:	2080ba15 	stw	r2,744(r4)
     cbc:	2000b815 	stw	zero,736(r4)
     cc0:	05c00204 	movi	r23,8
     cc4:	00800104 	movi	r2,4
     cc8:	2025883a 	mov	r18,r4
     ccc:	b80d883a 	mov	r6,r23
     cd0:	81001704 	addi	r4,r16,92
     cd4:	000b883a 	mov	r5,zero
     cd8:	80000015 	stw	zero,0(r16)
     cdc:	80000115 	stw	zero,4(r16)
     ce0:	80000215 	stw	zero,8(r16)
     ce4:	8080030d 	sth	r2,12(r16)
     ce8:	80001915 	stw	zero,100(r16)
     cec:	8000038d 	sth	zero,14(r16)
     cf0:	80000415 	stw	zero,16(r16)
     cf4:	80000515 	stw	zero,20(r16)
     cf8:	80000615 	stw	zero,24(r16)
     cfc:	000045c0 	call	45c <memset>
     d00:	05800034 	movhi	r22,0
     d04:	94400217 	ldw	r17,8(r18)
     d08:	05400034 	movhi	r21,0
     d0c:	05000034 	movhi	r20,0
     d10:	04c00034 	movhi	r19,0
     d14:	b587fa04 	addi	r22,r22,8168
     d18:	ad481104 	addi	r21,r21,8260
     d1c:	a5083004 	addi	r20,r20,8384
     d20:	9cc84704 	addi	r19,r19,8476
     d24:	85800815 	stw	r22,32(r16)
     d28:	85400915 	stw	r21,36(r16)
     d2c:	85000a15 	stw	r20,40(r16)
     d30:	84c00b15 	stw	r19,44(r16)
     d34:	84000715 	stw	r16,28(r16)
     d38:	00800284 	movi	r2,10
     d3c:	8880030d 	sth	r2,12(r17)
     d40:	00800044 	movi	r2,1
     d44:	b80d883a 	mov	r6,r23
     d48:	89001704 	addi	r4,r17,92
     d4c:	000b883a 	mov	r5,zero
     d50:	88000015 	stw	zero,0(r17)
     d54:	88000115 	stw	zero,4(r17)
     d58:	88000215 	stw	zero,8(r17)
     d5c:	88001915 	stw	zero,100(r17)
     d60:	8880038d 	sth	r2,14(r17)
     d64:	88000415 	stw	zero,16(r17)
     d68:	88000515 	stw	zero,20(r17)
     d6c:	88000615 	stw	zero,24(r17)
     d70:	000045c0 	call	45c <memset>
     d74:	94000317 	ldw	r16,12(r18)
     d78:	00800484 	movi	r2,18
     d7c:	8c400715 	stw	r17,28(r17)
     d80:	8d800815 	stw	r22,32(r17)
     d84:	8d400915 	stw	r21,36(r17)
     d88:	8d000a15 	stw	r20,40(r17)
     d8c:	8cc00b15 	stw	r19,44(r17)
     d90:	8080030d 	sth	r2,12(r16)
     d94:	00800084 	movi	r2,2
     d98:	80000015 	stw	zero,0(r16)
     d9c:	80000115 	stw	zero,4(r16)
     da0:	80000215 	stw	zero,8(r16)
     da4:	80001915 	stw	zero,100(r16)
     da8:	8080038d 	sth	r2,14(r16)
     dac:	80000415 	stw	zero,16(r16)
     db0:	80000515 	stw	zero,20(r16)
     db4:	80000615 	stw	zero,24(r16)
     db8:	b80d883a 	mov	r6,r23
     dbc:	000b883a 	mov	r5,zero
     dc0:	81001704 	addi	r4,r16,92
     dc4:	000045c0 	call	45c <memset>
     dc8:	00800044 	movi	r2,1
     dcc:	84000715 	stw	r16,28(r16)
     dd0:	85800815 	stw	r22,32(r16)
     dd4:	85400915 	stw	r21,36(r16)
     dd8:	85000a15 	stw	r20,40(r16)
     ddc:	84c00b15 	stw	r19,44(r16)
     de0:	90800e15 	stw	r2,56(r18)
     de4:	dfc00817 	ldw	ra,32(sp)
     de8:	ddc00717 	ldw	r23,28(sp)
     dec:	dd800617 	ldw	r22,24(sp)
     df0:	dd400517 	ldw	r21,20(sp)
     df4:	dd000417 	ldw	r20,16(sp)
     df8:	dcc00317 	ldw	r19,12(sp)
     dfc:	dc800217 	ldw	r18,8(sp)
     e00:	dc400117 	ldw	r17,4(sp)
     e04:	dc000017 	ldw	r16,0(sp)
     e08:	dec00904 	addi	sp,sp,36
     e0c:	f800283a 	ret

00000e10 <__fp_lock>:
     e10:	0005883a 	mov	r2,zero
     e14:	f800283a 	ret

00000e18 <__sfmoreglue>:
     e18:	defffc04 	addi	sp,sp,-16
     e1c:	dc800215 	stw	r18,8(sp)
     e20:	2825883a 	mov	r18,r5
     e24:	dc000015 	stw	r16,0(sp)
     e28:	01401a04 	movi	r5,104
     e2c:	2021883a 	mov	r16,r4
     e30:	913fffc4 	addi	r4,r18,-1
     e34:	dfc00315 	stw	ra,12(sp)
     e38:	dc400115 	stw	r17,4(sp)
     e3c:	000244c0 	call	244c <__mulsi3>
     e40:	8009883a 	mov	r4,r16
     e44:	11401d04 	addi	r5,r2,116
     e48:	1023883a 	mov	r17,r2
     e4c:	00017880 	call	1788 <_malloc_r>
     e50:	1021883a 	mov	r16,r2
     e54:	10000726 	beq	r2,zero,e74 <__sfmoreglue+0x5c>
     e58:	11000304 	addi	r4,r2,12
     e5c:	10000015 	stw	zero,0(r2)
     e60:	14800115 	stw	r18,4(r2)
     e64:	11000215 	stw	r4,8(r2)
     e68:	89801a04 	addi	r6,r17,104
     e6c:	000b883a 	mov	r5,zero
     e70:	000045c0 	call	45c <memset>
     e74:	8005883a 	mov	r2,r16
     e78:	dfc00317 	ldw	ra,12(sp)
     e7c:	dc800217 	ldw	r18,8(sp)
     e80:	dc400117 	ldw	r17,4(sp)
     e84:	dc000017 	ldw	r16,0(sp)
     e88:	dec00404 	addi	sp,sp,16
     e8c:	f800283a 	ret

00000e90 <__sfp>:
     e90:	defffb04 	addi	sp,sp,-20
     e94:	dc000015 	stw	r16,0(sp)
     e98:	04000074 	movhi	r16,1
     e9c:	843b3504 	addi	r16,r16,-4908
     ea0:	dcc00315 	stw	r19,12(sp)
     ea4:	2027883a 	mov	r19,r4
     ea8:	81000017 	ldw	r4,0(r16)
     eac:	dfc00415 	stw	ra,16(sp)
     eb0:	dc800215 	stw	r18,8(sp)
     eb4:	20800e17 	ldw	r2,56(r4)
     eb8:	dc400115 	stw	r17,4(sp)
     ebc:	1000021e 	bne	r2,zero,ec8 <__sfp+0x38>
     ec0:	0000c740 	call	c74 <__sinit.part.1>
     ec4:	81000017 	ldw	r4,0(r16)
     ec8:	2480b804 	addi	r18,r4,736
     ecc:	047fffc4 	movi	r17,-1
     ed0:	91000117 	ldw	r4,4(r18)
     ed4:	94000217 	ldw	r16,8(r18)
     ed8:	213fffc4 	addi	r4,r4,-1
     edc:	20000a16 	blt	r4,zero,f08 <__sfp+0x78>
     ee0:	8080030f 	ldh	r2,12(r16)
     ee4:	10000c26 	beq	r2,zero,f18 <__sfp+0x88>
     ee8:	80c01d04 	addi	r3,r16,116
     eec:	00000206 	br	ef8 <__sfp+0x68>
     ef0:	18bfe60f 	ldh	r2,-104(r3)
     ef4:	10000826 	beq	r2,zero,f18 <__sfp+0x88>
     ef8:	213fffc4 	addi	r4,r4,-1
     efc:	1c3ffd04 	addi	r16,r3,-12
     f00:	18c01a04 	addi	r3,r3,104
     f04:	247ffa1e 	bne	r4,r17,ef0 <__alt_data_end+0xfffe8850>
     f08:	90800017 	ldw	r2,0(r18)
     f0c:	10001d26 	beq	r2,zero,f84 <__sfp+0xf4>
     f10:	1025883a 	mov	r18,r2
     f14:	003fee06 	br	ed0 <__alt_data_end+0xfffe8830>
     f18:	00bfffc4 	movi	r2,-1
     f1c:	8080038d 	sth	r2,14(r16)
     f20:	00800044 	movi	r2,1
     f24:	8080030d 	sth	r2,12(r16)
     f28:	80001915 	stw	zero,100(r16)
     f2c:	80000015 	stw	zero,0(r16)
     f30:	80000215 	stw	zero,8(r16)
     f34:	80000115 	stw	zero,4(r16)
     f38:	80000415 	stw	zero,16(r16)
     f3c:	80000515 	stw	zero,20(r16)
     f40:	80000615 	stw	zero,24(r16)
     f44:	01800204 	movi	r6,8
     f48:	000b883a 	mov	r5,zero
     f4c:	81001704 	addi	r4,r16,92
     f50:	000045c0 	call	45c <memset>
     f54:	8005883a 	mov	r2,r16
     f58:	80000c15 	stw	zero,48(r16)
     f5c:	80000d15 	stw	zero,52(r16)
     f60:	80001115 	stw	zero,68(r16)
     f64:	80001215 	stw	zero,72(r16)
     f68:	dfc00417 	ldw	ra,16(sp)
     f6c:	dcc00317 	ldw	r19,12(sp)
     f70:	dc800217 	ldw	r18,8(sp)
     f74:	dc400117 	ldw	r17,4(sp)
     f78:	dc000017 	ldw	r16,0(sp)
     f7c:	dec00504 	addi	sp,sp,20
     f80:	f800283a 	ret
     f84:	01400104 	movi	r5,4
     f88:	9809883a 	mov	r4,r19
     f8c:	0000e180 	call	e18 <__sfmoreglue>
     f90:	90800015 	stw	r2,0(r18)
     f94:	103fde1e 	bne	r2,zero,f10 <__alt_data_end+0xfffe8870>
     f98:	00800304 	movi	r2,12
     f9c:	98800015 	stw	r2,0(r19)
     fa0:	0005883a 	mov	r2,zero
     fa4:	003ff006 	br	f68 <__alt_data_end+0xfffe88c8>

00000fa8 <_cleanup>:
     fa8:	00800074 	movhi	r2,1
     fac:	10bb3504 	addi	r2,r2,-4908
     fb0:	11000017 	ldw	r4,0(r2)
     fb4:	01400034 	movhi	r5,0
     fb8:	29487604 	addi	r5,r5,8664
     fbc:	00015081 	jmpi	1508 <_fwalk_reent>

00000fc0 <__sinit>:
     fc0:	20800e17 	ldw	r2,56(r4)
     fc4:	10000126 	beq	r2,zero,fcc <__sinit+0xc>
     fc8:	f800283a 	ret
     fcc:	0000c741 	jmpi	c74 <__sinit.part.1>

00000fd0 <__sfp_lock_acquire>:
     fd0:	f800283a 	ret

00000fd4 <__sfp_lock_release>:
     fd4:	f800283a 	ret

00000fd8 <__sinit_lock_acquire>:
     fd8:	f800283a 	ret

00000fdc <__sinit_lock_release>:
     fdc:	f800283a 	ret

00000fe0 <__fp_lock_all>:
     fe0:	00800074 	movhi	r2,1
     fe4:	10bb3604 	addi	r2,r2,-4904
     fe8:	11000017 	ldw	r4,0(r2)
     fec:	01400034 	movhi	r5,0
     ff0:	29438404 	addi	r5,r5,3600
     ff4:	00014441 	jmpi	1444 <_fwalk>

00000ff8 <__fp_unlock_all>:
     ff8:	00800074 	movhi	r2,1
     ffc:	10bb3604 	addi	r2,r2,-4904
    1000:	11000017 	ldw	r4,0(r2)
    1004:	01400034 	movhi	r5,0
    1008:	29431804 	addi	r5,r5,3168
    100c:	00014441 	jmpi	1444 <_fwalk>

00001010 <_malloc_trim_r>:
    1010:	defffb04 	addi	sp,sp,-20
    1014:	dcc00315 	stw	r19,12(sp)
    1018:	04c00074 	movhi	r19,1
    101c:	dc800215 	stw	r18,8(sp)
    1020:	dc400115 	stw	r17,4(sp)
    1024:	dc000015 	stw	r16,0(sp)
    1028:	dfc00415 	stw	ra,16(sp)
    102c:	2821883a 	mov	r16,r5
    1030:	9cf5a304 	addi	r19,r19,-10612
    1034:	2025883a 	mov	r18,r4
    1038:	0002f240 	call	2f24 <__malloc_lock>
    103c:	98800217 	ldw	r2,8(r19)
    1040:	14400117 	ldw	r17,4(r2)
    1044:	00bfff04 	movi	r2,-4
    1048:	88a2703a 	and	r17,r17,r2
    104c:	8c21c83a 	sub	r16,r17,r16
    1050:	8403fbc4 	addi	r16,r16,4079
    1054:	8020d33a 	srli	r16,r16,12
    1058:	0083ffc4 	movi	r2,4095
    105c:	843fffc4 	addi	r16,r16,-1
    1060:	8020933a 	slli	r16,r16,12
    1064:	1400060e 	bge	r2,r16,1080 <_malloc_trim_r+0x70>
    1068:	000b883a 	mov	r5,zero
    106c:	9009883a 	mov	r4,r18
    1070:	0001f940 	call	1f94 <_sbrk_r>
    1074:	98c00217 	ldw	r3,8(r19)
    1078:	1c47883a 	add	r3,r3,r17
    107c:	10c00a26 	beq	r2,r3,10a8 <_malloc_trim_r+0x98>
    1080:	9009883a 	mov	r4,r18
    1084:	00030440 	call	3044 <__malloc_unlock>
    1088:	0005883a 	mov	r2,zero
    108c:	dfc00417 	ldw	ra,16(sp)
    1090:	dcc00317 	ldw	r19,12(sp)
    1094:	dc800217 	ldw	r18,8(sp)
    1098:	dc400117 	ldw	r17,4(sp)
    109c:	dc000017 	ldw	r16,0(sp)
    10a0:	dec00504 	addi	sp,sp,20
    10a4:	f800283a 	ret
    10a8:	040bc83a 	sub	r5,zero,r16
    10ac:	9009883a 	mov	r4,r18
    10b0:	0001f940 	call	1f94 <_sbrk_r>
    10b4:	00ffffc4 	movi	r3,-1
    10b8:	10c00d26 	beq	r2,r3,10f0 <_malloc_trim_r+0xe0>
    10bc:	00c00074 	movhi	r3,1
    10c0:	18c24f04 	addi	r3,r3,2364
    10c4:	18800017 	ldw	r2,0(r3)
    10c8:	99000217 	ldw	r4,8(r19)
    10cc:	8c23c83a 	sub	r17,r17,r16
    10d0:	8c400054 	ori	r17,r17,1
    10d4:	1421c83a 	sub	r16,r2,r16
    10d8:	24400115 	stw	r17,4(r4)
    10dc:	9009883a 	mov	r4,r18
    10e0:	1c000015 	stw	r16,0(r3)
    10e4:	00030440 	call	3044 <__malloc_unlock>
    10e8:	00800044 	movi	r2,1
    10ec:	003fe706 	br	108c <__alt_data_end+0xfffe89ec>
    10f0:	000b883a 	mov	r5,zero
    10f4:	9009883a 	mov	r4,r18
    10f8:	0001f940 	call	1f94 <_sbrk_r>
    10fc:	99000217 	ldw	r4,8(r19)
    1100:	014003c4 	movi	r5,15
    1104:	1107c83a 	sub	r3,r2,r4
    1108:	28ffdd0e 	bge	r5,r3,1080 <__alt_data_end+0xfffe89e0>
    110c:	01400074 	movhi	r5,1
    1110:	297b3704 	addi	r5,r5,-4900
    1114:	29400017 	ldw	r5,0(r5)
    1118:	18c00054 	ori	r3,r3,1
    111c:	20c00115 	stw	r3,4(r4)
    1120:	00c00074 	movhi	r3,1
    1124:	1145c83a 	sub	r2,r2,r5
    1128:	18c24f04 	addi	r3,r3,2364
    112c:	18800015 	stw	r2,0(r3)
    1130:	003fd306 	br	1080 <__alt_data_end+0xfffe89e0>

00001134 <_free_r>:
    1134:	28004126 	beq	r5,zero,123c <_free_r+0x108>
    1138:	defffd04 	addi	sp,sp,-12
    113c:	dc400115 	stw	r17,4(sp)
    1140:	dc000015 	stw	r16,0(sp)
    1144:	2023883a 	mov	r17,r4
    1148:	2821883a 	mov	r16,r5
    114c:	dfc00215 	stw	ra,8(sp)
    1150:	0002f240 	call	2f24 <__malloc_lock>
    1154:	81ffff17 	ldw	r7,-4(r16)
    1158:	00bfff84 	movi	r2,-2
    115c:	01000074 	movhi	r4,1
    1160:	81bffe04 	addi	r6,r16,-8
    1164:	3884703a 	and	r2,r7,r2
    1168:	2135a304 	addi	r4,r4,-10612
    116c:	308b883a 	add	r5,r6,r2
    1170:	2a400117 	ldw	r9,4(r5)
    1174:	22000217 	ldw	r8,8(r4)
    1178:	00ffff04 	movi	r3,-4
    117c:	48c6703a 	and	r3,r9,r3
    1180:	2a005726 	beq	r5,r8,12e0 <_free_r+0x1ac>
    1184:	28c00115 	stw	r3,4(r5)
    1188:	39c0004c 	andi	r7,r7,1
    118c:	3800091e 	bne	r7,zero,11b4 <_free_r+0x80>
    1190:	823ffe17 	ldw	r8,-8(r16)
    1194:	22400204 	addi	r9,r4,8
    1198:	320dc83a 	sub	r6,r6,r8
    119c:	31c00217 	ldw	r7,8(r6)
    11a0:	1205883a 	add	r2,r2,r8
    11a4:	3a406526 	beq	r7,r9,133c <_free_r+0x208>
    11a8:	32000317 	ldw	r8,12(r6)
    11ac:	3a000315 	stw	r8,12(r7)
    11b0:	41c00215 	stw	r7,8(r8)
    11b4:	28cf883a 	add	r7,r5,r3
    11b8:	39c00117 	ldw	r7,4(r7)
    11bc:	39c0004c 	andi	r7,r7,1
    11c0:	38003a26 	beq	r7,zero,12ac <_free_r+0x178>
    11c4:	10c00054 	ori	r3,r2,1
    11c8:	30c00115 	stw	r3,4(r6)
    11cc:	3087883a 	add	r3,r6,r2
    11d0:	18800015 	stw	r2,0(r3)
    11d4:	00c07fc4 	movi	r3,511
    11d8:	18801936 	bltu	r3,r2,1240 <_free_r+0x10c>
    11dc:	1004d0fa 	srli	r2,r2,3
    11e0:	01c00044 	movi	r7,1
    11e4:	21400117 	ldw	r5,4(r4)
    11e8:	10c00044 	addi	r3,r2,1
    11ec:	18c7883a 	add	r3,r3,r3
    11f0:	1005d0ba 	srai	r2,r2,2
    11f4:	18c7883a 	add	r3,r3,r3
    11f8:	18c7883a 	add	r3,r3,r3
    11fc:	1907883a 	add	r3,r3,r4
    1200:	3884983a 	sll	r2,r7,r2
    1204:	19c00017 	ldw	r7,0(r3)
    1208:	1a3ffe04 	addi	r8,r3,-8
    120c:	1144b03a 	or	r2,r2,r5
    1210:	32000315 	stw	r8,12(r6)
    1214:	31c00215 	stw	r7,8(r6)
    1218:	20800115 	stw	r2,4(r4)
    121c:	19800015 	stw	r6,0(r3)
    1220:	39800315 	stw	r6,12(r7)
    1224:	8809883a 	mov	r4,r17
    1228:	dfc00217 	ldw	ra,8(sp)
    122c:	dc400117 	ldw	r17,4(sp)
    1230:	dc000017 	ldw	r16,0(sp)
    1234:	dec00304 	addi	sp,sp,12
    1238:	00030441 	jmpi	3044 <__malloc_unlock>
    123c:	f800283a 	ret
    1240:	100ad27a 	srli	r5,r2,9
    1244:	00c00104 	movi	r3,4
    1248:	19404a36 	bltu	r3,r5,1374 <_free_r+0x240>
    124c:	100ad1ba 	srli	r5,r2,6
    1250:	28c00e44 	addi	r3,r5,57
    1254:	18c7883a 	add	r3,r3,r3
    1258:	29400e04 	addi	r5,r5,56
    125c:	18c7883a 	add	r3,r3,r3
    1260:	18c7883a 	add	r3,r3,r3
    1264:	1909883a 	add	r4,r3,r4
    1268:	20c00017 	ldw	r3,0(r4)
    126c:	01c00074 	movhi	r7,1
    1270:	213ffe04 	addi	r4,r4,-8
    1274:	39f5a304 	addi	r7,r7,-10612
    1278:	20c04426 	beq	r4,r3,138c <_free_r+0x258>
    127c:	01ffff04 	movi	r7,-4
    1280:	19400117 	ldw	r5,4(r3)
    1284:	29ca703a 	and	r5,r5,r7
    1288:	1140022e 	bgeu	r2,r5,1294 <_free_r+0x160>
    128c:	18c00217 	ldw	r3,8(r3)
    1290:	20fffb1e 	bne	r4,r3,1280 <__alt_data_end+0xfffe8be0>
    1294:	19000317 	ldw	r4,12(r3)
    1298:	31000315 	stw	r4,12(r6)
    129c:	30c00215 	stw	r3,8(r6)
    12a0:	21800215 	stw	r6,8(r4)
    12a4:	19800315 	stw	r6,12(r3)
    12a8:	003fde06 	br	1224 <__alt_data_end+0xfffe8b84>
    12ac:	29c00217 	ldw	r7,8(r5)
    12b0:	10c5883a 	add	r2,r2,r3
    12b4:	00c00074 	movhi	r3,1
    12b8:	18f5a504 	addi	r3,r3,-10604
    12bc:	38c03b26 	beq	r7,r3,13ac <_free_r+0x278>
    12c0:	2a000317 	ldw	r8,12(r5)
    12c4:	11400054 	ori	r5,r2,1
    12c8:	3087883a 	add	r3,r6,r2
    12cc:	3a000315 	stw	r8,12(r7)
    12d0:	41c00215 	stw	r7,8(r8)
    12d4:	31400115 	stw	r5,4(r6)
    12d8:	18800015 	stw	r2,0(r3)
    12dc:	003fbd06 	br	11d4 <__alt_data_end+0xfffe8b34>
    12e0:	39c0004c 	andi	r7,r7,1
    12e4:	10c5883a 	add	r2,r2,r3
    12e8:	3800071e 	bne	r7,zero,1308 <_free_r+0x1d4>
    12ec:	81fffe17 	ldw	r7,-8(r16)
    12f0:	31cdc83a 	sub	r6,r6,r7
    12f4:	30c00317 	ldw	r3,12(r6)
    12f8:	31400217 	ldw	r5,8(r6)
    12fc:	11c5883a 	add	r2,r2,r7
    1300:	28c00315 	stw	r3,12(r5)
    1304:	19400215 	stw	r5,8(r3)
    1308:	10c00054 	ori	r3,r2,1
    130c:	30c00115 	stw	r3,4(r6)
    1310:	00c00074 	movhi	r3,1
    1314:	18fb3804 	addi	r3,r3,-4896
    1318:	18c00017 	ldw	r3,0(r3)
    131c:	21800215 	stw	r6,8(r4)
    1320:	10ffc036 	bltu	r2,r3,1224 <__alt_data_end+0xfffe8b84>
    1324:	00800074 	movhi	r2,1
    1328:	10822d04 	addi	r2,r2,2228
    132c:	11400017 	ldw	r5,0(r2)
    1330:	8809883a 	mov	r4,r17
    1334:	00010100 	call	1010 <_malloc_trim_r>
    1338:	003fba06 	br	1224 <__alt_data_end+0xfffe8b84>
    133c:	28c9883a 	add	r4,r5,r3
    1340:	21000117 	ldw	r4,4(r4)
    1344:	2100004c 	andi	r4,r4,1
    1348:	2000391e 	bne	r4,zero,1430 <_free_r+0x2fc>
    134c:	29c00217 	ldw	r7,8(r5)
    1350:	29000317 	ldw	r4,12(r5)
    1354:	1885883a 	add	r2,r3,r2
    1358:	10c00054 	ori	r3,r2,1
    135c:	39000315 	stw	r4,12(r7)
    1360:	21c00215 	stw	r7,8(r4)
    1364:	30c00115 	stw	r3,4(r6)
    1368:	308d883a 	add	r6,r6,r2
    136c:	30800015 	stw	r2,0(r6)
    1370:	003fac06 	br	1224 <__alt_data_end+0xfffe8b84>
    1374:	00c00504 	movi	r3,20
    1378:	19401536 	bltu	r3,r5,13d0 <_free_r+0x29c>
    137c:	28c01704 	addi	r3,r5,92
    1380:	18c7883a 	add	r3,r3,r3
    1384:	294016c4 	addi	r5,r5,91
    1388:	003fb406 	br	125c <__alt_data_end+0xfffe8bbc>
    138c:	280bd0ba 	srai	r5,r5,2
    1390:	00c00044 	movi	r3,1
    1394:	38800117 	ldw	r2,4(r7)
    1398:	194a983a 	sll	r5,r3,r5
    139c:	2007883a 	mov	r3,r4
    13a0:	2884b03a 	or	r2,r5,r2
    13a4:	38800115 	stw	r2,4(r7)
    13a8:	003fbb06 	br	1298 <__alt_data_end+0xfffe8bf8>
    13ac:	21800515 	stw	r6,20(r4)
    13b0:	21800415 	stw	r6,16(r4)
    13b4:	10c00054 	ori	r3,r2,1
    13b8:	31c00315 	stw	r7,12(r6)
    13bc:	31c00215 	stw	r7,8(r6)
    13c0:	30c00115 	stw	r3,4(r6)
    13c4:	308d883a 	add	r6,r6,r2
    13c8:	30800015 	stw	r2,0(r6)
    13cc:	003f9506 	br	1224 <__alt_data_end+0xfffe8b84>
    13d0:	00c01504 	movi	r3,84
    13d4:	19400536 	bltu	r3,r5,13ec <_free_r+0x2b8>
    13d8:	100ad33a 	srli	r5,r2,12
    13dc:	28c01bc4 	addi	r3,r5,111
    13e0:	18c7883a 	add	r3,r3,r3
    13e4:	29401b84 	addi	r5,r5,110
    13e8:	003f9c06 	br	125c <__alt_data_end+0xfffe8bbc>
    13ec:	00c05504 	movi	r3,340
    13f0:	19400536 	bltu	r3,r5,1408 <_free_r+0x2d4>
    13f4:	100ad3fa 	srli	r5,r2,15
    13f8:	28c01e04 	addi	r3,r5,120
    13fc:	18c7883a 	add	r3,r3,r3
    1400:	29401dc4 	addi	r5,r5,119
    1404:	003f9506 	br	125c <__alt_data_end+0xfffe8bbc>
    1408:	00c15504 	movi	r3,1364
    140c:	19400536 	bltu	r3,r5,1424 <_free_r+0x2f0>
    1410:	100ad4ba 	srli	r5,r2,18
    1414:	28c01f44 	addi	r3,r5,125
    1418:	18c7883a 	add	r3,r3,r3
    141c:	29401f04 	addi	r5,r5,124
    1420:	003f8e06 	br	125c <__alt_data_end+0xfffe8bbc>
    1424:	00c03f84 	movi	r3,254
    1428:	01401f84 	movi	r5,126
    142c:	003f8b06 	br	125c <__alt_data_end+0xfffe8bbc>
    1430:	10c00054 	ori	r3,r2,1
    1434:	30c00115 	stw	r3,4(r6)
    1438:	308d883a 	add	r6,r6,r2
    143c:	30800015 	stw	r2,0(r6)
    1440:	003f7806 	br	1224 <__alt_data_end+0xfffe8b84>

00001444 <_fwalk>:
    1444:	defff704 	addi	sp,sp,-36
    1448:	dd000415 	stw	r20,16(sp)
    144c:	dfc00815 	stw	ra,32(sp)
    1450:	ddc00715 	stw	r23,28(sp)
    1454:	dd800615 	stw	r22,24(sp)
    1458:	dd400515 	stw	r21,20(sp)
    145c:	dcc00315 	stw	r19,12(sp)
    1460:	dc800215 	stw	r18,8(sp)
    1464:	dc400115 	stw	r17,4(sp)
    1468:	dc000015 	stw	r16,0(sp)
    146c:	2500b804 	addi	r20,r4,736
    1470:	a0002326 	beq	r20,zero,1500 <_fwalk+0xbc>
    1474:	282b883a 	mov	r21,r5
    1478:	002f883a 	mov	r23,zero
    147c:	05800044 	movi	r22,1
    1480:	04ffffc4 	movi	r19,-1
    1484:	a4400117 	ldw	r17,4(r20)
    1488:	a4800217 	ldw	r18,8(r20)
    148c:	8c7fffc4 	addi	r17,r17,-1
    1490:	88000d16 	blt	r17,zero,14c8 <_fwalk+0x84>
    1494:	94000304 	addi	r16,r18,12
    1498:	94800384 	addi	r18,r18,14
    149c:	8080000b 	ldhu	r2,0(r16)
    14a0:	8c7fffc4 	addi	r17,r17,-1
    14a4:	813ffd04 	addi	r4,r16,-12
    14a8:	b080042e 	bgeu	r22,r2,14bc <_fwalk+0x78>
    14ac:	9080000f 	ldh	r2,0(r18)
    14b0:	14c00226 	beq	r2,r19,14bc <_fwalk+0x78>
    14b4:	a83ee83a 	callr	r21
    14b8:	b8aeb03a 	or	r23,r23,r2
    14bc:	84001a04 	addi	r16,r16,104
    14c0:	94801a04 	addi	r18,r18,104
    14c4:	8cfff51e 	bne	r17,r19,149c <__alt_data_end+0xfffe8dfc>
    14c8:	a5000017 	ldw	r20,0(r20)
    14cc:	a03fed1e 	bne	r20,zero,1484 <__alt_data_end+0xfffe8de4>
    14d0:	b805883a 	mov	r2,r23
    14d4:	dfc00817 	ldw	ra,32(sp)
    14d8:	ddc00717 	ldw	r23,28(sp)
    14dc:	dd800617 	ldw	r22,24(sp)
    14e0:	dd400517 	ldw	r21,20(sp)
    14e4:	dd000417 	ldw	r20,16(sp)
    14e8:	dcc00317 	ldw	r19,12(sp)
    14ec:	dc800217 	ldw	r18,8(sp)
    14f0:	dc400117 	ldw	r17,4(sp)
    14f4:	dc000017 	ldw	r16,0(sp)
    14f8:	dec00904 	addi	sp,sp,36
    14fc:	f800283a 	ret
    1500:	002f883a 	mov	r23,zero
    1504:	003ff206 	br	14d0 <__alt_data_end+0xfffe8e30>

00001508 <_fwalk_reent>:
    1508:	defff704 	addi	sp,sp,-36
    150c:	dd000415 	stw	r20,16(sp)
    1510:	dfc00815 	stw	ra,32(sp)
    1514:	ddc00715 	stw	r23,28(sp)
    1518:	dd800615 	stw	r22,24(sp)
    151c:	dd400515 	stw	r21,20(sp)
    1520:	dcc00315 	stw	r19,12(sp)
    1524:	dc800215 	stw	r18,8(sp)
    1528:	dc400115 	stw	r17,4(sp)
    152c:	dc000015 	stw	r16,0(sp)
    1530:	2500b804 	addi	r20,r4,736
    1534:	a0002326 	beq	r20,zero,15c4 <_fwalk_reent+0xbc>
    1538:	282b883a 	mov	r21,r5
    153c:	2027883a 	mov	r19,r4
    1540:	002f883a 	mov	r23,zero
    1544:	05800044 	movi	r22,1
    1548:	04bfffc4 	movi	r18,-1
    154c:	a4400117 	ldw	r17,4(r20)
    1550:	a4000217 	ldw	r16,8(r20)
    1554:	8c7fffc4 	addi	r17,r17,-1
    1558:	88000c16 	blt	r17,zero,158c <_fwalk_reent+0x84>
    155c:	84000304 	addi	r16,r16,12
    1560:	8080000b 	ldhu	r2,0(r16)
    1564:	8c7fffc4 	addi	r17,r17,-1
    1568:	817ffd04 	addi	r5,r16,-12
    156c:	b080052e 	bgeu	r22,r2,1584 <_fwalk_reent+0x7c>
    1570:	8080008f 	ldh	r2,2(r16)
    1574:	9809883a 	mov	r4,r19
    1578:	14800226 	beq	r2,r18,1584 <_fwalk_reent+0x7c>
    157c:	a83ee83a 	callr	r21
    1580:	b8aeb03a 	or	r23,r23,r2
    1584:	84001a04 	addi	r16,r16,104
    1588:	8cbff51e 	bne	r17,r18,1560 <__alt_data_end+0xfffe8ec0>
    158c:	a5000017 	ldw	r20,0(r20)
    1590:	a03fee1e 	bne	r20,zero,154c <__alt_data_end+0xfffe8eac>
    1594:	b805883a 	mov	r2,r23
    1598:	dfc00817 	ldw	ra,32(sp)
    159c:	ddc00717 	ldw	r23,28(sp)
    15a0:	dd800617 	ldw	r22,24(sp)
    15a4:	dd400517 	ldw	r21,20(sp)
    15a8:	dd000417 	ldw	r20,16(sp)
    15ac:	dcc00317 	ldw	r19,12(sp)
    15b0:	dc800217 	ldw	r18,8(sp)
    15b4:	dc400117 	ldw	r17,4(sp)
    15b8:	dc000017 	ldw	r16,0(sp)
    15bc:	dec00904 	addi	sp,sp,36
    15c0:	f800283a 	ret
    15c4:	002f883a 	mov	r23,zero
    15c8:	003ff206 	br	1594 <__alt_data_end+0xfffe8ef4>

000015cc <__smakebuf_r>:
    15cc:	2880030b 	ldhu	r2,12(r5)
    15d0:	10c0008c 	andi	r3,r2,2
    15d4:	1800411e 	bne	r3,zero,16dc <__smakebuf_r+0x110>
    15d8:	deffec04 	addi	sp,sp,-80
    15dc:	dc000f15 	stw	r16,60(sp)
    15e0:	2821883a 	mov	r16,r5
    15e4:	2940038f 	ldh	r5,14(r5)
    15e8:	dc401015 	stw	r17,64(sp)
    15ec:	dfc01315 	stw	ra,76(sp)
    15f0:	dcc01215 	stw	r19,72(sp)
    15f4:	dc801115 	stw	r18,68(sp)
    15f8:	2023883a 	mov	r17,r4
    15fc:	28001c16 	blt	r5,zero,1670 <__smakebuf_r+0xa4>
    1600:	d80d883a 	mov	r6,sp
    1604:	00022dc0 	call	22dc <_fstat_r>
    1608:	10001816 	blt	r2,zero,166c <__smakebuf_r+0xa0>
    160c:	d8800117 	ldw	r2,4(sp)
    1610:	00e00014 	movui	r3,32768
    1614:	10bc000c 	andi	r2,r2,61440
    1618:	14c80020 	cmpeqi	r19,r2,8192
    161c:	10c03726 	beq	r2,r3,16fc <__smakebuf_r+0x130>
    1620:	80c0030b 	ldhu	r3,12(r16)
    1624:	18c20014 	ori	r3,r3,2048
    1628:	80c0030d 	sth	r3,12(r16)
    162c:	00c80004 	movi	r3,8192
    1630:	10c0521e 	bne	r2,r3,177c <__smakebuf_r+0x1b0>
    1634:	8140038f 	ldh	r5,14(r16)
    1638:	8809883a 	mov	r4,r17
    163c:	00023380 	call	2338 <_isatty_r>
    1640:	10004c26 	beq	r2,zero,1774 <__smakebuf_r+0x1a8>
    1644:	8080030b 	ldhu	r2,12(r16)
    1648:	80c010c4 	addi	r3,r16,67
    164c:	80c00015 	stw	r3,0(r16)
    1650:	10800054 	ori	r2,r2,1
    1654:	8080030d 	sth	r2,12(r16)
    1658:	00800044 	movi	r2,1
    165c:	80c00415 	stw	r3,16(r16)
    1660:	80800515 	stw	r2,20(r16)
    1664:	04810004 	movi	r18,1024
    1668:	00000706 	br	1688 <__smakebuf_r+0xbc>
    166c:	8080030b 	ldhu	r2,12(r16)
    1670:	10c0200c 	andi	r3,r2,128
    1674:	18001f1e 	bne	r3,zero,16f4 <__smakebuf_r+0x128>
    1678:	04810004 	movi	r18,1024
    167c:	10820014 	ori	r2,r2,2048
    1680:	8080030d 	sth	r2,12(r16)
    1684:	0027883a 	mov	r19,zero
    1688:	900b883a 	mov	r5,r18
    168c:	8809883a 	mov	r4,r17
    1690:	00017880 	call	1788 <_malloc_r>
    1694:	10002c26 	beq	r2,zero,1748 <__smakebuf_r+0x17c>
    1698:	80c0030b 	ldhu	r3,12(r16)
    169c:	01000034 	movhi	r4,0
    16a0:	21031a04 	addi	r4,r4,3176
    16a4:	89000f15 	stw	r4,60(r17)
    16a8:	18c02014 	ori	r3,r3,128
    16ac:	80c0030d 	sth	r3,12(r16)
    16b0:	80800015 	stw	r2,0(r16)
    16b4:	80800415 	stw	r2,16(r16)
    16b8:	84800515 	stw	r18,20(r16)
    16bc:	98001a1e 	bne	r19,zero,1728 <__smakebuf_r+0x15c>
    16c0:	dfc01317 	ldw	ra,76(sp)
    16c4:	dcc01217 	ldw	r19,72(sp)
    16c8:	dc801117 	ldw	r18,68(sp)
    16cc:	dc401017 	ldw	r17,64(sp)
    16d0:	dc000f17 	ldw	r16,60(sp)
    16d4:	dec01404 	addi	sp,sp,80
    16d8:	f800283a 	ret
    16dc:	288010c4 	addi	r2,r5,67
    16e0:	28800015 	stw	r2,0(r5)
    16e4:	28800415 	stw	r2,16(r5)
    16e8:	00800044 	movi	r2,1
    16ec:	28800515 	stw	r2,20(r5)
    16f0:	f800283a 	ret
    16f4:	04801004 	movi	r18,64
    16f8:	003fe006 	br	167c <__alt_data_end+0xfffe8fdc>
    16fc:	81000a17 	ldw	r4,40(r16)
    1700:	00c00034 	movhi	r3,0
    1704:	18c83004 	addi	r3,r3,8384
    1708:	20ffc51e 	bne	r4,r3,1620 <__alt_data_end+0xfffe8f80>
    170c:	8080030b 	ldhu	r2,12(r16)
    1710:	04810004 	movi	r18,1024
    1714:	84801315 	stw	r18,76(r16)
    1718:	1484b03a 	or	r2,r2,r18
    171c:	8080030d 	sth	r2,12(r16)
    1720:	0027883a 	mov	r19,zero
    1724:	003fd806 	br	1688 <__alt_data_end+0xfffe8fe8>
    1728:	8140038f 	ldh	r5,14(r16)
    172c:	8809883a 	mov	r4,r17
    1730:	00023380 	call	2338 <_isatty_r>
    1734:	103fe226 	beq	r2,zero,16c0 <__alt_data_end+0xfffe9020>
    1738:	8080030b 	ldhu	r2,12(r16)
    173c:	10800054 	ori	r2,r2,1
    1740:	8080030d 	sth	r2,12(r16)
    1744:	003fde06 	br	16c0 <__alt_data_end+0xfffe9020>
    1748:	8080030b 	ldhu	r2,12(r16)
    174c:	10c0800c 	andi	r3,r2,512
    1750:	183fdb1e 	bne	r3,zero,16c0 <__alt_data_end+0xfffe9020>
    1754:	10800094 	ori	r2,r2,2
    1758:	80c010c4 	addi	r3,r16,67
    175c:	8080030d 	sth	r2,12(r16)
    1760:	00800044 	movi	r2,1
    1764:	80c00015 	stw	r3,0(r16)
    1768:	80c00415 	stw	r3,16(r16)
    176c:	80800515 	stw	r2,20(r16)
    1770:	003fd306 	br	16c0 <__alt_data_end+0xfffe9020>
    1774:	04810004 	movi	r18,1024
    1778:	003fc306 	br	1688 <__alt_data_end+0xfffe8fe8>
    177c:	0027883a 	mov	r19,zero
    1780:	04810004 	movi	r18,1024
    1784:	003fc006 	br	1688 <__alt_data_end+0xfffe8fe8>

00001788 <_malloc_r>:
    1788:	defff504 	addi	sp,sp,-44
    178c:	dc800315 	stw	r18,12(sp)
    1790:	dfc00a15 	stw	ra,40(sp)
    1794:	df000915 	stw	fp,36(sp)
    1798:	ddc00815 	stw	r23,32(sp)
    179c:	dd800715 	stw	r22,28(sp)
    17a0:	dd400615 	stw	r21,24(sp)
    17a4:	dd000515 	stw	r20,20(sp)
    17a8:	dcc00415 	stw	r19,16(sp)
    17ac:	dc400215 	stw	r17,8(sp)
    17b0:	dc000115 	stw	r16,4(sp)
    17b4:	288002c4 	addi	r2,r5,11
    17b8:	00c00584 	movi	r3,22
    17bc:	2025883a 	mov	r18,r4
    17c0:	18807f2e 	bgeu	r3,r2,19c0 <_malloc_r+0x238>
    17c4:	047ffe04 	movi	r17,-8
    17c8:	1462703a 	and	r17,r2,r17
    17cc:	8800a316 	blt	r17,zero,1a5c <_malloc_r+0x2d4>
    17d0:	8940a236 	bltu	r17,r5,1a5c <_malloc_r+0x2d4>
    17d4:	0002f240 	call	2f24 <__malloc_lock>
    17d8:	00807dc4 	movi	r2,503
    17dc:	1441e92e 	bgeu	r2,r17,1f84 <_malloc_r+0x7fc>
    17e0:	8804d27a 	srli	r2,r17,9
    17e4:	1000a126 	beq	r2,zero,1a6c <_malloc_r+0x2e4>
    17e8:	00c00104 	movi	r3,4
    17ec:	18811e36 	bltu	r3,r2,1c68 <_malloc_r+0x4e0>
    17f0:	8804d1ba 	srli	r2,r17,6
    17f4:	12000e44 	addi	r8,r2,57
    17f8:	11c00e04 	addi	r7,r2,56
    17fc:	4209883a 	add	r4,r8,r8
    1800:	04c00074 	movhi	r19,1
    1804:	2109883a 	add	r4,r4,r4
    1808:	9cf5a304 	addi	r19,r19,-10612
    180c:	2109883a 	add	r4,r4,r4
    1810:	9909883a 	add	r4,r19,r4
    1814:	24000117 	ldw	r16,4(r4)
    1818:	213ffe04 	addi	r4,r4,-8
    181c:	24009726 	beq	r4,r16,1a7c <_malloc_r+0x2f4>
    1820:	80800117 	ldw	r2,4(r16)
    1824:	01bfff04 	movi	r6,-4
    1828:	014003c4 	movi	r5,15
    182c:	1184703a 	and	r2,r2,r6
    1830:	1447c83a 	sub	r3,r2,r17
    1834:	28c00716 	blt	r5,r3,1854 <_malloc_r+0xcc>
    1838:	1800920e 	bge	r3,zero,1a84 <_malloc_r+0x2fc>
    183c:	84000317 	ldw	r16,12(r16)
    1840:	24008e26 	beq	r4,r16,1a7c <_malloc_r+0x2f4>
    1844:	80800117 	ldw	r2,4(r16)
    1848:	1184703a 	and	r2,r2,r6
    184c:	1447c83a 	sub	r3,r2,r17
    1850:	28fff90e 	bge	r5,r3,1838 <__alt_data_end+0xfffe9198>
    1854:	3809883a 	mov	r4,r7
    1858:	01800074 	movhi	r6,1
    185c:	9c000417 	ldw	r16,16(r19)
    1860:	31b5a304 	addi	r6,r6,-10612
    1864:	32000204 	addi	r8,r6,8
    1868:	82013426 	beq	r16,r8,1d3c <_malloc_r+0x5b4>
    186c:	80c00117 	ldw	r3,4(r16)
    1870:	00bfff04 	movi	r2,-4
    1874:	188e703a 	and	r7,r3,r2
    1878:	3c45c83a 	sub	r2,r7,r17
    187c:	00c003c4 	movi	r3,15
    1880:	18811f16 	blt	r3,r2,1d00 <_malloc_r+0x578>
    1884:	32000515 	stw	r8,20(r6)
    1888:	32000415 	stw	r8,16(r6)
    188c:	10007f0e 	bge	r2,zero,1a8c <_malloc_r+0x304>
    1890:	00807fc4 	movi	r2,511
    1894:	11c0fd36 	bltu	r2,r7,1c8c <_malloc_r+0x504>
    1898:	3806d0fa 	srli	r3,r7,3
    189c:	01c00044 	movi	r7,1
    18a0:	30800117 	ldw	r2,4(r6)
    18a4:	19400044 	addi	r5,r3,1
    18a8:	294b883a 	add	r5,r5,r5
    18ac:	1807d0ba 	srai	r3,r3,2
    18b0:	294b883a 	add	r5,r5,r5
    18b4:	294b883a 	add	r5,r5,r5
    18b8:	298b883a 	add	r5,r5,r6
    18bc:	38c6983a 	sll	r3,r7,r3
    18c0:	29c00017 	ldw	r7,0(r5)
    18c4:	2a7ffe04 	addi	r9,r5,-8
    18c8:	1886b03a 	or	r3,r3,r2
    18cc:	82400315 	stw	r9,12(r16)
    18d0:	81c00215 	stw	r7,8(r16)
    18d4:	30c00115 	stw	r3,4(r6)
    18d8:	2c000015 	stw	r16,0(r5)
    18dc:	3c000315 	stw	r16,12(r7)
    18e0:	2005d0ba 	srai	r2,r4,2
    18e4:	01400044 	movi	r5,1
    18e8:	288a983a 	sll	r5,r5,r2
    18ec:	19406f36 	bltu	r3,r5,1aac <_malloc_r+0x324>
    18f0:	28c4703a 	and	r2,r5,r3
    18f4:	10000a1e 	bne	r2,zero,1920 <_malloc_r+0x198>
    18f8:	00bfff04 	movi	r2,-4
    18fc:	294b883a 	add	r5,r5,r5
    1900:	2088703a 	and	r4,r4,r2
    1904:	28c4703a 	and	r2,r5,r3
    1908:	21000104 	addi	r4,r4,4
    190c:	1000041e 	bne	r2,zero,1920 <_malloc_r+0x198>
    1910:	294b883a 	add	r5,r5,r5
    1914:	28c4703a 	and	r2,r5,r3
    1918:	21000104 	addi	r4,r4,4
    191c:	103ffc26 	beq	r2,zero,1910 <__alt_data_end+0xfffe9270>
    1920:	02bfff04 	movi	r10,-4
    1924:	024003c4 	movi	r9,15
    1928:	21800044 	addi	r6,r4,1
    192c:	318d883a 	add	r6,r6,r6
    1930:	318d883a 	add	r6,r6,r6
    1934:	318d883a 	add	r6,r6,r6
    1938:	998d883a 	add	r6,r19,r6
    193c:	333ffe04 	addi	r12,r6,-8
    1940:	2017883a 	mov	r11,r4
    1944:	31800104 	addi	r6,r6,4
    1948:	34000017 	ldw	r16,0(r6)
    194c:	31fffd04 	addi	r7,r6,-12
    1950:	81c0041e 	bne	r16,r7,1964 <_malloc_r+0x1dc>
    1954:	0000fb06 	br	1d44 <_malloc_r+0x5bc>
    1958:	1801030e 	bge	r3,zero,1d68 <_malloc_r+0x5e0>
    195c:	84000317 	ldw	r16,12(r16)
    1960:	81c0f826 	beq	r16,r7,1d44 <_malloc_r+0x5bc>
    1964:	80800117 	ldw	r2,4(r16)
    1968:	1284703a 	and	r2,r2,r10
    196c:	1447c83a 	sub	r3,r2,r17
    1970:	48fff90e 	bge	r9,r3,1958 <__alt_data_end+0xfffe92b8>
    1974:	80800317 	ldw	r2,12(r16)
    1978:	81000217 	ldw	r4,8(r16)
    197c:	89400054 	ori	r5,r17,1
    1980:	81400115 	stw	r5,4(r16)
    1984:	20800315 	stw	r2,12(r4)
    1988:	11000215 	stw	r4,8(r2)
    198c:	8463883a 	add	r17,r16,r17
    1990:	9c400515 	stw	r17,20(r19)
    1994:	9c400415 	stw	r17,16(r19)
    1998:	18800054 	ori	r2,r3,1
    199c:	88800115 	stw	r2,4(r17)
    19a0:	8a000315 	stw	r8,12(r17)
    19a4:	8a000215 	stw	r8,8(r17)
    19a8:	88e3883a 	add	r17,r17,r3
    19ac:	88c00015 	stw	r3,0(r17)
    19b0:	9009883a 	mov	r4,r18
    19b4:	00030440 	call	3044 <__malloc_unlock>
    19b8:	80800204 	addi	r2,r16,8
    19bc:	00001b06 	br	1a2c <_malloc_r+0x2a4>
    19c0:	04400404 	movi	r17,16
    19c4:	89402536 	bltu	r17,r5,1a5c <_malloc_r+0x2d4>
    19c8:	0002f240 	call	2f24 <__malloc_lock>
    19cc:	00800184 	movi	r2,6
    19d0:	01000084 	movi	r4,2
    19d4:	04c00074 	movhi	r19,1
    19d8:	1085883a 	add	r2,r2,r2
    19dc:	9cf5a304 	addi	r19,r19,-10612
    19e0:	1085883a 	add	r2,r2,r2
    19e4:	9885883a 	add	r2,r19,r2
    19e8:	14000117 	ldw	r16,4(r2)
    19ec:	10fffe04 	addi	r3,r2,-8
    19f0:	80c0d926 	beq	r16,r3,1d58 <_malloc_r+0x5d0>
    19f4:	80c00117 	ldw	r3,4(r16)
    19f8:	81000317 	ldw	r4,12(r16)
    19fc:	00bfff04 	movi	r2,-4
    1a00:	1884703a 	and	r2,r3,r2
    1a04:	81400217 	ldw	r5,8(r16)
    1a08:	8085883a 	add	r2,r16,r2
    1a0c:	10c00117 	ldw	r3,4(r2)
    1a10:	29000315 	stw	r4,12(r5)
    1a14:	21400215 	stw	r5,8(r4)
    1a18:	18c00054 	ori	r3,r3,1
    1a1c:	10c00115 	stw	r3,4(r2)
    1a20:	9009883a 	mov	r4,r18
    1a24:	00030440 	call	3044 <__malloc_unlock>
    1a28:	80800204 	addi	r2,r16,8
    1a2c:	dfc00a17 	ldw	ra,40(sp)
    1a30:	df000917 	ldw	fp,36(sp)
    1a34:	ddc00817 	ldw	r23,32(sp)
    1a38:	dd800717 	ldw	r22,28(sp)
    1a3c:	dd400617 	ldw	r21,24(sp)
    1a40:	dd000517 	ldw	r20,20(sp)
    1a44:	dcc00417 	ldw	r19,16(sp)
    1a48:	dc800317 	ldw	r18,12(sp)
    1a4c:	dc400217 	ldw	r17,8(sp)
    1a50:	dc000117 	ldw	r16,4(sp)
    1a54:	dec00b04 	addi	sp,sp,44
    1a58:	f800283a 	ret
    1a5c:	00800304 	movi	r2,12
    1a60:	90800015 	stw	r2,0(r18)
    1a64:	0005883a 	mov	r2,zero
    1a68:	003ff006 	br	1a2c <__alt_data_end+0xfffe938c>
    1a6c:	01002004 	movi	r4,128
    1a70:	02001004 	movi	r8,64
    1a74:	01c00fc4 	movi	r7,63
    1a78:	003f6106 	br	1800 <__alt_data_end+0xfffe9160>
    1a7c:	4009883a 	mov	r4,r8
    1a80:	003f7506 	br	1858 <__alt_data_end+0xfffe91b8>
    1a84:	81000317 	ldw	r4,12(r16)
    1a88:	003fde06 	br	1a04 <__alt_data_end+0xfffe9364>
    1a8c:	81c5883a 	add	r2,r16,r7
    1a90:	11400117 	ldw	r5,4(r2)
    1a94:	9009883a 	mov	r4,r18
    1a98:	29400054 	ori	r5,r5,1
    1a9c:	11400115 	stw	r5,4(r2)
    1aa0:	00030440 	call	3044 <__malloc_unlock>
    1aa4:	80800204 	addi	r2,r16,8
    1aa8:	003fe006 	br	1a2c <__alt_data_end+0xfffe938c>
    1aac:	9c000217 	ldw	r16,8(r19)
    1ab0:	00bfff04 	movi	r2,-4
    1ab4:	85800117 	ldw	r22,4(r16)
    1ab8:	b0ac703a 	and	r22,r22,r2
    1abc:	b4400336 	bltu	r22,r17,1acc <_malloc_r+0x344>
    1ac0:	b445c83a 	sub	r2,r22,r17
    1ac4:	00c003c4 	movi	r3,15
    1ac8:	18805d16 	blt	r3,r2,1c40 <_malloc_r+0x4b8>
    1acc:	05c00074 	movhi	r23,1
    1ad0:	00800074 	movhi	r2,1
    1ad4:	10822d04 	addi	r2,r2,2228
    1ad8:	bdfb3704 	addi	r23,r23,-4900
    1adc:	15400017 	ldw	r21,0(r2)
    1ae0:	b8c00017 	ldw	r3,0(r23)
    1ae4:	00bfffc4 	movi	r2,-1
    1ae8:	858d883a 	add	r6,r16,r22
    1aec:	8d6b883a 	add	r21,r17,r21
    1af0:	1880ea26 	beq	r3,r2,1e9c <_malloc_r+0x714>
    1af4:	ad4403c4 	addi	r21,r21,4111
    1af8:	00bc0004 	movi	r2,-4096
    1afc:	a8aa703a 	and	r21,r21,r2
    1b00:	a80b883a 	mov	r5,r21
    1b04:	9009883a 	mov	r4,r18
    1b08:	d9800015 	stw	r6,0(sp)
    1b0c:	0001f940 	call	1f94 <_sbrk_r>
    1b10:	1029883a 	mov	r20,r2
    1b14:	00bfffc4 	movi	r2,-1
    1b18:	d9800017 	ldw	r6,0(sp)
    1b1c:	a080e826 	beq	r20,r2,1ec0 <_malloc_r+0x738>
    1b20:	a180a636 	bltu	r20,r6,1dbc <_malloc_r+0x634>
    1b24:	07000074 	movhi	fp,1
    1b28:	e7024f04 	addi	fp,fp,2364
    1b2c:	e0800017 	ldw	r2,0(fp)
    1b30:	a887883a 	add	r3,r21,r2
    1b34:	e0c00015 	stw	r3,0(fp)
    1b38:	3500e626 	beq	r6,r20,1ed4 <_malloc_r+0x74c>
    1b3c:	b9000017 	ldw	r4,0(r23)
    1b40:	00bfffc4 	movi	r2,-1
    1b44:	2080ee26 	beq	r4,r2,1f00 <_malloc_r+0x778>
    1b48:	a185c83a 	sub	r2,r20,r6
    1b4c:	10c5883a 	add	r2,r2,r3
    1b50:	e0800015 	stw	r2,0(fp)
    1b54:	a0c001cc 	andi	r3,r20,7
    1b58:	1800bc26 	beq	r3,zero,1e4c <_malloc_r+0x6c4>
    1b5c:	a0e9c83a 	sub	r20,r20,r3
    1b60:	00840204 	movi	r2,4104
    1b64:	a5000204 	addi	r20,r20,8
    1b68:	10c7c83a 	sub	r3,r2,r3
    1b6c:	a545883a 	add	r2,r20,r21
    1b70:	1083ffcc 	andi	r2,r2,4095
    1b74:	18abc83a 	sub	r21,r3,r2
    1b78:	a80b883a 	mov	r5,r21
    1b7c:	9009883a 	mov	r4,r18
    1b80:	0001f940 	call	1f94 <_sbrk_r>
    1b84:	00ffffc4 	movi	r3,-1
    1b88:	10c0e126 	beq	r2,r3,1f10 <_malloc_r+0x788>
    1b8c:	1505c83a 	sub	r2,r2,r20
    1b90:	1545883a 	add	r2,r2,r21
    1b94:	10800054 	ori	r2,r2,1
    1b98:	e0c00017 	ldw	r3,0(fp)
    1b9c:	9d000215 	stw	r20,8(r19)
    1ba0:	a0800115 	stw	r2,4(r20)
    1ba4:	a8c7883a 	add	r3,r21,r3
    1ba8:	e0c00015 	stw	r3,0(fp)
    1bac:	84c00e26 	beq	r16,r19,1be8 <_malloc_r+0x460>
    1bb0:	018003c4 	movi	r6,15
    1bb4:	3580a72e 	bgeu	r6,r22,1e54 <_malloc_r+0x6cc>
    1bb8:	81400117 	ldw	r5,4(r16)
    1bbc:	013ffe04 	movi	r4,-8
    1bc0:	b0bffd04 	addi	r2,r22,-12
    1bc4:	1104703a 	and	r2,r2,r4
    1bc8:	2900004c 	andi	r4,r5,1
    1bcc:	2088b03a 	or	r4,r4,r2
    1bd0:	81000115 	stw	r4,4(r16)
    1bd4:	01400144 	movi	r5,5
    1bd8:	8089883a 	add	r4,r16,r2
    1bdc:	21400115 	stw	r5,4(r4)
    1be0:	21400215 	stw	r5,8(r4)
    1be4:	3080cd36 	bltu	r6,r2,1f1c <_malloc_r+0x794>
    1be8:	00800074 	movhi	r2,1
    1bec:	10822c04 	addi	r2,r2,2224
    1bf0:	11000017 	ldw	r4,0(r2)
    1bf4:	20c0012e 	bgeu	r4,r3,1bfc <_malloc_r+0x474>
    1bf8:	10c00015 	stw	r3,0(r2)
    1bfc:	00800074 	movhi	r2,1
    1c00:	10822b04 	addi	r2,r2,2220
    1c04:	11000017 	ldw	r4,0(r2)
    1c08:	9c000217 	ldw	r16,8(r19)
    1c0c:	20c0012e 	bgeu	r4,r3,1c14 <_malloc_r+0x48c>
    1c10:	10c00015 	stw	r3,0(r2)
    1c14:	80c00117 	ldw	r3,4(r16)
    1c18:	00bfff04 	movi	r2,-4
    1c1c:	1886703a 	and	r3,r3,r2
    1c20:	1c45c83a 	sub	r2,r3,r17
    1c24:	1c400236 	bltu	r3,r17,1c30 <_malloc_r+0x4a8>
    1c28:	00c003c4 	movi	r3,15
    1c2c:	18800416 	blt	r3,r2,1c40 <_malloc_r+0x4b8>
    1c30:	9009883a 	mov	r4,r18
    1c34:	00030440 	call	3044 <__malloc_unlock>
    1c38:	0005883a 	mov	r2,zero
    1c3c:	003f7b06 	br	1a2c <__alt_data_end+0xfffe938c>
    1c40:	88c00054 	ori	r3,r17,1
    1c44:	80c00115 	stw	r3,4(r16)
    1c48:	8463883a 	add	r17,r16,r17
    1c4c:	10800054 	ori	r2,r2,1
    1c50:	9c400215 	stw	r17,8(r19)
    1c54:	88800115 	stw	r2,4(r17)
    1c58:	9009883a 	mov	r4,r18
    1c5c:	00030440 	call	3044 <__malloc_unlock>
    1c60:	80800204 	addi	r2,r16,8
    1c64:	003f7106 	br	1a2c <__alt_data_end+0xfffe938c>
    1c68:	00c00504 	movi	r3,20
    1c6c:	18804a2e 	bgeu	r3,r2,1d98 <_malloc_r+0x610>
    1c70:	00c01504 	movi	r3,84
    1c74:	18806e36 	bltu	r3,r2,1e30 <_malloc_r+0x6a8>
    1c78:	8804d33a 	srli	r2,r17,12
    1c7c:	12001bc4 	addi	r8,r2,111
    1c80:	11c01b84 	addi	r7,r2,110
    1c84:	4209883a 	add	r4,r8,r8
    1c88:	003edd06 	br	1800 <__alt_data_end+0xfffe9160>
    1c8c:	3804d27a 	srli	r2,r7,9
    1c90:	00c00104 	movi	r3,4
    1c94:	1880442e 	bgeu	r3,r2,1da8 <_malloc_r+0x620>
    1c98:	00c00504 	movi	r3,20
    1c9c:	18808136 	bltu	r3,r2,1ea4 <_malloc_r+0x71c>
    1ca0:	11401704 	addi	r5,r2,92
    1ca4:	10c016c4 	addi	r3,r2,91
    1ca8:	294b883a 	add	r5,r5,r5
    1cac:	294b883a 	add	r5,r5,r5
    1cb0:	294b883a 	add	r5,r5,r5
    1cb4:	994b883a 	add	r5,r19,r5
    1cb8:	28800017 	ldw	r2,0(r5)
    1cbc:	01800074 	movhi	r6,1
    1cc0:	297ffe04 	addi	r5,r5,-8
    1cc4:	31b5a304 	addi	r6,r6,-10612
    1cc8:	28806526 	beq	r5,r2,1e60 <_malloc_r+0x6d8>
    1ccc:	01bfff04 	movi	r6,-4
    1cd0:	10c00117 	ldw	r3,4(r2)
    1cd4:	1986703a 	and	r3,r3,r6
    1cd8:	38c0022e 	bgeu	r7,r3,1ce4 <_malloc_r+0x55c>
    1cdc:	10800217 	ldw	r2,8(r2)
    1ce0:	28bffb1e 	bne	r5,r2,1cd0 <__alt_data_end+0xfffe9630>
    1ce4:	11400317 	ldw	r5,12(r2)
    1ce8:	98c00117 	ldw	r3,4(r19)
    1cec:	81400315 	stw	r5,12(r16)
    1cf0:	80800215 	stw	r2,8(r16)
    1cf4:	2c000215 	stw	r16,8(r5)
    1cf8:	14000315 	stw	r16,12(r2)
    1cfc:	003ef806 	br	18e0 <__alt_data_end+0xfffe9240>
    1d00:	88c00054 	ori	r3,r17,1
    1d04:	80c00115 	stw	r3,4(r16)
    1d08:	8463883a 	add	r17,r16,r17
    1d0c:	34400515 	stw	r17,20(r6)
    1d10:	34400415 	stw	r17,16(r6)
    1d14:	10c00054 	ori	r3,r2,1
    1d18:	8a000315 	stw	r8,12(r17)
    1d1c:	8a000215 	stw	r8,8(r17)
    1d20:	88c00115 	stw	r3,4(r17)
    1d24:	88a3883a 	add	r17,r17,r2
    1d28:	88800015 	stw	r2,0(r17)
    1d2c:	9009883a 	mov	r4,r18
    1d30:	00030440 	call	3044 <__malloc_unlock>
    1d34:	80800204 	addi	r2,r16,8
    1d38:	003f3c06 	br	1a2c <__alt_data_end+0xfffe938c>
    1d3c:	30c00117 	ldw	r3,4(r6)
    1d40:	003ee706 	br	18e0 <__alt_data_end+0xfffe9240>
    1d44:	5ac00044 	addi	r11,r11,1
    1d48:	588000cc 	andi	r2,r11,3
    1d4c:	31800204 	addi	r6,r6,8
    1d50:	103efd1e 	bne	r2,zero,1948 <__alt_data_end+0xfffe92a8>
    1d54:	00002406 	br	1de8 <_malloc_r+0x660>
    1d58:	14000317 	ldw	r16,12(r2)
    1d5c:	143f251e 	bne	r2,r16,19f4 <__alt_data_end+0xfffe9354>
    1d60:	21000084 	addi	r4,r4,2
    1d64:	003ebc06 	br	1858 <__alt_data_end+0xfffe91b8>
    1d68:	8085883a 	add	r2,r16,r2
    1d6c:	10c00117 	ldw	r3,4(r2)
    1d70:	81000317 	ldw	r4,12(r16)
    1d74:	81400217 	ldw	r5,8(r16)
    1d78:	18c00054 	ori	r3,r3,1
    1d7c:	10c00115 	stw	r3,4(r2)
    1d80:	29000315 	stw	r4,12(r5)
    1d84:	21400215 	stw	r5,8(r4)
    1d88:	9009883a 	mov	r4,r18
    1d8c:	00030440 	call	3044 <__malloc_unlock>
    1d90:	80800204 	addi	r2,r16,8
    1d94:	003f2506 	br	1a2c <__alt_data_end+0xfffe938c>
    1d98:	12001704 	addi	r8,r2,92
    1d9c:	11c016c4 	addi	r7,r2,91
    1da0:	4209883a 	add	r4,r8,r8
    1da4:	003e9606 	br	1800 <__alt_data_end+0xfffe9160>
    1da8:	3804d1ba 	srli	r2,r7,6
    1dac:	11400e44 	addi	r5,r2,57
    1db0:	10c00e04 	addi	r3,r2,56
    1db4:	294b883a 	add	r5,r5,r5
    1db8:	003fbc06 	br	1cac <__alt_data_end+0xfffe960c>
    1dbc:	84ff5926 	beq	r16,r19,1b24 <__alt_data_end+0xfffe9484>
    1dc0:	00800074 	movhi	r2,1
    1dc4:	10b5a304 	addi	r2,r2,-10612
    1dc8:	14000217 	ldw	r16,8(r2)
    1dcc:	00bfff04 	movi	r2,-4
    1dd0:	80c00117 	ldw	r3,4(r16)
    1dd4:	1886703a 	and	r3,r3,r2
    1dd8:	003f9106 	br	1c20 <__alt_data_end+0xfffe9580>
    1ddc:	60800217 	ldw	r2,8(r12)
    1de0:	213fffc4 	addi	r4,r4,-1
    1de4:	1300651e 	bne	r2,r12,1f7c <_malloc_r+0x7f4>
    1de8:	208000cc 	andi	r2,r4,3
    1dec:	633ffe04 	addi	r12,r12,-8
    1df0:	103ffa1e 	bne	r2,zero,1ddc <__alt_data_end+0xfffe973c>
    1df4:	98800117 	ldw	r2,4(r19)
    1df8:	0146303a 	nor	r3,zero,r5
    1dfc:	1884703a 	and	r2,r3,r2
    1e00:	98800115 	stw	r2,4(r19)
    1e04:	294b883a 	add	r5,r5,r5
    1e08:	117f2836 	bltu	r2,r5,1aac <__alt_data_end+0xfffe940c>
    1e0c:	283f2726 	beq	r5,zero,1aac <__alt_data_end+0xfffe940c>
    1e10:	2886703a 	and	r3,r5,r2
    1e14:	5809883a 	mov	r4,r11
    1e18:	183ec31e 	bne	r3,zero,1928 <__alt_data_end+0xfffe9288>
    1e1c:	294b883a 	add	r5,r5,r5
    1e20:	2886703a 	and	r3,r5,r2
    1e24:	21000104 	addi	r4,r4,4
    1e28:	183ffc26 	beq	r3,zero,1e1c <__alt_data_end+0xfffe977c>
    1e2c:	003ebe06 	br	1928 <__alt_data_end+0xfffe9288>
    1e30:	00c05504 	movi	r3,340
    1e34:	18801236 	bltu	r3,r2,1e80 <_malloc_r+0x6f8>
    1e38:	8804d3fa 	srli	r2,r17,15
    1e3c:	12001e04 	addi	r8,r2,120
    1e40:	11c01dc4 	addi	r7,r2,119
    1e44:	4209883a 	add	r4,r8,r8
    1e48:	003e6d06 	br	1800 <__alt_data_end+0xfffe9160>
    1e4c:	00c40004 	movi	r3,4096
    1e50:	003f4606 	br	1b6c <__alt_data_end+0xfffe94cc>
    1e54:	00800044 	movi	r2,1
    1e58:	a0800115 	stw	r2,4(r20)
    1e5c:	003f7406 	br	1c30 <__alt_data_end+0xfffe9590>
    1e60:	1805d0ba 	srai	r2,r3,2
    1e64:	01c00044 	movi	r7,1
    1e68:	30c00117 	ldw	r3,4(r6)
    1e6c:	388e983a 	sll	r7,r7,r2
    1e70:	2805883a 	mov	r2,r5
    1e74:	38c6b03a 	or	r3,r7,r3
    1e78:	30c00115 	stw	r3,4(r6)
    1e7c:	003f9b06 	br	1cec <__alt_data_end+0xfffe964c>
    1e80:	00c15504 	movi	r3,1364
    1e84:	18801a36 	bltu	r3,r2,1ef0 <_malloc_r+0x768>
    1e88:	8804d4ba 	srli	r2,r17,18
    1e8c:	12001f44 	addi	r8,r2,125
    1e90:	11c01f04 	addi	r7,r2,124
    1e94:	4209883a 	add	r4,r8,r8
    1e98:	003e5906 	br	1800 <__alt_data_end+0xfffe9160>
    1e9c:	ad400404 	addi	r21,r21,16
    1ea0:	003f1706 	br	1b00 <__alt_data_end+0xfffe9460>
    1ea4:	00c01504 	movi	r3,84
    1ea8:	18802336 	bltu	r3,r2,1f38 <_malloc_r+0x7b0>
    1eac:	3804d33a 	srli	r2,r7,12
    1eb0:	11401bc4 	addi	r5,r2,111
    1eb4:	10c01b84 	addi	r3,r2,110
    1eb8:	294b883a 	add	r5,r5,r5
    1ebc:	003f7b06 	br	1cac <__alt_data_end+0xfffe960c>
    1ec0:	9c000217 	ldw	r16,8(r19)
    1ec4:	00bfff04 	movi	r2,-4
    1ec8:	80c00117 	ldw	r3,4(r16)
    1ecc:	1886703a 	and	r3,r3,r2
    1ed0:	003f5306 	br	1c20 <__alt_data_end+0xfffe9580>
    1ed4:	3083ffcc 	andi	r2,r6,4095
    1ed8:	103f181e 	bne	r2,zero,1b3c <__alt_data_end+0xfffe949c>
    1edc:	99000217 	ldw	r4,8(r19)
    1ee0:	b545883a 	add	r2,r22,r21
    1ee4:	10800054 	ori	r2,r2,1
    1ee8:	20800115 	stw	r2,4(r4)
    1eec:	003f3e06 	br	1be8 <__alt_data_end+0xfffe9548>
    1ef0:	01003f84 	movi	r4,254
    1ef4:	02001fc4 	movi	r8,127
    1ef8:	01c01f84 	movi	r7,126
    1efc:	003e4006 	br	1800 <__alt_data_end+0xfffe9160>
    1f00:	00800074 	movhi	r2,1
    1f04:	10bb3704 	addi	r2,r2,-4900
    1f08:	15000015 	stw	r20,0(r2)
    1f0c:	003f1106 	br	1b54 <__alt_data_end+0xfffe94b4>
    1f10:	00800044 	movi	r2,1
    1f14:	002b883a 	mov	r21,zero
    1f18:	003f1f06 	br	1b98 <__alt_data_end+0xfffe94f8>
    1f1c:	81400204 	addi	r5,r16,8
    1f20:	9009883a 	mov	r4,r18
    1f24:	00011340 	call	1134 <_free_r>
    1f28:	00800074 	movhi	r2,1
    1f2c:	10824f04 	addi	r2,r2,2364
    1f30:	10c00017 	ldw	r3,0(r2)
    1f34:	003f2c06 	br	1be8 <__alt_data_end+0xfffe9548>
    1f38:	00c05504 	movi	r3,340
    1f3c:	18800536 	bltu	r3,r2,1f54 <_malloc_r+0x7cc>
    1f40:	3804d3fa 	srli	r2,r7,15
    1f44:	11401e04 	addi	r5,r2,120
    1f48:	10c01dc4 	addi	r3,r2,119
    1f4c:	294b883a 	add	r5,r5,r5
    1f50:	003f5606 	br	1cac <__alt_data_end+0xfffe960c>
    1f54:	00c15504 	movi	r3,1364
    1f58:	18800536 	bltu	r3,r2,1f70 <_malloc_r+0x7e8>
    1f5c:	3804d4ba 	srli	r2,r7,18
    1f60:	11401f44 	addi	r5,r2,125
    1f64:	10c01f04 	addi	r3,r2,124
    1f68:	294b883a 	add	r5,r5,r5
    1f6c:	003f4f06 	br	1cac <__alt_data_end+0xfffe960c>
    1f70:	01403f84 	movi	r5,254
    1f74:	00c01f84 	movi	r3,126
    1f78:	003f4c06 	br	1cac <__alt_data_end+0xfffe960c>
    1f7c:	98800117 	ldw	r2,4(r19)
    1f80:	003fa006 	br	1e04 <__alt_data_end+0xfffe9764>
    1f84:	8808d0fa 	srli	r4,r17,3
    1f88:	20800044 	addi	r2,r4,1
    1f8c:	1085883a 	add	r2,r2,r2
    1f90:	003e9006 	br	19d4 <__alt_data_end+0xfffe9334>

00001f94 <_sbrk_r>:
    1f94:	defffd04 	addi	sp,sp,-12
    1f98:	dc000015 	stw	r16,0(sp)
    1f9c:	04000074 	movhi	r16,1
    1fa0:	dc400115 	stw	r17,4(sp)
    1fa4:	84022e04 	addi	r16,r16,2232
    1fa8:	2023883a 	mov	r17,r4
    1fac:	2809883a 	mov	r4,r5
    1fb0:	dfc00215 	stw	ra,8(sp)
    1fb4:	80000015 	stw	zero,0(r16)
    1fb8:	0002c140 	call	2c14 <sbrk>
    1fbc:	00ffffc4 	movi	r3,-1
    1fc0:	10c00526 	beq	r2,r3,1fd8 <_sbrk_r+0x44>
    1fc4:	dfc00217 	ldw	ra,8(sp)
    1fc8:	dc400117 	ldw	r17,4(sp)
    1fcc:	dc000017 	ldw	r16,0(sp)
    1fd0:	dec00304 	addi	sp,sp,12
    1fd4:	f800283a 	ret
    1fd8:	80c00017 	ldw	r3,0(r16)
    1fdc:	183ff926 	beq	r3,zero,1fc4 <__alt_data_end+0xfffe9924>
    1fe0:	88c00015 	stw	r3,0(r17)
    1fe4:	003ff706 	br	1fc4 <__alt_data_end+0xfffe9924>

00001fe8 <__sread>:
    1fe8:	defffe04 	addi	sp,sp,-8
    1fec:	dc000015 	stw	r16,0(sp)
    1ff0:	2821883a 	mov	r16,r5
    1ff4:	2940038f 	ldh	r5,14(r5)
    1ff8:	dfc00115 	stw	ra,4(sp)
    1ffc:	00023ec0 	call	23ec <_read_r>
    2000:	10000716 	blt	r2,zero,2020 <__sread+0x38>
    2004:	80c01417 	ldw	r3,80(r16)
    2008:	1887883a 	add	r3,r3,r2
    200c:	80c01415 	stw	r3,80(r16)
    2010:	dfc00117 	ldw	ra,4(sp)
    2014:	dc000017 	ldw	r16,0(sp)
    2018:	dec00204 	addi	sp,sp,8
    201c:	f800283a 	ret
    2020:	80c0030b 	ldhu	r3,12(r16)
    2024:	18fbffcc 	andi	r3,r3,61439
    2028:	80c0030d 	sth	r3,12(r16)
    202c:	dfc00117 	ldw	ra,4(sp)
    2030:	dc000017 	ldw	r16,0(sp)
    2034:	dec00204 	addi	sp,sp,8
    2038:	f800283a 	ret

0000203c <__seofread>:
    203c:	0005883a 	mov	r2,zero
    2040:	f800283a 	ret

00002044 <__swrite>:
    2044:	2880030b 	ldhu	r2,12(r5)
    2048:	defffb04 	addi	sp,sp,-20
    204c:	dcc00315 	stw	r19,12(sp)
    2050:	dc800215 	stw	r18,8(sp)
    2054:	dc400115 	stw	r17,4(sp)
    2058:	dc000015 	stw	r16,0(sp)
    205c:	dfc00415 	stw	ra,16(sp)
    2060:	10c0400c 	andi	r3,r2,256
    2064:	2821883a 	mov	r16,r5
    2068:	2023883a 	mov	r17,r4
    206c:	3025883a 	mov	r18,r6
    2070:	3827883a 	mov	r19,r7
    2074:	18000526 	beq	r3,zero,208c <__swrite+0x48>
    2078:	2940038f 	ldh	r5,14(r5)
    207c:	01c00084 	movi	r7,2
    2080:	000d883a 	mov	r6,zero
    2084:	000238c0 	call	238c <_lseek_r>
    2088:	8080030b 	ldhu	r2,12(r16)
    208c:	8140038f 	ldh	r5,14(r16)
    2090:	10bbffcc 	andi	r2,r2,61439
    2094:	980f883a 	mov	r7,r19
    2098:	900d883a 	mov	r6,r18
    209c:	8809883a 	mov	r4,r17
    20a0:	8080030d 	sth	r2,12(r16)
    20a4:	dfc00417 	ldw	ra,16(sp)
    20a8:	dcc00317 	ldw	r19,12(sp)
    20ac:	dc800217 	ldw	r18,8(sp)
    20b0:	dc400117 	ldw	r17,4(sp)
    20b4:	dc000017 	ldw	r16,0(sp)
    20b8:	dec00504 	addi	sp,sp,20
    20bc:	00021241 	jmpi	2124 <_write_r>

000020c0 <__sseek>:
    20c0:	defffe04 	addi	sp,sp,-8
    20c4:	dc000015 	stw	r16,0(sp)
    20c8:	2821883a 	mov	r16,r5
    20cc:	2940038f 	ldh	r5,14(r5)
    20d0:	dfc00115 	stw	ra,4(sp)
    20d4:	000238c0 	call	238c <_lseek_r>
    20d8:	00ffffc4 	movi	r3,-1
    20dc:	10c00826 	beq	r2,r3,2100 <__sseek+0x40>
    20e0:	80c0030b 	ldhu	r3,12(r16)
    20e4:	80801415 	stw	r2,80(r16)
    20e8:	18c40014 	ori	r3,r3,4096
    20ec:	80c0030d 	sth	r3,12(r16)
    20f0:	dfc00117 	ldw	ra,4(sp)
    20f4:	dc000017 	ldw	r16,0(sp)
    20f8:	dec00204 	addi	sp,sp,8
    20fc:	f800283a 	ret
    2100:	80c0030b 	ldhu	r3,12(r16)
    2104:	18fbffcc 	andi	r3,r3,61439
    2108:	80c0030d 	sth	r3,12(r16)
    210c:	dfc00117 	ldw	ra,4(sp)
    2110:	dc000017 	ldw	r16,0(sp)
    2114:	dec00204 	addi	sp,sp,8
    2118:	f800283a 	ret

0000211c <__sclose>:
    211c:	2940038f 	ldh	r5,14(r5)
    2120:	00021841 	jmpi	2184 <_close_r>

00002124 <_write_r>:
    2124:	defffd04 	addi	sp,sp,-12
    2128:	2805883a 	mov	r2,r5
    212c:	dc000015 	stw	r16,0(sp)
    2130:	04000074 	movhi	r16,1
    2134:	dc400115 	stw	r17,4(sp)
    2138:	300b883a 	mov	r5,r6
    213c:	84022e04 	addi	r16,r16,2232
    2140:	2023883a 	mov	r17,r4
    2144:	380d883a 	mov	r6,r7
    2148:	1009883a 	mov	r4,r2
    214c:	dfc00215 	stw	ra,8(sp)
    2150:	80000015 	stw	zero,0(r16)
    2154:	0002d000 	call	2d00 <write>
    2158:	00ffffc4 	movi	r3,-1
    215c:	10c00526 	beq	r2,r3,2174 <_write_r+0x50>
    2160:	dfc00217 	ldw	ra,8(sp)
    2164:	dc400117 	ldw	r17,4(sp)
    2168:	dc000017 	ldw	r16,0(sp)
    216c:	dec00304 	addi	sp,sp,12
    2170:	f800283a 	ret
    2174:	80c00017 	ldw	r3,0(r16)
    2178:	183ff926 	beq	r3,zero,2160 <__alt_data_end+0xfffe9ac0>
    217c:	88c00015 	stw	r3,0(r17)
    2180:	003ff706 	br	2160 <__alt_data_end+0xfffe9ac0>

00002184 <_close_r>:
    2184:	defffd04 	addi	sp,sp,-12
    2188:	dc000015 	stw	r16,0(sp)
    218c:	04000074 	movhi	r16,1
    2190:	dc400115 	stw	r17,4(sp)
    2194:	84022e04 	addi	r16,r16,2232
    2198:	2023883a 	mov	r17,r4
    219c:	2809883a 	mov	r4,r5
    21a0:	dfc00215 	stw	ra,8(sp)
    21a4:	80000015 	stw	zero,0(r16)
    21a8:	00024b00 	call	24b0 <close>
    21ac:	00ffffc4 	movi	r3,-1
    21b0:	10c00526 	beq	r2,r3,21c8 <_close_r+0x44>
    21b4:	dfc00217 	ldw	ra,8(sp)
    21b8:	dc400117 	ldw	r17,4(sp)
    21bc:	dc000017 	ldw	r16,0(sp)
    21c0:	dec00304 	addi	sp,sp,12
    21c4:	f800283a 	ret
    21c8:	80c00017 	ldw	r3,0(r16)
    21cc:	183ff926 	beq	r3,zero,21b4 <__alt_data_end+0xfffe9b14>
    21d0:	88c00015 	stw	r3,0(r17)
    21d4:	003ff706 	br	21b4 <__alt_data_end+0xfffe9b14>

000021d8 <_fclose_r>:
    21d8:	28003926 	beq	r5,zero,22c0 <_fclose_r+0xe8>
    21dc:	defffc04 	addi	sp,sp,-16
    21e0:	dc400115 	stw	r17,4(sp)
    21e4:	dc000015 	stw	r16,0(sp)
    21e8:	dfc00315 	stw	ra,12(sp)
    21ec:	dc800215 	stw	r18,8(sp)
    21f0:	2023883a 	mov	r17,r4
    21f4:	2821883a 	mov	r16,r5
    21f8:	20000226 	beq	r4,zero,2204 <_fclose_r+0x2c>
    21fc:	20800e17 	ldw	r2,56(r4)
    2200:	10002726 	beq	r2,zero,22a0 <_fclose_r+0xc8>
    2204:	8080030f 	ldh	r2,12(r16)
    2208:	1000071e 	bne	r2,zero,2228 <_fclose_r+0x50>
    220c:	0005883a 	mov	r2,zero
    2210:	dfc00317 	ldw	ra,12(sp)
    2214:	dc800217 	ldw	r18,8(sp)
    2218:	dc400117 	ldw	r17,4(sp)
    221c:	dc000017 	ldw	r16,0(sp)
    2220:	dec00404 	addi	sp,sp,16
    2224:	f800283a 	ret
    2228:	800b883a 	mov	r5,r16
    222c:	8809883a 	mov	r4,r17
    2230:	00009b80 	call	9b8 <__sflush_r>
    2234:	1025883a 	mov	r18,r2
    2238:	80800b17 	ldw	r2,44(r16)
    223c:	10000426 	beq	r2,zero,2250 <_fclose_r+0x78>
    2240:	81400717 	ldw	r5,28(r16)
    2244:	8809883a 	mov	r4,r17
    2248:	103ee83a 	callr	r2
    224c:	10001616 	blt	r2,zero,22a8 <_fclose_r+0xd0>
    2250:	8080030b 	ldhu	r2,12(r16)
    2254:	1080200c 	andi	r2,r2,128
    2258:	1000151e 	bne	r2,zero,22b0 <_fclose_r+0xd8>
    225c:	81400c17 	ldw	r5,48(r16)
    2260:	28000526 	beq	r5,zero,2278 <_fclose_r+0xa0>
    2264:	80801004 	addi	r2,r16,64
    2268:	28800226 	beq	r5,r2,2274 <_fclose_r+0x9c>
    226c:	8809883a 	mov	r4,r17
    2270:	00011340 	call	1134 <_free_r>
    2274:	80000c15 	stw	zero,48(r16)
    2278:	81401117 	ldw	r5,68(r16)
    227c:	28000326 	beq	r5,zero,228c <_fclose_r+0xb4>
    2280:	8809883a 	mov	r4,r17
    2284:	00011340 	call	1134 <_free_r>
    2288:	80001115 	stw	zero,68(r16)
    228c:	0000fd00 	call	fd0 <__sfp_lock_acquire>
    2290:	8000030d 	sth	zero,12(r16)
    2294:	0000fd40 	call	fd4 <__sfp_lock_release>
    2298:	9005883a 	mov	r2,r18
    229c:	003fdc06 	br	2210 <__alt_data_end+0xfffe9b70>
    22a0:	0000fc00 	call	fc0 <__sinit>
    22a4:	003fd706 	br	2204 <__alt_data_end+0xfffe9b64>
    22a8:	04bfffc4 	movi	r18,-1
    22ac:	003fe806 	br	2250 <__alt_data_end+0xfffe9bb0>
    22b0:	81400417 	ldw	r5,16(r16)
    22b4:	8809883a 	mov	r4,r17
    22b8:	00011340 	call	1134 <_free_r>
    22bc:	003fe706 	br	225c <__alt_data_end+0xfffe9bbc>
    22c0:	0005883a 	mov	r2,zero
    22c4:	f800283a 	ret

000022c8 <fclose>:
    22c8:	00800074 	movhi	r2,1
    22cc:	10bb3604 	addi	r2,r2,-4904
    22d0:	200b883a 	mov	r5,r4
    22d4:	11000017 	ldw	r4,0(r2)
    22d8:	00021d81 	jmpi	21d8 <_fclose_r>

000022dc <_fstat_r>:
    22dc:	defffd04 	addi	sp,sp,-12
    22e0:	2805883a 	mov	r2,r5
    22e4:	dc000015 	stw	r16,0(sp)
    22e8:	04000074 	movhi	r16,1
    22ec:	dc400115 	stw	r17,4(sp)
    22f0:	84022e04 	addi	r16,r16,2232
    22f4:	2023883a 	mov	r17,r4
    22f8:	300b883a 	mov	r5,r6
    22fc:	1009883a 	mov	r4,r2
    2300:	dfc00215 	stw	ra,8(sp)
    2304:	80000015 	stw	zero,0(r16)
    2308:	00025f00 	call	25f0 <fstat>
    230c:	00ffffc4 	movi	r3,-1
    2310:	10c00526 	beq	r2,r3,2328 <_fstat_r+0x4c>
    2314:	dfc00217 	ldw	ra,8(sp)
    2318:	dc400117 	ldw	r17,4(sp)
    231c:	dc000017 	ldw	r16,0(sp)
    2320:	dec00304 	addi	sp,sp,12
    2324:	f800283a 	ret
    2328:	80c00017 	ldw	r3,0(r16)
    232c:	183ff926 	beq	r3,zero,2314 <__alt_data_end+0xfffe9c74>
    2330:	88c00015 	stw	r3,0(r17)
    2334:	003ff706 	br	2314 <__alt_data_end+0xfffe9c74>

00002338 <_isatty_r>:
    2338:	defffd04 	addi	sp,sp,-12
    233c:	dc000015 	stw	r16,0(sp)
    2340:	04000074 	movhi	r16,1
    2344:	dc400115 	stw	r17,4(sp)
    2348:	84022e04 	addi	r16,r16,2232
    234c:	2023883a 	mov	r17,r4
    2350:	2809883a 	mov	r4,r5
    2354:	dfc00215 	stw	ra,8(sp)
    2358:	80000015 	stw	zero,0(r16)
    235c:	00026e40 	call	26e4 <isatty>
    2360:	00ffffc4 	movi	r3,-1
    2364:	10c00526 	beq	r2,r3,237c <_isatty_r+0x44>
    2368:	dfc00217 	ldw	ra,8(sp)
    236c:	dc400117 	ldw	r17,4(sp)
    2370:	dc000017 	ldw	r16,0(sp)
    2374:	dec00304 	addi	sp,sp,12
    2378:	f800283a 	ret
    237c:	80c00017 	ldw	r3,0(r16)
    2380:	183ff926 	beq	r3,zero,2368 <__alt_data_end+0xfffe9cc8>
    2384:	88c00015 	stw	r3,0(r17)
    2388:	003ff706 	br	2368 <__alt_data_end+0xfffe9cc8>

0000238c <_lseek_r>:
    238c:	defffd04 	addi	sp,sp,-12
    2390:	2805883a 	mov	r2,r5
    2394:	dc000015 	stw	r16,0(sp)
    2398:	04000074 	movhi	r16,1
    239c:	dc400115 	stw	r17,4(sp)
    23a0:	300b883a 	mov	r5,r6
    23a4:	84022e04 	addi	r16,r16,2232
    23a8:	2023883a 	mov	r17,r4
    23ac:	380d883a 	mov	r6,r7
    23b0:	1009883a 	mov	r4,r2
    23b4:	dfc00215 	stw	ra,8(sp)
    23b8:	80000015 	stw	zero,0(r16)
    23bc:	00028b80 	call	28b8 <lseek>
    23c0:	00ffffc4 	movi	r3,-1
    23c4:	10c00526 	beq	r2,r3,23dc <_lseek_r+0x50>
    23c8:	dfc00217 	ldw	ra,8(sp)
    23cc:	dc400117 	ldw	r17,4(sp)
    23d0:	dc000017 	ldw	r16,0(sp)
    23d4:	dec00304 	addi	sp,sp,12
    23d8:	f800283a 	ret
    23dc:	80c00017 	ldw	r3,0(r16)
    23e0:	183ff926 	beq	r3,zero,23c8 <__alt_data_end+0xfffe9d28>
    23e4:	88c00015 	stw	r3,0(r17)
    23e8:	003ff706 	br	23c8 <__alt_data_end+0xfffe9d28>

000023ec <_read_r>:
    23ec:	defffd04 	addi	sp,sp,-12
    23f0:	2805883a 	mov	r2,r5
    23f4:	dc000015 	stw	r16,0(sp)
    23f8:	04000074 	movhi	r16,1
    23fc:	dc400115 	stw	r17,4(sp)
    2400:	300b883a 	mov	r5,r6
    2404:	84022e04 	addi	r16,r16,2232
    2408:	2023883a 	mov	r17,r4
    240c:	380d883a 	mov	r6,r7
    2410:	1009883a 	mov	r4,r2
    2414:	dfc00215 	stw	ra,8(sp)
    2418:	80000015 	stw	zero,0(r16)
    241c:	0002a8c0 	call	2a8c <read>
    2420:	00ffffc4 	movi	r3,-1
    2424:	10c00526 	beq	r2,r3,243c <_read_r+0x50>
    2428:	dfc00217 	ldw	ra,8(sp)
    242c:	dc400117 	ldw	r17,4(sp)
    2430:	dc000017 	ldw	r16,0(sp)
    2434:	dec00304 	addi	sp,sp,12
    2438:	f800283a 	ret
    243c:	80c00017 	ldw	r3,0(r16)
    2440:	183ff926 	beq	r3,zero,2428 <__alt_data_end+0xfffe9d88>
    2444:	88c00015 	stw	r3,0(r17)
    2448:	003ff706 	br	2428 <__alt_data_end+0xfffe9d88>

0000244c <__mulsi3>:
    244c:	0005883a 	mov	r2,zero
    2450:	20000726 	beq	r4,zero,2470 <__mulsi3+0x24>
    2454:	20c0004c 	andi	r3,r4,1
    2458:	2008d07a 	srli	r4,r4,1
    245c:	18000126 	beq	r3,zero,2464 <__mulsi3+0x18>
    2460:	1145883a 	add	r2,r2,r5
    2464:	294b883a 	add	r5,r5,r5
    2468:	203ffa1e 	bne	r4,zero,2454 <__alt_data_end+0xfffe9db4>
    246c:	f800283a 	ret
    2470:	f800283a 	ret

00002474 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2474:	defffe04 	addi	sp,sp,-8
    2478:	dfc00115 	stw	ra,4(sp)
    247c:	df000015 	stw	fp,0(sp)
    2480:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2484:	d0a00917 	ldw	r2,-32732(gp)
    2488:	10000326 	beq	r2,zero,2498 <alt_get_errno+0x24>
    248c:	d0a00917 	ldw	r2,-32732(gp)
    2490:	103ee83a 	callr	r2
    2494:	00000106 	br	249c <alt_get_errno+0x28>
    2498:	d0a6f904 	addi	r2,gp,-25628
}
    249c:	e037883a 	mov	sp,fp
    24a0:	dfc00117 	ldw	ra,4(sp)
    24a4:	df000017 	ldw	fp,0(sp)
    24a8:	dec00204 	addi	sp,sp,8
    24ac:	f800283a 	ret

000024b0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    24b0:	defffb04 	addi	sp,sp,-20
    24b4:	dfc00415 	stw	ra,16(sp)
    24b8:	df000315 	stw	fp,12(sp)
    24bc:	df000304 	addi	fp,sp,12
    24c0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    24c4:	e0bfff17 	ldw	r2,-4(fp)
    24c8:	10000816 	blt	r2,zero,24ec <close+0x3c>
    24cc:	01400304 	movi	r5,12
    24d0:	e13fff17 	ldw	r4,-4(fp)
    24d4:	000244c0 	call	244c <__mulsi3>
    24d8:	1007883a 	mov	r3,r2
    24dc:	00800074 	movhi	r2,1
    24e0:	10b6af04 	addi	r2,r2,-9540
    24e4:	1885883a 	add	r2,r3,r2
    24e8:	00000106 	br	24f0 <close+0x40>
    24ec:	0005883a 	mov	r2,zero
    24f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    24f4:	e0bffd17 	ldw	r2,-12(fp)
    24f8:	10001926 	beq	r2,zero,2560 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    24fc:	e0bffd17 	ldw	r2,-12(fp)
    2500:	10800017 	ldw	r2,0(r2)
    2504:	10800417 	ldw	r2,16(r2)
    2508:	10000626 	beq	r2,zero,2524 <close+0x74>
    250c:	e0bffd17 	ldw	r2,-12(fp)
    2510:	10800017 	ldw	r2,0(r2)
    2514:	10800417 	ldw	r2,16(r2)
    2518:	e13ffd17 	ldw	r4,-12(fp)
    251c:	103ee83a 	callr	r2
    2520:	00000106 	br	2528 <close+0x78>
    2524:	0005883a 	mov	r2,zero
    2528:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    252c:	e13fff17 	ldw	r4,-4(fp)
    2530:	0002b900 	call	2b90 <alt_release_fd>
    if (rval < 0)
    2534:	e0bffe17 	ldw	r2,-8(fp)
    2538:	1000070e 	bge	r2,zero,2558 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    253c:	00024740 	call	2474 <alt_get_errno>
    2540:	1007883a 	mov	r3,r2
    2544:	e0bffe17 	ldw	r2,-8(fp)
    2548:	0085c83a 	sub	r2,zero,r2
    254c:	18800015 	stw	r2,0(r3)
      return -1;
    2550:	00bfffc4 	movi	r2,-1
    2554:	00000706 	br	2574 <close+0xc4>
    }
    return 0;
    2558:	0005883a 	mov	r2,zero
    255c:	00000506 	br	2574 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2560:	00024740 	call	2474 <alt_get_errno>
    2564:	1007883a 	mov	r3,r2
    2568:	00801444 	movi	r2,81
    256c:	18800015 	stw	r2,0(r3)
    return -1;
    2570:	00bfffc4 	movi	r2,-1
  }
}
    2574:	e037883a 	mov	sp,fp
    2578:	dfc00117 	ldw	ra,4(sp)
    257c:	df000017 	ldw	fp,0(sp)
    2580:	dec00204 	addi	sp,sp,8
    2584:	f800283a 	ret

00002588 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2588:	defffc04 	addi	sp,sp,-16
    258c:	df000315 	stw	fp,12(sp)
    2590:	df000304 	addi	fp,sp,12
    2594:	e13ffd15 	stw	r4,-12(fp)
    2598:	e17ffe15 	stw	r5,-8(fp)
    259c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    25a0:	e0bfff17 	ldw	r2,-4(fp)
}
    25a4:	e037883a 	mov	sp,fp
    25a8:	df000017 	ldw	fp,0(sp)
    25ac:	dec00104 	addi	sp,sp,4
    25b0:	f800283a 	ret

000025b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    25b4:	defffe04 	addi	sp,sp,-8
    25b8:	dfc00115 	stw	ra,4(sp)
    25bc:	df000015 	stw	fp,0(sp)
    25c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    25c4:	d0a00917 	ldw	r2,-32732(gp)
    25c8:	10000326 	beq	r2,zero,25d8 <alt_get_errno+0x24>
    25cc:	d0a00917 	ldw	r2,-32732(gp)
    25d0:	103ee83a 	callr	r2
    25d4:	00000106 	br	25dc <alt_get_errno+0x28>
    25d8:	d0a6f904 	addi	r2,gp,-25628
}
    25dc:	e037883a 	mov	sp,fp
    25e0:	dfc00117 	ldw	ra,4(sp)
    25e4:	df000017 	ldw	fp,0(sp)
    25e8:	dec00204 	addi	sp,sp,8
    25ec:	f800283a 	ret

000025f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    25f0:	defffb04 	addi	sp,sp,-20
    25f4:	dfc00415 	stw	ra,16(sp)
    25f8:	df000315 	stw	fp,12(sp)
    25fc:	df000304 	addi	fp,sp,12
    2600:	e13ffe15 	stw	r4,-8(fp)
    2604:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2608:	e0bffe17 	ldw	r2,-8(fp)
    260c:	10000816 	blt	r2,zero,2630 <fstat+0x40>
    2610:	01400304 	movi	r5,12
    2614:	e13ffe17 	ldw	r4,-8(fp)
    2618:	000244c0 	call	244c <__mulsi3>
    261c:	1007883a 	mov	r3,r2
    2620:	00800074 	movhi	r2,1
    2624:	10b6af04 	addi	r2,r2,-9540
    2628:	1885883a 	add	r2,r3,r2
    262c:	00000106 	br	2634 <fstat+0x44>
    2630:	0005883a 	mov	r2,zero
    2634:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    2638:	e0bffd17 	ldw	r2,-12(fp)
    263c:	10001026 	beq	r2,zero,2680 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    2640:	e0bffd17 	ldw	r2,-12(fp)
    2644:	10800017 	ldw	r2,0(r2)
    2648:	10800817 	ldw	r2,32(r2)
    264c:	10000726 	beq	r2,zero,266c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    2650:	e0bffd17 	ldw	r2,-12(fp)
    2654:	10800017 	ldw	r2,0(r2)
    2658:	10800817 	ldw	r2,32(r2)
    265c:	e17fff17 	ldw	r5,-4(fp)
    2660:	e13ffd17 	ldw	r4,-12(fp)
    2664:	103ee83a 	callr	r2
    2668:	00000a06 	br	2694 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    266c:	e0bfff17 	ldw	r2,-4(fp)
    2670:	00c80004 	movi	r3,8192
    2674:	10c00115 	stw	r3,4(r2)
      return 0;
    2678:	0005883a 	mov	r2,zero
    267c:	00000506 	br	2694 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2680:	00025b40 	call	25b4 <alt_get_errno>
    2684:	1007883a 	mov	r3,r2
    2688:	00801444 	movi	r2,81
    268c:	18800015 	stw	r2,0(r3)
    return -1;
    2690:	00bfffc4 	movi	r2,-1
  }
}
    2694:	e037883a 	mov	sp,fp
    2698:	dfc00117 	ldw	ra,4(sp)
    269c:	df000017 	ldw	fp,0(sp)
    26a0:	dec00204 	addi	sp,sp,8
    26a4:	f800283a 	ret

000026a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    26a8:	defffe04 	addi	sp,sp,-8
    26ac:	dfc00115 	stw	ra,4(sp)
    26b0:	df000015 	stw	fp,0(sp)
    26b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    26b8:	d0a00917 	ldw	r2,-32732(gp)
    26bc:	10000326 	beq	r2,zero,26cc <alt_get_errno+0x24>
    26c0:	d0a00917 	ldw	r2,-32732(gp)
    26c4:	103ee83a 	callr	r2
    26c8:	00000106 	br	26d0 <alt_get_errno+0x28>
    26cc:	d0a6f904 	addi	r2,gp,-25628
}
    26d0:	e037883a 	mov	sp,fp
    26d4:	dfc00117 	ldw	ra,4(sp)
    26d8:	df000017 	ldw	fp,0(sp)
    26dc:	dec00204 	addi	sp,sp,8
    26e0:	f800283a 	ret

000026e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    26e4:	deffed04 	addi	sp,sp,-76
    26e8:	dfc01215 	stw	ra,72(sp)
    26ec:	df001115 	stw	fp,68(sp)
    26f0:	df001104 	addi	fp,sp,68
    26f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    26f8:	e0bfff17 	ldw	r2,-4(fp)
    26fc:	10000816 	blt	r2,zero,2720 <isatty+0x3c>
    2700:	01400304 	movi	r5,12
    2704:	e13fff17 	ldw	r4,-4(fp)
    2708:	000244c0 	call	244c <__mulsi3>
    270c:	1007883a 	mov	r3,r2
    2710:	00800074 	movhi	r2,1
    2714:	10b6af04 	addi	r2,r2,-9540
    2718:	1885883a 	add	r2,r3,r2
    271c:	00000106 	br	2724 <isatty+0x40>
    2720:	0005883a 	mov	r2,zero
    2724:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    2728:	e0bfef17 	ldw	r2,-68(fp)
    272c:	10000e26 	beq	r2,zero,2768 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    2730:	e0bfef17 	ldw	r2,-68(fp)
    2734:	10800017 	ldw	r2,0(r2)
    2738:	10800817 	ldw	r2,32(r2)
    273c:	1000021e 	bne	r2,zero,2748 <isatty+0x64>
    {
      return 1;
    2740:	00800044 	movi	r2,1
    2744:	00000d06 	br	277c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2748:	e0bff004 	addi	r2,fp,-64
    274c:	100b883a 	mov	r5,r2
    2750:	e13fff17 	ldw	r4,-4(fp)
    2754:	00025f00 	call	25f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2758:	e0bff117 	ldw	r2,-60(fp)
    275c:	10880020 	cmpeqi	r2,r2,8192
    2760:	10803fcc 	andi	r2,r2,255
    2764:	00000506 	br	277c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2768:	00026a80 	call	26a8 <alt_get_errno>
    276c:	1007883a 	mov	r3,r2
    2770:	00801444 	movi	r2,81
    2774:	18800015 	stw	r2,0(r3)
    return 0;
    2778:	0005883a 	mov	r2,zero
  }
}
    277c:	e037883a 	mov	sp,fp
    2780:	dfc00117 	ldw	ra,4(sp)
    2784:	df000017 	ldw	fp,0(sp)
    2788:	dec00204 	addi	sp,sp,8
    278c:	f800283a 	ret

00002790 <alt_load_section>:
    2790:	defffc04 	addi	sp,sp,-16
    2794:	df000315 	stw	fp,12(sp)
    2798:	df000304 	addi	fp,sp,12
    279c:	e13ffd15 	stw	r4,-12(fp)
    27a0:	e17ffe15 	stw	r5,-8(fp)
    27a4:	e1bfff15 	stw	r6,-4(fp)
    27a8:	e0fffe17 	ldw	r3,-8(fp)
    27ac:	e0bffd17 	ldw	r2,-12(fp)
    27b0:	18800c26 	beq	r3,r2,27e4 <alt_load_section+0x54>
    27b4:	00000806 	br	27d8 <alt_load_section+0x48>
    27b8:	e0bffe17 	ldw	r2,-8(fp)
    27bc:	10c00104 	addi	r3,r2,4
    27c0:	e0fffe15 	stw	r3,-8(fp)
    27c4:	e0fffd17 	ldw	r3,-12(fp)
    27c8:	19000104 	addi	r4,r3,4
    27cc:	e13ffd15 	stw	r4,-12(fp)
    27d0:	18c00017 	ldw	r3,0(r3)
    27d4:	10c00015 	stw	r3,0(r2)
    27d8:	e0fffe17 	ldw	r3,-8(fp)
    27dc:	e0bfff17 	ldw	r2,-4(fp)
    27e0:	18bff51e 	bne	r3,r2,27b8 <__alt_data_end+0xfffea118>
    27e4:	0001883a 	nop
    27e8:	e037883a 	mov	sp,fp
    27ec:	df000017 	ldw	fp,0(sp)
    27f0:	dec00104 	addi	sp,sp,4
    27f4:	f800283a 	ret

000027f8 <alt_load>:
    27f8:	defffe04 	addi	sp,sp,-8
    27fc:	dfc00115 	stw	ra,4(sp)
    2800:	df000015 	stw	fp,0(sp)
    2804:	d839883a 	mov	fp,sp
    2808:	01800074 	movhi	r6,1
    280c:	31bb6204 	addi	r6,r6,-4728
    2810:	01400074 	movhi	r5,1
    2814:	29749a04 	addi	r5,r5,-11672
    2818:	01000074 	movhi	r4,1
    281c:	213b6204 	addi	r4,r4,-4728
    2820:	00027900 	call	2790 <alt_load_section>
    2824:	01800034 	movhi	r6,0
    2828:	31808c04 	addi	r6,r6,560
    282c:	01400034 	movhi	r5,0
    2830:	29400804 	addi	r5,r5,32
    2834:	01000034 	movhi	r4,0
    2838:	21000804 	addi	r4,r4,32
    283c:	00027900 	call	2790 <alt_load_section>
    2840:	01800074 	movhi	r6,1
    2844:	31b49a04 	addi	r6,r6,-11672
    2848:	01400074 	movhi	r5,1
    284c:	29744004 	addi	r5,r5,-12032
    2850:	01000074 	movhi	r4,1
    2854:	21344004 	addi	r4,r4,-12032
    2858:	00027900 	call	2790 <alt_load_section>
    285c:	000b92c0 	call	b92c <alt_dcache_flush_all>
    2860:	000baec0 	call	baec <alt_icache_flush_all>
    2864:	0001883a 	nop
    2868:	e037883a 	mov	sp,fp
    286c:	dfc00117 	ldw	ra,4(sp)
    2870:	df000017 	ldw	fp,0(sp)
    2874:	dec00204 	addi	sp,sp,8
    2878:	f800283a 	ret

0000287c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    287c:	defffe04 	addi	sp,sp,-8
    2880:	dfc00115 	stw	ra,4(sp)
    2884:	df000015 	stw	fp,0(sp)
    2888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    288c:	d0a00917 	ldw	r2,-32732(gp)
    2890:	10000326 	beq	r2,zero,28a0 <alt_get_errno+0x24>
    2894:	d0a00917 	ldw	r2,-32732(gp)
    2898:	103ee83a 	callr	r2
    289c:	00000106 	br	28a4 <alt_get_errno+0x28>
    28a0:	d0a6f904 	addi	r2,gp,-25628
}
    28a4:	e037883a 	mov	sp,fp
    28a8:	dfc00117 	ldw	ra,4(sp)
    28ac:	df000017 	ldw	fp,0(sp)
    28b0:	dec00204 	addi	sp,sp,8
    28b4:	f800283a 	ret

000028b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    28b8:	defff904 	addi	sp,sp,-28
    28bc:	dfc00615 	stw	ra,24(sp)
    28c0:	df000515 	stw	fp,20(sp)
    28c4:	df000504 	addi	fp,sp,20
    28c8:	e13ffd15 	stw	r4,-12(fp)
    28cc:	e17ffe15 	stw	r5,-8(fp)
    28d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    28d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    28d8:	e0bffd17 	ldw	r2,-12(fp)
    28dc:	10000816 	blt	r2,zero,2900 <lseek+0x48>
    28e0:	01400304 	movi	r5,12
    28e4:	e13ffd17 	ldw	r4,-12(fp)
    28e8:	000244c0 	call	244c <__mulsi3>
    28ec:	1007883a 	mov	r3,r2
    28f0:	00800074 	movhi	r2,1
    28f4:	10b6af04 	addi	r2,r2,-9540
    28f8:	1885883a 	add	r2,r3,r2
    28fc:	00000106 	br	2904 <lseek+0x4c>
    2900:	0005883a 	mov	r2,zero
    2904:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    2908:	e0bffc17 	ldw	r2,-16(fp)
    290c:	10001026 	beq	r2,zero,2950 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    2910:	e0bffc17 	ldw	r2,-16(fp)
    2914:	10800017 	ldw	r2,0(r2)
    2918:	10800717 	ldw	r2,28(r2)
    291c:	10000926 	beq	r2,zero,2944 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    2920:	e0bffc17 	ldw	r2,-16(fp)
    2924:	10800017 	ldw	r2,0(r2)
    2928:	10800717 	ldw	r2,28(r2)
    292c:	e1bfff17 	ldw	r6,-4(fp)
    2930:	e17ffe17 	ldw	r5,-8(fp)
    2934:	e13ffc17 	ldw	r4,-16(fp)
    2938:	103ee83a 	callr	r2
    293c:	e0bffb15 	stw	r2,-20(fp)
    2940:	00000506 	br	2958 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    2944:	00bfde84 	movi	r2,-134
    2948:	e0bffb15 	stw	r2,-20(fp)
    294c:	00000206 	br	2958 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    2950:	00bfebc4 	movi	r2,-81
    2954:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    2958:	e0bffb17 	ldw	r2,-20(fp)
    295c:	1000070e 	bge	r2,zero,297c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    2960:	000287c0 	call	287c <alt_get_errno>
    2964:	1007883a 	mov	r3,r2
    2968:	e0bffb17 	ldw	r2,-20(fp)
    296c:	0085c83a 	sub	r2,zero,r2
    2970:	18800015 	stw	r2,0(r3)
    rc = -1;
    2974:	00bfffc4 	movi	r2,-1
    2978:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    297c:	e0bffb17 	ldw	r2,-20(fp)
}
    2980:	e037883a 	mov	sp,fp
    2984:	dfc00117 	ldw	ra,4(sp)
    2988:	df000017 	ldw	fp,0(sp)
    298c:	dec00204 	addi	sp,sp,8
    2990:	f800283a 	ret

00002994 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2994:	defff904 	addi	sp,sp,-28
    2998:	dfc00615 	stw	ra,24(sp)
    299c:	df000515 	stw	fp,20(sp)
    29a0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    29a4:	0009883a 	mov	r4,zero
    29a8:	000a93c0 	call	a93c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    29ac:	00039800 	call	3980 <OSInit>
    29b0:	01000044 	movi	r4,1
    29b4:	00082dc0 	call	82dc <OSSemCreate>
    29b8:	d0a6ff15 	stw	r2,-25604(gp)
    29bc:	01000044 	movi	r4,1
    29c0:	00082dc0 	call	82dc <OSSemCreate>
    29c4:	d0a70115 	stw	r2,-25596(gp)
    29c8:	d0a6fa04 	addi	r2,gp,-25624
    29cc:	e0bffc15 	stw	r2,-16(fp)
    29d0:	00800044 	movi	r2,1
    29d4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    29d8:	e0bffd0b 	ldhu	r2,-12(fp)
    29dc:	1009883a 	mov	r4,r2
    29e0:	00082dc0 	call	82dc <OSSemCreate>
    29e4:	1007883a 	mov	r3,r2
    29e8:	e0bffc17 	ldw	r2,-16(fp)
    29ec:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    29f0:	000a9740 	call	a974 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    29f4:	01800074 	movhi	r6,1
    29f8:	31b44404 	addi	r6,r6,-12016
    29fc:	01400074 	movhi	r5,1
    2a00:	29744404 	addi	r5,r5,-12016
    2a04:	01000074 	movhi	r4,1
    2a08:	21344404 	addi	r4,r4,-12016
    2a0c:	000be900 	call	be90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    2a10:	000ba2c0 	call	ba2c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    2a14:	01000074 	movhi	r4,1
    2a18:	212ea304 	addi	r4,r4,-17780
    2a1c:	000c9d80 	call	c9d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    2a20:	d0a6fb17 	ldw	r2,-25620(gp)
    2a24:	d0e6fc17 	ldw	r3,-25616(gp)
    2a28:	d126fd17 	ldw	r4,-25612(gp)
    2a2c:	200d883a 	mov	r6,r4
    2a30:	180b883a 	mov	r5,r3
    2a34:	1009883a 	mov	r4,r2
    2a38:	000026c0 	call	26c <main>
    2a3c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    2a40:	01000044 	movi	r4,1
    2a44:	00024b00 	call	24b0 <close>
  exit (result);
    2a48:	e13ffb17 	ldw	r4,-20(fp)
    2a4c:	000c9ec0 	call	c9ec <exit>

00002a50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2a50:	defffe04 	addi	sp,sp,-8
    2a54:	dfc00115 	stw	ra,4(sp)
    2a58:	df000015 	stw	fp,0(sp)
    2a5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2a60:	d0a00917 	ldw	r2,-32732(gp)
    2a64:	10000326 	beq	r2,zero,2a74 <alt_get_errno+0x24>
    2a68:	d0a00917 	ldw	r2,-32732(gp)
    2a6c:	103ee83a 	callr	r2
    2a70:	00000106 	br	2a78 <alt_get_errno+0x28>
    2a74:	d0a6f904 	addi	r2,gp,-25628
}
    2a78:	e037883a 	mov	sp,fp
    2a7c:	dfc00117 	ldw	ra,4(sp)
    2a80:	df000017 	ldw	fp,0(sp)
    2a84:	dec00204 	addi	sp,sp,8
    2a88:	f800283a 	ret

00002a8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    2a8c:	defff904 	addi	sp,sp,-28
    2a90:	dfc00615 	stw	ra,24(sp)
    2a94:	df000515 	stw	fp,20(sp)
    2a98:	df000504 	addi	fp,sp,20
    2a9c:	e13ffd15 	stw	r4,-12(fp)
    2aa0:	e17ffe15 	stw	r5,-8(fp)
    2aa4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2aa8:	e0bffd17 	ldw	r2,-12(fp)
    2aac:	10000816 	blt	r2,zero,2ad0 <read+0x44>
    2ab0:	01400304 	movi	r5,12
    2ab4:	e13ffd17 	ldw	r4,-12(fp)
    2ab8:	000244c0 	call	244c <__mulsi3>
    2abc:	1007883a 	mov	r3,r2
    2ac0:	00800074 	movhi	r2,1
    2ac4:	10b6af04 	addi	r2,r2,-9540
    2ac8:	1885883a 	add	r2,r3,r2
    2acc:	00000106 	br	2ad4 <read+0x48>
    2ad0:	0005883a 	mov	r2,zero
    2ad4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2ad8:	e0bffb17 	ldw	r2,-20(fp)
    2adc:	10002226 	beq	r2,zero,2b68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    2ae0:	e0bffb17 	ldw	r2,-20(fp)
    2ae4:	10800217 	ldw	r2,8(r2)
    2ae8:	108000cc 	andi	r2,r2,3
    2aec:	10800060 	cmpeqi	r2,r2,1
    2af0:	1000181e 	bne	r2,zero,2b54 <read+0xc8>
        (fd->dev->read))
    2af4:	e0bffb17 	ldw	r2,-20(fp)
    2af8:	10800017 	ldw	r2,0(r2)
    2afc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    2b00:	10001426 	beq	r2,zero,2b54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    2b04:	e0bffb17 	ldw	r2,-20(fp)
    2b08:	10800017 	ldw	r2,0(r2)
    2b0c:	10800517 	ldw	r2,20(r2)
    2b10:	e0ffff17 	ldw	r3,-4(fp)
    2b14:	180d883a 	mov	r6,r3
    2b18:	e17ffe17 	ldw	r5,-8(fp)
    2b1c:	e13ffb17 	ldw	r4,-20(fp)
    2b20:	103ee83a 	callr	r2
    2b24:	e0bffc15 	stw	r2,-16(fp)
    2b28:	e0bffc17 	ldw	r2,-16(fp)
    2b2c:	1000070e 	bge	r2,zero,2b4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
    2b30:	0002a500 	call	2a50 <alt_get_errno>
    2b34:	1007883a 	mov	r3,r2
    2b38:	e0bffc17 	ldw	r2,-16(fp)
    2b3c:	0085c83a 	sub	r2,zero,r2
    2b40:	18800015 	stw	r2,0(r3)
          return -1;
    2b44:	00bfffc4 	movi	r2,-1
    2b48:	00000c06 	br	2b7c <read+0xf0>
        }
        return rval;
    2b4c:	e0bffc17 	ldw	r2,-16(fp)
    2b50:	00000a06 	br	2b7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    2b54:	0002a500 	call	2a50 <alt_get_errno>
    2b58:	1007883a 	mov	r3,r2
    2b5c:	00800344 	movi	r2,13
    2b60:	18800015 	stw	r2,0(r3)
    2b64:	00000406 	br	2b78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    2b68:	0002a500 	call	2a50 <alt_get_errno>
    2b6c:	1007883a 	mov	r3,r2
    2b70:	00801444 	movi	r2,81
    2b74:	18800015 	stw	r2,0(r3)
  }
  return -1;
    2b78:	00bfffc4 	movi	r2,-1
}
    2b7c:	e037883a 	mov	sp,fp
    2b80:	dfc00117 	ldw	ra,4(sp)
    2b84:	df000017 	ldw	fp,0(sp)
    2b88:	dec00204 	addi	sp,sp,8
    2b8c:	f800283a 	ret

00002b90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2b90:	defffc04 	addi	sp,sp,-16
    2b94:	dfc00315 	stw	ra,12(sp)
    2b98:	df000215 	stw	fp,8(sp)
    2b9c:	dc000115 	stw	r16,4(sp)
    2ba0:	df000204 	addi	fp,sp,8
    2ba4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2ba8:	e0bffe17 	ldw	r2,-8(fp)
    2bac:	108000d0 	cmplti	r2,r2,3
    2bb0:	1000111e 	bne	r2,zero,2bf8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    2bb4:	04000074 	movhi	r16,1
    2bb8:	8436af04 	addi	r16,r16,-9540
    2bbc:	e0bffe17 	ldw	r2,-8(fp)
    2bc0:	01400304 	movi	r5,12
    2bc4:	1009883a 	mov	r4,r2
    2bc8:	000244c0 	call	244c <__mulsi3>
    2bcc:	8085883a 	add	r2,r16,r2
    2bd0:	10800204 	addi	r2,r2,8
    2bd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2bd8:	04000074 	movhi	r16,1
    2bdc:	8436af04 	addi	r16,r16,-9540
    2be0:	e0bffe17 	ldw	r2,-8(fp)
    2be4:	01400304 	movi	r5,12
    2be8:	1009883a 	mov	r4,r2
    2bec:	000244c0 	call	244c <__mulsi3>
    2bf0:	8085883a 	add	r2,r16,r2
    2bf4:	10000015 	stw	zero,0(r2)
  }
}
    2bf8:	0001883a 	nop
    2bfc:	e6ffff04 	addi	sp,fp,-4
    2c00:	dfc00217 	ldw	ra,8(sp)
    2c04:	df000117 	ldw	fp,4(sp)
    2c08:	dc000017 	ldw	r16,0(sp)
    2c0c:	dec00304 	addi	sp,sp,12
    2c10:	f800283a 	ret

00002c14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    2c14:	defff904 	addi	sp,sp,-28
    2c18:	df000615 	stw	fp,24(sp)
    2c1c:	df000604 	addi	fp,sp,24
    2c20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c24:	0005303a 	rdctl	r2,status
    2c28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c2c:	e0fffe17 	ldw	r3,-8(fp)
    2c30:	00bfff84 	movi	r2,-2
    2c34:	1884703a 	and	r2,r3,r2
    2c38:	1001703a 	wrctl	status,r2
  
  return context;
    2c3c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    2c40:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2c44:	d0a00a17 	ldw	r2,-32728(gp)
    2c48:	10c000c4 	addi	r3,r2,3
    2c4c:	00bfff04 	movi	r2,-4
    2c50:	1884703a 	and	r2,r3,r2
    2c54:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2c58:	d0e00a17 	ldw	r3,-32728(gp)
    2c5c:	e0bfff17 	ldw	r2,-4(fp)
    2c60:	1887883a 	add	r3,r3,r2
    2c64:	008000b4 	movhi	r2,2
    2c68:	10a1a804 	addi	r2,r2,-31072
    2c6c:	10c0062e 	bgeu	r2,r3,2c88 <sbrk+0x74>
    2c70:	e0bffb17 	ldw	r2,-20(fp)
    2c74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c78:	e0bffa17 	ldw	r2,-24(fp)
    2c7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2c80:	00bfffc4 	movi	r2,-1
    2c84:	00000b06 	br	2cb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    2c88:	d0a00a17 	ldw	r2,-32728(gp)
    2c8c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    2c90:	d0e00a17 	ldw	r3,-32728(gp)
    2c94:	e0bfff17 	ldw	r2,-4(fp)
    2c98:	1885883a 	add	r2,r3,r2
    2c9c:	d0a00a15 	stw	r2,-32728(gp)
    2ca0:	e0bffb17 	ldw	r2,-20(fp)
    2ca4:	e0bffc15 	stw	r2,-16(fp)
    2ca8:	e0bffc17 	ldw	r2,-16(fp)
    2cac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    2cb0:	e0bffd17 	ldw	r2,-12(fp)
} 
    2cb4:	e037883a 	mov	sp,fp
    2cb8:	df000017 	ldw	fp,0(sp)
    2cbc:	dec00104 	addi	sp,sp,4
    2cc0:	f800283a 	ret

00002cc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2cc4:	defffe04 	addi	sp,sp,-8
    2cc8:	dfc00115 	stw	ra,4(sp)
    2ccc:	df000015 	stw	fp,0(sp)
    2cd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2cd4:	d0a00917 	ldw	r2,-32732(gp)
    2cd8:	10000326 	beq	r2,zero,2ce8 <alt_get_errno+0x24>
    2cdc:	d0a00917 	ldw	r2,-32732(gp)
    2ce0:	103ee83a 	callr	r2
    2ce4:	00000106 	br	2cec <alt_get_errno+0x28>
    2ce8:	d0a6f904 	addi	r2,gp,-25628
}
    2cec:	e037883a 	mov	sp,fp
    2cf0:	dfc00117 	ldw	ra,4(sp)
    2cf4:	df000017 	ldw	fp,0(sp)
    2cf8:	dec00204 	addi	sp,sp,8
    2cfc:	f800283a 	ret

00002d00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2d00:	defff904 	addi	sp,sp,-28
    2d04:	dfc00615 	stw	ra,24(sp)
    2d08:	df000515 	stw	fp,20(sp)
    2d0c:	df000504 	addi	fp,sp,20
    2d10:	e13ffd15 	stw	r4,-12(fp)
    2d14:	e17ffe15 	stw	r5,-8(fp)
    2d18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d1c:	e0bffd17 	ldw	r2,-12(fp)
    2d20:	10000816 	blt	r2,zero,2d44 <write+0x44>
    2d24:	01400304 	movi	r5,12
    2d28:	e13ffd17 	ldw	r4,-12(fp)
    2d2c:	000244c0 	call	244c <__mulsi3>
    2d30:	1007883a 	mov	r3,r2
    2d34:	00800074 	movhi	r2,1
    2d38:	10b6af04 	addi	r2,r2,-9540
    2d3c:	1885883a 	add	r2,r3,r2
    2d40:	00000106 	br	2d48 <write+0x48>
    2d44:	0005883a 	mov	r2,zero
    2d48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d4c:	e0bffb17 	ldw	r2,-20(fp)
    2d50:	10002126 	beq	r2,zero,2dd8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    2d54:	e0bffb17 	ldw	r2,-20(fp)
    2d58:	10800217 	ldw	r2,8(r2)
    2d5c:	108000cc 	andi	r2,r2,3
    2d60:	10001826 	beq	r2,zero,2dc4 <write+0xc4>
    2d64:	e0bffb17 	ldw	r2,-20(fp)
    2d68:	10800017 	ldw	r2,0(r2)
    2d6c:	10800617 	ldw	r2,24(r2)
    2d70:	10001426 	beq	r2,zero,2dc4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    2d74:	e0bffb17 	ldw	r2,-20(fp)
    2d78:	10800017 	ldw	r2,0(r2)
    2d7c:	10800617 	ldw	r2,24(r2)
    2d80:	e0ffff17 	ldw	r3,-4(fp)
    2d84:	180d883a 	mov	r6,r3
    2d88:	e17ffe17 	ldw	r5,-8(fp)
    2d8c:	e13ffb17 	ldw	r4,-20(fp)
    2d90:	103ee83a 	callr	r2
    2d94:	e0bffc15 	stw	r2,-16(fp)
    2d98:	e0bffc17 	ldw	r2,-16(fp)
    2d9c:	1000070e 	bge	r2,zero,2dbc <write+0xbc>
      {
        ALT_ERRNO = -rval;
    2da0:	0002cc40 	call	2cc4 <alt_get_errno>
    2da4:	1007883a 	mov	r3,r2
    2da8:	e0bffc17 	ldw	r2,-16(fp)
    2dac:	0085c83a 	sub	r2,zero,r2
    2db0:	18800015 	stw	r2,0(r3)
        return -1;
    2db4:	00bfffc4 	movi	r2,-1
    2db8:	00000c06 	br	2dec <write+0xec>
      }
      return rval;
    2dbc:	e0bffc17 	ldw	r2,-16(fp)
    2dc0:	00000a06 	br	2dec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    2dc4:	0002cc40 	call	2cc4 <alt_get_errno>
    2dc8:	1007883a 	mov	r3,r2
    2dcc:	00800344 	movi	r2,13
    2dd0:	18800015 	stw	r2,0(r3)
    2dd4:	00000406 	br	2de8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    2dd8:	0002cc40 	call	2cc4 <alt_get_errno>
    2ddc:	1007883a 	mov	r3,r2
    2de0:	00801444 	movi	r2,81
    2de4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    2de8:	00bfffc4 	movi	r2,-1
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    2e00:	deffdf04 	addi	sp,sp,-132
    2e04:	dfc02015 	stw	ra,128(sp)
    2e08:	df001f15 	stw	fp,124(sp)
    2e0c:	df001f04 	addi	fp,sp,124
    2e10:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    2e14:	e0bfe204 	addi	r2,fp,-120
    2e18:	100b883a 	mov	r5,r2
    2e1c:	01003fc4 	movi	r4,255
    2e20:	000a2640 	call	a264 <OSTaskQuery>
    2e24:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    2e28:	e0bffe83 	ldbu	r2,-6(fp)
    2e2c:	10803fcc 	andi	r2,r2,255
    2e30:	10001e1e 	bne	r2,zero,2eac <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    2e34:	e0bfee83 	ldbu	r2,-70(fp)
    2e38:	10803fcc 	andi	r2,r2,255
    2e3c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    2e40:	d0a6ff17 	ldw	r2,-25604(gp)
    2e44:	e0fffd04 	addi	r3,fp,-12
    2e48:	180b883a 	mov	r5,r3
    2e4c:	1009883a 	mov	r4,r2
    2e50:	0008a7c0 	call	8a7c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    2e54:	e0bffe43 	ldbu	r2,-7(fp)
    2e58:	10803fcc 	andi	r2,r2,255
    2e5c:	10000726 	beq	r2,zero,2e7c <__env_lock+0x7c>
    2e60:	d0a00b17 	ldw	r2,-32724(gp)
    2e64:	e0ffe117 	ldw	r3,-124(fp)
    2e68:	1880041e 	bne	r3,r2,2e7c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    2e6c:	d0a6fe17 	ldw	r2,-25608(gp)
    2e70:	10800044 	addi	r2,r2,1
    2e74:	d0a6fe15 	stw	r2,-25608(gp)
    2e78:	00000a06 	br	2ea4 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    2e7c:	d0a6ff17 	ldw	r2,-25604(gp)
    2e80:	e0fffe84 	addi	r3,fp,-6
    2e84:	180d883a 	mov	r6,r3
    2e88:	000b883a 	mov	r5,zero
    2e8c:	1009883a 	mov	r4,r2
    2e90:	00085f40 	call	85f4 <OSSemPend>
    locks  = 1;
    2e94:	00800044 	movi	r2,1
    2e98:	d0a6fe15 	stw	r2,-25608(gp)
    lockid = id;
    2e9c:	e0bfe117 	ldw	r2,-124(fp)
    2ea0:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    2ea4:	0001883a 	nop
    2ea8:	00000106 	br	2eb0 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    2eac:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    2eb0:	e037883a 	mov	sp,fp
    2eb4:	dfc00117 	ldw	ra,4(sp)
    2eb8:	df000017 	ldw	fp,0(sp)
    2ebc:	dec00204 	addi	sp,sp,8
    2ec0:	f800283a 	ret

00002ec4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    2ec4:	defffd04 	addi	sp,sp,-12
    2ec8:	dfc00215 	stw	ra,8(sp)
    2ecc:	df000115 	stw	fp,4(sp)
    2ed0:	df000104 	addi	fp,sp,4
    2ed4:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    2ed8:	d0a6fe17 	ldw	r2,-25608(gp)
    2edc:	10000b26 	beq	r2,zero,2f0c <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    2ee0:	d0a6fe17 	ldw	r2,-25608(gp)
    2ee4:	10bfffc4 	addi	r2,r2,-1
    2ee8:	d0a6fe15 	stw	r2,-25608(gp)
    2eec:	d0a6fe17 	ldw	r2,-25608(gp)
    2ef0:	1000071e 	bne	r2,zero,2f10 <__env_unlock+0x4c>
  {
    lockid = -1;
    2ef4:	00bfffc4 	movi	r2,-1
    2ef8:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    2efc:	d0a6ff17 	ldw	r2,-25604(gp)
    2f00:	1009883a 	mov	r4,r2
    2f04:	000896c0 	call	896c <OSSemPost>
    2f08:	00000106 	br	2f10 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    2f0c:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    2f10:	e037883a 	mov	sp,fp
    2f14:	dfc00117 	ldw	ra,4(sp)
    2f18:	df000017 	ldw	fp,0(sp)
    2f1c:	dec00204 	addi	sp,sp,8
    2f20:	f800283a 	ret

00002f24 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    2f24:	deffdb04 	addi	sp,sp,-148
    2f28:	dfc02415 	stw	ra,144(sp)
    2f2c:	df002315 	stw	fp,140(sp)
    2f30:	df002304 	addi	fp,sp,140
    2f34:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2f38:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    2f3c:	d0a70243 	ldbu	r2,-25591(gp)
    2f40:	10803fcc 	andi	r2,r2,255
    2f44:	10800060 	cmpeqi	r2,r2,1
    2f48:	10003626 	beq	r2,zero,3024 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    2f4c:	e0bfe204 	addi	r2,fp,-120
    2f50:	100b883a 	mov	r5,r2
    2f54:	01003fc4 	movi	r4,255
    2f58:	000a2640 	call	a264 <OSTaskQuery>
    2f5c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    2f60:	e0bffe83 	ldbu	r2,-6(fp)
    2f64:	10803fcc 	andi	r2,r2,255
    2f68:	1000301e 	bne	r2,zero,302c <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    2f6c:	e0bfee83 	ldbu	r2,-70(fp)
    2f70:	10803fcc 	andi	r2,r2,255
    2f74:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    2f78:	d0a70117 	ldw	r2,-25596(gp)
    2f7c:	e0fffd04 	addi	r3,fp,-12
    2f80:	180b883a 	mov	r5,r3
    2f84:	1009883a 	mov	r4,r2
    2f88:	0008a7c0 	call	8a7c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f8c:	0005303a 	rdctl	r2,status
    2f90:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f94:	e0ffe117 	ldw	r3,-124(fp)
    2f98:	00bfff84 	movi	r2,-2
    2f9c:	1884703a 	and	r2,r3,r2
    2fa0:	1001703a 	wrctl	status,r2
  
  return context;
    2fa4:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    2fa8:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    2fac:	e0bffd0b 	ldhu	r2,-12(fp)
    2fb0:	10bfffcc 	andi	r2,r2,65535
    2fb4:	10000b1e 	bne	r2,zero,2fe4 <__malloc_lock+0xc0>
    2fb8:	d0a00c17 	ldw	r2,-32720(gp)
    2fbc:	e0ffde17 	ldw	r3,-136(fp)
    2fc0:	1880081e 	bne	r3,r2,2fe4 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    2fc4:	d0a70017 	ldw	r2,-25600(gp)
    2fc8:	10800044 	addi	r2,r2,1
    2fcc:	d0a70015 	stw	r2,-25600(gp)
    2fd0:	e0bfdd17 	ldw	r2,-140(fp)
    2fd4:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2fd8:	e0bfdf17 	ldw	r2,-132(fp)
    2fdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    2fe0:	00000e06 	br	301c <__malloc_lock+0xf8>
    2fe4:	e0bfdd17 	ldw	r2,-140(fp)
    2fe8:	e0bfe015 	stw	r2,-128(fp)
    2fec:	e0bfe017 	ldw	r2,-128(fp)
    2ff0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    2ff4:	d0a70117 	ldw	r2,-25596(gp)
    2ff8:	e0fffe84 	addi	r3,fp,-6
    2ffc:	180d883a 	mov	r6,r3
    3000:	000b883a 	mov	r5,zero
    3004:	1009883a 	mov	r4,r2
    3008:	00085f40 	call	85f4 <OSSemPend>
    locks  = 1;
    300c:	00800044 	movi	r2,1
    3010:	d0a70015 	stw	r2,-25600(gp)
    lockid = id;
    3014:	e0bfde17 	ldw	r2,-136(fp)
    3018:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    301c:	0001883a 	nop
    3020:	00000306 	br	3030 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    3024:	0001883a 	nop
    3028:	00000106 	br	3030 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    302c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    3030:	e037883a 	mov	sp,fp
    3034:	dfc00117 	ldw	ra,4(sp)
    3038:	df000017 	ldw	fp,0(sp)
    303c:	dec00204 	addi	sp,sp,8
    3040:	f800283a 	ret

00003044 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3044:	defff804 	addi	sp,sp,-32
    3048:	dfc00715 	stw	ra,28(sp)
    304c:	df000615 	stw	fp,24(sp)
    3050:	df000604 	addi	fp,sp,24
    3054:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3058:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    305c:	d0a70243 	ldbu	r2,-25591(gp)
    3060:	10803fcc 	andi	r2,r2,255
    3064:	10800060 	cmpeqi	r2,r2,1
    3068:	10002326 	beq	r2,zero,30f8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    306c:	0005303a 	rdctl	r2,status
    3070:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3074:	e0fffe17 	ldw	r3,-8(fp)
    3078:	00bfff84 	movi	r2,-2
    307c:	1884703a 	and	r2,r3,r2
    3080:	1001703a 	wrctl	status,r2
  
  return context;
    3084:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3088:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    308c:	d0a70017 	ldw	r2,-25600(gp)
    3090:	1000051e 	bne	r2,zero,30a8 <__malloc_unlock+0x64>
    3094:	e0bffa17 	ldw	r2,-24(fp)
    3098:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    309c:	e0bffb17 	ldw	r2,-20(fp)
    30a0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    30a4:	00001506 	br	30fc <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    30a8:	d0a70017 	ldw	r2,-25600(gp)
    30ac:	10bfffc4 	addi	r2,r2,-1
    30b0:	d0a70015 	stw	r2,-25600(gp)
    30b4:	d0a70017 	ldw	r2,-25600(gp)
    30b8:	10000a1e 	bne	r2,zero,30e4 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    30bc:	00bfffc4 	movi	r2,-1
    30c0:	d0a00c15 	stw	r2,-32720(gp)
    30c4:	e0bffa17 	ldw	r2,-24(fp)
    30c8:	e0bffc15 	stw	r2,-16(fp)
    30cc:	e0bffc17 	ldw	r2,-16(fp)
    30d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    30d4:	d0a70117 	ldw	r2,-25596(gp)
    30d8:	1009883a 	mov	r4,r2
    30dc:	000896c0 	call	896c <OSSemPost>
    30e0:	00000606 	br	30fc <__malloc_unlock+0xb8>
    30e4:	e0bffa17 	ldw	r2,-24(fp)
    30e8:	e0bffd15 	stw	r2,-12(fp)
    30ec:	e0bffd17 	ldw	r2,-12(fp)
    30f0:	1001703a 	wrctl	status,r2
    30f4:	00000106 	br	30fc <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    30f8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    30fc:	e037883a 	mov	sp,fp
    3100:	dfc00117 	ldw	ra,4(sp)
    3104:	df000017 	ldw	fp,0(sp)
    3108:	dec00204 	addi	sp,sp,8
    310c:	f800283a 	ret

00003110 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3110:	defff704 	addi	sp,sp,-36
    3114:	dfc00815 	stw	ra,32(sp)
    3118:	df000715 	stw	fp,28(sp)
    311c:	df000704 	addi	fp,sp,28
    3120:	e13ffd15 	stw	r4,-12(fp)
    3124:	e17ffe15 	stw	r5,-8(fp)
    3128:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    312c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3130:	e0bfff17 	ldw	r2,-4(fp)
    3134:	1000021e 	bne	r2,zero,3140 <OSEventNameGet+0x30>
        return (0);
    3138:	0005883a 	mov	r2,zero
    313c:	00003706 	br	321c <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3140:	e0bffd17 	ldw	r2,-12(fp)
    3144:	1000051e 	bne	r2,zero,315c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3148:	e0bfff17 	ldw	r2,-4(fp)
    314c:	00c00104 	movi	r3,4
    3150:	10c00005 	stb	r3,0(r2)
        return (0);
    3154:	0005883a 	mov	r2,zero
    3158:	00003006 	br	321c <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    315c:	e0bffe17 	ldw	r2,-8(fp)
    3160:	1000051e 	bne	r2,zero,3178 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3164:	e0bfff17 	ldw	r2,-4(fp)
    3168:	00c00304 	movi	r3,12
    316c:	10c00005 	stb	r3,0(r2)
        return (0);
    3170:	0005883a 	mov	r2,zero
    3174:	00002906 	br	321c <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3178:	d0a71003 	ldbu	r2,-25536(gp)
    317c:	10803fcc 	andi	r2,r2,255
    3180:	10000526 	beq	r2,zero,3198 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3184:	e0bfff17 	ldw	r2,-4(fp)
    3188:	00c00444 	movi	r3,17
    318c:	10c00005 	stb	r3,0(r2)
        return (0);
    3190:	0005883a 	mov	r2,zero
    3194:	00002106 	br	321c <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    3198:	e0bffd17 	ldw	r2,-12(fp)
    319c:	10800003 	ldbu	r2,0(r2)
    31a0:	10803fcc 	andi	r2,r2,255
    31a4:	10bfffc4 	addi	r2,r2,-1
    31a8:	10800128 	cmpgeui	r2,r2,4
    31ac:	10000526 	beq	r2,zero,31c4 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    31b0:	e0bfff17 	ldw	r2,-4(fp)
    31b4:	00c00044 	movi	r3,1
    31b8:	10c00005 	stb	r3,0(r2)
             return (0);
    31bc:	0005883a 	mov	r2,zero
    31c0:	00001606 	br	321c <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    31c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    31c8:	0005303a 	rdctl	r2,status
    31cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    31d0:	e0fffb17 	ldw	r3,-20(fp)
    31d4:	00bfff84 	movi	r2,-2
    31d8:	1884703a 	and	r2,r3,r2
    31dc:	1001703a 	wrctl	status,r2
  
  return context;
    31e0:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    31e4:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    31e8:	e0bffd17 	ldw	r2,-12(fp)
    31ec:	10800384 	addi	r2,r2,14
    31f0:	100b883a 	mov	r5,r2
    31f4:	e13ffe17 	ldw	r4,-8(fp)
    31f8:	0004b940 	call	4b94 <OS_StrCopy>
    31fc:	e0bffa05 	stb	r2,-24(fp)
    3200:	e0bff917 	ldw	r2,-28(fp)
    3204:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3208:	e0bffc17 	ldw	r2,-16(fp)
    320c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3210:	e0bfff17 	ldw	r2,-4(fp)
    3214:	10000005 	stb	zero,0(r2)
    return (len);
    3218:	e0bffa03 	ldbu	r2,-24(fp)
}
    321c:	e037883a 	mov	sp,fp
    3220:	dfc00117 	ldw	ra,4(sp)
    3224:	df000017 	ldw	fp,0(sp)
    3228:	dec00204 	addi	sp,sp,8
    322c:	f800283a 	ret

00003230 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3230:	defff604 	addi	sp,sp,-40
    3234:	dfc00915 	stw	ra,36(sp)
    3238:	df000815 	stw	fp,32(sp)
    323c:	df000804 	addi	fp,sp,32
    3240:	e13ffd15 	stw	r4,-12(fp)
    3244:	e17ffe15 	stw	r5,-8(fp)
    3248:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    324c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3250:	e0bfff17 	ldw	r2,-4(fp)
    3254:	10004026 	beq	r2,zero,3358 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3258:	e0bffd17 	ldw	r2,-12(fp)
    325c:	1000041e 	bne	r2,zero,3270 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    3260:	e0bfff17 	ldw	r2,-4(fp)
    3264:	00c00104 	movi	r3,4
    3268:	10c00005 	stb	r3,0(r2)
        return;
    326c:	00003b06 	br	335c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3270:	e0bffe17 	ldw	r2,-8(fp)
    3274:	1000041e 	bne	r2,zero,3288 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    3278:	e0bfff17 	ldw	r2,-4(fp)
    327c:	00c00304 	movi	r3,12
    3280:	10c00005 	stb	r3,0(r2)
        return;
    3284:	00003506 	br	335c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3288:	d0a71003 	ldbu	r2,-25536(gp)
    328c:	10803fcc 	andi	r2,r2,255
    3290:	10000426 	beq	r2,zero,32a4 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3294:	e0bfff17 	ldw	r2,-4(fp)
    3298:	00c00484 	movi	r3,18
    329c:	10c00005 	stb	r3,0(r2)
        return;
    32a0:	00002e06 	br	335c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    32a4:	e0bffd17 	ldw	r2,-12(fp)
    32a8:	10800003 	ldbu	r2,0(r2)
    32ac:	10803fcc 	andi	r2,r2,255
    32b0:	10bfffc4 	addi	r2,r2,-1
    32b4:	10800128 	cmpgeui	r2,r2,4
    32b8:	10000426 	beq	r2,zero,32cc <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    32bc:	e0bfff17 	ldw	r2,-4(fp)
    32c0:	00c00044 	movi	r3,1
    32c4:	10c00005 	stb	r3,0(r2)
             return;
    32c8:	00002406 	br	335c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    32cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    32d0:	0005303a 	rdctl	r2,status
    32d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32d8:	e0fffc17 	ldw	r3,-16(fp)
    32dc:	00bfff84 	movi	r2,-2
    32e0:	1884703a 	and	r2,r3,r2
    32e4:	1001703a 	wrctl	status,r2
  
  return context;
    32e8:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    32ec:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    32f0:	e13ffe17 	ldw	r4,-8(fp)
    32f4:	0004c080 	call	4c08 <OS_StrLen>
    32f8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    32fc:	e0bffa03 	ldbu	r2,-24(fp)
    3300:	10800830 	cmpltui	r2,r2,32
    3304:	1000081e 	bne	r2,zero,3328 <OSEventNameSet+0xf8>
    3308:	e0bff817 	ldw	r2,-32(fp)
    330c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3310:	e0bff917 	ldw	r2,-28(fp)
    3314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3318:	e0bfff17 	ldw	r2,-4(fp)
    331c:	00c002c4 	movi	r3,11
    3320:	10c00005 	stb	r3,0(r2)
        return;
    3324:	00000d06 	br	335c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3328:	e0bffd17 	ldw	r2,-12(fp)
    332c:	10800384 	addi	r2,r2,14
    3330:	e17ffe17 	ldw	r5,-8(fp)
    3334:	1009883a 	mov	r4,r2
    3338:	0004b940 	call	4b94 <OS_StrCopy>
    333c:	e0bff817 	ldw	r2,-32(fp)
    3340:	e0bffb15 	stw	r2,-20(fp)
    3344:	e0bffb17 	ldw	r2,-20(fp)
    3348:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    334c:	e0bfff17 	ldw	r2,-4(fp)
    3350:	10000005 	stb	zero,0(r2)
    3354:	00000106 	br	335c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    3358:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    335c:	e037883a 	mov	sp,fp
    3360:	dfc00117 	ldw	ra,4(sp)
    3364:	df000017 	ldw	fp,0(sp)
    3368:	dec00204 	addi	sp,sp,8
    336c:	f800283a 	ret

00003370 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    3370:	deffed04 	addi	sp,sp,-76
    3374:	dfc01215 	stw	ra,72(sp)
    3378:	df001115 	stw	fp,68(sp)
    337c:	df001104 	addi	fp,sp,68
    3380:	e13ffc15 	stw	r4,-16(fp)
    3384:	e17ffd15 	stw	r5,-12(fp)
    3388:	e1bffe15 	stw	r6,-8(fp)
    338c:	3805883a 	mov	r2,r7
    3390:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    3394:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    3398:	e0800217 	ldw	r2,8(fp)
    339c:	1000021e 	bne	r2,zero,33a8 <OSEventPendMulti+0x38>
        return (0);
    33a0:	0005883a 	mov	r2,zero
    33a4:	00017106 	br	396c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    33a8:	e0bffc17 	ldw	r2,-16(fp)
    33ac:	1000051e 	bne	r2,zero,33c4 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    33b0:	e0800217 	ldw	r2,8(fp)
    33b4:	00c00104 	movi	r3,4
    33b8:	10c00005 	stb	r3,0(r2)
        return (0);
    33bc:	0005883a 	mov	r2,zero
    33c0:	00016a06 	br	396c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    33c4:	e0bffd17 	ldw	r2,-12(fp)
    33c8:	1000051e 	bne	r2,zero,33e0 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    33cc:	e0800217 	ldw	r2,8(fp)
    33d0:	00c00104 	movi	r3,4
    33d4:	10c00005 	stb	r3,0(r2)
        return (0);
    33d8:	0005883a 	mov	r2,zero
    33dc:	00016306 	br	396c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    33e0:	e0bffe17 	ldw	r2,-8(fp)
    33e4:	1000051e 	bne	r2,zero,33fc <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    33e8:	e0800217 	ldw	r2,8(fp)
    33ec:	00c00104 	movi	r3,4
    33f0:	10c00005 	stb	r3,0(r2)
        return (0);
    33f4:	0005883a 	mov	r2,zero
    33f8:	00015c06 	br	396c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    3404:	e0bffc17 	ldw	r2,-16(fp)
    3408:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    340c:	e0bfef17 	ldw	r2,-68(fp)
    3410:	10800017 	ldw	r2,0(r2)
    3414:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    3418:	00001906 	br	3480 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    341c:	e0bff017 	ldw	r2,-64(fp)
    3420:	10800003 	ldbu	r2,0(r2)
    3424:	10803fcc 	andi	r2,r2,255
    3428:	10c000a0 	cmpeqi	r3,r2,2
    342c:	1800091e 	bne	r3,zero,3454 <OSEventPendMulti+0xe4>
    3430:	10c000e0 	cmpeqi	r3,r2,3
    3434:	1800091e 	bne	r3,zero,345c <OSEventPendMulti+0xec>
    3438:	10800060 	cmpeqi	r2,r2,1
    343c:	1000091e 	bne	r2,zero,3464 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    3440:	e0800217 	ldw	r2,8(fp)
    3444:	00c00044 	movi	r3,1
    3448:	10c00005 	stb	r3,0(r2)
                 return (0);
    344c:	0005883a 	mov	r2,zero
    3450:	00014606 	br	396c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    3454:	0001883a 	nop
    3458:	00000306 	br	3468 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    345c:	0001883a 	nop
    3460:	00000106 	br	3468 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    3464:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    3468:	e0bfef17 	ldw	r2,-68(fp)
    346c:	10800104 	addi	r2,r2,4
    3470:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3474:	e0bfef17 	ldw	r2,-68(fp)
    3478:	10800017 	ldw	r2,0(r2)
    347c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    3480:	e0bff017 	ldw	r2,-64(fp)
    3484:	103fe51e 	bne	r2,zero,341c <__alt_data_end+0xfffead7c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    3488:	d0a71003 	ldbu	r2,-25536(gp)
    348c:	10803fcc 	andi	r2,r2,255
    3490:	10000526 	beq	r2,zero,34a8 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    3494:	e0800217 	ldw	r2,8(fp)
    3498:	00c00084 	movi	r3,2
    349c:	10c00005 	stb	r3,0(r2)
        return (0);
    34a0:	0005883a 	mov	r2,zero
    34a4:	00013106 	br	396c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    34a8:	d0a70203 	ldbu	r2,-25592(gp)
    34ac:	10803fcc 	andi	r2,r2,255
    34b0:	10000526 	beq	r2,zero,34c8 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    34b4:	e0800217 	ldw	r2,8(fp)
    34b8:	00c00344 	movi	r3,13
    34bc:	10c00005 	stb	r3,0(r2)
        return (0);
    34c0:	0005883a 	mov	r2,zero
    34c4:	00012906 	br	396c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    34c8:	0005303a 	rdctl	r2,status
    34cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34d0:	e0fffb17 	ldw	r3,-20(fp)
    34d4:	00bfff84 	movi	r2,-2
    34d8:	1884703a 	and	r2,r3,r2
    34dc:	1001703a 	wrctl	status,r2
  
  return context;
    34e0:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    34e4:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    34e8:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    34ec:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    34f0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    34f4:	e0bffc17 	ldw	r2,-16(fp)
    34f8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    34fc:	e0bfef17 	ldw	r2,-68(fp)
    3500:	10800017 	ldw	r2,0(r2)
    3504:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3508:	00008106 	br	3710 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    350c:	e0bff017 	ldw	r2,-64(fp)
    3510:	10800003 	ldbu	r2,0(r2)
    3514:	10803fcc 	andi	r2,r2,255
    3518:	10c000a0 	cmpeqi	r3,r2,2
    351c:	18003c1e 	bne	r3,zero,3610 <OSEventPendMulti+0x2a0>
    3520:	10c000e0 	cmpeqi	r3,r2,3
    3524:	1800031e 	bne	r3,zero,3534 <OSEventPendMulti+0x1c4>
    3528:	10800060 	cmpeqi	r2,r2,1
    352c:	10001e1e 	bne	r2,zero,35a8 <OSEventPendMulti+0x238>
    3530:	00006606 	br	36cc <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    3534:	e0bff017 	ldw	r2,-64(fp)
    3538:	1080020b 	ldhu	r2,8(r2)
    353c:	10bfffcc 	andi	r2,r2,65535
    3540:	10001526 	beq	r2,zero,3598 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    3544:	e0bff017 	ldw	r2,-64(fp)
    3548:	1080020b 	ldhu	r2,8(r2)
    354c:	10bfffc4 	addi	r2,r2,-1
    3550:	1007883a 	mov	r3,r2
    3554:	e0bff017 	ldw	r2,-64(fp)
    3558:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    355c:	e0bffd17 	ldw	r2,-12(fp)
    3560:	10c00104 	addi	r3,r2,4
    3564:	e0fffd15 	stw	r3,-12(fp)
    3568:	e0fff017 	ldw	r3,-64(fp)
    356c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    3570:	00800044 	movi	r2,1
    3574:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    3578:	e0bffe17 	ldw	r2,-8(fp)
    357c:	10c00104 	addi	r3,r2,4
    3580:	e0fffe15 	stw	r3,-8(fp)
    3584:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    3588:	e0bff18b 	ldhu	r2,-58(fp)
    358c:	10800044 	addi	r2,r2,1
    3590:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    3594:	00005806 	br	36f8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    3598:	e0bff203 	ldbu	r2,-56(fp)
    359c:	10800054 	ori	r2,r2,1
    35a0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    35a4:	00005406 	br	36f8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    35a8:	e0bff017 	ldw	r2,-64(fp)
    35ac:	10800117 	ldw	r2,4(r2)
    35b0:	10001326 	beq	r2,zero,3600 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    35b4:	e0bffe17 	ldw	r2,-8(fp)
    35b8:	10c00104 	addi	r3,r2,4
    35bc:	e0fffe15 	stw	r3,-8(fp)
    35c0:	e0fff017 	ldw	r3,-64(fp)
    35c4:	18c00117 	ldw	r3,4(r3)
    35c8:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    35cc:	e0bff017 	ldw	r2,-64(fp)
    35d0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    35d4:	e0bffd17 	ldw	r2,-12(fp)
    35d8:	10c00104 	addi	r3,r2,4
    35dc:	e0fffd15 	stw	r3,-12(fp)
    35e0:	e0fff017 	ldw	r3,-64(fp)
    35e4:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    35e8:	00800044 	movi	r2,1
    35ec:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    35f0:	e0bff18b 	ldhu	r2,-58(fp)
    35f4:	10800044 	addi	r2,r2,1
    35f8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    35fc:	00003e06 	br	36f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    3600:	e0bff203 	ldbu	r2,-56(fp)
    3604:	10800094 	ori	r2,r2,2
    3608:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    360c:	00003a06 	br	36f8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    3610:	e0bff017 	ldw	r2,-64(fp)
    3614:	10800117 	ldw	r2,4(r2)
    3618:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    361c:	e0bff517 	ldw	r2,-44(fp)
    3620:	1080058b 	ldhu	r2,22(r2)
    3624:	10bfffcc 	andi	r2,r2,65535
    3628:	10002426 	beq	r2,zero,36bc <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    362c:	e0bffe17 	ldw	r2,-8(fp)
    3630:	10c00104 	addi	r3,r2,4
    3634:	e0fffe15 	stw	r3,-8(fp)
    3638:	e0fff517 	ldw	r3,-44(fp)
    363c:	18c00417 	ldw	r3,16(r3)
    3640:	19400104 	addi	r5,r3,4
    3644:	e13ff517 	ldw	r4,-44(fp)
    3648:	21400415 	stw	r5,16(r4)
    364c:	18c00017 	ldw	r3,0(r3)
    3650:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    3654:	e0bff517 	ldw	r2,-44(fp)
    3658:	10c00417 	ldw	r3,16(r2)
    365c:	e0bff517 	ldw	r2,-44(fp)
    3660:	10800217 	ldw	r2,8(r2)
    3664:	1880041e 	bne	r3,r2,3678 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    3668:	e0bff517 	ldw	r2,-44(fp)
    366c:	10c00117 	ldw	r3,4(r2)
    3670:	e0bff517 	ldw	r2,-44(fp)
    3674:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    3678:	e0bff517 	ldw	r2,-44(fp)
    367c:	1080058b 	ldhu	r2,22(r2)
    3680:	10bfffc4 	addi	r2,r2,-1
    3684:	1007883a 	mov	r3,r2
    3688:	e0bff517 	ldw	r2,-44(fp)
    368c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    3690:	e0bffd17 	ldw	r2,-12(fp)
    3694:	10c00104 	addi	r3,r2,4
    3698:	e0fffd15 	stw	r3,-12(fp)
    369c:	e0fff017 	ldw	r3,-64(fp)
    36a0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    36a4:	00800044 	movi	r2,1
    36a8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    36ac:	e0bff18b 	ldhu	r2,-58(fp)
    36b0:	10800044 	addi	r2,r2,1
    36b4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    36b8:	00000f06 	br	36f8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    36bc:	e0bff203 	ldbu	r2,-56(fp)
    36c0:	10800114 	ori	r2,r2,4
    36c4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    36c8:	00000b06 	br	36f8 <OSEventPendMulti+0x388>
    36cc:	e0bff317 	ldw	r2,-52(fp)
    36d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    36d4:	e0bff417 	ldw	r2,-48(fp)
    36d8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    36dc:	e0bffd17 	ldw	r2,-12(fp)
    36e0:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    36e4:	e0800217 	ldw	r2,8(fp)
    36e8:	00c00044 	movi	r3,1
    36ec:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    36f0:	e0bff18b 	ldhu	r2,-58(fp)
    36f4:	00009d06 	br	396c <OSEventPendMulti+0x5fc>
        }
        pevents++;
    36f8:	e0bfef17 	ldw	r2,-68(fp)
    36fc:	10800104 	addi	r2,r2,4
    3700:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3704:	e0bfef17 	ldw	r2,-68(fp)
    3708:	10800017 	ldw	r2,0(r2)
    370c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3710:	e0bff017 	ldw	r2,-64(fp)
    3714:	103f7d1e 	bne	r2,zero,350c <__alt_data_end+0xfffeae6c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    3718:	e0bff103 	ldbu	r2,-60(fp)
    371c:	10800058 	cmpnei	r2,r2,1
    3720:	10000a1e 	bne	r2,zero,374c <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    3724:	e0bffd17 	ldw	r2,-12(fp)
    3728:	10000015 	stw	zero,0(r2)
    372c:	e0bff317 	ldw	r2,-52(fp)
    3730:	e0bff615 	stw	r2,-40(fp)
    3734:	e0bff617 	ldw	r2,-40(fp)
    3738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    373c:	e0800217 	ldw	r2,8(fp)
    3740:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    3744:	e0bff18b 	ldhu	r2,-58(fp)
    3748:	00008806 	br	396c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    374c:	d0a71117 	ldw	r2,-25532(gp)
    3750:	d0e71117 	ldw	r3,-25532(gp)
    3754:	19000c03 	ldbu	r4,48(r3)
    3758:	e0fff203 	ldbu	r3,-56(fp)
    375c:	20c6b03a 	or	r3,r4,r3
    3760:	1809883a 	mov	r4,r3
    3764:	00ffe004 	movi	r3,-128
    3768:	20c6b03a 	or	r3,r4,r3
    376c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    3770:	d0a71117 	ldw	r2,-25532(gp)
    3774:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    3778:	d0a71117 	ldw	r2,-25532(gp)
    377c:	e0ffff0b 	ldhu	r3,-4(fp)
    3780:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    3784:	e13ffc17 	ldw	r4,-16(fp)
    3788:	00042ac0 	call	42ac <OS_EventTaskWaitMulti>
    378c:	e0bff317 	ldw	r2,-52(fp)
    3790:	e0bff915 	stw	r2,-28(fp)
    3794:	e0bff917 	ldw	r2,-28(fp)
    3798:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    379c:	0004a500 	call	4a50 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37a0:	0005303a 	rdctl	r2,status
    37a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37a8:	e0fff717 	ldw	r3,-36(fp)
    37ac:	00bfff84 	movi	r2,-2
    37b0:	1884703a 	and	r2,r3,r2
    37b4:	1001703a 	wrctl	status,r2
  
  return context;
    37b8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    37bc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    37c0:	d0a71117 	ldw	r2,-25532(gp)
    37c4:	10800c43 	ldbu	r2,49(r2)
    37c8:	10803fcc 	andi	r2,r2,255
    37cc:	10000226 	beq	r2,zero,37d8 <OSEventPendMulti+0x468>
    37d0:	108000a0 	cmpeqi	r2,r2,2
    37d4:	10001826 	beq	r2,zero,3838 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    37d8:	d0a71117 	ldw	r2,-25532(gp)
    37dc:	10800717 	ldw	r2,28(r2)
    37e0:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    37e4:	e0bff017 	ldw	r2,-64(fp)
    37e8:	10000b26 	beq	r2,zero,3818 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    37ec:	e0bffd17 	ldw	r2,-12(fp)
    37f0:	10c00104 	addi	r3,r2,4
    37f4:	e0fffd15 	stw	r3,-12(fp)
    37f8:	e0fff017 	ldw	r3,-64(fp)
    37fc:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    3800:	e0bffd17 	ldw	r2,-12(fp)
    3804:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    3808:	e0bff18b 	ldhu	r2,-58(fp)
    380c:	10800044 	addi	r2,r2,1
    3810:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    3814:	00000d06 	br	384c <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    3818:	d0a71117 	ldw	r2,-25532(gp)
    381c:	00c00044 	movi	r3,1
    3820:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3824:	d0a71117 	ldw	r2,-25532(gp)
    3828:	e17ffc17 	ldw	r5,-16(fp)
    382c:	1009883a 	mov	r4,r2
    3830:	00044b40 	call	44b4 <OS_EventTaskRemoveMulti>
             }
			 break;
    3834:	00000506 	br	384c <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3838:	d0a71117 	ldw	r2,-25532(gp)
    383c:	e17ffc17 	ldw	r5,-16(fp)
    3840:	1009883a 	mov	r4,r2
    3844:	00044b40 	call	44b4 <OS_EventTaskRemoveMulti>
             break;
    3848:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    384c:	d0a71117 	ldw	r2,-25532(gp)
    3850:	10800c43 	ldbu	r2,49(r2)
    3854:	10803fcc 	andi	r2,r2,255
    3858:	10000326 	beq	r2,zero,3868 <OSEventPendMulti+0x4f8>
    385c:	108000a0 	cmpeqi	r2,r2,2
    3860:	1000231e 	bne	r2,zero,38f0 <OSEventPendMulti+0x580>
    3864:	00002a06 	br	3910 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    3868:	e0bff017 	ldw	r2,-64(fp)
    386c:	10800003 	ldbu	r2,0(r2)
    3870:	10803fcc 	andi	r2,r2,255
    3874:	0080100e 	bge	zero,r2,38b8 <OSEventPendMulti+0x548>
    3878:	10c000d0 	cmplti	r3,r2,3
    387c:	1800071e 	bne	r3,zero,389c <OSEventPendMulti+0x52c>
    3880:	108000e0 	cmpeqi	r2,r2,3
    3884:	10000c26 	beq	r2,zero,38b8 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    3888:	e0bffe17 	ldw	r2,-8(fp)
    388c:	10c00104 	addi	r3,r2,4
    3890:	e0fffe15 	stw	r3,-8(fp)
    3894:	10000015 	stw	zero,0(r2)
                      break;
    3898:	00001206 	br	38e4 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    389c:	e0bffe17 	ldw	r2,-8(fp)
    38a0:	10c00104 	addi	r3,r2,4
    38a4:	e0fffe15 	stw	r3,-8(fp)
    38a8:	d0e71117 	ldw	r3,-25532(gp)
    38ac:	18c00917 	ldw	r3,36(r3)
    38b0:	10c00015 	stw	r3,0(r2)
                      break;
    38b4:	00000b06 	br	38e4 <OSEventPendMulti+0x574>
    38b8:	e0bff317 	ldw	r2,-52(fp)
    38bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38c0:	e0bff817 	ldw	r2,-32(fp)
    38c4:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    38c8:	e0bffd17 	ldw	r2,-12(fp)
    38cc:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    38d0:	e0800217 	ldw	r2,8(fp)
    38d4:	00c00044 	movi	r3,1
    38d8:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    38dc:	e0bff18b 	ldhu	r2,-58(fp)
    38e0:	00002206 	br	396c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    38e4:	e0800217 	ldw	r2,8(fp)
    38e8:	10000005 	stb	zero,0(r2)
             break;
    38ec:	00001006 	br	3930 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    38f0:	e0bffe17 	ldw	r2,-8(fp)
    38f4:	10c00104 	addi	r3,r2,4
    38f8:	e0fffe15 	stw	r3,-8(fp)
    38fc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    3900:	e0800217 	ldw	r2,8(fp)
    3904:	00c00384 	movi	r3,14
    3908:	10c00005 	stb	r3,0(r2)
             break;
    390c:	00000806 	br	3930 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    3910:	e0bffe17 	ldw	r2,-8(fp)
    3914:	10c00104 	addi	r3,r2,4
    3918:	e0fffe15 	stw	r3,-8(fp)
    391c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    3920:	e0800217 	ldw	r2,8(fp)
    3924:	00c00284 	movi	r3,10
    3928:	10c00005 	stb	r3,0(r2)
             break;
    392c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    3930:	d0a71117 	ldw	r2,-25532(gp)
    3934:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    3938:	d0a71117 	ldw	r2,-25532(gp)
    393c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    3940:	d0a71117 	ldw	r2,-25532(gp)
    3944:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    3948:	d0a71117 	ldw	r2,-25532(gp)
    394c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    3950:	d0a71117 	ldw	r2,-25532(gp)
    3954:	10000915 	stw	zero,36(r2)
    3958:	e0bff317 	ldw	r2,-52(fp)
    395c:	e0bffa15 	stw	r2,-24(fp)
    3960:	e0bffa17 	ldw	r2,-24(fp)
    3964:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    3968:	e0bff18b 	ldhu	r2,-58(fp)
}
    396c:	e037883a 	mov	sp,fp
    3970:	dfc00117 	ldw	ra,4(sp)
    3974:	df000017 	ldw	fp,0(sp)
    3978:	dec00204 	addi	sp,sp,8
    397c:	f800283a 	ret

00003980 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    3980:	defffe04 	addi	sp,sp,-8
    3984:	dfc00115 	stw	ra,4(sp)
    3988:	df000015 	stw	fp,0(sp)
    398c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    3990:	000c62c0 	call	c62c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    3994:	00046fc0 	call	46fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    3998:	00047440 	call	4744 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    399c:	00048b00 	call	48b0 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    39a0:	000461c0 	call	461c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    39a4:	00067500 	call	6750 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    39a8:	00070500 	call	7050 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    39ac:	00081840 	call	8184 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    39b0:	00047b00 	call	47b0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    39b4:	00048300 	call	4830 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    39b8:	000c64c0 	call	c64c <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    39bc:	00051240 	call	5124 <OSDebugInit>
#endif
}
    39c0:	0001883a 	nop
    39c4:	e037883a 	mov	sp,fp
    39c8:	dfc00117 	ldw	ra,4(sp)
    39cc:	df000017 	ldw	fp,0(sp)
    39d0:	dec00204 	addi	sp,sp,8
    39d4:	f800283a 	ret

000039d8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    39d8:	deffff04 	addi	sp,sp,-4
    39dc:	df000015 	stw	fp,0(sp)
    39e0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    39e4:	d0a70243 	ldbu	r2,-25591(gp)
    39e8:	10803fcc 	andi	r2,r2,255
    39ec:	10800058 	cmpnei	r2,r2,1
    39f0:	1000071e 	bne	r2,zero,3a10 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    39f4:	d0a71003 	ldbu	r2,-25536(gp)
    39f8:	10803fcc 	andi	r2,r2,255
    39fc:	10803fe0 	cmpeqi	r2,r2,255
    3a00:	1000031e 	bne	r2,zero,3a10 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    3a04:	d0a71003 	ldbu	r2,-25536(gp)
    3a08:	10800044 	addi	r2,r2,1
    3a0c:	d0a71005 	stb	r2,-25536(gp)
        }
    }
}
    3a10:	0001883a 	nop
    3a14:	e037883a 	mov	sp,fp
    3a18:	df000017 	ldw	fp,0(sp)
    3a1c:	dec00104 	addi	sp,sp,4
    3a20:	f800283a 	ret

00003a24 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    3a24:	defffb04 	addi	sp,sp,-20
    3a28:	dfc00415 	stw	ra,16(sp)
    3a2c:	df000315 	stw	fp,12(sp)
    3a30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3a34:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    3a38:	d0a70243 	ldbu	r2,-25591(gp)
    3a3c:	10803fcc 	andi	r2,r2,255
    3a40:	10800058 	cmpnei	r2,r2,1
    3a44:	10002f1e 	bne	r2,zero,3b04 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a48:	0005303a 	rdctl	r2,status
    3a4c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a50:	e0ffff17 	ldw	r3,-4(fp)
    3a54:	00bfff84 	movi	r2,-2
    3a58:	1884703a 	and	r2,r3,r2
    3a5c:	1001703a 	wrctl	status,r2
  
  return context;
    3a60:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3a64:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    3a68:	d0a71003 	ldbu	r2,-25536(gp)
    3a6c:	10803fcc 	andi	r2,r2,255
    3a70:	10000326 	beq	r2,zero,3a80 <OSIntExit+0x5c>
            OSIntNesting--;
    3a74:	d0a71003 	ldbu	r2,-25536(gp)
    3a78:	10bfffc4 	addi	r2,r2,-1
    3a7c:	d0a71005 	stb	r2,-25536(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    3a80:	d0a71003 	ldbu	r2,-25536(gp)
    3a84:	10803fcc 	andi	r2,r2,255
    3a88:	10001a1e 	bne	r2,zero,3af4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    3a8c:	d0a70203 	ldbu	r2,-25592(gp)
    3a90:	10803fcc 	andi	r2,r2,255
    3a94:	1000171e 	bne	r2,zero,3af4 <OSIntExit+0xd0>
                OS_SchedNew();
    3a98:	0004b200 	call	4b20 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    3a9c:	d0e70403 	ldbu	r3,-25584(gp)
    3aa0:	d0a70443 	ldbu	r2,-25583(gp)
    3aa4:	18c03fcc 	andi	r3,r3,255
    3aa8:	10803fcc 	andi	r2,r2,255
    3aac:	18801126 	beq	r3,r2,3af4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    3ab0:	d0a70403 	ldbu	r2,-25584(gp)
    3ab4:	10c03fcc 	andi	r3,r2,255
    3ab8:	00800074 	movhi	r2,1
    3abc:	109ecd04 	addi	r2,r2,31540
    3ac0:	18c7883a 	add	r3,r3,r3
    3ac4:	18c7883a 	add	r3,r3,r3
    3ac8:	10c5883a 	add	r2,r2,r3
    3acc:	10800017 	ldw	r2,0(r2)
    3ad0:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    3ad4:	d0a70c17 	ldw	r2,-25552(gp)
    3ad8:	10c00e17 	ldw	r3,56(r2)
    3adc:	18c00044 	addi	r3,r3,1
    3ae0:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    3ae4:	d0a70717 	ldw	r2,-25572(gp)
    3ae8:	10800044 	addi	r2,r2,1
    3aec:	d0a70715 	stw	r2,-25572(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    3af0:	000c3580 	call	c358 <OSCtxSw>
    3af4:	e0bffd17 	ldw	r2,-12(fp)
    3af8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3afc:	e0bffe17 	ldw	r2,-8(fp)
    3b00:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    3b04:	0001883a 	nop
    3b08:	e037883a 	mov	sp,fp
    3b0c:	dfc00117 	ldw	ra,4(sp)
    3b10:	df000017 	ldw	fp,0(sp)
    3b14:	dec00204 	addi	sp,sp,8
    3b18:	f800283a 	ret

00003b1c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    3b1c:	defffc04 	addi	sp,sp,-16
    3b20:	df000315 	stw	fp,12(sp)
    3b24:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3b28:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    3b2c:	d0a70243 	ldbu	r2,-25591(gp)
    3b30:	10803fcc 	andi	r2,r2,255
    3b34:	10800058 	cmpnei	r2,r2,1
    3b38:	1000161e 	bne	r2,zero,3b94 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b3c:	0005303a 	rdctl	r2,status
    3b40:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b44:	e0ffff17 	ldw	r3,-4(fp)
    3b48:	00bfff84 	movi	r2,-2
    3b4c:	1884703a 	and	r2,r3,r2
    3b50:	1001703a 	wrctl	status,r2
  
  return context;
    3b54:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3b58:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    3b5c:	d0a71003 	ldbu	r2,-25536(gp)
    3b60:	10803fcc 	andi	r2,r2,255
    3b64:	1000071e 	bne	r2,zero,3b84 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    3b68:	d0a70203 	ldbu	r2,-25592(gp)
    3b6c:	10803fcc 	andi	r2,r2,255
    3b70:	10803fe0 	cmpeqi	r2,r2,255
    3b74:	1000031e 	bne	r2,zero,3b84 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    3b78:	d0a70203 	ldbu	r2,-25592(gp)
    3b7c:	10800044 	addi	r2,r2,1
    3b80:	d0a70205 	stb	r2,-25592(gp)
    3b84:	e0bffd17 	ldw	r2,-12(fp)
    3b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3b8c:	e0bffe17 	ldw	r2,-8(fp)
    3b90:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    3b94:	0001883a 	nop
    3b98:	e037883a 	mov	sp,fp
    3b9c:	df000017 	ldw	fp,0(sp)
    3ba0:	dec00104 	addi	sp,sp,4
    3ba4:	f800283a 	ret

00003ba8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    3ba8:	defff804 	addi	sp,sp,-32
    3bac:	dfc00715 	stw	ra,28(sp)
    3bb0:	df000615 	stw	fp,24(sp)
    3bb4:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3bb8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    3bbc:	d0a70243 	ldbu	r2,-25591(gp)
    3bc0:	10803fcc 	andi	r2,r2,255
    3bc4:	10800058 	cmpnei	r2,r2,1
    3bc8:	1000281e 	bne	r2,zero,3c6c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3bcc:	0005303a 	rdctl	r2,status
    3bd0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3bd4:	e0ffff17 	ldw	r3,-4(fp)
    3bd8:	00bfff84 	movi	r2,-2
    3bdc:	1884703a 	and	r2,r3,r2
    3be0:	1001703a 	wrctl	status,r2
  
  return context;
    3be4:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3be8:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    3bec:	d0a70203 	ldbu	r2,-25592(gp)
    3bf0:	10803fcc 	andi	r2,r2,255
    3bf4:	10001926 	beq	r2,zero,3c5c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    3bf8:	d0a70203 	ldbu	r2,-25592(gp)
    3bfc:	10bfffc4 	addi	r2,r2,-1
    3c00:	d0a70205 	stb	r2,-25592(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    3c04:	d0a70203 	ldbu	r2,-25592(gp)
    3c08:	10803fcc 	andi	r2,r2,255
    3c0c:	10000e1e 	bne	r2,zero,3c48 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    3c10:	d0a71003 	ldbu	r2,-25536(gp)
    3c14:	10803fcc 	andi	r2,r2,255
    3c18:	1000061e 	bne	r2,zero,3c34 <OSSchedUnlock+0x8c>
    3c1c:	e0bffa17 	ldw	r2,-24(fp)
    3c20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c24:	e0bffb17 	ldw	r2,-20(fp)
    3c28:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    3c2c:	0004a500 	call	4a50 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    3c30:	00000e06 	br	3c6c <OSSchedUnlock+0xc4>
    3c34:	e0bffa17 	ldw	r2,-24(fp)
    3c38:	e0bffc15 	stw	r2,-16(fp)
    3c3c:	e0bffc17 	ldw	r2,-16(fp)
    3c40:	1001703a 	wrctl	status,r2
    3c44:	00000906 	br	3c6c <OSSchedUnlock+0xc4>
    3c48:	e0bffa17 	ldw	r2,-24(fp)
    3c4c:	e0bffd15 	stw	r2,-12(fp)
    3c50:	e0bffd17 	ldw	r2,-12(fp)
    3c54:	1001703a 	wrctl	status,r2
    3c58:	00000406 	br	3c6c <OSSchedUnlock+0xc4>
    3c5c:	e0bffa17 	ldw	r2,-24(fp)
    3c60:	e0bffe15 	stw	r2,-8(fp)
    3c64:	e0bffe17 	ldw	r2,-8(fp)
    3c68:	1001703a 	wrctl	status,r2
    3c6c:	0001883a 	nop
    3c70:	e037883a 	mov	sp,fp
    3c74:	dfc00117 	ldw	ra,4(sp)
    3c78:	df000017 	ldw	fp,0(sp)
    3c7c:	dec00204 	addi	sp,sp,8
    3c80:	f800283a 	ret

00003c84 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    3c84:	defffe04 	addi	sp,sp,-8
    3c88:	dfc00115 	stw	ra,4(sp)
    3c8c:	df000015 	stw	fp,0(sp)
    3c90:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    3c94:	d0a70243 	ldbu	r2,-25591(gp)
    3c98:	10803fcc 	andi	r2,r2,255
    3c9c:	10000f1e 	bne	r2,zero,3cdc <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    3ca0:	0004b200 	call	4b20 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    3ca4:	d0a70403 	ldbu	r2,-25584(gp)
    3ca8:	d0a70445 	stb	r2,-25583(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    3cac:	d0a70403 	ldbu	r2,-25584(gp)
    3cb0:	10c03fcc 	andi	r3,r2,255
    3cb4:	00800074 	movhi	r2,1
    3cb8:	109ecd04 	addi	r2,r2,31540
    3cbc:	18c7883a 	add	r3,r3,r3
    3cc0:	18c7883a 	add	r3,r3,r3
    3cc4:	10c5883a 	add	r2,r2,r3
    3cc8:	10800017 	ldw	r2,0(r2)
    3ccc:	d0a70c15 	stw	r2,-25552(gp)
        OSTCBCur      = OSTCBHighRdy;
    3cd0:	d0a70c17 	ldw	r2,-25552(gp)
    3cd4:	d0a71115 	stw	r2,-25532(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    3cd8:	000c3e40 	call	c3e4 <OSStartHighRdy>
    }
}
    3cdc:	0001883a 	nop
    3ce0:	e037883a 	mov	sp,fp
    3ce4:	dfc00117 	ldw	ra,4(sp)
    3ce8:	df000017 	ldw	fp,0(sp)
    3cec:	dec00204 	addi	sp,sp,8
    3cf0:	f800283a 	ret

00003cf4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    3cf4:	defff904 	addi	sp,sp,-28
    3cf8:	dfc00615 	stw	ra,24(sp)
    3cfc:	df000515 	stw	fp,20(sp)
    3d00:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3d04:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    3d08:	01000084 	movi	r4,2
    3d0c:	000a3f80 	call	a3f8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d10:	0005303a 	rdctl	r2,status
    3d14:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d18:	e0fffc17 	ldw	r3,-16(fp)
    3d1c:	00bfff84 	movi	r2,-2
    3d20:	1884703a 	and	r2,r3,r2
    3d24:	1001703a 	wrctl	status,r2
  
  return context;
    3d28:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    3d2c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    3d30:	d0270315 	stw	zero,-25588(gp)
    3d34:	e0bffb17 	ldw	r2,-20(fp)
    3d38:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d3c:	e0bffd17 	ldw	r2,-12(fp)
    3d40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    3d44:	01001904 	movi	r4,100
    3d48:	000a3f80 	call	a3f8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d4c:	0005303a 	rdctl	r2,status
    3d50:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d54:	e0fffe17 	ldw	r3,-8(fp)
    3d58:	00bfff84 	movi	r2,-2
    3d5c:	1884703a 	and	r2,r3,r2
    3d60:	1001703a 	wrctl	status,r2
  
  return context;
    3d64:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    3d68:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    3d6c:	d0a70317 	ldw	r2,-25588(gp)
    3d70:	d0a70815 	stw	r2,-25568(gp)
    OSStatRdy    = OS_TRUE;
    3d74:	00800044 	movi	r2,1
    3d78:	d0a71405 	stb	r2,-25520(gp)
    3d7c:	e0bffb17 	ldw	r2,-20(fp)
    3d80:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d84:	e0bfff17 	ldw	r2,-4(fp)
    3d88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    3d8c:	0001883a 	nop
    3d90:	e037883a 	mov	sp,fp
    3d94:	dfc00117 	ldw	ra,4(sp)
    3d98:	df000017 	ldw	fp,0(sp)
    3d9c:	dec00204 	addi	sp,sp,8
    3da0:	f800283a 	ret

00003da4 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    3da4:	defff704 	addi	sp,sp,-36
    3da8:	dfc00815 	stw	ra,32(sp)
    3dac:	df000715 	stw	fp,28(sp)
    3db0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    3db4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    3db8:	000c60c0 	call	c60c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3dbc:	0005303a 	rdctl	r2,status
    3dc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3dc4:	e0fffd17 	ldw	r3,-12(fp)
    3dc8:	00bfff84 	movi	r2,-2
    3dcc:	1884703a 	and	r2,r3,r2
    3dd0:	1001703a 	wrctl	status,r2
  
  return context;
    3dd4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    3dd8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    3ddc:	d0a71217 	ldw	r2,-25528(gp)
    3de0:	10800044 	addi	r2,r2,1
    3de4:	d0a71215 	stw	r2,-25528(gp)
    3de8:	e0bffb17 	ldw	r2,-20(fp)
    3dec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3df0:	e0bfff17 	ldw	r2,-4(fp)
    3df4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    3df8:	d0a70243 	ldbu	r2,-25591(gp)
    3dfc:	10803fcc 	andi	r2,r2,255
    3e00:	10800058 	cmpnei	r2,r2,1
    3e04:	10006a1e 	bne	r2,zero,3fb0 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    3e08:	d0a70603 	ldbu	r2,-25576(gp)
    3e0c:	10803fcc 	andi	r2,r2,255
    3e10:	10c00060 	cmpeqi	r3,r2,1
    3e14:	1800061e 	bne	r3,zero,3e30 <OSTimeTick+0x8c>
    3e18:	10c000a0 	cmpeqi	r3,r2,2
    3e1c:	1800061e 	bne	r3,zero,3e38 <OSTimeTick+0x94>
    3e20:	10000a1e 	bne	r2,zero,3e4c <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    3e24:	00800044 	movi	r2,1
    3e28:	e0bffa05 	stb	r2,-24(fp)
                 break;
    3e2c:	00000b06 	br	3e5c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    3e30:	e03ffa05 	stb	zero,-24(fp)
                 break;
    3e34:	00000906 	br	3e5c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    3e38:	00800044 	movi	r2,1
    3e3c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    3e40:	00800044 	movi	r2,1
    3e44:	d0a70605 	stb	r2,-25576(gp)
                 break;
    3e48:	00000406 	br	3e5c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    3e4c:	00800044 	movi	r2,1
    3e50:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    3e54:	d0270605 	stb	zero,-25576(gp)
                 break;
    3e58:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    3e5c:	e0bffa03 	ldbu	r2,-24(fp)
    3e60:	10005226 	beq	r2,zero,3fac <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    3e64:	d0a70517 	ldw	r2,-25580(gp)
    3e68:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    3e6c:	00004906 	br	3f94 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e70:	0005303a 	rdctl	r2,status
    3e74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e78:	e0fffc17 	ldw	r3,-16(fp)
    3e7c:	00bfff84 	movi	r2,-2
    3e80:	1884703a 	and	r2,r3,r2
    3e84:	1001703a 	wrctl	status,r2
  
  return context;
    3e88:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    3e8c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    3e90:	e0bff917 	ldw	r2,-28(fp)
    3e94:	10800b8b 	ldhu	r2,46(r2)
    3e98:	10bfffcc 	andi	r2,r2,65535
    3e9c:	10003626 	beq	r2,zero,3f78 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    3ea0:	e0bff917 	ldw	r2,-28(fp)
    3ea4:	10800b8b 	ldhu	r2,46(r2)
    3ea8:	10bfffc4 	addi	r2,r2,-1
    3eac:	1007883a 	mov	r3,r2
    3eb0:	e0bff917 	ldw	r2,-28(fp)
    3eb4:	10c00b8d 	sth	r3,46(r2)
    3eb8:	e0bff917 	ldw	r2,-28(fp)
    3ebc:	10800b8b 	ldhu	r2,46(r2)
    3ec0:	10bfffcc 	andi	r2,r2,65535
    3ec4:	10002c1e 	bne	r2,zero,3f78 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    3ec8:	e0bff917 	ldw	r2,-28(fp)
    3ecc:	10800c03 	ldbu	r2,48(r2)
    3ed0:	10803fcc 	andi	r2,r2,255
    3ed4:	10800dcc 	andi	r2,r2,55
    3ed8:	10000b26 	beq	r2,zero,3f08 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    3edc:	e0bff917 	ldw	r2,-28(fp)
    3ee0:	10c00c03 	ldbu	r3,48(r2)
    3ee4:	00bff204 	movi	r2,-56
    3ee8:	1884703a 	and	r2,r3,r2
    3eec:	1007883a 	mov	r3,r2
    3ef0:	e0bff917 	ldw	r2,-28(fp)
    3ef4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    3ef8:	e0bff917 	ldw	r2,-28(fp)
    3efc:	00c00044 	movi	r3,1
    3f00:	10c00c45 	stb	r3,49(r2)
    3f04:	00000206 	br	3f10 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    3f08:	e0bff917 	ldw	r2,-28(fp)
    3f0c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    3f10:	e0bff917 	ldw	r2,-28(fp)
    3f14:	10800c03 	ldbu	r2,48(r2)
    3f18:	10803fcc 	andi	r2,r2,255
    3f1c:	1080020c 	andi	r2,r2,8
    3f20:	1000151e 	bne	r2,zero,3f78 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    3f24:	e0bff917 	ldw	r2,-28(fp)
    3f28:	10c00d83 	ldbu	r3,54(r2)
    3f2c:	d0a70e03 	ldbu	r2,-25544(gp)
    3f30:	1884b03a 	or	r2,r3,r2
    3f34:	d0a70e05 	stb	r2,-25544(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3f38:	e0bff917 	ldw	r2,-28(fp)
    3f3c:	10800d03 	ldbu	r2,52(r2)
    3f40:	10c03fcc 	andi	r3,r2,255
    3f44:	e0bff917 	ldw	r2,-28(fp)
    3f48:	10800d03 	ldbu	r2,52(r2)
    3f4c:	11003fcc 	andi	r4,r2,255
    3f50:	d0a70e44 	addi	r2,gp,-25543
    3f54:	2085883a 	add	r2,r4,r2
    3f58:	11000003 	ldbu	r4,0(r2)
    3f5c:	e0bff917 	ldw	r2,-28(fp)
    3f60:	10800d43 	ldbu	r2,53(r2)
    3f64:	2084b03a 	or	r2,r4,r2
    3f68:	1009883a 	mov	r4,r2
    3f6c:	d0a70e44 	addi	r2,gp,-25543
    3f70:	1885883a 	add	r2,r3,r2
    3f74:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    3f78:	e0bff917 	ldw	r2,-28(fp)
    3f7c:	10800517 	ldw	r2,20(r2)
    3f80:	e0bff915 	stw	r2,-28(fp)
    3f84:	e0bffb17 	ldw	r2,-20(fp)
    3f88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f8c:	e0bffe17 	ldw	r2,-8(fp)
    3f90:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    3f94:	e0bff917 	ldw	r2,-28(fp)
    3f98:	10800c83 	ldbu	r2,50(r2)
    3f9c:	10803fcc 	andi	r2,r2,255
    3fa0:	10800518 	cmpnei	r2,r2,20
    3fa4:	103fb21e 	bne	r2,zero,3e70 <__alt_data_end+0xfffeb7d0>
    3fa8:	00000106 	br	3fb0 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    3fac:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    3fb0:	e037883a 	mov	sp,fp
    3fb4:	dfc00117 	ldw	ra,4(sp)
    3fb8:	df000017 	ldw	fp,0(sp)
    3fbc:	dec00204 	addi	sp,sp,8
    3fc0:	f800283a 	ret

00003fc4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    3fc4:	deffff04 	addi	sp,sp,-4
    3fc8:	df000015 	stw	fp,0(sp)
    3fcc:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    3fd0:	00804784 	movi	r2,286
}
    3fd4:	e037883a 	mov	sp,fp
    3fd8:	df000017 	ldw	fp,0(sp)
    3fdc:	dec00104 	addi	sp,sp,4
    3fe0:	f800283a 	ret

00003fe4 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    3fe4:	deffff04 	addi	sp,sp,-4
    3fe8:	df000015 	stw	fp,0(sp)
    3fec:	d839883a 	mov	fp,sp
}
    3ff0:	0001883a 	nop
    3ff4:	e037883a 	mov	sp,fp
    3ff8:	df000017 	ldw	fp,0(sp)
    3ffc:	dec00104 	addi	sp,sp,4
    4000:	f800283a 	ret

00004004 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4004:	defff804 	addi	sp,sp,-32
    4008:	dfc00715 	stw	ra,28(sp)
    400c:	df000615 	stw	fp,24(sp)
    4010:	df000604 	addi	fp,sp,24
    4014:	e13ffc15 	stw	r4,-16(fp)
    4018:	e17ffd15 	stw	r5,-12(fp)
    401c:	3007883a 	mov	r3,r6
    4020:	3805883a 	mov	r2,r7
    4024:	e0fffe05 	stb	r3,-8(fp)
    4028:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    402c:	e0bffc17 	ldw	r2,-16(fp)
    4030:	10800283 	ldbu	r2,10(r2)
    4034:	10c03fcc 	andi	r3,r2,255
    4038:	00800074 	movhi	r2,1
    403c:	10b44904 	addi	r2,r2,-11996
    4040:	10c5883a 	add	r2,r2,r3
    4044:	10800003 	ldbu	r2,0(r2)
    4048:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    404c:	e0bffa03 	ldbu	r2,-24(fp)
    4050:	e0fffc17 	ldw	r3,-16(fp)
    4054:	1885883a 	add	r2,r3,r2
    4058:	108002c4 	addi	r2,r2,11
    405c:	10800003 	ldbu	r2,0(r2)
    4060:	10c03fcc 	andi	r3,r2,255
    4064:	00800074 	movhi	r2,1
    4068:	10b44904 	addi	r2,r2,-11996
    406c:	10c5883a 	add	r2,r2,r3
    4070:	10800003 	ldbu	r2,0(r2)
    4074:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4078:	e0bffa03 	ldbu	r2,-24(fp)
    407c:	100490fa 	slli	r2,r2,3
    4080:	1007883a 	mov	r3,r2
    4084:	e0bffa43 	ldbu	r2,-23(fp)
    4088:	1885883a 	add	r2,r3,r2
    408c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    4090:	e0fffa83 	ldbu	r3,-22(fp)
    4094:	00800074 	movhi	r2,1
    4098:	109ecd04 	addi	r2,r2,31540
    409c:	18c7883a 	add	r3,r3,r3
    40a0:	18c7883a 	add	r3,r3,r3
    40a4:	10c5883a 	add	r2,r2,r3
    40a8:	10800017 	ldw	r2,0(r2)
    40ac:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    40b0:	e0bffb17 	ldw	r2,-20(fp)
    40b4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    40b8:	e0bffb17 	ldw	r2,-20(fp)
    40bc:	e0fffd17 	ldw	r3,-12(fp)
    40c0:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    40c4:	e0bffb17 	ldw	r2,-20(fp)
    40c8:	10800c03 	ldbu	r2,48(r2)
    40cc:	1007883a 	mov	r3,r2
    40d0:	e0bffe03 	ldbu	r2,-8(fp)
    40d4:	0084303a 	nor	r2,zero,r2
    40d8:	1884703a 	and	r2,r3,r2
    40dc:	1007883a 	mov	r3,r2
    40e0:	e0bffb17 	ldw	r2,-20(fp)
    40e4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    40e8:	e0bffb17 	ldw	r2,-20(fp)
    40ec:	e0ffff03 	ldbu	r3,-4(fp)
    40f0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    40f4:	e0bffb17 	ldw	r2,-20(fp)
    40f8:	10800c03 	ldbu	r2,48(r2)
    40fc:	10803fcc 	andi	r2,r2,255
    4100:	1080020c 	andi	r2,r2,8
    4104:	1000111e 	bne	r2,zero,414c <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4108:	e0bffb17 	ldw	r2,-20(fp)
    410c:	10c00d83 	ldbu	r3,54(r2)
    4110:	d0a70e03 	ldbu	r2,-25544(gp)
    4114:	1884b03a 	or	r2,r3,r2
    4118:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    411c:	e0fffa03 	ldbu	r3,-24(fp)
    4120:	e13ffa03 	ldbu	r4,-24(fp)
    4124:	d0a70e44 	addi	r2,gp,-25543
    4128:	2085883a 	add	r2,r4,r2
    412c:	11000003 	ldbu	r4,0(r2)
    4130:	e0bffb17 	ldw	r2,-20(fp)
    4134:	10800d43 	ldbu	r2,53(r2)
    4138:	2084b03a 	or	r2,r4,r2
    413c:	1009883a 	mov	r4,r2
    4140:	d0a70e44 	addi	r2,gp,-25543
    4144:	1885883a 	add	r2,r3,r2
    4148:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    414c:	e17ffc17 	ldw	r5,-16(fp)
    4150:	e13ffb17 	ldw	r4,-20(fp)
    4154:	00043fc0 	call	43fc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4158:	e0bffb17 	ldw	r2,-20(fp)
    415c:	10800817 	ldw	r2,32(r2)
    4160:	10000826 	beq	r2,zero,4184 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4164:	e0bffb17 	ldw	r2,-20(fp)
    4168:	10800817 	ldw	r2,32(r2)
    416c:	100b883a 	mov	r5,r2
    4170:	e13ffb17 	ldw	r4,-20(fp)
    4174:	00044b40 	call	44b4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4178:	e0bffb17 	ldw	r2,-20(fp)
    417c:	e0fffc17 	ldw	r3,-16(fp)
    4180:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4184:	e0bffa83 	ldbu	r2,-22(fp)
}
    4188:	e037883a 	mov	sp,fp
    418c:	dfc00117 	ldw	ra,4(sp)
    4190:	df000017 	ldw	fp,0(sp)
    4194:	dec00204 	addi	sp,sp,8
    4198:	f800283a 	ret

0000419c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    419c:	defffd04 	addi	sp,sp,-12
    41a0:	df000215 	stw	fp,8(sp)
    41a4:	df000204 	addi	fp,sp,8
    41a8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    41ac:	d0a71117 	ldw	r2,-25532(gp)
    41b0:	e0ffff17 	ldw	r3,-4(fp)
    41b4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    41b8:	d0a71117 	ldw	r2,-25532(gp)
    41bc:	10800d03 	ldbu	r2,52(r2)
    41c0:	10803fcc 	andi	r2,r2,255
    41c4:	d0e71117 	ldw	r3,-25532(gp)
    41c8:	18c00d03 	ldbu	r3,52(r3)
    41cc:	18c03fcc 	andi	r3,r3,255
    41d0:	e13fff17 	ldw	r4,-4(fp)
    41d4:	20c7883a 	add	r3,r4,r3
    41d8:	18c002c4 	addi	r3,r3,11
    41dc:	19000003 	ldbu	r4,0(r3)
    41e0:	d0e71117 	ldw	r3,-25532(gp)
    41e4:	18c00d43 	ldbu	r3,53(r3)
    41e8:	20c6b03a 	or	r3,r4,r3
    41ec:	1809883a 	mov	r4,r3
    41f0:	e0ffff17 	ldw	r3,-4(fp)
    41f4:	1885883a 	add	r2,r3,r2
    41f8:	108002c4 	addi	r2,r2,11
    41fc:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4200:	e0bfff17 	ldw	r2,-4(fp)
    4204:	10c00283 	ldbu	r3,10(r2)
    4208:	d0a71117 	ldw	r2,-25532(gp)
    420c:	10800d83 	ldbu	r2,54(r2)
    4210:	1884b03a 	or	r2,r3,r2
    4214:	1007883a 	mov	r3,r2
    4218:	e0bfff17 	ldw	r2,-4(fp)
    421c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4220:	d0a71117 	ldw	r2,-25532(gp)
    4224:	10800d03 	ldbu	r2,52(r2)
    4228:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    422c:	e0fffe03 	ldbu	r3,-8(fp)
    4230:	e13ffe03 	ldbu	r4,-8(fp)
    4234:	d0a70e44 	addi	r2,gp,-25543
    4238:	2085883a 	add	r2,r4,r2
    423c:	10800003 	ldbu	r2,0(r2)
    4240:	1009883a 	mov	r4,r2
    4244:	d0a71117 	ldw	r2,-25532(gp)
    4248:	10800d43 	ldbu	r2,53(r2)
    424c:	0084303a 	nor	r2,zero,r2
    4250:	2084703a 	and	r2,r4,r2
    4254:	1009883a 	mov	r4,r2
    4258:	d0a70e44 	addi	r2,gp,-25543
    425c:	1885883a 	add	r2,r3,r2
    4260:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    4264:	e0fffe03 	ldbu	r3,-8(fp)
    4268:	d0a70e44 	addi	r2,gp,-25543
    426c:	1885883a 	add	r2,r3,r2
    4270:	10800003 	ldbu	r2,0(r2)
    4274:	10803fcc 	andi	r2,r2,255
    4278:	1000071e 	bne	r2,zero,4298 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    427c:	d0a71117 	ldw	r2,-25532(gp)
    4280:	10800d83 	ldbu	r2,54(r2)
    4284:	0084303a 	nor	r2,zero,r2
    4288:	1007883a 	mov	r3,r2
    428c:	d0a70e03 	ldbu	r2,-25544(gp)
    4290:	1884703a 	and	r2,r3,r2
    4294:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    4298:	0001883a 	nop
    429c:	e037883a 	mov	sp,fp
    42a0:	df000017 	ldw	fp,0(sp)
    42a4:	dec00104 	addi	sp,sp,4
    42a8:	f800283a 	ret

000042ac <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    42ac:	defffb04 	addi	sp,sp,-20
    42b0:	df000415 	stw	fp,16(sp)
    42b4:	df000404 	addi	fp,sp,16
    42b8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    42bc:	d0a71117 	ldw	r2,-25532(gp)
    42c0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    42c4:	d0a71117 	ldw	r2,-25532(gp)
    42c8:	e0ffff17 	ldw	r3,-4(fp)
    42cc:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    42d0:	e0bfff17 	ldw	r2,-4(fp)
    42d4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    42d8:	e0bffc17 	ldw	r2,-16(fp)
    42dc:	10800017 	ldw	r2,0(r2)
    42e0:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    42e4:	00002006 	br	4368 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    42e8:	d0a71117 	ldw	r2,-25532(gp)
    42ec:	10800d03 	ldbu	r2,52(r2)
    42f0:	10803fcc 	andi	r2,r2,255
    42f4:	d0e71117 	ldw	r3,-25532(gp)
    42f8:	18c00d03 	ldbu	r3,52(r3)
    42fc:	18c03fcc 	andi	r3,r3,255
    4300:	e13ffd17 	ldw	r4,-12(fp)
    4304:	20c7883a 	add	r3,r4,r3
    4308:	18c002c4 	addi	r3,r3,11
    430c:	19000003 	ldbu	r4,0(r3)
    4310:	d0e71117 	ldw	r3,-25532(gp)
    4314:	18c00d43 	ldbu	r3,53(r3)
    4318:	20c6b03a 	or	r3,r4,r3
    431c:	1809883a 	mov	r4,r3
    4320:	e0fffd17 	ldw	r3,-12(fp)
    4324:	1885883a 	add	r2,r3,r2
    4328:	108002c4 	addi	r2,r2,11
    432c:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4330:	e0bffd17 	ldw	r2,-12(fp)
    4334:	10c00283 	ldbu	r3,10(r2)
    4338:	d0a71117 	ldw	r2,-25532(gp)
    433c:	10800d83 	ldbu	r2,54(r2)
    4340:	1884b03a 	or	r2,r3,r2
    4344:	1007883a 	mov	r3,r2
    4348:	e0bffd17 	ldw	r2,-12(fp)
    434c:	10c00285 	stb	r3,10(r2)
        pevents++;
    4350:	e0bffc17 	ldw	r2,-16(fp)
    4354:	10800104 	addi	r2,r2,4
    4358:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    435c:	e0bffc17 	ldw	r2,-16(fp)
    4360:	10800017 	ldw	r2,0(r2)
    4364:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4368:	e0bffd17 	ldw	r2,-12(fp)
    436c:	103fde1e 	bne	r2,zero,42e8 <__alt_data_end+0xfffebc48>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    4370:	d0a71117 	ldw	r2,-25532(gp)
    4374:	10800d03 	ldbu	r2,52(r2)
    4378:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    437c:	e0fffe03 	ldbu	r3,-8(fp)
    4380:	e13ffe03 	ldbu	r4,-8(fp)
    4384:	d0a70e44 	addi	r2,gp,-25543
    4388:	2085883a 	add	r2,r4,r2
    438c:	10800003 	ldbu	r2,0(r2)
    4390:	1009883a 	mov	r4,r2
    4394:	d0a71117 	ldw	r2,-25532(gp)
    4398:	10800d43 	ldbu	r2,53(r2)
    439c:	0084303a 	nor	r2,zero,r2
    43a0:	2084703a 	and	r2,r4,r2
    43a4:	1009883a 	mov	r4,r2
    43a8:	d0a70e44 	addi	r2,gp,-25543
    43ac:	1885883a 	add	r2,r3,r2
    43b0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    43b4:	e0fffe03 	ldbu	r3,-8(fp)
    43b8:	d0a70e44 	addi	r2,gp,-25543
    43bc:	1885883a 	add	r2,r3,r2
    43c0:	10800003 	ldbu	r2,0(r2)
    43c4:	10803fcc 	andi	r2,r2,255
    43c8:	1000071e 	bne	r2,zero,43e8 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    43cc:	d0a71117 	ldw	r2,-25532(gp)
    43d0:	10800d83 	ldbu	r2,54(r2)
    43d4:	0084303a 	nor	r2,zero,r2
    43d8:	1007883a 	mov	r3,r2
    43dc:	d0a70e03 	ldbu	r2,-25544(gp)
    43e0:	1884703a 	and	r2,r3,r2
    43e4:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    43e8:	0001883a 	nop
    43ec:	e037883a 	mov	sp,fp
    43f0:	df000017 	ldw	fp,0(sp)
    43f4:	dec00104 	addi	sp,sp,4
    43f8:	f800283a 	ret

000043fc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    43fc:	defffc04 	addi	sp,sp,-16
    4400:	df000315 	stw	fp,12(sp)
    4404:	df000304 	addi	fp,sp,12
    4408:	e13ffe15 	stw	r4,-8(fp)
    440c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4410:	e0bffe17 	ldw	r2,-8(fp)
    4414:	10800d03 	ldbu	r2,52(r2)
    4418:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    441c:	e0bffd03 	ldbu	r2,-12(fp)
    4420:	e0fffd03 	ldbu	r3,-12(fp)
    4424:	e13fff17 	ldw	r4,-4(fp)
    4428:	20c7883a 	add	r3,r4,r3
    442c:	18c002c4 	addi	r3,r3,11
    4430:	18c00003 	ldbu	r3,0(r3)
    4434:	1809883a 	mov	r4,r3
    4438:	e0fffe17 	ldw	r3,-8(fp)
    443c:	18c00d43 	ldbu	r3,53(r3)
    4440:	00c6303a 	nor	r3,zero,r3
    4444:	20c6703a 	and	r3,r4,r3
    4448:	1809883a 	mov	r4,r3
    444c:	e0ffff17 	ldw	r3,-4(fp)
    4450:	1885883a 	add	r2,r3,r2
    4454:	108002c4 	addi	r2,r2,11
    4458:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    445c:	e0bffd03 	ldbu	r2,-12(fp)
    4460:	e0ffff17 	ldw	r3,-4(fp)
    4464:	1885883a 	add	r2,r3,r2
    4468:	108002c4 	addi	r2,r2,11
    446c:	10800003 	ldbu	r2,0(r2)
    4470:	10803fcc 	andi	r2,r2,255
    4474:	10000a1e 	bne	r2,zero,44a0 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4478:	e0bfff17 	ldw	r2,-4(fp)
    447c:	10800283 	ldbu	r2,10(r2)
    4480:	1007883a 	mov	r3,r2
    4484:	e0bffe17 	ldw	r2,-8(fp)
    4488:	10800d83 	ldbu	r2,54(r2)
    448c:	0084303a 	nor	r2,zero,r2
    4490:	1884703a 	and	r2,r3,r2
    4494:	1007883a 	mov	r3,r2
    4498:	e0bfff17 	ldw	r2,-4(fp)
    449c:	10c00285 	stb	r3,10(r2)
    }
}
    44a0:	0001883a 	nop
    44a4:	e037883a 	mov	sp,fp
    44a8:	df000017 	ldw	fp,0(sp)
    44ac:	dec00104 	addi	sp,sp,4
    44b0:	f800283a 	ret

000044b4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    44b4:	defffa04 	addi	sp,sp,-24
    44b8:	df000515 	stw	fp,20(sp)
    44bc:	df000504 	addi	fp,sp,20
    44c0:	e13ffe15 	stw	r4,-8(fp)
    44c4:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    44c8:	e0bffe17 	ldw	r2,-8(fp)
    44cc:	10800d03 	ldbu	r2,52(r2)
    44d0:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    44d4:	e0bffe17 	ldw	r2,-8(fp)
    44d8:	10800d83 	ldbu	r2,54(r2)
    44dc:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    44e0:	e0bffe17 	ldw	r2,-8(fp)
    44e4:	10800d43 	ldbu	r2,53(r2)
    44e8:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    44ec:	e0bfff17 	ldw	r2,-4(fp)
    44f0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    44f4:	e0bffb17 	ldw	r2,-20(fp)
    44f8:	10800017 	ldw	r2,0(r2)
    44fc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4500:	00002506 	br	4598 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    4504:	e0bffd03 	ldbu	r2,-12(fp)
    4508:	e0fffd03 	ldbu	r3,-12(fp)
    450c:	e13ffc17 	ldw	r4,-16(fp)
    4510:	20c7883a 	add	r3,r4,r3
    4514:	18c002c4 	addi	r3,r3,11
    4518:	18c00003 	ldbu	r3,0(r3)
    451c:	1809883a 	mov	r4,r3
    4520:	e0fffd83 	ldbu	r3,-10(fp)
    4524:	00c6303a 	nor	r3,zero,r3
    4528:	20c6703a 	and	r3,r4,r3
    452c:	1809883a 	mov	r4,r3
    4530:	e0fffc17 	ldw	r3,-16(fp)
    4534:	1885883a 	add	r2,r3,r2
    4538:	108002c4 	addi	r2,r2,11
    453c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    4540:	e0bffd03 	ldbu	r2,-12(fp)
    4544:	e0fffc17 	ldw	r3,-16(fp)
    4548:	1885883a 	add	r2,r3,r2
    454c:	108002c4 	addi	r2,r2,11
    4550:	10800003 	ldbu	r2,0(r2)
    4554:	10803fcc 	andi	r2,r2,255
    4558:	1000091e 	bne	r2,zero,4580 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    455c:	e0bffc17 	ldw	r2,-16(fp)
    4560:	10800283 	ldbu	r2,10(r2)
    4564:	1007883a 	mov	r3,r2
    4568:	e0bffd43 	ldbu	r2,-11(fp)
    456c:	0084303a 	nor	r2,zero,r2
    4570:	1884703a 	and	r2,r3,r2
    4574:	1007883a 	mov	r3,r2
    4578:	e0bffc17 	ldw	r2,-16(fp)
    457c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    4580:	e0bffb17 	ldw	r2,-20(fp)
    4584:	10800104 	addi	r2,r2,4
    4588:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    458c:	e0bffb17 	ldw	r2,-20(fp)
    4590:	10800017 	ldw	r2,0(r2)
    4594:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4598:	e0bffc17 	ldw	r2,-16(fp)
    459c:	103fd91e 	bne	r2,zero,4504 <__alt_data_end+0xfffebe64>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    45a0:	0001883a 	nop
    45a4:	e037883a 	mov	sp,fp
    45a8:	df000017 	ldw	fp,0(sp)
    45ac:	dec00104 	addi	sp,sp,4
    45b0:	f800283a 	ret

000045b4 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    45b4:	defffc04 	addi	sp,sp,-16
    45b8:	df000315 	stw	fp,12(sp)
    45bc:	df000304 	addi	fp,sp,12
    45c0:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    45c4:	e0bfff17 	ldw	r2,-4(fp)
    45c8:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    45cc:	e0bfff17 	ldw	r2,-4(fp)
    45d0:	108002c4 	addi	r2,r2,11
    45d4:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    45d8:	e03ffe05 	stb	zero,-8(fp)
    45dc:	00000706 	br	45fc <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    45e0:	e0bffd17 	ldw	r2,-12(fp)
    45e4:	10c00044 	addi	r3,r2,1
    45e8:	e0fffd15 	stw	r3,-12(fp)
    45ec:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    45f0:	e0bffe03 	ldbu	r2,-8(fp)
    45f4:	10800044 	addi	r2,r2,1
    45f8:	e0bffe05 	stb	r2,-8(fp)
    45fc:	e0bffe03 	ldbu	r2,-8(fp)
    4600:	108000f0 	cmpltui	r2,r2,3
    4604:	103ff61e 	bne	r2,zero,45e0 <__alt_data_end+0xfffebf40>
        *ptbl++ = 0;
    }
}
    4608:	0001883a 	nop
    460c:	e037883a 	mov	sp,fp
    4610:	df000017 	ldw	fp,0(sp)
    4614:	dec00104 	addi	sp,sp,4
    4618:	f800283a 	ret

0000461c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    461c:	defffb04 	addi	sp,sp,-20
    4620:	dfc00415 	stw	ra,16(sp)
    4624:	df000315 	stw	fp,12(sp)
    4628:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    462c:	0142d004 	movi	r5,2880
    4630:	01000074 	movhi	r4,1
    4634:	211ab904 	addi	r4,r4,27364
    4638:	00049940 	call	4994 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    463c:	00800074 	movhi	r2,1
    4640:	109ab904 	addi	r2,r2,27364
    4644:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    4648:	00800074 	movhi	r2,1
    464c:	109ac504 	addi	r2,r2,27412
    4650:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4654:	e03ffd0d 	sth	zero,-12(fp)
    4658:	00001306 	br	46a8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    465c:	e0bffe17 	ldw	r2,-8(fp)
    4660:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    4664:	e0bffe17 	ldw	r2,-8(fp)
    4668:	e0ffff17 	ldw	r3,-4(fp)
    466c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    4670:	e0bffe17 	ldw	r2,-8(fp)
    4674:	00c00fc4 	movi	r3,63
    4678:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    467c:	e0bffe17 	ldw	r2,-8(fp)
    4680:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    4684:	e0bffe17 	ldw	r2,-8(fp)
    4688:	10800c04 	addi	r2,r2,48
    468c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    4690:	e0bfff17 	ldw	r2,-4(fp)
    4694:	10800c04 	addi	r2,r2,48
    4698:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    469c:	e0bffd0b 	ldhu	r2,-12(fp)
    46a0:	10800044 	addi	r2,r2,1
    46a4:	e0bffd0d 	sth	r2,-12(fp)
    46a8:	e0bffd0b 	ldhu	r2,-12(fp)
    46ac:	10800ef0 	cmpltui	r2,r2,59
    46b0:	103fea1e 	bne	r2,zero,465c <__alt_data_end+0xfffebfbc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    46b4:	e0bffe17 	ldw	r2,-8(fp)
    46b8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    46bc:	e0bffe17 	ldw	r2,-8(fp)
    46c0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    46c4:	e0bffe17 	ldw	r2,-8(fp)
    46c8:	00c00fc4 	movi	r3,63
    46cc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    46d0:	e0bffe17 	ldw	r2,-8(fp)
    46d4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    46d8:	00800074 	movhi	r2,1
    46dc:	109ab904 	addi	r2,r2,27364
    46e0:	d0a70f15 	stw	r2,-25540(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    46e4:	0001883a 	nop
    46e8:	e037883a 	mov	sp,fp
    46ec:	dfc00117 	ldw	ra,4(sp)
    46f0:	df000017 	ldw	fp,0(sp)
    46f4:	dec00204 	addi	sp,sp,8
    46f8:	f800283a 	ret

000046fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    46fc:	deffff04 	addi	sp,sp,-4
    4700:	df000015 	stw	fp,0(sp)
    4704:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    4708:	d0271215 	stw	zero,-25528(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    470c:	d0271005 	stb	zero,-25536(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    4710:	d0270205 	stb	zero,-25592(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    4714:	d0270a45 	stb	zero,-25559(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    4718:	d0270245 	stb	zero,-25591(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    471c:	d0270715 	stw	zero,-25572(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    4720:	d0270315 	stw	zero,-25588(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    4724:	d0271515 	stw	zero,-25516(gp)
    OSIdleCtrMax  = 0L;
    4728:	d0270815 	stw	zero,-25568(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    472c:	d0271405 	stb	zero,-25520(gp)
#endif
}
    4730:	0001883a 	nop
    4734:	e037883a 	mov	sp,fp
    4738:	df000017 	ldw	fp,0(sp)
    473c:	dec00104 	addi	sp,sp,4
    4740:	f800283a 	ret

00004744 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    4744:	defffd04 	addi	sp,sp,-12
    4748:	df000215 	stw	fp,8(sp)
    474c:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    4750:	d0270e05 	stb	zero,-25544(gp)
    prdytbl       = &OSRdyTbl[0];
    4754:	d0a70e44 	addi	r2,gp,-25543
    4758:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    475c:	e03ffe05 	stb	zero,-8(fp)
    4760:	00000706 	br	4780 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    4764:	e0bfff17 	ldw	r2,-4(fp)
    4768:	10c00044 	addi	r3,r2,1
    476c:	e0ffff15 	stw	r3,-4(fp)
    4770:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4774:	e0bffe03 	ldbu	r2,-8(fp)
    4778:	10800044 	addi	r2,r2,1
    477c:	e0bffe05 	stb	r2,-8(fp)
    4780:	e0bffe03 	ldbu	r2,-8(fp)
    4784:	108000f0 	cmpltui	r2,r2,3
    4788:	103ff61e 	bne	r2,zero,4764 <__alt_data_end+0xfffec0c4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    478c:	d0270445 	stb	zero,-25583(gp)
    OSPrioHighRdy = 0;
    4790:	d0270405 	stb	zero,-25584(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    4794:	d0270c15 	stw	zero,-25552(gp)
    OSTCBCur      = (OS_TCB *)0;
    4798:	d0271115 	stw	zero,-25532(gp)
}
    479c:	0001883a 	nop
    47a0:	e037883a 	mov	sp,fp
    47a4:	df000017 	ldw	fp,0(sp)
    47a8:	dec00104 	addi	sp,sp,4
    47ac:	f800283a 	ret

000047b0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    47b0:	defff804 	addi	sp,sp,-32
    47b4:	dfc00715 	stw	ra,28(sp)
    47b8:	df000615 	stw	fp,24(sp)
    47bc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    47c0:	008000c4 	movi	r2,3
    47c4:	d8800415 	stw	r2,16(sp)
    47c8:	d8000315 	stw	zero,12(sp)
    47cc:	00808004 	movi	r2,512
    47d0:	d8800215 	stw	r2,8(sp)
    47d4:	00800074 	movhi	r2,1
    47d8:	1098b904 	addi	r2,r2,25316
    47dc:	d8800115 	stw	r2,4(sp)
    47e0:	00bfffd4 	movui	r2,65535
    47e4:	d8800015 	stw	r2,0(sp)
    47e8:	01c00504 	movi	r7,20
    47ec:	01800074 	movhi	r6,1
    47f0:	319ab804 	addi	r6,r6,27360
    47f4:	000b883a 	mov	r5,zero
    47f8:	01000034 	movhi	r4,0
    47fc:	21131704 	addi	r4,r4,19548
    4800:	00093280 	call	9328 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    4804:	e1bfff04 	addi	r6,fp,-4
    4808:	01400074 	movhi	r5,1
    480c:	29748904 	addi	r5,r5,-11740
    4810:	01000504 	movi	r4,20
    4814:	0009b380 	call	9b38 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    4818:	0001883a 	nop
    481c:	e037883a 	mov	sp,fp
    4820:	dfc00117 	ldw	ra,4(sp)
    4824:	df000017 	ldw	fp,0(sp)
    4828:	dec00204 	addi	sp,sp,8
    482c:	f800283a 	ret

00004830 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    4830:	defff804 	addi	sp,sp,-32
    4834:	dfc00715 	stw	ra,28(sp)
    4838:	df000615 	stw	fp,24(sp)
    483c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    4840:	008000c4 	movi	r2,3
    4844:	d8800415 	stw	r2,16(sp)
    4848:	d8000315 	stw	zero,12(sp)
    484c:	00808004 	movi	r2,512
    4850:	d8800215 	stw	r2,8(sp)
    4854:	00800074 	movhi	r2,1
    4858:	10964104 	addi	r2,r2,22788
    485c:	d8800115 	stw	r2,4(sp)
    4860:	00bfff94 	movui	r2,65534
    4864:	d8800015 	stw	r2,0(sp)
    4868:	01c004c4 	movi	r7,19
    486c:	01800074 	movhi	r6,1
    4870:	31984004 	addi	r6,r6,24832
    4874:	000b883a 	mov	r5,zero
    4878:	01000034 	movhi	r4,0
    487c:	21132e04 	addi	r4,r4,19640
    4880:	00093280 	call	9328 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    4884:	e1bfff04 	addi	r6,fp,-4
    4888:	01400074 	movhi	r5,1
    488c:	29748d04 	addi	r5,r5,-11724
    4890:	010004c4 	movi	r4,19
    4894:	0009b380 	call	9b38 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    4898:	0001883a 	nop
    489c:	e037883a 	mov	sp,fp
    48a0:	dfc00117 	ldw	ra,4(sp)
    48a4:	df000017 	ldw	fp,0(sp)
    48a8:	dec00204 	addi	sp,sp,8
    48ac:	f800283a 	ret

000048b0 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    48b0:	defffb04 	addi	sp,sp,-20
    48b4:	dfc00415 	stw	ra,16(sp)
    48b8:	df000315 	stw	fp,12(sp)
    48bc:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    48c0:	01414404 	movi	r5,1296
    48c4:	01000074 	movhi	r4,1
    48c8:	211d8904 	addi	r4,r4,30244
    48cc:	00049940 	call	4994 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    48d0:	01401504 	movi	r5,84
    48d4:	01000074 	movhi	r4,1
    48d8:	211ecd04 	addi	r4,r4,31540
    48dc:	00049940 	call	4994 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    48e0:	00800074 	movhi	r2,1
    48e4:	109d8904 	addi	r2,r2,30244
    48e8:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    48ec:	00800074 	movhi	r2,1
    48f0:	109da404 	addi	r2,r2,30352
    48f4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    48f8:	e03ffd05 	stb	zero,-12(fp)
    48fc:	00001106 	br	4944 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    4900:	e0bffe17 	ldw	r2,-8(fp)
    4904:	e0ffff17 	ldw	r3,-4(fp)
    4908:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    490c:	e0bffe17 	ldw	r2,-8(fp)
    4910:	00c00fc4 	movi	r3,63
    4914:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4918:	e0bffe17 	ldw	r2,-8(fp)
    491c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    4920:	e0bffe17 	ldw	r2,-8(fp)
    4924:	10801b04 	addi	r2,r2,108
    4928:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    492c:	e0bfff17 	ldw	r2,-4(fp)
    4930:	10801b04 	addi	r2,r2,108
    4934:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    4938:	e0bffd03 	ldbu	r2,-12(fp)
    493c:	10800044 	addi	r2,r2,1
    4940:	e0bffd05 	stb	r2,-12(fp)
    4944:	e0bffd03 	ldbu	r2,-12(fp)
    4948:	108002f0 	cmpltui	r2,r2,11
    494c:	103fec1e 	bne	r2,zero,4900 <__alt_data_end+0xfffec260>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    4950:	e0bffe17 	ldw	r2,-8(fp)
    4954:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    4958:	e0bffe17 	ldw	r2,-8(fp)
    495c:	00c00fc4 	movi	r3,63
    4960:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4964:	e0bffe17 	ldw	r2,-8(fp)
    4968:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    496c:	d0270515 	stw	zero,-25580(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    4970:	00800074 	movhi	r2,1
    4974:	109d8904 	addi	r2,r2,30244
    4978:	d0a70915 	stw	r2,-25564(gp)
}
    497c:	0001883a 	nop
    4980:	e037883a 	mov	sp,fp
    4984:	dfc00117 	ldw	ra,4(sp)
    4988:	df000017 	ldw	fp,0(sp)
    498c:	dec00204 	addi	sp,sp,8
    4990:	f800283a 	ret

00004994 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    4994:	defffd04 	addi	sp,sp,-12
    4998:	df000215 	stw	fp,8(sp)
    499c:	df000204 	addi	fp,sp,8
    49a0:	e13ffe15 	stw	r4,-8(fp)
    49a4:	2805883a 	mov	r2,r5
    49a8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    49ac:	00000706 	br	49cc <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    49b0:	e0bffe17 	ldw	r2,-8(fp)
    49b4:	10c00044 	addi	r3,r2,1
    49b8:	e0fffe15 	stw	r3,-8(fp)
    49bc:	10000005 	stb	zero,0(r2)
        size--;
    49c0:	e0bfff0b 	ldhu	r2,-4(fp)
    49c4:	10bfffc4 	addi	r2,r2,-1
    49c8:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    49cc:	e0bfff0b 	ldhu	r2,-4(fp)
    49d0:	103ff71e 	bne	r2,zero,49b0 <__alt_data_end+0xfffec310>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    49d4:	0001883a 	nop
    49d8:	e037883a 	mov	sp,fp
    49dc:	df000017 	ldw	fp,0(sp)
    49e0:	dec00104 	addi	sp,sp,4
    49e4:	f800283a 	ret

000049e8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    49e8:	defffc04 	addi	sp,sp,-16
    49ec:	df000315 	stw	fp,12(sp)
    49f0:	df000304 	addi	fp,sp,12
    49f4:	e13ffd15 	stw	r4,-12(fp)
    49f8:	e17ffe15 	stw	r5,-8(fp)
    49fc:	3005883a 	mov	r2,r6
    4a00:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    4a04:	00000b06 	br	4a34 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    4a08:	e0bffd17 	ldw	r2,-12(fp)
    4a0c:	10c00044 	addi	r3,r2,1
    4a10:	e0fffd15 	stw	r3,-12(fp)
    4a14:	e0fffe17 	ldw	r3,-8(fp)
    4a18:	19000044 	addi	r4,r3,1
    4a1c:	e13ffe15 	stw	r4,-8(fp)
    4a20:	18c00003 	ldbu	r3,0(r3)
    4a24:	10c00005 	stb	r3,0(r2)
        size--;
    4a28:	e0bfff0b 	ldhu	r2,-4(fp)
    4a2c:	10bfffc4 	addi	r2,r2,-1
    4a30:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    4a34:	e0bfff0b 	ldhu	r2,-4(fp)
    4a38:	103ff31e 	bne	r2,zero,4a08 <__alt_data_end+0xfffec368>
        *pdest++ = *psrc++;
        size--;
    }
}
    4a3c:	0001883a 	nop
    4a40:	e037883a 	mov	sp,fp
    4a44:	df000017 	ldw	fp,0(sp)
    4a48:	dec00104 	addi	sp,sp,4
    4a4c:	f800283a 	ret

00004a50 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    4a50:	defffb04 	addi	sp,sp,-20
    4a54:	dfc00415 	stw	ra,16(sp)
    4a58:	df000315 	stw	fp,12(sp)
    4a5c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4a60:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a64:	0005303a 	rdctl	r2,status
    4a68:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a6c:	e0ffff17 	ldw	r3,-4(fp)
    4a70:	00bfff84 	movi	r2,-2
    4a74:	1884703a 	and	r2,r3,r2
    4a78:	1001703a 	wrctl	status,r2
  
  return context;
    4a7c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    4a80:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    4a84:	d0a71003 	ldbu	r2,-25536(gp)
    4a88:	10803fcc 	andi	r2,r2,255
    4a8c:	10001a1e 	bne	r2,zero,4af8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    4a90:	d0a70203 	ldbu	r2,-25592(gp)
    4a94:	10803fcc 	andi	r2,r2,255
    4a98:	1000171e 	bne	r2,zero,4af8 <OS_Sched+0xa8>
            OS_SchedNew();
    4a9c:	0004b200 	call	4b20 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    4aa0:	d0e70403 	ldbu	r3,-25584(gp)
    4aa4:	d0a70443 	ldbu	r2,-25583(gp)
    4aa8:	18c03fcc 	andi	r3,r3,255
    4aac:	10803fcc 	andi	r2,r2,255
    4ab0:	18801126 	beq	r3,r2,4af8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    4ab4:	d0a70403 	ldbu	r2,-25584(gp)
    4ab8:	10c03fcc 	andi	r3,r2,255
    4abc:	00800074 	movhi	r2,1
    4ac0:	109ecd04 	addi	r2,r2,31540
    4ac4:	18c7883a 	add	r3,r3,r3
    4ac8:	18c7883a 	add	r3,r3,r3
    4acc:	10c5883a 	add	r2,r2,r3
    4ad0:	10800017 	ldw	r2,0(r2)
    4ad4:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    4ad8:	d0a70c17 	ldw	r2,-25552(gp)
    4adc:	10c00e17 	ldw	r3,56(r2)
    4ae0:	18c00044 	addi	r3,r3,1
    4ae4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    4ae8:	d0a70717 	ldw	r2,-25572(gp)
    4aec:	10800044 	addi	r2,r2,1
    4af0:	d0a70715 	stw	r2,-25572(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    4af4:	000c3580 	call	c358 <OSCtxSw>
    4af8:	e0bffd17 	ldw	r2,-12(fp)
    4afc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4b00:	e0bffe17 	ldw	r2,-8(fp)
    4b04:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    4b08:	0001883a 	nop
    4b0c:	e037883a 	mov	sp,fp
    4b10:	dfc00117 	ldw	ra,4(sp)
    4b14:	df000017 	ldw	fp,0(sp)
    4b18:	dec00204 	addi	sp,sp,8
    4b1c:	f800283a 	ret

00004b20 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    4b20:	defffe04 	addi	sp,sp,-8
    4b24:	df000115 	stw	fp,4(sp)
    4b28:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    4b2c:	d0a70e03 	ldbu	r2,-25544(gp)
    4b30:	10c03fcc 	andi	r3,r2,255
    4b34:	00800074 	movhi	r2,1
    4b38:	10b44904 	addi	r2,r2,-11996
    4b3c:	10c5883a 	add	r2,r2,r3
    4b40:	10800003 	ldbu	r2,0(r2)
    4b44:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    4b48:	e0bfff03 	ldbu	r2,-4(fp)
    4b4c:	100490fa 	slli	r2,r2,3
    4b50:	1009883a 	mov	r4,r2
    4b54:	e0ffff03 	ldbu	r3,-4(fp)
    4b58:	d0a70e44 	addi	r2,gp,-25543
    4b5c:	1885883a 	add	r2,r3,r2
    4b60:	10800003 	ldbu	r2,0(r2)
    4b64:	10c03fcc 	andi	r3,r2,255
    4b68:	00800074 	movhi	r2,1
    4b6c:	10b44904 	addi	r2,r2,-11996
    4b70:	10c5883a 	add	r2,r2,r3
    4b74:	10800003 	ldbu	r2,0(r2)
    4b78:	2085883a 	add	r2,r4,r2
    4b7c:	d0a70405 	stb	r2,-25584(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    4b80:	0001883a 	nop
    4b84:	e037883a 	mov	sp,fp
    4b88:	df000017 	ldw	fp,0(sp)
    4b8c:	dec00104 	addi	sp,sp,4
    4b90:	f800283a 	ret

00004b94 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    4b94:	defffc04 	addi	sp,sp,-16
    4b98:	df000315 	stw	fp,12(sp)
    4b9c:	df000304 	addi	fp,sp,12
    4ba0:	e13ffe15 	stw	r4,-8(fp)
    4ba4:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    4ba8:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    4bac:	00000b06 	br	4bdc <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    4bb0:	e0bffe17 	ldw	r2,-8(fp)
    4bb4:	10c00044 	addi	r3,r2,1
    4bb8:	e0fffe15 	stw	r3,-8(fp)
    4bbc:	e0ffff17 	ldw	r3,-4(fp)
    4bc0:	19000044 	addi	r4,r3,1
    4bc4:	e13fff15 	stw	r4,-4(fp)
    4bc8:	18c00003 	ldbu	r3,0(r3)
    4bcc:	10c00005 	stb	r3,0(r2)
        len++;
    4bd0:	e0bffd03 	ldbu	r2,-12(fp)
    4bd4:	10800044 	addi	r2,r2,1
    4bd8:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4bdc:	e0bfff17 	ldw	r2,-4(fp)
    4be0:	10800003 	ldbu	r2,0(r2)
    4be4:	10803fcc 	andi	r2,r2,255
    4be8:	103ff11e 	bne	r2,zero,4bb0 <__alt_data_end+0xfffec510>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    4bec:	e0bffe17 	ldw	r2,-8(fp)
    4bf0:	10000005 	stb	zero,0(r2)
    return (len);
    4bf4:	e0bffd03 	ldbu	r2,-12(fp)
}
    4bf8:	e037883a 	mov	sp,fp
    4bfc:	df000017 	ldw	fp,0(sp)
    4c00:	dec00104 	addi	sp,sp,4
    4c04:	f800283a 	ret

00004c08 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    4c08:	defffd04 	addi	sp,sp,-12
    4c0c:	df000215 	stw	fp,8(sp)
    4c10:	df000204 	addi	fp,sp,8
    4c14:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    4c18:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    4c1c:	00000606 	br	4c38 <OS_StrLen+0x30>
        psrc++;
    4c20:	e0bfff17 	ldw	r2,-4(fp)
    4c24:	10800044 	addi	r2,r2,1
    4c28:	e0bfff15 	stw	r2,-4(fp)
        len++;
    4c2c:	e0bffe03 	ldbu	r2,-8(fp)
    4c30:	10800044 	addi	r2,r2,1
    4c34:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4c38:	e0bfff17 	ldw	r2,-4(fp)
    4c3c:	10800003 	ldbu	r2,0(r2)
    4c40:	10803fcc 	andi	r2,r2,255
    4c44:	103ff61e 	bne	r2,zero,4c20 <__alt_data_end+0xfffec580>
        psrc++;
        len++;
    }
    return (len);
    4c48:	e0bffe03 	ldbu	r2,-8(fp)
}
    4c4c:	e037883a 	mov	sp,fp
    4c50:	df000017 	ldw	fp,0(sp)
    4c54:	dec00104 	addi	sp,sp,4
    4c58:	f800283a 	ret

00004c5c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    4c5c:	defffa04 	addi	sp,sp,-24
    4c60:	dfc00515 	stw	ra,20(sp)
    4c64:	df000415 	stw	fp,16(sp)
    4c68:	df000404 	addi	fp,sp,16
    4c6c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c70:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c74:	0005303a 	rdctl	r2,status
    4c78:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c7c:	e0fffd17 	ldw	r3,-12(fp)
    4c80:	00bfff84 	movi	r2,-2
    4c84:	1884703a 	and	r2,r3,r2
    4c88:	1001703a 	wrctl	status,r2
  
  return context;
    4c8c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    4c90:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    4c94:	d0a70317 	ldw	r2,-25588(gp)
    4c98:	10800044 	addi	r2,r2,1
    4c9c:	d0a70315 	stw	r2,-25588(gp)
    4ca0:	e0bffc17 	ldw	r2,-16(fp)
    4ca4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ca8:	e0bffe17 	ldw	r2,-8(fp)
    4cac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    4cb0:	000c66c0 	call	c66c <OSTaskIdleHook>
    }
    4cb4:	003fef06 	br	4c74 <__alt_data_end+0xfffec5d4>

00004cb8 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    4cb8:	defffa04 	addi	sp,sp,-24
    4cbc:	dfc00515 	stw	ra,20(sp)
    4cc0:	df000415 	stw	fp,16(sp)
    4cc4:	df000404 	addi	fp,sp,16
    4cc8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4ccc:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4cd0:	00000206 	br	4cdc <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    4cd4:	01003204 	movi	r4,200
    4cd8:	000a3f80 	call	a3f8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4cdc:	d0a71403 	ldbu	r2,-25520(gp)
    4ce0:	10803fcc 	andi	r2,r2,255
    4ce4:	103ffb26 	beq	r2,zero,4cd4 <__alt_data_end+0xfffec634>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    4ce8:	d0a70817 	ldw	r2,-25568(gp)
    4cec:	01401904 	movi	r5,100
    4cf0:	1009883a 	mov	r4,r2
    4cf4:	000d0100 	call	d010 <__udivsi3>
    4cf8:	d0a70815 	stw	r2,-25568(gp)
    if (OSIdleCtrMax == 0L) {
    4cfc:	d0a70817 	ldw	r2,-25568(gp)
    4d00:	1000031e 	bne	r2,zero,4d10 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    4d04:	d0270a05 	stb	zero,-25560(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    4d08:	01003fc4 	movi	r4,255
    4d0c:	000a0800 	call	a080 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d10:	0005303a 	rdctl	r2,status
    4d14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d18:	e0fffd17 	ldw	r3,-12(fp)
    4d1c:	00bfff84 	movi	r2,-2
    4d20:	1884703a 	and	r2,r3,r2
    4d24:	1001703a 	wrctl	status,r2
  
  return context;
    4d28:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    4d2c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    4d30:	d0a70317 	ldw	r2,-25588(gp)
    4d34:	d0a71515 	stw	r2,-25516(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    4d38:	d0270315 	stw	zero,-25588(gp)
    4d3c:	e0bffc17 	ldw	r2,-16(fp)
    4d40:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d44:	e0bffe17 	ldw	r2,-8(fp)
    4d48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    4d4c:	d0a71517 	ldw	r2,-25516(gp)
    4d50:	d0e70817 	ldw	r3,-25568(gp)
    4d54:	180b883a 	mov	r5,r3
    4d58:	1009883a 	mov	r4,r2
    4d5c:	000d0100 	call	d010 <__udivsi3>
    4d60:	1007883a 	mov	r3,r2
    4d64:	00801904 	movi	r2,100
    4d68:	10c5c83a 	sub	r2,r2,r3
    4d6c:	d0a70a05 	stb	r2,-25560(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    4d70:	000c5ec0 	call	c5ec <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    4d74:	0004d840 	call	4d84 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    4d78:	01001904 	movi	r4,100
    4d7c:	000a3f80 	call	a3f8 <OSTimeDly>
    }
    4d80:	003fe306 	br	4d10 <__alt_data_end+0xfffec670>

00004d84 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    4d84:	defffa04 	addi	sp,sp,-24
    4d88:	dfc00515 	stw	ra,20(sp)
    4d8c:	df000415 	stw	fp,16(sp)
    4d90:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4d94:	e03ffc05 	stb	zero,-16(fp)
    4d98:	00002406 	br	4e2c <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    4d9c:	e0bffc03 	ldbu	r2,-16(fp)
    4da0:	e0fffe04 	addi	r3,fp,-8
    4da4:	180b883a 	mov	r5,r3
    4da8:	1009883a 	mov	r4,r2
    4dac:	0009ec00 	call	9ec0 <OSTaskStkChk>
    4db0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    4db4:	e0bffc43 	ldbu	r2,-15(fp)
    4db8:	1000191e 	bne	r2,zero,4e20 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    4dbc:	e0fffc03 	ldbu	r3,-16(fp)
    4dc0:	00800074 	movhi	r2,1
    4dc4:	109ecd04 	addi	r2,r2,31540
    4dc8:	18c7883a 	add	r3,r3,r3
    4dcc:	18c7883a 	add	r3,r3,r3
    4dd0:	10c5883a 	add	r2,r2,r3
    4dd4:	10800017 	ldw	r2,0(r2)
    4dd8:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    4ddc:	e0bffd17 	ldw	r2,-12(fp)
    4de0:	10000f26 	beq	r2,zero,4e20 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    4de4:	e0bffd17 	ldw	r2,-12(fp)
    4de8:	10800060 	cmpeqi	r2,r2,1
    4dec:	10000c1e 	bne	r2,zero,4e20 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    4df0:	e0bffd17 	ldw	r2,-12(fp)
    4df4:	10c00217 	ldw	r3,8(r2)
    4df8:	e0bffd17 	ldw	r2,-12(fp)
    4dfc:	10800317 	ldw	r2,12(r2)
    4e00:	1085883a 	add	r2,r2,r2
    4e04:	1085883a 	add	r2,r2,r2
    4e08:	1887883a 	add	r3,r3,r2
    4e0c:	e0bffd17 	ldw	r2,-12(fp)
    4e10:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    4e14:	e0ffff17 	ldw	r3,-4(fp)
    4e18:	e0bffd17 	ldw	r2,-12(fp)
    4e1c:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4e20:	e0bffc03 	ldbu	r2,-16(fp)
    4e24:	10800044 	addi	r2,r2,1
    4e28:	e0bffc05 	stb	r2,-16(fp)
    4e2c:	e0bffc03 	ldbu	r2,-16(fp)
    4e30:	10800570 	cmpltui	r2,r2,21
    4e34:	103fd91e 	bne	r2,zero,4d9c <__alt_data_end+0xfffec6fc>
#endif
                }
            }
        }
    }
}
    4e38:	0001883a 	nop
    4e3c:	e037883a 	mov	sp,fp
    4e40:	dfc00117 	ldw	ra,4(sp)
    4e44:	df000017 	ldw	fp,0(sp)
    4e48:	dec00204 	addi	sp,sp,8
    4e4c:	f800283a 	ret

00004e50 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    4e50:	defff204 	addi	sp,sp,-56
    4e54:	dfc00d15 	stw	ra,52(sp)
    4e58:	df000c15 	stw	fp,48(sp)
    4e5c:	df000c04 	addi	fp,sp,48
    4e60:	e17ffc15 	stw	r5,-16(fp)
    4e64:	e1bffd15 	stw	r6,-12(fp)
    4e68:	3807883a 	mov	r3,r7
    4e6c:	e0800417 	ldw	r2,16(fp)
    4e70:	e13ffb05 	stb	r4,-20(fp)
    4e74:	e0fffe0d 	sth	r3,-8(fp)
    4e78:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4e7c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e80:	0005303a 	rdctl	r2,status
    4e84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e88:	e0fffa17 	ldw	r3,-24(fp)
    4e8c:	00bfff84 	movi	r2,-2
    4e90:	1884703a 	and	r2,r3,r2
    4e94:	1001703a 	wrctl	status,r2
  
  return context;
    4e98:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    4e9c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    4ea0:	d0a70917 	ldw	r2,-25564(gp)
    4ea4:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    4ea8:	e0bff617 	ldw	r2,-40(fp)
    4eac:	10009326 	beq	r2,zero,50fc <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    4eb0:	e0bff617 	ldw	r2,-40(fp)
    4eb4:	10800517 	ldw	r2,20(r2)
    4eb8:	d0a70915 	stw	r2,-25564(gp)
    4ebc:	e0bff417 	ldw	r2,-48(fp)
    4ec0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ec4:	e0bff817 	ldw	r2,-32(fp)
    4ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    4ecc:	e0bff617 	ldw	r2,-40(fp)
    4ed0:	e0fffc17 	ldw	r3,-16(fp)
    4ed4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    4ed8:	e0bff617 	ldw	r2,-40(fp)
    4edc:	e0fffb03 	ldbu	r3,-20(fp)
    4ee0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    4ee4:	e0bff617 	ldw	r2,-40(fp)
    4ee8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    4eec:	e0bff617 	ldw	r2,-40(fp)
    4ef0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    4ef4:	e0bff617 	ldw	r2,-40(fp)
    4ef8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    4efc:	e0bff617 	ldw	r2,-40(fp)
    4f00:	e0c00317 	ldw	r3,12(fp)
    4f04:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    4f08:	e0bff617 	ldw	r2,-40(fp)
    4f0c:	e0c00217 	ldw	r3,8(fp)
    4f10:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    4f14:	e0bff617 	ldw	r2,-40(fp)
    4f18:	e0fffd17 	ldw	r3,-12(fp)
    4f1c:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    4f20:	e0bff617 	ldw	r2,-40(fp)
    4f24:	e0ffff0b 	ldhu	r3,-4(fp)
    4f28:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    4f2c:	e0bff617 	ldw	r2,-40(fp)
    4f30:	e0fffe0b 	ldhu	r3,-8(fp)
    4f34:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    4f38:	e0bff617 	ldw	r2,-40(fp)
    4f3c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    4f40:	e0bffb03 	ldbu	r2,-20(fp)
    4f44:	1004d0fa 	srli	r2,r2,3
    4f48:	1007883a 	mov	r3,r2
    4f4c:	e0bff617 	ldw	r2,-40(fp)
    4f50:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    4f54:	e0bffb03 	ldbu	r2,-20(fp)
    4f58:	108001cc 	andi	r2,r2,7
    4f5c:	1007883a 	mov	r3,r2
    4f60:	e0bff617 	ldw	r2,-40(fp)
    4f64:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    4f68:	e0bff617 	ldw	r2,-40(fp)
    4f6c:	10800d03 	ldbu	r2,52(r2)
    4f70:	10803fcc 	andi	r2,r2,255
    4f74:	00c00044 	movi	r3,1
    4f78:	1884983a 	sll	r2,r3,r2
    4f7c:	1007883a 	mov	r3,r2
    4f80:	e0bff617 	ldw	r2,-40(fp)
    4f84:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    4f88:	e0bff617 	ldw	r2,-40(fp)
    4f8c:	10800cc3 	ldbu	r2,51(r2)
    4f90:	10803fcc 	andi	r2,r2,255
    4f94:	00c00044 	movi	r3,1
    4f98:	1884983a 	sll	r2,r3,r2
    4f9c:	1007883a 	mov	r3,r2
    4fa0:	e0bff617 	ldw	r2,-40(fp)
    4fa4:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    4fa8:	e0bff617 	ldw	r2,-40(fp)
    4fac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    4fb0:	e0bff617 	ldw	r2,-40(fp)
    4fb4:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    4fb8:	e0bff617 	ldw	r2,-40(fp)
    4fbc:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    4fc0:	e0bff617 	ldw	r2,-40(fp)
    4fc4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    4fc8:	e0bff617 	ldw	r2,-40(fp)
    4fcc:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    4fd0:	e0bff617 	ldw	r2,-40(fp)
    4fd4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    4fd8:	e0bff617 	ldw	r2,-40(fp)
    4fdc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    4fe0:	e0bff617 	ldw	r2,-40(fp)
    4fe4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    4fe8:	e0bff617 	ldw	r2,-40(fp)
    4fec:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    4ff0:	e0bff617 	ldw	r2,-40(fp)
    4ff4:	00c00fc4 	movi	r3,63
    4ff8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    4ffc:	e0bff617 	ldw	r2,-40(fp)
    5000:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5004:	e13ff617 	ldw	r4,-40(fp)
    5008:	000c68c0 	call	c68c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    500c:	e13ff617 	ldw	r4,-40(fp)
    5010:	000c5840 	call	c584 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5014:	0005303a 	rdctl	r2,status
    5018:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    501c:	e0fff517 	ldw	r3,-44(fp)
    5020:	00bfff84 	movi	r2,-2
    5024:	1884703a 	and	r2,r3,r2
    5028:	1001703a 	wrctl	status,r2
  
  return context;
    502c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    5030:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5034:	e0fffb03 	ldbu	r3,-20(fp)
    5038:	00800074 	movhi	r2,1
    503c:	109ecd04 	addi	r2,r2,31540
    5040:	18c7883a 	add	r3,r3,r3
    5044:	18c7883a 	add	r3,r3,r3
    5048:	10c5883a 	add	r2,r2,r3
    504c:	e0fff617 	ldw	r3,-40(fp)
    5050:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5054:	d0e70517 	ldw	r3,-25580(gp)
    5058:	e0bff617 	ldw	r2,-40(fp)
    505c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    5060:	e0bff617 	ldw	r2,-40(fp)
    5064:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5068:	d0a70517 	ldw	r2,-25580(gp)
    506c:	10000326 	beq	r2,zero,507c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    5070:	d0a70517 	ldw	r2,-25580(gp)
    5074:	e0fff617 	ldw	r3,-40(fp)
    5078:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    507c:	e0bff617 	ldw	r2,-40(fp)
    5080:	d0a70515 	stw	r2,-25580(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5084:	e0bff617 	ldw	r2,-40(fp)
    5088:	10c00d83 	ldbu	r3,54(r2)
    508c:	d0a70e03 	ldbu	r2,-25544(gp)
    5090:	1884b03a 	or	r2,r3,r2
    5094:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5098:	e0bff617 	ldw	r2,-40(fp)
    509c:	10800d03 	ldbu	r2,52(r2)
    50a0:	10c03fcc 	andi	r3,r2,255
    50a4:	e0bff617 	ldw	r2,-40(fp)
    50a8:	10800d03 	ldbu	r2,52(r2)
    50ac:	11003fcc 	andi	r4,r2,255
    50b0:	d0a70e44 	addi	r2,gp,-25543
    50b4:	2085883a 	add	r2,r4,r2
    50b8:	11000003 	ldbu	r4,0(r2)
    50bc:	e0bff617 	ldw	r2,-40(fp)
    50c0:	10800d43 	ldbu	r2,53(r2)
    50c4:	2084b03a 	or	r2,r4,r2
    50c8:	1009883a 	mov	r4,r2
    50cc:	d0a70e44 	addi	r2,gp,-25543
    50d0:	1885883a 	add	r2,r3,r2
    50d4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    50d8:	d0a70a43 	ldbu	r2,-25559(gp)
    50dc:	10800044 	addi	r2,r2,1
    50e0:	d0a70a45 	stb	r2,-25559(gp)
    50e4:	e0bff417 	ldw	r2,-48(fp)
    50e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50ec:	e0bff717 	ldw	r2,-36(fp)
    50f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    50f4:	0005883a 	mov	r2,zero
    50f8:	00000506 	br	5110 <OS_TCBInit+0x2c0>
    50fc:	e0bff417 	ldw	r2,-48(fp)
    5100:	e0bff915 	stw	r2,-28(fp)
    5104:	e0bff917 	ldw	r2,-28(fp)
    5108:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    510c:	00801084 	movi	r2,66
}
    5110:	e037883a 	mov	sp,fp
    5114:	dfc00117 	ldw	ra,4(sp)
    5118:	df000017 	ldw	fp,0(sp)
    511c:	dec00204 	addi	sp,sp,8
    5120:	f800283a 	ret

00005124 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5124:	defffe04 	addi	sp,sp,-8
    5128:	df000115 	stw	fp,4(sp)
    512c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    5130:	d0a00d04 	addi	r2,gp,-32716
    5134:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5138:	d0a00e04 	addi	r2,gp,-32712
    513c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    5140:	d0a00f84 	addi	r2,gp,-32706
    5144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5148:	d0a01004 	addi	r2,gp,-32704
    514c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    5150:	d0a00f04 	addi	r2,gp,-32708
    5154:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5158:	d0a01084 	addi	r2,gp,-32702
    515c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    5160:	d0a01104 	addi	r2,gp,-32700
    5164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5168:	d0a01184 	addi	r2,gp,-32698
    516c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    5170:	d0a01204 	addi	r2,gp,-32696
    5174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5178:	d0a01284 	addi	r2,gp,-32694
    517c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    5180:	d0a01304 	addi	r2,gp,-32692
    5184:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5188:	d0a01384 	addi	r2,gp,-32690
    518c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    5190:	d0a01404 	addi	r2,gp,-32688
    5194:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5198:	d0a01484 	addi	r2,gp,-32686
    519c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    51a0:	d0a01504 	addi	r2,gp,-32684
    51a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    51a8:	d0a01584 	addi	r2,gp,-32682
    51ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    51b0:	d0a01604 	addi	r2,gp,-32680
    51b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    51b8:	d0a01684 	addi	r2,gp,-32678
    51bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    51c0:	d0a01704 	addi	r2,gp,-32676
    51c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    51c8:	d0a01784 	addi	r2,gp,-32674
    51cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    51d0:	d0a01804 	addi	r2,gp,-32672
    51d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    51d8:	d0a01884 	addi	r2,gp,-32670
    51dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    51e0:	d0a01904 	addi	r2,gp,-32668
    51e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    51e8:	d0a01984 	addi	r2,gp,-32666
    51ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    51f0:	d0a01a04 	addi	r2,gp,-32664
    51f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    51f8:	d0a01a84 	addi	r2,gp,-32662
    51fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    5200:	d0a01b04 	addi	r2,gp,-32660
    5204:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5208:	d0a01b84 	addi	r2,gp,-32658
    520c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    5210:	d0a01c04 	addi	r2,gp,-32656
    5214:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5218:	d0a01c84 	addi	r2,gp,-32654
    521c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    5220:	d0a01d04 	addi	r2,gp,-32652
    5224:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5228:	d0a01d84 	addi	r2,gp,-32650
    522c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    5230:	d0a01e04 	addi	r2,gp,-32648
    5234:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5238:	d0a01e84 	addi	r2,gp,-32646
    523c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    5240:	d0a01f04 	addi	r2,gp,-32644
    5244:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5248:	d0a01f84 	addi	r2,gp,-32642
    524c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    5250:	d0a02004 	addi	r2,gp,-32640
    5254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5258:	d0a02084 	addi	r2,gp,-32638
    525c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    5260:	d0a02104 	addi	r2,gp,-32636
    5264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5268:	d0a02184 	addi	r2,gp,-32634
    526c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    5270:	d0a02204 	addi	r2,gp,-32632
    5274:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    5278:	d0a02284 	addi	r2,gp,-32630
    527c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    5280:	d0a02304 	addi	r2,gp,-32628
    5284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    5288:	d0a02384 	addi	r2,gp,-32626
    528c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    5290:	d0a02404 	addi	r2,gp,-32624
    5294:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    5298:	d0a02904 	addi	r2,gp,-32604
    529c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    52a0:	0001883a 	nop
    52a4:	e037883a 	mov	sp,fp
    52a8:	df000017 	ldw	fp,0(sp)
    52ac:	dec00104 	addi	sp,sp,4
    52b0:	f800283a 	ret

000052b4 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    52b4:	defff204 	addi	sp,sp,-56
    52b8:	df000d15 	stw	fp,52(sp)
    52bc:	df000d04 	addi	fp,sp,52
    52c0:	e13ffc15 	stw	r4,-16(fp)
    52c4:	2807883a 	mov	r3,r5
    52c8:	3005883a 	mov	r2,r6
    52cc:	e1ffff15 	stw	r7,-4(fp)
    52d0:	e0fffd0d 	sth	r3,-12(fp)
    52d4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    52d8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    52dc:	e0bfff17 	ldw	r2,-4(fp)
    52e0:	1000021e 	bne	r2,zero,52ec <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    52e4:	0005883a 	mov	r2,zero
    52e8:	0000b006 	br	55ac <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    52ec:	e0bffc17 	ldw	r2,-16(fp)
    52f0:	1000051e 	bne	r2,zero,5308 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    52f4:	e0bfff17 	ldw	r2,-4(fp)
    52f8:	00c01b84 	movi	r3,110
    52fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5300:	0005883a 	mov	r2,zero
    5304:	0000a906 	br	55ac <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5308:	e0bffc17 	ldw	r2,-16(fp)
    530c:	10800003 	ldbu	r2,0(r2)
    5310:	10803fcc 	andi	r2,r2,255
    5314:	10800160 	cmpeqi	r2,r2,5
    5318:	1000051e 	bne	r2,zero,5330 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    531c:	e0bfff17 	ldw	r2,-4(fp)
    5320:	00c00044 	movi	r3,1
    5324:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5328:	0005883a 	mov	r2,zero
    532c:	00009f06 	br	55ac <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5330:	e0fffe03 	ldbu	r3,-8(fp)
    5334:	00bfe004 	movi	r2,-128
    5338:	1884703a 	and	r2,r3,r2
    533c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    5340:	e0bff503 	ldbu	r2,-44(fp)
    5344:	10000626 	beq	r2,zero,5360 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    5348:	e0bffe03 	ldbu	r2,-8(fp)
    534c:	10801fcc 	andi	r2,r2,127
    5350:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5354:	00800044 	movi	r2,1
    5358:	e0bff385 	stb	r2,-50(fp)
    535c:	00000106 	br	5364 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    5360:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    5364:	e0bfff17 	ldw	r2,-4(fp)
    5368:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    536c:	0005303a 	rdctl	r2,status
    5370:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5374:	e0fffb17 	ldw	r3,-20(fp)
    5378:	00bfff84 	movi	r2,-2
    537c:	1884703a 	and	r2,r3,r2
    5380:	1001703a 	wrctl	status,r2
  
  return context;
    5384:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    5388:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    538c:	e0bffe03 	ldbu	r2,-8(fp)
    5390:	10c00060 	cmpeqi	r3,r2,1
    5394:	18005f1e 	bne	r3,zero,5514 <OSFlagAccept+0x260>
    5398:	10c00088 	cmpgei	r3,r2,2
    539c:	1800021e 	bne	r3,zero,53a8 <OSFlagAccept+0xf4>
    53a0:	10003f26 	beq	r2,zero,54a0 <OSFlagAccept+0x1ec>
    53a4:	00007706 	br	5584 <OSFlagAccept+0x2d0>
    53a8:	10c000a0 	cmpeqi	r3,r2,2
    53ac:	1800031e 	bne	r3,zero,53bc <OSFlagAccept+0x108>
    53b0:	108000e0 	cmpeqi	r2,r2,3
    53b4:	10001e1e 	bne	r2,zero,5430 <OSFlagAccept+0x17c>
    53b8:	00007206 	br	5584 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    53bc:	e0bffc17 	ldw	r2,-16(fp)
    53c0:	10c0020b 	ldhu	r3,8(r2)
    53c4:	e0bffd0b 	ldhu	r2,-12(fp)
    53c8:	1884703a 	and	r2,r3,r2
    53cc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    53d0:	e0fff30b 	ldhu	r3,-52(fp)
    53d4:	e0bffd0b 	ldhu	r2,-12(fp)
    53d8:	18800d1e 	bne	r3,r2,5410 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    53dc:	e0bff383 	ldbu	r2,-50(fp)
    53e0:	10800058 	cmpnei	r2,r2,1
    53e4:	10000d1e 	bne	r2,zero,541c <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    53e8:	e0bffc17 	ldw	r2,-16(fp)
    53ec:	1080020b 	ldhu	r2,8(r2)
    53f0:	1007883a 	mov	r3,r2
    53f4:	e0bff30b 	ldhu	r2,-52(fp)
    53f8:	0084303a 	nor	r2,zero,r2
    53fc:	1884703a 	and	r2,r3,r2
    5400:	1007883a 	mov	r3,r2
    5404:	e0bffc17 	ldw	r2,-16(fp)
    5408:	10c0020d 	sth	r3,8(r2)
    540c:	00000306 	br	541c <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5410:	e0bfff17 	ldw	r2,-4(fp)
    5414:	00c01c04 	movi	r3,112
    5418:	10c00005 	stb	r3,0(r2)
    541c:	e0bff417 	ldw	r2,-48(fp)
    5420:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5424:	e0bff617 	ldw	r2,-40(fp)
    5428:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    542c:	00005e06 	br	55a8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    5430:	e0bffc17 	ldw	r2,-16(fp)
    5434:	10c0020b 	ldhu	r3,8(r2)
    5438:	e0bffd0b 	ldhu	r2,-12(fp)
    543c:	1884703a 	and	r2,r3,r2
    5440:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5444:	e0bff30b 	ldhu	r2,-52(fp)
    5448:	10000d26 	beq	r2,zero,5480 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    544c:	e0bff383 	ldbu	r2,-50(fp)
    5450:	10800058 	cmpnei	r2,r2,1
    5454:	10000d1e 	bne	r2,zero,548c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5458:	e0bffc17 	ldw	r2,-16(fp)
    545c:	1080020b 	ldhu	r2,8(r2)
    5460:	1007883a 	mov	r3,r2
    5464:	e0bff30b 	ldhu	r2,-52(fp)
    5468:	0084303a 	nor	r2,zero,r2
    546c:	1884703a 	and	r2,r3,r2
    5470:	1007883a 	mov	r3,r2
    5474:	e0bffc17 	ldw	r2,-16(fp)
    5478:	10c0020d 	sth	r3,8(r2)
    547c:	00000306 	br	548c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5480:	e0bfff17 	ldw	r2,-4(fp)
    5484:	00c01c04 	movi	r3,112
    5488:	10c00005 	stb	r3,0(r2)
    548c:	e0bff417 	ldw	r2,-48(fp)
    5490:	e0bff715 	stw	r2,-36(fp)
    5494:	e0bff717 	ldw	r2,-36(fp)
    5498:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    549c:	00004206 	br	55a8 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    54a0:	e0bffc17 	ldw	r2,-16(fp)
    54a4:	1080020b 	ldhu	r2,8(r2)
    54a8:	0084303a 	nor	r2,zero,r2
    54ac:	1007883a 	mov	r3,r2
    54b0:	e0bffd0b 	ldhu	r2,-12(fp)
    54b4:	1884703a 	and	r2,r3,r2
    54b8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    54bc:	e0fff30b 	ldhu	r3,-52(fp)
    54c0:	e0bffd0b 	ldhu	r2,-12(fp)
    54c4:	18800b1e 	bne	r3,r2,54f4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    54c8:	e0bff383 	ldbu	r2,-50(fp)
    54cc:	10800058 	cmpnei	r2,r2,1
    54d0:	10000b1e 	bne	r2,zero,5500 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    54d4:	e0bffc17 	ldw	r2,-16(fp)
    54d8:	10c0020b 	ldhu	r3,8(r2)
    54dc:	e0bff30b 	ldhu	r2,-52(fp)
    54e0:	1884b03a 	or	r2,r3,r2
    54e4:	1007883a 	mov	r3,r2
    54e8:	e0bffc17 	ldw	r2,-16(fp)
    54ec:	10c0020d 	sth	r3,8(r2)
    54f0:	00000306 	br	5500 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    54f4:	e0bfff17 	ldw	r2,-4(fp)
    54f8:	00c01c04 	movi	r3,112
    54fc:	10c00005 	stb	r3,0(r2)
    5500:	e0bff417 	ldw	r2,-48(fp)
    5504:	e0bff815 	stw	r2,-32(fp)
    5508:	e0bff817 	ldw	r2,-32(fp)
    550c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5510:	00002506 	br	55a8 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5514:	e0bffc17 	ldw	r2,-16(fp)
    5518:	1080020b 	ldhu	r2,8(r2)
    551c:	0084303a 	nor	r2,zero,r2
    5520:	1007883a 	mov	r3,r2
    5524:	e0bffd0b 	ldhu	r2,-12(fp)
    5528:	1884703a 	and	r2,r3,r2
    552c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5530:	e0bff30b 	ldhu	r2,-52(fp)
    5534:	10000b26 	beq	r2,zero,5564 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5538:	e0bff383 	ldbu	r2,-50(fp)
    553c:	10800058 	cmpnei	r2,r2,1
    5540:	10000b1e 	bne	r2,zero,5570 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5544:	e0bffc17 	ldw	r2,-16(fp)
    5548:	10c0020b 	ldhu	r3,8(r2)
    554c:	e0bff30b 	ldhu	r2,-52(fp)
    5550:	1884b03a 	or	r2,r3,r2
    5554:	1007883a 	mov	r3,r2
    5558:	e0bffc17 	ldw	r2,-16(fp)
    555c:	10c0020d 	sth	r3,8(r2)
    5560:	00000306 	br	5570 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5564:	e0bfff17 	ldw	r2,-4(fp)
    5568:	00c01c04 	movi	r3,112
    556c:	10c00005 	stb	r3,0(r2)
    5570:	e0bff417 	ldw	r2,-48(fp)
    5574:	e0bff915 	stw	r2,-28(fp)
    5578:	e0bff917 	ldw	r2,-28(fp)
    557c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5580:	00000906 	br	55a8 <OSFlagAccept+0x2f4>
    5584:	e0bff417 	ldw	r2,-48(fp)
    5588:	e0bffa15 	stw	r2,-24(fp)
    558c:	e0bffa17 	ldw	r2,-24(fp)
    5590:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5594:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    5598:	e0bfff17 	ldw	r2,-4(fp)
    559c:	00c01bc4 	movi	r3,111
    55a0:	10c00005 	stb	r3,0(r2)
             break;
    55a4:	0001883a 	nop
    }
    return (flags_rdy);
    55a8:	e0bff30b 	ldhu	r2,-52(fp)
}
    55ac:	e037883a 	mov	sp,fp
    55b0:	df000017 	ldw	fp,0(sp)
    55b4:	dec00104 	addi	sp,sp,4
    55b8:	f800283a 	ret

000055bc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    55bc:	defff804 	addi	sp,sp,-32
    55c0:	df000715 	stw	fp,28(sp)
    55c4:	df000704 	addi	fp,sp,28
    55c8:	2005883a 	mov	r2,r4
    55cc:	e17fff15 	stw	r5,-4(fp)
    55d0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    55d4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    55d8:	e0bfff17 	ldw	r2,-4(fp)
    55dc:	1000021e 	bne	r2,zero,55e8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    55e0:	0005883a 	mov	r2,zero
    55e4:	00003306 	br	56b4 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    55e8:	d0a71003 	ldbu	r2,-25536(gp)
    55ec:	10803fcc 	andi	r2,r2,255
    55f0:	10000526 	beq	r2,zero,5608 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    55f4:	e0bfff17 	ldw	r2,-4(fp)
    55f8:	00c00404 	movi	r3,16
    55fc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    5600:	0005883a 	mov	r2,zero
    5604:	00002b06 	br	56b4 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5608:	0005303a 	rdctl	r2,status
    560c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5610:	e0fffd17 	ldw	r3,-12(fp)
    5614:	00bfff84 	movi	r2,-2
    5618:	1884703a 	and	r2,r3,r2
    561c:	1001703a 	wrctl	status,r2
  
  return context;
    5620:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5624:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    5628:	d0a71317 	ldw	r2,-25524(gp)
    562c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    5630:	e0bffb17 	ldw	r2,-20(fp)
    5634:	10001726 	beq	r2,zero,5694 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    5638:	d0a71317 	ldw	r2,-25524(gp)
    563c:	10800117 	ldw	r2,4(r2)
    5640:	d0a71315 	stw	r2,-25524(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    5644:	e0bffb17 	ldw	r2,-20(fp)
    5648:	00c00144 	movi	r3,5
    564c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    5650:	e0bffb17 	ldw	r2,-20(fp)
    5654:	e0fffe0b 	ldhu	r3,-8(fp)
    5658:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    565c:	e0bffb17 	ldw	r2,-20(fp)
    5660:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    5664:	e0bffb17 	ldw	r2,-20(fp)
    5668:	00c00fc4 	movi	r3,63
    566c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    5670:	e0bffb17 	ldw	r2,-20(fp)
    5674:	100002c5 	stb	zero,11(r2)
    5678:	e0bff917 	ldw	r2,-28(fp)
    567c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5680:	e0bffa17 	ldw	r2,-24(fp)
    5684:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    5688:	e0bfff17 	ldw	r2,-4(fp)
    568c:	10000005 	stb	zero,0(r2)
    5690:	00000706 	br	56b0 <OSFlagCreate+0xf4>
    5694:	e0bff917 	ldw	r2,-28(fp)
    5698:	e0bffc15 	stw	r2,-16(fp)
    569c:	e0bffc17 	ldw	r2,-16(fp)
    56a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    56a4:	e0bfff17 	ldw	r2,-4(fp)
    56a8:	00c01c84 	movi	r3,114
    56ac:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    56b0:	e0bffb17 	ldw	r2,-20(fp)
}
    56b4:	e037883a 	mov	sp,fp
    56b8:	df000017 	ldw	fp,0(sp)
    56bc:	dec00104 	addi	sp,sp,4
    56c0:	f800283a 	ret

000056c4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    56c4:	defff204 	addi	sp,sp,-56
    56c8:	dfc00d15 	stw	ra,52(sp)
    56cc:	df000c15 	stw	fp,48(sp)
    56d0:	df000c04 	addi	fp,sp,48
    56d4:	e13ffd15 	stw	r4,-12(fp)
    56d8:	2805883a 	mov	r2,r5
    56dc:	e1bfff15 	stw	r6,-4(fp)
    56e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    56e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    56e8:	e0bfff17 	ldw	r2,-4(fp)
    56ec:	1000021e 	bne	r2,zero,56f8 <OSFlagDel+0x34>
        return (pgrp);
    56f0:	e0bffd17 	ldw	r2,-12(fp)
    56f4:	00008006 	br	58f8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    56f8:	e0bffd17 	ldw	r2,-12(fp)
    56fc:	1000051e 	bne	r2,zero,5714 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5700:	e0bfff17 	ldw	r2,-4(fp)
    5704:	00c01b84 	movi	r3,110
    5708:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    570c:	e0bffd17 	ldw	r2,-12(fp)
    5710:	00007906 	br	58f8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5714:	d0a71003 	ldbu	r2,-25536(gp)
    5718:	10803fcc 	andi	r2,r2,255
    571c:	10000526 	beq	r2,zero,5734 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    5720:	e0bfff17 	ldw	r2,-4(fp)
    5724:	00c003c4 	movi	r3,15
    5728:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    572c:	e0bffd17 	ldw	r2,-12(fp)
    5730:	00007106 	br	58f8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    5734:	e0bffd17 	ldw	r2,-12(fp)
    5738:	10800003 	ldbu	r2,0(r2)
    573c:	10803fcc 	andi	r2,r2,255
    5740:	10800160 	cmpeqi	r2,r2,5
    5744:	1000051e 	bne	r2,zero,575c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    5748:	e0bfff17 	ldw	r2,-4(fp)
    574c:	00c00044 	movi	r3,1
    5750:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    5754:	e0bffd17 	ldw	r2,-12(fp)
    5758:	00006706 	br	58f8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    575c:	0005303a 	rdctl	r2,status
    5760:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5764:	e0fffc17 	ldw	r3,-16(fp)
    5768:	00bfff84 	movi	r2,-2
    576c:	1884703a 	and	r2,r3,r2
    5770:	1001703a 	wrctl	status,r2
  
  return context;
    5774:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5778:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    577c:	e0bffd17 	ldw	r2,-12(fp)
    5780:	10800117 	ldw	r2,4(r2)
    5784:	10000326 	beq	r2,zero,5794 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5788:	00800044 	movi	r2,1
    578c:	e0bff405 	stb	r2,-48(fp)
    5790:	00000106 	br	5798 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    5794:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    5798:	e0bffe03 	ldbu	r2,-8(fp)
    579c:	10000326 	beq	r2,zero,57ac <OSFlagDel+0xe8>
    57a0:	10800060 	cmpeqi	r2,r2,1
    57a4:	1000231e 	bne	r2,zero,5834 <OSFlagDel+0x170>
    57a8:	00004806 	br	58cc <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    57ac:	e0bff403 	ldbu	r2,-48(fp)
    57b0:	1000161e 	bne	r2,zero,580c <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    57b4:	e0bffd17 	ldw	r2,-12(fp)
    57b8:	00c00fc4 	movi	r3,63
    57bc:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    57c0:	e0bffd17 	ldw	r2,-12(fp)
    57c4:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    57c8:	e0bffd17 	ldw	r2,-12(fp)
    57cc:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    57d0:	d0e71317 	ldw	r3,-25524(gp)
    57d4:	e0bffd17 	ldw	r2,-12(fp)
    57d8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    57dc:	e0bffd17 	ldw	r2,-12(fp)
    57e0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    57e4:	e0bffd17 	ldw	r2,-12(fp)
    57e8:	d0a71315 	stw	r2,-25524(gp)
    57ec:	e0bff717 	ldw	r2,-36(fp)
    57f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57f4:	e0bff817 	ldw	r2,-32(fp)
    57f8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    57fc:	e0bfff17 	ldw	r2,-4(fp)
    5800:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    5804:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    5808:	00003a06 	br	58f4 <OSFlagDel+0x230>
    580c:	e0bff717 	ldw	r2,-36(fp)
    5810:	e0bff915 	stw	r2,-28(fp)
    5814:	e0bff917 	ldw	r2,-28(fp)
    5818:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    581c:	e0bfff17 	ldw	r2,-4(fp)
    5820:	00c01244 	movi	r3,73
    5824:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    5828:	e0bffd17 	ldw	r2,-12(fp)
    582c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    5830:	00003006 	br	58f4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5834:	e0bffd17 	ldw	r2,-12(fp)
    5838:	10800117 	ldw	r2,4(r2)
    583c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    5840:	00000606 	br	585c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    5844:	000b883a 	mov	r5,zero
    5848:	e13ff517 	ldw	r4,-44(fp)
    584c:	00068300 	call	6830 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    5850:	e0bff517 	ldw	r2,-44(fp)
    5854:	10800017 	ldw	r2,0(r2)
    5858:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    585c:	e0bff517 	ldw	r2,-44(fp)
    5860:	103ff81e 	bne	r2,zero,5844 <__alt_data_end+0xfffed1a4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    5864:	e0bffd17 	ldw	r2,-12(fp)
    5868:	00c00fc4 	movi	r3,63
    586c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    5870:	e0bffd17 	ldw	r2,-12(fp)
    5874:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5878:	e0bffd17 	ldw	r2,-12(fp)
    587c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    5880:	d0e71317 	ldw	r3,-25524(gp)
    5884:	e0bffd17 	ldw	r2,-12(fp)
    5888:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    588c:	e0bffd17 	ldw	r2,-12(fp)
    5890:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    5894:	e0bffd17 	ldw	r2,-12(fp)
    5898:	d0a71315 	stw	r2,-25524(gp)
    589c:	e0bff717 	ldw	r2,-36(fp)
    58a0:	e0bffa15 	stw	r2,-24(fp)
    58a4:	e0bffa17 	ldw	r2,-24(fp)
    58a8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    58ac:	e0bff403 	ldbu	r2,-48(fp)
    58b0:	10800058 	cmpnei	r2,r2,1
    58b4:	1000011e 	bne	r2,zero,58bc <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    58b8:	0004a500 	call	4a50 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    58bc:	e0bfff17 	ldw	r2,-4(fp)
    58c0:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    58c4:	e03ff615 	stw	zero,-40(fp)
             break;
    58c8:	00000a06 	br	58f4 <OSFlagDel+0x230>
    58cc:	e0bff717 	ldw	r2,-36(fp)
    58d0:	e0bffb15 	stw	r2,-20(fp)
    58d4:	e0bffb17 	ldw	r2,-20(fp)
    58d8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    58dc:	e0bfff17 	ldw	r2,-4(fp)
    58e0:	00c001c4 	movi	r3,7
    58e4:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    58e8:	e0bffd17 	ldw	r2,-12(fp)
    58ec:	e0bff615 	stw	r2,-40(fp)
             break;
    58f0:	0001883a 	nop
    }
    return (pgrp_return);
    58f4:	e0bff617 	ldw	r2,-40(fp)
}
    58f8:	e037883a 	mov	sp,fp
    58fc:	dfc00117 	ldw	ra,4(sp)
    5900:	df000017 	ldw	fp,0(sp)
    5904:	dec00204 	addi	sp,sp,8
    5908:	f800283a 	ret

0000590c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    590c:	defff604 	addi	sp,sp,-40
    5910:	dfc00915 	stw	ra,36(sp)
    5914:	df000815 	stw	fp,32(sp)
    5918:	df000804 	addi	fp,sp,32
    591c:	e13ffd15 	stw	r4,-12(fp)
    5920:	e17ffe15 	stw	r5,-8(fp)
    5924:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5928:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    592c:	e0bfff17 	ldw	r2,-4(fp)
    5930:	1000021e 	bne	r2,zero,593c <OSFlagNameGet+0x30>
        return (0);
    5934:	0005883a 	mov	r2,zero
    5938:	00003906 	br	5a20 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    593c:	e0bffd17 	ldw	r2,-12(fp)
    5940:	1000051e 	bne	r2,zero,5958 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5944:	e0bfff17 	ldw	r2,-4(fp)
    5948:	00c01b84 	movi	r3,110
    594c:	10c00005 	stb	r3,0(r2)
        return (0);
    5950:	0005883a 	mov	r2,zero
    5954:	00003206 	br	5a20 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5958:	e0bffe17 	ldw	r2,-8(fp)
    595c:	1000051e 	bne	r2,zero,5974 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    5960:	e0bfff17 	ldw	r2,-4(fp)
    5964:	00c00304 	movi	r3,12
    5968:	10c00005 	stb	r3,0(r2)
        return (0);
    596c:	0005883a 	mov	r2,zero
    5970:	00002b06 	br	5a20 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5974:	d0a71003 	ldbu	r2,-25536(gp)
    5978:	10803fcc 	andi	r2,r2,255
    597c:	10000526 	beq	r2,zero,5994 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    5980:	e0bfff17 	ldw	r2,-4(fp)
    5984:	00c00444 	movi	r3,17
    5988:	10c00005 	stb	r3,0(r2)
        return (0);
    598c:	0005883a 	mov	r2,zero
    5990:	00002306 	br	5a20 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5994:	0005303a 	rdctl	r2,status
    5998:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    599c:	e0fffc17 	ldw	r3,-16(fp)
    59a0:	00bfff84 	movi	r2,-2
    59a4:	1884703a 	and	r2,r3,r2
    59a8:	1001703a 	wrctl	status,r2
  
  return context;
    59ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    59b0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    59b4:	e0bffd17 	ldw	r2,-12(fp)
    59b8:	10800003 	ldbu	r2,0(r2)
    59bc:	10803fcc 	andi	r2,r2,255
    59c0:	10800160 	cmpeqi	r2,r2,5
    59c4:	1000091e 	bne	r2,zero,59ec <OSFlagNameGet+0xe0>
    59c8:	e0bff817 	ldw	r2,-32(fp)
    59cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59d0:	e0bff917 	ldw	r2,-28(fp)
    59d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    59d8:	e0bfff17 	ldw	r2,-4(fp)
    59dc:	00c00044 	movi	r3,1
    59e0:	10c00005 	stb	r3,0(r2)
        return (0);
    59e4:	0005883a 	mov	r2,zero
    59e8:	00000d06 	br	5a20 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    59ec:	e0bffd17 	ldw	r2,-12(fp)
    59f0:	10800284 	addi	r2,r2,10
    59f4:	100b883a 	mov	r5,r2
    59f8:	e13ffe17 	ldw	r4,-8(fp)
    59fc:	0004b940 	call	4b94 <OS_StrCopy>
    5a00:	e0bffb05 	stb	r2,-20(fp)
    5a04:	e0bff817 	ldw	r2,-32(fp)
    5a08:	e0bffa15 	stw	r2,-24(fp)
    5a0c:	e0bffa17 	ldw	r2,-24(fp)
    5a10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5a14:	e0bfff17 	ldw	r2,-4(fp)
    5a18:	10000005 	stb	zero,0(r2)
    return (len);
    5a1c:	e0bffb03 	ldbu	r2,-20(fp)
}
    5a20:	e037883a 	mov	sp,fp
    5a24:	dfc00117 	ldw	ra,4(sp)
    5a28:	df000017 	ldw	fp,0(sp)
    5a2c:	dec00204 	addi	sp,sp,8
    5a30:	f800283a 	ret

00005a34 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    5a34:	defff504 	addi	sp,sp,-44
    5a38:	dfc00a15 	stw	ra,40(sp)
    5a3c:	df000915 	stw	fp,36(sp)
    5a40:	df000904 	addi	fp,sp,36
    5a44:	e13ffd15 	stw	r4,-12(fp)
    5a48:	e17ffe15 	stw	r5,-8(fp)
    5a4c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a50:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5a54:	e0bfff17 	ldw	r2,-4(fp)
    5a58:	10004326 	beq	r2,zero,5b68 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    5a5c:	e0bffd17 	ldw	r2,-12(fp)
    5a60:	1000041e 	bne	r2,zero,5a74 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5a64:	e0bfff17 	ldw	r2,-4(fp)
    5a68:	00c01b84 	movi	r3,110
    5a6c:	10c00005 	stb	r3,0(r2)
        return;
    5a70:	00003e06 	br	5b6c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5a74:	e0bffe17 	ldw	r2,-8(fp)
    5a78:	1000041e 	bne	r2,zero,5a8c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    5a7c:	e0bfff17 	ldw	r2,-4(fp)
    5a80:	00c00304 	movi	r3,12
    5a84:	10c00005 	stb	r3,0(r2)
        return;
    5a88:	00003806 	br	5b6c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5a8c:	d0a71003 	ldbu	r2,-25536(gp)
    5a90:	10803fcc 	andi	r2,r2,255
    5a94:	10000426 	beq	r2,zero,5aa8 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    5a98:	e0bfff17 	ldw	r2,-4(fp)
    5a9c:	00c00484 	movi	r3,18
    5aa0:	10c00005 	stb	r3,0(r2)
        return;
    5aa4:	00003106 	br	5b6c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5aa8:	0005303a 	rdctl	r2,status
    5aac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5ab0:	e0fffc17 	ldw	r3,-16(fp)
    5ab4:	00bfff84 	movi	r2,-2
    5ab8:	1884703a 	and	r2,r3,r2
    5abc:	1001703a 	wrctl	status,r2
  
  return context;
    5ac0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5ac4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    5ac8:	e0bffd17 	ldw	r2,-12(fp)
    5acc:	10800003 	ldbu	r2,0(r2)
    5ad0:	10803fcc 	andi	r2,r2,255
    5ad4:	10800160 	cmpeqi	r2,r2,5
    5ad8:	1000081e 	bne	r2,zero,5afc <OSFlagNameSet+0xc8>
    5adc:	e0bff717 	ldw	r2,-36(fp)
    5ae0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ae4:	e0bff817 	ldw	r2,-32(fp)
    5ae8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    5aec:	e0bfff17 	ldw	r2,-4(fp)
    5af0:	00c00044 	movi	r3,1
    5af4:	10c00005 	stb	r3,0(r2)
        return;
    5af8:	00001c06 	br	5b6c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    5afc:	e13ffe17 	ldw	r4,-8(fp)
    5b00:	0004c080 	call	4c08 <OS_StrLen>
    5b04:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    5b08:	e0bffa03 	ldbu	r2,-24(fp)
    5b0c:	10800830 	cmpltui	r2,r2,32
    5b10:	1000081e 	bne	r2,zero,5b34 <OSFlagNameSet+0x100>
    5b14:	e0bff717 	ldw	r2,-36(fp)
    5b18:	e0bff915 	stw	r2,-28(fp)
    5b1c:	e0bff917 	ldw	r2,-28(fp)
    5b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    5b24:	e0bfff17 	ldw	r2,-4(fp)
    5b28:	00c01cc4 	movi	r3,115
    5b2c:	10c00005 	stb	r3,0(r2)
        return;
    5b30:	00000e06 	br	5b6c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    5b34:	e0bffd17 	ldw	r2,-12(fp)
    5b38:	10800284 	addi	r2,r2,10
    5b3c:	e17ffe17 	ldw	r5,-8(fp)
    5b40:	1009883a 	mov	r4,r2
    5b44:	0004b940 	call	4b94 <OS_StrCopy>
    5b48:	e0bff717 	ldw	r2,-36(fp)
    5b4c:	e0bffb15 	stw	r2,-20(fp)
    5b50:	e0bffb17 	ldw	r2,-20(fp)
    5b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5b58:	e0bfff17 	ldw	r2,-4(fp)
    5b5c:	10000005 	stb	zero,0(r2)
    return;
    5b60:	0001883a 	nop
    5b64:	00000106 	br	5b6c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    5b68:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    5b6c:	e037883a 	mov	sp,fp
    5b70:	dfc00117 	ldw	ra,4(sp)
    5b74:	df000017 	ldw	fp,0(sp)
    5b78:	dec00204 	addi	sp,sp,8
    5b7c:	f800283a 	ret

00005b80 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    5b80:	deffe104 	addi	sp,sp,-124
    5b84:	dfc01e15 	stw	ra,120(sp)
    5b88:	df001d15 	stw	fp,116(sp)
    5b8c:	df001d04 	addi	fp,sp,116
    5b90:	e13ffc15 	stw	r4,-16(fp)
    5b94:	2809883a 	mov	r4,r5
    5b98:	3007883a 	mov	r3,r6
    5b9c:	3805883a 	mov	r2,r7
    5ba0:	e13ffd0d 	sth	r4,-12(fp)
    5ba4:	e0fffe05 	stb	r3,-8(fp)
    5ba8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5bac:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5bb0:	e0800217 	ldw	r2,8(fp)
    5bb4:	1000021e 	bne	r2,zero,5bc0 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    5bb8:	0005883a 	mov	r2,zero
    5bbc:	00015906 	br	6124 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    5bc0:	e0bffc17 	ldw	r2,-16(fp)
    5bc4:	1000051e 	bne	r2,zero,5bdc <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5bc8:	e0800217 	ldw	r2,8(fp)
    5bcc:	00c01b84 	movi	r3,110
    5bd0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5bd4:	0005883a 	mov	r2,zero
    5bd8:	00015206 	br	6124 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5bdc:	d0a71003 	ldbu	r2,-25536(gp)
    5be0:	10803fcc 	andi	r2,r2,255
    5be4:	10000526 	beq	r2,zero,5bfc <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    5be8:	e0800217 	ldw	r2,8(fp)
    5bec:	00c00084 	movi	r3,2
    5bf0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5bf4:	0005883a 	mov	r2,zero
    5bf8:	00014a06 	br	6124 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    5bfc:	d0a70203 	ldbu	r2,-25592(gp)
    5c00:	10803fcc 	andi	r2,r2,255
    5c04:	10000526 	beq	r2,zero,5c1c <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    5c08:	e0800217 	ldw	r2,8(fp)
    5c0c:	00c00344 	movi	r3,13
    5c10:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c14:	0005883a 	mov	r2,zero
    5c18:	00014206 	br	6124 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5c1c:	e0bffc17 	ldw	r2,-16(fp)
    5c20:	10800003 	ldbu	r2,0(r2)
    5c24:	10803fcc 	andi	r2,r2,255
    5c28:	10800160 	cmpeqi	r2,r2,5
    5c2c:	1000051e 	bne	r2,zero,5c44 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    5c30:	e0800217 	ldw	r2,8(fp)
    5c34:	00c00044 	movi	r3,1
    5c38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c3c:	0005883a 	mov	r2,zero
    5c40:	00013806 	br	6124 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5c44:	e0fffe03 	ldbu	r3,-8(fp)
    5c48:	00bfe004 	movi	r2,-128
    5c4c:	1884703a 	and	r2,r3,r2
    5c50:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    5c54:	e0bfe603 	ldbu	r2,-104(fp)
    5c58:	10000626 	beq	r2,zero,5c74 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    5c5c:	e0bffe03 	ldbu	r2,-8(fp)
    5c60:	10801fcc 	andi	r2,r2,127
    5c64:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5c68:	00800044 	movi	r2,1
    5c6c:	e0bfe405 	stb	r2,-112(fp)
    5c70:	00000106 	br	5c78 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    5c74:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c78:	0005303a 	rdctl	r2,status
    5c7c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c80:	e0fff617 	ldw	r3,-40(fp)
    5c84:	00bfff84 	movi	r2,-2
    5c88:	1884703a 	and	r2,r3,r2
    5c8c:	1001703a 	wrctl	status,r2
  
  return context;
    5c90:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    5c94:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    5c98:	e0bffe03 	ldbu	r2,-8(fp)
    5c9c:	10c00060 	cmpeqi	r3,r2,1
    5ca0:	1800921e 	bne	r3,zero,5eec <OSFlagPend+0x36c>
    5ca4:	10c00088 	cmpgei	r3,r2,2
    5ca8:	1800021e 	bne	r3,zero,5cb4 <OSFlagPend+0x134>
    5cac:	10006126 	beq	r2,zero,5e34 <OSFlagPend+0x2b4>
    5cb0:	0000bb06 	br	5fa0 <OSFlagPend+0x420>
    5cb4:	10c000a0 	cmpeqi	r3,r2,2
    5cb8:	1800031e 	bne	r3,zero,5cc8 <OSFlagPend+0x148>
    5cbc:	108000e0 	cmpeqi	r2,r2,3
    5cc0:	10002f1e 	bne	r2,zero,5d80 <OSFlagPend+0x200>
    5cc4:	0000b606 	br	5fa0 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    5cc8:	e0bffc17 	ldw	r2,-16(fp)
    5ccc:	10c0020b 	ldhu	r3,8(r2)
    5cd0:	e0bffd0b 	ldhu	r2,-12(fp)
    5cd4:	1884703a 	and	r2,r3,r2
    5cd8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5cdc:	e0ffe80b 	ldhu	r3,-96(fp)
    5ce0:	e0bffd0b 	ldhu	r2,-12(fp)
    5ce4:	1880171e 	bne	r3,r2,5d44 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5ce8:	e0bfe403 	ldbu	r2,-112(fp)
    5cec:	10800058 	cmpnei	r2,r2,1
    5cf0:	1000091e 	bne	r2,zero,5d18 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    5cf4:	e0bffc17 	ldw	r2,-16(fp)
    5cf8:	1080020b 	ldhu	r2,8(r2)
    5cfc:	1007883a 	mov	r3,r2
    5d00:	e0bfe80b 	ldhu	r2,-96(fp)
    5d04:	0084303a 	nor	r2,zero,r2
    5d08:	1884703a 	and	r2,r3,r2
    5d0c:	1007883a 	mov	r3,r2
    5d10:	e0bffc17 	ldw	r2,-16(fp)
    5d14:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5d18:	d0a71117 	ldw	r2,-25532(gp)
    5d1c:	e0ffe80b 	ldhu	r3,-96(fp)
    5d20:	10c00b0d 	sth	r3,44(r2)
    5d24:	e0bfe517 	ldw	r2,-108(fp)
    5d28:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d2c:	e0bfe717 	ldw	r2,-100(fp)
    5d30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5d34:	e0800217 	ldw	r2,8(fp)
    5d38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5d3c:	e0bfe80b 	ldhu	r2,-96(fp)
    5d40:	0000f806 	br	6124 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5d44:	e13ffd0b 	ldhu	r4,-12(fp)
    5d48:	e17ffe03 	ldbu	r5,-8(fp)
    5d4c:	e0bfff0b 	ldhu	r2,-4(fp)
    5d50:	e0fff704 	addi	r3,fp,-36
    5d54:	d8800015 	stw	r2,0(sp)
    5d58:	280f883a 	mov	r7,r5
    5d5c:	200d883a 	mov	r6,r4
    5d60:	180b883a 	mov	r5,r3
    5d64:	e13ffc17 	ldw	r4,-16(fp)
    5d68:	00065f00 	call	65f0 <OS_FlagBlock>
    5d6c:	e0bfe517 	ldw	r2,-108(fp)
    5d70:	e0bfe915 	stw	r2,-92(fp)
    5d74:	e0bfe917 	ldw	r2,-92(fp)
    5d78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5d7c:	00009206 	br	5fc8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    5d80:	e0bffc17 	ldw	r2,-16(fp)
    5d84:	10c0020b 	ldhu	r3,8(r2)
    5d88:	e0bffd0b 	ldhu	r2,-12(fp)
    5d8c:	1884703a 	and	r2,r3,r2
    5d90:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5d94:	e0bfe80b 	ldhu	r2,-96(fp)
    5d98:	10001726 	beq	r2,zero,5df8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5d9c:	e0bfe403 	ldbu	r2,-112(fp)
    5da0:	10800058 	cmpnei	r2,r2,1
    5da4:	1000091e 	bne	r2,zero,5dcc <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5da8:	e0bffc17 	ldw	r2,-16(fp)
    5dac:	1080020b 	ldhu	r2,8(r2)
    5db0:	1007883a 	mov	r3,r2
    5db4:	e0bfe80b 	ldhu	r2,-96(fp)
    5db8:	0084303a 	nor	r2,zero,r2
    5dbc:	1884703a 	and	r2,r3,r2
    5dc0:	1007883a 	mov	r3,r2
    5dc4:	e0bffc17 	ldw	r2,-16(fp)
    5dc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5dcc:	d0a71117 	ldw	r2,-25532(gp)
    5dd0:	e0ffe80b 	ldhu	r3,-96(fp)
    5dd4:	10c00b0d 	sth	r3,44(r2)
    5dd8:	e0bfe517 	ldw	r2,-108(fp)
    5ddc:	e0bfea15 	stw	r2,-88(fp)
    5de0:	e0bfea17 	ldw	r2,-88(fp)
    5de4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5de8:	e0800217 	ldw	r2,8(fp)
    5dec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5df0:	e0bfe80b 	ldhu	r2,-96(fp)
    5df4:	0000cb06 	br	6124 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5df8:	e13ffd0b 	ldhu	r4,-12(fp)
    5dfc:	e17ffe03 	ldbu	r5,-8(fp)
    5e00:	e0bfff0b 	ldhu	r2,-4(fp)
    5e04:	e0fff704 	addi	r3,fp,-36
    5e08:	d8800015 	stw	r2,0(sp)
    5e0c:	280f883a 	mov	r7,r5
    5e10:	200d883a 	mov	r6,r4
    5e14:	180b883a 	mov	r5,r3
    5e18:	e13ffc17 	ldw	r4,-16(fp)
    5e1c:	00065f00 	call	65f0 <OS_FlagBlock>
    5e20:	e0bfe517 	ldw	r2,-108(fp)
    5e24:	e0bfeb15 	stw	r2,-84(fp)
    5e28:	e0bfeb17 	ldw	r2,-84(fp)
    5e2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5e30:	00006506 	br	5fc8 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    5e34:	e0bffc17 	ldw	r2,-16(fp)
    5e38:	1080020b 	ldhu	r2,8(r2)
    5e3c:	0084303a 	nor	r2,zero,r2
    5e40:	1007883a 	mov	r3,r2
    5e44:	e0bffd0b 	ldhu	r2,-12(fp)
    5e48:	1884703a 	and	r2,r3,r2
    5e4c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5e50:	e0ffe80b 	ldhu	r3,-96(fp)
    5e54:	e0bffd0b 	ldhu	r2,-12(fp)
    5e58:	1880151e 	bne	r3,r2,5eb0 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5e5c:	e0bfe403 	ldbu	r2,-112(fp)
    5e60:	10800058 	cmpnei	r2,r2,1
    5e64:	1000071e 	bne	r2,zero,5e84 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    5e68:	e0bffc17 	ldw	r2,-16(fp)
    5e6c:	10c0020b 	ldhu	r3,8(r2)
    5e70:	e0bfe80b 	ldhu	r2,-96(fp)
    5e74:	1884b03a 	or	r2,r3,r2
    5e78:	1007883a 	mov	r3,r2
    5e7c:	e0bffc17 	ldw	r2,-16(fp)
    5e80:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5e84:	d0a71117 	ldw	r2,-25532(gp)
    5e88:	e0ffe80b 	ldhu	r3,-96(fp)
    5e8c:	10c00b0d 	sth	r3,44(r2)
    5e90:	e0bfe517 	ldw	r2,-108(fp)
    5e94:	e0bfec15 	stw	r2,-80(fp)
    5e98:	e0bfec17 	ldw	r2,-80(fp)
    5e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5ea0:	e0800217 	ldw	r2,8(fp)
    5ea4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5ea8:	e0bfe80b 	ldhu	r2,-96(fp)
    5eac:	00009d06 	br	6124 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5eb0:	e13ffd0b 	ldhu	r4,-12(fp)
    5eb4:	e17ffe03 	ldbu	r5,-8(fp)
    5eb8:	e0bfff0b 	ldhu	r2,-4(fp)
    5ebc:	e0fff704 	addi	r3,fp,-36
    5ec0:	d8800015 	stw	r2,0(sp)
    5ec4:	280f883a 	mov	r7,r5
    5ec8:	200d883a 	mov	r6,r4
    5ecc:	180b883a 	mov	r5,r3
    5ed0:	e13ffc17 	ldw	r4,-16(fp)
    5ed4:	00065f00 	call	65f0 <OS_FlagBlock>
    5ed8:	e0bfe517 	ldw	r2,-108(fp)
    5edc:	e0bfed15 	stw	r2,-76(fp)
    5ee0:	e0bfed17 	ldw	r2,-76(fp)
    5ee4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5ee8:	00003706 	br	5fc8 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5eec:	e0bffc17 	ldw	r2,-16(fp)
    5ef0:	1080020b 	ldhu	r2,8(r2)
    5ef4:	0084303a 	nor	r2,zero,r2
    5ef8:	1007883a 	mov	r3,r2
    5efc:	e0bffd0b 	ldhu	r2,-12(fp)
    5f00:	1884703a 	and	r2,r3,r2
    5f04:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5f08:	e0bfe80b 	ldhu	r2,-96(fp)
    5f0c:	10001526 	beq	r2,zero,5f64 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5f10:	e0bfe403 	ldbu	r2,-112(fp)
    5f14:	10800058 	cmpnei	r2,r2,1
    5f18:	1000071e 	bne	r2,zero,5f38 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5f1c:	e0bffc17 	ldw	r2,-16(fp)
    5f20:	10c0020b 	ldhu	r3,8(r2)
    5f24:	e0bfe80b 	ldhu	r2,-96(fp)
    5f28:	1884b03a 	or	r2,r3,r2
    5f2c:	1007883a 	mov	r3,r2
    5f30:	e0bffc17 	ldw	r2,-16(fp)
    5f34:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5f38:	d0a71117 	ldw	r2,-25532(gp)
    5f3c:	e0ffe80b 	ldhu	r3,-96(fp)
    5f40:	10c00b0d 	sth	r3,44(r2)
    5f44:	e0bfe517 	ldw	r2,-108(fp)
    5f48:	e0bfee15 	stw	r2,-72(fp)
    5f4c:	e0bfee17 	ldw	r2,-72(fp)
    5f50:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5f54:	e0800217 	ldw	r2,8(fp)
    5f58:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5f5c:	e0bfe80b 	ldhu	r2,-96(fp)
    5f60:	00007006 	br	6124 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5f64:	e13ffd0b 	ldhu	r4,-12(fp)
    5f68:	e17ffe03 	ldbu	r5,-8(fp)
    5f6c:	e0bfff0b 	ldhu	r2,-4(fp)
    5f70:	e0fff704 	addi	r3,fp,-36
    5f74:	d8800015 	stw	r2,0(sp)
    5f78:	280f883a 	mov	r7,r5
    5f7c:	200d883a 	mov	r6,r4
    5f80:	180b883a 	mov	r5,r3
    5f84:	e13ffc17 	ldw	r4,-16(fp)
    5f88:	00065f00 	call	65f0 <OS_FlagBlock>
    5f8c:	e0bfe517 	ldw	r2,-108(fp)
    5f90:	e0bfef15 	stw	r2,-68(fp)
    5f94:	e0bfef17 	ldw	r2,-68(fp)
    5f98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5f9c:	00000a06 	br	5fc8 <OSFlagPend+0x448>
    5fa0:	e0bfe517 	ldw	r2,-108(fp)
    5fa4:	e0bff015 	stw	r2,-64(fp)
    5fa8:	e0bff017 	ldw	r2,-64(fp)
    5fac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5fb0:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    5fb4:	e0800217 	ldw	r2,8(fp)
    5fb8:	00c01bc4 	movi	r3,111
    5fbc:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    5fc0:	e0bfe80b 	ldhu	r2,-96(fp)
    5fc4:	00005706 	br	6124 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    5fc8:	0004a500 	call	4a50 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5fcc:	0005303a 	rdctl	r2,status
    5fd0:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5fd4:	e0fff117 	ldw	r3,-60(fp)
    5fd8:	00bfff84 	movi	r2,-2
    5fdc:	1884703a 	and	r2,r3,r2
    5fe0:	1001703a 	wrctl	status,r2
  
  return context;
    5fe4:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    5fe8:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    5fec:	d0a71117 	ldw	r2,-25532(gp)
    5ff0:	10800c43 	ldbu	r2,49(r2)
    5ff4:	10803fcc 	andi	r2,r2,255
    5ff8:	10001c26 	beq	r2,zero,606c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    5ffc:	d0a71117 	ldw	r2,-25532(gp)
    6000:	10800c43 	ldbu	r2,49(r2)
    6004:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6008:	d0a71117 	ldw	r2,-25532(gp)
    600c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    6010:	e0bff704 	addi	r2,fp,-36
    6014:	1009883a 	mov	r4,r2
    6018:	00069240 	call	6924 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    601c:	d0a71117 	ldw	r2,-25532(gp)
    6020:	10000c05 	stb	zero,48(r2)
    6024:	e0bfe517 	ldw	r2,-108(fp)
    6028:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    602c:	e0bff217 	ldw	r2,-56(fp)
    6030:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6034:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    6038:	e0bff303 	ldbu	r2,-52(fp)
    603c:	108000a0 	cmpeqi	r2,r2,2
    6040:	10000426 	beq	r2,zero,6054 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6044:	e0800217 	ldw	r2,8(fp)
    6048:	00c00384 	movi	r3,14
    604c:	10c00005 	stb	r3,0(r2)
                 break;
    6050:	00000406 	br	6064 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6054:	e0800217 	ldw	r2,8(fp)
    6058:	00c00284 	movi	r3,10
    605c:	10c00005 	stb	r3,0(r2)
                 break;
    6060:	0001883a 	nop
        }
        return (flags_rdy);
    6064:	e0bfe80b 	ldhu	r2,-96(fp)
    6068:	00002e06 	br	6124 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    606c:	d0a71117 	ldw	r2,-25532(gp)
    6070:	10800b0b 	ldhu	r2,44(r2)
    6074:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6078:	e0bfe403 	ldbu	r2,-112(fp)
    607c:	10800058 	cmpnei	r2,r2,1
    6080:	1000211e 	bne	r2,zero,6108 <OSFlagPend+0x588>
        switch (wait_type) {
    6084:	e0bffe03 	ldbu	r2,-8(fp)
    6088:	10001616 	blt	r2,zero,60e4 <OSFlagPend+0x564>
    608c:	10c00090 	cmplti	r3,r2,2
    6090:	18000c1e 	bne	r3,zero,60c4 <OSFlagPend+0x544>
    6094:	10800108 	cmpgei	r2,r2,4
    6098:	1000121e 	bne	r2,zero,60e4 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    609c:	e0bffc17 	ldw	r2,-16(fp)
    60a0:	1080020b 	ldhu	r2,8(r2)
    60a4:	1007883a 	mov	r3,r2
    60a8:	e0bfe80b 	ldhu	r2,-96(fp)
    60ac:	0084303a 	nor	r2,zero,r2
    60b0:	1884703a 	and	r2,r3,r2
    60b4:	1007883a 	mov	r3,r2
    60b8:	e0bffc17 	ldw	r2,-16(fp)
    60bc:	10c0020d 	sth	r3,8(r2)
                 break;
    60c0:	00001106 	br	6108 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    60c4:	e0bffc17 	ldw	r2,-16(fp)
    60c8:	10c0020b 	ldhu	r3,8(r2)
    60cc:	e0bfe80b 	ldhu	r2,-96(fp)
    60d0:	1884b03a 	or	r2,r3,r2
    60d4:	1007883a 	mov	r3,r2
    60d8:	e0bffc17 	ldw	r2,-16(fp)
    60dc:	10c0020d 	sth	r3,8(r2)
                 break;
    60e0:	00000906 	br	6108 <OSFlagPend+0x588>
    60e4:	e0bfe517 	ldw	r2,-108(fp)
    60e8:	e0bff415 	stw	r2,-48(fp)
    60ec:	e0bff417 	ldw	r2,-48(fp)
    60f0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    60f4:	e0800217 	ldw	r2,8(fp)
    60f8:	00c01bc4 	movi	r3,111
    60fc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6100:	0005883a 	mov	r2,zero
    6104:	00000706 	br	6124 <OSFlagPend+0x5a4>
    6108:	e0bfe517 	ldw	r2,-108(fp)
    610c:	e0bff515 	stw	r2,-44(fp)
    6110:	e0bff517 	ldw	r2,-44(fp)
    6114:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6118:	e0800217 	ldw	r2,8(fp)
    611c:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    6120:	e0bfe80b 	ldhu	r2,-96(fp)
}
    6124:	e037883a 	mov	sp,fp
    6128:	dfc00117 	ldw	ra,4(sp)
    612c:	df000017 	ldw	fp,0(sp)
    6130:	dec00204 	addi	sp,sp,8
    6134:	f800283a 	ret

00006138 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6138:	defffb04 	addi	sp,sp,-20
    613c:	df000415 	stw	fp,16(sp)
    6140:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6144:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6148:	0005303a 	rdctl	r2,status
    614c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6150:	e0fffe17 	ldw	r3,-8(fp)
    6154:	00bfff84 	movi	r2,-2
    6158:	1884703a 	and	r2,r3,r2
    615c:	1001703a 	wrctl	status,r2
  
  return context;
    6160:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6164:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6168:	d0a71117 	ldw	r2,-25532(gp)
    616c:	10800b0b 	ldhu	r2,44(r2)
    6170:	e0bffd0d 	sth	r2,-12(fp)
    6174:	e0bffc17 	ldw	r2,-16(fp)
    6178:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    617c:	e0bfff17 	ldw	r2,-4(fp)
    6180:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    6184:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6188:	e037883a 	mov	sp,fp
    618c:	df000017 	ldw	fp,0(sp)
    6190:	dec00104 	addi	sp,sp,4
    6194:	f800283a 	ret

00006198 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6198:	deffef04 	addi	sp,sp,-68
    619c:	dfc01015 	stw	ra,64(sp)
    61a0:	df000f15 	stw	fp,60(sp)
    61a4:	df000f04 	addi	fp,sp,60
    61a8:	e13ffc15 	stw	r4,-16(fp)
    61ac:	2807883a 	mov	r3,r5
    61b0:	3005883a 	mov	r2,r6
    61b4:	e1ffff15 	stw	r7,-4(fp)
    61b8:	e0fffd0d 	sth	r3,-12(fp)
    61bc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    61c0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    61c4:	e0bfff17 	ldw	r2,-4(fp)
    61c8:	1000021e 	bne	r2,zero,61d4 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    61cc:	0005883a 	mov	r2,zero
    61d0:	0000d106 	br	6518 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    61d4:	e0bffc17 	ldw	r2,-16(fp)
    61d8:	1000051e 	bne	r2,zero,61f0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    61dc:	e0bfff17 	ldw	r2,-4(fp)
    61e0:	00c01b84 	movi	r3,110
    61e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    61e8:	0005883a 	mov	r2,zero
    61ec:	0000ca06 	br	6518 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    61f0:	e0bffc17 	ldw	r2,-16(fp)
    61f4:	10800003 	ldbu	r2,0(r2)
    61f8:	10803fcc 	andi	r2,r2,255
    61fc:	10800160 	cmpeqi	r2,r2,5
    6200:	1000051e 	bne	r2,zero,6218 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    6204:	e0bfff17 	ldw	r2,-4(fp)
    6208:	00c00044 	movi	r3,1
    620c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6210:	0005883a 	mov	r2,zero
    6214:	0000c006 	br	6518 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6218:	0005303a 	rdctl	r2,status
    621c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6220:	e0fffb17 	ldw	r3,-20(fp)
    6224:	00bfff84 	movi	r2,-2
    6228:	1884703a 	and	r2,r3,r2
    622c:	1001703a 	wrctl	status,r2
  
  return context;
    6230:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6234:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    6238:	e0bffe03 	ldbu	r2,-8(fp)
    623c:	10000326 	beq	r2,zero,624c <OSFlagPost+0xb4>
    6240:	10800060 	cmpeqi	r2,r2,1
    6244:	10000b1e 	bne	r2,zero,6274 <OSFlagPost+0xdc>
    6248:	00001206 	br	6294 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    624c:	e0bffc17 	ldw	r2,-16(fp)
    6250:	1080020b 	ldhu	r2,8(r2)
    6254:	1007883a 	mov	r3,r2
    6258:	e0bffd0b 	ldhu	r2,-12(fp)
    625c:	0084303a 	nor	r2,zero,r2
    6260:	1884703a 	and	r2,r3,r2
    6264:	1007883a 	mov	r3,r2
    6268:	e0bffc17 	ldw	r2,-16(fp)
    626c:	10c0020d 	sth	r3,8(r2)
             break;
    6270:	00001106 	br	62b8 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    6274:	e0bffc17 	ldw	r2,-16(fp)
    6278:	10c0020b 	ldhu	r3,8(r2)
    627c:	e0bffd0b 	ldhu	r2,-12(fp)
    6280:	1884b03a 	or	r2,r3,r2
    6284:	1007883a 	mov	r3,r2
    6288:	e0bffc17 	ldw	r2,-16(fp)
    628c:	10c0020d 	sth	r3,8(r2)
             break;
    6290:	00000906 	br	62b8 <OSFlagPost+0x120>
    6294:	e0bff317 	ldw	r2,-52(fp)
    6298:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    629c:	e0bff417 	ldw	r2,-48(fp)
    62a0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    62a4:	e0bfff17 	ldw	r2,-4(fp)
    62a8:	00c01c44 	movi	r3,113
    62ac:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    62b0:	0005883a 	mov	r2,zero
    62b4:	00009806 	br	6518 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    62b8:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    62bc:	e0bffc17 	ldw	r2,-16(fp)
    62c0:	10800117 	ldw	r2,4(r2)
    62c4:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    62c8:	00007706 	br	64a8 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    62cc:	e0bff117 	ldw	r2,-60(fp)
    62d0:	10800483 	ldbu	r2,18(r2)
    62d4:	10803fcc 	andi	r2,r2,255
    62d8:	10c00060 	cmpeqi	r3,r2,1
    62dc:	18004a1e 	bne	r3,zero,6408 <OSFlagPost+0x270>
    62e0:	10c00088 	cmpgei	r3,r2,2
    62e4:	1800021e 	bne	r3,zero,62f0 <OSFlagPost+0x158>
    62e8:	10002f26 	beq	r2,zero,63a8 <OSFlagPost+0x210>
    62ec:	00005b06 	br	645c <OSFlagPost+0x2c4>
    62f0:	10c000a0 	cmpeqi	r3,r2,2
    62f4:	1800031e 	bne	r3,zero,6304 <OSFlagPost+0x16c>
    62f8:	108000e0 	cmpeqi	r2,r2,3
    62fc:	1000171e 	bne	r2,zero,635c <OSFlagPost+0x1c4>
    6300:	00005606 	br	645c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6304:	e0bffc17 	ldw	r2,-16(fp)
    6308:	10c0020b 	ldhu	r3,8(r2)
    630c:	e0bff117 	ldw	r2,-60(fp)
    6310:	1080040b 	ldhu	r2,16(r2)
    6314:	1884703a 	and	r2,r3,r2
    6318:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    631c:	e0bff117 	ldw	r2,-60(fp)
    6320:	1080040b 	ldhu	r2,16(r2)
    6324:	10ffffcc 	andi	r3,r2,65535
    6328:	e0bff60b 	ldhu	r2,-40(fp)
    632c:	1880541e 	bne	r3,r2,6480 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6330:	e0bff60b 	ldhu	r2,-40(fp)
    6334:	100b883a 	mov	r5,r2
    6338:	e13ff117 	ldw	r4,-60(fp)
    633c:	00068300 	call	6830 <OS_FlagTaskRdy>
    6340:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6344:	e0bff683 	ldbu	r2,-38(fp)
    6348:	10800058 	cmpnei	r2,r2,1
    634c:	10004c1e 	bne	r2,zero,6480 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6350:	00800044 	movi	r2,1
    6354:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6358:	00004906 	br	6480 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    635c:	e0bffc17 	ldw	r2,-16(fp)
    6360:	10c0020b 	ldhu	r3,8(r2)
    6364:	e0bff117 	ldw	r2,-60(fp)
    6368:	1080040b 	ldhu	r2,16(r2)
    636c:	1884703a 	and	r2,r3,r2
    6370:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6374:	e0bff60b 	ldhu	r2,-40(fp)
    6378:	10004326 	beq	r2,zero,6488 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    637c:	e0bff60b 	ldhu	r2,-40(fp)
    6380:	100b883a 	mov	r5,r2
    6384:	e13ff117 	ldw	r4,-60(fp)
    6388:	00068300 	call	6830 <OS_FlagTaskRdy>
    638c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6390:	e0bff683 	ldbu	r2,-38(fp)
    6394:	10800058 	cmpnei	r2,r2,1
    6398:	10003b1e 	bne	r2,zero,6488 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    639c:	00800044 	movi	r2,1
    63a0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    63a4:	00003806 	br	6488 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    63a8:	e0bffc17 	ldw	r2,-16(fp)
    63ac:	1080020b 	ldhu	r2,8(r2)
    63b0:	0084303a 	nor	r2,zero,r2
    63b4:	1007883a 	mov	r3,r2
    63b8:	e0bff117 	ldw	r2,-60(fp)
    63bc:	1080040b 	ldhu	r2,16(r2)
    63c0:	1884703a 	and	r2,r3,r2
    63c4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    63c8:	e0bff117 	ldw	r2,-60(fp)
    63cc:	1080040b 	ldhu	r2,16(r2)
    63d0:	10ffffcc 	andi	r3,r2,65535
    63d4:	e0bff60b 	ldhu	r2,-40(fp)
    63d8:	18802d1e 	bne	r3,r2,6490 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    63dc:	e0bff60b 	ldhu	r2,-40(fp)
    63e0:	100b883a 	mov	r5,r2
    63e4:	e13ff117 	ldw	r4,-60(fp)
    63e8:	00068300 	call	6830 <OS_FlagTaskRdy>
    63ec:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    63f0:	e0bff683 	ldbu	r2,-38(fp)
    63f4:	10800058 	cmpnei	r2,r2,1
    63f8:	1000251e 	bne	r2,zero,6490 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    63fc:	00800044 	movi	r2,1
    6400:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6404:	00002206 	br	6490 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6408:	e0bffc17 	ldw	r2,-16(fp)
    640c:	1080020b 	ldhu	r2,8(r2)
    6410:	0084303a 	nor	r2,zero,r2
    6414:	1007883a 	mov	r3,r2
    6418:	e0bff117 	ldw	r2,-60(fp)
    641c:	1080040b 	ldhu	r2,16(r2)
    6420:	1884703a 	and	r2,r3,r2
    6424:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6428:	e0bff60b 	ldhu	r2,-40(fp)
    642c:	10001a26 	beq	r2,zero,6498 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6430:	e0bff60b 	ldhu	r2,-40(fp)
    6434:	100b883a 	mov	r5,r2
    6438:	e13ff117 	ldw	r4,-60(fp)
    643c:	00068300 	call	6830 <OS_FlagTaskRdy>
    6440:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6444:	e0bff683 	ldbu	r2,-38(fp)
    6448:	10800058 	cmpnei	r2,r2,1
    644c:	1000121e 	bne	r2,zero,6498 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6450:	00800044 	movi	r2,1
    6454:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6458:	00000f06 	br	6498 <OSFlagPost+0x300>
    645c:	e0bff317 	ldw	r2,-52(fp)
    6460:	e0bff515 	stw	r2,-44(fp)
    6464:	e0bff517 	ldw	r2,-44(fp)
    6468:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    646c:	e0bfff17 	ldw	r2,-4(fp)
    6470:	00c01bc4 	movi	r3,111
    6474:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6478:	0005883a 	mov	r2,zero
    647c:	00002606 	br	6518 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6480:	0001883a 	nop
    6484:	00000506 	br	649c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6488:	0001883a 	nop
    648c:	00000306 	br	649c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6490:	0001883a 	nop
    6494:	00000106 	br	649c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6498:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    649c:	e0bff117 	ldw	r2,-60(fp)
    64a0:	10800017 	ldw	r2,0(r2)
    64a4:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    64a8:	e0bff117 	ldw	r2,-60(fp)
    64ac:	103f871e 	bne	r2,zero,62cc <__alt_data_end+0xfffedc2c>
    64b0:	e0bff317 	ldw	r2,-52(fp)
    64b4:	e0bff715 	stw	r2,-36(fp)
    64b8:	e0bff717 	ldw	r2,-36(fp)
    64bc:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    64c0:	e0bff203 	ldbu	r2,-56(fp)
    64c4:	10800058 	cmpnei	r2,r2,1
    64c8:	1000011e 	bne	r2,zero,64d0 <OSFlagPost+0x338>
        OS_Sched();
    64cc:	0004a500 	call	4a50 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    64d0:	0005303a 	rdctl	r2,status
    64d4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    64d8:	e0fffa17 	ldw	r3,-24(fp)
    64dc:	00bfff84 	movi	r2,-2
    64e0:	1884703a 	and	r2,r3,r2
    64e4:	1001703a 	wrctl	status,r2
  
  return context;
    64e8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    64ec:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    64f0:	e0bffc17 	ldw	r2,-16(fp)
    64f4:	1080020b 	ldhu	r2,8(r2)
    64f8:	e0bff90d 	sth	r2,-28(fp)
    64fc:	e0bff317 	ldw	r2,-52(fp)
    6500:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6504:	e0bff817 	ldw	r2,-32(fp)
    6508:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    650c:	e0bfff17 	ldw	r2,-4(fp)
    6510:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    6514:	e0bff90b 	ldhu	r2,-28(fp)
}
    6518:	e037883a 	mov	sp,fp
    651c:	dfc00117 	ldw	ra,4(sp)
    6520:	df000017 	ldw	fp,0(sp)
    6524:	dec00204 	addi	sp,sp,8
    6528:	f800283a 	ret

0000652c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    652c:	defff904 	addi	sp,sp,-28
    6530:	df000615 	stw	fp,24(sp)
    6534:	df000604 	addi	fp,sp,24
    6538:	e13ffe15 	stw	r4,-8(fp)
    653c:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    6540:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    6544:	e0bfff17 	ldw	r2,-4(fp)
    6548:	1000021e 	bne	r2,zero,6554 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    654c:	0005883a 	mov	r2,zero
    6550:	00002306 	br	65e0 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    6554:	e0bffe17 	ldw	r2,-8(fp)
    6558:	1000051e 	bne	r2,zero,6570 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    655c:	e0bfff17 	ldw	r2,-4(fp)
    6560:	00c01b84 	movi	r3,110
    6564:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6568:	0005883a 	mov	r2,zero
    656c:	00001c06 	br	65e0 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    6570:	e0bffe17 	ldw	r2,-8(fp)
    6574:	10800003 	ldbu	r2,0(r2)
    6578:	10803fcc 	andi	r2,r2,255
    657c:	10800160 	cmpeqi	r2,r2,5
    6580:	1000051e 	bne	r2,zero,6598 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6584:	e0bfff17 	ldw	r2,-4(fp)
    6588:	00c00044 	movi	r3,1
    658c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6590:	0005883a 	mov	r2,zero
    6594:	00001206 	br	65e0 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6598:	0005303a 	rdctl	r2,status
    659c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    65a0:	e0fffc17 	ldw	r3,-16(fp)
    65a4:	00bfff84 	movi	r2,-2
    65a8:	1884703a 	and	r2,r3,r2
    65ac:	1001703a 	wrctl	status,r2
  
  return context;
    65b0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    65b4:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    65b8:	e0bffe17 	ldw	r2,-8(fp)
    65bc:	1080020b 	ldhu	r2,8(r2)
    65c0:	e0bffb0d 	sth	r2,-20(fp)
    65c4:	e0bffa17 	ldw	r2,-24(fp)
    65c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    65cc:	e0bffd17 	ldw	r2,-12(fp)
    65d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    65d4:	e0bfff17 	ldw	r2,-4(fp)
    65d8:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    65dc:	e0bffb0b 	ldhu	r2,-20(fp)
}
    65e0:	e037883a 	mov	sp,fp
    65e4:	df000017 	ldw	fp,0(sp)
    65e8:	dec00104 	addi	sp,sp,4
    65ec:	f800283a 	ret

000065f0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    65f0:	defff804 	addi	sp,sp,-32
    65f4:	df000715 	stw	fp,28(sp)
    65f8:	df000704 	addi	fp,sp,28
    65fc:	e13ffb15 	stw	r4,-20(fp)
    6600:	e17ffc15 	stw	r5,-16(fp)
    6604:	3009883a 	mov	r4,r6
    6608:	3807883a 	mov	r3,r7
    660c:	e0800117 	ldw	r2,4(fp)
    6610:	e13ffd0d 	sth	r4,-12(fp)
    6614:	e0fffe05 	stb	r3,-8(fp)
    6618:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    661c:	d0a71117 	ldw	r2,-25532(gp)
    6620:	d0e71117 	ldw	r3,-25532(gp)
    6624:	18c00c03 	ldbu	r3,48(r3)
    6628:	18c00814 	ori	r3,r3,32
    662c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    6630:	d0a71117 	ldw	r2,-25532(gp)
    6634:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    6638:	d0a71117 	ldw	r2,-25532(gp)
    663c:	e0ffff0b 	ldhu	r3,-4(fp)
    6640:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    6644:	d0a71117 	ldw	r2,-25532(gp)
    6648:	e0fffc17 	ldw	r3,-16(fp)
    664c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    6650:	e0bffc17 	ldw	r2,-16(fp)
    6654:	e0fffd0b 	ldhu	r3,-12(fp)
    6658:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    665c:	e0bffc17 	ldw	r2,-16(fp)
    6660:	e0fffe03 	ldbu	r3,-8(fp)
    6664:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    6668:	d0e71117 	ldw	r3,-25532(gp)
    666c:	e0bffc17 	ldw	r2,-16(fp)
    6670:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    6674:	e0bffb17 	ldw	r2,-20(fp)
    6678:	10c00117 	ldw	r3,4(r2)
    667c:	e0bffc17 	ldw	r2,-16(fp)
    6680:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    6684:	e0bffc17 	ldw	r2,-16(fp)
    6688:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    668c:	e0bffc17 	ldw	r2,-16(fp)
    6690:	e0fffb17 	ldw	r3,-20(fp)
    6694:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6698:	e0bffb17 	ldw	r2,-20(fp)
    669c:	10800117 	ldw	r2,4(r2)
    66a0:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    66a4:	e0bff917 	ldw	r2,-28(fp)
    66a8:	10000326 	beq	r2,zero,66b8 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    66ac:	e0bff917 	ldw	r2,-28(fp)
    66b0:	e0fffc17 	ldw	r3,-16(fp)
    66b4:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    66b8:	e0bffb17 	ldw	r2,-20(fp)
    66bc:	e0fffc17 	ldw	r3,-16(fp)
    66c0:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    66c4:	d0a71117 	ldw	r2,-25532(gp)
    66c8:	10800d03 	ldbu	r2,52(r2)
    66cc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    66d0:	e0fffa03 	ldbu	r3,-24(fp)
    66d4:	e13ffa03 	ldbu	r4,-24(fp)
    66d8:	d0a70e44 	addi	r2,gp,-25543
    66dc:	2085883a 	add	r2,r4,r2
    66e0:	10800003 	ldbu	r2,0(r2)
    66e4:	1009883a 	mov	r4,r2
    66e8:	d0a71117 	ldw	r2,-25532(gp)
    66ec:	10800d43 	ldbu	r2,53(r2)
    66f0:	0084303a 	nor	r2,zero,r2
    66f4:	2084703a 	and	r2,r4,r2
    66f8:	1009883a 	mov	r4,r2
    66fc:	d0a70e44 	addi	r2,gp,-25543
    6700:	1885883a 	add	r2,r3,r2
    6704:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    6708:	e0fffa03 	ldbu	r3,-24(fp)
    670c:	d0a70e44 	addi	r2,gp,-25543
    6710:	1885883a 	add	r2,r3,r2
    6714:	10800003 	ldbu	r2,0(r2)
    6718:	10803fcc 	andi	r2,r2,255
    671c:	1000071e 	bne	r2,zero,673c <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    6720:	d0a71117 	ldw	r2,-25532(gp)
    6724:	10800d83 	ldbu	r2,54(r2)
    6728:	0084303a 	nor	r2,zero,r2
    672c:	1007883a 	mov	r3,r2
    6730:	d0a70e03 	ldbu	r2,-25544(gp)
    6734:	1884703a 	and	r2,r3,r2
    6738:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    673c:	0001883a 	nop
    6740:	e037883a 	mov	sp,fp
    6744:	df000017 	ldw	fp,0(sp)
    6748:	dec00104 	addi	sp,sp,4
    674c:	f800283a 	ret

00006750 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    6750:	defffb04 	addi	sp,sp,-20
    6754:	dfc00415 	stw	ra,16(sp)
    6758:	df000315 	stw	fp,12(sp)
    675c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    6760:	0140dc04 	movi	r5,880
    6764:	01000074 	movhi	r4,1
    6768:	21125904 	addi	r4,r4,18788
    676c:	00049940 	call	4994 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    6770:	00800074 	movhi	r2,1
    6774:	10925904 	addi	r2,r2,18788
    6778:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    677c:	00800074 	movhi	r2,1
    6780:	10926404 	addi	r2,r2,18832
    6784:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    6788:	e03ffd0d 	sth	zero,-12(fp)
    678c:	00001306 	br	67dc <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    6790:	e0bffe17 	ldw	r2,-8(fp)
    6794:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    6798:	e0bffe17 	ldw	r2,-8(fp)
    679c:	e0ffff17 	ldw	r3,-4(fp)
    67a0:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    67a4:	e0bffe17 	ldw	r2,-8(fp)
    67a8:	00c00fc4 	movi	r3,63
    67ac:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    67b0:	e0bffe17 	ldw	r2,-8(fp)
    67b4:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    67b8:	e0bffe17 	ldw	r2,-8(fp)
    67bc:	10800b04 	addi	r2,r2,44
    67c0:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    67c4:	e0bfff17 	ldw	r2,-4(fp)
    67c8:	10800b04 	addi	r2,r2,44
    67cc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    67d0:	e0bffd0b 	ldhu	r2,-12(fp)
    67d4:	10800044 	addi	r2,r2,1
    67d8:	e0bffd0d 	sth	r2,-12(fp)
    67dc:	e0bffd0b 	ldhu	r2,-12(fp)
    67e0:	108004f0 	cmpltui	r2,r2,19
    67e4:	103fea1e 	bne	r2,zero,6790 <__alt_data_end+0xfffee0f0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    67e8:	e0bffe17 	ldw	r2,-8(fp)
    67ec:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    67f0:	e0bffe17 	ldw	r2,-8(fp)
    67f4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    67f8:	e0bffe17 	ldw	r2,-8(fp)
    67fc:	00c00fc4 	movi	r3,63
    6800:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    6804:	e0bffe17 	ldw	r2,-8(fp)
    6808:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    680c:	00800074 	movhi	r2,1
    6810:	10925904 	addi	r2,r2,18788
    6814:	d0a71315 	stw	r2,-25524(gp)
#endif
}
    6818:	0001883a 	nop
    681c:	e037883a 	mov	sp,fp
    6820:	dfc00117 	ldw	ra,4(sp)
    6824:	df000017 	ldw	fp,0(sp)
    6828:	dec00204 	addi	sp,sp,8
    682c:	f800283a 	ret

00006830 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    6830:	defffa04 	addi	sp,sp,-24
    6834:	dfc00515 	stw	ra,20(sp)
    6838:	df000415 	stw	fp,16(sp)
    683c:	df000404 	addi	fp,sp,16
    6840:	e13ffe15 	stw	r4,-8(fp)
    6844:	2805883a 	mov	r2,r5
    6848:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    684c:	e0bffe17 	ldw	r2,-8(fp)
    6850:	10800217 	ldw	r2,8(r2)
    6854:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    6858:	e0bffd17 	ldw	r2,-12(fp)
    685c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    6860:	e0bffd17 	ldw	r2,-12(fp)
    6864:	e0ffff0b 	ldhu	r3,-4(fp)
    6868:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    686c:	e0bffd17 	ldw	r2,-12(fp)
    6870:	10c00c03 	ldbu	r3,48(r2)
    6874:	00bff7c4 	movi	r2,-33
    6878:	1884703a 	and	r2,r3,r2
    687c:	1007883a 	mov	r3,r2
    6880:	e0bffd17 	ldw	r2,-12(fp)
    6884:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    6888:	e0bffd17 	ldw	r2,-12(fp)
    688c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    6890:	e0bffd17 	ldw	r2,-12(fp)
    6894:	10800c03 	ldbu	r2,48(r2)
    6898:	10803fcc 	andi	r2,r2,255
    689c:	1000181e 	bne	r2,zero,6900 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    68a0:	e0bffd17 	ldw	r2,-12(fp)
    68a4:	10c00d83 	ldbu	r3,54(r2)
    68a8:	d0a70e03 	ldbu	r2,-25544(gp)
    68ac:	1884b03a 	or	r2,r3,r2
    68b0:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    68b4:	e0bffd17 	ldw	r2,-12(fp)
    68b8:	10800d03 	ldbu	r2,52(r2)
    68bc:	10c03fcc 	andi	r3,r2,255
    68c0:	e0bffd17 	ldw	r2,-12(fp)
    68c4:	10800d03 	ldbu	r2,52(r2)
    68c8:	11003fcc 	andi	r4,r2,255
    68cc:	d0a70e44 	addi	r2,gp,-25543
    68d0:	2085883a 	add	r2,r4,r2
    68d4:	11000003 	ldbu	r4,0(r2)
    68d8:	e0bffd17 	ldw	r2,-12(fp)
    68dc:	10800d43 	ldbu	r2,53(r2)
    68e0:	2084b03a 	or	r2,r4,r2
    68e4:	1009883a 	mov	r4,r2
    68e8:	d0a70e44 	addi	r2,gp,-25543
    68ec:	1885883a 	add	r2,r3,r2
    68f0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    68f4:	00800044 	movi	r2,1
    68f8:	e0bffc05 	stb	r2,-16(fp)
    68fc:	00000106 	br	6904 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    6900:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    6904:	e13ffe17 	ldw	r4,-8(fp)
    6908:	00069240 	call	6924 <OS_FlagUnlink>
    return (sched);
    690c:	e0bffc03 	ldbu	r2,-16(fp)
}
    6910:	e037883a 	mov	sp,fp
    6914:	dfc00117 	ldw	ra,4(sp)
    6918:	df000017 	ldw	fp,0(sp)
    691c:	dec00204 	addi	sp,sp,8
    6920:	f800283a 	ret

00006924 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    6924:	defffa04 	addi	sp,sp,-24
    6928:	df000515 	stw	fp,20(sp)
    692c:	df000504 	addi	fp,sp,20
    6930:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    6934:	e0bfff17 	ldw	r2,-4(fp)
    6938:	10800117 	ldw	r2,4(r2)
    693c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    6940:	e0bfff17 	ldw	r2,-4(fp)
    6944:	10800017 	ldw	r2,0(r2)
    6948:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    694c:	e0bffb17 	ldw	r2,-20(fp)
    6950:	10000b1e 	bne	r2,zero,6980 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    6954:	e0bfff17 	ldw	r2,-4(fp)
    6958:	10800317 	ldw	r2,12(r2)
    695c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    6960:	e0bffd17 	ldw	r2,-12(fp)
    6964:	e0fffc17 	ldw	r3,-16(fp)
    6968:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    696c:	e0bffc17 	ldw	r2,-16(fp)
    6970:	10000b26 	beq	r2,zero,69a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    6974:	e0bffc17 	ldw	r2,-16(fp)
    6978:	10000115 	stw	zero,4(r2)
    697c:	00000806 	br	69a0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    6980:	e0bffb17 	ldw	r2,-20(fp)
    6984:	e0fffc17 	ldw	r3,-16(fp)
    6988:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    698c:	e0bffc17 	ldw	r2,-16(fp)
    6990:	10000326 	beq	r2,zero,69a0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    6994:	e0bffc17 	ldw	r2,-16(fp)
    6998:	e0fffb17 	ldw	r3,-20(fp)
    699c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    69a0:	e0bfff17 	ldw	r2,-4(fp)
    69a4:	10800217 	ldw	r2,8(r2)
    69a8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    69ac:	e0bffe17 	ldw	r2,-8(fp)
    69b0:	10000a15 	stw	zero,40(r2)
#endif
}
    69b4:	0001883a 	nop
    69b8:	e037883a 	mov	sp,fp
    69bc:	df000017 	ldw	fp,0(sp)
    69c0:	dec00104 	addi	sp,sp,4
    69c4:	f800283a 	ret

000069c8 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    69c8:	defff404 	addi	sp,sp,-48
    69cc:	df000b15 	stw	fp,44(sp)
    69d0:	df000b04 	addi	fp,sp,44
    69d4:	e13ffc15 	stw	r4,-16(fp)
    69d8:	e17ffd15 	stw	r5,-12(fp)
    69dc:	e1bffe15 	stw	r6,-8(fp)
    69e0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    69e4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    69e8:	e0bfff17 	ldw	r2,-4(fp)
    69ec:	1000021e 	bne	r2,zero,69f8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    69f0:	0005883a 	mov	r2,zero
    69f4:	00006506 	br	6b8c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    69f8:	e0bffc17 	ldw	r2,-16(fp)
    69fc:	1000051e 	bne	r2,zero,6a14 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    6a00:	e0bfff17 	ldw	r2,-4(fp)
    6a04:	00c01884 	movi	r3,98
    6a08:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a0c:	0005883a 	mov	r2,zero
    6a10:	00005e06 	br	6b8c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    6a14:	e0bffc17 	ldw	r2,-16(fp)
    6a18:	108000cc 	andi	r2,r2,3
    6a1c:	10000526 	beq	r2,zero,6a34 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    6a20:	e0bfff17 	ldw	r2,-4(fp)
    6a24:	00c01884 	movi	r3,98
    6a28:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a2c:	0005883a 	mov	r2,zero
    6a30:	00005606 	br	6b8c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    6a34:	e0bffd17 	ldw	r2,-12(fp)
    6a38:	108000a8 	cmpgeui	r2,r2,2
    6a3c:	1000051e 	bne	r2,zero,6a54 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    6a40:	e0bfff17 	ldw	r2,-4(fp)
    6a44:	00c016c4 	movi	r3,91
    6a48:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a4c:	0005883a 	mov	r2,zero
    6a50:	00004e06 	br	6b8c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    6a54:	e0bffe17 	ldw	r2,-8(fp)
    6a58:	10800128 	cmpgeui	r2,r2,4
    6a5c:	1000051e 	bne	r2,zero,6a74 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    6a60:	e0bfff17 	ldw	r2,-4(fp)
    6a64:	00c01704 	movi	r3,92
    6a68:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a6c:	0005883a 	mov	r2,zero
    6a70:	00004606 	br	6b8c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a74:	0005303a 	rdctl	r2,status
    6a78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a7c:	e0fffb17 	ldw	r3,-20(fp)
    6a80:	00bfff84 	movi	r2,-2
    6a84:	1884703a 	and	r2,r3,r2
    6a88:	1001703a 	wrctl	status,r2
  
  return context;
    6a8c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6a90:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    6a94:	d0a70b17 	ldw	r2,-25556(gp)
    6a98:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    6a9c:	d0a70b17 	ldw	r2,-25556(gp)
    6aa0:	10000326 	beq	r2,zero,6ab0 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    6aa4:	d0a70b17 	ldw	r2,-25556(gp)
    6aa8:	10800117 	ldw	r2,4(r2)
    6aac:	d0a70b15 	stw	r2,-25556(gp)
    6ab0:	e0bff817 	ldw	r2,-32(fp)
    6ab4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ab8:	e0bff917 	ldw	r2,-28(fp)
    6abc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    6ac0:	e0bffa17 	ldw	r2,-24(fp)
    6ac4:	1000051e 	bne	r2,zero,6adc <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    6ac8:	e0bfff17 	ldw	r2,-4(fp)
    6acc:	00c01684 	movi	r3,90
    6ad0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6ad4:	0005883a 	mov	r2,zero
    6ad8:	00002c06 	br	6b8c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    6adc:	e0bffc17 	ldw	r2,-16(fp)
    6ae0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    6ae4:	e0fffc17 	ldw	r3,-16(fp)
    6ae8:	e0bffe17 	ldw	r2,-8(fp)
    6aec:	1885883a 	add	r2,r3,r2
    6af0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    6af4:	e03ff715 	stw	zero,-36(fp)
    6af8:	00000c06 	br	6b2c <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    6afc:	e0bff617 	ldw	r2,-40(fp)
    6b00:	e0fff517 	ldw	r3,-44(fp)
    6b04:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    6b08:	e0bff517 	ldw	r2,-44(fp)
    6b0c:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    6b10:	e0fff517 	ldw	r3,-44(fp)
    6b14:	e0bffe17 	ldw	r2,-8(fp)
    6b18:	1885883a 	add	r2,r3,r2
    6b1c:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    6b20:	e0bff717 	ldw	r2,-36(fp)
    6b24:	10800044 	addi	r2,r2,1
    6b28:	e0bff715 	stw	r2,-36(fp)
    6b2c:	e0bffd17 	ldw	r2,-12(fp)
    6b30:	10bfffc4 	addi	r2,r2,-1
    6b34:	e0fff717 	ldw	r3,-36(fp)
    6b38:	18bff036 	bltu	r3,r2,6afc <__alt_data_end+0xfffee45c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    6b3c:	e0bff617 	ldw	r2,-40(fp)
    6b40:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    6b44:	e0bffa17 	ldw	r2,-24(fp)
    6b48:	e0fffc17 	ldw	r3,-16(fp)
    6b4c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    6b50:	e0bffa17 	ldw	r2,-24(fp)
    6b54:	e0fffc17 	ldw	r3,-16(fp)
    6b58:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    6b5c:	e0bffa17 	ldw	r2,-24(fp)
    6b60:	e0fffd17 	ldw	r3,-12(fp)
    6b64:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    6b68:	e0bffa17 	ldw	r2,-24(fp)
    6b6c:	e0fffd17 	ldw	r3,-12(fp)
    6b70:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    6b74:	e0bffa17 	ldw	r2,-24(fp)
    6b78:	e0fffe17 	ldw	r3,-8(fp)
    6b7c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    6b80:	e0bfff17 	ldw	r2,-4(fp)
    6b84:	10000005 	stb	zero,0(r2)
    return (pmem);
    6b88:	e0bffa17 	ldw	r2,-24(fp)
}
    6b8c:	e037883a 	mov	sp,fp
    6b90:	df000017 	ldw	fp,0(sp)
    6b94:	dec00104 	addi	sp,sp,4
    6b98:	f800283a 	ret

00006b9c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    6b9c:	defff804 	addi	sp,sp,-32
    6ba0:	df000715 	stw	fp,28(sp)
    6ba4:	df000704 	addi	fp,sp,28
    6ba8:	e13ffe15 	stw	r4,-8(fp)
    6bac:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6bb0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6bb4:	e0bfff17 	ldw	r2,-4(fp)
    6bb8:	1000021e 	bne	r2,zero,6bc4 <OSMemGet+0x28>
        return ((void *)0);
    6bbc:	0005883a 	mov	r2,zero
    6bc0:	00002e06 	br	6c7c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    6bc4:	e0bffe17 	ldw	r2,-8(fp)
    6bc8:	1000051e 	bne	r2,zero,6be0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6bcc:	e0bfff17 	ldw	r2,-4(fp)
    6bd0:	00c01804 	movi	r3,96
    6bd4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6bd8:	0005883a 	mov	r2,zero
    6bdc:	00002706 	br	6c7c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6be0:	0005303a 	rdctl	r2,status
    6be4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6be8:	e0fffd17 	ldw	r3,-12(fp)
    6bec:	00bfff84 	movi	r2,-2
    6bf0:	1884703a 	and	r2,r3,r2
    6bf4:	1001703a 	wrctl	status,r2
  
  return context;
    6bf8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6bfc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    6c00:	e0bffe17 	ldw	r2,-8(fp)
    6c04:	10800417 	ldw	r2,16(r2)
    6c08:	10001426 	beq	r2,zero,6c5c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    6c0c:	e0bffe17 	ldw	r2,-8(fp)
    6c10:	10800117 	ldw	r2,4(r2)
    6c14:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    6c18:	e0bffb17 	ldw	r2,-20(fp)
    6c1c:	10c00017 	ldw	r3,0(r2)
    6c20:	e0bffe17 	ldw	r2,-8(fp)
    6c24:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    6c28:	e0bffe17 	ldw	r2,-8(fp)
    6c2c:	10800417 	ldw	r2,16(r2)
    6c30:	10ffffc4 	addi	r3,r2,-1
    6c34:	e0bffe17 	ldw	r2,-8(fp)
    6c38:	10c00415 	stw	r3,16(r2)
    6c3c:	e0bff917 	ldw	r2,-28(fp)
    6c40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c44:	e0bffa17 	ldw	r2,-24(fp)
    6c48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    6c4c:	e0bfff17 	ldw	r2,-4(fp)
    6c50:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    6c54:	e0bffb17 	ldw	r2,-20(fp)
    6c58:	00000806 	br	6c7c <OSMemGet+0xe0>
    6c5c:	e0bff917 	ldw	r2,-28(fp)
    6c60:	e0bffc15 	stw	r2,-16(fp)
    6c64:	e0bffc17 	ldw	r2,-16(fp)
    6c68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    6c6c:	e0bfff17 	ldw	r2,-4(fp)
    6c70:	00c01744 	movi	r3,93
    6c74:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    6c78:	0005883a 	mov	r2,zero
}
    6c7c:	e037883a 	mov	sp,fp
    6c80:	df000017 	ldw	fp,0(sp)
    6c84:	dec00104 	addi	sp,sp,4
    6c88:	f800283a 	ret

00006c8c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    6c8c:	defff704 	addi	sp,sp,-36
    6c90:	dfc00815 	stw	ra,32(sp)
    6c94:	df000715 	stw	fp,28(sp)
    6c98:	df000704 	addi	fp,sp,28
    6c9c:	e13ffd15 	stw	r4,-12(fp)
    6ca0:	e17ffe15 	stw	r5,-8(fp)
    6ca4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6ca8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6cac:	e0bfff17 	ldw	r2,-4(fp)
    6cb0:	1000021e 	bne	r2,zero,6cbc <OSMemNameGet+0x30>
        return (0);
    6cb4:	0005883a 	mov	r2,zero
    6cb8:	00002b06 	br	6d68 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6cbc:	e0bffd17 	ldw	r2,-12(fp)
    6cc0:	1000051e 	bne	r2,zero,6cd8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6cc4:	e0bfff17 	ldw	r2,-4(fp)
    6cc8:	00c01804 	movi	r3,96
    6ccc:	10c00005 	stb	r3,0(r2)
        return (0);
    6cd0:	0005883a 	mov	r2,zero
    6cd4:	00002406 	br	6d68 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6cd8:	e0bffe17 	ldw	r2,-8(fp)
    6cdc:	1000051e 	bne	r2,zero,6cf4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6ce0:	e0bfff17 	ldw	r2,-4(fp)
    6ce4:	00c00304 	movi	r3,12
    6ce8:	10c00005 	stb	r3,0(r2)
        return (0);
    6cec:	0005883a 	mov	r2,zero
    6cf0:	00001d06 	br	6d68 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6cf4:	d0a71003 	ldbu	r2,-25536(gp)
    6cf8:	10803fcc 	andi	r2,r2,255
    6cfc:	10000526 	beq	r2,zero,6d14 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    6d00:	e0bfff17 	ldw	r2,-4(fp)
    6d04:	00c00444 	movi	r3,17
    6d08:	10c00005 	stb	r3,0(r2)
        return (0);
    6d0c:	0005883a 	mov	r2,zero
    6d10:	00001506 	br	6d68 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6d14:	0005303a 	rdctl	r2,status
    6d18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d1c:	e0fffb17 	ldw	r3,-20(fp)
    6d20:	00bfff84 	movi	r2,-2
    6d24:	1884703a 	and	r2,r3,r2
    6d28:	1001703a 	wrctl	status,r2
  
  return context;
    6d2c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6d30:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    6d34:	e0bffd17 	ldw	r2,-12(fp)
    6d38:	10800504 	addi	r2,r2,20
    6d3c:	100b883a 	mov	r5,r2
    6d40:	e13ffe17 	ldw	r4,-8(fp)
    6d44:	0004b940 	call	4b94 <OS_StrCopy>
    6d48:	e0bffa05 	stb	r2,-24(fp)
    6d4c:	e0bff917 	ldw	r2,-28(fp)
    6d50:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6d54:	e0bffc17 	ldw	r2,-16(fp)
    6d58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6d5c:	e0bfff17 	ldw	r2,-4(fp)
    6d60:	10000005 	stb	zero,0(r2)
    return (len);
    6d64:	e0bffa03 	ldbu	r2,-24(fp)
}
    6d68:	e037883a 	mov	sp,fp
    6d6c:	dfc00117 	ldw	ra,4(sp)
    6d70:	df000017 	ldw	fp,0(sp)
    6d74:	dec00204 	addi	sp,sp,8
    6d78:	f800283a 	ret

00006d7c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    6d7c:	defff604 	addi	sp,sp,-40
    6d80:	dfc00915 	stw	ra,36(sp)
    6d84:	df000815 	stw	fp,32(sp)
    6d88:	df000804 	addi	fp,sp,32
    6d8c:	e13ffd15 	stw	r4,-12(fp)
    6d90:	e17ffe15 	stw	r5,-8(fp)
    6d94:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6d98:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6d9c:	e0bfff17 	ldw	r2,-4(fp)
    6da0:	10003526 	beq	r2,zero,6e78 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6da4:	e0bffd17 	ldw	r2,-12(fp)
    6da8:	1000041e 	bne	r2,zero,6dbc <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6dac:	e0bfff17 	ldw	r2,-4(fp)
    6db0:	00c01804 	movi	r3,96
    6db4:	10c00005 	stb	r3,0(r2)
        return;
    6db8:	00003006 	br	6e7c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6dbc:	e0bffe17 	ldw	r2,-8(fp)
    6dc0:	1000041e 	bne	r2,zero,6dd4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    6dc4:	e0bfff17 	ldw	r2,-4(fp)
    6dc8:	00c00304 	movi	r3,12
    6dcc:	10c00005 	stb	r3,0(r2)
        return;
    6dd0:	00002a06 	br	6e7c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6dd4:	d0a71003 	ldbu	r2,-25536(gp)
    6dd8:	10803fcc 	andi	r2,r2,255
    6ddc:	10000426 	beq	r2,zero,6df0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    6de0:	e0bfff17 	ldw	r2,-4(fp)
    6de4:	00c00484 	movi	r3,18
    6de8:	10c00005 	stb	r3,0(r2)
        return;
    6dec:	00002306 	br	6e7c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6df0:	0005303a 	rdctl	r2,status
    6df4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6df8:	e0fffc17 	ldw	r3,-16(fp)
    6dfc:	00bfff84 	movi	r2,-2
    6e00:	1884703a 	and	r2,r3,r2
    6e04:	1001703a 	wrctl	status,r2
  
  return context;
    6e08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6e0c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6e10:	e13ffe17 	ldw	r4,-8(fp)
    6e14:	0004c080 	call	4c08 <OS_StrLen>
    6e18:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    6e1c:	e0bffa03 	ldbu	r2,-24(fp)
    6e20:	10800830 	cmpltui	r2,r2,32
    6e24:	1000081e 	bne	r2,zero,6e48 <OSMemNameSet+0xcc>
    6e28:	e0bff817 	ldw	r2,-32(fp)
    6e2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e30:	e0bff917 	ldw	r2,-28(fp)
    6e34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    6e38:	e0bfff17 	ldw	r2,-4(fp)
    6e3c:	00c018c4 	movi	r3,99
    6e40:	10c00005 	stb	r3,0(r2)
        return;
    6e44:	00000d06 	br	6e7c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    6e48:	e0bffd17 	ldw	r2,-12(fp)
    6e4c:	10800504 	addi	r2,r2,20
    6e50:	e17ffe17 	ldw	r5,-8(fp)
    6e54:	1009883a 	mov	r4,r2
    6e58:	0004b940 	call	4b94 <OS_StrCopy>
    6e5c:	e0bff817 	ldw	r2,-32(fp)
    6e60:	e0bffb15 	stw	r2,-20(fp)
    6e64:	e0bffb17 	ldw	r2,-20(fp)
    6e68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6e6c:	e0bfff17 	ldw	r2,-4(fp)
    6e70:	10000005 	stb	zero,0(r2)
    6e74:	00000106 	br	6e7c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    6e78:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    6e7c:	e037883a 	mov	sp,fp
    6e80:	dfc00117 	ldw	ra,4(sp)
    6e84:	df000017 	ldw	fp,0(sp)
    6e88:	dec00204 	addi	sp,sp,8
    6e8c:	f800283a 	ret

00006e90 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    6e90:	defff904 	addi	sp,sp,-28
    6e94:	df000615 	stw	fp,24(sp)
    6e98:	df000604 	addi	fp,sp,24
    6e9c:	e13ffe15 	stw	r4,-8(fp)
    6ea0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6ea4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6ea8:	e0bffe17 	ldw	r2,-8(fp)
    6eac:	1000021e 	bne	r2,zero,6eb8 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6eb0:	00801804 	movi	r2,96
    6eb4:	00002806 	br	6f58 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    6eb8:	e0bfff17 	ldw	r2,-4(fp)
    6ebc:	1000021e 	bne	r2,zero,6ec8 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    6ec0:	008017c4 	movi	r2,95
    6ec4:	00002406 	br	6f58 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ec8:	0005303a 	rdctl	r2,status
    6ecc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ed0:	e0fffd17 	ldw	r3,-12(fp)
    6ed4:	00bfff84 	movi	r2,-2
    6ed8:	1884703a 	and	r2,r3,r2
    6edc:	1001703a 	wrctl	status,r2
  
  return context;
    6ee0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6ee4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    6ee8:	e0bffe17 	ldw	r2,-8(fp)
    6eec:	10c00417 	ldw	r3,16(r2)
    6ef0:	e0bffe17 	ldw	r2,-8(fp)
    6ef4:	10800317 	ldw	r2,12(r2)
    6ef8:	18800636 	bltu	r3,r2,6f14 <OSMemPut+0x84>
    6efc:	e0bffa17 	ldw	r2,-24(fp)
    6f00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f04:	e0bffb17 	ldw	r2,-20(fp)
    6f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    6f0c:	00801784 	movi	r2,94
    6f10:	00001106 	br	6f58 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    6f14:	e0bffe17 	ldw	r2,-8(fp)
    6f18:	10c00117 	ldw	r3,4(r2)
    6f1c:	e0bfff17 	ldw	r2,-4(fp)
    6f20:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    6f24:	e0bffe17 	ldw	r2,-8(fp)
    6f28:	e0ffff17 	ldw	r3,-4(fp)
    6f2c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    6f30:	e0bffe17 	ldw	r2,-8(fp)
    6f34:	10800417 	ldw	r2,16(r2)
    6f38:	10c00044 	addi	r3,r2,1
    6f3c:	e0bffe17 	ldw	r2,-8(fp)
    6f40:	10c00415 	stw	r3,16(r2)
    6f44:	e0bffa17 	ldw	r2,-24(fp)
    6f48:	e0bffc15 	stw	r2,-16(fp)
    6f4c:	e0bffc17 	ldw	r2,-16(fp)
    6f50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    6f54:	0005883a 	mov	r2,zero
}
    6f58:	e037883a 	mov	sp,fp
    6f5c:	df000017 	ldw	fp,0(sp)
    6f60:	dec00104 	addi	sp,sp,4
    6f64:	f800283a 	ret

00006f68 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    6f68:	defffa04 	addi	sp,sp,-24
    6f6c:	df000515 	stw	fp,20(sp)
    6f70:	df000504 	addi	fp,sp,20
    6f74:	e13ffe15 	stw	r4,-8(fp)
    6f78:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6f7c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6f80:	e0bffe17 	ldw	r2,-8(fp)
    6f84:	1000021e 	bne	r2,zero,6f90 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6f88:	00801804 	movi	r2,96
    6f8c:	00002c06 	br	7040 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    6f90:	e0bfff17 	ldw	r2,-4(fp)
    6f94:	1000021e 	bne	r2,zero,6fa0 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    6f98:	00801844 	movi	r2,97
    6f9c:	00002806 	br	7040 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6fa0:	0005303a 	rdctl	r2,status
    6fa4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fa8:	e0fffc17 	ldw	r3,-16(fp)
    6fac:	00bfff84 	movi	r2,-2
    6fb0:	1884703a 	and	r2,r3,r2
    6fb4:	1001703a 	wrctl	status,r2
  
  return context;
    6fb8:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6fbc:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    6fc0:	e0bffe17 	ldw	r2,-8(fp)
    6fc4:	10c00017 	ldw	r3,0(r2)
    6fc8:	e0bfff17 	ldw	r2,-4(fp)
    6fcc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    6fd0:	e0bffe17 	ldw	r2,-8(fp)
    6fd4:	10c00117 	ldw	r3,4(r2)
    6fd8:	e0bfff17 	ldw	r2,-4(fp)
    6fdc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    6fe0:	e0bffe17 	ldw	r2,-8(fp)
    6fe4:	10c00217 	ldw	r3,8(r2)
    6fe8:	e0bfff17 	ldw	r2,-4(fp)
    6fec:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    6ff0:	e0bffe17 	ldw	r2,-8(fp)
    6ff4:	10c00317 	ldw	r3,12(r2)
    6ff8:	e0bfff17 	ldw	r2,-4(fp)
    6ffc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    7000:	e0bffe17 	ldw	r2,-8(fp)
    7004:	10c00417 	ldw	r3,16(r2)
    7008:	e0bfff17 	ldw	r2,-4(fp)
    700c:	10c00415 	stw	r3,16(r2)
    7010:	e0bffb17 	ldw	r2,-20(fp)
    7014:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7018:	e0bffd17 	ldw	r2,-12(fp)
    701c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    7020:	e0bfff17 	ldw	r2,-4(fp)
    7024:	10c00317 	ldw	r3,12(r2)
    7028:	e0bfff17 	ldw	r2,-4(fp)
    702c:	10800417 	ldw	r2,16(r2)
    7030:	1887c83a 	sub	r3,r3,r2
    7034:	e0bfff17 	ldw	r2,-4(fp)
    7038:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    703c:	0005883a 	mov	r2,zero
}
    7040:	e037883a 	mov	sp,fp
    7044:	df000017 	ldw	fp,0(sp)
    7048:	dec00104 	addi	sp,sp,4
    704c:	f800283a 	ret

00007050 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    7050:	defffc04 	addi	sp,sp,-16
    7054:	dfc00315 	stw	ra,12(sp)
    7058:	df000215 	stw	fp,8(sp)
    705c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    7060:	01430c04 	movi	r5,3120
    7064:	01000074 	movhi	r4,1
    7068:	21133504 	addi	r4,r4,19668
    706c:	00049940 	call	4994 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    7070:	00800074 	movhi	r2,1
    7074:	10933504 	addi	r2,r2,19668
    7078:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    707c:	e03fff0d 	sth	zero,-4(fp)
    7080:	00001606 	br	70dc <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7084:	e0bfff0b 	ldhu	r2,-4(fp)
    7088:	10800044 	addi	r2,r2,1
    708c:	01400d04 	movi	r5,52
    7090:	1009883a 	mov	r4,r2
    7094:	000244c0 	call	244c <__mulsi3>
    7098:	1007883a 	mov	r3,r2
    709c:	00800074 	movhi	r2,1
    70a0:	10933504 	addi	r2,r2,19668
    70a4:	1887883a 	add	r3,r3,r2
    70a8:	e0bffe17 	ldw	r2,-8(fp)
    70ac:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    70b0:	e0bffe17 	ldw	r2,-8(fp)
    70b4:	00c00fc4 	movi	r3,63
    70b8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    70bc:	e0bffe17 	ldw	r2,-8(fp)
    70c0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    70c4:	e0bffe17 	ldw	r2,-8(fp)
    70c8:	10800d04 	addi	r2,r2,52
    70cc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    70d0:	e0bfff0b 	ldhu	r2,-4(fp)
    70d4:	10800044 	addi	r2,r2,1
    70d8:	e0bfff0d 	sth	r2,-4(fp)
    70dc:	e0bfff0b 	ldhu	r2,-4(fp)
    70e0:	10800ef0 	cmpltui	r2,r2,59
    70e4:	103fe71e 	bne	r2,zero,7084 <__alt_data_end+0xfffee9e4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    70e8:	e0bffe17 	ldw	r2,-8(fp)
    70ec:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    70f0:	e0bffe17 	ldw	r2,-8(fp)
    70f4:	00c00fc4 	movi	r3,63
    70f8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    70fc:	e0bffe17 	ldw	r2,-8(fp)
    7100:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7104:	00800074 	movhi	r2,1
    7108:	10933504 	addi	r2,r2,19668
    710c:	d0a70b15 	stw	r2,-25556(gp)
#endif
}
    7110:	0001883a 	nop
    7114:	e037883a 	mov	sp,fp
    7118:	dfc00117 	ldw	ra,4(sp)
    711c:	df000017 	ldw	fp,0(sp)
    7120:	dec00204 	addi	sp,sp,8
    7124:	f800283a 	ret

00007128 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7128:	defff804 	addi	sp,sp,-32
    712c:	df000715 	stw	fp,28(sp)
    7130:	df000704 	addi	fp,sp,28
    7134:	e13ffe15 	stw	r4,-8(fp)
    7138:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    713c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7140:	e0bfff17 	ldw	r2,-4(fp)
    7144:	1000021e 	bne	r2,zero,7150 <OSQAccept+0x28>
        return ((void *)0);
    7148:	0005883a 	mov	r2,zero
    714c:	00004206 	br	7258 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7150:	e0bffe17 	ldw	r2,-8(fp)
    7154:	1000051e 	bne	r2,zero,716c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7158:	e0bfff17 	ldw	r2,-4(fp)
    715c:	00c00104 	movi	r3,4
    7160:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7164:	0005883a 	mov	r2,zero
    7168:	00003b06 	br	7258 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    716c:	e0bffe17 	ldw	r2,-8(fp)
    7170:	10800003 	ldbu	r2,0(r2)
    7174:	10803fcc 	andi	r2,r2,255
    7178:	108000a0 	cmpeqi	r2,r2,2
    717c:	1000051e 	bne	r2,zero,7194 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    7180:	e0bfff17 	ldw	r2,-4(fp)
    7184:	00c00044 	movi	r3,1
    7188:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    718c:	0005883a 	mov	r2,zero
    7190:	00003106 	br	7258 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7194:	0005303a 	rdctl	r2,status
    7198:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    719c:	e0fffd17 	ldw	r3,-12(fp)
    71a0:	00bfff84 	movi	r2,-2
    71a4:	1884703a 	and	r2,r3,r2
    71a8:	1001703a 	wrctl	status,r2
  
  return context;
    71ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    71b0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    71b4:	e0bffe17 	ldw	r2,-8(fp)
    71b8:	10800117 	ldw	r2,4(r2)
    71bc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    71c0:	e0bffc17 	ldw	r2,-16(fp)
    71c4:	1080058b 	ldhu	r2,22(r2)
    71c8:	10bfffcc 	andi	r2,r2,65535
    71cc:	10001926 	beq	r2,zero,7234 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    71d0:	e0bffc17 	ldw	r2,-16(fp)
    71d4:	10800417 	ldw	r2,16(r2)
    71d8:	11000104 	addi	r4,r2,4
    71dc:	e0fffc17 	ldw	r3,-16(fp)
    71e0:	19000415 	stw	r4,16(r3)
    71e4:	10800017 	ldw	r2,0(r2)
    71e8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    71ec:	e0bffc17 	ldw	r2,-16(fp)
    71f0:	1080058b 	ldhu	r2,22(r2)
    71f4:	10bfffc4 	addi	r2,r2,-1
    71f8:	1007883a 	mov	r3,r2
    71fc:	e0bffc17 	ldw	r2,-16(fp)
    7200:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7204:	e0bffc17 	ldw	r2,-16(fp)
    7208:	10c00417 	ldw	r3,16(r2)
    720c:	e0bffc17 	ldw	r2,-16(fp)
    7210:	10800217 	ldw	r2,8(r2)
    7214:	1880041e 	bne	r3,r2,7228 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    7218:	e0bffc17 	ldw	r2,-16(fp)
    721c:	10c00117 	ldw	r3,4(r2)
    7220:	e0bffc17 	ldw	r2,-16(fp)
    7224:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    7228:	e0bfff17 	ldw	r2,-4(fp)
    722c:	10000005 	stb	zero,0(r2)
    7230:	00000406 	br	7244 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    7234:	e0bfff17 	ldw	r2,-4(fp)
    7238:	00c007c4 	movi	r3,31
    723c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    7240:	e03ff915 	stw	zero,-28(fp)
    7244:	e0bffa17 	ldw	r2,-24(fp)
    7248:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    724c:	e0bffb17 	ldw	r2,-20(fp)
    7250:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    7254:	e0bff917 	ldw	r2,-28(fp)
}
    7258:	e037883a 	mov	sp,fp
    725c:	df000017 	ldw	fp,0(sp)
    7260:	dec00104 	addi	sp,sp,4
    7264:	f800283a 	ret

00007268 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7268:	defff404 	addi	sp,sp,-48
    726c:	dfc00b15 	stw	ra,44(sp)
    7270:	df000a15 	stw	fp,40(sp)
    7274:	df000a04 	addi	fp,sp,40
    7278:	e13ffe15 	stw	r4,-8(fp)
    727c:	2805883a 	mov	r2,r5
    7280:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7284:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7288:	d0a71003 	ldbu	r2,-25536(gp)
    728c:	10803fcc 	andi	r2,r2,255
    7290:	10000226 	beq	r2,zero,729c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7294:	0005883a 	mov	r2,zero
    7298:	00005906 	br	7400 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    729c:	0005303a 	rdctl	r2,status
    72a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72a4:	e0fffd17 	ldw	r3,-12(fp)
    72a8:	00bfff84 	movi	r2,-2
    72ac:	1884703a 	and	r2,r3,r2
    72b0:	1001703a 	wrctl	status,r2
  
  return context;
    72b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    72b8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    72bc:	d0a70f17 	ldw	r2,-25540(gp)
    72c0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    72c4:	d0a70f17 	ldw	r2,-25540(gp)
    72c8:	10000326 	beq	r2,zero,72d8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    72cc:	d0a70f17 	ldw	r2,-25540(gp)
    72d0:	10800117 	ldw	r2,4(r2)
    72d4:	d0a70f15 	stw	r2,-25540(gp)
    72d8:	e0bff717 	ldw	r2,-36(fp)
    72dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    72e0:	e0bff817 	ldw	r2,-32(fp)
    72e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    72e8:	e0bff617 	ldw	r2,-40(fp)
    72ec:	10004326 	beq	r2,zero,73fc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72f0:	0005303a 	rdctl	r2,status
    72f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72f8:	e0fff917 	ldw	r3,-28(fp)
    72fc:	00bfff84 	movi	r2,-2
    7300:	1884703a 	and	r2,r3,r2
    7304:	1001703a 	wrctl	status,r2
  
  return context;
    7308:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    730c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    7310:	d0a70d17 	ldw	r2,-25548(gp)
    7314:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7318:	e0bffb17 	ldw	r2,-20(fp)
    731c:	10002d26 	beq	r2,zero,73d4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    7320:	d0a70d17 	ldw	r2,-25548(gp)
    7324:	10800017 	ldw	r2,0(r2)
    7328:	d0a70d15 	stw	r2,-25548(gp)
    732c:	e0bff717 	ldw	r2,-36(fp)
    7330:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7334:	e0bffa17 	ldw	r2,-24(fp)
    7338:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    733c:	e0bffb17 	ldw	r2,-20(fp)
    7340:	e0fffe17 	ldw	r3,-8(fp)
    7344:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    7348:	e0bfff0b 	ldhu	r2,-4(fp)
    734c:	1085883a 	add	r2,r2,r2
    7350:	1085883a 	add	r2,r2,r2
    7354:	1007883a 	mov	r3,r2
    7358:	e0bffe17 	ldw	r2,-8(fp)
    735c:	10c7883a 	add	r3,r2,r3
    7360:	e0bffb17 	ldw	r2,-20(fp)
    7364:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    7368:	e0bffb17 	ldw	r2,-20(fp)
    736c:	e0fffe17 	ldw	r3,-8(fp)
    7370:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    7374:	e0bffb17 	ldw	r2,-20(fp)
    7378:	e0fffe17 	ldw	r3,-8(fp)
    737c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    7380:	e0bffb17 	ldw	r2,-20(fp)
    7384:	e0ffff0b 	ldhu	r3,-4(fp)
    7388:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    738c:	e0bffb17 	ldw	r2,-20(fp)
    7390:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    7394:	e0bff617 	ldw	r2,-40(fp)
    7398:	00c00084 	movi	r3,2
    739c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    73a0:	e0bff617 	ldw	r2,-40(fp)
    73a4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    73a8:	e0bff617 	ldw	r2,-40(fp)
    73ac:	e0fffb17 	ldw	r3,-20(fp)
    73b0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    73b4:	e0bff617 	ldw	r2,-40(fp)
    73b8:	00c00fc4 	movi	r3,63
    73bc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    73c0:	e0bff617 	ldw	r2,-40(fp)
    73c4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    73c8:	e13ff617 	ldw	r4,-40(fp)
    73cc:	00045b40 	call	45b4 <OS_EventWaitListInit>
    73d0:	00000a06 	br	73fc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    73d4:	d0e70f17 	ldw	r3,-25540(gp)
    73d8:	e0bff617 	ldw	r2,-40(fp)
    73dc:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    73e0:	e0bff617 	ldw	r2,-40(fp)
    73e4:	d0a70f15 	stw	r2,-25540(gp)
    73e8:	e0bff717 	ldw	r2,-36(fp)
    73ec:	e0bffc15 	stw	r2,-16(fp)
    73f0:	e0bffc17 	ldw	r2,-16(fp)
    73f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    73f8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    73fc:	e0bff617 	ldw	r2,-40(fp)
}
    7400:	e037883a 	mov	sp,fp
    7404:	dfc00117 	ldw	ra,4(sp)
    7408:	df000017 	ldw	fp,0(sp)
    740c:	dec00204 	addi	sp,sp,8
    7410:	f800283a 	ret

00007414 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7414:	defff204 	addi	sp,sp,-56
    7418:	dfc00d15 	stw	ra,52(sp)
    741c:	df000c15 	stw	fp,48(sp)
    7420:	df000c04 	addi	fp,sp,48
    7424:	e13ffd15 	stw	r4,-12(fp)
    7428:	2805883a 	mov	r2,r5
    742c:	e1bfff15 	stw	r6,-4(fp)
    7430:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7434:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7438:	e0bfff17 	ldw	r2,-4(fp)
    743c:	1000021e 	bne	r2,zero,7448 <OSQDel+0x34>
        return (pevent);
    7440:	e0bffd17 	ldw	r2,-12(fp)
    7444:	00008e06 	br	7680 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7448:	e0bffd17 	ldw	r2,-12(fp)
    744c:	1000051e 	bne	r2,zero,7464 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7450:	e0bfff17 	ldw	r2,-4(fp)
    7454:	00c00104 	movi	r3,4
    7458:	10c00005 	stb	r3,0(r2)
        return (pevent);
    745c:	e0bffd17 	ldw	r2,-12(fp)
    7460:	00008706 	br	7680 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7464:	e0bffd17 	ldw	r2,-12(fp)
    7468:	10800003 	ldbu	r2,0(r2)
    746c:	10803fcc 	andi	r2,r2,255
    7470:	108000a0 	cmpeqi	r2,r2,2
    7474:	1000051e 	bne	r2,zero,748c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7478:	e0bfff17 	ldw	r2,-4(fp)
    747c:	00c00044 	movi	r3,1
    7480:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7484:	e0bffd17 	ldw	r2,-12(fp)
    7488:	00007d06 	br	7680 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    748c:	d0a71003 	ldbu	r2,-25536(gp)
    7490:	10803fcc 	andi	r2,r2,255
    7494:	10000526 	beq	r2,zero,74ac <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7498:	e0bfff17 	ldw	r2,-4(fp)
    749c:	00c003c4 	movi	r3,15
    74a0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    74a4:	e0bffd17 	ldw	r2,-12(fp)
    74a8:	00007506 	br	7680 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74ac:	0005303a 	rdctl	r2,status
    74b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74b4:	e0fffc17 	ldw	r3,-16(fp)
    74b8:	00bfff84 	movi	r2,-2
    74bc:	1884703a 	and	r2,r3,r2
    74c0:	1001703a 	wrctl	status,r2
  
  return context;
    74c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    74c8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    74cc:	e0bffd17 	ldw	r2,-12(fp)
    74d0:	10800283 	ldbu	r2,10(r2)
    74d4:	10803fcc 	andi	r2,r2,255
    74d8:	10000326 	beq	r2,zero,74e8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    74dc:	00800044 	movi	r2,1
    74e0:	e0bff405 	stb	r2,-48(fp)
    74e4:	00000106 	br	74ec <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    74e8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    74ec:	e0bffe03 	ldbu	r2,-8(fp)
    74f0:	10000326 	beq	r2,zero,7500 <OSQDel+0xec>
    74f4:	10800060 	cmpeqi	r2,r2,1
    74f8:	1000301e 	bne	r2,zero,75bc <OSQDel+0x1a8>
    74fc:	00005506 	br	7654 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    7500:	e0bff403 	ldbu	r2,-48(fp)
    7504:	10001e1e 	bne	r2,zero,7580 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    7508:	e0bffd17 	ldw	r2,-12(fp)
    750c:	00c00fc4 	movi	r3,63
    7510:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    7514:	e0bffd17 	ldw	r2,-12(fp)
    7518:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    751c:	e0bffd17 	ldw	r2,-12(fp)
    7520:	10800117 	ldw	r2,4(r2)
    7524:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    7528:	d0e70d17 	ldw	r3,-25548(gp)
    752c:	e0bff817 	ldw	r2,-32(fp)
    7530:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    7534:	e0bff817 	ldw	r2,-32(fp)
    7538:	d0a70d15 	stw	r2,-25548(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    753c:	e0bffd17 	ldw	r2,-12(fp)
    7540:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    7544:	d0e70f17 	ldw	r3,-25540(gp)
    7548:	e0bffd17 	ldw	r2,-12(fp)
    754c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    7550:	e0bffd17 	ldw	r2,-12(fp)
    7554:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    7558:	e0bffd17 	ldw	r2,-12(fp)
    755c:	d0a70f15 	stw	r2,-25540(gp)
    7560:	e0bff617 	ldw	r2,-40(fp)
    7564:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7568:	e0bff717 	ldw	r2,-36(fp)
    756c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    7570:	e0bfff17 	ldw	r2,-4(fp)
    7574:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    7578:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    757c:	00003f06 	br	767c <OSQDel+0x268>
    7580:	e0bff617 	ldw	r2,-40(fp)
    7584:	e0bff915 	stw	r2,-28(fp)
    7588:	e0bff917 	ldw	r2,-28(fp)
    758c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    7590:	e0bfff17 	ldw	r2,-4(fp)
    7594:	00c01244 	movi	r3,73
    7598:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    759c:	e0bffd17 	ldw	r2,-12(fp)
    75a0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    75a4:	00003506 	br	767c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    75a8:	000f883a 	mov	r7,zero
    75ac:	01800104 	movi	r6,4
    75b0:	000b883a 	mov	r5,zero
    75b4:	e13ffd17 	ldw	r4,-12(fp)
    75b8:	00040040 	call	4004 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    75bc:	e0bffd17 	ldw	r2,-12(fp)
    75c0:	10800283 	ldbu	r2,10(r2)
    75c4:	10803fcc 	andi	r2,r2,255
    75c8:	103ff71e 	bne	r2,zero,75a8 <__alt_data_end+0xfffeef08>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    75cc:	e0bffd17 	ldw	r2,-12(fp)
    75d0:	00c00fc4 	movi	r3,63
    75d4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    75d8:	e0bffd17 	ldw	r2,-12(fp)
    75dc:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    75e0:	e0bffd17 	ldw	r2,-12(fp)
    75e4:	10800117 	ldw	r2,4(r2)
    75e8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    75ec:	d0e70d17 	ldw	r3,-25548(gp)
    75f0:	e0bff817 	ldw	r2,-32(fp)
    75f4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    75f8:	e0bff817 	ldw	r2,-32(fp)
    75fc:	d0a70d15 	stw	r2,-25548(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7600:	e0bffd17 	ldw	r2,-12(fp)
    7604:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    7608:	d0e70f17 	ldw	r3,-25540(gp)
    760c:	e0bffd17 	ldw	r2,-12(fp)
    7610:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    7614:	e0bffd17 	ldw	r2,-12(fp)
    7618:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    761c:	e0bffd17 	ldw	r2,-12(fp)
    7620:	d0a70f15 	stw	r2,-25540(gp)
    7624:	e0bff617 	ldw	r2,-40(fp)
    7628:	e0bffa15 	stw	r2,-24(fp)
    762c:	e0bffa17 	ldw	r2,-24(fp)
    7630:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7634:	e0bff403 	ldbu	r2,-48(fp)
    7638:	10800058 	cmpnei	r2,r2,1
    763c:	1000011e 	bne	r2,zero,7644 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    7640:	0004a500 	call	4a50 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    7644:	e0bfff17 	ldw	r2,-4(fp)
    7648:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    764c:	e03ff515 	stw	zero,-44(fp)
             break;
    7650:	00000a06 	br	767c <OSQDel+0x268>
    7654:	e0bff617 	ldw	r2,-40(fp)
    7658:	e0bffb15 	stw	r2,-20(fp)
    765c:	e0bffb17 	ldw	r2,-20(fp)
    7660:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    7664:	e0bfff17 	ldw	r2,-4(fp)
    7668:	00c001c4 	movi	r3,7
    766c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    7670:	e0bffd17 	ldw	r2,-12(fp)
    7674:	e0bff515 	stw	r2,-44(fp)
             break;
    7678:	0001883a 	nop
    }
    return (pevent_return);
    767c:	e0bff517 	ldw	r2,-44(fp)
}
    7680:	e037883a 	mov	sp,fp
    7684:	dfc00117 	ldw	ra,4(sp)
    7688:	df000017 	ldw	fp,0(sp)
    768c:	dec00204 	addi	sp,sp,8
    7690:	f800283a 	ret

00007694 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    7694:	defffa04 	addi	sp,sp,-24
    7698:	df000515 	stw	fp,20(sp)
    769c:	df000504 	addi	fp,sp,20
    76a0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    76a4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    76a8:	e0bfff17 	ldw	r2,-4(fp)
    76ac:	1000021e 	bne	r2,zero,76b8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    76b0:	00800104 	movi	r2,4
    76b4:	00002106 	br	773c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    76b8:	e0bfff17 	ldw	r2,-4(fp)
    76bc:	10800003 	ldbu	r2,0(r2)
    76c0:	10803fcc 	andi	r2,r2,255
    76c4:	108000a0 	cmpeqi	r2,r2,2
    76c8:	1000021e 	bne	r2,zero,76d4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    76cc:	00800044 	movi	r2,1
    76d0:	00001a06 	br	773c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    76d4:	0005303a 	rdctl	r2,status
    76d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    76dc:	e0fffd17 	ldw	r3,-12(fp)
    76e0:	00bfff84 	movi	r2,-2
    76e4:	1884703a 	and	r2,r3,r2
    76e8:	1001703a 	wrctl	status,r2
  
  return context;
    76ec:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    76f0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    76f4:	e0bfff17 	ldw	r2,-4(fp)
    76f8:	10800117 	ldw	r2,4(r2)
    76fc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    7700:	e0bffc17 	ldw	r2,-16(fp)
    7704:	10c00117 	ldw	r3,4(r2)
    7708:	e0bffc17 	ldw	r2,-16(fp)
    770c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    7710:	e0bffc17 	ldw	r2,-16(fp)
    7714:	10c00117 	ldw	r3,4(r2)
    7718:	e0bffc17 	ldw	r2,-16(fp)
    771c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    7720:	e0bffc17 	ldw	r2,-16(fp)
    7724:	1000058d 	sth	zero,22(r2)
    7728:	e0bffb17 	ldw	r2,-20(fp)
    772c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7730:	e0bffe17 	ldw	r2,-8(fp)
    7734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7738:	0005883a 	mov	r2,zero
}
    773c:	e037883a 	mov	sp,fp
    7740:	df000017 	ldw	fp,0(sp)
    7744:	dec00104 	addi	sp,sp,4
    7748:	f800283a 	ret

0000774c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    774c:	defff304 	addi	sp,sp,-52
    7750:	dfc00c15 	stw	ra,48(sp)
    7754:	df000b15 	stw	fp,44(sp)
    7758:	df000b04 	addi	fp,sp,44
    775c:	e13ffd15 	stw	r4,-12(fp)
    7760:	2805883a 	mov	r2,r5
    7764:	e1bfff15 	stw	r6,-4(fp)
    7768:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    776c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    7770:	e0bfff17 	ldw	r2,-4(fp)
    7774:	1000021e 	bne	r2,zero,7780 <OSQPend+0x34>
        return ((void *)0);
    7778:	0005883a 	mov	r2,zero
    777c:	00009106 	br	79c4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    7780:	e0bffd17 	ldw	r2,-12(fp)
    7784:	1000051e 	bne	r2,zero,779c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7788:	e0bfff17 	ldw	r2,-4(fp)
    778c:	00c00104 	movi	r3,4
    7790:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7794:	0005883a 	mov	r2,zero
    7798:	00008a06 	br	79c4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    779c:	e0bffd17 	ldw	r2,-12(fp)
    77a0:	10800003 	ldbu	r2,0(r2)
    77a4:	10803fcc 	andi	r2,r2,255
    77a8:	108000a0 	cmpeqi	r2,r2,2
    77ac:	1000051e 	bne	r2,zero,77c4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    77b0:	e0bfff17 	ldw	r2,-4(fp)
    77b4:	00c00044 	movi	r3,1
    77b8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77bc:	0005883a 	mov	r2,zero
    77c0:	00008006 	br	79c4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    77c4:	d0a71003 	ldbu	r2,-25536(gp)
    77c8:	10803fcc 	andi	r2,r2,255
    77cc:	10000526 	beq	r2,zero,77e4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    77d0:	e0bfff17 	ldw	r2,-4(fp)
    77d4:	00c00084 	movi	r3,2
    77d8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77dc:	0005883a 	mov	r2,zero
    77e0:	00007806 	br	79c4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    77e4:	d0a70203 	ldbu	r2,-25592(gp)
    77e8:	10803fcc 	andi	r2,r2,255
    77ec:	10000526 	beq	r2,zero,7804 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    77f0:	e0bfff17 	ldw	r2,-4(fp)
    77f4:	00c00344 	movi	r3,13
    77f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77fc:	0005883a 	mov	r2,zero
    7800:	00007006 	br	79c4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7804:	0005303a 	rdctl	r2,status
    7808:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    780c:	e0fffc17 	ldw	r3,-16(fp)
    7810:	00bfff84 	movi	r2,-2
    7814:	1884703a 	and	r2,r3,r2
    7818:	1001703a 	wrctl	status,r2
  
  return context;
    781c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7820:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7824:	e0bffd17 	ldw	r2,-12(fp)
    7828:	10800117 	ldw	r2,4(r2)
    782c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    7830:	e0bff817 	ldw	r2,-32(fp)
    7834:	1080058b 	ldhu	r2,22(r2)
    7838:	10bfffcc 	andi	r2,r2,65535
    783c:	10001e26 	beq	r2,zero,78b8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    7840:	e0bff817 	ldw	r2,-32(fp)
    7844:	10800417 	ldw	r2,16(r2)
    7848:	11000104 	addi	r4,r2,4
    784c:	e0fff817 	ldw	r3,-32(fp)
    7850:	19000415 	stw	r4,16(r3)
    7854:	10800017 	ldw	r2,0(r2)
    7858:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    785c:	e0bff817 	ldw	r2,-32(fp)
    7860:	1080058b 	ldhu	r2,22(r2)
    7864:	10bfffc4 	addi	r2,r2,-1
    7868:	1007883a 	mov	r3,r2
    786c:	e0bff817 	ldw	r2,-32(fp)
    7870:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7874:	e0bff817 	ldw	r2,-32(fp)
    7878:	10c00417 	ldw	r3,16(r2)
    787c:	e0bff817 	ldw	r2,-32(fp)
    7880:	10800217 	ldw	r2,8(r2)
    7884:	1880041e 	bne	r3,r2,7898 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    7888:	e0bff817 	ldw	r2,-32(fp)
    788c:	10c00117 	ldw	r3,4(r2)
    7890:	e0bff817 	ldw	r2,-32(fp)
    7894:	10c00415 	stw	r3,16(r2)
    7898:	e0bff617 	ldw	r2,-40(fp)
    789c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    78a0:	e0bff717 	ldw	r2,-36(fp)
    78a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    78a8:	e0bfff17 	ldw	r2,-4(fp)
    78ac:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    78b0:	e0bff517 	ldw	r2,-44(fp)
    78b4:	00004306 	br	79c4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    78b8:	d0a71117 	ldw	r2,-25532(gp)
    78bc:	d0e71117 	ldw	r3,-25532(gp)
    78c0:	18c00c03 	ldbu	r3,48(r3)
    78c4:	18c00114 	ori	r3,r3,4
    78c8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    78cc:	d0a71117 	ldw	r2,-25532(gp)
    78d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    78d4:	d0a71117 	ldw	r2,-25532(gp)
    78d8:	e0fffe0b 	ldhu	r3,-8(fp)
    78dc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    78e0:	e13ffd17 	ldw	r4,-12(fp)
    78e4:	000419c0 	call	419c <OS_EventTaskWait>
    78e8:	e0bff617 	ldw	r2,-40(fp)
    78ec:	e0bffb15 	stw	r2,-20(fp)
    78f0:	e0bffb17 	ldw	r2,-20(fp)
    78f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    78f8:	0004a500 	call	4a50 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78fc:	0005303a 	rdctl	r2,status
    7900:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7904:	e0fff917 	ldw	r3,-28(fp)
    7908:	00bfff84 	movi	r2,-2
    790c:	1884703a 	and	r2,r3,r2
    7910:	1001703a 	wrctl	status,r2
  
  return context;
    7914:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    7918:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    791c:	d0a71117 	ldw	r2,-25532(gp)
    7920:	10800c43 	ldbu	r2,49(r2)
    7924:	10803fcc 	andi	r2,r2,255
    7928:	10000326 	beq	r2,zero,7938 <OSQPend+0x1ec>
    792c:	108000a0 	cmpeqi	r2,r2,2
    7930:	1000071e 	bne	r2,zero,7950 <OSQPend+0x204>
    7934:	00000b06 	br	7964 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    7938:	d0a71117 	ldw	r2,-25532(gp)
    793c:	10800917 	ldw	r2,36(r2)
    7940:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    7944:	e0bfff17 	ldw	r2,-4(fp)
    7948:	10000005 	stb	zero,0(r2)
             break;
    794c:	00000e06 	br	7988 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    7950:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    7954:	e0bfff17 	ldw	r2,-4(fp)
    7958:	00c00384 	movi	r3,14
    795c:	10c00005 	stb	r3,0(r2)
             break;
    7960:	00000906 	br	7988 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    7964:	d0a71117 	ldw	r2,-25532(gp)
    7968:	e17ffd17 	ldw	r5,-12(fp)
    796c:	1009883a 	mov	r4,r2
    7970:	00043fc0 	call	43fc <OS_EventTaskRemove>
             pmsg = (void *)0;
    7974:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    7978:	e0bfff17 	ldw	r2,-4(fp)
    797c:	00c00284 	movi	r3,10
    7980:	10c00005 	stb	r3,0(r2)
             break;
    7984:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    7988:	d0a71117 	ldw	r2,-25532(gp)
    798c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    7990:	d0a71117 	ldw	r2,-25532(gp)
    7994:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    7998:	d0a71117 	ldw	r2,-25532(gp)
    799c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    79a0:	d0a71117 	ldw	r2,-25532(gp)
    79a4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    79a8:	d0a71117 	ldw	r2,-25532(gp)
    79ac:	10000915 	stw	zero,36(r2)
    79b0:	e0bff617 	ldw	r2,-40(fp)
    79b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79b8:	e0bffa17 	ldw	r2,-24(fp)
    79bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    79c0:	e0bff517 	ldw	r2,-44(fp)
}
    79c4:	e037883a 	mov	sp,fp
    79c8:	dfc00117 	ldw	ra,4(sp)
    79cc:	df000017 	ldw	fp,0(sp)
    79d0:	dec00204 	addi	sp,sp,8
    79d4:	f800283a 	ret

000079d8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    79d8:	defff604 	addi	sp,sp,-40
    79dc:	dfc00915 	stw	ra,36(sp)
    79e0:	df000815 	stw	fp,32(sp)
    79e4:	df000804 	addi	fp,sp,32
    79e8:	e13ffd15 	stw	r4,-12(fp)
    79ec:	2805883a 	mov	r2,r5
    79f0:	e1bfff15 	stw	r6,-4(fp)
    79f4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    79f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    79fc:	e0bfff17 	ldw	r2,-4(fp)
    7a00:	1000021e 	bne	r2,zero,7a0c <OSQPendAbort+0x34>
        return (0);
    7a04:	0005883a 	mov	r2,zero
    7a08:	00004906 	br	7b30 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7a0c:	e0bffd17 	ldw	r2,-12(fp)
    7a10:	1000051e 	bne	r2,zero,7a28 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7a14:	e0bfff17 	ldw	r2,-4(fp)
    7a18:	00c00104 	movi	r3,4
    7a1c:	10c00005 	stb	r3,0(r2)
        return (0);
    7a20:	0005883a 	mov	r2,zero
    7a24:	00004206 	br	7b30 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7a28:	e0bffd17 	ldw	r2,-12(fp)
    7a2c:	10800003 	ldbu	r2,0(r2)
    7a30:	10803fcc 	andi	r2,r2,255
    7a34:	108000a0 	cmpeqi	r2,r2,2
    7a38:	1000051e 	bne	r2,zero,7a50 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7a3c:	e0bfff17 	ldw	r2,-4(fp)
    7a40:	00c00044 	movi	r3,1
    7a44:	10c00005 	stb	r3,0(r2)
        return (0);
    7a48:	0005883a 	mov	r2,zero
    7a4c:	00003806 	br	7b30 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a50:	0005303a 	rdctl	r2,status
    7a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a58:	e0fffc17 	ldw	r3,-16(fp)
    7a5c:	00bfff84 	movi	r2,-2
    7a60:	1884703a 	and	r2,r3,r2
    7a64:	1001703a 	wrctl	status,r2
  
  return context;
    7a68:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7a6c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    7a70:	e0bffd17 	ldw	r2,-12(fp)
    7a74:	10800283 	ldbu	r2,10(r2)
    7a78:	10803fcc 	andi	r2,r2,255
    7a7c:	10002526 	beq	r2,zero,7b14 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    7a80:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    7a84:	e0bffe03 	ldbu	r2,-8(fp)
    7a88:	10800060 	cmpeqi	r2,r2,1
    7a8c:	10000e26 	beq	r2,zero,7ac8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    7a90:	00000806 	br	7ab4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7a94:	01c00084 	movi	r7,2
    7a98:	01800104 	movi	r6,4
    7a9c:	000b883a 	mov	r5,zero
    7aa0:	e13ffd17 	ldw	r4,-12(fp)
    7aa4:	00040040 	call	4004 <OS_EventTaskRdy>
                     nbr_tasks++;
    7aa8:	e0bff803 	ldbu	r2,-32(fp)
    7aac:	10800044 	addi	r2,r2,1
    7ab0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    7ab4:	e0bffd17 	ldw	r2,-12(fp)
    7ab8:	10800283 	ldbu	r2,10(r2)
    7abc:	10803fcc 	andi	r2,r2,255
    7ac0:	103ff41e 	bne	r2,zero,7a94 <__alt_data_end+0xfffef3f4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    7ac4:	00000906 	br	7aec <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7ac8:	01c00084 	movi	r7,2
    7acc:	01800104 	movi	r6,4
    7ad0:	000b883a 	mov	r5,zero
    7ad4:	e13ffd17 	ldw	r4,-12(fp)
    7ad8:	00040040 	call	4004 <OS_EventTaskRdy>
                 nbr_tasks++;
    7adc:	e0bff803 	ldbu	r2,-32(fp)
    7ae0:	10800044 	addi	r2,r2,1
    7ae4:	e0bff805 	stb	r2,-32(fp)
                 break;
    7ae8:	0001883a 	nop
    7aec:	e0bff917 	ldw	r2,-28(fp)
    7af0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7af4:	e0bffa17 	ldw	r2,-24(fp)
    7af8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    7afc:	0004a500 	call	4a50 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7b00:	e0bfff17 	ldw	r2,-4(fp)
    7b04:	00c00384 	movi	r3,14
    7b08:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    7b0c:	e0bff803 	ldbu	r2,-32(fp)
    7b10:	00000706 	br	7b30 <OSQPendAbort+0x158>
    7b14:	e0bff917 	ldw	r2,-28(fp)
    7b18:	e0bffb15 	stw	r2,-20(fp)
    7b1c:	e0bffb17 	ldw	r2,-20(fp)
    7b20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7b24:	e0bfff17 	ldw	r2,-4(fp)
    7b28:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    7b2c:	0005883a 	mov	r2,zero
}
    7b30:	e037883a 	mov	sp,fp
    7b34:	dfc00117 	ldw	ra,4(sp)
    7b38:	df000017 	ldw	fp,0(sp)
    7b3c:	dec00204 	addi	sp,sp,8
    7b40:	f800283a 	ret

00007b44 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    7b44:	defff604 	addi	sp,sp,-40
    7b48:	dfc00915 	stw	ra,36(sp)
    7b4c:	df000815 	stw	fp,32(sp)
    7b50:	df000804 	addi	fp,sp,32
    7b54:	e13ffe15 	stw	r4,-8(fp)
    7b58:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7b5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    7b60:	e0bffe17 	ldw	r2,-8(fp)
    7b64:	1000021e 	bne	r2,zero,7b70 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    7b68:	00800104 	movi	r2,4
    7b6c:	00004a06 	br	7c98 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    7b70:	e0bffe17 	ldw	r2,-8(fp)
    7b74:	10800003 	ldbu	r2,0(r2)
    7b78:	10803fcc 	andi	r2,r2,255
    7b7c:	108000a0 	cmpeqi	r2,r2,2
    7b80:	1000021e 	bne	r2,zero,7b8c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    7b84:	00800044 	movi	r2,1
    7b88:	00004306 	br	7c98 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b8c:	0005303a 	rdctl	r2,status
    7b90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b94:	e0fffd17 	ldw	r3,-12(fp)
    7b98:	00bfff84 	movi	r2,-2
    7b9c:	1884703a 	and	r2,r3,r2
    7ba0:	1001703a 	wrctl	status,r2
  
  return context;
    7ba4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7ba8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    7bac:	e0bffe17 	ldw	r2,-8(fp)
    7bb0:	10800283 	ldbu	r2,10(r2)
    7bb4:	10803fcc 	andi	r2,r2,255
    7bb8:	10000c26 	beq	r2,zero,7bec <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7bbc:	000f883a 	mov	r7,zero
    7bc0:	01800104 	movi	r6,4
    7bc4:	e17fff17 	ldw	r5,-4(fp)
    7bc8:	e13ffe17 	ldw	r4,-8(fp)
    7bcc:	00040040 	call	4004 <OS_EventTaskRdy>
    7bd0:	e0bff817 	ldw	r2,-32(fp)
    7bd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7bd8:	e0bff917 	ldw	r2,-28(fp)
    7bdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    7be0:	0004a500 	call	4a50 <OS_Sched>
        return (OS_ERR_NONE);
    7be4:	0005883a 	mov	r2,zero
    7be8:	00002b06 	br	7c98 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    7bec:	e0bffe17 	ldw	r2,-8(fp)
    7bf0:	10800117 	ldw	r2,4(r2)
    7bf4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    7bf8:	e0bffb17 	ldw	r2,-20(fp)
    7bfc:	10c0058b 	ldhu	r3,22(r2)
    7c00:	e0bffb17 	ldw	r2,-20(fp)
    7c04:	1080050b 	ldhu	r2,20(r2)
    7c08:	18ffffcc 	andi	r3,r3,65535
    7c0c:	10bfffcc 	andi	r2,r2,65535
    7c10:	18800636 	bltu	r3,r2,7c2c <OSQPost+0xe8>
    7c14:	e0bff817 	ldw	r2,-32(fp)
    7c18:	e0bffa15 	stw	r2,-24(fp)
    7c1c:	e0bffa17 	ldw	r2,-24(fp)
    7c20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7c24:	00800784 	movi	r2,30
    7c28:	00001b06 	br	7c98 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    7c2c:	e0bffb17 	ldw	r2,-20(fp)
    7c30:	10800317 	ldw	r2,12(r2)
    7c34:	11000104 	addi	r4,r2,4
    7c38:	e0fffb17 	ldw	r3,-20(fp)
    7c3c:	19000315 	stw	r4,12(r3)
    7c40:	e0ffff17 	ldw	r3,-4(fp)
    7c44:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    7c48:	e0bffb17 	ldw	r2,-20(fp)
    7c4c:	1080058b 	ldhu	r2,22(r2)
    7c50:	10800044 	addi	r2,r2,1
    7c54:	1007883a 	mov	r3,r2
    7c58:	e0bffb17 	ldw	r2,-20(fp)
    7c5c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    7c60:	e0bffb17 	ldw	r2,-20(fp)
    7c64:	10c00317 	ldw	r3,12(r2)
    7c68:	e0bffb17 	ldw	r2,-20(fp)
    7c6c:	10800217 	ldw	r2,8(r2)
    7c70:	1880041e 	bne	r3,r2,7c84 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    7c74:	e0bffb17 	ldw	r2,-20(fp)
    7c78:	10c00117 	ldw	r3,4(r2)
    7c7c:	e0bffb17 	ldw	r2,-20(fp)
    7c80:	10c00315 	stw	r3,12(r2)
    7c84:	e0bff817 	ldw	r2,-32(fp)
    7c88:	e0bffc15 	stw	r2,-16(fp)
    7c8c:	e0bffc17 	ldw	r2,-16(fp)
    7c90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7c94:	0005883a 	mov	r2,zero
}
    7c98:	e037883a 	mov	sp,fp
    7c9c:	dfc00117 	ldw	ra,4(sp)
    7ca0:	df000017 	ldw	fp,0(sp)
    7ca4:	dec00204 	addi	sp,sp,8
    7ca8:	f800283a 	ret

00007cac <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    7cac:	defff604 	addi	sp,sp,-40
    7cb0:	dfc00915 	stw	ra,36(sp)
    7cb4:	df000815 	stw	fp,32(sp)
    7cb8:	df000804 	addi	fp,sp,32
    7cbc:	e13ffe15 	stw	r4,-8(fp)
    7cc0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7cc4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7cc8:	e0bffe17 	ldw	r2,-8(fp)
    7ccc:	1000021e 	bne	r2,zero,7cd8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    7cd0:	00800104 	movi	r2,4
    7cd4:	00004c06 	br	7e08 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    7cd8:	e0bffe17 	ldw	r2,-8(fp)
    7cdc:	10800003 	ldbu	r2,0(r2)
    7ce0:	10803fcc 	andi	r2,r2,255
    7ce4:	108000a0 	cmpeqi	r2,r2,2
    7ce8:	1000021e 	bne	r2,zero,7cf4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    7cec:	00800044 	movi	r2,1
    7cf0:	00004506 	br	7e08 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7cf4:	0005303a 	rdctl	r2,status
    7cf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7cfc:	e0fffd17 	ldw	r3,-12(fp)
    7d00:	00bfff84 	movi	r2,-2
    7d04:	1884703a 	and	r2,r3,r2
    7d08:	1001703a 	wrctl	status,r2
  
  return context;
    7d0c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7d10:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    7d14:	e0bffe17 	ldw	r2,-8(fp)
    7d18:	10800283 	ldbu	r2,10(r2)
    7d1c:	10803fcc 	andi	r2,r2,255
    7d20:	10000c26 	beq	r2,zero,7d54 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7d24:	000f883a 	mov	r7,zero
    7d28:	01800104 	movi	r6,4
    7d2c:	e17fff17 	ldw	r5,-4(fp)
    7d30:	e13ffe17 	ldw	r4,-8(fp)
    7d34:	00040040 	call	4004 <OS_EventTaskRdy>
    7d38:	e0bff817 	ldw	r2,-32(fp)
    7d3c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d40:	e0bff917 	ldw	r2,-28(fp)
    7d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    7d48:	0004a500 	call	4a50 <OS_Sched>
        return (OS_ERR_NONE);
    7d4c:	0005883a 	mov	r2,zero
    7d50:	00002d06 	br	7e08 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    7d54:	e0bffe17 	ldw	r2,-8(fp)
    7d58:	10800117 	ldw	r2,4(r2)
    7d5c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7d60:	e0bffb17 	ldw	r2,-20(fp)
    7d64:	10c0058b 	ldhu	r3,22(r2)
    7d68:	e0bffb17 	ldw	r2,-20(fp)
    7d6c:	1080050b 	ldhu	r2,20(r2)
    7d70:	18ffffcc 	andi	r3,r3,65535
    7d74:	10bfffcc 	andi	r2,r2,65535
    7d78:	18800636 	bltu	r3,r2,7d94 <OSQPostFront+0xe8>
    7d7c:	e0bff817 	ldw	r2,-32(fp)
    7d80:	e0bffa15 	stw	r2,-24(fp)
    7d84:	e0bffa17 	ldw	r2,-24(fp)
    7d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7d8c:	00800784 	movi	r2,30
    7d90:	00001d06 	br	7e08 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    7d94:	e0bffb17 	ldw	r2,-20(fp)
    7d98:	10c00417 	ldw	r3,16(r2)
    7d9c:	e0bffb17 	ldw	r2,-20(fp)
    7da0:	10800117 	ldw	r2,4(r2)
    7da4:	1880041e 	bne	r3,r2,7db8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    7da8:	e0bffb17 	ldw	r2,-20(fp)
    7dac:	10c00217 	ldw	r3,8(r2)
    7db0:	e0bffb17 	ldw	r2,-20(fp)
    7db4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    7db8:	e0bffb17 	ldw	r2,-20(fp)
    7dbc:	10800417 	ldw	r2,16(r2)
    7dc0:	10ffff04 	addi	r3,r2,-4
    7dc4:	e0bffb17 	ldw	r2,-20(fp)
    7dc8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    7dcc:	e0bffb17 	ldw	r2,-20(fp)
    7dd0:	10800417 	ldw	r2,16(r2)
    7dd4:	e0ffff17 	ldw	r3,-4(fp)
    7dd8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7ddc:	e0bffb17 	ldw	r2,-20(fp)
    7de0:	1080058b 	ldhu	r2,22(r2)
    7de4:	10800044 	addi	r2,r2,1
    7de8:	1007883a 	mov	r3,r2
    7dec:	e0bffb17 	ldw	r2,-20(fp)
    7df0:	10c0058d 	sth	r3,22(r2)
    7df4:	e0bff817 	ldw	r2,-32(fp)
    7df8:	e0bffc15 	stw	r2,-16(fp)
    7dfc:	e0bffc17 	ldw	r2,-16(fp)
    7e00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7e04:	0005883a 	mov	r2,zero
}
    7e08:	e037883a 	mov	sp,fp
    7e0c:	dfc00117 	ldw	ra,4(sp)
    7e10:	df000017 	ldw	fp,0(sp)
    7e14:	dec00204 	addi	sp,sp,8
    7e18:	f800283a 	ret

00007e1c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    7e1c:	defff504 	addi	sp,sp,-44
    7e20:	dfc00a15 	stw	ra,40(sp)
    7e24:	df000915 	stw	fp,36(sp)
    7e28:	df000904 	addi	fp,sp,36
    7e2c:	e13ffd15 	stw	r4,-12(fp)
    7e30:	e17ffe15 	stw	r5,-8(fp)
    7e34:	3005883a 	mov	r2,r6
    7e38:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7e3c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7e40:	e0bffd17 	ldw	r2,-12(fp)
    7e44:	1000021e 	bne	r2,zero,7e50 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    7e48:	00800104 	movi	r2,4
    7e4c:	00007106 	br	8014 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    7e50:	e0bffd17 	ldw	r2,-12(fp)
    7e54:	10800003 	ldbu	r2,0(r2)
    7e58:	10803fcc 	andi	r2,r2,255
    7e5c:	108000a0 	cmpeqi	r2,r2,2
    7e60:	1000021e 	bne	r2,zero,7e6c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    7e64:	00800044 	movi	r2,1
    7e68:	00006a06 	br	8014 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e6c:	0005303a 	rdctl	r2,status
    7e70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e74:	e0fffc17 	ldw	r3,-16(fp)
    7e78:	00bfff84 	movi	r2,-2
    7e7c:	1884703a 	and	r2,r3,r2
    7e80:	1001703a 	wrctl	status,r2
  
  return context;
    7e84:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7e88:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    7e8c:	e0bffd17 	ldw	r2,-12(fp)
    7e90:	10800283 	ldbu	r2,10(r2)
    7e94:	10803fcc 	andi	r2,r2,255
    7e98:	10001d26 	beq	r2,zero,7f10 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    7e9c:	e0bfff03 	ldbu	r2,-4(fp)
    7ea0:	1080004c 	andi	r2,r2,1
    7ea4:	10000b26 	beq	r2,zero,7ed4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    7ea8:	00000506 	br	7ec0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7eac:	000f883a 	mov	r7,zero
    7eb0:	01800104 	movi	r6,4
    7eb4:	e17ffe17 	ldw	r5,-8(fp)
    7eb8:	e13ffd17 	ldw	r4,-12(fp)
    7ebc:	00040040 	call	4004 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    7ec0:	e0bffd17 	ldw	r2,-12(fp)
    7ec4:	10800283 	ldbu	r2,10(r2)
    7ec8:	10803fcc 	andi	r2,r2,255
    7ecc:	103ff71e 	bne	r2,zero,7eac <__alt_data_end+0xfffef80c>
    7ed0:	00000506 	br	7ee8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7ed4:	000f883a 	mov	r7,zero
    7ed8:	01800104 	movi	r6,4
    7edc:	e17ffe17 	ldw	r5,-8(fp)
    7ee0:	e13ffd17 	ldw	r4,-12(fp)
    7ee4:	00040040 	call	4004 <OS_EventTaskRdy>
    7ee8:	e0bff717 	ldw	r2,-36(fp)
    7eec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7ef0:	e0bff817 	ldw	r2,-32(fp)
    7ef4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    7ef8:	e0bfff03 	ldbu	r2,-4(fp)
    7efc:	1080010c 	andi	r2,r2,4
    7f00:	1000011e 	bne	r2,zero,7f08 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    7f04:	0004a500 	call	4a50 <OS_Sched>
        }
        return (OS_ERR_NONE);
    7f08:	0005883a 	mov	r2,zero
    7f0c:	00004106 	br	8014 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    7f10:	e0bffd17 	ldw	r2,-12(fp)
    7f14:	10800117 	ldw	r2,4(r2)
    7f18:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7f1c:	e0bffa17 	ldw	r2,-24(fp)
    7f20:	10c0058b 	ldhu	r3,22(r2)
    7f24:	e0bffa17 	ldw	r2,-24(fp)
    7f28:	1080050b 	ldhu	r2,20(r2)
    7f2c:	18ffffcc 	andi	r3,r3,65535
    7f30:	10bfffcc 	andi	r2,r2,65535
    7f34:	18800636 	bltu	r3,r2,7f50 <OSQPostOpt+0x134>
    7f38:	e0bff717 	ldw	r2,-36(fp)
    7f3c:	e0bff915 	stw	r2,-28(fp)
    7f40:	e0bff917 	ldw	r2,-28(fp)
    7f44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7f48:	00800784 	movi	r2,30
    7f4c:	00003106 	br	8014 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    7f50:	e0bfff03 	ldbu	r2,-4(fp)
    7f54:	1080008c 	andi	r2,r2,2
    7f58:	10001326 	beq	r2,zero,7fa8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    7f5c:	e0bffa17 	ldw	r2,-24(fp)
    7f60:	10c00417 	ldw	r3,16(r2)
    7f64:	e0bffa17 	ldw	r2,-24(fp)
    7f68:	10800117 	ldw	r2,4(r2)
    7f6c:	1880041e 	bne	r3,r2,7f80 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    7f70:	e0bffa17 	ldw	r2,-24(fp)
    7f74:	10c00217 	ldw	r3,8(r2)
    7f78:	e0bffa17 	ldw	r2,-24(fp)
    7f7c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    7f80:	e0bffa17 	ldw	r2,-24(fp)
    7f84:	10800417 	ldw	r2,16(r2)
    7f88:	10ffff04 	addi	r3,r2,-4
    7f8c:	e0bffa17 	ldw	r2,-24(fp)
    7f90:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    7f94:	e0bffa17 	ldw	r2,-24(fp)
    7f98:	10800417 	ldw	r2,16(r2)
    7f9c:	e0fffe17 	ldw	r3,-8(fp)
    7fa0:	10c00015 	stw	r3,0(r2)
    7fa4:	00001006 	br	7fe8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    7fa8:	e0bffa17 	ldw	r2,-24(fp)
    7fac:	10800317 	ldw	r2,12(r2)
    7fb0:	11000104 	addi	r4,r2,4
    7fb4:	e0fffa17 	ldw	r3,-24(fp)
    7fb8:	19000315 	stw	r4,12(r3)
    7fbc:	e0fffe17 	ldw	r3,-8(fp)
    7fc0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    7fc4:	e0bffa17 	ldw	r2,-24(fp)
    7fc8:	10c00317 	ldw	r3,12(r2)
    7fcc:	e0bffa17 	ldw	r2,-24(fp)
    7fd0:	10800217 	ldw	r2,8(r2)
    7fd4:	1880041e 	bne	r3,r2,7fe8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    7fd8:	e0bffa17 	ldw	r2,-24(fp)
    7fdc:	10c00117 	ldw	r3,4(r2)
    7fe0:	e0bffa17 	ldw	r2,-24(fp)
    7fe4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7fe8:	e0bffa17 	ldw	r2,-24(fp)
    7fec:	1080058b 	ldhu	r2,22(r2)
    7ff0:	10800044 	addi	r2,r2,1
    7ff4:	1007883a 	mov	r3,r2
    7ff8:	e0bffa17 	ldw	r2,-24(fp)
    7ffc:	10c0058d 	sth	r3,22(r2)
    8000:	e0bff717 	ldw	r2,-36(fp)
    8004:	e0bffb15 	stw	r2,-20(fp)
    8008:	e0bffb17 	ldw	r2,-20(fp)
    800c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8010:	0005883a 	mov	r2,zero
}
    8014:	e037883a 	mov	sp,fp
    8018:	dfc00117 	ldw	ra,4(sp)
    801c:	df000017 	ldw	fp,0(sp)
    8020:	dec00204 	addi	sp,sp,8
    8024:	f800283a 	ret

00008028 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8028:	defff604 	addi	sp,sp,-40
    802c:	df000915 	stw	fp,36(sp)
    8030:	df000904 	addi	fp,sp,36
    8034:	e13ffe15 	stw	r4,-8(fp)
    8038:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    803c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    8040:	e0bffe17 	ldw	r2,-8(fp)
    8044:	1000021e 	bne	r2,zero,8050 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8048:	00800104 	movi	r2,4
    804c:	00004906 	br	8174 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    8050:	e0bfff17 	ldw	r2,-4(fp)
    8054:	1000021e 	bne	r2,zero,8060 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8058:	00800244 	movi	r2,9
    805c:	00004506 	br	8174 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    8060:	e0bffe17 	ldw	r2,-8(fp)
    8064:	10800003 	ldbu	r2,0(r2)
    8068:	10803fcc 	andi	r2,r2,255
    806c:	108000a0 	cmpeqi	r2,r2,2
    8070:	1000021e 	bne	r2,zero,807c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8074:	00800044 	movi	r2,1
    8078:	00003e06 	br	8174 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    807c:	0005303a 	rdctl	r2,status
    8080:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8084:	e0fffd17 	ldw	r3,-12(fp)
    8088:	00bfff84 	movi	r2,-2
    808c:	1884703a 	and	r2,r3,r2
    8090:	1001703a 	wrctl	status,r2
  
  return context;
    8094:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8098:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    809c:	e0bffe17 	ldw	r2,-8(fp)
    80a0:	10c00283 	ldbu	r3,10(r2)
    80a4:	e0bfff17 	ldw	r2,-4(fp)
    80a8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    80ac:	e0bffe17 	ldw	r2,-8(fp)
    80b0:	108002c4 	addi	r2,r2,11
    80b4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    80b8:	e0bfff17 	ldw	r2,-4(fp)
    80bc:	10800204 	addi	r2,r2,8
    80c0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    80c4:	e03ff705 	stb	zero,-36(fp)
    80c8:	00000b06 	br	80f8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    80cc:	e0bff917 	ldw	r2,-28(fp)
    80d0:	10c00044 	addi	r3,r2,1
    80d4:	e0fff915 	stw	r3,-28(fp)
    80d8:	e0fff817 	ldw	r3,-32(fp)
    80dc:	19000044 	addi	r4,r3,1
    80e0:	e13ff815 	stw	r4,-32(fp)
    80e4:	18c00003 	ldbu	r3,0(r3)
    80e8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    80ec:	e0bff703 	ldbu	r2,-36(fp)
    80f0:	10800044 	addi	r2,r2,1
    80f4:	e0bff705 	stb	r2,-36(fp)
    80f8:	e0bff703 	ldbu	r2,-36(fp)
    80fc:	108000f0 	cmpltui	r2,r2,3
    8100:	103ff21e 	bne	r2,zero,80cc <__alt_data_end+0xfffefa2c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8104:	e0bffe17 	ldw	r2,-8(fp)
    8108:	10800117 	ldw	r2,4(r2)
    810c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    8110:	e0bffc17 	ldw	r2,-16(fp)
    8114:	1080058b 	ldhu	r2,22(r2)
    8118:	10bfffcc 	andi	r2,r2,65535
    811c:	10000626 	beq	r2,zero,8138 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    8120:	e0bffc17 	ldw	r2,-16(fp)
    8124:	10800417 	ldw	r2,16(r2)
    8128:	10c00017 	ldw	r3,0(r2)
    812c:	e0bfff17 	ldw	r2,-4(fp)
    8130:	10c00015 	stw	r3,0(r2)
    8134:	00000206 	br	8140 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    8138:	e0bfff17 	ldw	r2,-4(fp)
    813c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    8140:	e0bffc17 	ldw	r2,-16(fp)
    8144:	10c0058b 	ldhu	r3,22(r2)
    8148:	e0bfff17 	ldw	r2,-4(fp)
    814c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    8150:	e0bffc17 	ldw	r2,-16(fp)
    8154:	10c0050b 	ldhu	r3,20(r2)
    8158:	e0bfff17 	ldw	r2,-4(fp)
    815c:	10c0018d 	sth	r3,6(r2)
    8160:	e0bffa17 	ldw	r2,-24(fp)
    8164:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8168:	e0bffb17 	ldw	r2,-20(fp)
    816c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8170:	0005883a 	mov	r2,zero
}
    8174:	e037883a 	mov	sp,fp
    8178:	df000017 	ldw	fp,0(sp)
    817c:	dec00104 	addi	sp,sp,4
    8180:	f800283a 	ret

00008184 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    8184:	defffb04 	addi	sp,sp,-20
    8188:	dfc00415 	stw	ra,16(sp)
    818c:	df000315 	stw	fp,12(sp)
    8190:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    8194:	01407804 	movi	r5,480
    8198:	01000074 	movhi	r4,1
    819c:	21184104 	addi	r4,r4,24836
    81a0:	00049940 	call	4994 <OS_MemClr>
    pq1 = &OSQTbl[0];
    81a4:	00800074 	movhi	r2,1
    81a8:	10984104 	addi	r2,r2,24836
    81ac:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    81b0:	00800074 	movhi	r2,1
    81b4:	10984704 	addi	r2,r2,24860
    81b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    81bc:	e03ffd0d 	sth	zero,-12(fp)
    81c0:	00000c06 	br	81f4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    81c4:	e0bffe17 	ldw	r2,-8(fp)
    81c8:	e0ffff17 	ldw	r3,-4(fp)
    81cc:	10c00015 	stw	r3,0(r2)
        pq1++;
    81d0:	e0bffe17 	ldw	r2,-8(fp)
    81d4:	10800604 	addi	r2,r2,24
    81d8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    81dc:	e0bfff17 	ldw	r2,-4(fp)
    81e0:	10800604 	addi	r2,r2,24
    81e4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    81e8:	e0bffd0b 	ldhu	r2,-12(fp)
    81ec:	10800044 	addi	r2,r2,1
    81f0:	e0bffd0d 	sth	r2,-12(fp)
    81f4:	e0bffd0b 	ldhu	r2,-12(fp)
    81f8:	108004f0 	cmpltui	r2,r2,19
    81fc:	103ff11e 	bne	r2,zero,81c4 <__alt_data_end+0xfffefb24>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    8200:	e0bffe17 	ldw	r2,-8(fp)
    8204:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    8208:	00800074 	movhi	r2,1
    820c:	10984104 	addi	r2,r2,24836
    8210:	d0a70d15 	stw	r2,-25548(gp)
#endif
}
    8214:	0001883a 	nop
    8218:	e037883a 	mov	sp,fp
    821c:	dfc00117 	ldw	ra,4(sp)
    8220:	df000017 	ldw	fp,0(sp)
    8224:	dec00204 	addi	sp,sp,8
    8228:	f800283a 	ret

0000822c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    822c:	defffa04 	addi	sp,sp,-24
    8230:	df000515 	stw	fp,20(sp)
    8234:	df000504 	addi	fp,sp,20
    8238:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    823c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8240:	e0bfff17 	ldw	r2,-4(fp)
    8244:	1000021e 	bne	r2,zero,8250 <OSSemAccept+0x24>
        return (0);
    8248:	0005883a 	mov	r2,zero
    824c:	00001f06 	br	82cc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8250:	e0bfff17 	ldw	r2,-4(fp)
    8254:	10800003 	ldbu	r2,0(r2)
    8258:	10803fcc 	andi	r2,r2,255
    825c:	108000e0 	cmpeqi	r2,r2,3
    8260:	1000021e 	bne	r2,zero,826c <OSSemAccept+0x40>
        return (0);
    8264:	0005883a 	mov	r2,zero
    8268:	00001806 	br	82cc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    826c:	0005303a 	rdctl	r2,status
    8270:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8274:	e0fffe17 	ldw	r3,-8(fp)
    8278:	00bfff84 	movi	r2,-2
    827c:	1884703a 	and	r2,r3,r2
    8280:	1001703a 	wrctl	status,r2
  
  return context;
    8284:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8288:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    828c:	e0bfff17 	ldw	r2,-4(fp)
    8290:	1080020b 	ldhu	r2,8(r2)
    8294:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    8298:	e0bffd0b 	ldhu	r2,-12(fp)
    829c:	10000626 	beq	r2,zero,82b8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    82a0:	e0bfff17 	ldw	r2,-4(fp)
    82a4:	1080020b 	ldhu	r2,8(r2)
    82a8:	10bfffc4 	addi	r2,r2,-1
    82ac:	1007883a 	mov	r3,r2
    82b0:	e0bfff17 	ldw	r2,-4(fp)
    82b4:	10c0020d 	sth	r3,8(r2)
    82b8:	e0bffb17 	ldw	r2,-20(fp)
    82bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    82c0:	e0bffc17 	ldw	r2,-16(fp)
    82c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    82c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
    82cc:	e037883a 	mov	sp,fp
    82d0:	df000017 	ldw	fp,0(sp)
    82d4:	dec00104 	addi	sp,sp,4
    82d8:	f800283a 	ret

000082dc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    82dc:	defff904 	addi	sp,sp,-28
    82e0:	dfc00615 	stw	ra,24(sp)
    82e4:	df000515 	stw	fp,20(sp)
    82e8:	df000504 	addi	fp,sp,20
    82ec:	2005883a 	mov	r2,r4
    82f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    82f4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    82f8:	d0a71003 	ldbu	r2,-25536(gp)
    82fc:	10803fcc 	andi	r2,r2,255
    8300:	10000226 	beq	r2,zero,830c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    8304:	0005883a 	mov	r2,zero
    8308:	00002506 	br	83a0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    830c:	0005303a 	rdctl	r2,status
    8310:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8314:	e0fffe17 	ldw	r3,-8(fp)
    8318:	00bfff84 	movi	r2,-2
    831c:	1884703a 	and	r2,r3,r2
    8320:	1001703a 	wrctl	status,r2
  
  return context;
    8324:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8328:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    832c:	d0a70f17 	ldw	r2,-25540(gp)
    8330:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    8334:	d0a70f17 	ldw	r2,-25540(gp)
    8338:	10000326 	beq	r2,zero,8348 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    833c:	d0a70f17 	ldw	r2,-25540(gp)
    8340:	10800117 	ldw	r2,4(r2)
    8344:	d0a70f15 	stw	r2,-25540(gp)
    8348:	e0bffb17 	ldw	r2,-20(fp)
    834c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8350:	e0bffc17 	ldw	r2,-16(fp)
    8354:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    8358:	e0bffd17 	ldw	r2,-12(fp)
    835c:	10000f26 	beq	r2,zero,839c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    8360:	e0bffd17 	ldw	r2,-12(fp)
    8364:	00c000c4 	movi	r3,3
    8368:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    836c:	e0bffd17 	ldw	r2,-12(fp)
    8370:	e0ffff0b 	ldhu	r3,-4(fp)
    8374:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    8378:	e0bffd17 	ldw	r2,-12(fp)
    837c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    8380:	e0bffd17 	ldw	r2,-12(fp)
    8384:	00c00fc4 	movi	r3,63
    8388:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    838c:	e0bffd17 	ldw	r2,-12(fp)
    8390:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    8394:	e13ffd17 	ldw	r4,-12(fp)
    8398:	00045b40 	call	45b4 <OS_EventWaitListInit>
    }
    return (pevent);
    839c:	e0bffd17 	ldw	r2,-12(fp)
}
    83a0:	e037883a 	mov	sp,fp
    83a4:	dfc00117 	ldw	ra,4(sp)
    83a8:	df000017 	ldw	fp,0(sp)
    83ac:	dec00204 	addi	sp,sp,8
    83b0:	f800283a 	ret

000083b4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    83b4:	defff304 	addi	sp,sp,-52
    83b8:	dfc00c15 	stw	ra,48(sp)
    83bc:	df000b15 	stw	fp,44(sp)
    83c0:	df000b04 	addi	fp,sp,44
    83c4:	e13ffd15 	stw	r4,-12(fp)
    83c8:	2805883a 	mov	r2,r5
    83cc:	e1bfff15 	stw	r6,-4(fp)
    83d0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    83d4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    83d8:	e0bfff17 	ldw	r2,-4(fp)
    83dc:	1000021e 	bne	r2,zero,83e8 <OSSemDel+0x34>
        return (pevent);
    83e0:	e0bffd17 	ldw	r2,-12(fp)
    83e4:	00007e06 	br	85e0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    83e8:	e0bffd17 	ldw	r2,-12(fp)
    83ec:	1000051e 	bne	r2,zero,8404 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    83f0:	e0bfff17 	ldw	r2,-4(fp)
    83f4:	00c00104 	movi	r3,4
    83f8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    83fc:	e0bffd17 	ldw	r2,-12(fp)
    8400:	00007706 	br	85e0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8404:	e0bffd17 	ldw	r2,-12(fp)
    8408:	10800003 	ldbu	r2,0(r2)
    840c:	10803fcc 	andi	r2,r2,255
    8410:	108000e0 	cmpeqi	r2,r2,3
    8414:	1000051e 	bne	r2,zero,842c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8418:	e0bfff17 	ldw	r2,-4(fp)
    841c:	00c00044 	movi	r3,1
    8420:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8424:	e0bffd17 	ldw	r2,-12(fp)
    8428:	00006d06 	br	85e0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    842c:	d0a71003 	ldbu	r2,-25536(gp)
    8430:	10803fcc 	andi	r2,r2,255
    8434:	10000526 	beq	r2,zero,844c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    8438:	e0bfff17 	ldw	r2,-4(fp)
    843c:	00c003c4 	movi	r3,15
    8440:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8444:	e0bffd17 	ldw	r2,-12(fp)
    8448:	00006506 	br	85e0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    844c:	0005303a 	rdctl	r2,status
    8450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8454:	e0fffc17 	ldw	r3,-16(fp)
    8458:	00bfff84 	movi	r2,-2
    845c:	1884703a 	and	r2,r3,r2
    8460:	1001703a 	wrctl	status,r2
  
  return context;
    8464:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8468:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    846c:	e0bffd17 	ldw	r2,-12(fp)
    8470:	10800283 	ldbu	r2,10(r2)
    8474:	10803fcc 	andi	r2,r2,255
    8478:	10000326 	beq	r2,zero,8488 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    847c:	00800044 	movi	r2,1
    8480:	e0bff505 	stb	r2,-44(fp)
    8484:	00000106 	br	848c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8488:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    848c:	e0bffe03 	ldbu	r2,-8(fp)
    8490:	10000326 	beq	r2,zero,84a0 <OSSemDel+0xec>
    8494:	10800060 	cmpeqi	r2,r2,1
    8498:	1000281e 	bne	r2,zero,853c <OSSemDel+0x188>
    849c:	00004506 	br	85b4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    84a0:	e0bff503 	ldbu	r2,-44(fp)
    84a4:	1000161e 	bne	r2,zero,8500 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    84a8:	e0bffd17 	ldw	r2,-12(fp)
    84ac:	00c00fc4 	movi	r3,63
    84b0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    84b4:	e0bffd17 	ldw	r2,-12(fp)
    84b8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    84bc:	e0bffd17 	ldw	r2,-12(fp)
    84c0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    84c4:	d0e70f17 	ldw	r3,-25540(gp)
    84c8:	e0bffd17 	ldw	r2,-12(fp)
    84cc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    84d0:	e0bffd17 	ldw	r2,-12(fp)
    84d4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    84d8:	e0bffd17 	ldw	r2,-12(fp)
    84dc:	d0a70f15 	stw	r2,-25540(gp)
    84e0:	e0bff717 	ldw	r2,-36(fp)
    84e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    84e8:	e0bff817 	ldw	r2,-32(fp)
    84ec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    84f0:	e0bfff17 	ldw	r2,-4(fp)
    84f4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    84f8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    84fc:	00003706 	br	85dc <OSSemDel+0x228>
    8500:	e0bff717 	ldw	r2,-36(fp)
    8504:	e0bff915 	stw	r2,-28(fp)
    8508:	e0bff917 	ldw	r2,-28(fp)
    850c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    8510:	e0bfff17 	ldw	r2,-4(fp)
    8514:	00c01244 	movi	r3,73
    8518:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    851c:	e0bffd17 	ldw	r2,-12(fp)
    8520:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    8524:	00002d06 	br	85dc <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    8528:	000f883a 	mov	r7,zero
    852c:	01800044 	movi	r6,1
    8530:	000b883a 	mov	r5,zero
    8534:	e13ffd17 	ldw	r4,-12(fp)
    8538:	00040040 	call	4004 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    853c:	e0bffd17 	ldw	r2,-12(fp)
    8540:	10800283 	ldbu	r2,10(r2)
    8544:	10803fcc 	andi	r2,r2,255
    8548:	103ff71e 	bne	r2,zero,8528 <__alt_data_end+0xfffefe88>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    854c:	e0bffd17 	ldw	r2,-12(fp)
    8550:	00c00fc4 	movi	r3,63
    8554:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8558:	e0bffd17 	ldw	r2,-12(fp)
    855c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    8560:	e0bffd17 	ldw	r2,-12(fp)
    8564:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8568:	d0e70f17 	ldw	r3,-25540(gp)
    856c:	e0bffd17 	ldw	r2,-12(fp)
    8570:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8574:	e0bffd17 	ldw	r2,-12(fp)
    8578:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    857c:	e0bffd17 	ldw	r2,-12(fp)
    8580:	d0a70f15 	stw	r2,-25540(gp)
    8584:	e0bff717 	ldw	r2,-36(fp)
    8588:	e0bffa15 	stw	r2,-24(fp)
    858c:	e0bffa17 	ldw	r2,-24(fp)
    8590:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8594:	e0bff503 	ldbu	r2,-44(fp)
    8598:	10800058 	cmpnei	r2,r2,1
    859c:	1000011e 	bne	r2,zero,85a4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    85a0:	0004a500 	call	4a50 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    85a4:	e0bfff17 	ldw	r2,-4(fp)
    85a8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    85ac:	e03ff615 	stw	zero,-40(fp)
             break;
    85b0:	00000a06 	br	85dc <OSSemDel+0x228>
    85b4:	e0bff717 	ldw	r2,-36(fp)
    85b8:	e0bffb15 	stw	r2,-20(fp)
    85bc:	e0bffb17 	ldw	r2,-20(fp)
    85c0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    85c4:	e0bfff17 	ldw	r2,-4(fp)
    85c8:	00c001c4 	movi	r3,7
    85cc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    85d0:	e0bffd17 	ldw	r2,-12(fp)
    85d4:	e0bff615 	stw	r2,-40(fp)
             break;
    85d8:	0001883a 	nop
    }
    return (pevent_return);
    85dc:	e0bff617 	ldw	r2,-40(fp)
}
    85e0:	e037883a 	mov	sp,fp
    85e4:	dfc00117 	ldw	ra,4(sp)
    85e8:	df000017 	ldw	fp,0(sp)
    85ec:	dec00204 	addi	sp,sp,8
    85f0:	f800283a 	ret

000085f4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    85f4:	defff504 	addi	sp,sp,-44
    85f8:	dfc00a15 	stw	ra,40(sp)
    85fc:	df000915 	stw	fp,36(sp)
    8600:	df000904 	addi	fp,sp,36
    8604:	e13ffd15 	stw	r4,-12(fp)
    8608:	2805883a 	mov	r2,r5
    860c:	e1bfff15 	stw	r6,-4(fp)
    8610:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8614:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8618:	e0bfff17 	ldw	r2,-4(fp)
    861c:	10007226 	beq	r2,zero,87e8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8620:	e0bffd17 	ldw	r2,-12(fp)
    8624:	1000041e 	bne	r2,zero,8638 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    8628:	e0bfff17 	ldw	r2,-4(fp)
    862c:	00c00104 	movi	r3,4
    8630:	10c00005 	stb	r3,0(r2)
        return;
    8634:	00006d06 	br	87ec <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8638:	e0bffd17 	ldw	r2,-12(fp)
    863c:	10800003 	ldbu	r2,0(r2)
    8640:	10803fcc 	andi	r2,r2,255
    8644:	108000e0 	cmpeqi	r2,r2,3
    8648:	1000041e 	bne	r2,zero,865c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    864c:	e0bfff17 	ldw	r2,-4(fp)
    8650:	00c00044 	movi	r3,1
    8654:	10c00005 	stb	r3,0(r2)
        return;
    8658:	00006406 	br	87ec <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    865c:	d0a71003 	ldbu	r2,-25536(gp)
    8660:	10803fcc 	andi	r2,r2,255
    8664:	10000426 	beq	r2,zero,8678 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    8668:	e0bfff17 	ldw	r2,-4(fp)
    866c:	00c00084 	movi	r3,2
    8670:	10c00005 	stb	r3,0(r2)
        return;
    8674:	00005d06 	br	87ec <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    8678:	d0a70203 	ldbu	r2,-25592(gp)
    867c:	10803fcc 	andi	r2,r2,255
    8680:	10000426 	beq	r2,zero,8694 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    8684:	e0bfff17 	ldw	r2,-4(fp)
    8688:	00c00344 	movi	r3,13
    868c:	10c00005 	stb	r3,0(r2)
        return;
    8690:	00005606 	br	87ec <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8694:	0005303a 	rdctl	r2,status
    8698:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    869c:	e0fffc17 	ldw	r3,-16(fp)
    86a0:	00bfff84 	movi	r2,-2
    86a4:	1884703a 	and	r2,r3,r2
    86a8:	1001703a 	wrctl	status,r2
  
  return context;
    86ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    86b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    86b4:	e0bffd17 	ldw	r2,-12(fp)
    86b8:	1080020b 	ldhu	r2,8(r2)
    86bc:	10bfffcc 	andi	r2,r2,65535
    86c0:	10000d26 	beq	r2,zero,86f8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    86c4:	e0bffd17 	ldw	r2,-12(fp)
    86c8:	1080020b 	ldhu	r2,8(r2)
    86cc:	10bfffc4 	addi	r2,r2,-1
    86d0:	1007883a 	mov	r3,r2
    86d4:	e0bffd17 	ldw	r2,-12(fp)
    86d8:	10c0020d 	sth	r3,8(r2)
    86dc:	e0bff717 	ldw	r2,-36(fp)
    86e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    86e4:	e0bff817 	ldw	r2,-32(fp)
    86e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    86ec:	e0bfff17 	ldw	r2,-4(fp)
    86f0:	10000005 	stb	zero,0(r2)
        return;
    86f4:	00003d06 	br	87ec <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    86f8:	d0a71117 	ldw	r2,-25532(gp)
    86fc:	d0e71117 	ldw	r3,-25532(gp)
    8700:	18c00c03 	ldbu	r3,48(r3)
    8704:	18c00054 	ori	r3,r3,1
    8708:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    870c:	d0a71117 	ldw	r2,-25532(gp)
    8710:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    8714:	d0a71117 	ldw	r2,-25532(gp)
    8718:	e0fffe0b 	ldhu	r3,-8(fp)
    871c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    8720:	e13ffd17 	ldw	r4,-12(fp)
    8724:	000419c0 	call	419c <OS_EventTaskWait>
    8728:	e0bff717 	ldw	r2,-36(fp)
    872c:	e0bffb15 	stw	r2,-20(fp)
    8730:	e0bffb17 	ldw	r2,-20(fp)
    8734:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    8738:	0004a500 	call	4a50 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    873c:	0005303a 	rdctl	r2,status
    8740:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8744:	e0fff917 	ldw	r3,-28(fp)
    8748:	00bfff84 	movi	r2,-2
    874c:	1884703a 	and	r2,r3,r2
    8750:	1001703a 	wrctl	status,r2
  
  return context;
    8754:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    8758:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    875c:	d0a71117 	ldw	r2,-25532(gp)
    8760:	10800c43 	ldbu	r2,49(r2)
    8764:	10803fcc 	andi	r2,r2,255
    8768:	10000326 	beq	r2,zero,8778 <OSSemPend+0x184>
    876c:	108000a0 	cmpeqi	r2,r2,2
    8770:	1000041e 	bne	r2,zero,8784 <OSSemPend+0x190>
    8774:	00000706 	br	8794 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    8778:	e0bfff17 	ldw	r2,-4(fp)
    877c:	10000005 	stb	zero,0(r2)
             break;
    8780:	00000c06 	br	87b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8784:	e0bfff17 	ldw	r2,-4(fp)
    8788:	00c00384 	movi	r3,14
    878c:	10c00005 	stb	r3,0(r2)
             break;
    8790:	00000806 	br	87b4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    8794:	d0a71117 	ldw	r2,-25532(gp)
    8798:	e17ffd17 	ldw	r5,-12(fp)
    879c:	1009883a 	mov	r4,r2
    87a0:	00043fc0 	call	43fc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    87a4:	e0bfff17 	ldw	r2,-4(fp)
    87a8:	00c00284 	movi	r3,10
    87ac:	10c00005 	stb	r3,0(r2)
             break;
    87b0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    87b4:	d0a71117 	ldw	r2,-25532(gp)
    87b8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    87bc:	d0a71117 	ldw	r2,-25532(gp)
    87c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    87c4:	d0a71117 	ldw	r2,-25532(gp)
    87c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    87cc:	d0a71117 	ldw	r2,-25532(gp)
    87d0:	10000815 	stw	zero,32(r2)
    87d4:	e0bff717 	ldw	r2,-36(fp)
    87d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    87dc:	e0bffa17 	ldw	r2,-24(fp)
    87e0:	1001703a 	wrctl	status,r2
    87e4:	00000106 	br	87ec <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    87e8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    87ec:	e037883a 	mov	sp,fp
    87f0:	dfc00117 	ldw	ra,4(sp)
    87f4:	df000017 	ldw	fp,0(sp)
    87f8:	dec00204 	addi	sp,sp,8
    87fc:	f800283a 	ret

00008800 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    8800:	defff604 	addi	sp,sp,-40
    8804:	dfc00915 	stw	ra,36(sp)
    8808:	df000815 	stw	fp,32(sp)
    880c:	df000804 	addi	fp,sp,32
    8810:	e13ffd15 	stw	r4,-12(fp)
    8814:	2805883a 	mov	r2,r5
    8818:	e1bfff15 	stw	r6,-4(fp)
    881c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8820:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8824:	e0bfff17 	ldw	r2,-4(fp)
    8828:	1000021e 	bne	r2,zero,8834 <OSSemPendAbort+0x34>
        return (0);
    882c:	0005883a 	mov	r2,zero
    8830:	00004906 	br	8958 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8834:	e0bffd17 	ldw	r2,-12(fp)
    8838:	1000051e 	bne	r2,zero,8850 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    883c:	e0bfff17 	ldw	r2,-4(fp)
    8840:	00c00104 	movi	r3,4
    8844:	10c00005 	stb	r3,0(r2)
        return (0);
    8848:	0005883a 	mov	r2,zero
    884c:	00004206 	br	8958 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8850:	e0bffd17 	ldw	r2,-12(fp)
    8854:	10800003 	ldbu	r2,0(r2)
    8858:	10803fcc 	andi	r2,r2,255
    885c:	108000e0 	cmpeqi	r2,r2,3
    8860:	1000051e 	bne	r2,zero,8878 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8864:	e0bfff17 	ldw	r2,-4(fp)
    8868:	00c00044 	movi	r3,1
    886c:	10c00005 	stb	r3,0(r2)
        return (0);
    8870:	0005883a 	mov	r2,zero
    8874:	00003806 	br	8958 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8878:	0005303a 	rdctl	r2,status
    887c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8880:	e0fffc17 	ldw	r3,-16(fp)
    8884:	00bfff84 	movi	r2,-2
    8888:	1884703a 	and	r2,r3,r2
    888c:	1001703a 	wrctl	status,r2
  
  return context;
    8890:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8894:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    8898:	e0bffd17 	ldw	r2,-12(fp)
    889c:	10800283 	ldbu	r2,10(r2)
    88a0:	10803fcc 	andi	r2,r2,255
    88a4:	10002526 	beq	r2,zero,893c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    88a8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    88ac:	e0bffe03 	ldbu	r2,-8(fp)
    88b0:	10800060 	cmpeqi	r2,r2,1
    88b4:	10000e26 	beq	r2,zero,88f0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    88b8:	00000806 	br	88dc <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    88bc:	01c00084 	movi	r7,2
    88c0:	01800044 	movi	r6,1
    88c4:	000b883a 	mov	r5,zero
    88c8:	e13ffd17 	ldw	r4,-12(fp)
    88cc:	00040040 	call	4004 <OS_EventTaskRdy>
                     nbr_tasks++;
    88d0:	e0bff803 	ldbu	r2,-32(fp)
    88d4:	10800044 	addi	r2,r2,1
    88d8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    88dc:	e0bffd17 	ldw	r2,-12(fp)
    88e0:	10800283 	ldbu	r2,10(r2)
    88e4:	10803fcc 	andi	r2,r2,255
    88e8:	103ff41e 	bne	r2,zero,88bc <__alt_data_end+0xffff021c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    88ec:	00000906 	br	8914 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    88f0:	01c00084 	movi	r7,2
    88f4:	01800044 	movi	r6,1
    88f8:	000b883a 	mov	r5,zero
    88fc:	e13ffd17 	ldw	r4,-12(fp)
    8900:	00040040 	call	4004 <OS_EventTaskRdy>
                 nbr_tasks++;
    8904:	e0bff803 	ldbu	r2,-32(fp)
    8908:	10800044 	addi	r2,r2,1
    890c:	e0bff805 	stb	r2,-32(fp)
                 break;
    8910:	0001883a 	nop
    8914:	e0bff917 	ldw	r2,-28(fp)
    8918:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    891c:	e0bffa17 	ldw	r2,-24(fp)
    8920:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    8924:	0004a500 	call	4a50 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8928:	e0bfff17 	ldw	r2,-4(fp)
    892c:	00c00384 	movi	r3,14
    8930:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    8934:	e0bff803 	ldbu	r2,-32(fp)
    8938:	00000706 	br	8958 <OSSemPendAbort+0x158>
    893c:	e0bff917 	ldw	r2,-28(fp)
    8940:	e0bffb15 	stw	r2,-20(fp)
    8944:	e0bffb17 	ldw	r2,-20(fp)
    8948:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    894c:	e0bfff17 	ldw	r2,-4(fp)
    8950:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    8954:	0005883a 	mov	r2,zero
}
    8958:	e037883a 	mov	sp,fp
    895c:	dfc00117 	ldw	ra,4(sp)
    8960:	df000017 	ldw	fp,0(sp)
    8964:	dec00204 	addi	sp,sp,8
    8968:	f800283a 	ret

0000896c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    896c:	defff804 	addi	sp,sp,-32
    8970:	dfc00715 	stw	ra,28(sp)
    8974:	df000615 	stw	fp,24(sp)
    8978:	df000604 	addi	fp,sp,24
    897c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8980:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8984:	e0bfff17 	ldw	r2,-4(fp)
    8988:	1000021e 	bne	r2,zero,8994 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    898c:	00800104 	movi	r2,4
    8990:	00003506 	br	8a68 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8994:	e0bfff17 	ldw	r2,-4(fp)
    8998:	10800003 	ldbu	r2,0(r2)
    899c:	10803fcc 	andi	r2,r2,255
    89a0:	108000e0 	cmpeqi	r2,r2,3
    89a4:	1000021e 	bne	r2,zero,89b0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    89a8:	00800044 	movi	r2,1
    89ac:	00002e06 	br	8a68 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    89b0:	0005303a 	rdctl	r2,status
    89b4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89b8:	e0fffe17 	ldw	r3,-8(fp)
    89bc:	00bfff84 	movi	r2,-2
    89c0:	1884703a 	and	r2,r3,r2
    89c4:	1001703a 	wrctl	status,r2
  
  return context;
    89c8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    89cc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    89d0:	e0bfff17 	ldw	r2,-4(fp)
    89d4:	10800283 	ldbu	r2,10(r2)
    89d8:	10803fcc 	andi	r2,r2,255
    89dc:	10000c26 	beq	r2,zero,8a10 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    89e0:	000f883a 	mov	r7,zero
    89e4:	01800044 	movi	r6,1
    89e8:	000b883a 	mov	r5,zero
    89ec:	e13fff17 	ldw	r4,-4(fp)
    89f0:	00040040 	call	4004 <OS_EventTaskRdy>
    89f4:	e0bffa17 	ldw	r2,-24(fp)
    89f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89fc:	e0bffb17 	ldw	r2,-20(fp)
    8a00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    8a04:	0004a500 	call	4a50 <OS_Sched>
        return (OS_ERR_NONE);
    8a08:	0005883a 	mov	r2,zero
    8a0c:	00001606 	br	8a68 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    8a10:	e0bfff17 	ldw	r2,-4(fp)
    8a14:	1080020b 	ldhu	r2,8(r2)
    8a18:	10ffffcc 	andi	r3,r2,65535
    8a1c:	00bfffd4 	movui	r2,65535
    8a20:	18800c26 	beq	r3,r2,8a54 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    8a24:	e0bfff17 	ldw	r2,-4(fp)
    8a28:	1080020b 	ldhu	r2,8(r2)
    8a2c:	10800044 	addi	r2,r2,1
    8a30:	1007883a 	mov	r3,r2
    8a34:	e0bfff17 	ldw	r2,-4(fp)
    8a38:	10c0020d 	sth	r3,8(r2)
    8a3c:	e0bffa17 	ldw	r2,-24(fp)
    8a40:	e0bffc15 	stw	r2,-16(fp)
    8a44:	e0bffc17 	ldw	r2,-16(fp)
    8a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    8a4c:	0005883a 	mov	r2,zero
    8a50:	00000506 	br	8a68 <OSSemPost+0xfc>
    8a54:	e0bffa17 	ldw	r2,-24(fp)
    8a58:	e0bffd15 	stw	r2,-12(fp)
    8a5c:	e0bffd17 	ldw	r2,-12(fp)
    8a60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    8a64:	00800c84 	movi	r2,50
}
    8a68:	e037883a 	mov	sp,fp
    8a6c:	dfc00117 	ldw	ra,4(sp)
    8a70:	df000017 	ldw	fp,0(sp)
    8a74:	dec00204 	addi	sp,sp,8
    8a78:	f800283a 	ret

00008a7c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    8a7c:	defff704 	addi	sp,sp,-36
    8a80:	df000815 	stw	fp,32(sp)
    8a84:	df000804 	addi	fp,sp,32
    8a88:	e13ffe15 	stw	r4,-8(fp)
    8a8c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8a90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8a94:	e0bffe17 	ldw	r2,-8(fp)
    8a98:	1000021e 	bne	r2,zero,8aa4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8a9c:	00800104 	movi	r2,4
    8aa0:	00003606 	br	8b7c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    8aa4:	e0bfff17 	ldw	r2,-4(fp)
    8aa8:	1000021e 	bne	r2,zero,8ab4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8aac:	00800244 	movi	r2,9
    8ab0:	00003206 	br	8b7c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8ab4:	e0bffe17 	ldw	r2,-8(fp)
    8ab8:	10800003 	ldbu	r2,0(r2)
    8abc:	10803fcc 	andi	r2,r2,255
    8ac0:	108000e0 	cmpeqi	r2,r2,3
    8ac4:	1000021e 	bne	r2,zero,8ad0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8ac8:	00800044 	movi	r2,1
    8acc:	00002b06 	br	8b7c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ad0:	0005303a 	rdctl	r2,status
    8ad4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ad8:	e0fffd17 	ldw	r3,-12(fp)
    8adc:	00bfff84 	movi	r2,-2
    8ae0:	1884703a 	and	r2,r3,r2
    8ae4:	1001703a 	wrctl	status,r2
  
  return context;
    8ae8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8aec:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    8af0:	e0bffe17 	ldw	r2,-8(fp)
    8af4:	10c00283 	ldbu	r3,10(r2)
    8af8:	e0bfff17 	ldw	r2,-4(fp)
    8afc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    8b00:	e0bffe17 	ldw	r2,-8(fp)
    8b04:	108002c4 	addi	r2,r2,11
    8b08:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    8b0c:	e0bfff17 	ldw	r2,-4(fp)
    8b10:	10800084 	addi	r2,r2,2
    8b14:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b18:	e03ffa05 	stb	zero,-24(fp)
    8b1c:	00000b06 	br	8b4c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    8b20:	e0bff917 	ldw	r2,-28(fp)
    8b24:	10c00044 	addi	r3,r2,1
    8b28:	e0fff915 	stw	r3,-28(fp)
    8b2c:	e0fff817 	ldw	r3,-32(fp)
    8b30:	19000044 	addi	r4,r3,1
    8b34:	e13ff815 	stw	r4,-32(fp)
    8b38:	18c00003 	ldbu	r3,0(r3)
    8b3c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b40:	e0bffa03 	ldbu	r2,-24(fp)
    8b44:	10800044 	addi	r2,r2,1
    8b48:	e0bffa05 	stb	r2,-24(fp)
    8b4c:	e0bffa03 	ldbu	r2,-24(fp)
    8b50:	108000f0 	cmpltui	r2,r2,3
    8b54:	103ff21e 	bne	r2,zero,8b20 <__alt_data_end+0xffff0480>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    8b58:	e0bffe17 	ldw	r2,-8(fp)
    8b5c:	10c0020b 	ldhu	r3,8(r2)
    8b60:	e0bfff17 	ldw	r2,-4(fp)
    8b64:	10c0000d 	sth	r3,0(r2)
    8b68:	e0bffb17 	ldw	r2,-20(fp)
    8b6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b70:	e0bffc17 	ldw	r2,-16(fp)
    8b74:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b78:	0005883a 	mov	r2,zero
}
    8b7c:	e037883a 	mov	sp,fp
    8b80:	df000017 	ldw	fp,0(sp)
    8b84:	dec00104 	addi	sp,sp,4
    8b88:	f800283a 	ret

00008b8c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    8b8c:	defff904 	addi	sp,sp,-28
    8b90:	df000615 	stw	fp,24(sp)
    8b94:	df000604 	addi	fp,sp,24
    8b98:	e13ffd15 	stw	r4,-12(fp)
    8b9c:	2805883a 	mov	r2,r5
    8ba0:	e1bfff15 	stw	r6,-4(fp)
    8ba4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ba8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8bac:	e0bfff17 	ldw	r2,-4(fp)
    8bb0:	10003126 	beq	r2,zero,8c78 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8bb4:	e0bffd17 	ldw	r2,-12(fp)
    8bb8:	1000041e 	bne	r2,zero,8bcc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    8bbc:	e0bfff17 	ldw	r2,-4(fp)
    8bc0:	00c00104 	movi	r3,4
    8bc4:	10c00005 	stb	r3,0(r2)
        return;
    8bc8:	00002c06 	br	8c7c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8bcc:	e0bffd17 	ldw	r2,-12(fp)
    8bd0:	10800003 	ldbu	r2,0(r2)
    8bd4:	10803fcc 	andi	r2,r2,255
    8bd8:	108000e0 	cmpeqi	r2,r2,3
    8bdc:	1000041e 	bne	r2,zero,8bf0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    8be0:	e0bfff17 	ldw	r2,-4(fp)
    8be4:	00c00044 	movi	r3,1
    8be8:	10c00005 	stb	r3,0(r2)
        return;
    8bec:	00002306 	br	8c7c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8bf0:	0005303a 	rdctl	r2,status
    8bf4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bf8:	e0fffc17 	ldw	r3,-16(fp)
    8bfc:	00bfff84 	movi	r2,-2
    8c00:	1884703a 	and	r2,r3,r2
    8c04:	1001703a 	wrctl	status,r2
  
  return context;
    8c08:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8c0c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    8c10:	e0bfff17 	ldw	r2,-4(fp)
    8c14:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    8c18:	e0bffd17 	ldw	r2,-12(fp)
    8c1c:	1080020b 	ldhu	r2,8(r2)
    8c20:	10bfffcc 	andi	r2,r2,65535
    8c24:	10000426 	beq	r2,zero,8c38 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    8c28:	e0bffd17 	ldw	r2,-12(fp)
    8c2c:	e0fffe0b 	ldhu	r3,-8(fp)
    8c30:	10c0020d 	sth	r3,8(r2)
    8c34:	00000b06 	br	8c64 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    8c38:	e0bffd17 	ldw	r2,-12(fp)
    8c3c:	10800283 	ldbu	r2,10(r2)
    8c40:	10803fcc 	andi	r2,r2,255
    8c44:	1000041e 	bne	r2,zero,8c58 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    8c48:	e0bffd17 	ldw	r2,-12(fp)
    8c4c:	e0fffe0b 	ldhu	r3,-8(fp)
    8c50:	10c0020d 	sth	r3,8(r2)
    8c54:	00000306 	br	8c64 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    8c58:	e0bfff17 	ldw	r2,-4(fp)
    8c5c:	00c01244 	movi	r3,73
    8c60:	10c00005 	stb	r3,0(r2)
    8c64:	e0bffa17 	ldw	r2,-24(fp)
    8c68:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c6c:	e0bffb17 	ldw	r2,-20(fp)
    8c70:	1001703a 	wrctl	status,r2
    8c74:	00000106 	br	8c7c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    8c78:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    8c7c:	e037883a 	mov	sp,fp
    8c80:	df000017 	ldw	fp,0(sp)
    8c84:	dec00104 	addi	sp,sp,4
    8c88:	f800283a 	ret

00008c8c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    8c8c:	defff104 	addi	sp,sp,-60
    8c90:	dfc00e15 	stw	ra,56(sp)
    8c94:	df000d15 	stw	fp,52(sp)
    8c98:	df000d04 	addi	fp,sp,52
    8c9c:	2007883a 	mov	r3,r4
    8ca0:	2805883a 	mov	r2,r5
    8ca4:	e0fffe05 	stb	r3,-8(fp)
    8ca8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    8cac:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    8cb0:	e0bffe03 	ldbu	r2,-8(fp)
    8cb4:	10800530 	cmpltui	r2,r2,20
    8cb8:	1000051e 	bne	r2,zero,8cd0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    8cbc:	e0bffe03 	ldbu	r2,-8(fp)
    8cc0:	10803fe0 	cmpeqi	r2,r2,255
    8cc4:	1000021e 	bne	r2,zero,8cd0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    8cc8:	00800a84 	movi	r2,42
    8ccc:	00012606 	br	9168 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    8cd0:	e0bfff03 	ldbu	r2,-4(fp)
    8cd4:	10800530 	cmpltui	r2,r2,20
    8cd8:	1000021e 	bne	r2,zero,8ce4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    8cdc:	00800a84 	movi	r2,42
    8ce0:	00012106 	br	9168 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ce4:	0005303a 	rdctl	r2,status
    8ce8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8cec:	e0fffd17 	ldw	r3,-12(fp)
    8cf0:	00bfff84 	movi	r2,-2
    8cf4:	1884703a 	and	r2,r3,r2
    8cf8:	1001703a 	wrctl	status,r2
  
  return context;
    8cfc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8d00:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    8d04:	e0ffff03 	ldbu	r3,-4(fp)
    8d08:	00800074 	movhi	r2,1
    8d0c:	109ecd04 	addi	r2,r2,31540
    8d10:	18c7883a 	add	r3,r3,r3
    8d14:	18c7883a 	add	r3,r3,r3
    8d18:	10c5883a 	add	r2,r2,r3
    8d1c:	10800017 	ldw	r2,0(r2)
    8d20:	10000626 	beq	r2,zero,8d3c <OSTaskChangePrio+0xb0>
    8d24:	e0bff517 	ldw	r2,-44(fp)
    8d28:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d2c:	e0bff617 	ldw	r2,-40(fp)
    8d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    8d34:	00800a04 	movi	r2,40
    8d38:	00010b06 	br	9168 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    8d3c:	e0bffe03 	ldbu	r2,-8(fp)
    8d40:	10803fd8 	cmpnei	r2,r2,255
    8d44:	1000031e 	bne	r2,zero,8d54 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    8d48:	d0a71117 	ldw	r2,-25532(gp)
    8d4c:	10800c83 	ldbu	r2,50(r2)
    8d50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    8d54:	e0fffe03 	ldbu	r3,-8(fp)
    8d58:	00800074 	movhi	r2,1
    8d5c:	109ecd04 	addi	r2,r2,31540
    8d60:	18c7883a 	add	r3,r3,r3
    8d64:	18c7883a 	add	r3,r3,r3
    8d68:	10c5883a 	add	r2,r2,r3
    8d6c:	10800017 	ldw	r2,0(r2)
    8d70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    8d74:	e0bff817 	ldw	r2,-32(fp)
    8d78:	1000061e 	bne	r2,zero,8d94 <OSTaskChangePrio+0x108>
    8d7c:	e0bff517 	ldw	r2,-44(fp)
    8d80:	e0bff715 	stw	r2,-36(fp)
    8d84:	e0bff717 	ldw	r2,-36(fp)
    8d88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    8d8c:	00800a44 	movi	r2,41
    8d90:	0000f506 	br	9168 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    8d94:	e0bff817 	ldw	r2,-32(fp)
    8d98:	10800058 	cmpnei	r2,r2,1
    8d9c:	1000061e 	bne	r2,zero,8db8 <OSTaskChangePrio+0x12c>
    8da0:	e0bff517 	ldw	r2,-44(fp)
    8da4:	e0bff915 	stw	r2,-28(fp)
    8da8:	e0bff917 	ldw	r2,-28(fp)
    8dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    8db0:	008010c4 	movi	r2,67
    8db4:	0000ec06 	br	9168 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    8db8:	e0bfff03 	ldbu	r2,-4(fp)
    8dbc:	1004d0fa 	srli	r2,r2,3
    8dc0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    8dc4:	e0bfff03 	ldbu	r2,-4(fp)
    8dc8:	108001cc 	andi	r2,r2,7
    8dcc:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    8dd0:	e0bffb03 	ldbu	r2,-20(fp)
    8dd4:	00c00044 	movi	r3,1
    8dd8:	1884983a 	sll	r2,r3,r2
    8ddc:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    8de0:	e0bffb43 	ldbu	r2,-19(fp)
    8de4:	00c00044 	movi	r3,1
    8de8:	1884983a 	sll	r2,r3,r2
    8dec:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    8df0:	e0fffe03 	ldbu	r3,-8(fp)
    8df4:	00800074 	movhi	r2,1
    8df8:	109ecd04 	addi	r2,r2,31540
    8dfc:	18c7883a 	add	r3,r3,r3
    8e00:	18c7883a 	add	r3,r3,r3
    8e04:	10c5883a 	add	r2,r2,r3
    8e08:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    8e0c:	e0ffff03 	ldbu	r3,-4(fp)
    8e10:	00800074 	movhi	r2,1
    8e14:	109ecd04 	addi	r2,r2,31540
    8e18:	18c7883a 	add	r3,r3,r3
    8e1c:	18c7883a 	add	r3,r3,r3
    8e20:	10c5883a 	add	r2,r2,r3
    8e24:	e0fff817 	ldw	r3,-32(fp)
    8e28:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    8e2c:	e0bff817 	ldw	r2,-32(fp)
    8e30:	10800d03 	ldbu	r2,52(r2)
    8e34:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    8e38:	e0bff817 	ldw	r2,-32(fp)
    8e3c:	10800d83 	ldbu	r2,54(r2)
    8e40:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    8e44:	e0bff817 	ldw	r2,-32(fp)
    8e48:	10800d43 	ldbu	r2,53(r2)
    8e4c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    8e50:	e0fffc03 	ldbu	r3,-16(fp)
    8e54:	d0a70e44 	addi	r2,gp,-25543
    8e58:	1885883a 	add	r2,r3,r2
    8e5c:	10c00003 	ldbu	r3,0(r2)
    8e60:	e0bffc83 	ldbu	r2,-14(fp)
    8e64:	1884703a 	and	r2,r3,r2
    8e68:	10803fcc 	andi	r2,r2,255
    8e6c:	10002826 	beq	r2,zero,8f10 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    8e70:	e0fffc03 	ldbu	r3,-16(fp)
    8e74:	e13ffc03 	ldbu	r4,-16(fp)
    8e78:	d0a70e44 	addi	r2,gp,-25543
    8e7c:	2085883a 	add	r2,r4,r2
    8e80:	10800003 	ldbu	r2,0(r2)
    8e84:	1009883a 	mov	r4,r2
    8e88:	e0bffc83 	ldbu	r2,-14(fp)
    8e8c:	0084303a 	nor	r2,zero,r2
    8e90:	2084703a 	and	r2,r4,r2
    8e94:	1009883a 	mov	r4,r2
    8e98:	d0a70e44 	addi	r2,gp,-25543
    8e9c:	1885883a 	add	r2,r3,r2
    8ea0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    8ea4:	e0fffc03 	ldbu	r3,-16(fp)
    8ea8:	d0a70e44 	addi	r2,gp,-25543
    8eac:	1885883a 	add	r2,r3,r2
    8eb0:	10800003 	ldbu	r2,0(r2)
    8eb4:	10803fcc 	andi	r2,r2,255
    8eb8:	1000061e 	bne	r2,zero,8ed4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    8ebc:	e0bffc43 	ldbu	r2,-15(fp)
    8ec0:	0084303a 	nor	r2,zero,r2
    8ec4:	1007883a 	mov	r3,r2
    8ec8:	d0a70e03 	ldbu	r2,-25544(gp)
    8ecc:	1884703a 	and	r2,r3,r2
    8ed0:	d0a70e05 	stb	r2,-25544(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    8ed4:	d0e70e03 	ldbu	r3,-25544(gp)
    8ed8:	e0bffb83 	ldbu	r2,-18(fp)
    8edc:	1884b03a 	or	r2,r3,r2
    8ee0:	d0a70e05 	stb	r2,-25544(gp)
         OSRdyTbl[y_new] |= bitx_new;
    8ee4:	e0fffb03 	ldbu	r3,-20(fp)
    8ee8:	e13ffb03 	ldbu	r4,-20(fp)
    8eec:	d0a70e44 	addi	r2,gp,-25543
    8ef0:	2085883a 	add	r2,r4,r2
    8ef4:	11000003 	ldbu	r4,0(r2)
    8ef8:	e0bffbc3 	ldbu	r2,-17(fp)
    8efc:	2084b03a 	or	r2,r4,r2
    8f00:	1009883a 	mov	r4,r2
    8f04:	d0a70e44 	addi	r2,gp,-25543
    8f08:	1885883a 	add	r2,r3,r2
    8f0c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    8f10:	e0bff817 	ldw	r2,-32(fp)
    8f14:	10800717 	ldw	r2,28(r2)
    8f18:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    8f1c:	e0bff317 	ldw	r2,-52(fp)
    8f20:	10003326 	beq	r2,zero,8ff0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    8f24:	e0bffc03 	ldbu	r2,-16(fp)
    8f28:	e0fffc03 	ldbu	r3,-16(fp)
    8f2c:	e13ff317 	ldw	r4,-52(fp)
    8f30:	20c7883a 	add	r3,r4,r3
    8f34:	18c002c4 	addi	r3,r3,11
    8f38:	18c00003 	ldbu	r3,0(r3)
    8f3c:	1809883a 	mov	r4,r3
    8f40:	e0fffc83 	ldbu	r3,-14(fp)
    8f44:	00c6303a 	nor	r3,zero,r3
    8f48:	20c6703a 	and	r3,r4,r3
    8f4c:	1809883a 	mov	r4,r3
    8f50:	e0fff317 	ldw	r3,-52(fp)
    8f54:	1885883a 	add	r2,r3,r2
    8f58:	108002c4 	addi	r2,r2,11
    8f5c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    8f60:	e0bffc03 	ldbu	r2,-16(fp)
    8f64:	e0fff317 	ldw	r3,-52(fp)
    8f68:	1885883a 	add	r2,r3,r2
    8f6c:	108002c4 	addi	r2,r2,11
    8f70:	10800003 	ldbu	r2,0(r2)
    8f74:	10803fcc 	andi	r2,r2,255
    8f78:	1000091e 	bne	r2,zero,8fa0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    8f7c:	e0bff317 	ldw	r2,-52(fp)
    8f80:	10800283 	ldbu	r2,10(r2)
    8f84:	1007883a 	mov	r3,r2
    8f88:	e0bffc43 	ldbu	r2,-15(fp)
    8f8c:	0084303a 	nor	r2,zero,r2
    8f90:	1884703a 	and	r2,r3,r2
    8f94:	1007883a 	mov	r3,r2
    8f98:	e0bff317 	ldw	r2,-52(fp)
    8f9c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    8fa0:	e0bff317 	ldw	r2,-52(fp)
    8fa4:	10c00283 	ldbu	r3,10(r2)
    8fa8:	e0bffb83 	ldbu	r2,-18(fp)
    8fac:	1884b03a 	or	r2,r3,r2
    8fb0:	1007883a 	mov	r3,r2
    8fb4:	e0bff317 	ldw	r2,-52(fp)
    8fb8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    8fbc:	e0bffb03 	ldbu	r2,-20(fp)
    8fc0:	e0fffb03 	ldbu	r3,-20(fp)
    8fc4:	e13ff317 	ldw	r4,-52(fp)
    8fc8:	20c7883a 	add	r3,r4,r3
    8fcc:	18c002c4 	addi	r3,r3,11
    8fd0:	19000003 	ldbu	r4,0(r3)
    8fd4:	e0fffbc3 	ldbu	r3,-17(fp)
    8fd8:	20c6b03a 	or	r3,r4,r3
    8fdc:	1809883a 	mov	r4,r3
    8fe0:	e0fff317 	ldw	r3,-52(fp)
    8fe4:	1885883a 	add	r2,r3,r2
    8fe8:	108002c4 	addi	r2,r2,11
    8fec:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    8ff0:	e0bff817 	ldw	r2,-32(fp)
    8ff4:	10800817 	ldw	r2,32(r2)
    8ff8:	10004226 	beq	r2,zero,9104 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    8ffc:	e0bff817 	ldw	r2,-32(fp)
    9000:	10800817 	ldw	r2,32(r2)
    9004:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9008:	e0bff417 	ldw	r2,-48(fp)
    900c:	10800017 	ldw	r2,0(r2)
    9010:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9014:	00003906 	br	90fc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9018:	e0bffc03 	ldbu	r2,-16(fp)
    901c:	e0fffc03 	ldbu	r3,-16(fp)
    9020:	e13ff317 	ldw	r4,-52(fp)
    9024:	20c7883a 	add	r3,r4,r3
    9028:	18c002c4 	addi	r3,r3,11
    902c:	18c00003 	ldbu	r3,0(r3)
    9030:	1809883a 	mov	r4,r3
    9034:	e0fffc83 	ldbu	r3,-14(fp)
    9038:	00c6303a 	nor	r3,zero,r3
    903c:	20c6703a 	and	r3,r4,r3
    9040:	1809883a 	mov	r4,r3
    9044:	e0fff317 	ldw	r3,-52(fp)
    9048:	1885883a 	add	r2,r3,r2
    904c:	108002c4 	addi	r2,r2,11
    9050:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9054:	e0bffc03 	ldbu	r2,-16(fp)
    9058:	e0fff317 	ldw	r3,-52(fp)
    905c:	1885883a 	add	r2,r3,r2
    9060:	108002c4 	addi	r2,r2,11
    9064:	10800003 	ldbu	r2,0(r2)
    9068:	10803fcc 	andi	r2,r2,255
    906c:	1000091e 	bne	r2,zero,9094 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    9070:	e0bff317 	ldw	r2,-52(fp)
    9074:	10800283 	ldbu	r2,10(r2)
    9078:	1007883a 	mov	r3,r2
    907c:	e0bffc43 	ldbu	r2,-15(fp)
    9080:	0084303a 	nor	r2,zero,r2
    9084:	1884703a 	and	r2,r3,r2
    9088:	1007883a 	mov	r3,r2
    908c:	e0bff317 	ldw	r2,-52(fp)
    9090:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9094:	e0bff317 	ldw	r2,-52(fp)
    9098:	10c00283 	ldbu	r3,10(r2)
    909c:	e0bffb83 	ldbu	r2,-18(fp)
    90a0:	1884b03a 	or	r2,r3,r2
    90a4:	1007883a 	mov	r3,r2
    90a8:	e0bff317 	ldw	r2,-52(fp)
    90ac:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    90b0:	e0bffb03 	ldbu	r2,-20(fp)
    90b4:	e0fffb03 	ldbu	r3,-20(fp)
    90b8:	e13ff317 	ldw	r4,-52(fp)
    90bc:	20c7883a 	add	r3,r4,r3
    90c0:	18c002c4 	addi	r3,r3,11
    90c4:	19000003 	ldbu	r4,0(r3)
    90c8:	e0fffbc3 	ldbu	r3,-17(fp)
    90cc:	20c6b03a 	or	r3,r4,r3
    90d0:	1809883a 	mov	r4,r3
    90d4:	e0fff317 	ldw	r3,-52(fp)
    90d8:	1885883a 	add	r2,r3,r2
    90dc:	108002c4 	addi	r2,r2,11
    90e0:	11000005 	stb	r4,0(r2)
            pevents++;
    90e4:	e0bff417 	ldw	r2,-48(fp)
    90e8:	10800104 	addi	r2,r2,4
    90ec:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    90f0:	e0bff417 	ldw	r2,-48(fp)
    90f4:	10800017 	ldw	r2,0(r2)
    90f8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    90fc:	e0bff317 	ldw	r2,-52(fp)
    9100:	103fc51e 	bne	r2,zero,9018 <__alt_data_end+0xffff0978>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9104:	e0bff817 	ldw	r2,-32(fp)
    9108:	e0ffff03 	ldbu	r3,-4(fp)
    910c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    9110:	e0bff817 	ldw	r2,-32(fp)
    9114:	e0fffb03 	ldbu	r3,-20(fp)
    9118:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    911c:	e0bff817 	ldw	r2,-32(fp)
    9120:	e0fffb43 	ldbu	r3,-19(fp)
    9124:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9128:	e0bff817 	ldw	r2,-32(fp)
    912c:	e0fffb83 	ldbu	r3,-18(fp)
    9130:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9134:	e0bff817 	ldw	r2,-32(fp)
    9138:	e0fffbc3 	ldbu	r3,-17(fp)
    913c:	10c00d45 	stb	r3,53(r2)
    9140:	e0bff517 	ldw	r2,-44(fp)
    9144:	e0bffa15 	stw	r2,-24(fp)
    9148:	e0bffa17 	ldw	r2,-24(fp)
    914c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9150:	d0a70243 	ldbu	r2,-25591(gp)
    9154:	10803fcc 	andi	r2,r2,255
    9158:	10800058 	cmpnei	r2,r2,1
    915c:	1000011e 	bne	r2,zero,9164 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    9160:	0004a500 	call	4a50 <OS_Sched>
    }
    return (OS_ERR_NONE);
    9164:	0005883a 	mov	r2,zero
}
    9168:	e037883a 	mov	sp,fp
    916c:	dfc00117 	ldw	ra,4(sp)
    9170:	df000017 	ldw	fp,0(sp)
    9174:	dec00204 	addi	sp,sp,8
    9178:	f800283a 	ret

0000917c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    917c:	deffee04 	addi	sp,sp,-72
    9180:	dfc01115 	stw	ra,68(sp)
    9184:	df001015 	stw	fp,64(sp)
    9188:	df001004 	addi	fp,sp,64
    918c:	e13ffc15 	stw	r4,-16(fp)
    9190:	e17ffd15 	stw	r5,-12(fp)
    9194:	e1bffe15 	stw	r6,-8(fp)
    9198:	3805883a 	mov	r2,r7
    919c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    91a0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    91a4:	e0bfff03 	ldbu	r2,-4(fp)
    91a8:	10800570 	cmpltui	r2,r2,21
    91ac:	1000021e 	bne	r2,zero,91b8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    91b0:	00800a84 	movi	r2,42
    91b4:	00005706 	br	9314 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91b8:	0005303a 	rdctl	r2,status
    91bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91c0:	e0fffb17 	ldw	r3,-20(fp)
    91c4:	00bfff84 	movi	r2,-2
    91c8:	1884703a 	and	r2,r3,r2
    91cc:	1001703a 	wrctl	status,r2
  
  return context;
    91d0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    91d4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    91d8:	d0a71003 	ldbu	r2,-25536(gp)
    91dc:	10803fcc 	andi	r2,r2,255
    91e0:	10000626 	beq	r2,zero,91fc <OSTaskCreate+0x80>
    91e4:	e0bff317 	ldw	r2,-52(fp)
    91e8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91ec:	e0bff417 	ldw	r2,-48(fp)
    91f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    91f4:	00800f04 	movi	r2,60
    91f8:	00004606 	br	9314 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    91fc:	e0ffff03 	ldbu	r3,-4(fp)
    9200:	00800074 	movhi	r2,1
    9204:	109ecd04 	addi	r2,r2,31540
    9208:	18c7883a 	add	r3,r3,r3
    920c:	18c7883a 	add	r3,r3,r3
    9210:	10c5883a 	add	r2,r2,r3
    9214:	10800017 	ldw	r2,0(r2)
    9218:	1000391e 	bne	r2,zero,9300 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    921c:	e0ffff03 	ldbu	r3,-4(fp)
    9220:	00800074 	movhi	r2,1
    9224:	109ecd04 	addi	r2,r2,31540
    9228:	18c7883a 	add	r3,r3,r3
    922c:	18c7883a 	add	r3,r3,r3
    9230:	10c5883a 	add	r2,r2,r3
    9234:	00c00044 	movi	r3,1
    9238:	10c00015 	stw	r3,0(r2)
    923c:	e0bff317 	ldw	r2,-52(fp)
    9240:	e0bff515 	stw	r2,-44(fp)
    9244:	e0bff517 	ldw	r2,-44(fp)
    9248:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    924c:	000f883a 	mov	r7,zero
    9250:	e1bffe17 	ldw	r6,-8(fp)
    9254:	e17ffd17 	ldw	r5,-12(fp)
    9258:	e13ffc17 	ldw	r4,-16(fp)
    925c:	000c4280 	call	c428 <OSTaskStkInit>
    9260:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    9264:	e0bfff03 	ldbu	r2,-4(fp)
    9268:	d8000215 	stw	zero,8(sp)
    926c:	d8000115 	stw	zero,4(sp)
    9270:	d8000015 	stw	zero,0(sp)
    9274:	000f883a 	mov	r7,zero
    9278:	000d883a 	mov	r6,zero
    927c:	e17ff717 	ldw	r5,-36(fp)
    9280:	1009883a 	mov	r4,r2
    9284:	0004e500 	call	4e50 <OS_TCBInit>
    9288:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    928c:	e0bff803 	ldbu	r2,-32(fp)
    9290:	1000061e 	bne	r2,zero,92ac <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9294:	d0a70243 	ldbu	r2,-25591(gp)
    9298:	10803fcc 	andi	r2,r2,255
    929c:	10800058 	cmpnei	r2,r2,1
    92a0:	1000151e 	bne	r2,zero,92f8 <OSTaskCreate+0x17c>
                OS_Sched();
    92a4:	0004a500 	call	4a50 <OS_Sched>
    92a8:	00001306 	br	92f8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92ac:	0005303a 	rdctl	r2,status
    92b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92b4:	e0fffa17 	ldw	r3,-24(fp)
    92b8:	00bfff84 	movi	r2,-2
    92bc:	1884703a 	and	r2,r3,r2
    92c0:	1001703a 	wrctl	status,r2
  
  return context;
    92c4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    92c8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    92cc:	e0ffff03 	ldbu	r3,-4(fp)
    92d0:	00800074 	movhi	r2,1
    92d4:	109ecd04 	addi	r2,r2,31540
    92d8:	18c7883a 	add	r3,r3,r3
    92dc:	18c7883a 	add	r3,r3,r3
    92e0:	10c5883a 	add	r2,r2,r3
    92e4:	10000015 	stw	zero,0(r2)
    92e8:	e0bff317 	ldw	r2,-52(fp)
    92ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92f0:	e0bff617 	ldw	r2,-40(fp)
    92f4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    92f8:	e0bff803 	ldbu	r2,-32(fp)
    92fc:	00000506 	br	9314 <OSTaskCreate+0x198>
    9300:	e0bff317 	ldw	r2,-52(fp)
    9304:	e0bff915 	stw	r2,-28(fp)
    9308:	e0bff917 	ldw	r2,-28(fp)
    930c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    9310:	00800a04 	movi	r2,40
}
    9314:	e037883a 	mov	sp,fp
    9318:	dfc00117 	ldw	ra,4(sp)
    931c:	df000017 	ldw	fp,0(sp)
    9320:	dec00204 	addi	sp,sp,8
    9324:	f800283a 	ret

00009328 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    9328:	deffec04 	addi	sp,sp,-80
    932c:	dfc01315 	stw	ra,76(sp)
    9330:	df001215 	stw	fp,72(sp)
    9334:	df001204 	addi	fp,sp,72
    9338:	e13ffa15 	stw	r4,-24(fp)
    933c:	e17ffb15 	stw	r5,-20(fp)
    9340:	e1bffc15 	stw	r6,-16(fp)
    9344:	3809883a 	mov	r4,r7
    9348:	e0c00217 	ldw	r3,8(fp)
    934c:	e0800617 	ldw	r2,24(fp)
    9350:	e13ffd05 	stb	r4,-12(fp)
    9354:	e0fffe0d 	sth	r3,-8(fp)
    9358:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    935c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    9360:	e0bffd03 	ldbu	r2,-12(fp)
    9364:	10800570 	cmpltui	r2,r2,21
    9368:	1000021e 	bne	r2,zero,9374 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    936c:	00800a84 	movi	r2,42
    9370:	00006106 	br	94f8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9374:	0005303a 	rdctl	r2,status
    9378:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    937c:	e0fff917 	ldw	r3,-28(fp)
    9380:	00bfff84 	movi	r2,-2
    9384:	1884703a 	and	r2,r3,r2
    9388:	1001703a 	wrctl	status,r2
  
  return context;
    938c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9390:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9394:	d0a71003 	ldbu	r2,-25536(gp)
    9398:	10803fcc 	andi	r2,r2,255
    939c:	10000626 	beq	r2,zero,93b8 <OSTaskCreateExt+0x90>
    93a0:	e0bff117 	ldw	r2,-60(fp)
    93a4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93a8:	e0bff217 	ldw	r2,-56(fp)
    93ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    93b0:	00800f04 	movi	r2,60
    93b4:	00005006 	br	94f8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    93b8:	e0fffd03 	ldbu	r3,-12(fp)
    93bc:	00800074 	movhi	r2,1
    93c0:	109ecd04 	addi	r2,r2,31540
    93c4:	18c7883a 	add	r3,r3,r3
    93c8:	18c7883a 	add	r3,r3,r3
    93cc:	10c5883a 	add	r2,r2,r3
    93d0:	10800017 	ldw	r2,0(r2)
    93d4:	1000431e 	bne	r2,zero,94e4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    93d8:	e0fffd03 	ldbu	r3,-12(fp)
    93dc:	00800074 	movhi	r2,1
    93e0:	109ecd04 	addi	r2,r2,31540
    93e4:	18c7883a 	add	r3,r3,r3
    93e8:	18c7883a 	add	r3,r3,r3
    93ec:	10c5883a 	add	r2,r2,r3
    93f0:	00c00044 	movi	r3,1
    93f4:	10c00015 	stw	r3,0(r2)
    93f8:	e0bff117 	ldw	r2,-60(fp)
    93fc:	e0bff315 	stw	r2,-52(fp)
    9400:	e0bff317 	ldw	r2,-52(fp)
    9404:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    9408:	e0bfff0b 	ldhu	r2,-4(fp)
    940c:	100d883a 	mov	r6,r2
    9410:	e1400417 	ldw	r5,16(fp)
    9414:	e1000317 	ldw	r4,12(fp)
    9418:	000a3880 	call	a388 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    941c:	e0bfff0b 	ldhu	r2,-4(fp)
    9420:	100f883a 	mov	r7,r2
    9424:	e1bffc17 	ldw	r6,-16(fp)
    9428:	e17ffb17 	ldw	r5,-20(fp)
    942c:	e13ffa17 	ldw	r4,-24(fp)
    9430:	000c4280 	call	c428 <OSTaskStkInit>
    9434:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    9438:	e0fffd03 	ldbu	r3,-12(fp)
    943c:	e13ffe0b 	ldhu	r4,-8(fp)
    9440:	e0bfff0b 	ldhu	r2,-4(fp)
    9444:	d8800215 	stw	r2,8(sp)
    9448:	e0800517 	ldw	r2,20(fp)
    944c:	d8800115 	stw	r2,4(sp)
    9450:	e0800417 	ldw	r2,16(fp)
    9454:	d8800015 	stw	r2,0(sp)
    9458:	200f883a 	mov	r7,r4
    945c:	e1800317 	ldw	r6,12(fp)
    9460:	e17ff517 	ldw	r5,-44(fp)
    9464:	1809883a 	mov	r4,r3
    9468:	0004e500 	call	4e50 <OS_TCBInit>
    946c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    9470:	e0bff603 	ldbu	r2,-40(fp)
    9474:	1000061e 	bne	r2,zero,9490 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    9478:	d0a70243 	ldbu	r2,-25591(gp)
    947c:	10803fcc 	andi	r2,r2,255
    9480:	10800058 	cmpnei	r2,r2,1
    9484:	1000151e 	bne	r2,zero,94dc <OSTaskCreateExt+0x1b4>
                OS_Sched();
    9488:	0004a500 	call	4a50 <OS_Sched>
    948c:	00001306 	br	94dc <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9490:	0005303a 	rdctl	r2,status
    9494:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9498:	e0fff817 	ldw	r3,-32(fp)
    949c:	00bfff84 	movi	r2,-2
    94a0:	1884703a 	and	r2,r3,r2
    94a4:	1001703a 	wrctl	status,r2
  
  return context;
    94a8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    94ac:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    94b0:	e0fffd03 	ldbu	r3,-12(fp)
    94b4:	00800074 	movhi	r2,1
    94b8:	109ecd04 	addi	r2,r2,31540
    94bc:	18c7883a 	add	r3,r3,r3
    94c0:	18c7883a 	add	r3,r3,r3
    94c4:	10c5883a 	add	r2,r2,r3
    94c8:	10000015 	stw	zero,0(r2)
    94cc:	e0bff117 	ldw	r2,-60(fp)
    94d0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94d4:	e0bff417 	ldw	r2,-48(fp)
    94d8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    94dc:	e0bff603 	ldbu	r2,-40(fp)
    94e0:	00000506 	br	94f8 <OSTaskCreateExt+0x1d0>
    94e4:	e0bff117 	ldw	r2,-60(fp)
    94e8:	e0bff715 	stw	r2,-36(fp)
    94ec:	e0bff717 	ldw	r2,-36(fp)
    94f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    94f4:	00800a04 	movi	r2,40
}
    94f8:	e037883a 	mov	sp,fp
    94fc:	dfc00117 	ldw	ra,4(sp)
    9500:	df000017 	ldw	fp,0(sp)
    9504:	dec00204 	addi	sp,sp,8
    9508:	f800283a 	ret

0000950c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    950c:	defff404 	addi	sp,sp,-48
    9510:	dfc00b15 	stw	ra,44(sp)
    9514:	df000a15 	stw	fp,40(sp)
    9518:	df000a04 	addi	fp,sp,40
    951c:	2005883a 	mov	r2,r4
    9520:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    9524:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    9528:	d0a71003 	ldbu	r2,-25536(gp)
    952c:	10803fcc 	andi	r2,r2,255
    9530:	10000226 	beq	r2,zero,953c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    9534:	00801004 	movi	r2,64
    9538:	0000c006 	br	983c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    953c:	e0bfff03 	ldbu	r2,-4(fp)
    9540:	10800518 	cmpnei	r2,r2,20
    9544:	1000021e 	bne	r2,zero,9550 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    9548:	00800f84 	movi	r2,62
    954c:	0000bb06 	br	983c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    9550:	e0bfff03 	ldbu	r2,-4(fp)
    9554:	10800530 	cmpltui	r2,r2,20
    9558:	1000051e 	bne	r2,zero,9570 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    955c:	e0bfff03 	ldbu	r2,-4(fp)
    9560:	10803fe0 	cmpeqi	r2,r2,255
    9564:	1000021e 	bne	r2,zero,9570 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    9568:	00800a84 	movi	r2,42
    956c:	0000b306 	br	983c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9570:	0005303a 	rdctl	r2,status
    9574:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9578:	e0fffe17 	ldw	r3,-8(fp)
    957c:	00bfff84 	movi	r2,-2
    9580:	1884703a 	and	r2,r3,r2
    9584:	1001703a 	wrctl	status,r2
  
  return context;
    9588:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    958c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    9590:	e0bfff03 	ldbu	r2,-4(fp)
    9594:	10803fd8 	cmpnei	r2,r2,255
    9598:	1000031e 	bne	r2,zero,95a8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    959c:	d0a71117 	ldw	r2,-25532(gp)
    95a0:	10800c83 	ldbu	r2,50(r2)
    95a4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    95a8:	e0ffff03 	ldbu	r3,-4(fp)
    95ac:	00800074 	movhi	r2,1
    95b0:	109ecd04 	addi	r2,r2,31540
    95b4:	18c7883a 	add	r3,r3,r3
    95b8:	18c7883a 	add	r3,r3,r3
    95bc:	10c5883a 	add	r2,r2,r3
    95c0:	10800017 	ldw	r2,0(r2)
    95c4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    95c8:	e0bff817 	ldw	r2,-32(fp)
    95cc:	1000061e 	bne	r2,zero,95e8 <OSTaskDel+0xdc>
    95d0:	e0bff617 	ldw	r2,-40(fp)
    95d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95d8:	e0bff717 	ldw	r2,-36(fp)
    95dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    95e0:	008010c4 	movi	r2,67
    95e4:	00009506 	br	983c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    95e8:	e0bff817 	ldw	r2,-32(fp)
    95ec:	10800058 	cmpnei	r2,r2,1
    95f0:	1000061e 	bne	r2,zero,960c <OSTaskDel+0x100>
    95f4:	e0bff617 	ldw	r2,-40(fp)
    95f8:	e0bff915 	stw	r2,-28(fp)
    95fc:	e0bff917 	ldw	r2,-28(fp)
    9600:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    9604:	00800f44 	movi	r2,61
    9608:	00008c06 	br	983c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    960c:	e0bff817 	ldw	r2,-32(fp)
    9610:	10800d03 	ldbu	r2,52(r2)
    9614:	10c03fcc 	andi	r3,r2,255
    9618:	e0bff817 	ldw	r2,-32(fp)
    961c:	10800d03 	ldbu	r2,52(r2)
    9620:	11003fcc 	andi	r4,r2,255
    9624:	d0a70e44 	addi	r2,gp,-25543
    9628:	2085883a 	add	r2,r4,r2
    962c:	10800003 	ldbu	r2,0(r2)
    9630:	1009883a 	mov	r4,r2
    9634:	e0bff817 	ldw	r2,-32(fp)
    9638:	10800d43 	ldbu	r2,53(r2)
    963c:	0084303a 	nor	r2,zero,r2
    9640:	2084703a 	and	r2,r4,r2
    9644:	1009883a 	mov	r4,r2
    9648:	d0a70e44 	addi	r2,gp,-25543
    964c:	1885883a 	add	r2,r3,r2
    9650:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    9654:	e0bff817 	ldw	r2,-32(fp)
    9658:	10800d03 	ldbu	r2,52(r2)
    965c:	10c03fcc 	andi	r3,r2,255
    9660:	d0a70e44 	addi	r2,gp,-25543
    9664:	1885883a 	add	r2,r3,r2
    9668:	10800003 	ldbu	r2,0(r2)
    966c:	10803fcc 	andi	r2,r2,255
    9670:	1000071e 	bne	r2,zero,9690 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    9674:	e0bff817 	ldw	r2,-32(fp)
    9678:	10800d83 	ldbu	r2,54(r2)
    967c:	0084303a 	nor	r2,zero,r2
    9680:	1007883a 	mov	r3,r2
    9684:	d0a70e03 	ldbu	r2,-25544(gp)
    9688:	1884703a 	and	r2,r3,r2
    968c:	d0a70e05 	stb	r2,-25544(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    9690:	e0bff817 	ldw	r2,-32(fp)
    9694:	10800717 	ldw	r2,28(r2)
    9698:	10000526 	beq	r2,zero,96b0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    969c:	e0bff817 	ldw	r2,-32(fp)
    96a0:	10800717 	ldw	r2,28(r2)
    96a4:	100b883a 	mov	r5,r2
    96a8:	e13ff817 	ldw	r4,-32(fp)
    96ac:	00043fc0 	call	43fc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    96b0:	e0bff817 	ldw	r2,-32(fp)
    96b4:	10800817 	ldw	r2,32(r2)
    96b8:	10000526 	beq	r2,zero,96d0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    96bc:	e0bff817 	ldw	r2,-32(fp)
    96c0:	10800817 	ldw	r2,32(r2)
    96c4:	100b883a 	mov	r5,r2
    96c8:	e13ff817 	ldw	r4,-32(fp)
    96cc:	00044b40 	call	44b4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    96d0:	e0bff817 	ldw	r2,-32(fp)
    96d4:	10800a17 	ldw	r2,40(r2)
    96d8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    96dc:	e0bffb17 	ldw	r2,-20(fp)
    96e0:	10000226 	beq	r2,zero,96ec <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    96e4:	e13ffb17 	ldw	r4,-20(fp)
    96e8:	00069240 	call	6924 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    96ec:	e0bff817 	ldw	r2,-32(fp)
    96f0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    96f4:	e0bff817 	ldw	r2,-32(fp)
    96f8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    96fc:	e0bff817 	ldw	r2,-32(fp)
    9700:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    9704:	d0a70203 	ldbu	r2,-25592(gp)
    9708:	10803fcc 	andi	r2,r2,255
    970c:	10803fe0 	cmpeqi	r2,r2,255
    9710:	1000031e 	bne	r2,zero,9720 <OSTaskDel+0x214>
        OSLockNesting++;
    9714:	d0a70203 	ldbu	r2,-25592(gp)
    9718:	10800044 	addi	r2,r2,1
    971c:	d0a70205 	stb	r2,-25592(gp)
    9720:	e0bff617 	ldw	r2,-40(fp)
    9724:	e0bffd15 	stw	r2,-12(fp)
    9728:	e0bffd17 	ldw	r2,-12(fp)
    972c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    9730:	0003fe40 	call	3fe4 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9734:	0005303a 	rdctl	r2,status
    9738:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    973c:	e0fffa17 	ldw	r3,-24(fp)
    9740:	00bfff84 	movi	r2,-2
    9744:	1884703a 	and	r2,r3,r2
    9748:	1001703a 	wrctl	status,r2
  
  return context;
    974c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    9750:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    9754:	d0a70203 	ldbu	r2,-25592(gp)
    9758:	10803fcc 	andi	r2,r2,255
    975c:	10000326 	beq	r2,zero,976c <OSTaskDel+0x260>
        OSLockNesting--;
    9760:	d0a70203 	ldbu	r2,-25592(gp)
    9764:	10bfffc4 	addi	r2,r2,-1
    9768:	d0a70205 	stb	r2,-25592(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    976c:	e13ff817 	ldw	r4,-32(fp)
    9770:	000c5a80 	call	c5a8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    9774:	d0a70a43 	ldbu	r2,-25559(gp)
    9778:	10bfffc4 	addi	r2,r2,-1
    977c:	d0a70a45 	stb	r2,-25559(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    9780:	e0ffff03 	ldbu	r3,-4(fp)
    9784:	00800074 	movhi	r2,1
    9788:	109ecd04 	addi	r2,r2,31540
    978c:	18c7883a 	add	r3,r3,r3
    9790:	18c7883a 	add	r3,r3,r3
    9794:	10c5883a 	add	r2,r2,r3
    9798:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    979c:	e0bff817 	ldw	r2,-32(fp)
    97a0:	10800617 	ldw	r2,24(r2)
    97a4:	1000071e 	bne	r2,zero,97c4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    97a8:	e0bff817 	ldw	r2,-32(fp)
    97ac:	10800517 	ldw	r2,20(r2)
    97b0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    97b4:	e0bff817 	ldw	r2,-32(fp)
    97b8:	10800517 	ldw	r2,20(r2)
    97bc:	d0a70515 	stw	r2,-25580(gp)
    97c0:	00000a06 	br	97ec <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    97c4:	e0bff817 	ldw	r2,-32(fp)
    97c8:	10800617 	ldw	r2,24(r2)
    97cc:	e0fff817 	ldw	r3,-32(fp)
    97d0:	18c00517 	ldw	r3,20(r3)
    97d4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    97d8:	e0bff817 	ldw	r2,-32(fp)
    97dc:	10800517 	ldw	r2,20(r2)
    97e0:	e0fff817 	ldw	r3,-32(fp)
    97e4:	18c00617 	ldw	r3,24(r3)
    97e8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    97ec:	d0e70917 	ldw	r3,-25564(gp)
    97f0:	e0bff817 	ldw	r2,-32(fp)
    97f4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    97f8:	e0bff817 	ldw	r2,-32(fp)
    97fc:	d0a70915 	stw	r2,-25564(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    9800:	e0bff817 	ldw	r2,-32(fp)
    9804:	00c00fc4 	movi	r3,63
    9808:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    980c:	e0bff817 	ldw	r2,-32(fp)
    9810:	10001345 	stb	zero,77(r2)
    9814:	e0bff617 	ldw	r2,-40(fp)
    9818:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    981c:	e0bffc17 	ldw	r2,-16(fp)
    9820:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9824:	d0a70243 	ldbu	r2,-25591(gp)
    9828:	10803fcc 	andi	r2,r2,255
    982c:	10800058 	cmpnei	r2,r2,1
    9830:	1000011e 	bne	r2,zero,9838 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    9834:	0004a500 	call	4a50 <OS_Sched>
    }
    return (OS_ERR_NONE);
    9838:	0005883a 	mov	r2,zero
}
    983c:	e037883a 	mov	sp,fp
    9840:	dfc00117 	ldw	ra,4(sp)
    9844:	df000017 	ldw	fp,0(sp)
    9848:	dec00204 	addi	sp,sp,8
    984c:	f800283a 	ret

00009850 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    9850:	defff504 	addi	sp,sp,-44
    9854:	df000a15 	stw	fp,40(sp)
    9858:	df000a04 	addi	fp,sp,40
    985c:	2005883a 	mov	r2,r4
    9860:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9864:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    9868:	e0bfff03 	ldbu	r2,-4(fp)
    986c:	10800518 	cmpnei	r2,r2,20
    9870:	1000021e 	bne	r2,zero,987c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    9874:	00800f84 	movi	r2,62
    9878:	00004506 	br	9990 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    987c:	e0bfff03 	ldbu	r2,-4(fp)
    9880:	10800530 	cmpltui	r2,r2,20
    9884:	1000051e 	bne	r2,zero,989c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    9888:	e0bfff03 	ldbu	r2,-4(fp)
    988c:	10803fe0 	cmpeqi	r2,r2,255
    9890:	1000021e 	bne	r2,zero,989c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    9894:	00800a84 	movi	r2,42
    9898:	00003d06 	br	9990 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    989c:	e0bfff03 	ldbu	r2,-4(fp)
    98a0:	10803fd8 	cmpnei	r2,r2,255
    98a4:	1000111e 	bne	r2,zero,98ec <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98a8:	0005303a 	rdctl	r2,status
    98ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98b0:	e0fff917 	ldw	r3,-28(fp)
    98b4:	00bfff84 	movi	r2,-2
    98b8:	1884703a 	and	r2,r3,r2
    98bc:	1001703a 	wrctl	status,r2
  
  return context;
    98c0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    98c4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    98c8:	d0a71117 	ldw	r2,-25532(gp)
    98cc:	10800dc3 	ldbu	r2,55(r2)
    98d0:	e0bff805 	stb	r2,-32(fp)
    98d4:	e0bff617 	ldw	r2,-40(fp)
    98d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98dc:	e0bffe17 	ldw	r2,-8(fp)
    98e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    98e4:	e0bff803 	ldbu	r2,-32(fp)
    98e8:	00002906 	br	9990 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98ec:	0005303a 	rdctl	r2,status
    98f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98f4:	e0fff717 	ldw	r3,-36(fp)
    98f8:	00bfff84 	movi	r2,-2
    98fc:	1884703a 	and	r2,r3,r2
    9900:	1001703a 	wrctl	status,r2
  
  return context;
    9904:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    9908:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    990c:	e0ffff03 	ldbu	r3,-4(fp)
    9910:	00800074 	movhi	r2,1
    9914:	109ecd04 	addi	r2,r2,31540
    9918:	18c7883a 	add	r3,r3,r3
    991c:	18c7883a 	add	r3,r3,r3
    9920:	10c5883a 	add	r2,r2,r3
    9924:	10800017 	ldw	r2,0(r2)
    9928:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    992c:	e0bffb17 	ldw	r2,-20(fp)
    9930:	1000061e 	bne	r2,zero,994c <OSTaskDelReq+0xfc>
    9934:	e0bff617 	ldw	r2,-40(fp)
    9938:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    993c:	e0bffa17 	ldw	r2,-24(fp)
    9940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    9944:	008010c4 	movi	r2,67
    9948:	00001106 	br	9990 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    994c:	e0bffb17 	ldw	r2,-20(fp)
    9950:	10800058 	cmpnei	r2,r2,1
    9954:	1000061e 	bne	r2,zero,9970 <OSTaskDelReq+0x120>
    9958:	e0bff617 	ldw	r2,-40(fp)
    995c:	e0bffc15 	stw	r2,-16(fp)
    9960:	e0bffc17 	ldw	r2,-16(fp)
    9964:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    9968:	00800f44 	movi	r2,61
    996c:	00000806 	br	9990 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    9970:	e0bffb17 	ldw	r2,-20(fp)
    9974:	00c00fc4 	movi	r3,63
    9978:	10c00dc5 	stb	r3,55(r2)
    997c:	e0bff617 	ldw	r2,-40(fp)
    9980:	e0bffd15 	stw	r2,-12(fp)
    9984:	e0bffd17 	ldw	r2,-12(fp)
    9988:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    998c:	0005883a 	mov	r2,zero
}
    9990:	e037883a 	mov	sp,fp
    9994:	df000017 	ldw	fp,0(sp)
    9998:	dec00104 	addi	sp,sp,4
    999c:	f800283a 	ret

000099a0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    99a0:	defff404 	addi	sp,sp,-48
    99a4:	dfc00b15 	stw	ra,44(sp)
    99a8:	df000a15 	stw	fp,40(sp)
    99ac:	df000a04 	addi	fp,sp,40
    99b0:	2005883a 	mov	r2,r4
    99b4:	e17ffe15 	stw	r5,-8(fp)
    99b8:	e1bfff15 	stw	r6,-4(fp)
    99bc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    99c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    99c4:	e0bfff17 	ldw	r2,-4(fp)
    99c8:	1000021e 	bne	r2,zero,99d4 <OSTaskNameGet+0x34>
        return (0);
    99cc:	0005883a 	mov	r2,zero
    99d0:	00005406 	br	9b24 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    99d4:	e0bffd03 	ldbu	r2,-12(fp)
    99d8:	10800570 	cmpltui	r2,r2,21
    99dc:	1000081e 	bne	r2,zero,9a00 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    99e0:	e0bffd03 	ldbu	r2,-12(fp)
    99e4:	10803fe0 	cmpeqi	r2,r2,255
    99e8:	1000051e 	bne	r2,zero,9a00 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    99ec:	e0bfff17 	ldw	r2,-4(fp)
    99f0:	00c00a84 	movi	r3,42
    99f4:	10c00005 	stb	r3,0(r2)
            return (0);
    99f8:	0005883a 	mov	r2,zero
    99fc:	00004906 	br	9b24 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    9a00:	e0bffe17 	ldw	r2,-8(fp)
    9a04:	1000051e 	bne	r2,zero,9a1c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    9a08:	e0bfff17 	ldw	r2,-4(fp)
    9a0c:	00c00304 	movi	r3,12
    9a10:	10c00005 	stb	r3,0(r2)
        return (0);
    9a14:	0005883a 	mov	r2,zero
    9a18:	00004206 	br	9b24 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    9a1c:	d0a71003 	ldbu	r2,-25536(gp)
    9a20:	10803fcc 	andi	r2,r2,255
    9a24:	10000526 	beq	r2,zero,9a3c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    9a28:	e0bfff17 	ldw	r2,-4(fp)
    9a2c:	00c00444 	movi	r3,17
    9a30:	10c00005 	stb	r3,0(r2)
        return (0);
    9a34:	0005883a 	mov	r2,zero
    9a38:	00003a06 	br	9b24 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a3c:	0005303a 	rdctl	r2,status
    9a40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a44:	e0fffc17 	ldw	r3,-16(fp)
    9a48:	00bfff84 	movi	r2,-2
    9a4c:	1884703a 	and	r2,r3,r2
    9a50:	1001703a 	wrctl	status,r2
  
  return context;
    9a54:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9a58:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    9a5c:	e0bffd03 	ldbu	r2,-12(fp)
    9a60:	10803fd8 	cmpnei	r2,r2,255
    9a64:	1000031e 	bne	r2,zero,9a74 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    9a68:	d0a71117 	ldw	r2,-25532(gp)
    9a6c:	10800c83 	ldbu	r2,50(r2)
    9a70:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9a74:	e0fffd03 	ldbu	r3,-12(fp)
    9a78:	00800074 	movhi	r2,1
    9a7c:	109ecd04 	addi	r2,r2,31540
    9a80:	18c7883a 	add	r3,r3,r3
    9a84:	18c7883a 	add	r3,r3,r3
    9a88:	10c5883a 	add	r2,r2,r3
    9a8c:	10800017 	ldw	r2,0(r2)
    9a90:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    9a94:	e0bff817 	ldw	r2,-32(fp)
    9a98:	1000091e 	bne	r2,zero,9ac0 <OSTaskNameGet+0x120>
    9a9c:	e0bff617 	ldw	r2,-40(fp)
    9aa0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9aa4:	e0bff717 	ldw	r2,-36(fp)
    9aa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9aac:	e0bfff17 	ldw	r2,-4(fp)
    9ab0:	00c010c4 	movi	r3,67
    9ab4:	10c00005 	stb	r3,0(r2)
        return (0);
    9ab8:	0005883a 	mov	r2,zero
    9abc:	00001906 	br	9b24 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    9ac0:	e0bff817 	ldw	r2,-32(fp)
    9ac4:	10800058 	cmpnei	r2,r2,1
    9ac8:	1000091e 	bne	r2,zero,9af0 <OSTaskNameGet+0x150>
    9acc:	e0bff617 	ldw	r2,-40(fp)
    9ad0:	e0bff915 	stw	r2,-28(fp)
    9ad4:	e0bff917 	ldw	r2,-28(fp)
    9ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9adc:	e0bfff17 	ldw	r2,-4(fp)
    9ae0:	00c010c4 	movi	r3,67
    9ae4:	10c00005 	stb	r3,0(r2)
        return (0);
    9ae8:	0005883a 	mov	r2,zero
    9aec:	00000d06 	br	9b24 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    9af0:	e0bff817 	ldw	r2,-32(fp)
    9af4:	10801304 	addi	r2,r2,76
    9af8:	100b883a 	mov	r5,r2
    9afc:	e13ffe17 	ldw	r4,-8(fp)
    9b00:	0004b940 	call	4b94 <OS_StrCopy>
    9b04:	e0bffb05 	stb	r2,-20(fp)
    9b08:	e0bff617 	ldw	r2,-40(fp)
    9b0c:	e0bffa15 	stw	r2,-24(fp)
    9b10:	e0bffa17 	ldw	r2,-24(fp)
    9b14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9b18:	e0bfff17 	ldw	r2,-4(fp)
    9b1c:	10000005 	stb	zero,0(r2)
    return (len);
    9b20:	e0bffb03 	ldbu	r2,-20(fp)
}
    9b24:	e037883a 	mov	sp,fp
    9b28:	dfc00117 	ldw	ra,4(sp)
    9b2c:	df000017 	ldw	fp,0(sp)
    9b30:	dec00204 	addi	sp,sp,8
    9b34:	f800283a 	ret

00009b38 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    9b38:	defff304 	addi	sp,sp,-52
    9b3c:	dfc00c15 	stw	ra,48(sp)
    9b40:	df000b15 	stw	fp,44(sp)
    9b44:	df000b04 	addi	fp,sp,44
    9b48:	2005883a 	mov	r2,r4
    9b4c:	e17ffe15 	stw	r5,-8(fp)
    9b50:	e1bfff15 	stw	r6,-4(fp)
    9b54:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9b58:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    9b5c:	e0bfff17 	ldw	r2,-4(fp)
    9b60:	10005c26 	beq	r2,zero,9cd4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    9b64:	e0bffd03 	ldbu	r2,-12(fp)
    9b68:	10800570 	cmpltui	r2,r2,21
    9b6c:	1000071e 	bne	r2,zero,9b8c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    9b70:	e0bffd03 	ldbu	r2,-12(fp)
    9b74:	10803fe0 	cmpeqi	r2,r2,255
    9b78:	1000041e 	bne	r2,zero,9b8c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    9b7c:	e0bfff17 	ldw	r2,-4(fp)
    9b80:	00c00a84 	movi	r3,42
    9b84:	10c00005 	stb	r3,0(r2)
            return;
    9b88:	00005306 	br	9cd8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    9b8c:	e0bffe17 	ldw	r2,-8(fp)
    9b90:	1000041e 	bne	r2,zero,9ba4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    9b94:	e0bfff17 	ldw	r2,-4(fp)
    9b98:	00c00304 	movi	r3,12
    9b9c:	10c00005 	stb	r3,0(r2)
        return;
    9ba0:	00004d06 	br	9cd8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    9ba4:	d0a71003 	ldbu	r2,-25536(gp)
    9ba8:	10803fcc 	andi	r2,r2,255
    9bac:	10000426 	beq	r2,zero,9bc0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    9bb0:	e0bfff17 	ldw	r2,-4(fp)
    9bb4:	00c00484 	movi	r3,18
    9bb8:	10c00005 	stb	r3,0(r2)
        return;
    9bbc:	00004606 	br	9cd8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9bc0:	0005303a 	rdctl	r2,status
    9bc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9bc8:	e0fffc17 	ldw	r3,-16(fp)
    9bcc:	00bfff84 	movi	r2,-2
    9bd0:	1884703a 	and	r2,r3,r2
    9bd4:	1001703a 	wrctl	status,r2
  
  return context;
    9bd8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9bdc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    9be0:	e0bffd03 	ldbu	r2,-12(fp)
    9be4:	10803fd8 	cmpnei	r2,r2,255
    9be8:	1000031e 	bne	r2,zero,9bf8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    9bec:	d0a71117 	ldw	r2,-25532(gp)
    9bf0:	10800c83 	ldbu	r2,50(r2)
    9bf4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9bf8:	e0fffd03 	ldbu	r3,-12(fp)
    9bfc:	00800074 	movhi	r2,1
    9c00:	109ecd04 	addi	r2,r2,31540
    9c04:	18c7883a 	add	r3,r3,r3
    9c08:	18c7883a 	add	r3,r3,r3
    9c0c:	10c5883a 	add	r2,r2,r3
    9c10:	10800017 	ldw	r2,0(r2)
    9c14:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    9c18:	e0bff717 	ldw	r2,-36(fp)
    9c1c:	1000081e 	bne	r2,zero,9c40 <OSTaskNameSet+0x108>
    9c20:	e0bff517 	ldw	r2,-44(fp)
    9c24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c28:	e0bff617 	ldw	r2,-40(fp)
    9c2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9c30:	e0bfff17 	ldw	r2,-4(fp)
    9c34:	00c010c4 	movi	r3,67
    9c38:	10c00005 	stb	r3,0(r2)
        return;
    9c3c:	00002606 	br	9cd8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    9c40:	e0bff717 	ldw	r2,-36(fp)
    9c44:	10800058 	cmpnei	r2,r2,1
    9c48:	1000081e 	bne	r2,zero,9c6c <OSTaskNameSet+0x134>
    9c4c:	e0bff517 	ldw	r2,-44(fp)
    9c50:	e0bff815 	stw	r2,-32(fp)
    9c54:	e0bff817 	ldw	r2,-32(fp)
    9c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9c5c:	e0bfff17 	ldw	r2,-4(fp)
    9c60:	00c010c4 	movi	r3,67
    9c64:	10c00005 	stb	r3,0(r2)
        return;
    9c68:	00001b06 	br	9cd8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    9c6c:	e13ffe17 	ldw	r4,-8(fp)
    9c70:	0004c080 	call	4c08 <OS_StrLen>
    9c74:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    9c78:	e0bffa03 	ldbu	r2,-24(fp)
    9c7c:	10800830 	cmpltui	r2,r2,32
    9c80:	1000081e 	bne	r2,zero,9ca4 <OSTaskNameSet+0x16c>
    9c84:	e0bff517 	ldw	r2,-44(fp)
    9c88:	e0bff915 	stw	r2,-28(fp)
    9c8c:	e0bff917 	ldw	r2,-28(fp)
    9c90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    9c94:	e0bfff17 	ldw	r2,-4(fp)
    9c98:	00c01044 	movi	r3,65
    9c9c:	10c00005 	stb	r3,0(r2)
        return;
    9ca0:	00000d06 	br	9cd8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    9ca4:	e0bff717 	ldw	r2,-36(fp)
    9ca8:	10801304 	addi	r2,r2,76
    9cac:	e17ffe17 	ldw	r5,-8(fp)
    9cb0:	1009883a 	mov	r4,r2
    9cb4:	0004b940 	call	4b94 <OS_StrCopy>
    9cb8:	e0bff517 	ldw	r2,-44(fp)
    9cbc:	e0bffb15 	stw	r2,-20(fp)
    9cc0:	e0bffb17 	ldw	r2,-20(fp)
    9cc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9cc8:	e0bfff17 	ldw	r2,-4(fp)
    9ccc:	10000005 	stb	zero,0(r2)
    9cd0:	00000106 	br	9cd8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    9cd4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    9cd8:	e037883a 	mov	sp,fp
    9cdc:	dfc00117 	ldw	ra,4(sp)
    9ce0:	df000017 	ldw	fp,0(sp)
    9ce4:	dec00204 	addi	sp,sp,8
    9ce8:	f800283a 	ret

00009cec <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    9cec:	defff404 	addi	sp,sp,-48
    9cf0:	dfc00b15 	stw	ra,44(sp)
    9cf4:	df000a15 	stw	fp,40(sp)
    9cf8:	df000a04 	addi	fp,sp,40
    9cfc:	2005883a 	mov	r2,r4
    9d00:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9d04:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    9d08:	e0bfff03 	ldbu	r2,-4(fp)
    9d0c:	10800530 	cmpltui	r2,r2,20
    9d10:	1000021e 	bne	r2,zero,9d1c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    9d14:	00800a84 	movi	r2,42
    9d18:	00006406 	br	9eac <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d1c:	0005303a 	rdctl	r2,status
    9d20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d24:	e0fffe17 	ldw	r3,-8(fp)
    9d28:	00bfff84 	movi	r2,-2
    9d2c:	1884703a 	and	r2,r3,r2
    9d30:	1001703a 	wrctl	status,r2
  
  return context;
    9d34:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9d38:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    9d3c:	e0ffff03 	ldbu	r3,-4(fp)
    9d40:	00800074 	movhi	r2,1
    9d44:	109ecd04 	addi	r2,r2,31540
    9d48:	18c7883a 	add	r3,r3,r3
    9d4c:	18c7883a 	add	r3,r3,r3
    9d50:	10c5883a 	add	r2,r2,r3
    9d54:	10800017 	ldw	r2,0(r2)
    9d58:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    9d5c:	e0bff817 	ldw	r2,-32(fp)
    9d60:	1000061e 	bne	r2,zero,9d7c <OSTaskResume+0x90>
    9d64:	e0bff617 	ldw	r2,-40(fp)
    9d68:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d6c:	e0bff717 	ldw	r2,-36(fp)
    9d70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    9d74:	00801184 	movi	r2,70
    9d78:	00004c06 	br	9eac <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    9d7c:	e0bff817 	ldw	r2,-32(fp)
    9d80:	10800058 	cmpnei	r2,r2,1
    9d84:	1000061e 	bne	r2,zero,9da0 <OSTaskResume+0xb4>
    9d88:	e0bff617 	ldw	r2,-40(fp)
    9d8c:	e0bff915 	stw	r2,-28(fp)
    9d90:	e0bff917 	ldw	r2,-28(fp)
    9d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9d98:	008010c4 	movi	r2,67
    9d9c:	00004306 	br	9eac <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    9da0:	e0bff817 	ldw	r2,-32(fp)
    9da4:	10800c03 	ldbu	r2,48(r2)
    9da8:	10803fcc 	andi	r2,r2,255
    9dac:	1080020c 	andi	r2,r2,8
    9db0:	10003926 	beq	r2,zero,9e98 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    9db4:	e0bff817 	ldw	r2,-32(fp)
    9db8:	10c00c03 	ldbu	r3,48(r2)
    9dbc:	00bffdc4 	movi	r2,-9
    9dc0:	1884703a 	and	r2,r3,r2
    9dc4:	1007883a 	mov	r3,r2
    9dc8:	e0bff817 	ldw	r2,-32(fp)
    9dcc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    9dd0:	e0bff817 	ldw	r2,-32(fp)
    9dd4:	10800c03 	ldbu	r2,48(r2)
    9dd8:	10803fcc 	andi	r2,r2,255
    9ddc:	1000281e 	bne	r2,zero,9e80 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    9de0:	e0bff817 	ldw	r2,-32(fp)
    9de4:	10800b8b 	ldhu	r2,46(r2)
    9de8:	10bfffcc 	andi	r2,r2,65535
    9dec:	10001f1e 	bne	r2,zero,9e6c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    9df0:	e0bff817 	ldw	r2,-32(fp)
    9df4:	10c00d83 	ldbu	r3,54(r2)
    9df8:	d0a70e03 	ldbu	r2,-25544(gp)
    9dfc:	1884b03a 	or	r2,r3,r2
    9e00:	d0a70e05 	stb	r2,-25544(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9e04:	e0bff817 	ldw	r2,-32(fp)
    9e08:	10800d03 	ldbu	r2,52(r2)
    9e0c:	10c03fcc 	andi	r3,r2,255
    9e10:	e0bff817 	ldw	r2,-32(fp)
    9e14:	10800d03 	ldbu	r2,52(r2)
    9e18:	11003fcc 	andi	r4,r2,255
    9e1c:	d0a70e44 	addi	r2,gp,-25543
    9e20:	2085883a 	add	r2,r4,r2
    9e24:	11000003 	ldbu	r4,0(r2)
    9e28:	e0bff817 	ldw	r2,-32(fp)
    9e2c:	10800d43 	ldbu	r2,53(r2)
    9e30:	2084b03a 	or	r2,r4,r2
    9e34:	1009883a 	mov	r4,r2
    9e38:	d0a70e44 	addi	r2,gp,-25543
    9e3c:	1885883a 	add	r2,r3,r2
    9e40:	11000005 	stb	r4,0(r2)
    9e44:	e0bff617 	ldw	r2,-40(fp)
    9e48:	e0bffa15 	stw	r2,-24(fp)
    9e4c:	e0bffa17 	ldw	r2,-24(fp)
    9e50:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    9e54:	d0a70243 	ldbu	r2,-25591(gp)
    9e58:	10803fcc 	andi	r2,r2,255
    9e5c:	10800058 	cmpnei	r2,r2,1
    9e60:	10000b1e 	bne	r2,zero,9e90 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    9e64:	0004a500 	call	4a50 <OS_Sched>
    9e68:	00000906 	br	9e90 <OSTaskResume+0x1a4>
    9e6c:	e0bff617 	ldw	r2,-40(fp)
    9e70:	e0bffb15 	stw	r2,-20(fp)
    9e74:	e0bffb17 	ldw	r2,-20(fp)
    9e78:	1001703a 	wrctl	status,r2
    9e7c:	00000406 	br	9e90 <OSTaskResume+0x1a4>
    9e80:	e0bff617 	ldw	r2,-40(fp)
    9e84:	e0bffc15 	stw	r2,-16(fp)
    9e88:	e0bffc17 	ldw	r2,-16(fp)
    9e8c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    9e90:	0005883a 	mov	r2,zero
    9e94:	00000506 	br	9eac <OSTaskResume+0x1c0>
    9e98:	e0bff617 	ldw	r2,-40(fp)
    9e9c:	e0bffd15 	stw	r2,-12(fp)
    9ea0:	e0bffd17 	ldw	r2,-12(fp)
    9ea4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    9ea8:	00801104 	movi	r2,68
}
    9eac:	e037883a 	mov	sp,fp
    9eb0:	dfc00117 	ldw	ra,4(sp)
    9eb4:	df000017 	ldw	fp,0(sp)
    9eb8:	dec00204 	addi	sp,sp,8
    9ebc:	f800283a 	ret

00009ec0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    9ec0:	defff304 	addi	sp,sp,-52
    9ec4:	df000c15 	stw	fp,48(sp)
    9ec8:	df000c04 	addi	fp,sp,48
    9ecc:	2005883a 	mov	r2,r4
    9ed0:	e17fff15 	stw	r5,-4(fp)
    9ed4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9ed8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    9edc:	e0bffe03 	ldbu	r2,-8(fp)
    9ee0:	10800570 	cmpltui	r2,r2,21
    9ee4:	1000051e 	bne	r2,zero,9efc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    9ee8:	e0bffe03 	ldbu	r2,-8(fp)
    9eec:	10803fe0 	cmpeqi	r2,r2,255
    9ef0:	1000021e 	bne	r2,zero,9efc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    9ef4:	00800a84 	movi	r2,42
    9ef8:	00005d06 	br	a070 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    9efc:	e0bfff17 	ldw	r2,-4(fp)
    9f00:	1000021e 	bne	r2,zero,9f0c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    9f04:	00800244 	movi	r2,9
    9f08:	00005906 	br	a070 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    9f0c:	e0bfff17 	ldw	r2,-4(fp)
    9f10:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    9f14:	e0bfff17 	ldw	r2,-4(fp)
    9f18:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f1c:	0005303a 	rdctl	r2,status
    9f20:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f24:	e0fffd17 	ldw	r3,-12(fp)
    9f28:	00bfff84 	movi	r2,-2
    9f2c:	1884703a 	and	r2,r3,r2
    9f30:	1001703a 	wrctl	status,r2
  
  return context;
    9f34:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    9f38:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    9f3c:	e0bffe03 	ldbu	r2,-8(fp)
    9f40:	10803fd8 	cmpnei	r2,r2,255
    9f44:	1000031e 	bne	r2,zero,9f54 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    9f48:	d0a71117 	ldw	r2,-25532(gp)
    9f4c:	10800c83 	ldbu	r2,50(r2)
    9f50:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9f54:	e0fffe03 	ldbu	r3,-8(fp)
    9f58:	00800074 	movhi	r2,1
    9f5c:	109ecd04 	addi	r2,r2,31540
    9f60:	18c7883a 	add	r3,r3,r3
    9f64:	18c7883a 	add	r3,r3,r3
    9f68:	10c5883a 	add	r2,r2,r3
    9f6c:	10800017 	ldw	r2,0(r2)
    9f70:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    9f74:	e0bff817 	ldw	r2,-32(fp)
    9f78:	1000061e 	bne	r2,zero,9f94 <OSTaskStkChk+0xd4>
    9f7c:	e0bff617 	ldw	r2,-40(fp)
    9f80:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f84:	e0bff717 	ldw	r2,-36(fp)
    9f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9f8c:	008010c4 	movi	r2,67
    9f90:	00003706 	br	a070 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9f94:	e0bff817 	ldw	r2,-32(fp)
    9f98:	10800058 	cmpnei	r2,r2,1
    9f9c:	1000061e 	bne	r2,zero,9fb8 <OSTaskStkChk+0xf8>
    9fa0:	e0bff617 	ldw	r2,-40(fp)
    9fa4:	e0bff915 	stw	r2,-28(fp)
    9fa8:	e0bff917 	ldw	r2,-28(fp)
    9fac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9fb0:	008010c4 	movi	r2,67
    9fb4:	00002e06 	br	a070 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    9fb8:	e0bff817 	ldw	r2,-32(fp)
    9fbc:	1080040b 	ldhu	r2,16(r2)
    9fc0:	10bfffcc 	andi	r2,r2,65535
    9fc4:	1080004c 	andi	r2,r2,1
    9fc8:	1000061e 	bne	r2,zero,9fe4 <OSTaskStkChk+0x124>
    9fcc:	e0bff617 	ldw	r2,-40(fp)
    9fd0:	e0bffa15 	stw	r2,-24(fp)
    9fd4:	e0bffa17 	ldw	r2,-24(fp)
    9fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    9fdc:	00801144 	movi	r2,69
    9fe0:	00002306 	br	a070 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    9fe4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    9fe8:	e0bff817 	ldw	r2,-32(fp)
    9fec:	10800317 	ldw	r2,12(r2)
    9ff0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    9ff4:	e0bff817 	ldw	r2,-32(fp)
    9ff8:	10800217 	ldw	r2,8(r2)
    9ffc:	e0bff415 	stw	r2,-48(fp)
    a000:	e0bff617 	ldw	r2,-40(fp)
    a004:	e0bffb15 	stw	r2,-20(fp)
    a008:	e0bffb17 	ldw	r2,-20(fp)
    a00c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    a010:	00000306 	br	a020 <OSTaskStkChk+0x160>
        nfree++;
    a014:	e0bff517 	ldw	r2,-44(fp)
    a018:	10800044 	addi	r2,r2,1
    a01c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    a020:	e0bff417 	ldw	r2,-48(fp)
    a024:	10c00104 	addi	r3,r2,4
    a028:	e0fff415 	stw	r3,-48(fp)
    a02c:	10800017 	ldw	r2,0(r2)
    a030:	103ff826 	beq	r2,zero,a014 <__alt_data_end+0xffff1974>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    a034:	e0bff517 	ldw	r2,-44(fp)
    a038:	1085883a 	add	r2,r2,r2
    a03c:	1085883a 	add	r2,r2,r2
    a040:	1007883a 	mov	r3,r2
    a044:	e0bfff17 	ldw	r2,-4(fp)
    a048:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    a04c:	e0fffc17 	ldw	r3,-16(fp)
    a050:	e0bff517 	ldw	r2,-44(fp)
    a054:	1885c83a 	sub	r2,r3,r2
    a058:	1085883a 	add	r2,r2,r2
    a05c:	1085883a 	add	r2,r2,r2
    a060:	1007883a 	mov	r3,r2
    a064:	e0bfff17 	ldw	r2,-4(fp)
    a068:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    a06c:	0005883a 	mov	r2,zero
}
    a070:	e037883a 	mov	sp,fp
    a074:	df000017 	ldw	fp,0(sp)
    a078:	dec00104 	addi	sp,sp,4
    a07c:	f800283a 	ret

0000a080 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    a080:	defff504 	addi	sp,sp,-44
    a084:	dfc00a15 	stw	ra,40(sp)
    a088:	df000915 	stw	fp,36(sp)
    a08c:	df000904 	addi	fp,sp,36
    a090:	2005883a 	mov	r2,r4
    a094:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a098:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    a09c:	e0bfff03 	ldbu	r2,-4(fp)
    a0a0:	10800518 	cmpnei	r2,r2,20
    a0a4:	1000021e 	bne	r2,zero,a0b0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    a0a8:	008011c4 	movi	r2,71
    a0ac:	00006806 	br	a250 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a0b0:	e0bfff03 	ldbu	r2,-4(fp)
    a0b4:	10800530 	cmpltui	r2,r2,20
    a0b8:	1000051e 	bne	r2,zero,a0d0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    a0bc:	e0bfff03 	ldbu	r2,-4(fp)
    a0c0:	10803fe0 	cmpeqi	r2,r2,255
    a0c4:	1000021e 	bne	r2,zero,a0d0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    a0c8:	00800a84 	movi	r2,42
    a0cc:	00006006 	br	a250 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0d0:	0005303a 	rdctl	r2,status
    a0d4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0d8:	e0fffe17 	ldw	r3,-8(fp)
    a0dc:	00bfff84 	movi	r2,-2
    a0e0:	1884703a 	and	r2,r3,r2
    a0e4:	1001703a 	wrctl	status,r2
  
  return context;
    a0e8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    a0ec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    a0f0:	e0bfff03 	ldbu	r2,-4(fp)
    a0f4:	10803fd8 	cmpnei	r2,r2,255
    a0f8:	1000061e 	bne	r2,zero,a114 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    a0fc:	d0a71117 	ldw	r2,-25532(gp)
    a100:	10800c83 	ldbu	r2,50(r2)
    a104:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    a108:	00800044 	movi	r2,1
    a10c:	e0bff705 	stb	r2,-36(fp)
    a110:	00000906 	br	a138 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    a114:	d0a71117 	ldw	r2,-25532(gp)
    a118:	10800c83 	ldbu	r2,50(r2)
    a11c:	10c03fcc 	andi	r3,r2,255
    a120:	e0bfff03 	ldbu	r2,-4(fp)
    a124:	1880031e 	bne	r3,r2,a134 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    a128:	00800044 	movi	r2,1
    a12c:	e0bff705 	stb	r2,-36(fp)
    a130:	00000106 	br	a138 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    a134:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a138:	e0ffff03 	ldbu	r3,-4(fp)
    a13c:	00800074 	movhi	r2,1
    a140:	109ecd04 	addi	r2,r2,31540
    a144:	18c7883a 	add	r3,r3,r3
    a148:	18c7883a 	add	r3,r3,r3
    a14c:	10c5883a 	add	r2,r2,r3
    a150:	10800017 	ldw	r2,0(r2)
    a154:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    a158:	e0bffa17 	ldw	r2,-24(fp)
    a15c:	1000061e 	bne	r2,zero,a178 <OSTaskSuspend+0xf8>
    a160:	e0bff817 	ldw	r2,-32(fp)
    a164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a168:	e0bff917 	ldw	r2,-28(fp)
    a16c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    a170:	00801204 	movi	r2,72
    a174:	00003606 	br	a250 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    a178:	e0bffa17 	ldw	r2,-24(fp)
    a17c:	10800058 	cmpnei	r2,r2,1
    a180:	1000061e 	bne	r2,zero,a19c <OSTaskSuspend+0x11c>
    a184:	e0bff817 	ldw	r2,-32(fp)
    a188:	e0bffb15 	stw	r2,-20(fp)
    a18c:	e0bffb17 	ldw	r2,-20(fp)
    a190:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a194:	008010c4 	movi	r2,67
    a198:	00002d06 	br	a250 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    a19c:	e0bffa17 	ldw	r2,-24(fp)
    a1a0:	10800d03 	ldbu	r2,52(r2)
    a1a4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    a1a8:	e0fffd03 	ldbu	r3,-12(fp)
    a1ac:	e13ffd03 	ldbu	r4,-12(fp)
    a1b0:	d0a70e44 	addi	r2,gp,-25543
    a1b4:	2085883a 	add	r2,r4,r2
    a1b8:	10800003 	ldbu	r2,0(r2)
    a1bc:	1009883a 	mov	r4,r2
    a1c0:	e0bffa17 	ldw	r2,-24(fp)
    a1c4:	10800d43 	ldbu	r2,53(r2)
    a1c8:	0084303a 	nor	r2,zero,r2
    a1cc:	2084703a 	and	r2,r4,r2
    a1d0:	1009883a 	mov	r4,r2
    a1d4:	d0a70e44 	addi	r2,gp,-25543
    a1d8:	1885883a 	add	r2,r3,r2
    a1dc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    a1e0:	e0fffd03 	ldbu	r3,-12(fp)
    a1e4:	d0a70e44 	addi	r2,gp,-25543
    a1e8:	1885883a 	add	r2,r3,r2
    a1ec:	10800003 	ldbu	r2,0(r2)
    a1f0:	10803fcc 	andi	r2,r2,255
    a1f4:	1000071e 	bne	r2,zero,a214 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    a1f8:	e0bffa17 	ldw	r2,-24(fp)
    a1fc:	10800d83 	ldbu	r2,54(r2)
    a200:	0084303a 	nor	r2,zero,r2
    a204:	1007883a 	mov	r3,r2
    a208:	d0a70e03 	ldbu	r2,-25544(gp)
    a20c:	1884703a 	and	r2,r3,r2
    a210:	d0a70e05 	stb	r2,-25544(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    a214:	e0bffa17 	ldw	r2,-24(fp)
    a218:	10800c03 	ldbu	r2,48(r2)
    a21c:	10800214 	ori	r2,r2,8
    a220:	1007883a 	mov	r3,r2
    a224:	e0bffa17 	ldw	r2,-24(fp)
    a228:	10c00c05 	stb	r3,48(r2)
    a22c:	e0bff817 	ldw	r2,-32(fp)
    a230:	e0bffc15 	stw	r2,-16(fp)
    a234:	e0bffc17 	ldw	r2,-16(fp)
    a238:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    a23c:	e0bff703 	ldbu	r2,-36(fp)
    a240:	10800058 	cmpnei	r2,r2,1
    a244:	1000011e 	bne	r2,zero,a24c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    a248:	0004a500 	call	4a50 <OS_Sched>
    }
    return (OS_ERR_NONE);
    a24c:	0005883a 	mov	r2,zero
}
    a250:	e037883a 	mov	sp,fp
    a254:	dfc00117 	ldw	ra,4(sp)
    a258:	df000017 	ldw	fp,0(sp)
    a25c:	dec00204 	addi	sp,sp,8
    a260:	f800283a 	ret

0000a264 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    a264:	defff604 	addi	sp,sp,-40
    a268:	dfc00915 	stw	ra,36(sp)
    a26c:	df000815 	stw	fp,32(sp)
    a270:	df000804 	addi	fp,sp,32
    a274:	2005883a 	mov	r2,r4
    a278:	e17fff15 	stw	r5,-4(fp)
    a27c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a280:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    a284:	e0bffe03 	ldbu	r2,-8(fp)
    a288:	10800570 	cmpltui	r2,r2,21
    a28c:	1000051e 	bne	r2,zero,a2a4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    a290:	e0bffe03 	ldbu	r2,-8(fp)
    a294:	10803fe0 	cmpeqi	r2,r2,255
    a298:	1000021e 	bne	r2,zero,a2a4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    a29c:	00800a84 	movi	r2,42
    a2a0:	00003406 	br	a374 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    a2a4:	e0bfff17 	ldw	r2,-4(fp)
    a2a8:	1000021e 	bne	r2,zero,a2b4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    a2ac:	00800244 	movi	r2,9
    a2b0:	00003006 	br	a374 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2b4:	0005303a 	rdctl	r2,status
    a2b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2bc:	e0fffd17 	ldw	r3,-12(fp)
    a2c0:	00bfff84 	movi	r2,-2
    a2c4:	1884703a 	and	r2,r3,r2
    a2c8:	1001703a 	wrctl	status,r2
  
  return context;
    a2cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a2d0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    a2d4:	e0bffe03 	ldbu	r2,-8(fp)
    a2d8:	10803fd8 	cmpnei	r2,r2,255
    a2dc:	1000031e 	bne	r2,zero,a2ec <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    a2e0:	d0a71117 	ldw	r2,-25532(gp)
    a2e4:	10800c83 	ldbu	r2,50(r2)
    a2e8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a2ec:	e0fffe03 	ldbu	r3,-8(fp)
    a2f0:	00800074 	movhi	r2,1
    a2f4:	109ecd04 	addi	r2,r2,31540
    a2f8:	18c7883a 	add	r3,r3,r3
    a2fc:	18c7883a 	add	r3,r3,r3
    a300:	10c5883a 	add	r2,r2,r3
    a304:	10800017 	ldw	r2,0(r2)
    a308:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    a30c:	e0bffa17 	ldw	r2,-24(fp)
    a310:	1000061e 	bne	r2,zero,a32c <OSTaskQuery+0xc8>
    a314:	e0bff817 	ldw	r2,-32(fp)
    a318:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a31c:	e0bff917 	ldw	r2,-28(fp)
    a320:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    a324:	00800a44 	movi	r2,41
    a328:	00001206 	br	a374 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    a32c:	e0bffa17 	ldw	r2,-24(fp)
    a330:	10800058 	cmpnei	r2,r2,1
    a334:	1000061e 	bne	r2,zero,a350 <OSTaskQuery+0xec>
    a338:	e0bff817 	ldw	r2,-32(fp)
    a33c:	e0bffb15 	stw	r2,-20(fp)
    a340:	e0bffb17 	ldw	r2,-20(fp)
    a344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a348:	008010c4 	movi	r2,67
    a34c:	00000906 	br	a374 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    a350:	01801b04 	movi	r6,108
    a354:	e17ffa17 	ldw	r5,-24(fp)
    a358:	e13fff17 	ldw	r4,-4(fp)
    a35c:	00049e80 	call	49e8 <OS_MemCopy>
    a360:	e0bff817 	ldw	r2,-32(fp)
    a364:	e0bffc15 	stw	r2,-16(fp)
    a368:	e0bffc17 	ldw	r2,-16(fp)
    a36c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a370:	0005883a 	mov	r2,zero
}
    a374:	e037883a 	mov	sp,fp
    a378:	dfc00117 	ldw	ra,4(sp)
    a37c:	df000017 	ldw	fp,0(sp)
    a380:	dec00204 	addi	sp,sp,8
    a384:	f800283a 	ret

0000a388 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    a388:	defffc04 	addi	sp,sp,-16
    a38c:	df000315 	stw	fp,12(sp)
    a390:	df000304 	addi	fp,sp,12
    a394:	e13ffd15 	stw	r4,-12(fp)
    a398:	e17ffe15 	stw	r5,-8(fp)
    a39c:	3005883a 	mov	r2,r6
    a3a0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    a3a4:	e0bfff0b 	ldhu	r2,-4(fp)
    a3a8:	1080004c 	andi	r2,r2,1
    a3ac:	10000d26 	beq	r2,zero,a3e4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    a3b0:	e0bfff0b 	ldhu	r2,-4(fp)
    a3b4:	1080008c 	andi	r2,r2,2
    a3b8:	10000a26 	beq	r2,zero,a3e4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    a3bc:	00000706 	br	a3dc <OS_TaskStkClr+0x54>
                size--;
    a3c0:	e0bffe17 	ldw	r2,-8(fp)
    a3c4:	10bfffc4 	addi	r2,r2,-1
    a3c8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    a3cc:	e0bffd17 	ldw	r2,-12(fp)
    a3d0:	10c00104 	addi	r3,r2,4
    a3d4:	e0fffd15 	stw	r3,-12(fp)
    a3d8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    a3dc:	e0bffe17 	ldw	r2,-8(fp)
    a3e0:	103ff71e 	bne	r2,zero,a3c0 <__alt_data_end+0xffff1d20>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    a3e4:	0001883a 	nop
    a3e8:	e037883a 	mov	sp,fp
    a3ec:	df000017 	ldw	fp,0(sp)
    a3f0:	dec00104 	addi	sp,sp,4
    a3f4:	f800283a 	ret

0000a3f8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    a3f8:	defff904 	addi	sp,sp,-28
    a3fc:	dfc00615 	stw	ra,24(sp)
    a400:	df000515 	stw	fp,20(sp)
    a404:	df000504 	addi	fp,sp,20
    a408:	2005883a 	mov	r2,r4
    a40c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a410:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    a414:	d0a71003 	ldbu	r2,-25536(gp)
    a418:	10803fcc 	andi	r2,r2,255
    a41c:	1000311e 	bne	r2,zero,a4e4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    a420:	e0bfff0b 	ldhu	r2,-4(fp)
    a424:	10003026 	beq	r2,zero,a4e8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a428:	0005303a 	rdctl	r2,status
    a42c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a430:	e0fffe17 	ldw	r3,-8(fp)
    a434:	00bfff84 	movi	r2,-2
    a438:	1884703a 	and	r2,r3,r2
    a43c:	1001703a 	wrctl	status,r2
  
  return context;
    a440:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    a444:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    a448:	d0a71117 	ldw	r2,-25532(gp)
    a44c:	10800d03 	ldbu	r2,52(r2)
    a450:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    a454:	e0fffd03 	ldbu	r3,-12(fp)
    a458:	e13ffd03 	ldbu	r4,-12(fp)
    a45c:	d0a70e44 	addi	r2,gp,-25543
    a460:	2085883a 	add	r2,r4,r2
    a464:	10800003 	ldbu	r2,0(r2)
    a468:	1009883a 	mov	r4,r2
    a46c:	d0a71117 	ldw	r2,-25532(gp)
    a470:	10800d43 	ldbu	r2,53(r2)
    a474:	0084303a 	nor	r2,zero,r2
    a478:	2084703a 	and	r2,r4,r2
    a47c:	1009883a 	mov	r4,r2
    a480:	d0a70e44 	addi	r2,gp,-25543
    a484:	1885883a 	add	r2,r3,r2
    a488:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    a48c:	e0fffd03 	ldbu	r3,-12(fp)
    a490:	d0a70e44 	addi	r2,gp,-25543
    a494:	1885883a 	add	r2,r3,r2
    a498:	10800003 	ldbu	r2,0(r2)
    a49c:	10803fcc 	andi	r2,r2,255
    a4a0:	1000071e 	bne	r2,zero,a4c0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    a4a4:	d0a71117 	ldw	r2,-25532(gp)
    a4a8:	10800d83 	ldbu	r2,54(r2)
    a4ac:	0084303a 	nor	r2,zero,r2
    a4b0:	1007883a 	mov	r3,r2
    a4b4:	d0a70e03 	ldbu	r2,-25544(gp)
    a4b8:	1884703a 	and	r2,r3,r2
    a4bc:	d0a70e05 	stb	r2,-25544(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    a4c0:	d0a71117 	ldw	r2,-25532(gp)
    a4c4:	e0ffff0b 	ldhu	r3,-4(fp)
    a4c8:	10c00b8d 	sth	r3,46(r2)
    a4cc:	e0bffb17 	ldw	r2,-20(fp)
    a4d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4d4:	e0bffc17 	ldw	r2,-16(fp)
    a4d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    a4dc:	0004a500 	call	4a50 <OS_Sched>
    a4e0:	00000106 	br	a4e8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    a4e4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    a4e8:	e037883a 	mov	sp,fp
    a4ec:	dfc00117 	ldw	ra,4(sp)
    a4f0:	df000017 	ldw	fp,0(sp)
    a4f4:	dec00204 	addi	sp,sp,8
    a4f8:	f800283a 	ret

0000a4fc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    a4fc:	defff704 	addi	sp,sp,-36
    a500:	dfc00815 	stw	ra,32(sp)
    a504:	df000715 	stw	fp,28(sp)
    a508:	dc000615 	stw	r16,24(sp)
    a50c:	df000704 	addi	fp,sp,28
    a510:	2011883a 	mov	r8,r4
    a514:	2809883a 	mov	r4,r5
    a518:	3007883a 	mov	r3,r6
    a51c:	3805883a 	mov	r2,r7
    a520:	e23ffb05 	stb	r8,-20(fp)
    a524:	e13ffc05 	stb	r4,-16(fp)
    a528:	e0fffd05 	stb	r3,-12(fp)
    a52c:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    a530:	d0a71003 	ldbu	r2,-25536(gp)
    a534:	10803fcc 	andi	r2,r2,255
    a538:	10000226 	beq	r2,zero,a544 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
    a53c:	00801544 	movi	r2,85
    a540:	00004706 	br	a660 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    a544:	e0bffb03 	ldbu	r2,-20(fp)
    a548:	1000081e 	bne	r2,zero,a56c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
    a54c:	e0bffc03 	ldbu	r2,-16(fp)
    a550:	1000061e 	bne	r2,zero,a56c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
    a554:	e0bffd03 	ldbu	r2,-12(fp)
    a558:	1000041e 	bne	r2,zero,a56c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
    a55c:	e0bffe0b 	ldhu	r2,-8(fp)
    a560:	1000021e 	bne	r2,zero,a56c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
    a564:	00801504 	movi	r2,84
    a568:	00003d06 	br	a660 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
    a56c:	e0bffc03 	ldbu	r2,-16(fp)
    a570:	10800f30 	cmpltui	r2,r2,60
    a574:	1000021e 	bne	r2,zero,a580 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    a578:	00801444 	movi	r2,81
    a57c:	00003806 	br	a660 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
    a580:	e0bffd03 	ldbu	r2,-12(fp)
    a584:	10800f30 	cmpltui	r2,r2,60
    a588:	1000021e 	bne	r2,zero,a594 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
    a58c:	00801484 	movi	r2,82
    a590:	00003306 	br	a660 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
    a594:	e0bffe0b 	ldhu	r2,-8(fp)
    a598:	1080fa30 	cmpltui	r2,r2,1000
    a59c:	1000021e 	bne	r2,zero,a5a8 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
    a5a0:	008014c4 	movi	r2,83
    a5a4:	00002e06 	br	a660 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    a5a8:	e0bffb03 	ldbu	r2,-20(fp)
    a5ac:	01438404 	movi	r5,3600
    a5b0:	1009883a 	mov	r4,r2
    a5b4:	000244c0 	call	244c <__mulsi3>
    a5b8:	1021883a 	mov	r16,r2
    a5bc:	e0bffc03 	ldbu	r2,-16(fp)
    a5c0:	01400f04 	movi	r5,60
    a5c4:	1009883a 	mov	r4,r2
    a5c8:	000244c0 	call	244c <__mulsi3>
    a5cc:	8087883a 	add	r3,r16,r2
    a5d0:	e0bffd03 	ldbu	r2,-12(fp)
    a5d4:	1885883a 	add	r2,r3,r2
    a5d8:	0140fa04 	movi	r5,1000
    a5dc:	1009883a 	mov	r4,r2
    a5e0:	000244c0 	call	244c <__mulsi3>
    a5e4:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    a5e8:	e0bffe0b 	ldhu	r2,-8(fp)
    a5ec:	0140fa04 	movi	r5,1000
    a5f0:	1009883a 	mov	r4,r2
    a5f4:	000244c0 	call	244c <__mulsi3>
    a5f8:	0140fa04 	movi	r5,1000
    a5fc:	1009883a 	mov	r4,r2
    a600:	000d0100 	call	d010 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    a604:	8085883a 	add	r2,r16,r2
    a608:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    a60c:	e0bffa17 	ldw	r2,-24(fp)
    a610:	1004d43a 	srli	r2,r2,16
    a614:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    a618:	e0bffa17 	ldw	r2,-24(fp)
    a61c:	10bfffcc 	andi	r2,r2,65535
    a620:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    a624:	e0bffa17 	ldw	r2,-24(fp)
    a628:	10bfffcc 	andi	r2,r2,65535
    a62c:	1009883a 	mov	r4,r2
    a630:	000a3f80 	call	a3f8 <OSTimeDly>
    while (loops > 0) {
    a634:	00000706 	br	a654 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
    a638:	01200014 	movui	r4,32768
    a63c:	000a3f80 	call	a3f8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    a640:	01200014 	movui	r4,32768
    a644:	000a3f80 	call	a3f8 <OSTimeDly>
        loops--;
    a648:	e0bff90b 	ldhu	r2,-28(fp)
    a64c:	10bfffc4 	addi	r2,r2,-1
    a650:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    a654:	e0bff90b 	ldhu	r2,-28(fp)
    a658:	103ff71e 	bne	r2,zero,a638 <__alt_data_end+0xffff1f98>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    a65c:	0005883a 	mov	r2,zero
}
    a660:	e6ffff04 	addi	sp,fp,-4
    a664:	dfc00217 	ldw	ra,8(sp)
    a668:	df000117 	ldw	fp,4(sp)
    a66c:	dc000017 	ldw	r16,0(sp)
    a670:	dec00304 	addi	sp,sp,12
    a674:	f800283a 	ret

0000a678 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    a678:	defff504 	addi	sp,sp,-44
    a67c:	dfc00a15 	stw	ra,40(sp)
    a680:	df000915 	stw	fp,36(sp)
    a684:	df000904 	addi	fp,sp,36
    a688:	2005883a 	mov	r2,r4
    a68c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a690:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    a694:	e0bfff03 	ldbu	r2,-4(fp)
    a698:	10800530 	cmpltui	r2,r2,20
    a69c:	1000021e 	bne	r2,zero,a6a8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    a6a0:	00800a84 	movi	r2,42
    a6a4:	00006406 	br	a838 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6a8:	0005303a 	rdctl	r2,status
    a6ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6b0:	e0fffe17 	ldw	r3,-8(fp)
    a6b4:	00bfff84 	movi	r2,-2
    a6b8:	1884703a 	and	r2,r3,r2
    a6bc:	1001703a 	wrctl	status,r2
  
  return context;
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    a6c4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    a6c8:	e0ffff03 	ldbu	r3,-4(fp)
    a6cc:	00800074 	movhi	r2,1
    a6d0:	109ecd04 	addi	r2,r2,31540
    a6d4:	18c7883a 	add	r3,r3,r3
    a6d8:	18c7883a 	add	r3,r3,r3
    a6dc:	10c5883a 	add	r2,r2,r3
    a6e0:	10800017 	ldw	r2,0(r2)
    a6e4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    a6e8:	e0bff917 	ldw	r2,-28(fp)
    a6ec:	1000061e 	bne	r2,zero,a708 <OSTimeDlyResume+0x90>
    a6f0:	e0bff717 	ldw	r2,-36(fp)
    a6f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6f8:	e0bff817 	ldw	r2,-32(fp)
    a6fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    a700:	008010c4 	movi	r2,67
    a704:	00004c06 	br	a838 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    a708:	e0bff917 	ldw	r2,-28(fp)
    a70c:	10800058 	cmpnei	r2,r2,1
    a710:	1000061e 	bne	r2,zero,a72c <OSTimeDlyResume+0xb4>
    a714:	e0bff717 	ldw	r2,-36(fp)
    a718:	e0bffa15 	stw	r2,-24(fp)
    a71c:	e0bffa17 	ldw	r2,-24(fp)
    a720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    a724:	008010c4 	movi	r2,67
    a728:	00004306 	br	a838 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    a72c:	e0bff917 	ldw	r2,-28(fp)
    a730:	10800b8b 	ldhu	r2,46(r2)
    a734:	10bfffcc 	andi	r2,r2,65535
    a738:	1000061e 	bne	r2,zero,a754 <OSTimeDlyResume+0xdc>
    a73c:	e0bff717 	ldw	r2,-36(fp)
    a740:	e0bffb15 	stw	r2,-20(fp)
    a744:	e0bffb17 	ldw	r2,-20(fp)
    a748:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    a74c:	00801404 	movi	r2,80
    a750:	00003906 	br	a838 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    a754:	e0bff917 	ldw	r2,-28(fp)
    a758:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    a75c:	e0bff917 	ldw	r2,-28(fp)
    a760:	10800c03 	ldbu	r2,48(r2)
    a764:	10803fcc 	andi	r2,r2,255
    a768:	10800dcc 	andi	r2,r2,55
    a76c:	10000b26 	beq	r2,zero,a79c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    a770:	e0bff917 	ldw	r2,-28(fp)
    a774:	10c00c03 	ldbu	r3,48(r2)
    a778:	00bff204 	movi	r2,-56
    a77c:	1884703a 	and	r2,r3,r2
    a780:	1007883a 	mov	r3,r2
    a784:	e0bff917 	ldw	r2,-28(fp)
    a788:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    a78c:	e0bff917 	ldw	r2,-28(fp)
    a790:	00c00044 	movi	r3,1
    a794:	10c00c45 	stb	r3,49(r2)
    a798:	00000206 	br	a7a4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    a79c:	e0bff917 	ldw	r2,-28(fp)
    a7a0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    a7a4:	e0bff917 	ldw	r2,-28(fp)
    a7a8:	10800c03 	ldbu	r2,48(r2)
    a7ac:	10803fcc 	andi	r2,r2,255
    a7b0:	1080020c 	andi	r2,r2,8
    a7b4:	10001b1e 	bne	r2,zero,a824 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    a7b8:	e0bff917 	ldw	r2,-28(fp)
    a7bc:	10c00d83 	ldbu	r3,54(r2)
    a7c0:	d0a70e03 	ldbu	r2,-25544(gp)
    a7c4:	1884b03a 	or	r2,r3,r2
    a7c8:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    a7cc:	e0bff917 	ldw	r2,-28(fp)
    a7d0:	10800d03 	ldbu	r2,52(r2)
    a7d4:	10c03fcc 	andi	r3,r2,255
    a7d8:	e0bff917 	ldw	r2,-28(fp)
    a7dc:	10800d03 	ldbu	r2,52(r2)
    a7e0:	11003fcc 	andi	r4,r2,255
    a7e4:	d0a70e44 	addi	r2,gp,-25543
    a7e8:	2085883a 	add	r2,r4,r2
    a7ec:	11000003 	ldbu	r4,0(r2)
    a7f0:	e0bff917 	ldw	r2,-28(fp)
    a7f4:	10800d43 	ldbu	r2,53(r2)
    a7f8:	2084b03a 	or	r2,r4,r2
    a7fc:	1009883a 	mov	r4,r2
    a800:	d0a70e44 	addi	r2,gp,-25543
    a804:	1885883a 	add	r2,r3,r2
    a808:	11000005 	stb	r4,0(r2)
    a80c:	e0bff717 	ldw	r2,-36(fp)
    a810:	e0bffc15 	stw	r2,-16(fp)
    a814:	e0bffc17 	ldw	r2,-16(fp)
    a818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    a81c:	0004a500 	call	4a50 <OS_Sched>
    a820:	00000406 	br	a834 <OSTimeDlyResume+0x1bc>
    a824:	e0bff717 	ldw	r2,-36(fp)
    a828:	e0bffd15 	stw	r2,-12(fp)
    a82c:	e0bffd17 	ldw	r2,-12(fp)
    a830:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    a834:	0005883a 	mov	r2,zero
}
    a838:	e037883a 	mov	sp,fp
    a83c:	dfc00117 	ldw	ra,4(sp)
    a840:	df000017 	ldw	fp,0(sp)
    a844:	dec00204 	addi	sp,sp,8
    a848:	f800283a 	ret

0000a84c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    a84c:	defffb04 	addi	sp,sp,-20
    a850:	df000415 	stw	fp,16(sp)
    a854:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a858:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a85c:	0005303a 	rdctl	r2,status
    a860:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a864:	e0fffe17 	ldw	r3,-8(fp)
    a868:	00bfff84 	movi	r2,-2
    a86c:	1884703a 	and	r2,r3,r2
    a870:	1001703a 	wrctl	status,r2
  
  return context;
    a874:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    a878:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    a87c:	d0a71217 	ldw	r2,-25528(gp)
    a880:	e0bffd15 	stw	r2,-12(fp)
    a884:	e0bffc17 	ldw	r2,-16(fp)
    a888:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a88c:	e0bfff17 	ldw	r2,-4(fp)
    a890:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    a894:	e0bffd17 	ldw	r2,-12(fp)
}
    a898:	e037883a 	mov	sp,fp
    a89c:	df000017 	ldw	fp,0(sp)
    a8a0:	dec00104 	addi	sp,sp,4
    a8a4:	f800283a 	ret

0000a8a8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    a8a8:	defffb04 	addi	sp,sp,-20
    a8ac:	df000415 	stw	fp,16(sp)
    a8b0:	df000404 	addi	fp,sp,16
    a8b4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a8b8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a8bc:	0005303a 	rdctl	r2,status
    a8c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8c4:	e0fffd17 	ldw	r3,-12(fp)
    a8c8:	00bfff84 	movi	r2,-2
    a8cc:	1884703a 	and	r2,r3,r2
    a8d0:	1001703a 	wrctl	status,r2
  
  return context;
    a8d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    a8d8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    a8dc:	e0bfff17 	ldw	r2,-4(fp)
    a8e0:	d0a71215 	stw	r2,-25528(gp)
    a8e4:	e0bffc17 	ldw	r2,-16(fp)
    a8e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8ec:	e0bffe17 	ldw	r2,-8(fp)
    a8f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    a8f4:	0001883a 	nop
    a8f8:	e037883a 	mov	sp,fp
    a8fc:	df000017 	ldw	fp,0(sp)
    a900:	dec00104 	addi	sp,sp,4
    a904:	f800283a 	ret

0000a908 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a908:	defffd04 	addi	sp,sp,-12
    a90c:	dfc00215 	stw	ra,8(sp)
    a910:	df000115 	stw	fp,4(sp)
    a914:	df000104 	addi	fp,sp,4
    a918:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a91c:	d1600604 	addi	r5,gp,-32744
    a920:	e13fff17 	ldw	r4,-4(fp)
    a924:	000b9880 	call	b988 <alt_dev_llist_insert>
}
    a928:	e037883a 	mov	sp,fp
    a92c:	dfc00117 	ldw	ra,4(sp)
    a930:	df000017 	ldw	fp,0(sp)
    a934:	dec00204 	addi	sp,sp,8
    a938:	f800283a 	ret

0000a93c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a93c:	defffd04 	addi	sp,sp,-12
    a940:	dfc00215 	stw	ra,8(sp)
    a944:	df000115 	stw	fp,4(sp)
    a948:	df000104 	addi	fp,sp,4
    a94c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    a950:	000c3340 	call	c334 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a954:	00800044 	movi	r2,1
    a958:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a95c:	0001883a 	nop
    a960:	e037883a 	mov	sp,fp
    a964:	dfc00117 	ldw	ra,4(sp)
    a968:	df000017 	ldw	fp,0(sp)
    a96c:	dec00204 	addi	sp,sp,8
    a970:	f800283a 	ret

0000a974 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a974:	defffe04 	addi	sp,sp,-8
    a978:	dfc00115 	stw	ra,4(sp)
    a97c:	df000015 	stw	fp,0(sp)
    a980:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a984:	01c0fa04 	movi	r7,1000
    a988:	01800284 	movi	r6,10
    a98c:	000b883a 	mov	r5,zero
    a990:	010000b4 	movhi	r4,2
    a994:	21080804 	addi	r4,r4,8224
    a998:	000b7840 	call	b784 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a99c:	01800204 	movi	r6,8
    a9a0:	000b883a 	mov	r5,zero
    a9a4:	01000074 	movhi	r4,1
    a9a8:	21371904 	addi	r4,r4,-9116
    a9ac:	000ab440 	call	ab44 <altera_avalon_jtag_uart_init>
    a9b0:	01000074 	movhi	r4,1
    a9b4:	21370f04 	addi	r4,r4,-9156
    a9b8:	000a9080 	call	a908 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
    a9bc:	01000074 	movhi	r4,1
    a9c0:	213b2a04 	addi	r4,r4,-4952
    a9c4:	000a9080 	call	a908 <alt_dev_reg>
}
    a9c8:	0001883a 	nop
    a9cc:	e037883a 	mov	sp,fp
    a9d0:	dfc00117 	ldw	ra,4(sp)
    a9d4:	df000017 	ldw	fp,0(sp)
    a9d8:	dec00204 	addi	sp,sp,8
    a9dc:	f800283a 	ret

0000a9e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a9e0:	defffa04 	addi	sp,sp,-24
    a9e4:	dfc00515 	stw	ra,20(sp)
    a9e8:	df000415 	stw	fp,16(sp)
    a9ec:	df000404 	addi	fp,sp,16
    a9f0:	e13ffd15 	stw	r4,-12(fp)
    a9f4:	e17ffe15 	stw	r5,-8(fp)
    a9f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9fc:	e0bffd17 	ldw	r2,-12(fp)
    aa00:	10800017 	ldw	r2,0(r2)
    aa04:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    aa08:	e0bffc17 	ldw	r2,-16(fp)
    aa0c:	10c00a04 	addi	r3,r2,40
    aa10:	e0bffd17 	ldw	r2,-12(fp)
    aa14:	10800217 	ldw	r2,8(r2)
    aa18:	100f883a 	mov	r7,r2
    aa1c:	e1bfff17 	ldw	r6,-4(fp)
    aa20:	e17ffe17 	ldw	r5,-8(fp)
    aa24:	1809883a 	mov	r4,r3
    aa28:	000b18c0 	call	b18c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    aa2c:	e037883a 	mov	sp,fp
    aa30:	dfc00117 	ldw	ra,4(sp)
    aa34:	df000017 	ldw	fp,0(sp)
    aa38:	dec00204 	addi	sp,sp,8
    aa3c:	f800283a 	ret

0000aa40 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    aa40:	defffa04 	addi	sp,sp,-24
    aa44:	dfc00515 	stw	ra,20(sp)
    aa48:	df000415 	stw	fp,16(sp)
    aa4c:	df000404 	addi	fp,sp,16
    aa50:	e13ffd15 	stw	r4,-12(fp)
    aa54:	e17ffe15 	stw	r5,-8(fp)
    aa58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa5c:	e0bffd17 	ldw	r2,-12(fp)
    aa60:	10800017 	ldw	r2,0(r2)
    aa64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    aa68:	e0bffc17 	ldw	r2,-16(fp)
    aa6c:	10c00a04 	addi	r3,r2,40
    aa70:	e0bffd17 	ldw	r2,-12(fp)
    aa74:	10800217 	ldw	r2,8(r2)
    aa78:	100f883a 	mov	r7,r2
    aa7c:	e1bfff17 	ldw	r6,-4(fp)
    aa80:	e17ffe17 	ldw	r5,-8(fp)
    aa84:	1809883a 	mov	r4,r3
    aa88:	000b4480 	call	b448 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    aa8c:	e037883a 	mov	sp,fp
    aa90:	dfc00117 	ldw	ra,4(sp)
    aa94:	df000017 	ldw	fp,0(sp)
    aa98:	dec00204 	addi	sp,sp,8
    aa9c:	f800283a 	ret

0000aaa0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    aaa0:	defffc04 	addi	sp,sp,-16
    aaa4:	dfc00315 	stw	ra,12(sp)
    aaa8:	df000215 	stw	fp,8(sp)
    aaac:	df000204 	addi	fp,sp,8
    aab0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aab4:	e0bfff17 	ldw	r2,-4(fp)
    aab8:	10800017 	ldw	r2,0(r2)
    aabc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    aac0:	e0bffe17 	ldw	r2,-8(fp)
    aac4:	10c00a04 	addi	r3,r2,40
    aac8:	e0bfff17 	ldw	r2,-4(fp)
    aacc:	10800217 	ldw	r2,8(r2)
    aad0:	100b883a 	mov	r5,r2
    aad4:	1809883a 	mov	r4,r3
    aad8:	000b0340 	call	b034 <altera_avalon_jtag_uart_close>
}
    aadc:	e037883a 	mov	sp,fp
    aae0:	dfc00117 	ldw	ra,4(sp)
    aae4:	df000017 	ldw	fp,0(sp)
    aae8:	dec00204 	addi	sp,sp,8
    aaec:	f800283a 	ret

0000aaf0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aaf0:	defffa04 	addi	sp,sp,-24
    aaf4:	dfc00515 	stw	ra,20(sp)
    aaf8:	df000415 	stw	fp,16(sp)
    aafc:	df000404 	addi	fp,sp,16
    ab00:	e13ffd15 	stw	r4,-12(fp)
    ab04:	e17ffe15 	stw	r5,-8(fp)
    ab08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ab0c:	e0bffd17 	ldw	r2,-12(fp)
    ab10:	10800017 	ldw	r2,0(r2)
    ab14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ab18:	e0bffc17 	ldw	r2,-16(fp)
    ab1c:	10800a04 	addi	r2,r2,40
    ab20:	e1bfff17 	ldw	r6,-4(fp)
    ab24:	e17ffe17 	ldw	r5,-8(fp)
    ab28:	1009883a 	mov	r4,r2
    ab2c:	000b09c0 	call	b09c <altera_avalon_jtag_uart_ioctl>
}
    ab30:	e037883a 	mov	sp,fp
    ab34:	dfc00117 	ldw	ra,4(sp)
    ab38:	df000017 	ldw	fp,0(sp)
    ab3c:	dec00204 	addi	sp,sp,8
    ab40:	f800283a 	ret

0000ab44 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ab44:	defff104 	addi	sp,sp,-60
    ab48:	dfc00e15 	stw	ra,56(sp)
    ab4c:	df000d15 	stw	fp,52(sp)
    ab50:	df000d04 	addi	fp,sp,52
    ab54:	e13ff915 	stw	r4,-28(fp)
    ab58:	e17ffa15 	stw	r5,-24(fp)
    ab5c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    ab60:	e0bff917 	ldw	r2,-28(fp)
    ab64:	10800c04 	addi	r2,r2,48
    ab68:	e0bff415 	stw	r2,-48(fp)
    ab6c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    ab70:	e0bff80b 	ldhu	r2,-32(fp)
    ab74:	e0fff884 	addi	r3,fp,-30
    ab78:	180b883a 	mov	r5,r3
    ab7c:	1009883a 	mov	r4,r2
    ab80:	00055bc0 	call	55bc <OSFlagCreate>
    ab84:	1007883a 	mov	r3,r2
    ab88:	e0bff417 	ldw	r2,-48(fp)
    ab8c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    ab90:	e0bff917 	ldw	r2,-28(fp)
    ab94:	10800a04 	addi	r2,r2,40
    ab98:	e0bff515 	stw	r2,-44(fp)
    ab9c:	00800044 	movi	r2,1
    aba0:	e0bff78d 	sth	r2,-34(fp)
    aba4:	e0bff78b 	ldhu	r2,-34(fp)
    aba8:	1009883a 	mov	r4,r2
    abac:	00082dc0 	call	82dc <OSSemCreate>
    abb0:	1007883a 	mov	r3,r2
    abb4:	e0bff517 	ldw	r2,-44(fp)
    abb8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    abbc:	e0bff917 	ldw	r2,-28(fp)
    abc0:	10800b04 	addi	r2,r2,44
    abc4:	e0bff615 	stw	r2,-40(fp)
    abc8:	00800044 	movi	r2,1
    abcc:	e0bff70d 	sth	r2,-36(fp)
    abd0:	e0bff70b 	ldhu	r2,-36(fp)
    abd4:	1009883a 	mov	r4,r2
    abd8:	00082dc0 	call	82dc <OSSemCreate>
    abdc:	1007883a 	mov	r3,r2
    abe0:	e0bff617 	ldw	r2,-40(fp)
    abe4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    abe8:	e0bff917 	ldw	r2,-28(fp)
    abec:	00c00044 	movi	r3,1
    abf0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    abf4:	e0bff917 	ldw	r2,-28(fp)
    abf8:	10800017 	ldw	r2,0(r2)
    abfc:	10800104 	addi	r2,r2,4
    ac00:	1007883a 	mov	r3,r2
    ac04:	e0bff917 	ldw	r2,-28(fp)
    ac08:	10800817 	ldw	r2,32(r2)
    ac0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ac10:	e0bffa17 	ldw	r2,-24(fp)
    ac14:	e0fffb17 	ldw	r3,-20(fp)
    ac18:	d8000015 	stw	zero,0(sp)
    ac1c:	e1fff917 	ldw	r7,-28(fp)
    ac20:	01800074 	movhi	r6,1
    ac24:	31ab2304 	addi	r6,r6,-21364
    ac28:	180b883a 	mov	r5,r3
    ac2c:	1009883a 	mov	r4,r2
    ac30:	000bb0c0 	call	bb0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ac34:	e0bff917 	ldw	r2,-28(fp)
    ac38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ac3c:	e0bff917 	ldw	r2,-28(fp)
    ac40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ac44:	d0e71717 	ldw	r3,-25508(gp)
    ac48:	e1fff917 	ldw	r7,-28(fp)
    ac4c:	01800074 	movhi	r6,1
    ac50:	31abcc04 	addi	r6,r6,-20688
    ac54:	180b883a 	mov	r5,r3
    ac58:	1009883a 	mov	r4,r2
    ac5c:	000b8000 	call	b800 <alt_alarm_start>
    ac60:	1000040e 	bge	r2,zero,ac74 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ac64:	e0fff917 	ldw	r3,-28(fp)
    ac68:	00a00034 	movhi	r2,32768
    ac6c:	10bfffc4 	addi	r2,r2,-1
    ac70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ac74:	0001883a 	nop
    ac78:	e037883a 	mov	sp,fp
    ac7c:	dfc00117 	ldw	ra,4(sp)
    ac80:	df000017 	ldw	fp,0(sp)
    ac84:	dec00204 	addi	sp,sp,8
    ac88:	f800283a 	ret

0000ac8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ac8c:	defff204 	addi	sp,sp,-56
    ac90:	dfc00d15 	stw	ra,52(sp)
    ac94:	df000c15 	stw	fp,48(sp)
    ac98:	df000c04 	addi	fp,sp,48
    ac9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    aca0:	e0bfff17 	ldw	r2,-4(fp)
    aca4:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    aca8:	e0bff617 	ldw	r2,-40(fp)
    acac:	10800017 	ldw	r2,0(r2)
    acb0:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    acb4:	e0bff717 	ldw	r2,-36(fp)
    acb8:	10800104 	addi	r2,r2,4
    acbc:	10800037 	ldwio	r2,0(r2)
    acc0:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    acc4:	e0bff817 	ldw	r2,-32(fp)
    acc8:	1080c00c 	andi	r2,r2,768
    accc:	10009126 	beq	r2,zero,af14 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    acd0:	e0bff817 	ldw	r2,-32(fp)
    acd4:	1080400c 	andi	r2,r2,256
    acd8:	10004726 	beq	r2,zero,adf8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    acdc:	00800074 	movhi	r2,1
    ace0:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ace4:	e0bff617 	ldw	r2,-40(fp)
    ace8:	10800d17 	ldw	r2,52(r2)
    acec:	10800044 	addi	r2,r2,1
    acf0:	1081ffcc 	andi	r2,r2,2047
    acf4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    acf8:	e0bff617 	ldw	r2,-40(fp)
    acfc:	10c00e17 	ldw	r3,56(r2)
    ad00:	e0bff917 	ldw	r2,-28(fp)
    ad04:	18802726 	beq	r3,r2,ada4 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ad08:	e0bff717 	ldw	r2,-36(fp)
    ad0c:	10800037 	ldwio	r2,0(r2)
    ad10:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ad14:	e0bff417 	ldw	r2,-48(fp)
    ad18:	10a0000c 	andi	r2,r2,32768
    ad1c:	10002326 	beq	r2,zero,adac <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ad20:	e0bff617 	ldw	r2,-40(fp)
    ad24:	10800d17 	ldw	r2,52(r2)
    ad28:	e0fff417 	ldw	r3,-48(fp)
    ad2c:	1809883a 	mov	r4,r3
    ad30:	e0fff617 	ldw	r3,-40(fp)
    ad34:	1885883a 	add	r2,r3,r2
    ad38:	10801104 	addi	r2,r2,68
    ad3c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad40:	e0bff617 	ldw	r2,-40(fp)
    ad44:	10800d17 	ldw	r2,52(r2)
    ad48:	10800044 	addi	r2,r2,1
    ad4c:	10c1ffcc 	andi	r3,r2,2047
    ad50:	e0bff617 	ldw	r2,-40(fp)
    ad54:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    ad58:	e0bff617 	ldw	r2,-40(fp)
    ad5c:	10800c17 	ldw	r2,48(r2)
    ad60:	e0bffb15 	stw	r2,-20(fp)
    ad64:	00800044 	movi	r2,1
    ad68:	e0bffc0d 	sth	r2,-16(fp)
    ad6c:	00800044 	movi	r2,1
    ad70:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ad74:	d0a70243 	ldbu	r2,-25591(gp)
    ad78:	10803fcc 	andi	r2,r2,255
    ad7c:	103fd926 	beq	r2,zero,ace4 <__alt_data_end+0xffff2644>
  {
    OSFlagPost (group, flags, opt, &err);
    ad80:	e0bffc0b 	ldhu	r2,-16(fp)
    ad84:	e0fffc83 	ldbu	r3,-14(fp)
    ad88:	e13ffdc4 	addi	r4,fp,-9
    ad8c:	200f883a 	mov	r7,r4
    ad90:	180d883a 	mov	r6,r3
    ad94:	100b883a 	mov	r5,r2
    ad98:	e13ffb17 	ldw	r4,-20(fp)
    ad9c:	00061980 	call	6198 <OSFlagPost>
      }
    ada0:	003fd006 	br	ace4 <__alt_data_end+0xffff2644>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ada4:	0001883a 	nop
    ada8:	00000106 	br	adb0 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    adac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    adb0:	e0bff417 	ldw	r2,-48(fp)
    adb4:	10bfffec 	andhi	r2,r2,65535
    adb8:	10000f26 	beq	r2,zero,adf8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    adbc:	e0bff617 	ldw	r2,-40(fp)
    adc0:	10c00817 	ldw	r3,32(r2)
    adc4:	00bfff84 	movi	r2,-2
    adc8:	1886703a 	and	r3,r3,r2
    adcc:	e0bff617 	ldw	r2,-40(fp)
    add0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    add4:	e0bff717 	ldw	r2,-36(fp)
    add8:	10800104 	addi	r2,r2,4
    addc:	1007883a 	mov	r3,r2
    ade0:	e0bff617 	ldw	r2,-40(fp)
    ade4:	10800817 	ldw	r2,32(r2)
    ade8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    adec:	e0bff717 	ldw	r2,-36(fp)
    adf0:	10800104 	addi	r2,r2,4
    adf4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    adf8:	e0bff817 	ldw	r2,-32(fp)
    adfc:	1080800c 	andi	r2,r2,512
    ae00:	103fac26 	beq	r2,zero,acb4 <__alt_data_end+0xffff2614>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ae04:	e0bff817 	ldw	r2,-32(fp)
    ae08:	1004d43a 	srli	r2,r2,16
    ae0c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ae10:	00002606 	br	aeac <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ae14:	e0bff717 	ldw	r2,-36(fp)
    ae18:	e0fff617 	ldw	r3,-40(fp)
    ae1c:	18c01017 	ldw	r3,64(r3)
    ae20:	e13ff617 	ldw	r4,-40(fp)
    ae24:	20c7883a 	add	r3,r4,r3
    ae28:	18c21104 	addi	r3,r3,2116
    ae2c:	18c00003 	ldbu	r3,0(r3)
    ae30:	18c03fcc 	andi	r3,r3,255
    ae34:	18c0201c 	xori	r3,r3,128
    ae38:	18ffe004 	addi	r3,r3,-128
    ae3c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ae40:	e0bff617 	ldw	r2,-40(fp)
    ae44:	10801017 	ldw	r2,64(r2)
    ae48:	10800044 	addi	r2,r2,1
    ae4c:	10c1ffcc 	andi	r3,r2,2047
    ae50:	e0bff617 	ldw	r2,-40(fp)
    ae54:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    ae58:	e0bff617 	ldw	r2,-40(fp)
    ae5c:	10800c17 	ldw	r2,48(r2)
    ae60:	e0bffa15 	stw	r2,-24(fp)
    ae64:	00800084 	movi	r2,2
    ae68:	e0bffd0d 	sth	r2,-12(fp)
    ae6c:	00800044 	movi	r2,1
    ae70:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ae74:	d0a70243 	ldbu	r2,-25591(gp)
    ae78:	10803fcc 	andi	r2,r2,255
    ae7c:	10000826 	beq	r2,zero,aea0 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
    ae80:	e0bffd0b 	ldhu	r2,-12(fp)
    ae84:	e0fffd83 	ldbu	r3,-10(fp)
    ae88:	e13ffe04 	addi	r4,fp,-8
    ae8c:	200f883a 	mov	r7,r4
    ae90:	180d883a 	mov	r6,r3
    ae94:	100b883a 	mov	r5,r2
    ae98:	e13ffa17 	ldw	r4,-24(fp)
    ae9c:	00061980 	call	6198 <OSFlagPost>

        space--;
    aea0:	e0bff517 	ldw	r2,-44(fp)
    aea4:	10bfffc4 	addi	r2,r2,-1
    aea8:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    aeac:	e0bff517 	ldw	r2,-44(fp)
    aeb0:	10000526 	beq	r2,zero,aec8 <altera_avalon_jtag_uart_irq+0x23c>
    aeb4:	e0bff617 	ldw	r2,-40(fp)
    aeb8:	10c01017 	ldw	r3,64(r2)
    aebc:	e0bff617 	ldw	r2,-40(fp)
    aec0:	10800f17 	ldw	r2,60(r2)
    aec4:	18bfd31e 	bne	r3,r2,ae14 <__alt_data_end+0xffff2774>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aec8:	e0bff517 	ldw	r2,-44(fp)
    aecc:	103f7926 	beq	r2,zero,acb4 <__alt_data_end+0xffff2614>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aed0:	e0bff617 	ldw	r2,-40(fp)
    aed4:	10c00817 	ldw	r3,32(r2)
    aed8:	00bfff44 	movi	r2,-3
    aedc:	1886703a 	and	r3,r3,r2
    aee0:	e0bff617 	ldw	r2,-40(fp)
    aee4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    aee8:	e0bff617 	ldw	r2,-40(fp)
    aeec:	10800017 	ldw	r2,0(r2)
    aef0:	10800104 	addi	r2,r2,4
    aef4:	1007883a 	mov	r3,r2
    aef8:	e0bff617 	ldw	r2,-40(fp)
    aefc:	10800817 	ldw	r2,32(r2)
    af00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af04:	e0bff717 	ldw	r2,-36(fp)
    af08:	10800104 	addi	r2,r2,4
    af0c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    af10:	003f6806 	br	acb4 <__alt_data_end+0xffff2614>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    af14:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    af18:	0001883a 	nop
    af1c:	e037883a 	mov	sp,fp
    af20:	dfc00117 	ldw	ra,4(sp)
    af24:	df000017 	ldw	fp,0(sp)
    af28:	dec00204 	addi	sp,sp,8
    af2c:	f800283a 	ret

0000af30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    af30:	defff904 	addi	sp,sp,-28
    af34:	dfc00615 	stw	ra,24(sp)
    af38:	df000515 	stw	fp,20(sp)
    af3c:	df000504 	addi	fp,sp,20
    af40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    af44:	e0bfff17 	ldw	r2,-4(fp)
    af48:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    af4c:	e0bffb17 	ldw	r2,-20(fp)
    af50:	10800017 	ldw	r2,0(r2)
    af54:	10800104 	addi	r2,r2,4
    af58:	10800037 	ldwio	r2,0(r2)
    af5c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    af60:	e0bffc17 	ldw	r2,-16(fp)
    af64:	1081000c 	andi	r2,r2,1024
    af68:	10000b26 	beq	r2,zero,af98 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    af6c:	e0bffb17 	ldw	r2,-20(fp)
    af70:	10800017 	ldw	r2,0(r2)
    af74:	10800104 	addi	r2,r2,4
    af78:	1007883a 	mov	r3,r2
    af7c:	e0bffb17 	ldw	r2,-20(fp)
    af80:	10800817 	ldw	r2,32(r2)
    af84:	10810014 	ori	r2,r2,1024
    af88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    af8c:	e0bffb17 	ldw	r2,-20(fp)
    af90:	10000915 	stw	zero,36(r2)
    af94:	00002106 	br	b01c <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    af98:	e0bffb17 	ldw	r2,-20(fp)
    af9c:	10c00917 	ldw	r3,36(r2)
    afa0:	00a00034 	movhi	r2,32768
    afa4:	10bfff04 	addi	r2,r2,-4
    afa8:	10c01c36 	bltu	r2,r3,b01c <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    afac:	e0bffb17 	ldw	r2,-20(fp)
    afb0:	10800917 	ldw	r2,36(r2)
    afb4:	10c00044 	addi	r3,r2,1
    afb8:	e0bffb17 	ldw	r2,-20(fp)
    afbc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    afc0:	e0bffb17 	ldw	r2,-20(fp)
    afc4:	10c00917 	ldw	r3,36(r2)
    afc8:	e0bffb17 	ldw	r2,-20(fp)
    afcc:	10800117 	ldw	r2,4(r2)
    afd0:	18801236 	bltu	r3,r2,b01c <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    afd4:	e0bffb17 	ldw	r2,-20(fp)
    afd8:	10800c17 	ldw	r2,48(r2)
    afdc:	e0bffd15 	stw	r2,-12(fp)
    afe0:	00800104 	movi	r2,4
    afe4:	e0bffe0d 	sth	r2,-8(fp)
    afe8:	00800044 	movi	r2,1
    afec:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    aff0:	d0a70243 	ldbu	r2,-25591(gp)
    aff4:	10803fcc 	andi	r2,r2,255
    aff8:	10000826 	beq	r2,zero,b01c <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    affc:	e0bffe0b 	ldhu	r2,-8(fp)
    b000:	e0fffe83 	ldbu	r3,-6(fp)
    b004:	e13ffec4 	addi	r4,fp,-5
    b008:	200f883a 	mov	r7,r4
    b00c:	180d883a 	mov	r6,r3
    b010:	100b883a 	mov	r5,r2
    b014:	e13ffd17 	ldw	r4,-12(fp)
    b018:	00061980 	call	6198 <OSFlagPost>
    b01c:	d0a71717 	ldw	r2,-25508(gp)
    }
  }

  return alt_ticks_per_second();
}
    b020:	e037883a 	mov	sp,fp
    b024:	dfc00117 	ldw	ra,4(sp)
    b028:	df000017 	ldw	fp,0(sp)
    b02c:	dec00204 	addi	sp,sp,8
    b030:	f800283a 	ret

0000b034 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b034:	defffd04 	addi	sp,sp,-12
    b038:	df000215 	stw	fp,8(sp)
    b03c:	df000204 	addi	fp,sp,8
    b040:	e13ffe15 	stw	r4,-8(fp)
    b044:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b048:	00000506 	br	b060 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    b04c:	e0bfff17 	ldw	r2,-4(fp)
    b050:	1090000c 	andi	r2,r2,16384
    b054:	10000226 	beq	r2,zero,b060 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b058:	00bffd44 	movi	r2,-11
    b05c:	00000b06 	br	b08c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b060:	e0bffe17 	ldw	r2,-8(fp)
    b064:	10c01017 	ldw	r3,64(r2)
    b068:	e0bffe17 	ldw	r2,-8(fp)
    b06c:	10800f17 	ldw	r2,60(r2)
    b070:	18800526 	beq	r3,r2,b088 <altera_avalon_jtag_uart_close+0x54>
    b074:	e0bffe17 	ldw	r2,-8(fp)
    b078:	10c00917 	ldw	r3,36(r2)
    b07c:	e0bffe17 	ldw	r2,-8(fp)
    b080:	10800117 	ldw	r2,4(r2)
    b084:	18bff136 	bltu	r3,r2,b04c <__alt_data_end+0xffff29ac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b088:	0005883a 	mov	r2,zero
}
    b08c:	e037883a 	mov	sp,fp
    b090:	df000017 	ldw	fp,0(sp)
    b094:	dec00104 	addi	sp,sp,4
    b098:	f800283a 	ret

0000b09c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b09c:	defffa04 	addi	sp,sp,-24
    b0a0:	df000515 	stw	fp,20(sp)
    b0a4:	df000504 	addi	fp,sp,20
    b0a8:	e13ffd15 	stw	r4,-12(fp)
    b0ac:	e17ffe15 	stw	r5,-8(fp)
    b0b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b0b4:	00bff9c4 	movi	r2,-25
    b0b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b0bc:	e0bffe17 	ldw	r2,-8(fp)
    b0c0:	10da8060 	cmpeqi	r3,r2,27137
    b0c4:	1800031e 	bne	r3,zero,b0d4 <altera_avalon_jtag_uart_ioctl+0x38>
    b0c8:	109a80a0 	cmpeqi	r2,r2,27138
    b0cc:	1000181e 	bne	r2,zero,b130 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    b0d0:	00002906 	br	b178 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b0d4:	e0bffd17 	ldw	r2,-12(fp)
    b0d8:	10c00117 	ldw	r3,4(r2)
    b0dc:	00a00034 	movhi	r2,32768
    b0e0:	10bfffc4 	addi	r2,r2,-1
    b0e4:	18802126 	beq	r3,r2,b16c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    b0e8:	e0bfff17 	ldw	r2,-4(fp)
    b0ec:	10800017 	ldw	r2,0(r2)
    b0f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b0f4:	e0bffc17 	ldw	r2,-16(fp)
    b0f8:	10800090 	cmplti	r2,r2,2
    b0fc:	1000061e 	bne	r2,zero,b118 <altera_avalon_jtag_uart_ioctl+0x7c>
    b100:	e0fffc17 	ldw	r3,-16(fp)
    b104:	00a00034 	movhi	r2,32768
    b108:	10bfffc4 	addi	r2,r2,-1
    b10c:	18800226 	beq	r3,r2,b118 <altera_avalon_jtag_uart_ioctl+0x7c>
    b110:	e0bffc17 	ldw	r2,-16(fp)
    b114:	00000206 	br	b120 <altera_avalon_jtag_uart_ioctl+0x84>
    b118:	00a00034 	movhi	r2,32768
    b11c:	10bfff84 	addi	r2,r2,-2
    b120:	e0fffd17 	ldw	r3,-12(fp)
    b124:	18800115 	stw	r2,4(r3)
      rc = 0;
    b128:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b12c:	00000f06 	br	b16c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b130:	e0bffd17 	ldw	r2,-12(fp)
    b134:	10c00117 	ldw	r3,4(r2)
    b138:	00a00034 	movhi	r2,32768
    b13c:	10bfffc4 	addi	r2,r2,-1
    b140:	18800c26 	beq	r3,r2,b174 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b144:	e0bffd17 	ldw	r2,-12(fp)
    b148:	10c00917 	ldw	r3,36(r2)
    b14c:	e0bffd17 	ldw	r2,-12(fp)
    b150:	10800117 	ldw	r2,4(r2)
    b154:	1885803a 	cmpltu	r2,r3,r2
    b158:	10c03fcc 	andi	r3,r2,255
    b15c:	e0bfff17 	ldw	r2,-4(fp)
    b160:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b164:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b168:	00000206 	br	b174 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b16c:	0001883a 	nop
    b170:	00000106 	br	b178 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b174:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b178:	e0bffb17 	ldw	r2,-20(fp)
}
    b17c:	e037883a 	mov	sp,fp
    b180:	df000017 	ldw	fp,0(sp)
    b184:	dec00104 	addi	sp,sp,4
    b188:	f800283a 	ret

0000b18c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b18c:	deffed04 	addi	sp,sp,-76
    b190:	dfc01215 	stw	ra,72(sp)
    b194:	df001115 	stw	fp,68(sp)
    b198:	df001104 	addi	fp,sp,68
    b19c:	e13ffc15 	stw	r4,-16(fp)
    b1a0:	e17ffd15 	stw	r5,-12(fp)
    b1a4:	e1bffe15 	stw	r6,-8(fp)
    b1a8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b1ac:	e0bffd17 	ldw	r2,-12(fp)
    b1b0:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    b1b4:	e0bffc17 	ldw	r2,-16(fp)
    b1b8:	10800a17 	ldw	r2,40(r2)
    b1bc:	e0bff815 	stw	r2,-32(fp)
    b1c0:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    b1c4:	e0bff90b 	ldhu	r2,-28(fp)
    b1c8:	e0fffb04 	addi	r3,fp,-20
    b1cc:	180d883a 	mov	r6,r3
    b1d0:	100b883a 	mov	r5,r2
    b1d4:	e13ff817 	ldw	r4,-32(fp)
    b1d8:	00085f40 	call	85f4 <OSSemPend>

  while (space > 0)
    b1dc:	00006106 	br	b364 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b1e0:	e0bffc17 	ldw	r2,-16(fp)
    b1e4:	10800d17 	ldw	r2,52(r2)
    b1e8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    b1ec:	e0bffc17 	ldw	r2,-16(fp)
    b1f0:	10800e17 	ldw	r2,56(r2)
    b1f4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    b1f8:	e0fff317 	ldw	r3,-52(fp)
    b1fc:	e0bff417 	ldw	r2,-48(fp)
    b200:	18800536 	bltu	r3,r2,b218 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    b204:	e0fff317 	ldw	r3,-52(fp)
    b208:	e0bff417 	ldw	r2,-48(fp)
    b20c:	1885c83a 	sub	r2,r3,r2
    b210:	e0bff115 	stw	r2,-60(fp)
    b214:	00000406 	br	b228 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b218:	00c20004 	movi	r3,2048
    b21c:	e0bff417 	ldw	r2,-48(fp)
    b220:	1885c83a 	sub	r2,r3,r2
    b224:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    b228:	e0bff117 	ldw	r2,-60(fp)
    b22c:	10001e26 	beq	r2,zero,b2a8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    b230:	e0fffe17 	ldw	r3,-8(fp)
    b234:	e0bff117 	ldw	r2,-60(fp)
    b238:	1880022e 	bgeu	r3,r2,b244 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    b23c:	e0bffe17 	ldw	r2,-8(fp)
    b240:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b244:	e0bffc17 	ldw	r2,-16(fp)
    b248:	10c01104 	addi	r3,r2,68
    b24c:	e0bff417 	ldw	r2,-48(fp)
    b250:	1885883a 	add	r2,r3,r2
    b254:	e1bff117 	ldw	r6,-60(fp)
    b258:	100b883a 	mov	r5,r2
    b25c:	e13ff017 	ldw	r4,-64(fp)
    b260:	000caa00 	call	caa0 <memcpy>
      ptr   += n;
    b264:	e0fff017 	ldw	r3,-64(fp)
    b268:	e0bff117 	ldw	r2,-60(fp)
    b26c:	1885883a 	add	r2,r3,r2
    b270:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    b274:	e0fffe17 	ldw	r3,-8(fp)
    b278:	e0bff117 	ldw	r2,-60(fp)
    b27c:	1885c83a 	sub	r2,r3,r2
    b280:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b284:	e0fff417 	ldw	r3,-48(fp)
    b288:	e0bff117 	ldw	r2,-60(fp)
    b28c:	1885883a 	add	r2,r3,r2
    b290:	10c1ffcc 	andi	r3,r2,2047
    b294:	e0bffc17 	ldw	r2,-16(fp)
    b298:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    b29c:	e0bffe17 	ldw	r2,-8(fp)
    b2a0:	00bfcf16 	blt	zero,r2,b1e0 <__alt_data_end+0xffff2b40>
    b2a4:	00000106 	br	b2ac <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b2a8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b2ac:	e0fff017 	ldw	r3,-64(fp)
    b2b0:	e0bffd17 	ldw	r2,-12(fp)
    b2b4:	18802e1e 	bne	r3,r2,b370 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b2b8:	e0bfff17 	ldw	r2,-4(fp)
    b2bc:	1090000c 	andi	r2,r2,16384
    b2c0:	10002d1e 	bne	r2,zero,b378 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    b2c4:	d0a70243 	ldbu	r2,-25591(gp)
    b2c8:	10803fcc 	andi	r2,r2,255
    b2cc:	10800058 	cmpnei	r2,r2,1
    b2d0:	1000161e 	bne	r2,zero,b32c <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    b2d4:	e0bffc17 	ldw	r2,-16(fp)
    b2d8:	10800c17 	ldw	r2,48(r2)
    b2dc:	e0bff215 	stw	r2,-56(fp)
    b2e0:	00800144 	movi	r2,5
    b2e4:	e0bff98d 	sth	r2,-26(fp)
    b2e8:	00bfe0c4 	movi	r2,-125
    b2ec:	e0bffa05 	stb	r2,-24(fp)
    b2f0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    b2f4:	d0a70243 	ldbu	r2,-25591(gp)
    b2f8:	10803fcc 	andi	r2,r2,255
    b2fc:	10001526 	beq	r2,zero,b354 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    b300:	e0fff98b 	ldhu	r3,-26(fp)
    b304:	e13ffa03 	ldbu	r4,-24(fp)
    b308:	e17ffa8b 	ldhu	r5,-22(fp)
    b30c:	e0bffb44 	addi	r2,fp,-19
    b310:	d8800015 	stw	r2,0(sp)
    b314:	280f883a 	mov	r7,r5
    b318:	200d883a 	mov	r6,r4
    b31c:	180b883a 	mov	r5,r3
    b320:	e13ff217 	ldw	r4,-56(fp)
    b324:	0005b800 	call	5b80 <OSFlagPend>
    b328:	00000a06 	br	b354 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b32c:	0001883a 	nop
    b330:	e0bffc17 	ldw	r2,-16(fp)
    b334:	10c00d17 	ldw	r3,52(r2)
    b338:	e0bff317 	ldw	r2,-52(fp)
    b33c:	1880051e 	bne	r3,r2,b354 <altera_avalon_jtag_uart_read+0x1c8>
    b340:	e0bffc17 	ldw	r2,-16(fp)
    b344:	10c00917 	ldw	r3,36(r2)
    b348:	e0bffc17 	ldw	r2,-16(fp)
    b34c:	10800117 	ldw	r2,4(r2)
    b350:	18bff736 	bltu	r3,r2,b330 <__alt_data_end+0xffff2c90>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b354:	e0bffc17 	ldw	r2,-16(fp)
    b358:	10c00d17 	ldw	r3,52(r2)
    b35c:	e0bff317 	ldw	r2,-52(fp)
    b360:	18800726 	beq	r3,r2,b380 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b364:	e0bffe17 	ldw	r2,-8(fp)
    b368:	00bf9d16 	blt	zero,r2,b1e0 <__alt_data_end+0xffff2b40>
    b36c:	00000506 	br	b384 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b370:	0001883a 	nop
    b374:	00000306 	br	b384 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b378:	0001883a 	nop
    b37c:	00000106 	br	b384 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b380:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    b384:	e0bffc17 	ldw	r2,-16(fp)
    b388:	10800a17 	ldw	r2,40(r2)
    b38c:	1009883a 	mov	r4,r2
    b390:	000896c0 	call	896c <OSSemPost>

  if (ptr != buffer)
    b394:	e0fff017 	ldw	r3,-64(fp)
    b398:	e0bffd17 	ldw	r2,-12(fp)
    b39c:	18801826 	beq	r3,r2,b400 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b3a0:	0005303a 	rdctl	r2,status
    b3a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b3a8:	e0fff717 	ldw	r3,-36(fp)
    b3ac:	00bfff84 	movi	r2,-2
    b3b0:	1884703a 	and	r2,r3,r2
    b3b4:	1001703a 	wrctl	status,r2
  
  return context;
    b3b8:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b3bc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b3c0:	e0bffc17 	ldw	r2,-16(fp)
    b3c4:	10800817 	ldw	r2,32(r2)
    b3c8:	10c00054 	ori	r3,r2,1
    b3cc:	e0bffc17 	ldw	r2,-16(fp)
    b3d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b3d4:	e0bffc17 	ldw	r2,-16(fp)
    b3d8:	10800017 	ldw	r2,0(r2)
    b3dc:	10800104 	addi	r2,r2,4
    b3e0:	1007883a 	mov	r3,r2
    b3e4:	e0bffc17 	ldw	r2,-16(fp)
    b3e8:	10800817 	ldw	r2,32(r2)
    b3ec:	18800035 	stwio	r2,0(r3)
    b3f0:	e0bff617 	ldw	r2,-40(fp)
    b3f4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3f8:	e0bff517 	ldw	r2,-44(fp)
    b3fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b400:	e0fff017 	ldw	r3,-64(fp)
    b404:	e0bffd17 	ldw	r2,-12(fp)
    b408:	18800426 	beq	r3,r2,b41c <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    b40c:	e0fff017 	ldw	r3,-64(fp)
    b410:	e0bffd17 	ldw	r2,-12(fp)
    b414:	1885c83a 	sub	r2,r3,r2
    b418:	00000606 	br	b434 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    b41c:	e0bfff17 	ldw	r2,-4(fp)
    b420:	1090000c 	andi	r2,r2,16384
    b424:	10000226 	beq	r2,zero,b430 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    b428:	00bffd44 	movi	r2,-11
    b42c:	00000106 	br	b434 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    b430:	00bffec4 	movi	r2,-5
}
    b434:	e037883a 	mov	sp,fp
    b438:	dfc00117 	ldw	ra,4(sp)
    b43c:	df000017 	ldw	fp,0(sp)
    b440:	dec00204 	addi	sp,sp,8
    b444:	f800283a 	ret

0000b448 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b448:	deffed04 	addi	sp,sp,-76
    b44c:	dfc01215 	stw	ra,72(sp)
    b450:	df001115 	stw	fp,68(sp)
    b454:	df001104 	addi	fp,sp,68
    b458:	e13ffc15 	stw	r4,-16(fp)
    b45c:	e17ffd15 	stw	r5,-12(fp)
    b460:	e1bffe15 	stw	r6,-8(fp)
    b464:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b468:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b46c:	e0bffd17 	ldw	r2,-12(fp)
    b470:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    b474:	e0bffc17 	ldw	r2,-16(fp)
    b478:	10800b17 	ldw	r2,44(r2)
    b47c:	e0bff815 	stw	r2,-32(fp)
    b480:	e03ff90d 	sth	zero,-28(fp)
    b484:	e0bff90b 	ldhu	r2,-28(fp)
    b488:	e0fffb44 	addi	r3,fp,-19
    b48c:	180d883a 	mov	r6,r3
    b490:	100b883a 	mov	r5,r2
    b494:	e13ff817 	ldw	r4,-32(fp)
    b498:	00085f40 	call	85f4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b49c:	00003706 	br	b57c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b4a0:	e0bffc17 	ldw	r2,-16(fp)
    b4a4:	10800f17 	ldw	r2,60(r2)
    b4a8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    b4ac:	e0bffc17 	ldw	r2,-16(fp)
    b4b0:	10801017 	ldw	r2,64(r2)
    b4b4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    b4b8:	e0fff417 	ldw	r3,-48(fp)
    b4bc:	e0bff017 	ldw	r2,-64(fp)
    b4c0:	1880062e 	bgeu	r3,r2,b4dc <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    b4c4:	e0fff017 	ldw	r3,-64(fp)
    b4c8:	e0bff417 	ldw	r2,-48(fp)
    b4cc:	1885c83a 	sub	r2,r3,r2
    b4d0:	10bfffc4 	addi	r2,r2,-1
    b4d4:	e0bff115 	stw	r2,-60(fp)
    b4d8:	00000b06 	br	b508 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    b4dc:	e0bff017 	ldw	r2,-64(fp)
    b4e0:	10000526 	beq	r2,zero,b4f8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b4e4:	00c20004 	movi	r3,2048
    b4e8:	e0bff417 	ldw	r2,-48(fp)
    b4ec:	1885c83a 	sub	r2,r3,r2
    b4f0:	e0bff115 	stw	r2,-60(fp)
    b4f4:	00000406 	br	b508 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b4f8:	00c1ffc4 	movi	r3,2047
    b4fc:	e0bff417 	ldw	r2,-48(fp)
    b500:	1885c83a 	sub	r2,r3,r2
    b504:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    b508:	e0bff117 	ldw	r2,-60(fp)
    b50c:	10001e26 	beq	r2,zero,b588 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    b510:	e0fffe17 	ldw	r3,-8(fp)
    b514:	e0bff117 	ldw	r2,-60(fp)
    b518:	1880022e 	bgeu	r3,r2,b524 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    b51c:	e0bffe17 	ldw	r2,-8(fp)
    b520:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b524:	e0bffc17 	ldw	r2,-16(fp)
    b528:	10c21104 	addi	r3,r2,2116
    b52c:	e0bff417 	ldw	r2,-48(fp)
    b530:	1885883a 	add	r2,r3,r2
    b534:	e1bff117 	ldw	r6,-60(fp)
    b538:	e17ffd17 	ldw	r5,-12(fp)
    b53c:	1009883a 	mov	r4,r2
    b540:	000caa00 	call	caa0 <memcpy>
      ptr   += n;
    b544:	e0fffd17 	ldw	r3,-12(fp)
    b548:	e0bff117 	ldw	r2,-60(fp)
    b54c:	1885883a 	add	r2,r3,r2
    b550:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b554:	e0fffe17 	ldw	r3,-8(fp)
    b558:	e0bff117 	ldw	r2,-60(fp)
    b55c:	1885c83a 	sub	r2,r3,r2
    b560:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b564:	e0fff417 	ldw	r3,-48(fp)
    b568:	e0bff117 	ldw	r2,-60(fp)
    b56c:	1885883a 	add	r2,r3,r2
    b570:	10c1ffcc 	andi	r3,r2,2047
    b574:	e0bffc17 	ldw	r2,-16(fp)
    b578:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b57c:	e0bffe17 	ldw	r2,-8(fp)
    b580:	00bfc716 	blt	zero,r2,b4a0 <__alt_data_end+0xffff2e00>
    b584:	00000106 	br	b58c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b588:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b58c:	0005303a 	rdctl	r2,status
    b590:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b594:	e0fff717 	ldw	r3,-36(fp)
    b598:	00bfff84 	movi	r2,-2
    b59c:	1884703a 	and	r2,r3,r2
    b5a0:	1001703a 	wrctl	status,r2
  
  return context;
    b5a4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b5a8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b5ac:	e0bffc17 	ldw	r2,-16(fp)
    b5b0:	10800817 	ldw	r2,32(r2)
    b5b4:	10c00094 	ori	r3,r2,2
    b5b8:	e0bffc17 	ldw	r2,-16(fp)
    b5bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b5c0:	e0bffc17 	ldw	r2,-16(fp)
    b5c4:	10800017 	ldw	r2,0(r2)
    b5c8:	10800104 	addi	r2,r2,4
    b5cc:	1007883a 	mov	r3,r2
    b5d0:	e0bffc17 	ldw	r2,-16(fp)
    b5d4:	10800817 	ldw	r2,32(r2)
    b5d8:	18800035 	stwio	r2,0(r3)
    b5dc:	e0bff617 	ldw	r2,-40(fp)
    b5e0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5e4:	e0bff317 	ldw	r2,-52(fp)
    b5e8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b5ec:	e0bffe17 	ldw	r2,-8(fp)
    b5f0:	00802a0e 	bge	zero,r2,b69c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    b5f4:	e0bfff17 	ldw	r2,-4(fp)
    b5f8:	1090000c 	andi	r2,r2,16384
    b5fc:	10002a1e 	bne	r2,zero,b6a8 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    b600:	d0a70243 	ldbu	r2,-25591(gp)
    b604:	10803fcc 	andi	r2,r2,255
    b608:	10800058 	cmpnei	r2,r2,1
    b60c:	1000161e 	bne	r2,zero,b668 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    b610:	e0bffc17 	ldw	r2,-16(fp)
    b614:	10800c17 	ldw	r2,48(r2)
    b618:	e0bff515 	stw	r2,-44(fp)
    b61c:	00800184 	movi	r2,6
    b620:	e0bff98d 	sth	r2,-26(fp)
    b624:	00bfe0c4 	movi	r2,-125
    b628:	e0bffa05 	stb	r2,-24(fp)
    b62c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    b630:	d0a70243 	ldbu	r2,-25591(gp)
    b634:	10803fcc 	andi	r2,r2,255
    b638:	10001526 	beq	r2,zero,b690 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    b63c:	e0fff98b 	ldhu	r3,-26(fp)
    b640:	e13ffa03 	ldbu	r4,-24(fp)
    b644:	e17ffa8b 	ldhu	r5,-22(fp)
    b648:	e0bffb04 	addi	r2,fp,-20
    b64c:	d8800015 	stw	r2,0(sp)
    b650:	280f883a 	mov	r7,r5
    b654:	200d883a 	mov	r6,r4
    b658:	180b883a 	mov	r5,r3
    b65c:	e13ff517 	ldw	r4,-44(fp)
    b660:	0005b800 	call	5b80 <OSFlagPend>
    b664:	00000a06 	br	b690 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b668:	0001883a 	nop
    b66c:	e0bffc17 	ldw	r2,-16(fp)
    b670:	10c01017 	ldw	r3,64(r2)
    b674:	e0bff017 	ldw	r2,-64(fp)
    b678:	1880051e 	bne	r3,r2,b690 <altera_avalon_jtag_uart_write+0x248>
    b67c:	e0bffc17 	ldw	r2,-16(fp)
    b680:	10c00917 	ldw	r3,36(r2)
    b684:	e0bffc17 	ldw	r2,-16(fp)
    b688:	10800117 	ldw	r2,4(r2)
    b68c:	18bff736 	bltu	r3,r2,b66c <__alt_data_end+0xffff2fcc>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b690:	e0bffc17 	ldw	r2,-16(fp)
    b694:	10800917 	ldw	r2,36(r2)
    b698:	1000051e 	bne	r2,zero,b6b0 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    b69c:	e0bffe17 	ldw	r2,-8(fp)
    b6a0:	00bfb616 	blt	zero,r2,b57c <__alt_data_end+0xffff2edc>
    b6a4:	00000306 	br	b6b4 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b6a8:	0001883a 	nop
    b6ac:	00000106 	br	b6b4 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    b6b0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    b6b4:	e0bffc17 	ldw	r2,-16(fp)
    b6b8:	10800b17 	ldw	r2,44(r2)
    b6bc:	1009883a 	mov	r4,r2
    b6c0:	000896c0 	call	896c <OSSemPost>

  if (ptr != start)
    b6c4:	e0fffd17 	ldw	r3,-12(fp)
    b6c8:	e0bff217 	ldw	r2,-56(fp)
    b6cc:	18800426 	beq	r3,r2,b6e0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    b6d0:	e0fffd17 	ldw	r3,-12(fp)
    b6d4:	e0bff217 	ldw	r2,-56(fp)
    b6d8:	1885c83a 	sub	r2,r3,r2
    b6dc:	00000606 	br	b6f8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    b6e0:	e0bfff17 	ldw	r2,-4(fp)
    b6e4:	1090000c 	andi	r2,r2,16384
    b6e8:	10000226 	beq	r2,zero,b6f4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    b6ec:	00bffd44 	movi	r2,-11
    b6f0:	00000106 	br	b6f8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b6f4:	00bffec4 	movi	r2,-5
}
    b6f8:	e037883a 	mov	sp,fp
    b6fc:	dfc00117 	ldw	ra,4(sp)
    b700:	df000017 	ldw	fp,0(sp)
    b704:	dec00204 	addi	sp,sp,8
    b708:	f800283a 	ret

0000b70c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b70c:	defffa04 	addi	sp,sp,-24
    b710:	dfc00515 	stw	ra,20(sp)
    b714:	df000415 	stw	fp,16(sp)
    b718:	df000404 	addi	fp,sp,16
    b71c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b720:	0007883a 	mov	r3,zero
    b724:	e0bfff17 	ldw	r2,-4(fp)
    b728:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b72c:	e0bfff17 	ldw	r2,-4(fp)
    b730:	10800104 	addi	r2,r2,4
    b734:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b738:	0005303a 	rdctl	r2,status
    b73c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b740:	e0fffd17 	ldw	r3,-12(fp)
    b744:	00bfff84 	movi	r2,-2
    b748:	1884703a 	and	r2,r3,r2
    b74c:	1001703a 	wrctl	status,r2
  
  return context;
    b750:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b754:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    b758:	000c22c0 	call	c22c <alt_tick>
    b75c:	e0bffc17 	ldw	r2,-16(fp)
    b760:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b764:	e0bffe17 	ldw	r2,-8(fp)
    b768:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b76c:	0001883a 	nop
    b770:	e037883a 	mov	sp,fp
    b774:	dfc00117 	ldw	ra,4(sp)
    b778:	df000017 	ldw	fp,0(sp)
    b77c:	dec00204 	addi	sp,sp,8
    b780:	f800283a 	ret

0000b784 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b784:	defff804 	addi	sp,sp,-32
    b788:	dfc00715 	stw	ra,28(sp)
    b78c:	df000615 	stw	fp,24(sp)
    b790:	df000604 	addi	fp,sp,24
    b794:	e13ffc15 	stw	r4,-16(fp)
    b798:	e17ffd15 	stw	r5,-12(fp)
    b79c:	e1bffe15 	stw	r6,-8(fp)
    b7a0:	e1ffff15 	stw	r7,-4(fp)
    b7a4:	e0bfff17 	ldw	r2,-4(fp)
    b7a8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b7ac:	d0a71717 	ldw	r2,-25508(gp)
    b7b0:	1000021e 	bne	r2,zero,b7bc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    b7b4:	e0bffb17 	ldw	r2,-20(fp)
    b7b8:	d0a71715 	stw	r2,-25508(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b7bc:	e0bffc17 	ldw	r2,-16(fp)
    b7c0:	10800104 	addi	r2,r2,4
    b7c4:	00c001c4 	movi	r3,7
    b7c8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b7cc:	d8000015 	stw	zero,0(sp)
    b7d0:	e1fffc17 	ldw	r7,-16(fp)
    b7d4:	01800074 	movhi	r6,1
    b7d8:	31adc304 	addi	r6,r6,-18676
    b7dc:	e17ffe17 	ldw	r5,-8(fp)
    b7e0:	e13ffd17 	ldw	r4,-12(fp)
    b7e4:	000bb0c0 	call	bb0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b7e8:	0001883a 	nop
    b7ec:	e037883a 	mov	sp,fp
    b7f0:	dfc00117 	ldw	ra,4(sp)
    b7f4:	df000017 	ldw	fp,0(sp)
    b7f8:	dec00204 	addi	sp,sp,8
    b7fc:	f800283a 	ret

0000b800 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b800:	defff504 	addi	sp,sp,-44
    b804:	df000a15 	stw	fp,40(sp)
    b808:	df000a04 	addi	fp,sp,40
    b80c:	e13ffc15 	stw	r4,-16(fp)
    b810:	e17ffd15 	stw	r5,-12(fp)
    b814:	e1bffe15 	stw	r6,-8(fp)
    b818:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b81c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b820:	d0a71717 	ldw	r2,-25508(gp)
  
  if (alt_ticks_per_second ())
    b824:	10003c26 	beq	r2,zero,b918 <alt_alarm_start+0x118>
  {
    if (alarm)
    b828:	e0bffc17 	ldw	r2,-16(fp)
    b82c:	10003826 	beq	r2,zero,b910 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b830:	e0bffc17 	ldw	r2,-16(fp)
    b834:	e0fffe17 	ldw	r3,-8(fp)
    b838:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b83c:	e0bffc17 	ldw	r2,-16(fp)
    b840:	e0ffff17 	ldw	r3,-4(fp)
    b844:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b848:	0005303a 	rdctl	r2,status
    b84c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b850:	e0fff917 	ldw	r3,-28(fp)
    b854:	00bfff84 	movi	r2,-2
    b858:	1884703a 	and	r2,r3,r2
    b85c:	1001703a 	wrctl	status,r2
  
  return context;
    b860:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b864:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b868:	d0a71817 	ldw	r2,-25504(gp)
      
      current_nticks = alt_nticks();
    b86c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b870:	e0fffd17 	ldw	r3,-12(fp)
    b874:	e0bff617 	ldw	r2,-40(fp)
    b878:	1885883a 	add	r2,r3,r2
    b87c:	10c00044 	addi	r3,r2,1
    b880:	e0bffc17 	ldw	r2,-16(fp)
    b884:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b888:	e0bffc17 	ldw	r2,-16(fp)
    b88c:	10c00217 	ldw	r3,8(r2)
    b890:	e0bff617 	ldw	r2,-40(fp)
    b894:	1880042e 	bgeu	r3,r2,b8a8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b898:	e0bffc17 	ldw	r2,-16(fp)
    b89c:	00c00044 	movi	r3,1
    b8a0:	10c00405 	stb	r3,16(r2)
    b8a4:	00000206 	br	b8b0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b8a8:	e0bffc17 	ldw	r2,-16(fp)
    b8ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b8b0:	e0bffc17 	ldw	r2,-16(fp)
    b8b4:	d0e02b04 	addi	r3,gp,-32596
    b8b8:	e0fffa15 	stw	r3,-24(fp)
    b8bc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b8c0:	e0bffb17 	ldw	r2,-20(fp)
    b8c4:	e0fffa17 	ldw	r3,-24(fp)
    b8c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b8cc:	e0bffa17 	ldw	r2,-24(fp)
    b8d0:	10c00017 	ldw	r3,0(r2)
    b8d4:	e0bffb17 	ldw	r2,-20(fp)
    b8d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b8dc:	e0bffa17 	ldw	r2,-24(fp)
    b8e0:	10800017 	ldw	r2,0(r2)
    b8e4:	e0fffb17 	ldw	r3,-20(fp)
    b8e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b8ec:	e0bffa17 	ldw	r2,-24(fp)
    b8f0:	e0fffb17 	ldw	r3,-20(fp)
    b8f4:	10c00015 	stw	r3,0(r2)
    b8f8:	e0bff817 	ldw	r2,-32(fp)
    b8fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b900:	e0bff717 	ldw	r2,-36(fp)
    b904:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b908:	0005883a 	mov	r2,zero
    b90c:	00000306 	br	b91c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b910:	00bffa84 	movi	r2,-22
    b914:	00000106 	br	b91c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b918:	00bfde84 	movi	r2,-134
  }
}
    b91c:	e037883a 	mov	sp,fp
    b920:	df000017 	ldw	fp,0(sp)
    b924:	dec00104 	addi	sp,sp,4
    b928:	f800283a 	ret

0000b92c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b92c:	deffff04 	addi	sp,sp,-4
    b930:	df000015 	stw	fp,0(sp)
    b934:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b938:	0001883a 	nop
    b93c:	e037883a 	mov	sp,fp
    b940:	df000017 	ldw	fp,0(sp)
    b944:	dec00104 	addi	sp,sp,4
    b948:	f800283a 	ret

0000b94c <alt_get_errno>:
    b94c:	defffe04 	addi	sp,sp,-8
    b950:	dfc00115 	stw	ra,4(sp)
    b954:	df000015 	stw	fp,0(sp)
    b958:	d839883a 	mov	fp,sp
    b95c:	d0a00917 	ldw	r2,-32732(gp)
    b960:	10000326 	beq	r2,zero,b970 <alt_get_errno+0x24>
    b964:	d0a00917 	ldw	r2,-32732(gp)
    b968:	103ee83a 	callr	r2
    b96c:	00000106 	br	b974 <alt_get_errno+0x28>
    b970:	d0a6f904 	addi	r2,gp,-25628
    b974:	e037883a 	mov	sp,fp
    b978:	dfc00117 	ldw	ra,4(sp)
    b97c:	df000017 	ldw	fp,0(sp)
    b980:	dec00204 	addi	sp,sp,8
    b984:	f800283a 	ret

0000b988 <alt_dev_llist_insert>:
    b988:	defffa04 	addi	sp,sp,-24
    b98c:	dfc00515 	stw	ra,20(sp)
    b990:	df000415 	stw	fp,16(sp)
    b994:	df000404 	addi	fp,sp,16
    b998:	e13ffe15 	stw	r4,-8(fp)
    b99c:	e17fff15 	stw	r5,-4(fp)
    b9a0:	e0bffe17 	ldw	r2,-8(fp)
    b9a4:	10000326 	beq	r2,zero,b9b4 <alt_dev_llist_insert+0x2c>
    b9a8:	e0bffe17 	ldw	r2,-8(fp)
    b9ac:	10800217 	ldw	r2,8(r2)
    b9b0:	1000061e 	bne	r2,zero,b9cc <alt_dev_llist_insert+0x44>
    b9b4:	000b94c0 	call	b94c <alt_get_errno>
    b9b8:	1007883a 	mov	r3,r2
    b9bc:	00800584 	movi	r2,22
    b9c0:	18800015 	stw	r2,0(r3)
    b9c4:	00bffa84 	movi	r2,-22
    b9c8:	00001306 	br	ba18 <alt_dev_llist_insert+0x90>
    b9cc:	e0bffe17 	ldw	r2,-8(fp)
    b9d0:	e0ffff17 	ldw	r3,-4(fp)
    b9d4:	e0fffc15 	stw	r3,-16(fp)
    b9d8:	e0bffd15 	stw	r2,-12(fp)
    b9dc:	e0bffd17 	ldw	r2,-12(fp)
    b9e0:	e0fffc17 	ldw	r3,-16(fp)
    b9e4:	10c00115 	stw	r3,4(r2)
    b9e8:	e0bffc17 	ldw	r2,-16(fp)
    b9ec:	10c00017 	ldw	r3,0(r2)
    b9f0:	e0bffd17 	ldw	r2,-12(fp)
    b9f4:	10c00015 	stw	r3,0(r2)
    b9f8:	e0bffc17 	ldw	r2,-16(fp)
    b9fc:	10800017 	ldw	r2,0(r2)
    ba00:	e0fffd17 	ldw	r3,-12(fp)
    ba04:	10c00115 	stw	r3,4(r2)
    ba08:	e0bffc17 	ldw	r2,-16(fp)
    ba0c:	e0fffd17 	ldw	r3,-12(fp)
    ba10:	10c00015 	stw	r3,0(r2)
    ba14:	0005883a 	mov	r2,zero
    ba18:	e037883a 	mov	sp,fp
    ba1c:	dfc00117 	ldw	ra,4(sp)
    ba20:	df000017 	ldw	fp,0(sp)
    ba24:	dec00204 	addi	sp,sp,8
    ba28:	f800283a 	ret

0000ba2c <_do_ctors>:
    ba2c:	defffd04 	addi	sp,sp,-12
    ba30:	dfc00215 	stw	ra,8(sp)
    ba34:	df000115 	stw	fp,4(sp)
    ba38:	df000104 	addi	fp,sp,4
    ba3c:	00800074 	movhi	r2,1
    ba40:	10b43f04 	addi	r2,r2,-12036
    ba44:	e0bfff15 	stw	r2,-4(fp)
    ba48:	00000606 	br	ba64 <_do_ctors+0x38>
    ba4c:	e0bfff17 	ldw	r2,-4(fp)
    ba50:	10800017 	ldw	r2,0(r2)
    ba54:	103ee83a 	callr	r2
    ba58:	e0bfff17 	ldw	r2,-4(fp)
    ba5c:	10bfff04 	addi	r2,r2,-4
    ba60:	e0bfff15 	stw	r2,-4(fp)
    ba64:	e0ffff17 	ldw	r3,-4(fp)
    ba68:	00800074 	movhi	r2,1
    ba6c:	10b44004 	addi	r2,r2,-12032
    ba70:	18bff62e 	bgeu	r3,r2,ba4c <__alt_data_end+0xffff33ac>
    ba74:	0001883a 	nop
    ba78:	e037883a 	mov	sp,fp
    ba7c:	dfc00117 	ldw	ra,4(sp)
    ba80:	df000017 	ldw	fp,0(sp)
    ba84:	dec00204 	addi	sp,sp,8
    ba88:	f800283a 	ret

0000ba8c <_do_dtors>:
    ba8c:	defffd04 	addi	sp,sp,-12
    ba90:	dfc00215 	stw	ra,8(sp)
    ba94:	df000115 	stw	fp,4(sp)
    ba98:	df000104 	addi	fp,sp,4
    ba9c:	00800074 	movhi	r2,1
    baa0:	10b43f04 	addi	r2,r2,-12036
    baa4:	e0bfff15 	stw	r2,-4(fp)
    baa8:	00000606 	br	bac4 <_do_dtors+0x38>
    baac:	e0bfff17 	ldw	r2,-4(fp)
    bab0:	10800017 	ldw	r2,0(r2)
    bab4:	103ee83a 	callr	r2
    bab8:	e0bfff17 	ldw	r2,-4(fp)
    babc:	10bfff04 	addi	r2,r2,-4
    bac0:	e0bfff15 	stw	r2,-4(fp)
    bac4:	e0ffff17 	ldw	r3,-4(fp)
    bac8:	00800074 	movhi	r2,1
    bacc:	10b44004 	addi	r2,r2,-12032
    bad0:	18bff62e 	bgeu	r3,r2,baac <__alt_data_end+0xffff340c>
    bad4:	0001883a 	nop
    bad8:	e037883a 	mov	sp,fp
    badc:	dfc00117 	ldw	ra,4(sp)
    bae0:	df000017 	ldw	fp,0(sp)
    bae4:	dec00204 	addi	sp,sp,8
    bae8:	f800283a 	ret

0000baec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    baec:	deffff04 	addi	sp,sp,-4
    baf0:	df000015 	stw	fp,0(sp)
    baf4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    baf8:	0001883a 	nop
    bafc:	e037883a 	mov	sp,fp
    bb00:	df000017 	ldw	fp,0(sp)
    bb04:	dec00104 	addi	sp,sp,4
    bb08:	f800283a 	ret

0000bb0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bb0c:	defff904 	addi	sp,sp,-28
    bb10:	dfc00615 	stw	ra,24(sp)
    bb14:	df000515 	stw	fp,20(sp)
    bb18:	df000504 	addi	fp,sp,20
    bb1c:	e13ffc15 	stw	r4,-16(fp)
    bb20:	e17ffd15 	stw	r5,-12(fp)
    bb24:	e1bffe15 	stw	r6,-8(fp)
    bb28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bb2c:	e0800217 	ldw	r2,8(fp)
    bb30:	d8800015 	stw	r2,0(sp)
    bb34:	e1ffff17 	ldw	r7,-4(fp)
    bb38:	e1bffe17 	ldw	r6,-8(fp)
    bb3c:	e17ffd17 	ldw	r5,-12(fp)
    bb40:	e13ffc17 	ldw	r4,-16(fp)
    bb44:	000bcbc0 	call	bcbc <alt_iic_isr_register>
}  
    bb48:	e037883a 	mov	sp,fp
    bb4c:	dfc00117 	ldw	ra,4(sp)
    bb50:	df000017 	ldw	fp,0(sp)
    bb54:	dec00204 	addi	sp,sp,8
    bb58:	f800283a 	ret

0000bb5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bb5c:	defff904 	addi	sp,sp,-28
    bb60:	df000615 	stw	fp,24(sp)
    bb64:	df000604 	addi	fp,sp,24
    bb68:	e13ffe15 	stw	r4,-8(fp)
    bb6c:	e17fff15 	stw	r5,-4(fp)
    bb70:	e0bfff17 	ldw	r2,-4(fp)
    bb74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb78:	0005303a 	rdctl	r2,status
    bb7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb80:	e0fffb17 	ldw	r3,-20(fp)
    bb84:	00bfff84 	movi	r2,-2
    bb88:	1884703a 	and	r2,r3,r2
    bb8c:	1001703a 	wrctl	status,r2
  
  return context;
    bb90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bb94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    bb98:	00c00044 	movi	r3,1
    bb9c:	e0bffa17 	ldw	r2,-24(fp)
    bba0:	1884983a 	sll	r2,r3,r2
    bba4:	1007883a 	mov	r3,r2
    bba8:	d0a71617 	ldw	r2,-25512(gp)
    bbac:	1884b03a 	or	r2,r3,r2
    bbb0:	d0a71615 	stw	r2,-25512(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bbb4:	d0a71617 	ldw	r2,-25512(gp)
    bbb8:	100170fa 	wrctl	ienable,r2
    bbbc:	e0bffc17 	ldw	r2,-16(fp)
    bbc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbc4:	e0bffd17 	ldw	r2,-12(fp)
    bbc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bbcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    bbd0:	0001883a 	nop
}
    bbd4:	e037883a 	mov	sp,fp
    bbd8:	df000017 	ldw	fp,0(sp)
    bbdc:	dec00104 	addi	sp,sp,4
    bbe0:	f800283a 	ret

0000bbe4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bbe4:	defff904 	addi	sp,sp,-28
    bbe8:	df000615 	stw	fp,24(sp)
    bbec:	df000604 	addi	fp,sp,24
    bbf0:	e13ffe15 	stw	r4,-8(fp)
    bbf4:	e17fff15 	stw	r5,-4(fp)
    bbf8:	e0bfff17 	ldw	r2,-4(fp)
    bbfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bc00:	0005303a 	rdctl	r2,status
    bc04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc08:	e0fffb17 	ldw	r3,-20(fp)
    bc0c:	00bfff84 	movi	r2,-2
    bc10:	1884703a 	and	r2,r3,r2
    bc14:	1001703a 	wrctl	status,r2
  
  return context;
    bc18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bc1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    bc20:	00c00044 	movi	r3,1
    bc24:	e0bffa17 	ldw	r2,-24(fp)
    bc28:	1884983a 	sll	r2,r3,r2
    bc2c:	0084303a 	nor	r2,zero,r2
    bc30:	1007883a 	mov	r3,r2
    bc34:	d0a71617 	ldw	r2,-25512(gp)
    bc38:	1884703a 	and	r2,r3,r2
    bc3c:	d0a71615 	stw	r2,-25512(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bc40:	d0a71617 	ldw	r2,-25512(gp)
    bc44:	100170fa 	wrctl	ienable,r2
    bc48:	e0bffc17 	ldw	r2,-16(fp)
    bc4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc50:	e0bffd17 	ldw	r2,-12(fp)
    bc54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bc58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    bc5c:	0001883a 	nop
}
    bc60:	e037883a 	mov	sp,fp
    bc64:	df000017 	ldw	fp,0(sp)
    bc68:	dec00104 	addi	sp,sp,4
    bc6c:	f800283a 	ret

0000bc70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    bc70:	defffc04 	addi	sp,sp,-16
    bc74:	df000315 	stw	fp,12(sp)
    bc78:	df000304 	addi	fp,sp,12
    bc7c:	e13ffe15 	stw	r4,-8(fp)
    bc80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bc84:	000530fa 	rdctl	r2,ienable
    bc88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    bc8c:	00c00044 	movi	r3,1
    bc90:	e0bfff17 	ldw	r2,-4(fp)
    bc94:	1884983a 	sll	r2,r3,r2
    bc98:	1007883a 	mov	r3,r2
    bc9c:	e0bffd17 	ldw	r2,-12(fp)
    bca0:	1884703a 	and	r2,r3,r2
    bca4:	1004c03a 	cmpne	r2,r2,zero
    bca8:	10803fcc 	andi	r2,r2,255
}
    bcac:	e037883a 	mov	sp,fp
    bcb0:	df000017 	ldw	fp,0(sp)
    bcb4:	dec00104 	addi	sp,sp,4
    bcb8:	f800283a 	ret

0000bcbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bcbc:	defff504 	addi	sp,sp,-44
    bcc0:	dfc00a15 	stw	ra,40(sp)
    bcc4:	df000915 	stw	fp,36(sp)
    bcc8:	df000904 	addi	fp,sp,36
    bccc:	e13ffc15 	stw	r4,-16(fp)
    bcd0:	e17ffd15 	stw	r5,-12(fp)
    bcd4:	e1bffe15 	stw	r6,-8(fp)
    bcd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    bcdc:	00bffa84 	movi	r2,-22
    bce0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bce4:	e0bffd17 	ldw	r2,-12(fp)
    bce8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bcec:	e0bff817 	ldw	r2,-32(fp)
    bcf0:	10800808 	cmpgei	r2,r2,32
    bcf4:	1000271e 	bne	r2,zero,bd94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bcf8:	0005303a 	rdctl	r2,status
    bcfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd00:	e0fffb17 	ldw	r3,-20(fp)
    bd04:	00bfff84 	movi	r2,-2
    bd08:	1884703a 	and	r2,r3,r2
    bd0c:	1001703a 	wrctl	status,r2
  
  return context;
    bd10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bd14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    bd18:	00800074 	movhi	r2,1
    bd1c:	109ee204 	addi	r2,r2,31624
    bd20:	e0fff817 	ldw	r3,-32(fp)
    bd24:	180690fa 	slli	r3,r3,3
    bd28:	10c5883a 	add	r2,r2,r3
    bd2c:	e0fffe17 	ldw	r3,-8(fp)
    bd30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    bd34:	00800074 	movhi	r2,1
    bd38:	109ee204 	addi	r2,r2,31624
    bd3c:	e0fff817 	ldw	r3,-32(fp)
    bd40:	180690fa 	slli	r3,r3,3
    bd44:	10c5883a 	add	r2,r2,r3
    bd48:	10800104 	addi	r2,r2,4
    bd4c:	e0ffff17 	ldw	r3,-4(fp)
    bd50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bd54:	e0bffe17 	ldw	r2,-8(fp)
    bd58:	10000526 	beq	r2,zero,bd70 <alt_iic_isr_register+0xb4>
    bd5c:	e0bff817 	ldw	r2,-32(fp)
    bd60:	100b883a 	mov	r5,r2
    bd64:	e13ffc17 	ldw	r4,-16(fp)
    bd68:	000bb5c0 	call	bb5c <alt_ic_irq_enable>
    bd6c:	00000406 	br	bd80 <alt_iic_isr_register+0xc4>
    bd70:	e0bff817 	ldw	r2,-32(fp)
    bd74:	100b883a 	mov	r5,r2
    bd78:	e13ffc17 	ldw	r4,-16(fp)
    bd7c:	000bbe40 	call	bbe4 <alt_ic_irq_disable>
    bd80:	e0bff715 	stw	r2,-36(fp)
    bd84:	e0bffa17 	ldw	r2,-24(fp)
    bd88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd8c:	e0bff917 	ldw	r2,-28(fp)
    bd90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bd94:	e0bff717 	ldw	r2,-36(fp)
}
    bd98:	e037883a 	mov	sp,fp
    bd9c:	dfc00117 	ldw	ra,4(sp)
    bda0:	df000017 	ldw	fp,0(sp)
    bda4:	dec00204 	addi	sp,sp,8
    bda8:	f800283a 	ret

0000bdac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bdac:	defff804 	addi	sp,sp,-32
    bdb0:	dfc00715 	stw	ra,28(sp)
    bdb4:	df000615 	stw	fp,24(sp)
    bdb8:	dc000515 	stw	r16,20(sp)
    bdbc:	df000604 	addi	fp,sp,24
    bdc0:	e13ffb15 	stw	r4,-20(fp)
    bdc4:	e17ffc15 	stw	r5,-16(fp)
    bdc8:	e1bffd15 	stw	r6,-12(fp)
    bdcc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    bdd0:	e1bffe17 	ldw	r6,-8(fp)
    bdd4:	e17ffd17 	ldw	r5,-12(fp)
    bdd8:	e13ffc17 	ldw	r4,-16(fp)
    bddc:	000c0340 	call	c034 <open>
    bde0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    bde4:	e0bffa17 	ldw	r2,-24(fp)
    bde8:	10002216 	blt	r2,zero,be74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bdec:	04000074 	movhi	r16,1
    bdf0:	8436af04 	addi	r16,r16,-9540
    bdf4:	e0bffa17 	ldw	r2,-24(fp)
    bdf8:	01400304 	movi	r5,12
    bdfc:	1009883a 	mov	r4,r2
    be00:	000244c0 	call	244c <__mulsi3>
    be04:	8085883a 	add	r2,r16,r2
    be08:	10c00017 	ldw	r3,0(r2)
    be0c:	e0bffb17 	ldw	r2,-20(fp)
    be10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    be14:	04000074 	movhi	r16,1
    be18:	8436af04 	addi	r16,r16,-9540
    be1c:	e0bffa17 	ldw	r2,-24(fp)
    be20:	01400304 	movi	r5,12
    be24:	1009883a 	mov	r4,r2
    be28:	000244c0 	call	244c <__mulsi3>
    be2c:	8085883a 	add	r2,r16,r2
    be30:	10800104 	addi	r2,r2,4
    be34:	10c00017 	ldw	r3,0(r2)
    be38:	e0bffb17 	ldw	r2,-20(fp)
    be3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    be40:	04000074 	movhi	r16,1
    be44:	8436af04 	addi	r16,r16,-9540
    be48:	e0bffa17 	ldw	r2,-24(fp)
    be4c:	01400304 	movi	r5,12
    be50:	1009883a 	mov	r4,r2
    be54:	000244c0 	call	244c <__mulsi3>
    be58:	8085883a 	add	r2,r16,r2
    be5c:	10800204 	addi	r2,r2,8
    be60:	10c00017 	ldw	r3,0(r2)
    be64:	e0bffb17 	ldw	r2,-20(fp)
    be68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    be6c:	e13ffa17 	ldw	r4,-24(fp)
    be70:	0002b900 	call	2b90 <alt_release_fd>
  }
} 
    be74:	0001883a 	nop
    be78:	e6ffff04 	addi	sp,fp,-4
    be7c:	dfc00217 	ldw	ra,8(sp)
    be80:	df000117 	ldw	fp,4(sp)
    be84:	dc000017 	ldw	r16,0(sp)
    be88:	dec00304 	addi	sp,sp,12
    be8c:	f800283a 	ret

0000be90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    be90:	defffb04 	addi	sp,sp,-20
    be94:	dfc00415 	stw	ra,16(sp)
    be98:	df000315 	stw	fp,12(sp)
    be9c:	df000304 	addi	fp,sp,12
    bea0:	e13ffd15 	stw	r4,-12(fp)
    bea4:	e17ffe15 	stw	r5,-8(fp)
    bea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    beac:	01c07fc4 	movi	r7,511
    beb0:	01800044 	movi	r6,1
    beb4:	e17ffd17 	ldw	r5,-12(fp)
    beb8:	01000074 	movhi	r4,1
    bebc:	2136b204 	addi	r4,r4,-9528
    bec0:	000bdac0 	call	bdac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bec4:	01c07fc4 	movi	r7,511
    bec8:	000d883a 	mov	r6,zero
    becc:	e17ffe17 	ldw	r5,-8(fp)
    bed0:	01000074 	movhi	r4,1
    bed4:	2136af04 	addi	r4,r4,-9540
    bed8:	000bdac0 	call	bdac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bedc:	01c07fc4 	movi	r7,511
    bee0:	01800044 	movi	r6,1
    bee4:	e17fff17 	ldw	r5,-4(fp)
    bee8:	01000074 	movhi	r4,1
    beec:	2136b504 	addi	r4,r4,-9516
    bef0:	000bdac0 	call	bdac <alt_open_fd>
}  
    bef4:	0001883a 	nop
    bef8:	e037883a 	mov	sp,fp
    befc:	dfc00117 	ldw	ra,4(sp)
    bf00:	df000017 	ldw	fp,0(sp)
    bf04:	dec00204 	addi	sp,sp,8
    bf08:	f800283a 	ret

0000bf0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf0c:	defffe04 	addi	sp,sp,-8
    bf10:	dfc00115 	stw	ra,4(sp)
    bf14:	df000015 	stw	fp,0(sp)
    bf18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf1c:	d0a00917 	ldw	r2,-32732(gp)
    bf20:	10000326 	beq	r2,zero,bf30 <alt_get_errno+0x24>
    bf24:	d0a00917 	ldw	r2,-32732(gp)
    bf28:	103ee83a 	callr	r2
    bf2c:	00000106 	br	bf34 <alt_get_errno+0x28>
    bf30:	d0a6f904 	addi	r2,gp,-25628
}
    bf34:	e037883a 	mov	sp,fp
    bf38:	dfc00117 	ldw	ra,4(sp)
    bf3c:	df000017 	ldw	fp,0(sp)
    bf40:	dec00204 	addi	sp,sp,8
    bf44:	f800283a 	ret

0000bf48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bf48:	defffb04 	addi	sp,sp,-20
    bf4c:	dfc00415 	stw	ra,16(sp)
    bf50:	df000315 	stw	fp,12(sp)
    bf54:	dc000215 	stw	r16,8(sp)
    bf58:	df000304 	addi	fp,sp,12
    bf5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bf60:	e0bffe17 	ldw	r2,-8(fp)
    bf64:	10800217 	ldw	r2,8(r2)
    bf68:	10d00034 	orhi	r3,r2,16384
    bf6c:	e0bffe17 	ldw	r2,-8(fp)
    bf70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bf74:	e03ffd15 	stw	zero,-12(fp)
    bf78:	00002306 	br	c008 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bf7c:	04000074 	movhi	r16,1
    bf80:	8436af04 	addi	r16,r16,-9540
    bf84:	e0bffd17 	ldw	r2,-12(fp)
    bf88:	01400304 	movi	r5,12
    bf8c:	1009883a 	mov	r4,r2
    bf90:	000244c0 	call	244c <__mulsi3>
    bf94:	8085883a 	add	r2,r16,r2
    bf98:	10c00017 	ldw	r3,0(r2)
    bf9c:	e0bffe17 	ldw	r2,-8(fp)
    bfa0:	10800017 	ldw	r2,0(r2)
    bfa4:	1880151e 	bne	r3,r2,bffc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfa8:	04000074 	movhi	r16,1
    bfac:	8436af04 	addi	r16,r16,-9540
    bfb0:	e0bffd17 	ldw	r2,-12(fp)
    bfb4:	01400304 	movi	r5,12
    bfb8:	1009883a 	mov	r4,r2
    bfbc:	000244c0 	call	244c <__mulsi3>
    bfc0:	8085883a 	add	r2,r16,r2
    bfc4:	10800204 	addi	r2,r2,8
    bfc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bfcc:	10000b0e 	bge	r2,zero,bffc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bfd0:	01400304 	movi	r5,12
    bfd4:	e13ffd17 	ldw	r4,-12(fp)
    bfd8:	000244c0 	call	244c <__mulsi3>
    bfdc:	1007883a 	mov	r3,r2
    bfe0:	00800074 	movhi	r2,1
    bfe4:	10b6af04 	addi	r2,r2,-9540
    bfe8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfec:	e0bffe17 	ldw	r2,-8(fp)
    bff0:	18800226 	beq	r3,r2,bffc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bff4:	00bffcc4 	movi	r2,-13
    bff8:	00000806 	br	c01c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bffc:	e0bffd17 	ldw	r2,-12(fp)
    c000:	10800044 	addi	r2,r2,1
    c004:	e0bffd15 	stw	r2,-12(fp)
    c008:	d0a00817 	ldw	r2,-32736(gp)
    c00c:	1007883a 	mov	r3,r2
    c010:	e0bffd17 	ldw	r2,-12(fp)
    c014:	18bfd92e 	bgeu	r3,r2,bf7c <__alt_data_end+0xffff38dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c018:	0005883a 	mov	r2,zero
}
    c01c:	e6ffff04 	addi	sp,fp,-4
    c020:	dfc00217 	ldw	ra,8(sp)
    c024:	df000117 	ldw	fp,4(sp)
    c028:	dc000017 	ldw	r16,0(sp)
    c02c:	dec00304 	addi	sp,sp,12
    c030:	f800283a 	ret

0000c034 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c034:	defff604 	addi	sp,sp,-40
    c038:	dfc00915 	stw	ra,36(sp)
    c03c:	df000815 	stw	fp,32(sp)
    c040:	df000804 	addi	fp,sp,32
    c044:	e13ffd15 	stw	r4,-12(fp)
    c048:	e17ffe15 	stw	r5,-8(fp)
    c04c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c050:	00bfffc4 	movi	r2,-1
    c054:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c058:	00bffb44 	movi	r2,-19
    c05c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c060:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c064:	d1600604 	addi	r5,gp,-32744
    c068:	e13ffd17 	ldw	r4,-12(fp)
    c06c:	000c6b00 	call	c6b0 <alt_find_dev>
    c070:	e0bff815 	stw	r2,-32(fp)
    c074:	e0bff817 	ldw	r2,-32(fp)
    c078:	1000051e 	bne	r2,zero,c090 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c07c:	e13ffd17 	ldw	r4,-12(fp)
    c080:	000c7400 	call	c740 <alt_find_file>
    c084:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c088:	00800044 	movi	r2,1
    c08c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c090:	e0bff817 	ldw	r2,-32(fp)
    c094:	10002b26 	beq	r2,zero,c144 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c098:	e13ff817 	ldw	r4,-32(fp)
    c09c:	000c8480 	call	c848 <alt_get_fd>
    c0a0:	e0bff915 	stw	r2,-28(fp)
    c0a4:	e0bff917 	ldw	r2,-28(fp)
    c0a8:	1000030e 	bge	r2,zero,c0b8 <open+0x84>
    {
      status = index;
    c0ac:	e0bff917 	ldw	r2,-28(fp)
    c0b0:	e0bffa15 	stw	r2,-24(fp)
    c0b4:	00002506 	br	c14c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c0b8:	01400304 	movi	r5,12
    c0bc:	e13ff917 	ldw	r4,-28(fp)
    c0c0:	000244c0 	call	244c <__mulsi3>
    c0c4:	1007883a 	mov	r3,r2
    c0c8:	00800074 	movhi	r2,1
    c0cc:	10b6af04 	addi	r2,r2,-9540
    c0d0:	1885883a 	add	r2,r3,r2
    c0d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c0d8:	e0fffe17 	ldw	r3,-8(fp)
    c0dc:	00900034 	movhi	r2,16384
    c0e0:	10bfffc4 	addi	r2,r2,-1
    c0e4:	1886703a 	and	r3,r3,r2
    c0e8:	e0bffc17 	ldw	r2,-16(fp)
    c0ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c0f0:	e0bffb17 	ldw	r2,-20(fp)
    c0f4:	1000051e 	bne	r2,zero,c10c <open+0xd8>
    c0f8:	e13ffc17 	ldw	r4,-16(fp)
    c0fc:	000bf480 	call	bf48 <alt_file_locked>
    c100:	e0bffa15 	stw	r2,-24(fp)
    c104:	e0bffa17 	ldw	r2,-24(fp)
    c108:	10001016 	blt	r2,zero,c14c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c10c:	e0bff817 	ldw	r2,-32(fp)
    c110:	10800317 	ldw	r2,12(r2)
    c114:	10000826 	beq	r2,zero,c138 <open+0x104>
    c118:	e0bff817 	ldw	r2,-32(fp)
    c11c:	10800317 	ldw	r2,12(r2)
    c120:	e1ffff17 	ldw	r7,-4(fp)
    c124:	e1bffe17 	ldw	r6,-8(fp)
    c128:	e17ffd17 	ldw	r5,-12(fp)
    c12c:	e13ffc17 	ldw	r4,-16(fp)
    c130:	103ee83a 	callr	r2
    c134:	00000106 	br	c13c <open+0x108>
    c138:	0005883a 	mov	r2,zero
    c13c:	e0bffa15 	stw	r2,-24(fp)
    c140:	00000206 	br	c14c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c144:	00bffb44 	movi	r2,-19
    c148:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c14c:	e0bffa17 	ldw	r2,-24(fp)
    c150:	1000090e 	bge	r2,zero,c178 <open+0x144>
  {
    alt_release_fd (index);  
    c154:	e13ff917 	ldw	r4,-28(fp)
    c158:	0002b900 	call	2b90 <alt_release_fd>
    ALT_ERRNO = -status;
    c15c:	000bf0c0 	call	bf0c <alt_get_errno>
    c160:	1007883a 	mov	r3,r2
    c164:	e0bffa17 	ldw	r2,-24(fp)
    c168:	0085c83a 	sub	r2,zero,r2
    c16c:	18800015 	stw	r2,0(r3)
    return -1;
    c170:	00bfffc4 	movi	r2,-1
    c174:	00000106 	br	c17c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c178:	e0bff917 	ldw	r2,-28(fp)
}
    c17c:	e037883a 	mov	sp,fp
    c180:	dfc00117 	ldw	ra,4(sp)
    c184:	df000017 	ldw	fp,0(sp)
    c188:	dec00204 	addi	sp,sp,8
    c18c:	f800283a 	ret

0000c190 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c190:	defffa04 	addi	sp,sp,-24
    c194:	df000515 	stw	fp,20(sp)
    c198:	df000504 	addi	fp,sp,20
    c19c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c1a0:	0005303a 	rdctl	r2,status
    c1a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1a8:	e0fffc17 	ldw	r3,-16(fp)
    c1ac:	00bfff84 	movi	r2,-2
    c1b0:	1884703a 	and	r2,r3,r2
    c1b4:	1001703a 	wrctl	status,r2
  
  return context;
    c1b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c1bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c1c0:	e0bfff17 	ldw	r2,-4(fp)
    c1c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c1c8:	e0bffd17 	ldw	r2,-12(fp)
    c1cc:	10800017 	ldw	r2,0(r2)
    c1d0:	e0fffd17 	ldw	r3,-12(fp)
    c1d4:	18c00117 	ldw	r3,4(r3)
    c1d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c1dc:	e0bffd17 	ldw	r2,-12(fp)
    c1e0:	10800117 	ldw	r2,4(r2)
    c1e4:	e0fffd17 	ldw	r3,-12(fp)
    c1e8:	18c00017 	ldw	r3,0(r3)
    c1ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	e0fffd17 	ldw	r3,-12(fp)
    c1f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c1fc:	e0bffd17 	ldw	r2,-12(fp)
    c200:	e0fffd17 	ldw	r3,-12(fp)
    c204:	10c00015 	stw	r3,0(r2)
    c208:	e0bffb17 	ldw	r2,-20(fp)
    c20c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c210:	e0bffe17 	ldw	r2,-8(fp)
    c214:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c218:	0001883a 	nop
    c21c:	e037883a 	mov	sp,fp
    c220:	df000017 	ldw	fp,0(sp)
    c224:	dec00104 	addi	sp,sp,4
    c228:	f800283a 	ret

0000c22c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c22c:	defffb04 	addi	sp,sp,-20
    c230:	dfc00415 	stw	ra,16(sp)
    c234:	df000315 	stw	fp,12(sp)
    c238:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c23c:	d0a02b17 	ldw	r2,-32596(gp)
    c240:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c244:	d0a71817 	ldw	r2,-25504(gp)
    c248:	10800044 	addi	r2,r2,1
    c24c:	d0a71815 	stw	r2,-25504(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c250:	00002e06 	br	c30c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c254:	e0bffd17 	ldw	r2,-12(fp)
    c258:	10800017 	ldw	r2,0(r2)
    c25c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c260:	e0bffd17 	ldw	r2,-12(fp)
    c264:	10800403 	ldbu	r2,16(r2)
    c268:	10803fcc 	andi	r2,r2,255
    c26c:	10000426 	beq	r2,zero,c280 <alt_tick+0x54>
    c270:	d0a71817 	ldw	r2,-25504(gp)
    c274:	1000021e 	bne	r2,zero,c280 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c278:	e0bffd17 	ldw	r2,-12(fp)
    c27c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c280:	e0bffd17 	ldw	r2,-12(fp)
    c284:	10800217 	ldw	r2,8(r2)
    c288:	d0e71817 	ldw	r3,-25504(gp)
    c28c:	18801d36 	bltu	r3,r2,c304 <alt_tick+0xd8>
    c290:	e0bffd17 	ldw	r2,-12(fp)
    c294:	10800403 	ldbu	r2,16(r2)
    c298:	10803fcc 	andi	r2,r2,255
    c29c:	1000191e 	bne	r2,zero,c304 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c2a0:	e0bffd17 	ldw	r2,-12(fp)
    c2a4:	10800317 	ldw	r2,12(r2)
    c2a8:	e0fffd17 	ldw	r3,-12(fp)
    c2ac:	18c00517 	ldw	r3,20(r3)
    c2b0:	1809883a 	mov	r4,r3
    c2b4:	103ee83a 	callr	r2
    c2b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c2bc:	e0bfff17 	ldw	r2,-4(fp)
    c2c0:	1000031e 	bne	r2,zero,c2d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c2c4:	e13ffd17 	ldw	r4,-12(fp)
    c2c8:	000c1900 	call	c190 <alt_alarm_stop>
    c2cc:	00000d06 	br	c304 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c2d0:	e0bffd17 	ldw	r2,-12(fp)
    c2d4:	10c00217 	ldw	r3,8(r2)
    c2d8:	e0bfff17 	ldw	r2,-4(fp)
    c2dc:	1887883a 	add	r3,r3,r2
    c2e0:	e0bffd17 	ldw	r2,-12(fp)
    c2e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c2e8:	e0bffd17 	ldw	r2,-12(fp)
    c2ec:	10c00217 	ldw	r3,8(r2)
    c2f0:	d0a71817 	ldw	r2,-25504(gp)
    c2f4:	1880032e 	bgeu	r3,r2,c304 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c2f8:	e0bffd17 	ldw	r2,-12(fp)
    c2fc:	00c00044 	movi	r3,1
    c300:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c304:	e0bffe17 	ldw	r2,-8(fp)
    c308:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c30c:	e0fffd17 	ldw	r3,-12(fp)
    c310:	d0a02b04 	addi	r2,gp,-32596
    c314:	18bfcf1e 	bne	r3,r2,c254 <__alt_data_end+0xffff3bb4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c318:	0003da40 	call	3da4 <OSTimeTick>
}
    c31c:	0001883a 	nop
    c320:	e037883a 	mov	sp,fp
    c324:	dfc00117 	ldw	ra,4(sp)
    c328:	df000017 	ldw	fp,0(sp)
    c32c:	dec00204 	addi	sp,sp,8
    c330:	f800283a 	ret

0000c334 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c334:	deffff04 	addi	sp,sp,-4
    c338:	df000015 	stw	fp,0(sp)
    c33c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c340:	000170fa 	wrctl	ienable,zero
}
    c344:	0001883a 	nop
    c348:	e037883a 	mov	sp,fp
    c34c:	df000017 	ldw	fp,0(sp)
    c350:	dec00104 	addi	sp,sp,4
    c354:	f800283a 	ret

0000c358 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    c358:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    c35c:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    c360:	d1271117 	ldw	r4,-25532(gp)

      stw ra,  0(sp)
    c364:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    c368:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    c36c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    c370:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    c374:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    c378:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    c37c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    c380:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    c384:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    c388:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    c38c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    c390:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c394:	000c5cc0 	call	c5cc <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    c398:	d1270c17 	ldw	r4,-25552(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    c39c:	d1670407 	ldb	r5,-25584(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    c3a0:	d1271115 	stw	r4,-25532(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    c3a4:	d1670445 	stb	r5,-25583(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    c3a8:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    c3ac:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    c3b0:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    c3b4:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    c3b8:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    c3bc:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    c3c0:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    c3c4:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    c3c8:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    c3cc:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    c3d0:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    c3d4:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    c3d8:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    c3dc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    c3e0:	f800283a 	ret

0000c3e4 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    c3e4:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    c3e8:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    c3ec:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    c3f0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c3f4:	000c5cc0 	call	c5cc <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    c3f8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    c3fc:	d4a70245 	stb	r18,-25591(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    c400:	003fe506 	br	c398 <__alt_data_end+0xffff3cf8>

0000c404 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    c404:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    c408:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    c40c:	10800054 	ori	r2,r2,1
      wrctl status, r2
    c410:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    c414:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    c418:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    c41c:	dec00204 	addi	sp,sp,8

      callr r2
    c420:	103ee83a 	callr	r2

      nop
    c424:	0001883a 	nop

0000c428 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    c428:	defff704 	addi	sp,sp,-36
    c42c:	dfc00815 	stw	ra,32(sp)
    c430:	df000715 	stw	fp,28(sp)
    c434:	df000704 	addi	fp,sp,28
    c438:	e13ffc15 	stw	r4,-16(fp)
    c43c:	e17ffd15 	stw	r5,-12(fp)
    c440:	e1bffe15 	stw	r6,-8(fp)
    c444:	3805883a 	mov	r2,r7
    c448:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    c44c:	e0fffe17 	ldw	r3,-8(fp)
    c450:	00bfff04 	movi	r2,-4
    c454:	1884703a 	and	r2,r3,r2
    c458:	10bef704 	addi	r2,r2,-1060
    c45c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    c460:	01810904 	movi	r6,1060
    c464:	000b883a 	mov	r5,zero
    c468:	e13ff917 	ldw	r4,-28(fp)
    c46c:	000045c0 	call	45c <memset>
    c470:	e0bff917 	ldw	r2,-28(fp)
    c474:	10c0bb04 	addi	r3,r2,748
    c478:	e0bff917 	ldw	r2,-28(fp)
    c47c:	10c00115 	stw	r3,4(r2)
    c480:	e0bff917 	ldw	r2,-28(fp)
    c484:	10c0d504 	addi	r3,r2,852
    c488:	e0bff917 	ldw	r2,-28(fp)
    c48c:	10c00215 	stw	r3,8(r2)
    c490:	e0bff917 	ldw	r2,-28(fp)
    c494:	10c0ef04 	addi	r3,r2,956
    c498:	e0bff917 	ldw	r2,-28(fp)
    c49c:	10c00315 	stw	r3,12(r2)
    c4a0:	e0fff917 	ldw	r3,-28(fp)
    c4a4:	00800074 	movhi	r2,1
    c4a8:	10b49904 	addi	r2,r2,-11676
    c4ac:	18800d15 	stw	r2,52(r3)
    c4b0:	e0bff917 	ldw	r2,-28(fp)
    c4b4:	00c00044 	movi	r3,1
    c4b8:	10c02915 	stw	r3,164(r2)
    c4bc:	10002a15 	stw	zero,168(r2)
    c4c0:	e0bff917 	ldw	r2,-28(fp)
    c4c4:	00ccc384 	movi	r3,13070
    c4c8:	10c02b0d 	sth	r3,172(r2)
    c4cc:	e0bff917 	ldw	r2,-28(fp)
    c4d0:	00eaf344 	movi	r3,-21555
    c4d4:	10c02b8d 	sth	r3,174(r2)
    c4d8:	e0bff917 	ldw	r2,-28(fp)
    c4dc:	00c48d04 	movi	r3,4660
    c4e0:	10c02c0d 	sth	r3,176(r2)
    c4e4:	e0bff917 	ldw	r2,-28(fp)
    c4e8:	00f99b44 	movi	r3,-6547
    c4ec:	10c02c8d 	sth	r3,178(r2)
    c4f0:	e0bff917 	ldw	r2,-28(fp)
    c4f4:	00f7bb04 	movi	r3,-8468
    c4f8:	10c02d0d 	sth	r3,180(r2)
    c4fc:	e0bff917 	ldw	r2,-28(fp)
    c500:	00c00144 	movi	r3,5
    c504:	10c02d8d 	sth	r3,182(r2)
    c508:	e0bff917 	ldw	r2,-28(fp)
    c50c:	00c002c4 	movi	r3,11
    c510:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    c514:	e0bff917 	ldw	r2,-28(fp)
    c518:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    c51c:	e0bffa17 	ldw	r2,-24(fp)
    c520:	10bff304 	addi	r2,r2,-52
    c524:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    c528:	e0bffb17 	ldw	r2,-20(fp)
    c52c:	10800c04 	addi	r2,r2,48
    c530:	e0fffc17 	ldw	r3,-16(fp)
    c534:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    c538:	e0bffb17 	ldw	r2,-20(fp)
    c53c:	10800b04 	addi	r2,r2,44
    c540:	e0fffd17 	ldw	r3,-12(fp)
    c544:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    c548:	e0bffb17 	ldw	r2,-20(fp)
    c54c:	10800a04 	addi	r2,r2,40
    c550:	e0fff917 	ldw	r3,-28(fp)
    c554:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    c558:	00800074 	movhi	r2,1
    c55c:	10b10104 	addi	r2,r2,-15356
    c560:	10c00104 	addi	r3,r2,4
    c564:	e0bffb17 	ldw	r2,-20(fp)
    c568:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    c56c:	e0bffb17 	ldw	r2,-20(fp)
}
    c570:	e037883a 	mov	sp,fp
    c574:	dfc00117 	ldw	ra,4(sp)
    c578:	df000017 	ldw	fp,0(sp)
    c57c:	dec00204 	addi	sp,sp,8
    c580:	f800283a 	ret

0000c584 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    c584:	defffe04 	addi	sp,sp,-8
    c588:	df000115 	stw	fp,4(sp)
    c58c:	df000104 	addi	fp,sp,4
    c590:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    c594:	0001883a 	nop
    c598:	e037883a 	mov	sp,fp
    c59c:	df000017 	ldw	fp,0(sp)
    c5a0:	dec00104 	addi	sp,sp,4
    c5a4:	f800283a 	ret

0000c5a8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    c5a8:	defffe04 	addi	sp,sp,-8
    c5ac:	df000115 	stw	fp,4(sp)
    c5b0:	df000104 	addi	fp,sp,4
    c5b4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    c5b8:	0001883a 	nop
    c5bc:	e037883a 	mov	sp,fp
    c5c0:	df000017 	ldw	fp,0(sp)
    c5c4:	dec00104 	addi	sp,sp,4
    c5c8:	f800283a 	ret

0000c5cc <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    c5cc:	deffff04 	addi	sp,sp,-4
    c5d0:	df000015 	stw	fp,0(sp)
    c5d4:	d839883a 	mov	fp,sp
}
    c5d8:	0001883a 	nop
    c5dc:	e037883a 	mov	sp,fp
    c5e0:	df000017 	ldw	fp,0(sp)
    c5e4:	dec00104 	addi	sp,sp,4
    c5e8:	f800283a 	ret

0000c5ec <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    c5ec:	deffff04 	addi	sp,sp,-4
    c5f0:	df000015 	stw	fp,0(sp)
    c5f4:	d839883a 	mov	fp,sp
}
    c5f8:	0001883a 	nop
    c5fc:	e037883a 	mov	sp,fp
    c600:	df000017 	ldw	fp,0(sp)
    c604:	dec00104 	addi	sp,sp,4
    c608:	f800283a 	ret

0000c60c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    c60c:	deffff04 	addi	sp,sp,-4
    c610:	df000015 	stw	fp,0(sp)
    c614:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    c618:	0001883a 	nop
    c61c:	e037883a 	mov	sp,fp
    c620:	df000017 	ldw	fp,0(sp)
    c624:	dec00104 	addi	sp,sp,4
    c628:	f800283a 	ret

0000c62c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    c62c:	deffff04 	addi	sp,sp,-4
    c630:	df000015 	stw	fp,0(sp)
    c634:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    c638:	0001883a 	nop
    c63c:	e037883a 	mov	sp,fp
    c640:	df000017 	ldw	fp,0(sp)
    c644:	dec00104 	addi	sp,sp,4
    c648:	f800283a 	ret

0000c64c <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    c64c:	deffff04 	addi	sp,sp,-4
    c650:	df000015 	stw	fp,0(sp)
    c654:	d839883a 	mov	fp,sp
}
    c658:	0001883a 	nop
    c65c:	e037883a 	mov	sp,fp
    c660:	df000017 	ldw	fp,0(sp)
    c664:	dec00104 	addi	sp,sp,4
    c668:	f800283a 	ret

0000c66c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    c66c:	deffff04 	addi	sp,sp,-4
    c670:	df000015 	stw	fp,0(sp)
    c674:	d839883a 	mov	fp,sp
}
    c678:	0001883a 	nop
    c67c:	e037883a 	mov	sp,fp
    c680:	df000017 	ldw	fp,0(sp)
    c684:	dec00104 	addi	sp,sp,4
    c688:	f800283a 	ret

0000c68c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    c68c:	defffe04 	addi	sp,sp,-8
    c690:	df000115 	stw	fp,4(sp)
    c694:	df000104 	addi	fp,sp,4
    c698:	e13fff15 	stw	r4,-4(fp)
}
    c69c:	0001883a 	nop
    c6a0:	e037883a 	mov	sp,fp
    c6a4:	df000017 	ldw	fp,0(sp)
    c6a8:	dec00104 	addi	sp,sp,4
    c6ac:	f800283a 	ret

0000c6b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c6b0:	defffa04 	addi	sp,sp,-24
    c6b4:	dfc00515 	stw	ra,20(sp)
    c6b8:	df000415 	stw	fp,16(sp)
    c6bc:	df000404 	addi	fp,sp,16
    c6c0:	e13ffe15 	stw	r4,-8(fp)
    c6c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c6c8:	e0bfff17 	ldw	r2,-4(fp)
    c6cc:	10800017 	ldw	r2,0(r2)
    c6d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c6d4:	e13ffe17 	ldw	r4,-8(fp)
    c6d8:	000cbe80 	call	cbe8 <strlen>
    c6dc:	10800044 	addi	r2,r2,1
    c6e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c6e4:	00000d06 	br	c71c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c6e8:	e0bffc17 	ldw	r2,-16(fp)
    c6ec:	10800217 	ldw	r2,8(r2)
    c6f0:	e0fffd17 	ldw	r3,-12(fp)
    c6f4:	180d883a 	mov	r6,r3
    c6f8:	e17ffe17 	ldw	r5,-8(fp)
    c6fc:	1009883a 	mov	r4,r2
    c700:	000ca240 	call	ca24 <memcmp>
    c704:	1000021e 	bne	r2,zero,c710 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c708:	e0bffc17 	ldw	r2,-16(fp)
    c70c:	00000706 	br	c72c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c710:	e0bffc17 	ldw	r2,-16(fp)
    c714:	10800017 	ldw	r2,0(r2)
    c718:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c71c:	e0fffc17 	ldw	r3,-16(fp)
    c720:	e0bfff17 	ldw	r2,-4(fp)
    c724:	18bff01e 	bne	r3,r2,c6e8 <__alt_data_end+0xffff4048>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c728:	0005883a 	mov	r2,zero
}
    c72c:	e037883a 	mov	sp,fp
    c730:	dfc00117 	ldw	ra,4(sp)
    c734:	df000017 	ldw	fp,0(sp)
    c738:	dec00204 	addi	sp,sp,8
    c73c:	f800283a 	ret

0000c740 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c740:	defffb04 	addi	sp,sp,-20
    c744:	dfc00415 	stw	ra,16(sp)
    c748:	df000315 	stw	fp,12(sp)
    c74c:	df000304 	addi	fp,sp,12
    c750:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c754:	d0a00417 	ldw	r2,-32752(gp)
    c758:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c75c:	00003106 	br	c824 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c760:	e0bffd17 	ldw	r2,-12(fp)
    c764:	10800217 	ldw	r2,8(r2)
    c768:	1009883a 	mov	r4,r2
    c76c:	000cbe80 	call	cbe8 <strlen>
    c770:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c774:	e0bffd17 	ldw	r2,-12(fp)
    c778:	10c00217 	ldw	r3,8(r2)
    c77c:	e0bffe17 	ldw	r2,-8(fp)
    c780:	10bfffc4 	addi	r2,r2,-1
    c784:	1885883a 	add	r2,r3,r2
    c788:	10800003 	ldbu	r2,0(r2)
    c78c:	10803fcc 	andi	r2,r2,255
    c790:	1080201c 	xori	r2,r2,128
    c794:	10bfe004 	addi	r2,r2,-128
    c798:	10800bd8 	cmpnei	r2,r2,47
    c79c:	1000031e 	bne	r2,zero,c7ac <alt_find_file+0x6c>
    {
      len -= 1;
    c7a0:	e0bffe17 	ldw	r2,-8(fp)
    c7a4:	10bfffc4 	addi	r2,r2,-1
    c7a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c7ac:	e0bffe17 	ldw	r2,-8(fp)
    c7b0:	e0ffff17 	ldw	r3,-4(fp)
    c7b4:	1885883a 	add	r2,r3,r2
    c7b8:	10800003 	ldbu	r2,0(r2)
    c7bc:	10803fcc 	andi	r2,r2,255
    c7c0:	1080201c 	xori	r2,r2,128
    c7c4:	10bfe004 	addi	r2,r2,-128
    c7c8:	10800be0 	cmpeqi	r2,r2,47
    c7cc:	1000081e 	bne	r2,zero,c7f0 <alt_find_file+0xb0>
    c7d0:	e0bffe17 	ldw	r2,-8(fp)
    c7d4:	e0ffff17 	ldw	r3,-4(fp)
    c7d8:	1885883a 	add	r2,r3,r2
    c7dc:	10800003 	ldbu	r2,0(r2)
    c7e0:	10803fcc 	andi	r2,r2,255
    c7e4:	1080201c 	xori	r2,r2,128
    c7e8:	10bfe004 	addi	r2,r2,-128
    c7ec:	10000a1e 	bne	r2,zero,c818 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c7f0:	e0bffd17 	ldw	r2,-12(fp)
    c7f4:	10800217 	ldw	r2,8(r2)
    c7f8:	e0fffe17 	ldw	r3,-8(fp)
    c7fc:	180d883a 	mov	r6,r3
    c800:	e17fff17 	ldw	r5,-4(fp)
    c804:	1009883a 	mov	r4,r2
    c808:	000ca240 	call	ca24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c80c:	1000021e 	bne	r2,zero,c818 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c810:	e0bffd17 	ldw	r2,-12(fp)
    c814:	00000706 	br	c834 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c818:	e0bffd17 	ldw	r2,-12(fp)
    c81c:	10800017 	ldw	r2,0(r2)
    c820:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c824:	e0fffd17 	ldw	r3,-12(fp)
    c828:	d0a00404 	addi	r2,gp,-32752
    c82c:	18bfcc1e 	bne	r3,r2,c760 <__alt_data_end+0xffff40c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c830:	0005883a 	mov	r2,zero
}
    c834:	e037883a 	mov	sp,fp
    c838:	dfc00117 	ldw	ra,4(sp)
    c83c:	df000017 	ldw	fp,0(sp)
    c840:	dec00204 	addi	sp,sp,8
    c844:	f800283a 	ret

0000c848 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c848:	defff804 	addi	sp,sp,-32
    c84c:	dfc00715 	stw	ra,28(sp)
    c850:	df000615 	stw	fp,24(sp)
    c854:	dc000515 	stw	r16,20(sp)
    c858:	df000604 	addi	fp,sp,24
    c85c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c860:	00bffa04 	movi	r2,-24
    c864:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    c868:	d0a6fa17 	ldw	r2,-25624(gp)
    c86c:	e0bffc15 	stw	r2,-16(fp)
    c870:	e03ffd0d 	sth	zero,-12(fp)
    c874:	e0bffd0b 	ldhu	r2,-12(fp)
    c878:	e0fffd84 	addi	r3,fp,-10
    c87c:	180d883a 	mov	r6,r3
    c880:	100b883a 	mov	r5,r2
    c884:	e13ffc17 	ldw	r4,-16(fp)
    c888:	00085f40 	call	85f4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c88c:	e03ffa15 	stw	zero,-24(fp)
    c890:	00001d06 	br	c908 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
    c894:	04000074 	movhi	r16,1
    c898:	8436af04 	addi	r16,r16,-9540
    c89c:	e0bffa17 	ldw	r2,-24(fp)
    c8a0:	01400304 	movi	r5,12
    c8a4:	1009883a 	mov	r4,r2
    c8a8:	000244c0 	call	244c <__mulsi3>
    c8ac:	8085883a 	add	r2,r16,r2
    c8b0:	10800017 	ldw	r2,0(r2)
    c8b4:	1000111e 	bne	r2,zero,c8fc <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
    c8b8:	04000074 	movhi	r16,1
    c8bc:	8436af04 	addi	r16,r16,-9540
    c8c0:	e0bffa17 	ldw	r2,-24(fp)
    c8c4:	01400304 	movi	r5,12
    c8c8:	1009883a 	mov	r4,r2
    c8cc:	000244c0 	call	244c <__mulsi3>
    c8d0:	8085883a 	add	r2,r16,r2
    c8d4:	e0fffe17 	ldw	r3,-8(fp)
    c8d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c8dc:	d0e00817 	ldw	r3,-32736(gp)
    c8e0:	e0bffa17 	ldw	r2,-24(fp)
    c8e4:	1880020e 	bge	r3,r2,c8f0 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
    c8e8:	e0bffa17 	ldw	r2,-24(fp)
    c8ec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c8f0:	e0bffa17 	ldw	r2,-24(fp)
    c8f4:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
    c8f8:	00000606 	br	c914 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c8fc:	e0bffa17 	ldw	r2,-24(fp)
    c900:	10800044 	addi	r2,r2,1
    c904:	e0bffa15 	stw	r2,-24(fp)
    c908:	e0bffa17 	ldw	r2,-24(fp)
    c90c:	10800810 	cmplti	r2,r2,32
    c910:	103fe01e 	bne	r2,zero,c894 <__alt_data_end+0xffff41f4>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    c914:	d0a6fa17 	ldw	r2,-25624(gp)
    c918:	1009883a 	mov	r4,r2
    c91c:	000896c0 	call	896c <OSSemPost>

  return rc;
    c920:	e0bffb17 	ldw	r2,-20(fp)
}
    c924:	e6ffff04 	addi	sp,fp,-4
    c928:	dfc00217 	ldw	ra,8(sp)
    c92c:	df000117 	ldw	fp,4(sp)
    c930:	dc000017 	ldw	r16,0(sp)
    c934:	dec00304 	addi	sp,sp,12
    c938:	f800283a 	ret

0000c93c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    c93c:	defffe04 	addi	sp,sp,-8
    c940:	df000115 	stw	fp,4(sp)
    c944:	df000104 	addi	fp,sp,4
    c948:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    c94c:	e0bfff17 	ldw	r2,-4(fp)
    c950:	10bffe84 	addi	r2,r2,-6
    c954:	10c00428 	cmpgeui	r3,r2,16
    c958:	18001a1e 	bne	r3,zero,c9c4 <alt_exception_cause_generated_bad_addr+0x88>
    c95c:	100690ba 	slli	r3,r2,2
    c960:	00800074 	movhi	r2,1
    c964:	10b25d04 	addi	r2,r2,-13964
    c968:	1885883a 	add	r2,r3,r2
    c96c:	10800017 	ldw	r2,0(r2)
    c970:	1000683a 	jmp	r2
    c974:	0000c9b4 	movhi	zero,806
    c978:	0000c9b4 	movhi	zero,806
    c97c:	0000c9c4 	movi	zero,807
    c980:	0000c9c4 	movi	zero,807
    c984:	0000c9c4 	movi	zero,807
    c988:	0000c9b4 	movhi	zero,806
    c98c:	0000c9bc 	xorhi	zero,zero,806
    c990:	0000c9c4 	movi	zero,807
    c994:	0000c9b4 	movhi	zero,806
    c998:	0000c9b4 	movhi	zero,806
    c99c:	0000c9c4 	movi	zero,807
    c9a0:	0000c9b4 	movhi	zero,806
    c9a4:	0000c9bc 	xorhi	zero,zero,806
    c9a8:	0000c9c4 	movi	zero,807
    c9ac:	0000c9c4 	movi	zero,807
    c9b0:	0000c9b4 	movhi	zero,806
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    c9b4:	00800044 	movi	r2,1
    c9b8:	00000306 	br	c9c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    c9bc:	0005883a 	mov	r2,zero
    c9c0:	00000106 	br	c9c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    c9c4:	0005883a 	mov	r2,zero
  }
}
    c9c8:	e037883a 	mov	sp,fp
    c9cc:	df000017 	ldw	fp,0(sp)
    c9d0:	dec00104 	addi	sp,sp,4
    c9d4:	f800283a 	ret

0000c9d8 <atexit>:
    c9d8:	200b883a 	mov	r5,r4
    c9dc:	000f883a 	mov	r7,zero
    c9e0:	000d883a 	mov	r6,zero
    c9e4:	0009883a 	mov	r4,zero
    c9e8:	000cc801 	jmpi	cc80 <__register_exitproc>

0000c9ec <exit>:
    c9ec:	defffe04 	addi	sp,sp,-8
    c9f0:	000b883a 	mov	r5,zero
    c9f4:	dc000015 	stw	r16,0(sp)
    c9f8:	dfc00115 	stw	ra,4(sp)
    c9fc:	2021883a 	mov	r16,r4
    ca00:	000cd980 	call	cd98 <__call_exitprocs>
    ca04:	00800074 	movhi	r2,1
    ca08:	10bb3504 	addi	r2,r2,-4908
    ca0c:	11000017 	ldw	r4,0(r2)
    ca10:	20800f17 	ldw	r2,60(r4)
    ca14:	10000126 	beq	r2,zero,ca1c <exit+0x30>
    ca18:	103ee83a 	callr	r2
    ca1c:	8009883a 	mov	r4,r16
    ca20:	000d0cc0 	call	d0cc <_exit>

0000ca24 <memcmp>:
    ca24:	01c000c4 	movi	r7,3
    ca28:	3980192e 	bgeu	r7,r6,ca90 <memcmp+0x6c>
    ca2c:	2144b03a 	or	r2,r4,r5
    ca30:	11c4703a 	and	r2,r2,r7
    ca34:	10000f26 	beq	r2,zero,ca74 <memcmp+0x50>
    ca38:	20800003 	ldbu	r2,0(r4)
    ca3c:	28c00003 	ldbu	r3,0(r5)
    ca40:	10c0151e 	bne	r2,r3,ca98 <memcmp+0x74>
    ca44:	31bfff84 	addi	r6,r6,-2
    ca48:	01ffffc4 	movi	r7,-1
    ca4c:	00000406 	br	ca60 <memcmp+0x3c>
    ca50:	20800003 	ldbu	r2,0(r4)
    ca54:	28c00003 	ldbu	r3,0(r5)
    ca58:	31bfffc4 	addi	r6,r6,-1
    ca5c:	10c00e1e 	bne	r2,r3,ca98 <memcmp+0x74>
    ca60:	21000044 	addi	r4,r4,1
    ca64:	29400044 	addi	r5,r5,1
    ca68:	31fff91e 	bne	r6,r7,ca50 <__alt_data_end+0xffff43b0>
    ca6c:	0005883a 	mov	r2,zero
    ca70:	f800283a 	ret
    ca74:	20c00017 	ldw	r3,0(r4)
    ca78:	28800017 	ldw	r2,0(r5)
    ca7c:	18bfee1e 	bne	r3,r2,ca38 <__alt_data_end+0xffff4398>
    ca80:	31bfff04 	addi	r6,r6,-4
    ca84:	21000104 	addi	r4,r4,4
    ca88:	29400104 	addi	r5,r5,4
    ca8c:	39bff936 	bltu	r7,r6,ca74 <__alt_data_end+0xffff43d4>
    ca90:	303fe91e 	bne	r6,zero,ca38 <__alt_data_end+0xffff4398>
    ca94:	003ff506 	br	ca6c <__alt_data_end+0xffff43cc>
    ca98:	10c5c83a 	sub	r2,r2,r3
    ca9c:	f800283a 	ret

0000caa0 <memcpy>:
    caa0:	defffd04 	addi	sp,sp,-12
    caa4:	dfc00215 	stw	ra,8(sp)
    caa8:	dc400115 	stw	r17,4(sp)
    caac:	dc000015 	stw	r16,0(sp)
    cab0:	00c003c4 	movi	r3,15
    cab4:	2005883a 	mov	r2,r4
    cab8:	1980452e 	bgeu	r3,r6,cbd0 <memcpy+0x130>
    cabc:	2906b03a 	or	r3,r5,r4
    cac0:	18c000cc 	andi	r3,r3,3
    cac4:	1800441e 	bne	r3,zero,cbd8 <memcpy+0x138>
    cac8:	347ffc04 	addi	r17,r6,-16
    cacc:	8822d13a 	srli	r17,r17,4
    cad0:	28c00104 	addi	r3,r5,4
    cad4:	23400104 	addi	r13,r4,4
    cad8:	8820913a 	slli	r16,r17,4
    cadc:	2b000204 	addi	r12,r5,8
    cae0:	22c00204 	addi	r11,r4,8
    cae4:	84000504 	addi	r16,r16,20
    cae8:	2a800304 	addi	r10,r5,12
    caec:	22400304 	addi	r9,r4,12
    caf0:	2c21883a 	add	r16,r5,r16
    caf4:	2811883a 	mov	r8,r5
    caf8:	200f883a 	mov	r7,r4
    cafc:	41000017 	ldw	r4,0(r8)
    cb00:	1fc00017 	ldw	ra,0(r3)
    cb04:	63c00017 	ldw	r15,0(r12)
    cb08:	39000015 	stw	r4,0(r7)
    cb0c:	53800017 	ldw	r14,0(r10)
    cb10:	6fc00015 	stw	ra,0(r13)
    cb14:	5bc00015 	stw	r15,0(r11)
    cb18:	4b800015 	stw	r14,0(r9)
    cb1c:	18c00404 	addi	r3,r3,16
    cb20:	39c00404 	addi	r7,r7,16
    cb24:	42000404 	addi	r8,r8,16
    cb28:	6b400404 	addi	r13,r13,16
    cb2c:	63000404 	addi	r12,r12,16
    cb30:	5ac00404 	addi	r11,r11,16
    cb34:	52800404 	addi	r10,r10,16
    cb38:	4a400404 	addi	r9,r9,16
    cb3c:	1c3fef1e 	bne	r3,r16,cafc <__alt_data_end+0xffff445c>
    cb40:	89c00044 	addi	r7,r17,1
    cb44:	380e913a 	slli	r7,r7,4
    cb48:	310003cc 	andi	r4,r6,15
    cb4c:	02c000c4 	movi	r11,3
    cb50:	11c7883a 	add	r3,r2,r7
    cb54:	29cb883a 	add	r5,r5,r7
    cb58:	5900212e 	bgeu	r11,r4,cbe0 <memcpy+0x140>
    cb5c:	1813883a 	mov	r9,r3
    cb60:	2811883a 	mov	r8,r5
    cb64:	200f883a 	mov	r7,r4
    cb68:	42800017 	ldw	r10,0(r8)
    cb6c:	4a400104 	addi	r9,r9,4
    cb70:	39ffff04 	addi	r7,r7,-4
    cb74:	4abfff15 	stw	r10,-4(r9)
    cb78:	42000104 	addi	r8,r8,4
    cb7c:	59fffa36 	bltu	r11,r7,cb68 <__alt_data_end+0xffff44c8>
    cb80:	213fff04 	addi	r4,r4,-4
    cb84:	2008d0ba 	srli	r4,r4,2
    cb88:	318000cc 	andi	r6,r6,3
    cb8c:	21000044 	addi	r4,r4,1
    cb90:	2109883a 	add	r4,r4,r4
    cb94:	2109883a 	add	r4,r4,r4
    cb98:	1907883a 	add	r3,r3,r4
    cb9c:	290b883a 	add	r5,r5,r4
    cba0:	30000626 	beq	r6,zero,cbbc <memcpy+0x11c>
    cba4:	198d883a 	add	r6,r3,r6
    cba8:	29c00003 	ldbu	r7,0(r5)
    cbac:	18c00044 	addi	r3,r3,1
    cbb0:	29400044 	addi	r5,r5,1
    cbb4:	19ffffc5 	stb	r7,-1(r3)
    cbb8:	19bffb1e 	bne	r3,r6,cba8 <__alt_data_end+0xffff4508>
    cbbc:	dfc00217 	ldw	ra,8(sp)
    cbc0:	dc400117 	ldw	r17,4(sp)
    cbc4:	dc000017 	ldw	r16,0(sp)
    cbc8:	dec00304 	addi	sp,sp,12
    cbcc:	f800283a 	ret
    cbd0:	2007883a 	mov	r3,r4
    cbd4:	003ff206 	br	cba0 <__alt_data_end+0xffff4500>
    cbd8:	2007883a 	mov	r3,r4
    cbdc:	003ff106 	br	cba4 <__alt_data_end+0xffff4504>
    cbe0:	200d883a 	mov	r6,r4
    cbe4:	003fee06 	br	cba0 <__alt_data_end+0xffff4500>

0000cbe8 <strlen>:
    cbe8:	208000cc 	andi	r2,r4,3
    cbec:	10002026 	beq	r2,zero,cc70 <strlen+0x88>
    cbf0:	20800007 	ldb	r2,0(r4)
    cbf4:	10002026 	beq	r2,zero,cc78 <strlen+0x90>
    cbf8:	2005883a 	mov	r2,r4
    cbfc:	00000206 	br	cc08 <strlen+0x20>
    cc00:	10c00007 	ldb	r3,0(r2)
    cc04:	18001826 	beq	r3,zero,cc68 <strlen+0x80>
    cc08:	10800044 	addi	r2,r2,1
    cc0c:	10c000cc 	andi	r3,r2,3
    cc10:	183ffb1e 	bne	r3,zero,cc00 <__alt_data_end+0xffff4560>
    cc14:	10c00017 	ldw	r3,0(r2)
    cc18:	01ffbff4 	movhi	r7,65279
    cc1c:	39ffbfc4 	addi	r7,r7,-257
    cc20:	00ca303a 	nor	r5,zero,r3
    cc24:	01a02074 	movhi	r6,32897
    cc28:	19c7883a 	add	r3,r3,r7
    cc2c:	31a02004 	addi	r6,r6,-32640
    cc30:	1946703a 	and	r3,r3,r5
    cc34:	1986703a 	and	r3,r3,r6
    cc38:	1800091e 	bne	r3,zero,cc60 <strlen+0x78>
    cc3c:	10800104 	addi	r2,r2,4
    cc40:	10c00017 	ldw	r3,0(r2)
    cc44:	19cb883a 	add	r5,r3,r7
    cc48:	00c6303a 	nor	r3,zero,r3
    cc4c:	28c6703a 	and	r3,r5,r3
    cc50:	1986703a 	and	r3,r3,r6
    cc54:	183ff926 	beq	r3,zero,cc3c <__alt_data_end+0xffff459c>
    cc58:	00000106 	br	cc60 <strlen+0x78>
    cc5c:	10800044 	addi	r2,r2,1
    cc60:	10c00007 	ldb	r3,0(r2)
    cc64:	183ffd1e 	bne	r3,zero,cc5c <__alt_data_end+0xffff45bc>
    cc68:	1105c83a 	sub	r2,r2,r4
    cc6c:	f800283a 	ret
    cc70:	2005883a 	mov	r2,r4
    cc74:	003fe706 	br	cc14 <__alt_data_end+0xffff4574>
    cc78:	0005883a 	mov	r2,zero
    cc7c:	f800283a 	ret

0000cc80 <__register_exitproc>:
    cc80:	defffa04 	addi	sp,sp,-24
    cc84:	dc000315 	stw	r16,12(sp)
    cc88:	04000074 	movhi	r16,1
    cc8c:	843b3504 	addi	r16,r16,-4908
    cc90:	80c00017 	ldw	r3,0(r16)
    cc94:	dc400415 	stw	r17,16(sp)
    cc98:	dfc00515 	stw	ra,20(sp)
    cc9c:	18805217 	ldw	r2,328(r3)
    cca0:	2023883a 	mov	r17,r4
    cca4:	10003726 	beq	r2,zero,cd84 <__register_exitproc+0x104>
    cca8:	10c00117 	ldw	r3,4(r2)
    ccac:	010007c4 	movi	r4,31
    ccb0:	20c00e16 	blt	r4,r3,ccec <__register_exitproc+0x6c>
    ccb4:	1a000044 	addi	r8,r3,1
    ccb8:	8800221e 	bne	r17,zero,cd44 <__register_exitproc+0xc4>
    ccbc:	18c00084 	addi	r3,r3,2
    ccc0:	18c7883a 	add	r3,r3,r3
    ccc4:	18c7883a 	add	r3,r3,r3
    ccc8:	12000115 	stw	r8,4(r2)
    cccc:	10c7883a 	add	r3,r2,r3
    ccd0:	19400015 	stw	r5,0(r3)
    ccd4:	0005883a 	mov	r2,zero
    ccd8:	dfc00517 	ldw	ra,20(sp)
    ccdc:	dc400417 	ldw	r17,16(sp)
    cce0:	dc000317 	ldw	r16,12(sp)
    cce4:	dec00604 	addi	sp,sp,24
    cce8:	f800283a 	ret
    ccec:	00800034 	movhi	r2,0
    ccf0:	10800004 	addi	r2,r2,0
    ccf4:	10002626 	beq	r2,zero,cd90 <__register_exitproc+0x110>
    ccf8:	01006404 	movi	r4,400
    ccfc:	d9400015 	stw	r5,0(sp)
    cd00:	d9800115 	stw	r6,4(sp)
    cd04:	d9c00215 	stw	r7,8(sp)
    cd08:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    cd0c:	d9400017 	ldw	r5,0(sp)
    cd10:	d9800117 	ldw	r6,4(sp)
    cd14:	d9c00217 	ldw	r7,8(sp)
    cd18:	10001d26 	beq	r2,zero,cd90 <__register_exitproc+0x110>
    cd1c:	81000017 	ldw	r4,0(r16)
    cd20:	10000115 	stw	zero,4(r2)
    cd24:	02000044 	movi	r8,1
    cd28:	22405217 	ldw	r9,328(r4)
    cd2c:	0007883a 	mov	r3,zero
    cd30:	12400015 	stw	r9,0(r2)
    cd34:	20805215 	stw	r2,328(r4)
    cd38:	10006215 	stw	zero,392(r2)
    cd3c:	10006315 	stw	zero,396(r2)
    cd40:	883fde26 	beq	r17,zero,ccbc <__alt_data_end+0xffff461c>
    cd44:	18c9883a 	add	r4,r3,r3
    cd48:	2109883a 	add	r4,r4,r4
    cd4c:	1109883a 	add	r4,r2,r4
    cd50:	21802215 	stw	r6,136(r4)
    cd54:	01800044 	movi	r6,1
    cd58:	12406217 	ldw	r9,392(r2)
    cd5c:	30cc983a 	sll	r6,r6,r3
    cd60:	4992b03a 	or	r9,r9,r6
    cd64:	12406215 	stw	r9,392(r2)
    cd68:	21c04215 	stw	r7,264(r4)
    cd6c:	01000084 	movi	r4,2
    cd70:	893fd21e 	bne	r17,r4,ccbc <__alt_data_end+0xffff461c>
    cd74:	11006317 	ldw	r4,396(r2)
    cd78:	218cb03a 	or	r6,r4,r6
    cd7c:	11806315 	stw	r6,396(r2)
    cd80:	003fce06 	br	ccbc <__alt_data_end+0xffff461c>
    cd84:	18805304 	addi	r2,r3,332
    cd88:	18805215 	stw	r2,328(r3)
    cd8c:	003fc606 	br	cca8 <__alt_data_end+0xffff4608>
    cd90:	00bfffc4 	movi	r2,-1
    cd94:	003fd006 	br	ccd8 <__alt_data_end+0xffff4638>

0000cd98 <__call_exitprocs>:
    cd98:	defff504 	addi	sp,sp,-44
    cd9c:	df000915 	stw	fp,36(sp)
    cda0:	dd400615 	stw	r21,24(sp)
    cda4:	dc800315 	stw	r18,12(sp)
    cda8:	dfc00a15 	stw	ra,40(sp)
    cdac:	ddc00815 	stw	r23,32(sp)
    cdb0:	dd800715 	stw	r22,28(sp)
    cdb4:	dd000515 	stw	r20,20(sp)
    cdb8:	dcc00415 	stw	r19,16(sp)
    cdbc:	dc400215 	stw	r17,8(sp)
    cdc0:	dc000115 	stw	r16,4(sp)
    cdc4:	d9000015 	stw	r4,0(sp)
    cdc8:	2839883a 	mov	fp,r5
    cdcc:	04800044 	movi	r18,1
    cdd0:	057fffc4 	movi	r21,-1
    cdd4:	00800074 	movhi	r2,1
    cdd8:	10bb3504 	addi	r2,r2,-4908
    cddc:	12000017 	ldw	r8,0(r2)
    cde0:	45005217 	ldw	r20,328(r8)
    cde4:	44c05204 	addi	r19,r8,328
    cde8:	a0001c26 	beq	r20,zero,ce5c <__call_exitprocs+0xc4>
    cdec:	a0800117 	ldw	r2,4(r20)
    cdf0:	15ffffc4 	addi	r23,r2,-1
    cdf4:	b8000d16 	blt	r23,zero,ce2c <__call_exitprocs+0x94>
    cdf8:	14000044 	addi	r16,r2,1
    cdfc:	8421883a 	add	r16,r16,r16
    ce00:	8421883a 	add	r16,r16,r16
    ce04:	84402004 	addi	r17,r16,128
    ce08:	a463883a 	add	r17,r20,r17
    ce0c:	a421883a 	add	r16,r20,r16
    ce10:	e0001e26 	beq	fp,zero,ce8c <__call_exitprocs+0xf4>
    ce14:	80804017 	ldw	r2,256(r16)
    ce18:	e0801c26 	beq	fp,r2,ce8c <__call_exitprocs+0xf4>
    ce1c:	bdffffc4 	addi	r23,r23,-1
    ce20:	843fff04 	addi	r16,r16,-4
    ce24:	8c7fff04 	addi	r17,r17,-4
    ce28:	bd7ff91e 	bne	r23,r21,ce10 <__alt_data_end+0xffff4770>
    ce2c:	00800034 	movhi	r2,0
    ce30:	10800004 	addi	r2,r2,0
    ce34:	10000926 	beq	r2,zero,ce5c <__call_exitprocs+0xc4>
    ce38:	a0800117 	ldw	r2,4(r20)
    ce3c:	1000301e 	bne	r2,zero,cf00 <__call_exitprocs+0x168>
    ce40:	a0800017 	ldw	r2,0(r20)
    ce44:	10003226 	beq	r2,zero,cf10 <__call_exitprocs+0x178>
    ce48:	a009883a 	mov	r4,r20
    ce4c:	98800015 	stw	r2,0(r19)
    ce50:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    ce54:	9d000017 	ldw	r20,0(r19)
    ce58:	a03fe41e 	bne	r20,zero,cdec <__alt_data_end+0xffff474c>
    ce5c:	dfc00a17 	ldw	ra,40(sp)
    ce60:	df000917 	ldw	fp,36(sp)
    ce64:	ddc00817 	ldw	r23,32(sp)
    ce68:	dd800717 	ldw	r22,28(sp)
    ce6c:	dd400617 	ldw	r21,24(sp)
    ce70:	dd000517 	ldw	r20,20(sp)
    ce74:	dcc00417 	ldw	r19,16(sp)
    ce78:	dc800317 	ldw	r18,12(sp)
    ce7c:	dc400217 	ldw	r17,8(sp)
    ce80:	dc000117 	ldw	r16,4(sp)
    ce84:	dec00b04 	addi	sp,sp,44
    ce88:	f800283a 	ret
    ce8c:	a0800117 	ldw	r2,4(r20)
    ce90:	80c00017 	ldw	r3,0(r16)
    ce94:	10bfffc4 	addi	r2,r2,-1
    ce98:	15c01426 	beq	r2,r23,ceec <__call_exitprocs+0x154>
    ce9c:	80000015 	stw	zero,0(r16)
    cea0:	183fde26 	beq	r3,zero,ce1c <__alt_data_end+0xffff477c>
    cea4:	95c8983a 	sll	r4,r18,r23
    cea8:	a0806217 	ldw	r2,392(r20)
    ceac:	a5800117 	ldw	r22,4(r20)
    ceb0:	2084703a 	and	r2,r4,r2
    ceb4:	10000b26 	beq	r2,zero,cee4 <__call_exitprocs+0x14c>
    ceb8:	a0806317 	ldw	r2,396(r20)
    cebc:	2088703a 	and	r4,r4,r2
    cec0:	20000c1e 	bne	r4,zero,cef4 <__call_exitprocs+0x15c>
    cec4:	89400017 	ldw	r5,0(r17)
    cec8:	d9000017 	ldw	r4,0(sp)
    cecc:	183ee83a 	callr	r3
    ced0:	a0800117 	ldw	r2,4(r20)
    ced4:	15bfbf1e 	bne	r2,r22,cdd4 <__alt_data_end+0xffff4734>
    ced8:	98800017 	ldw	r2,0(r19)
    cedc:	153fcf26 	beq	r2,r20,ce1c <__alt_data_end+0xffff477c>
    cee0:	003fbc06 	br	cdd4 <__alt_data_end+0xffff4734>
    cee4:	183ee83a 	callr	r3
    cee8:	003ff906 	br	ced0 <__alt_data_end+0xffff4830>
    ceec:	a5c00115 	stw	r23,4(r20)
    cef0:	003feb06 	br	cea0 <__alt_data_end+0xffff4800>
    cef4:	89000017 	ldw	r4,0(r17)
    cef8:	183ee83a 	callr	r3
    cefc:	003ff406 	br	ced0 <__alt_data_end+0xffff4830>
    cf00:	a0800017 	ldw	r2,0(r20)
    cf04:	a027883a 	mov	r19,r20
    cf08:	1029883a 	mov	r20,r2
    cf0c:	003fb606 	br	cde8 <__alt_data_end+0xffff4748>
    cf10:	0005883a 	mov	r2,zero
    cf14:	003ffb06 	br	cf04 <__alt_data_end+0xffff4864>

0000cf18 <__divsi3>:
    cf18:	20001b16 	blt	r4,zero,cf88 <__divsi3+0x70>
    cf1c:	000f883a 	mov	r7,zero
    cf20:	28001616 	blt	r5,zero,cf7c <__divsi3+0x64>
    cf24:	200d883a 	mov	r6,r4
    cf28:	29001a2e 	bgeu	r5,r4,cf94 <__divsi3+0x7c>
    cf2c:	00800804 	movi	r2,32
    cf30:	00c00044 	movi	r3,1
    cf34:	00000106 	br	cf3c <__divsi3+0x24>
    cf38:	10000d26 	beq	r2,zero,cf70 <__divsi3+0x58>
    cf3c:	294b883a 	add	r5,r5,r5
    cf40:	10bfffc4 	addi	r2,r2,-1
    cf44:	18c7883a 	add	r3,r3,r3
    cf48:	293ffb36 	bltu	r5,r4,cf38 <__alt_data_end+0xffff4898>
    cf4c:	0005883a 	mov	r2,zero
    cf50:	18000726 	beq	r3,zero,cf70 <__divsi3+0x58>
    cf54:	0005883a 	mov	r2,zero
    cf58:	31400236 	bltu	r6,r5,cf64 <__divsi3+0x4c>
    cf5c:	314dc83a 	sub	r6,r6,r5
    cf60:	10c4b03a 	or	r2,r2,r3
    cf64:	1806d07a 	srli	r3,r3,1
    cf68:	280ad07a 	srli	r5,r5,1
    cf6c:	183ffa1e 	bne	r3,zero,cf58 <__alt_data_end+0xffff48b8>
    cf70:	38000126 	beq	r7,zero,cf78 <__divsi3+0x60>
    cf74:	0085c83a 	sub	r2,zero,r2
    cf78:	f800283a 	ret
    cf7c:	014bc83a 	sub	r5,zero,r5
    cf80:	39c0005c 	xori	r7,r7,1
    cf84:	003fe706 	br	cf24 <__alt_data_end+0xffff4884>
    cf88:	0109c83a 	sub	r4,zero,r4
    cf8c:	01c00044 	movi	r7,1
    cf90:	003fe306 	br	cf20 <__alt_data_end+0xffff4880>
    cf94:	00c00044 	movi	r3,1
    cf98:	003fee06 	br	cf54 <__alt_data_end+0xffff48b4>

0000cf9c <__modsi3>:
    cf9c:	20001716 	blt	r4,zero,cffc <__modsi3+0x60>
    cfa0:	000f883a 	mov	r7,zero
    cfa4:	2005883a 	mov	r2,r4
    cfa8:	28001216 	blt	r5,zero,cff4 <__modsi3+0x58>
    cfac:	2900162e 	bgeu	r5,r4,d008 <__modsi3+0x6c>
    cfb0:	01800804 	movi	r6,32
    cfb4:	00c00044 	movi	r3,1
    cfb8:	00000106 	br	cfc0 <__modsi3+0x24>
    cfbc:	30000a26 	beq	r6,zero,cfe8 <__modsi3+0x4c>
    cfc0:	294b883a 	add	r5,r5,r5
    cfc4:	31bfffc4 	addi	r6,r6,-1
    cfc8:	18c7883a 	add	r3,r3,r3
    cfcc:	293ffb36 	bltu	r5,r4,cfbc <__alt_data_end+0xffff491c>
    cfd0:	18000526 	beq	r3,zero,cfe8 <__modsi3+0x4c>
    cfd4:	1806d07a 	srli	r3,r3,1
    cfd8:	11400136 	bltu	r2,r5,cfe0 <__modsi3+0x44>
    cfdc:	1145c83a 	sub	r2,r2,r5
    cfe0:	280ad07a 	srli	r5,r5,1
    cfe4:	183ffb1e 	bne	r3,zero,cfd4 <__alt_data_end+0xffff4934>
    cfe8:	38000126 	beq	r7,zero,cff0 <__modsi3+0x54>
    cfec:	0085c83a 	sub	r2,zero,r2
    cff0:	f800283a 	ret
    cff4:	014bc83a 	sub	r5,zero,r5
    cff8:	003fec06 	br	cfac <__alt_data_end+0xffff490c>
    cffc:	0109c83a 	sub	r4,zero,r4
    d000:	01c00044 	movi	r7,1
    d004:	003fe706 	br	cfa4 <__alt_data_end+0xffff4904>
    d008:	00c00044 	movi	r3,1
    d00c:	003ff106 	br	cfd4 <__alt_data_end+0xffff4934>

0000d010 <__udivsi3>:
    d010:	200d883a 	mov	r6,r4
    d014:	2900152e 	bgeu	r5,r4,d06c <__udivsi3+0x5c>
    d018:	28001416 	blt	r5,zero,d06c <__udivsi3+0x5c>
    d01c:	00800804 	movi	r2,32
    d020:	00c00044 	movi	r3,1
    d024:	00000206 	br	d030 <__udivsi3+0x20>
    d028:	10000e26 	beq	r2,zero,d064 <__udivsi3+0x54>
    d02c:	28000516 	blt	r5,zero,d044 <__udivsi3+0x34>
    d030:	294b883a 	add	r5,r5,r5
    d034:	10bfffc4 	addi	r2,r2,-1
    d038:	18c7883a 	add	r3,r3,r3
    d03c:	293ffa36 	bltu	r5,r4,d028 <__alt_data_end+0xffff4988>
    d040:	18000826 	beq	r3,zero,d064 <__udivsi3+0x54>
    d044:	0005883a 	mov	r2,zero
    d048:	31400236 	bltu	r6,r5,d054 <__udivsi3+0x44>
    d04c:	314dc83a 	sub	r6,r6,r5
    d050:	10c4b03a 	or	r2,r2,r3
    d054:	1806d07a 	srli	r3,r3,1
    d058:	280ad07a 	srli	r5,r5,1
    d05c:	183ffa1e 	bne	r3,zero,d048 <__alt_data_end+0xffff49a8>
    d060:	f800283a 	ret
    d064:	0005883a 	mov	r2,zero
    d068:	f800283a 	ret
    d06c:	00c00044 	movi	r3,1
    d070:	003ff406 	br	d044 <__alt_data_end+0xffff49a4>

0000d074 <__umodsi3>:
    d074:	2005883a 	mov	r2,r4
    d078:	2900122e 	bgeu	r5,r4,d0c4 <__umodsi3+0x50>
    d07c:	28001116 	blt	r5,zero,d0c4 <__umodsi3+0x50>
    d080:	01800804 	movi	r6,32
    d084:	00c00044 	movi	r3,1
    d088:	00000206 	br	d094 <__umodsi3+0x20>
    d08c:	30000c26 	beq	r6,zero,d0c0 <__umodsi3+0x4c>
    d090:	28000516 	blt	r5,zero,d0a8 <__umodsi3+0x34>
    d094:	294b883a 	add	r5,r5,r5
    d098:	31bfffc4 	addi	r6,r6,-1
    d09c:	18c7883a 	add	r3,r3,r3
    d0a0:	293ffa36 	bltu	r5,r4,d08c <__alt_data_end+0xffff49ec>
    d0a4:	18000626 	beq	r3,zero,d0c0 <__umodsi3+0x4c>
    d0a8:	1806d07a 	srli	r3,r3,1
    d0ac:	11400136 	bltu	r2,r5,d0b4 <__umodsi3+0x40>
    d0b0:	1145c83a 	sub	r2,r2,r5
    d0b4:	280ad07a 	srli	r5,r5,1
    d0b8:	183ffb1e 	bne	r3,zero,d0a8 <__alt_data_end+0xffff4a08>
    d0bc:	f800283a 	ret
    d0c0:	f800283a 	ret
    d0c4:	00c00044 	movi	r3,1
    d0c8:	003ff706 	br	d0a8 <__alt_data_end+0xffff4a08>

0000d0cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d0cc:	defffd04 	addi	sp,sp,-12
    d0d0:	df000215 	stw	fp,8(sp)
    d0d4:	df000204 	addi	fp,sp,8
    d0d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d0dc:	d0270245 	stb	zero,-25591(gp)
    d0e0:	e0bfff17 	ldw	r2,-4(fp)
    d0e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    d0e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d0ec:	10000226 	beq	r2,zero,d0f8 <_exit+0x2c>
    ALT_SIM_FAIL();
    d0f0:	002af070 	cmpltui	zero,zero,43969
    d0f4:	00000106 	br	d0fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    d0f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d0fc:	003fff06 	br	d0fc <__alt_data_end+0xffff4a5c>
