
nios_ii.elf:     file format elf32-littlenios2
nios_ii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000234

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0001dd38 memsz 0x0001dd38 flags r-x
    LOAD off    0x0001ed58 vaddr 0x0001dd58 paddr 0x0001f930 align 2**12
         filesz 0x00001bd8 memsz 0x00001bd8 flags rw-
    LOAD off    0x00021508 vaddr 0x00021508 paddr 0x00021508 align 2**12
         filesz 0x00000000 memsz 0x0000bbf0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000214  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001addc  00000234  00000234  00001234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002d48  0001b010  0001b010  0001c010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bd8  0001dd58  0001f930  0001ed58  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000bbf0  00021508  00021508  00021508  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002d0f8  0002d0f8  00020930  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00020930  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001280  00000000  00000000  00020958  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031fee  00000000  00000000  00021bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c0a7  00000000  00000000  00053bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000feb8  00000000  00000000  0005fc6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000389c  00000000  00000000  0006fb28  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000055ea  00000000  00000000  000733c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00019b00  00000000  00000000  000789ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000924b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001af8  00000000  00000000  000924c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0009918e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00099194  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000991a0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000991a1  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000991a2  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000991a6  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000991aa  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000991ae  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000991b9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000991c4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  000991cf  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002a  00000000  00000000  000991dd  2**0
                  CONTENTS, READONLY
 29 .jdi          000045ae  00000000  00000000  00099207  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005f144  00000000  00000000  0009d7b5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000234 l    d  .text	00000000 .text
0001b010 l    d  .rodata	00000000 .rodata
0001dd58 l    d  .rwdata	00000000 .rwdata
00021508 l    d  .bss	00000000 .bss
0002d0f8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ii_bsp//obj/HAL/src/crt0.o
0000026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 kiss_fft.c
00000270 l     F .text	00000110 kf_factor
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0001d900 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0001dd58 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001da5a l     O .rodata	00000010 zeroes.4404
00008740 l     F .text	000000bc __sbprintf
0001da6a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00008950 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000a4a8 l     F .text	00000008 __fp_unlock
0000a4bc l     F .text	0000019c __sinit.part.1
0000a658 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0001e5a4 l     O .rwdata	00000020 lc_ctype_charset
0001e584 l     O .rwdata	00000020 lc_message_charset
0001e5c4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0001da98 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000cfe8 l     F .text	000000fc __sprint_r.part.0
0001dbbc l     O .rodata	00000010 zeroes.4349
0000e624 l     F .text	000000bc __sbprintf
0001dbcc l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0000fc94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000fdd0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000fdfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fef0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000ffd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000100c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00010500 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0001f8a4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010774 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0001f8a8 l     O .rwdata	00000004 lockid
0002153c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0001f8ac l     O .rwdata	00000004 lockid
00021544 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000121ac l     F .text	00000048 OS_InitMisc
000121f4 l     F .text	0000006c OS_InitRdyList
00012360 l     F .text	000000e4 OS_InitTCBList
000120cc l     F .text	000000e0 OS_InitEventList
00012260 l     F .text	00000080 OS_InitTaskIdle
000122e0 l     F .text	00000080 OS_InitTaskStat
000125d0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
000142e0 l     F .text	000000f4 OS_FlagTaskRdy
000140a0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000183b8 l     F .text	00000034 alt_dev_reg
0001e7a4 l     O .rwdata	0000106c jtag_uart_0
0001f810 l     O .rwdata	00000030 audio_video_config
0001f840 l     O .rwdata	00000030 audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00018740 l     F .text	000002a8 altera_avalon_jtag_uart_irq
000189e8 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000191c4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00019ba8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00019df8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001a0d8 l     F .text	0000003c alt_get_errno
0001a114 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000215a8 g     O .bss	00000004 alt_instruction_exception_handler
0000c6f4 g     F .text	00000074 _mprec_log10
0001f8fa g     O .rwdata	00000002 OSTaskNameSize
0000c7e0 g     F .text	0000008c __any_on
0000ebd8 g     F .text	00000054 _isatty_r
0001daa4 g     O .rodata	00000028 __mprec_tinytens
000101dc g     F .text	000000bc alt_main
00006288 g     F .text	000000c0 _puts_r
0002cff8 g     O .bss	00000100 alt_irq
00002934 g     F .text	00000014 fabs
0000ec2c g     F .text	00000060 _lseek_r
00014b00 g     F .text	000000d8 OS_MemInit
000014d8 g     F .text	00000130 sqrt
00000ad4 g     F .text	00000398 TaskFrequencySeparator
0001f930 g       *ABS*	00000000 __flash_rwdata_start
00018358 g     F .text	00000060 OSTimeSet
000041e8 g     F .text	00000088 .hidden __eqdf2
00000e6c g     F .text	00000078 map
00010e20 g     F .text	00000610 OSEventPendMulti
0001955c g     F .text	00000060 alt_up_audio_read_fifo_avail
0002d0f8 g       *ABS*	00000000 __alt_heap_start
0001a750 g     F .text	00000024 OSTaskCreateHook
0000624c g     F .text	0000003c printf
0001f8d2 g     O .rwdata	00000002 OSMboxEn
000215d4 g     O .bss	00002000 TaskADCToFFTStack
000195bc g     F .text	00000068 alt_up_audio_record_r
00011488 g     F .text	0000004c OSIntEnter
0000ee44 g     F .text	0000009c _wcrtomb_r
0000cea8 g     F .text	0000005c __sseek
0000a808 g     F .text	00000010 __sinit
0000ecec g     F .text	00000140 __swbuf_r
0001f8e2 g     O .rwdata	00000002 OSQEn
0000b2dc g     F .text	0000007c _setlocale_r
0000a660 g     F .text	00000078 __sfmoreglue
00010af4 g     F .text	000000cc __malloc_unlock
0001a7b8 g     F .text	00000020 OSTaskStatHook
0002154c g     O .bss	00000001 OSLockNesting
00000ee4 g     F .text	00000130 Bel_FFT_Init
0001f920 g     O .rwdata	00000002 OSDataSize
0002154d g     O .bss	00000001 OSRunning
000194c8 g     F .text	00000094 alt_up_audio_reset_audio_core
0000b658 g     F .text	0000015c memmove
0001a7f8 g     F .text	00000020 OSInitHookBegin
0001f918 g     O .rwdata	00000002 OSTmrSize
0000a7f0 g     F .text	00000018 _cleanup
0000b7b4 g     F .text	000000a8 _Balloc
00021550 g     O .bss	00000004 OSIdleCtr
00004270 g     F .text	000000dc .hidden __gtdf2
0001a500 g     F .text	00000024 altera_nios2_gen2_irq_init
0001a5d0 g       .text	00000000 OSStartTsk
00005768 g     F .text	00000010 __errno
00012900 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
00021508 g     O .bss	00000004 sem_fftoutput
0001f91e g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0001f8be g     O .rwdata	00000002 OSEventSize
00021554 g     O .bss	00000001 OSPrioHighRdy
0000eb7c g     F .text	0000005c _fstat_r
0001a774 g     F .text	00000024 OSTaskDelHook
0002151c g     O .bss	00000004 errno
0000ce24 g     F .text	00000008 __seofread
0001a5b0 g       .text	00000000 OSStartHighRdy
00016dd8 g     F .text	000001e4 OSTaskCreateExt
00013be8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0001f8fe g     O .rwdata	00000002 OSTaskStatStkSize
00019488 g     F .text	00000040 alt_up_audio_write_interrupt_pending
00012d64 g     F .text	00000308 OSFlagAccept
00015144 g     F .text	000000b8 OSQFlush
00014bd8 g     F .text	00000140 OSQAccept
00021534 g     O .bss	00000004 alt_argv
00027870 g       *ABS*	00000000 _gp
00016c2c g     F .text	000001ac OSTaskCreate
0001673c g     F .text	000004f0 OSTaskChangePrio
00021548 g     O .bss	00000004 alt_heapsem
00012bd4 g     F .text	00000190 OSDebugInit
00016fbc g     F .text	00000344 OSTaskDel
0001e624 g     O .rwdata	00000180 alt_fd_list
00029dd4 g     O .bss	00000370 OSFlagTbl
00011eac g     F .text	000000b8 OS_EventTaskRemove
00019d48 g     F .text	00000090 alt_find_dev
00005fac g     F .text	00000148 memcpy
0001f8e8 g     O .rwdata	00000002 OSRdyTblSize
0000a4b0 g     F .text	0000000c _cleanup_r
000235d4 g     O .bss	00002000 TaskFFTStack
00005628 g     F .text	000000dc .hidden __floatsidf
00019edc g     F .text	0000007c alt_io_redirect
0000434c g     F .text	000000f4 .hidden __ltdf2
0001b010 g       *ABS*	00000000 __DTOR_END__
00006348 g     F .text	00000014 puts
0001aa78 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00010bc0 g     F .text	00000120 OSEventNameGet
0001f8cc g     O .rwdata	00000002 OSFlagMax
00002964 g     F .text	00000074 __fpclassifyd
0000c650 g     F .text	000000a4 __ratio
000114d4 g     F .text	000000f8 OSIntExit
0000e608 g     F .text	0000001c __vfiprintf_internal
0001f906 g     O .rwdata	00000002 OSTCBSize
000199a4 g     F .text	00000050 alt_up_audio_read_fifo_head
00021555 g     O .bss	00000001 OSPrioCur
00018c44 g     F .text	000002bc altera_avalon_jtag_uart_read
00005778 g     F .text	00000014 malloc
0000621c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002e88 g     F .text	00000064 .hidden __udivsi3
0000ff2c g     F .text	000000ac isatty
0001f8ec g     O .rwdata	00000002 OSStkWidth
0001daf4 g     O .rodata	000000c8 __mprec_tens
0001f8e0 g     O .rwdata	00000002 OSPtrSize
0000b358 g     F .text	0000000c __locale_charset
0001f8c0 g     O .rwdata	00000002 OSEventTblSize
0001a524 g       .text	00000000 OSCtxSw
00021518 g     O .bss	00000004 __malloc_top_pad
00021558 g     O .bss	00000004 OSTCBList
000255d4 g     O .bss	00000800 fout
0002152c g     O .bss	00000004 alt_fd_list_lock
0001f884 g     O .rwdata	00000004 __mb_cur_max
0000b388 g     F .text	0000000c _localeconv_r
00000700 g     F .text	00000158 TaskADCToFFT
0000bbe8 g     F .text	0000003c __i2b
0000ac8c g     F .text	000004c8 __sfvwrite_r
0002a144 g     O .bss	00000c30 OSMemTbl
0002155c g     O .bss	00000001 OSTickStepState
0000635c g     F .text	00000054 _sbrk_r
0001f8e4 g     O .rwdata	00000002 OSQMax
0002ad74 g     O .bss	00000800 OSTaskStatStk
0001473c g     F .text	000000f0 OSMemNameGet
0001f8c4 g     O .rwdata	00000002 OSFlagEn
0000ec8c g     F .text	00000060 _read_r
0001f90a g     O .rwdata	00000002 OSTimeTickHookEn
0000fda8 g     F .text	00000028 alt_dcache_flush
000155f4 g     F .text	00000168 OSQPost
000143d4 g     F .text	000000a4 OS_FlagUnlink
0001f89c g     O .rwdata	00000004 alt_max_fd
00012498 g     F .text	00000068 OS_MemCopy
000199f4 g     F .text	00000068 alt_up_audio_write_fifo_head
00012500 g     F .text	000000d0 OS_Sched
0000e870 g     F .text	000000f0 _fclose_r
0001464c g     F .text	000000f0 OSMemGet
000175e8 g     F .text	000001b4 OSTaskNameSet
0000a478 g     F .text	00000030 fflush
00000380 g     F .text	0000008c kiss_fft_alloc_twiddles
00021514 g     O .bss	00000004 __malloc_max_sbrked_mem
00021560 g     O .bss	00000004 OSCtxSwCtr
0001a7d8 g     F .text	00000020 OSTimeTickHook
00019f58 g     F .text	00000180 alt_irq_register
0001f8ce g     O .rwdata	00000002 OSFlagNameSize
00011f64 g     F .text	00000100 OS_EventTaskRemoveMulti
00002f6c g     F .text	000008ac .hidden __adddf3
00011d5c g     F .text	00000150 OS_EventTaskWaitMulti
0000c3f8 g     F .text	0000010c __b2d
0001f8e6 g     O .rwdata	00000002 OSQSize
0000f628 g     F .text	000005c4 .hidden __umoddi3
00010100 g     F .text	000000dc lseek
000160a4 g     F .text	0000020c OSSemPend
0001f870 g     O .rwdata	00000004 __fdlib_version
0001f874 g     O .rwdata	00000004 _global_impure_ptr
0000c86c g     F .text	00000564 _realloc_r
0001f8d0 g     O .rwdata	00000002 OSLowestPrio
0002d0f8 g       *ABS*	00000000 __bss_end
0001a858 g     F .text	00000024 OSTCBInitHook
0001f916 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001a3f8 g     F .text	00000108 alt_tick
0000f02c g     F .text	000005fc .hidden __udivdi3
0000ead8 g     F .text	00000024 _fputwc_r
00000858 g     F .text	0000027c TaskFFT
0001f8b8 g     O .rwdata	00000002 OSEventEn
0001dacc g     O .rodata	00000028 __mprec_bigtens
0000b9cc g     F .text	00000104 __s2b
0001f912 g     O .rwdata	00000002 OSTmrCfgNameSize
0000fbec g     F .text	000000a8 .hidden __floatunsidf
0000c138 g     F .text	00000060 __mcmp
000192b4 g     F .text	0000003c alt_up_audio_open_dev
0000a828 g     F .text	00000018 __fp_lock_all
00014200 g     F .text	000000e0 OS_FlagInit
000196ec g     F .text	00000068 alt_up_audio_play_r
0001a35c g     F .text	0000009c alt_alarm_stop
0001f8f4 g     O .rwdata	00000002 OSTaskIdleStkSize
0002159c g     O .bss	00000004 alt_irq_active
00015cdc g     F .text	000000b0 OSSemAccept
00014940 g     F .text	000000d8 OSMemPut
00014478 g     F .text	000001d4 OSMemCreate
00021564 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d8 alt_irq_handler
0001e5fc g     O .rwdata	00000028 alt_dev_null
0001f908 g     O .rwdata	00000002 OSTicksPerSec
000029ec g     F .text	000001ec rint
0001a524 g       .text	00000000 OSIntCtxSw
00019b88 g     F .text	00000020 alt_dcache_flush_all
0000bad0 g     F .text	00000068 __hi0bits
000055a8 g     F .text	00000080 .hidden __fixdfsi
00021568 g     O .bss	00000004 OSTCBFreeList
0001f930 g       *ABS*	00000000 __ram_rwdata_end
000162b0 g     F .text	0000016c OSSemPendAbort
0001f894 g     O .rwdata	00000008 alt_dev_list
000107b0 g     F .text	00000100 write
0001abdc g     F .text	000000a0 _putc_r
0001f90c g     O .rwdata	00000002 OSVersionNbr
00025dd4 g     O .bss	00002000 TaskStartStack
0001dd58 g       *ABS*	00000000 __ram_rodata_end
0000fe38 g     F .text	000000b8 fstat
0000434c g     F .text	000000f4 .hidden __ledf2
0001f8b4 g     O .rwdata	00000004 OSEndiannessTest
0000beb0 g     F .text	00000140 __pow5mult
0000d0fc g     F .text	0000150c ___vfiprintf_internal_r
00021528 g     O .bss	00000004 __nlocale_changed
00002eec g     F .text	00000058 .hidden __umodsi3
0001f8c6 g     O .rwdata	00000002 OSFlagGrpSize
0002d0f8 g       *ABS*	00000000 end
00018604 g     F .text	0000013c altera_avalon_jtag_uart_init
00012768 g     F .text	000000cc OS_TaskStat
000001d4 g     F .exceptions	00000060 alt_instruction_exception_entry
0001b010 g       *ABS*	00000000 __CTOR_LIST__
00030d40 g       *ABS*	00000000 __alt_stack_pointer
00019240 g     F .text	00000074 alt_avalon_timer_sc_init
00005704 g     F .text	00000064 .hidden __clzsi2
00018f00 g     F .text	000002c4 altera_avalon_jtag_uart_write
00000454 g     F .text	00000178 kiss_fft_stride
0000a818 g     F .text	00000004 __sfp_lock_acquire
0000b574 g     F .text	000000e4 memchr
00012444 g     F .text	00000054 OS_MemClr
000005cc g     F .text	00000048 kiss_fft
00006448 g     F .text	000022dc ___vfprintf_internal_r
0001a5f4 g     F .text	0000015c OSTaskStkInit
0000a97c g     F .text	00000310 _free_r
00010298 g     F .text	0000022c alt_printf
0000b364 g     F .text	00000010 __locale_mb_cur_max
00011ab4 g     F .text	00000198 OS_EventTaskRdy
0001ae5c g     F .text	00000180 __call_exitprocs
0002156c g     O .bss	00000001 OSCPUUsage
00021524 g     O .bss	00000004 __mlocale_changed
0001f87c g     O .rwdata	00000004 __malloc_sbrk_base
00000234 g     F .text	0000003c _start
000215a0 g     O .bss	00000004 _alt_tick_rate
000151fc g     F .text	0000028c OSQPend
00017ea8 g     F .text	00000104 OSTimeDly
0001989c g     F .text	00000108 alt_up_audio_write_fifo
00027dd4 g     O .bss	00002000 TaskFrequencySeparatorStack
0000bff0 g     F .text	00000148 __lshift
000215a4 g     O .bss	00000004 _alt_nticks
0001053c g     F .text	00000104 read
00018424 g     F .text	0000007c alt_sys_init
000197bc g     F .text	000000e0 alt_up_audio_read_fifo
0001ad44 g     F .text	00000118 __register_exitproc
0002156d g     O .bss	00000001 OSTaskCtr
000193f0 g     F .text	00000058 alt_up_audio_disable_write_interrupt
00017fac g     F .text	0000017c OSTimeDlyHMSM
0000bc24 g     F .text	0000028c __multiply
00001608 g     F .text	000010a4 __ieee754_pow
00018aec g     F .text	00000068 altera_avalon_jtag_uart_close
00001014 g     F .text	000004c4 pow
00002f44 g     F .text	00000028 .hidden __mulsi3
0001dd58 g       *ABS*	00000000 __ram_rwdata_start
0001b010 g       *ABS*	00000000 __ram_rodata_start
000215ac g     O .bss	00000028 __malloc_current_mallinfo
0001f8ba g     O .rwdata	00000002 OSEventMax
0000c504 g     F .text	0000014c __d2b
0001641c g     F .text	00000110 OSSemPost
00011658 g     F .text	000000dc OSSchedUnlock
000184a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001a984 g     F .text	000000f4 alt_get_fd
00021570 g     O .bss	00000004 OSMemFreeList
000117a4 g     F .text	000000b0 OSStatInit
00013fdc g     F .text	000000c4 OSFlagQuery
0001f8f0 g     O .rwdata	00000002 OSTaskCreateExtEn
0000e740 g     F .text	00000054 _close_r
0001939c g     F .text	00000054 alt_up_audio_enable_write_interrupt
0001ab60 g     F .text	0000007c memcmp
00011a94 g     F .text	00000020 OS_Dummy
00018560 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002d0f8 g       *ABS*	00000000 __alt_stack_base
000185b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000087fc g     F .text	00000154 __swsetup_r
0002b574 g     O .bss	000001e0 OSQTbl
00003818 g     F .text	000009d0 .hidden __divdf3
00019344 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0000a6d8 g     F .text	00000118 __sfp
0000c768 g     F .text	00000078 __copybits
0001e17c g     O .rwdata	00000408 __malloc_av_
0000a824 g     F .text	00000004 __sinit_lock_release
00021574 g     O .bss	00000004 OSTCBHighRdy
00004440 g     F .text	0000086c .hidden __muldf3
0000cdd0 g     F .text	00000054 __sread
00021578 g     O .bss	00000004 OSQFreeList
0001a87c g     F .text	00000108 alt_find_file
00019be4 g     F .text	000000a4 alt_dev_llist_insert
000109d4 g     F .text	00000120 __malloc_lock
000106c4 g     F .text	000000b0 sbrk
00010ce0 g     F .text	00000140 OSEventNameSet
0000a41c g     F .text	0000005c _fflush_r
0000e794 g     F .text	000000dc _calloc_r
0002157c g     O .bss	00000001 OSRdyGrp
00021508 g       *ABS*	00000000 __bss_start
000060f4 g     F .text	00000128 memset
00000634 g     F .text	00000074 main
0001968c g     F .text	00000060 alt_up_audio_write_fifo_space
00021538 g     O .bss	00000004 alt_envp
00021510 g     O .bss	00000004 __malloc_max_total_mem
00018500 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000ee2c g     F .text	00000018 __swbuf
0001dbfc g     O .rodata	00000100 OSUnMapTbl
0001f8ea g     O .rwdata	00000002 OSSemEn
00013c48 g     F .text	00000394 OSFlagPost
0000cf04 g     F .text	00000008 __sclose
000029d8 g     F .text	00000008 matherr
00030d40 g       *ABS*	00000000 __alt_heap_limit
0000e960 g     F .text	00000014 fclose
00011c4c g     F .text	00000110 OS_EventTaskWait
00012834 g     F .text	000000cc OS_TaskStatStkChk
00017300 g     F .text	00000150 OSTaskDelReq
00008b78 g     F .text	00001688 _dtoa_r
000057a0 g     F .text	0000080c _malloc_r
0000efa0 g     F .text	00000030 __ascii_wctomb
0001f8a0 g     O .rwdata	00000004 alt_errno
00011734 g     F .text	00000070 OSStart
00010974 g     F .text	00000060 __env_unlock
0000b154 g     F .text	000000c4 _fwalk
0001779c g     F .text	000001d4 OSTaskResume
00014a18 g     F .text	000000e8 OSMemQuery
0001f8fc g     O .rwdata	00000002 OSTaskStatEn
0001f8d6 g     O .rwdata	00000002 OSMemMax
0001575c g     F .text	00000170 OSQPostFront
0001ac7c g     F .text	000000c8 putc
00002d90 g     F .text	00000084 .hidden __divsi3
0002157d g     O .bss	00000003 OSRdyTbl
0001f8b0 g     O .rwdata	00000002 OSDebugEn
0000a858 g     F .text	00000124 _malloc_trim_r
0001b010 g       *ABS*	00000000 __CTOR_END__
00002948 g     F .text	0000001c finite
0001f8c8 g     O .rwdata	00000002 OSFlagNodeSize
0001f910 g     O .rwdata	00000002 OSTmrCfgMax
0000cf0c g     F .text	000000dc strcmp
00014d18 g     F .text	000001ac OSQCreate
00017450 g     F .text	00000198 OSTaskNameGet
0001b010 g       *ABS*	00000000 __flash_rodata_start
000158cc g     F .text	0000020c OSQPostOpt
00011854 g     F .text	00000220 OSTimeTick
0001f8f8 g     O .rwdata	00000002 OSTaskMax
0001b010 g       *ABS*	00000000 __DTOR_LIST__
00015d8c g     F .text	000000d8 OSSemCreate
0001f91c g     O .rwdata	00000002 OSTmrWheelSize
00002d74 g     F .text	0000001c copysign
000041e8 g     F .text	00000088 .hidden __nedf2
0001f8f2 g     O .rwdata	00000002 OSTaskDelEn
0001652c g     F .text	00000110 OSSemQuery
00014ec4 g     F .text	00000280 OSQDel
00015488 g     F .text	0000016c OSQPendAbort
000183ec g     F .text	00000038 alt_irq_init
00010640 g     F .text	00000084 alt_release_fd
0001d910 g     O .rodata	00000100 .hidden __clz_tab
00021520 g     O .bss	00000004 _PathLocale
0001ab14 g     F .text	00000014 atexit
0000e6e0 g     F .text	00000060 _write_r
000115cc g     F .text	0000008c OSSchedLock
0000b394 g     F .text	00000018 setlocale
0001306c g     F .text	00000108 OSFlagCreate
0001f878 g     O .rwdata	00000004 _impure_ptr
00021530 g     O .bss	00000004 alt_argc
0000a200 g     F .text	0000021c __sflush_r
00002bd8 g     F .text	0000019c scalbn
00019ce8 g     F .text	00000060 _do_dtors
0000b380 g     F .text	00000008 __locale_cjk_lang
0001f8c2 g     O .rwdata	00000002 OSEventMultiEn
00013174 g     F .text	00000248 OSFlagDel
00021580 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
0000c394 g     F .text	00000064 __ulp
0001f90e g     O .rwdata	00000002 OSTmrEn
00013630 g     F .text	000005b8 OSFlagPend
0000a840 g     F .text	00000018 __fp_unlock_all
0001f88c g     O .rwdata	00000008 alt_fs_list
00012644 g     F .text	00000074 OS_StrCopy
00019624 g     F .text	00000068 alt_up_audio_record_l
0001f8d8 g     O .rwdata	00000002 OSMemNameSize
000029e0 g     F .text	0000000c nan
0001a818 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0001f904 g     O .rwdata	00000002 OSTCBPrioTblMax
0000b3ac g     F .text	0000000c localeconv
000026ac g     F .text	00000288 __ieee754_sqrt
0001f900 g     O .rwdata	00000002 OSTaskStatStkChkEn
0001f8d4 g     O .rwdata	00000002 OSMemEn
0001f8de g     O .rwdata	00000002 OSMutexEn
0001f930 g       *ABS*	00000000 _edata
0002d0f8 g       *ABS*	00000000 _end
00021584 g     O .bss	00000001 OSIntNesting
0000e974 g     F .text	00000164 __fputwc
00000234 g       *ABS*	00000000 __ram_exceptions_end
00018b54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00018128 g     F .text	000001d4 OSTimeDlyResume
000134e4 g     F .text	0000014c OSFlagNameSet
00019754 g     F .text	00000068 alt_up_audio_play_l
00017970 g     F .text	000001c0 OSTaskStkChk
0001f8da g     O .rwdata	00000002 OSMemSize
0000ce2c g     F .text	0000007c __swrite
0001f880 g     O .rwdata	00000004 __malloc_trim_threshold
0000b374 g     F .text	0000000c __locale_msgcharset
00021588 g     O .bss	00000004 OSTCBCur
0001ab28 g     F .text	00000038 exit
0002150c g     O .bss	00000004 flags
0001f8dc g     O .rwdata	00000002 OSMemTblSize
0000b218 g     F .text	000000c4 _fwalk_reent
0000c198 g     F .text	000001fc __mdiff
00000614 g     F .text	00000020 kiss_fft_cleanup
00002e14 g     F .text	00000074 .hidden __modsi3
00030d40 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000a81c g     F .text	00000004 __sfp_lock_release
00011430 g     F .text	00000058 OSInit
00017d14 g     F .text	00000124 OSTaskQuery
00015c34 g     F .text	000000a8 OS_QInit
000006a8 g     F .text	00000058 TaskStart
000126b8 g     F .text	00000054 OS_StrLen
0001482c g     F .text	00000114 OSMemNameSet
0001f8f6 g     O .rwdata	00000002 OSTaskProfileEn
0002158c g     O .bss	00000004 OSTime
0002b754 g     O .bss	00000800 OSTaskIdleStk
0001afdc g     F .text	00000034 _exit
00019a5c g     F .text	0000012c alt_alarm_start
000133bc g     F .text	00000128 OSFlagNameGet
000182fc g     F .text	0000005c OSTimeGet
0000b3b8 g     F .text	000001bc __smakebuf_r
000063b0 g     F .text	00000098 strlen
0001a798 g     F .text	00000020 OSTaskSwHook
0001a200 g     F .text	0000015c open
0002bf54 g     O .bss	00000b40 OSEventTbl
00004270 g     F .text	000000dc .hidden __gedf2
000104c4 g     F .text	0000003c alt_putchar
0002ca94 g     O .bss	00000510 OSTCBTbl
0001663c g     F .text	00000100 OSSemSet
0001f888 g     O .rwdata	00000004 __wctomb
0000d0e4 g     F .text	00000018 __sprint_r
00019dd8 g     F .text	00000020 alt_icache_flush_all
0001f924 g     O .rwdata	00000004 alt_priority_mask
00015e64 g     F .text	00000240 OSSemDel
00021590 g     O .bss	00000004 OSFlagFreeList
0001f8bc g     O .rwdata	00000002 OSEventNameSize
00008724 g     F .text	0000001c __vfprintf_internal
00021594 g     O .bss	00000001 OSStatRdy
0002cfa4 g     O .bss	00000054 OSTCBPrioTbl
0000efd0 g     F .text	0000005c _wctomb_r
000108b0 g     F .text	000000c4 __env_lock
0001f902 g     O .rwdata	00000002 OSTaskSwHookEn
0000040c g     F .text	00000048 kiss_fft_alloc
00004cac g     F .text	000008fc .hidden __subdf3
0000bb38 g     F .text	000000b0 __lo0bits
0001f928 g     O .rwdata	00000008 alt_alarm_list
0001f8ca g     O .rwdata	00000002 OSFlagWidth
00019c88 g     F .text	00000060 _do_ctors
0000eee0 g     F .text	000000c0 wcrtomb
0000fcd0 g     F .text	000000d8 close
00021540 g     O .bss	00000004 alt_envsem
00021598 g     O .bss	00000004 OSIdleCtrRun
00011a74 g     F .text	00000020 OSVersion
0001f914 g     O .rwdata	00000002 OSTmrCfgWheelSize
00010040 g     F .text	00000084 alt_load
000192f0 g     F .text	00000054 alt_up_audio_enable_read_interrupt
00017e38 g     F .text	00000070 OS_TaskStkClr
0001f8ee g     O .rwdata	00000002 OSTaskCreateEn
00012064 g     F .text	00000068 OS_EventWaitListInit
0000eafc g     F .text	00000080 fputwc
0001a838 g     F .text	00000020 OSTaskIdleHook
0000578c g     F .text	00000014 free
0000a820 g     F .text	00000004 __sinit_lock_acquire
0000b884 g     F .text	00000148 __multadd
00017b30 g     F .text	000001e4 OSTaskSuspend
0000b85c g     F .text	00000028 _Bfree
0001270c g     F .text	0000005c OS_TaskIdle
0001f91a g     O .rwdata	00000002 OSTmrTblSize
00019448 g     F .text	00000040 alt_up_audio_read_interrupt_pending
00015ad8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408d14 	ori	at,at,564
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00114880 	call	11488 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10b3fe04 	addi	r2,r2,-12296
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b3fe04 	addi	r2,r2,-12296
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_data_end+0xfffcf3ec>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_data_end+0xfffcf3e0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00114d40 	call	114d4 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e8:	00bfffc4 	movi	r2,-1
 1ec:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f4:	d0a74e17 	ldw	r2,-25288(gp)
 1f8:	10000726 	beq	r2,zero,218 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1fc:	d0a74e17 	ldw	r2,-25288(gp)
 200:	e0fffd17 	ldw	r3,-12(fp)
 204:	e1bffe17 	ldw	r6,-8(fp)
 208:	e17fff17 	ldw	r5,-4(fp)
 20c:	1809883a 	mov	r4,r3
 210:	103ee83a 	callr	r2
 214:	00000206 	br	220 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 218:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 21c:	0005883a 	mov	r2,zero
}
 220:	e037883a 	mov	sp,fp
 224:	dfc00117 	ldw	ra,4(sp)
 228:	df000017 	ldw	fp,0(sp)
 22c:	dec00204 	addi	sp,sp,8
 230:	f800283a 	ret

Disassembly of section .text:

00000234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     234:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
     238:	dec35014 	ori	sp,sp,3392
    movhi gp, %hi(_gp)
     23c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     240:	d69e1c14 	ori	gp,gp,30832
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     244:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     248:	10854214 	ori	r2,r2,5384

    movhi r3, %hi(__bss_end)
     24c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     250:	18f43e14 	ori	r3,r3,53496

    beq r2, r3, 1f
     254:	10c00326 	beq	r2,r3,264 <_start+0x30>

0:
    stw zero, (r2)
     258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     25c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     260:	10fffd36 	bltu	r2,r3,258 <__alt_data_end+0xfffcf518>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     264:	00100400 	call	10040 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     268:	00101dc0 	call	101dc <alt_main>

0000026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     26c:	003fff06 	br	26c <__alt_data_end+0xfffcf52c>

00000270 <kf_factor>:
 *  m0 = n
 */

static 
int kf_factor (int n, short int *facbuf)
{
     270:	defffb04 	addi	sp,sp,-20
     274:	dfc00415 	stw	ra,16(sp)
     278:	df000315 	stw	fp,12(sp)
     27c:	df000304 	addi	fp,sp,12
     280:	e13ffe15 	stw	r4,-8(fp)
     284:	e17fff15 	stw	r5,-4(fp)
    int p = 4;
     288:	00800104 	movi	r2,4
     28c:	e0bffd15 	stw	r2,-12(fp)

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     290:	00001a06 	br	2fc <kf_factor+0x8c>
            switch (p) {
     294:	e0bffd17 	ldw	r2,-12(fp)
     298:	10c000a0 	cmpeqi	r3,r2,2
     29c:	1800051e 	bne	r3,zero,2b4 <kf_factor+0x44>
     2a0:	10800120 	cmpeqi	r2,r2,4
     2a4:	10000626 	beq	r2,zero,2c0 <kf_factor+0x50>
                case 4: p = 2; break;
     2a8:	00800084 	movi	r2,2
     2ac:	e0bffd15 	stw	r2,-12(fp)
     2b0:	00000706 	br	2d0 <kf_factor+0x60>
                case 2: p = 3; break;
     2b4:	008000c4 	movi	r2,3
     2b8:	e0bffd15 	stw	r2,-12(fp)
     2bc:	00000406 	br	2d0 <kf_factor+0x60>
                default: p += 2; break;
     2c0:	e0bffd17 	ldw	r2,-12(fp)
     2c4:	10800084 	addi	r2,r2,2
     2c8:	e0bffd15 	stw	r2,-12(fp)
     2cc:	0001883a 	nop
            }
            if (p > 32000 || (int) p *(int) p > n) {
     2d0:	e0bffd17 	ldw	r2,-12(fp)
     2d4:	109f4048 	cmpgei	r2,r2,32001
     2d8:	1000061e 	bne	r2,zero,2f4 <kf_factor+0x84>
     2dc:	e17ffd17 	ldw	r5,-12(fp)
     2e0:	e13ffd17 	ldw	r4,-12(fp)
     2e4:	0002f440 	call	2f44 <__mulsi3>
     2e8:	1007883a 	mov	r3,r2
     2ec:	e0bffe17 	ldw	r2,-8(fp)
     2f0:	10c0020e 	bge	r2,r3,2fc <kf_factor+0x8c>
                p = n;          /* no more factors, skip to end */
     2f4:	e0bffe17 	ldw	r2,-8(fp)
     2f8:	e0bffd15 	stw	r2,-12(fp)
{
    int p = 4;

    /* factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
     2fc:	e0bffe17 	ldw	r2,-8(fp)
     300:	e17ffd17 	ldw	r5,-12(fp)
     304:	1009883a 	mov	r4,r2
     308:	0002e140 	call	2e14 <__modsi3>
     30c:	103fe11e 	bne	r2,zero,294 <__alt_data_end+0xfffcf554>
            }
            if (p > 32000 || (int) p *(int) p > n) {
                p = n;          /* no more factors, skip to end */
            }
        }
        n /= p;
     310:	e17ffd17 	ldw	r5,-12(fp)
     314:	e13ffe17 	ldw	r4,-8(fp)
     318:	0002d900 	call	2d90 <__divsi3>
     31c:	e0bffe15 	stw	r2,-8(fp)
        if (p>5) {
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	10800190 	cmplti	r2,r2,6
     328:	1000021e 	bne	r2,zero,334 <kf_factor+0xc4>
            return 0;
     32c:	0005883a 	mov	r2,zero
     330:	00000e06 	br	36c <kf_factor+0xfc>
        }
        *facbuf++ = (short int) p;
     334:	e0bfff17 	ldw	r2,-4(fp)
     338:	10c00084 	addi	r3,r2,2
     33c:	e0ffff15 	stw	r3,-4(fp)
     340:	e0fffd17 	ldw	r3,-12(fp)
     344:	10c0000d 	sth	r3,0(r2)
        *facbuf++ = (short int) n;
     348:	e0bfff17 	ldw	r2,-4(fp)
     34c:	10c00084 	addi	r3,r2,2
     350:	e0ffff15 	stw	r3,-4(fp)
     354:	e0fffe17 	ldw	r3,-8(fp)
     358:	10c0000d 	sth	r3,0(r2)
    } while (n > 1);
     35c:	e0bffe17 	ldw	r2,-8(fp)
     360:	10800088 	cmpgei	r2,r2,2
     364:	103fe51e 	bne	r2,zero,2fc <__alt_data_end+0xfffcf5bc>
    return 1;
     368:	00800044 	movi	r2,1
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <kiss_fft_alloc_twiddles>:
 *
 * The parameters inverse_fft, mem, and lenmem are not used.
 */

kiss_fft_cfg kiss_fft_alloc_twiddles (int nfft, int inverse_fft, void *mem, size_t *lenmem)
{
     380:	defff904 	addi	sp,sp,-28
     384:	dfc00615 	stw	ra,24(sp)
     388:	df000515 	stw	fp,20(sp)
     38c:	df000504 	addi	fp,sp,20
     390:	e13ffc15 	stw	r4,-16(fp)
     394:	e17ffd15 	stw	r5,-12(fp)
     398:	e1bffe15 	stw	r6,-8(fp)
     39c:	e1ffff15 	stw	r7,-4(fp)
    kiss_fft_cfg cfg;

    cfg = (kiss_fft_cfg) malloc (sizeof (struct kiss_fft_state));
     3a0:	01002304 	movi	r4,140
     3a4:	00057780 	call	5778 <malloc>
     3a8:	e0bffb15 	stw	r2,-20(fp)
    if (cfg) {
     3ac:	e0bffb17 	ldw	r2,-20(fp)
     3b0:	10001026 	beq	r2,zero,3f4 <kiss_fft_alloc_twiddles+0x74>
        cfg->nfft = nfft;
     3b4:	e0bffb17 	ldw	r2,-20(fp)
     3b8:	e0fffc17 	ldw	r3,-16(fp)
     3bc:	10c00015 	stw	r3,0(r2)

        cfg->belFftPtr = (struct bel_fft *) BEL_FFT_PROJECT_0_BASE;
     3c0:	e0bffb17 	ldw	r2,-20(fp)
     3c4:	00c00134 	movhi	r3,4
     3c8:	10c02215 	stw	r3,136(r2)
        if (! kf_factor (nfft, cfg->factors)) {
     3cc:	e0bffb17 	ldw	r2,-20(fp)
     3d0:	10800204 	addi	r2,r2,8
     3d4:	100b883a 	mov	r5,r2
     3d8:	e13ffc17 	ldw	r4,-16(fp)
     3dc:	00002700 	call	270 <kf_factor>
     3e0:	1000041e 	bne	r2,zero,3f4 <kiss_fft_alloc_twiddles+0x74>
            free (cfg);
     3e4:	e13ffb17 	ldw	r4,-20(fp)
     3e8:	000578c0 	call	578c <free>
            return NULL;
     3ec:	0005883a 	mov	r2,zero
     3f0:	00000106 	br	3f8 <kiss_fft_alloc_twiddles+0x78>
        }
    }
    return cfg;
     3f4:	e0bffb17 	ldw	r2,-20(fp)
}
     3f8:	e037883a 	mov	sp,fp
     3fc:	dfc00117 	ldw	ra,4(sp)
     400:	df000017 	ldw	fp,0(sp)
     404:	dec00204 	addi	sp,sp,8
     408:	f800283a 	ret

0000040c <kiss_fft_alloc>:


kiss_fft_cfg kiss_fft_alloc (int nfft, int inverse_fft, void * mem, size_t * lenmem)
{
     40c:	defffa04 	addi	sp,sp,-24
     410:	dfc00515 	stw	ra,20(sp)
     414:	df000415 	stw	fp,16(sp)
     418:	df000404 	addi	fp,sp,16
     41c:	e13ffc15 	stw	r4,-16(fp)
     420:	e17ffd15 	stw	r5,-12(fp)
     424:	e1bffe15 	stw	r6,-8(fp)
     428:	e1ffff15 	stw	r7,-4(fp)
    return kiss_fft_alloc_twiddles (nfft, inverse_fft, mem, lenmem);
     42c:	e1ffff17 	ldw	r7,-4(fp)
     430:	e1bffe17 	ldw	r6,-8(fp)
     434:	e17ffd17 	ldw	r5,-12(fp)
     438:	e13ffc17 	ldw	r4,-16(fp)
     43c:	00003800 	call	380 <kiss_fft_alloc_twiddles>
}
     440:	e037883a 	mov	sp,fp
     444:	dfc00117 	ldw	ra,4(sp)
     448:	df000017 	ldw	fp,0(sp)
     44c:	dec00204 	addi	sp,sp,8
     450:	f800283a 	ret

00000454 <kiss_fft_stride>:


void kiss_fft_stride (const kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout, int in_stride)
{
     454:	defff704 	addi	sp,sp,-36
     458:	dfc00815 	stw	ra,32(sp)
     45c:	df000715 	stw	fp,28(sp)
     460:	df000704 	addi	fp,sp,28
     464:	e13ffc15 	stw	r4,-16(fp)
     468:	e17ffd15 	stw	r5,-12(fp)
     46c:	e1bffe15 	stw	r6,-8(fp)
     470:	e1ffff15 	stw	r7,-4(fp)
    
    /*
     *  Set bit 31 to bypass the cache on the NIOSII.
     */

    volatile struct bel_fft * belFftPtr = (struct bel_fft *) (BEL_FFT_PROJECT_0_BASE + 0x80000000);
     474:	00a00134 	movhi	r2,32772
     478:	e0bffb15 	stw	r2,-20(fp)

    /*
     * Set the size, source and destination address
     */

    belFftPtr->N.N = cfg->nfft;
     47c:	e0bffc17 	ldw	r2,-16(fp)
     480:	10800017 	ldw	r2,0(r2)
     484:	1007883a 	mov	r3,r2
     488:	e0bffb17 	ldw	r2,-20(fp)
     48c:	10c0020d 	sth	r3,8(r2)
    belFftPtr->Finadr = fin;
     490:	e0bffb17 	ldw	r2,-20(fp)
     494:	e0fffd17 	ldw	r3,-12(fp)
     498:	10c00315 	stw	r3,12(r2)
    belFftPtr->Foutadr = fout;
     49c:	e0bffb17 	ldw	r2,-20(fp)
     4a0:	e0fffe17 	ldw	r3,-8(fp)
     4a4:	10c00415 	stw	r3,16(r2)

    /*
     * Copy the precalculated factors.
     */

    facbuf = cfg->factors;
     4a8:	e0bffc17 	ldw	r2,-16(fp)
     4ac:	10800204 	addi	r2,r2,8
     4b0:	e0bff915 	stw	r2,-28(fp)
    i = 0;
     4b4:	e03ffa15 	stw	zero,-24(fp)
    while (1) {
        belFftPtr->Factors[i].P = *facbuf++;
     4b8:	e0bff917 	ldw	r2,-28(fp)
     4bc:	10c00084 	addi	r3,r2,2
     4c0:	e0fff915 	stw	r3,-28(fp)
     4c4:	10c0000b 	ldhu	r3,0(r2)
     4c8:	e13ffb17 	ldw	r4,-20(fp)
     4cc:	e0bffa17 	ldw	r2,-24(fp)
     4d0:	10800144 	addi	r2,r2,5
     4d4:	1085883a 	add	r2,r2,r2
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	2085883a 	add	r2,r4,r2
     4e0:	10800084 	addi	r2,r2,2
     4e4:	10c0000d 	sth	r3,0(r2)
        belFftPtr->Factors[i].M = *facbuf;
     4e8:	e0bff917 	ldw	r2,-28(fp)
     4ec:	10c0000b 	ldhu	r3,0(r2)
     4f0:	e13ffb17 	ldw	r4,-20(fp)
     4f4:	e0bffa17 	ldw	r2,-24(fp)
     4f8:	10800144 	addi	r2,r2,5
     4fc:	1085883a 	add	r2,r2,r2
     500:	1085883a 	add	r2,r2,r2
     504:	2085883a 	add	r2,r4,r2
     508:	10c0000d 	sth	r3,0(r2)
        if (*facbuf++ == 1) {
     50c:	e0bff917 	ldw	r2,-28(fp)
     510:	10c00084 	addi	r3,r2,2
     514:	e0fff915 	stw	r3,-28(fp)
     518:	1080000b 	ldhu	r2,0(r2)
     51c:	10bfffcc 	andi	r2,r2,65535
     520:	10a0001c 	xori	r2,r2,32768
     524:	10a00004 	addi	r2,r2,-32768
     528:	10800058 	cmpnei	r2,r2,1
     52c:	10000426 	beq	r2,zero,540 <kiss_fft_stride+0xec>
            break;
        }
        i++;
     530:	e0bffa17 	ldw	r2,-24(fp)
     534:	10800044 	addi	r2,r2,1
     538:	e0bffa15 	stw	r2,-24(fp)
    }
     53c:	003fde06 	br	4b8 <__alt_data_end+0xfffcf778>
    i = 0;
    while (1) {
        belFftPtr->Factors[i].P = *facbuf++;
        belFftPtr->Factors[i].M = *facbuf;
        if (*facbuf++ == 1) {
            break;
     540:	0001883a 	nop

    /*
     * Flush the data cache for the source and destination region
     */
    
    alt_dcache_flush (fin, cfg->nfft * sizeof (kiss_fft_cpx));
     544:	e0bffc17 	ldw	r2,-16(fp)
     548:	10800017 	ldw	r2,0(r2)
     54c:	100490fa 	slli	r2,r2,3
     550:	100b883a 	mov	r5,r2
     554:	e13ffd17 	ldw	r4,-12(fp)
     558:	000fda80 	call	fda8 <alt_dcache_flush>
    alt_dcache_flush (fout, cfg->nfft * sizeof (kiss_fft_cpx));
     55c:	e0bffc17 	ldw	r2,-16(fp)
     560:	10800017 	ldw	r2,0(r2)
     564:	100490fa 	slli	r2,r2,3
     568:	100b883a 	mov	r5,r2
     56c:	e13ffe17 	ldw	r4,-8(fp)
     570:	000fda80 	call	fda8 <alt_dcache_flush>

    /*
     * Start the FFT
     */

    belFftPtr->Control.Start = 1;
     574:	e0bffb17 	ldw	r2,-20(fp)
     578:	10c00017 	ldw	r3,0(r2)
     57c:	18c00054 	ori	r3,r3,1
     580:	10c00015 	stw	r3,0(r2)
    /*
     * We poll the status register until the FFT is ready. Other implementations 
     * like generation an interrupt are possible.
     */

    while (! belFftPtr->Status.Int) {
     584:	0001883a 	nop
     588:	e0bffb17 	ldw	r2,-20(fp)
     58c:	10800117 	ldw	r2,4(r2)
     590:	1004917a 	slli	r2,r2,5
     594:	10803fcc 	andi	r2,r2,255
     598:	1080201c 	xori	r2,r2,128
     59c:	10bfe004 	addi	r2,r2,-128
     5a0:	1005d1fa 	srai	r2,r2,7
     5a4:	10803fcc 	andi	r2,r2,255
     5a8:	1080201c 	xori	r2,r2,128
     5ac:	10bfe004 	addi	r2,r2,-128
     5b0:	103ff526 	beq	r2,zero,588 <__alt_data_end+0xfffcf848>
    }

}
     5b4:	0001883a 	nop
     5b8:	e037883a 	mov	sp,fp
     5bc:	dfc00117 	ldw	ra,4(sp)
     5c0:	df000017 	ldw	fp,0(sp)
     5c4:	dec00204 	addi	sp,sp,8
     5c8:	f800283a 	ret

000005cc <kiss_fft>:


void kiss_fft (kiss_fft_cfg cfg, kiss_fft_cpx *fin, kiss_fft_cpx *fout)
{
     5cc:	defffb04 	addi	sp,sp,-20
     5d0:	dfc00415 	stw	ra,16(sp)
     5d4:	df000315 	stw	fp,12(sp)
     5d8:	df000304 	addi	fp,sp,12
     5dc:	e13ffd15 	stw	r4,-12(fp)
     5e0:	e17ffe15 	stw	r5,-8(fp)
     5e4:	e1bfff15 	stw	r6,-4(fp)
    kiss_fft_stride (cfg, fin, fout, 1);
     5e8:	01c00044 	movi	r7,1
     5ec:	e1bfff17 	ldw	r6,-4(fp)
     5f0:	e17ffe17 	ldw	r5,-8(fp)
     5f4:	e13ffd17 	ldw	r4,-12(fp)
     5f8:	00004540 	call	454 <kiss_fft_stride>
}
     5fc:	0001883a 	nop
     600:	e037883a 	mov	sp,fp
     604:	dfc00117 	ldw	ra,4(sp)
     608:	df000017 	ldw	fp,0(sp)
     60c:	dec00204 	addi	sp,sp,8
     610:	f800283a 	ret

00000614 <kiss_fft_cleanup>:

/*
 * Empty function, nothing to clean up
 */
void kiss_fft_cleanup (void)
{
     614:	deffff04 	addi	sp,sp,-4
     618:	df000015 	stw	fp,0(sp)
     61c:	d839883a 	mov	fp,sp
}
     620:	0001883a 	nop
     624:	e037883a 	mov	sp,fp
     628:	df000017 	ldw	fp,0(sp)
     62c:	dec00104 	addi	sp,sp,4
     630:	f800283a 	ret

00000634 <main>:
	// FFT factor registers
	struct FactorsReg Factors[MAXFACTORS];
};
// =========================================================================================

int main(void){
     634:	defffd04 	addi	sp,sp,-12
     638:	dfc00215 	stw	ra,8(sp)
     63c:	df000115 	stw	fp,4(sp)
     640:	df000104 	addi	fp,sp,4
	alt_printf("hey je processor gaat aan\n");
     644:	010000b4 	movhi	r4,2
     648:	212c0404 	addi	r4,r4,-20464
     64c:	00102980 	call	10298 <alt_printf>
	INT8U err;

	OSInit(); // initialize ucos-ii
     650:	00114300 	call	11430 <OSInit>

	sem_fftoutput = OSSemCreate(1);
     654:	01000044 	movi	r4,1
     658:	0015d8c0 	call	15d8c <OSSemCreate>
     65c:	d0a72615 	stw	r2,-25448(gp)
	flags = OSFlagCreate(0x00, &err);
     660:	e17fff04 	addi	r5,fp,-4
     664:	0009883a 	mov	r4,zero
     668:	001306c0 	call	1306c <OSFlagCreate>
     66c:	d0a72715 	stw	r2,-25444(gp)

	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
     670:	01c00144 	movi	r7,5
     674:	018000b4 	movhi	r6,2
     678:	319f7404 	addi	r6,r6,32208
     67c:	000b883a 	mov	r5,zero
     680:	01000034 	movhi	r4,0
     684:	2101aa04 	addi	r4,r4,1704
     688:	0016c2c0 	call	16c2c <OSTaskCreate>
	OSStart(); // start multitasking
     68c:	00117340 	call	11734 <OSStart>
	return 0; // never executed
     690:	0005883a 	mov	r2,zero
}
     694:	e037883a 	mov	sp,fp
     698:	dfc00117 	ldw	ra,4(sp)
     69c:	df000017 	ldw	fp,0(sp)
     6a0:	dec00204 	addi	sp,sp,8
     6a4:	f800283a 	ret

000006a8 <TaskStart>:

void TaskStart(void *pdata) {
     6a8:	defffd04 	addi	sp,sp,-12
     6ac:	dfc00215 	stw	ra,8(sp)
     6b0:	df000115 	stw	fp,4(sp)
     6b4:	df000104 	addi	fp,sp,4
     6b8:	e13fff15 	stw	r4,-4(fp)
//	Bel_FFT_Init(); // wordt gedaan in TaskFFT (?)

//	OSTaskCreate(TaskADCToFFT, (void *) 0, &TaskADCToFFTStack[TASK_STACKSIZE - 1], 4);
	OSTaskCreate(TaskFFT, (void *) 0, &TaskFFTStack[TASK_STACKSIZE - 1], 6);
     6bc:	01c00184 	movi	r7,6
     6c0:	018000b4 	movhi	r6,2
     6c4:	31957404 	addi	r6,r6,21968
     6c8:	000b883a 	mov	r5,zero
     6cc:	01000034 	movhi	r4,0
     6d0:	21021604 	addi	r4,r4,2136
     6d4:	0016c2c0 	call	16c2c <OSTaskCreate>
	OSTaskCreate(TaskFrequencySeparator, (void *) 0, &TaskFrequencySeparatorStack[TASK_STACKSIZE - 1], 7);
     6d8:	01c001c4 	movi	r7,7
     6dc:	018000f4 	movhi	r6,3
     6e0:	31a77404 	addi	r6,r6,-25136
     6e4:	000b883a 	mov	r5,zero
     6e8:	01000034 	movhi	r4,0
     6ec:	2102b504 	addi	r4,r4,2772
     6f0:	0016c2c0 	call	16c2c <OSTaskCreate>

    while (1) {
        OSTimeDly(100);
     6f4:	01001904 	movi	r4,100
     6f8:	0017ea80 	call	17ea8 <OSTimeDly>
    }
     6fc:	003ffd06 	br	6f4 <__alt_data_end+0xfffcf9b4>

00000700 <TaskADCToFFT>:
}

void TaskADCToFFT(void* pdata) {
     700:	defff504 	addi	sp,sp,-44
     704:	dfc00a15 	stw	ra,40(sp)
     708:	df000915 	stw	fp,36(sp)
     70c:	df000904 	addi	fp,sp,36
     710:	e13fff15 	stw	r4,-4(fp)
	alt_up_audio_dev * audio;
	audio = alt_up_audio_open_dev(AUDIO_NAME);
     714:	010000b4 	movhi	r4,2
     718:	212c0b04 	addi	r4,r4,-20436
     71c:	00192b40 	call	192b4 <alt_up_audio_open_dev>
     720:	e0bff715 	stw	r2,-36(fp)
	if (audio == NULL) {
     724:	e0bff717 	ldw	r2,-36(fp)
     728:	1000041e 	bne	r2,zero,73c <TaskADCToFFT+0x3c>
		printf("audio not opened\n");
     72c:	010000b4 	movhi	r4,2
     730:	212c0e04 	addi	r4,r4,-20424
     734:	00063480 	call	6348 <puts>
		return;
     738:	00004206 	br	844 <TaskADCToFFT+0x144>
	} else {
		printf("audio opened\n");
     73c:	010000b4 	movhi	r4,2
     740:	212c1304 	addi	r4,r4,-20404
     744:	00063480 	call	6348 <puts>
	}
	alt_up_audio_reset_audio_core(audio);
     748:	e13ff717 	ldw	r4,-36(fp)
     74c:	00194c80 	call	194c8 <alt_up_audio_reset_audio_core>
	unsigned int buf_l, buf_r;

	const int *audio_pointer, *left_buffer, *right_buffer, *fifospace_pointer;
	audio_pointer = (int *) AUDIO_BASE;
     750:	00800134 	movhi	r2,4
     754:	10882404 	addi	r2,r2,8336
     758:	e0bff815 	stw	r2,-32(fp)
	fifospace_pointer = audio_pointer + 1;
     75c:	e0bff817 	ldw	r2,-32(fp)
     760:	10800104 	addi	r2,r2,4
     764:	e0bff915 	stw	r2,-28(fp)
	left_buffer = audio_pointer + 2;
     768:	e0bff817 	ldw	r2,-32(fp)
     76c:	10800204 	addi	r2,r2,8
     770:	e0bffa15 	stw	r2,-24(fp)
	right_buffer = audio_pointer + 3;
     774:	e0bff817 	ldw	r2,-32(fp)
     778:	10800304 	addi	r2,r2,12
     77c:	e0bffb15 	stw	r2,-20(fp)
//	data = 0;
//	count = 0;
//	channel = 0;

	while (1) {
		OSTimeDlyHMSM(0,0,0,100);
     780:	01c01904 	movi	r7,100
     784:	000d883a 	mov	r6,zero
     788:	000b883a 	mov	r5,zero
     78c:	0009883a 	mov	r4,zero
     790:	0017fac0 	call	17fac <OSTimeDlyHMSM>
		int fifospace;
		fifospace = alt_up_audio_read_fifo_avail(audio, ALT_UP_AUDIO_LEFT);
     794:	000b883a 	mov	r5,zero
     798:	e13ff717 	ldw	r4,-36(fp)
     79c:	001955c0 	call	1955c <alt_up_audio_read_fifo_avail>
     7a0:	e0bffc15 	stw	r2,-16(fp)

		if (*fifospace_pointer & 0x000000FF) {
     7a4:	e0bff917 	ldw	r2,-28(fp)
     7a8:	10800017 	ldw	r2,0(r2)
     7ac:	10803fcc 	andi	r2,r2,255
     7b0:	10000926 	beq	r2,zero,7d8 <TaskADCToFFT+0xd8>
			printf("fifospace data available\n");
     7b4:	010000b4 	movhi	r4,2
     7b8:	212c1704 	addi	r4,r4,-20388
     7bc:	00063480 	call	6348 <puts>
			buf_l = *left_buffer;
     7c0:	e0bffa17 	ldw	r2,-24(fp)
     7c4:	10800017 	ldw	r2,0(r2)
     7c8:	e0bffd15 	stw	r2,-12(fp)
			buf_r = *right_buffer;
     7cc:	e0bffb17 	ldw	r2,-20(fp)
     7d0:	10800017 	ldw	r2,0(r2)
     7d4:	e0bffe15 	stw	r2,-8(fp)
		}

		if (fifospace > 0) {
     7d8:	e0bffc17 	ldw	r2,-16(fp)
     7dc:	0080140e 	bge	zero,r2,830 <TaskADCToFFT+0x130>
			printf("data available\n");
     7e0:	010000b4 	movhi	r4,2
     7e4:	212c1e04 	addi	r4,r4,-20360
     7e8:	00063480 	call	6348 <puts>
//			alt_up_audio_read_fifo(audio, &(buf_l), 1, ALT_UP_AUDIO_LEFT);
			buf_l = alt_up_audio_read_fifo_head(audio, ALT_UP_AUDIO_LEFT);
     7ec:	000b883a 	mov	r5,zero
     7f0:	e13ff717 	ldw	r4,-36(fp)
     7f4:	00199a40 	call	199a4 <alt_up_audio_read_fifo_head>
     7f8:	e0bffd15 	stw	r2,-12(fp)
			printf("%i - ", buf_l);
     7fc:	e17ffd17 	ldw	r5,-12(fp)
     800:	010000b4 	movhi	r4,2
     804:	212c2204 	addi	r4,r4,-20344
     808:	000624c0 	call	624c <printf>
//			alt_up_audio_read_fifo(audio, &(buf_r), 1, ALT_UP_AUDIO_RIGHT);
			buf_r = alt_up_audio_read_fifo_head(audio, ALT_UP_AUDIO_RIGHT);
     80c:	01400044 	movi	r5,1
     810:	e13ff717 	ldw	r4,-36(fp)
     814:	00199a40 	call	199a4 <alt_up_audio_read_fifo_head>
     818:	e0bffe15 	stw	r2,-8(fp)
			printf("%i", buf_r);
     81c:	e17ffe17 	ldw	r5,-8(fp)
     820:	010000b4 	movhi	r4,2
     824:	212c2404 	addi	r4,r4,-20336
     828:	000624c0 	call	624c <printf>
     82c:	003fd406 	br	780 <__alt_data_end+0xfffcfa40>
		} else {
			printf("data unavailable: %i\n", fifospace);
     830:	e17ffc17 	ldw	r5,-16(fp)
     834:	010000b4 	movhi	r4,2
     838:	212c2504 	addi	r4,r4,-20332
     83c:	000624c0 	call	624c <printf>
//		if (count==12){
//			count = 0;
//			channel = !channel;
//			printf("\n");
//		}
	}
     840:	003fcf06 	br	780 <__alt_data_end+0xfffcfa40>
}
     844:	e037883a 	mov	sp,fp
     848:	dfc00117 	ldw	ra,4(sp)
     84c:	df000017 	ldw	fp,0(sp)
     850:	dec00204 	addi	sp,sp,8
     854:	f800283a 	ret

00000858 <TaskFFT>:

void TaskFFT(void* pdata) {
     858:	def5f904 	addi	sp,sp,-10268
     85c:	dfca0615 	stw	ra,10264(sp)
     860:	df0a0515 	stw	fp,10260(sp)
     864:	df0a0504 	addi	fp,sp,10260
     868:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	kiss_fft_cfg cfg;
	int8_t huidige_array = 0;
     86c:	e035fb05 	stb	zero,-10260(fp)
#else
	// test/simulatie input, structs van 32 bits real & 32 bits imaginary waarden
	// 64 regels * 4 per regel = 256 input lengte

	/* 24 - 32 - 0 - 0 - 0 - 0 - 0 - 32 */
	kiss_fft_cpx fin[FFT_LEN] = {
     870:	008000b4 	movhi	r2,2
     874:	10ac3a04 	addi	r2,r2,-20248
     878:	e0f5ff04 	addi	r3,fp,-10244
     87c:	1009883a 	mov	r4,r2
     880:	00820004 	movi	r2,2048
     884:	100d883a 	mov	r6,r2
     888:	200b883a 	mov	r5,r4
     88c:	1809883a 	mov	r4,r3
     890:	0005fac0 	call	5fac <memcpy>
	{0xFFFFDD07, 0x00000000}, {0x000006D1, 0x00000000}, {0x00001A70, 0x00000000}, {0x00000E73, 0x00000000},
	{0xFFFFEC2C, 0x00000000}, {0xFFFFCA32, 0x00000000}, {0xFFFFBF18, 0x00000000}, {0xFFFFD42F, 0x00000000}};
	
	// deze array wordt niet gebruikt door vreemde output, mag eventueel weg
	/* 32 - 32 - 32 - 32 - 32 - 32 - 32 - 32 */
	kiss_fft_cpx fin1[FFT_LEN] = {
     894:	008000b4 	movhi	r2,2
     898:	10ae3a04 	addi	r2,r2,-18200
     89c:	e0f7ff04 	addi	r3,fp,-8196
     8a0:	1009883a 	mov	r4,r2
     8a4:	00820004 	movi	r2,2048
     8a8:	100d883a 	mov	r6,r2
     8ac:	200b883a 	mov	r5,r4
     8b0:	1809883a 	mov	r4,r3
     8b4:	0005fac0 	call	5fac <memcpy>
	{0x0FFFC791, 0x00000000}, {0x0FFFD56E, 0x00000000}, {0x0FFFED58, 0x00000000}, {0x000003EC, 0x00000000}, 
	{0x00000EC6, 0x00000000}, {0x00000863, 0x00000000}, {0x0FFFF242, 0x00000000}, {0x0FFFD460, 0x00000000}, 
	{0x0FFFBA56, 0x00000000}, {0x0FFFAF0C, 0x00000000}, {0x0FFFB8AF, 0x00000000}, {0x0FFFD64B, 0x00000000}};
	
	/* 32 - 0 - 0 - 0 - 0 - 0 - 0 - 32 */
	kiss_fft_cpx fin2[FFT_LEN] = {
     8b8:	008000b4 	movhi	r2,2
     8bc:	10b03a04 	addi	r2,r2,-16152
     8c0:	e0f9ff04 	addi	r3,fp,-6148
     8c4:	1009883a 	mov	r4,r2
     8c8:	00820004 	movi	r2,2048
     8cc:	100d883a 	mov	r6,r2
     8d0:	200b883a 	mov	r5,r4
     8d4:	1809883a 	mov	r4,r3
     8d8:	0005fac0 	call	5fac <memcpy>
	{0xFFFFA39E, 0x00000000}, {0xFFFFA402, 0x00000000}, {0xFFFFB649, 0x00000000}, {0xFFFFD716, 0x00000000}};

	/* Frequency 1: Frequency: 40 - Amplitude: 8908 - Phase: 450
	 * Frequency 2: Frequency: 5003 - Amplitude: 1253 - Phase: 6
	 * 0 - 32 - 0 - 4 - 4 - 0 - 32 - 0 */
	kiss_fft_cpx fin3[FFT_LEN] = {
     8dc:	008000b4 	movhi	r2,2
     8e0:	10b23a04 	addi	r2,r2,-14104
     8e4:	e0fbff04 	addi	r3,fp,-4100
     8e8:	1009883a 	mov	r4,r2
     8ec:	00820004 	movi	r2,2048
     8f0:	100d883a 	mov	r6,r2
     8f4:	200b883a 	mov	r5,r4
     8f8:	1809883a 	mov	r4,r3
     8fc:	0005fac0 	call	5fac <memcpy>
	{0xFFFFFBB6, 0x00001827}, {0x00000386, 0xFFFFF995}, {0xFFFFFD80, 0xFFFFDF97}, {0x0000014C, 0xFFFFE335}};

	/* Frequency 1: Frequency: 90 - Amplitude: 3000 - Phase: 40
	 * Frequency 2: Frequency: 110 - Amplitude: 7000 - Phase: 50
	 * 0 - 0 - 13 - 31 - 32 - 13 - 0 - 0 */
	kiss_fft_cpx fin4[FFT_LEN] = {
     900:	008000b4 	movhi	r2,2
     904:	10b43a04 	addi	r2,r2,-12056
     908:	e0fdff04 	addi	r3,fp,-2052
     90c:	1009883a 	mov	r4,r2
     910:	00820004 	movi	r2,2048
     914:	100d883a 	mov	r6,r2
     918:	200b883a 	mov	r5,r4
     91c:	1809883a 	mov	r4,r3
     920:	0005fac0 	call	5fac <memcpy>
	{0x00000191, 0xFFFFFEF2}, {0xFFFFFCF5, 0xFFFFFD25}, {0x00000297, 0x00000518}, {0xFFFFFADA, 0xFFFFF6B3},
	{0x00000C40, 0x0000105B}, {0xFFFFEBEE, 0xFFFFE925}, {0x0000162D, 0x00001766}, {0xFFFFF147, 0xFFFFF0FF}};
#endif

	// Initialize the destination memory area to see that the FFT has actually calculated something.
	for (int i=0; i<FFT_LEN; i++) {
     924:	e035fc15 	stw	zero,-10256(fp)
     928:	00001406 	br	97c <TaskFFT+0x124>
	    fout[i].i = 0xDEADDEAD;
     92c:	008000b4 	movhi	r2,2
     930:	10957504 	addi	r2,r2,21972
     934:	e0f5fc17 	ldw	r3,-10256(fp)
     938:	180690fa 	slli	r3,r3,3
     93c:	10c5883a 	add	r2,r2,r3
     940:	10c00104 	addi	r3,r2,4
     944:	00b7abb4 	movhi	r2,57006
     948:	10b7ab44 	addi	r2,r2,-8531
     94c:	18800015 	stw	r2,0(r3)
	    fout[i].r = 0xDEADDEAD;
     950:	008000b4 	movhi	r2,2
     954:	10957504 	addi	r2,r2,21972
     958:	e0f5fc17 	ldw	r3,-10256(fp)
     95c:	180690fa 	slli	r3,r3,3
     960:	10c7883a 	add	r3,r2,r3
     964:	00b7abb4 	movhi	r2,57006
     968:	10b7ab44 	addi	r2,r2,-8531
     96c:	18800015 	stw	r2,0(r3)
	{0x00000191, 0xFFFFFEF2}, {0xFFFFFCF5, 0xFFFFFD25}, {0x00000297, 0x00000518}, {0xFFFFFADA, 0xFFFFF6B3},
	{0x00000C40, 0x0000105B}, {0xFFFFEBEE, 0xFFFFE925}, {0x0000162D, 0x00001766}, {0xFFFFF147, 0xFFFFF0FF}};
#endif

	// Initialize the destination memory area to see that the FFT has actually calculated something.
	for (int i=0; i<FFT_LEN; i++) {
     970:	e0b5fc17 	ldw	r2,-10256(fp)
     974:	10800044 	addi	r2,r2,1
     978:	e0b5fc15 	stw	r2,-10256(fp)
     97c:	e0b5fc17 	ldw	r2,-10256(fp)
     980:	10804010 	cmplti	r2,r2,256
     984:	103fe91e 	bne	r2,zero,92c <__alt_data_end+0xfffcfbec>
	    fout[i].i = 0xDEADDEAD;
	    fout[i].r = 0xDEADDEAD;
	}

	cfg = kiss_fft_alloc (FFT_LEN, 0, NULL, 0);
     988:	000f883a 	mov	r7,zero
     98c:	000d883a 	mov	r6,zero
     990:	000b883a 	mov	r5,zero
     994:	01004004 	movi	r4,256
     998:	000040c0 	call	40c <kiss_fft_alloc>
     99c:	e0b5fd15 	stw	r2,-10252(fp)
	if (! cfg) {
     9a0:	e0b5fd17 	ldw	r2,-10252(fp)
     9a4:	1000041e 	bne	r2,zero,9b8 <TaskFFT+0x160>
		printf ("Error: Cannot allocate memory for FFT control structure.\n");
     9a8:	010000b4 	movhi	r4,2
     9ac:	212c2b04 	addi	r4,r4,-20308
     9b0:	00063480 	call	6348 <puts>
	    return;
     9b4:	00004206 	br	ac0 <TaskFFT+0x268>
	}

	while (1) {
		OSSemPend(sem_fftoutput, 0, &err);
     9b8:	d0a72617 	ldw	r2,-25448(gp)
     9bc:	e0f5fe04 	addi	r3,fp,-10248
     9c0:	180d883a 	mov	r6,r3
     9c4:	000b883a 	mov	r5,zero
     9c8:	1009883a 	mov	r4,r2
     9cc:	00160a40 	call	160a4 <OSSemPend>
#if defined SWITCH_INPUT_ARRAYS && defined TEST_FFT 	// simulatie arrays uitlezen
		if (0 == huidige_array) {
     9d0:	e0b5fb07 	ldb	r2,-10260(fp)
     9d4:	1000071e 	bne	r2,zero,9f4 <TaskFFT+0x19c>
			kiss_fft (cfg, fin, fout);
     9d8:	e0b5ff04 	addi	r2,fp,-10244
     9dc:	018000b4 	movhi	r6,2
     9e0:	31957504 	addi	r6,r6,21972
     9e4:	100b883a 	mov	r5,r2
     9e8:	e135fd17 	ldw	r4,-10252(fp)
     9ec:	00005cc0 	call	5cc <kiss_fft>
     9f0:	00001f06 	br	a70 <TaskFFT+0x218>
		}
//		else if (1 == huidige_array) {
//			kiss_fft (cfg, fin1, fout);
//		}
		else if (1 == huidige_array) {
     9f4:	e0b5fb07 	ldb	r2,-10260(fp)
     9f8:	10800058 	cmpnei	r2,r2,1
     9fc:	1000071e 	bne	r2,zero,a1c <TaskFFT+0x1c4>
			kiss_fft (cfg, fin2, fout);
     a00:	e0b9ff04 	addi	r2,fp,-6148
     a04:	018000b4 	movhi	r6,2
     a08:	31957504 	addi	r6,r6,21972
     a0c:	100b883a 	mov	r5,r2
     a10:	e135fd17 	ldw	r4,-10252(fp)
     a14:	00005cc0 	call	5cc <kiss_fft>
     a18:	00001506 	br	a70 <TaskFFT+0x218>
		}
		else if (2 == huidige_array) {
     a1c:	e0b5fb07 	ldb	r2,-10260(fp)
     a20:	10800098 	cmpnei	r2,r2,2
     a24:	1000071e 	bne	r2,zero,a44 <TaskFFT+0x1ec>
			kiss_fft (cfg, fin3, fout);
     a28:	e0bbff04 	addi	r2,fp,-4100
     a2c:	018000b4 	movhi	r6,2
     a30:	31957504 	addi	r6,r6,21972
     a34:	100b883a 	mov	r5,r2
     a38:	e135fd17 	ldw	r4,-10252(fp)
     a3c:	00005cc0 	call	5cc <kiss_fft>
     a40:	00000b06 	br	a70 <TaskFFT+0x218>
		}
		else if (3 == huidige_array) {
     a44:	e0b5fb07 	ldb	r2,-10260(fp)
     a48:	108000d8 	cmpnei	r2,r2,3
     a4c:	1000081e 	bne	r2,zero,a70 <TaskFFT+0x218>
			kiss_fft (cfg, fin4, fout);
     a50:	e0bdff04 	addi	r2,fp,-2052
     a54:	018000b4 	movhi	r6,2
     a58:	31957504 	addi	r6,r6,21972
     a5c:	100b883a 	mov	r5,r2
     a60:	e135fd17 	ldw	r4,-10252(fp)
     a64:	00005cc0 	call	5cc <kiss_fft>
			huidige_array = -1;
     a68:	00bfffc4 	movi	r2,-1
     a6c:	e0b5fb05 	stb	r2,-10260(fp)
		}
		huidige_array++;
     a70:	e0b5fb03 	ldbu	r2,-10260(fp)
     a74:	10800044 	addi	r2,r2,1
     a78:	e0b5fb05 	stb	r2,-10260(fp)
#else													// ADC uitlezen
		kiss_fft (cfg, fin, fout); // startup
#endif
		// klaar met output genereren
		OSSemPost(sem_fftoutput);
     a7c:	d0a72617 	ldw	r2,-25448(gp)
     a80:	1009883a 	mov	r4,r2
     a84:	001641c0 	call	1641c <OSSemPost>

		// geef aan dat output klaar is
		err = OSFlagPost(flags, FLAG_FFTOUTPUT, OS_FLAG_SET, &err);
     a88:	d0a72717 	ldw	r2,-25444(gp)
     a8c:	e0f5fe04 	addi	r3,fp,-10248
     a90:	180f883a 	mov	r7,r3
     a94:	01800044 	movi	r6,1
     a98:	01400044 	movi	r5,1
     a9c:	1009883a 	mov	r4,r2
     aa0:	0013c480 	call	13c48 <OSFlagPost>
     aa4:	e0b5fe05 	stb	r2,-10248(fp)

		OSTimeDlyHMSM(0,0,0,FFT_DELAY); // weghalen voor optimale snelheid?
     aa8:	01c0f9c4 	movi	r7,999
     aac:	000d883a 	mov	r6,zero
     ab0:	000b883a 	mov	r5,zero
     ab4:	0009883a 	mov	r4,zero
     ab8:	0017fac0 	call	17fac <OSTimeDlyHMSM>
	}
     abc:	003fbe06 	br	9b8 <__alt_data_end+0xfffcfc78>
}
     ac0:	e037883a 	mov	sp,fp
     ac4:	dfc00117 	ldw	ra,4(sp)
     ac8:	df000017 	ldw	fp,0(sp)
     acc:	dec00204 	addi	sp,sp,8
     ad0:	f800283a 	ret

00000ad4 <TaskFrequencySeparator>:

void TaskFrequencySeparator(void* pdata) {
     ad4:	deffe604 	addi	sp,sp,-104
     ad8:	dfc01915 	stw	ra,100(sp)
     adc:	df001815 	stw	fp,96(sp)
     ae0:	dc401715 	stw	r17,92(sp)
     ae4:	dc001615 	stw	r16,88(sp)
     ae8:	df001804 	addi	fp,sp,96
     aec:	e13ffd15 	stw	r4,-12(fp)
	INT8U err;
	OS_FLAGS value;
	int freqOutput[AANTAL_OUTPUT_FREQSEP], scale_max = 1;
     af0:	00800044 	movi	r2,1
     af4:	e0bfe915 	stw	r2,-92(fp)
	const int aantal_x = FFT_LEN / AANTAL_OUTPUT_FREQSEP; // aantal waarden van "fout" per bin in "freqOutput"
     af8:	00800804 	movi	r2,32
     afc:	e0bff115 	stw	r2,-60(fp)

	while (1) {
		// wacht op FFT output
		value = OSFlagPend(flags, FLAG_FFTOUTPUT, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
     b00:	d0e72717 	ldw	r3,-25444(gp)
     b04:	e0bff404 	addi	r2,fp,-48
     b08:	d8800015 	stw	r2,0(sp)
     b0c:	000f883a 	mov	r7,zero
     b10:	01802084 	movi	r6,130
     b14:	01400044 	movi	r5,1
     b18:	1809883a 	mov	r4,r3
     b1c:	00136300 	call	13630 <OSFlagPend>
     b20:	e0bff20d 	sth	r2,-56(fp)

		OSSemPend(sem_fftoutput, 0, &err);
     b24:	d0a72617 	ldw	r2,-25448(gp)
     b28:	e0fff404 	addi	r3,fp,-48
     b2c:	180d883a 	mov	r6,r3
     b30:	000b883a 	mov	r5,zero
     b34:	1009883a 	mov	r4,r2
     b38:	00160a40 	call	160a4 <OSSemPend>
		// variabele voor het automatisch op schaal brengen van alle
		// signalen in verhouding tot het de grootste waarde van die signalen
		scale_max = 0;
#endif

		for (int i=0; i<AANTAL_OUTPUT_FREQSEP; i++) { // per bin output frequency separator
     b3c:	e03feb15 	stw	zero,-84(fp)
     b40:	00006706 	br	ce0 <TaskFrequencySeparator+0x20c>
			// bepaal de hoogste waarden
			offset = aantal_x*i;
     b44:	e0bff117 	ldw	r2,-60(fp)
     b48:	1007883a 	mov	r3,r2
     b4c:	e0bfeb17 	ldw	r2,-84(fp)
     b50:	100b883a 	mov	r5,r2
     b54:	1809883a 	mov	r4,r3
     b58:	0002f440 	call	2f44 <__mulsi3>
     b5c:	e0bff285 	stb	r2,-54(fp)
			hoogst = 0;
     b60:	e03fea15 	stw	zero,-88(fp)

			for (int j=offset; j<(offset+aantal_x); j++) { // per deel vd fft bins voor elke bin vd frequency separator
     b64:	e0bff283 	ldbu	r2,-54(fp)
     b68:	e0bfec15 	stw	r2,-80(fp)
     b6c:	00004706 	br	c8c <TaskFrequencySeparator+0x1b8>
				// magnitude berekenen met sqrt(real^2 + imaginary^2)
				// phase berekenen met atan2(imaginary, real)

				temp = pow(((int) fout[j].r), 2) + pow(((int) fout[j].i), 2);
     b70:	008000b4 	movhi	r2,2
     b74:	10957504 	addi	r2,r2,21972
     b78:	e0ffec17 	ldw	r3,-80(fp)
     b7c:	180690fa 	slli	r3,r3,3
     b80:	10c5883a 	add	r2,r2,r3
     b84:	10800017 	ldw	r2,0(r2)
     b88:	1009883a 	mov	r4,r2
     b8c:	00056280 	call	5628 <__floatsidf>
     b90:	1011883a 	mov	r8,r2
     b94:	1813883a 	mov	r9,r3
     b98:	000d883a 	mov	r6,zero
     b9c:	01d00034 	movhi	r7,16384
     ba0:	4009883a 	mov	r4,r8
     ba4:	480b883a 	mov	r5,r9
     ba8:	00010140 	call	1014 <pow>
     bac:	1021883a 	mov	r16,r2
     bb0:	1823883a 	mov	r17,r3
     bb4:	008000b4 	movhi	r2,2
     bb8:	10957504 	addi	r2,r2,21972
     bbc:	e0ffec17 	ldw	r3,-80(fp)
     bc0:	180690fa 	slli	r3,r3,3
     bc4:	10c5883a 	add	r2,r2,r3
     bc8:	10800104 	addi	r2,r2,4
     bcc:	10800017 	ldw	r2,0(r2)
     bd0:	1009883a 	mov	r4,r2
     bd4:	00056280 	call	5628 <__floatsidf>
     bd8:	1011883a 	mov	r8,r2
     bdc:	1813883a 	mov	r9,r3
     be0:	000d883a 	mov	r6,zero
     be4:	01d00034 	movhi	r7,16384
     be8:	4009883a 	mov	r4,r8
     bec:	480b883a 	mov	r5,r9
     bf0:	00010140 	call	1014 <pow>
     bf4:	1009883a 	mov	r4,r2
     bf8:	180b883a 	mov	r5,r3
     bfc:	200d883a 	mov	r6,r4
     c00:	280f883a 	mov	r7,r5
     c04:	8009883a 	mov	r4,r16
     c08:	880b883a 	mov	r5,r17
     c0c:	0002f6c0 	call	2f6c <__adddf3>
     c10:	1009883a 	mov	r4,r2
     c14:	180b883a 	mov	r5,r3
     c18:	2005883a 	mov	r2,r4
     c1c:	2807883a 	mov	r3,r5
     c20:	1009883a 	mov	r4,r2
     c24:	180b883a 	mov	r5,r3
     c28:	00055a80 	call	55a8 <__fixdfsi>
     c2c:	e0bff315 	stw	r2,-52(fp)
				if (0 < temp) { // geen wortel trekken met =< 0
     c30:	e0bff317 	ldw	r2,-52(fp)
     c34:	0080120e 	bge	zero,r2,c80 <TaskFrequencySeparator+0x1ac>
					temp = sqrt(temp);
     c38:	e13ff317 	ldw	r4,-52(fp)
     c3c:	00056280 	call	5628 <__floatsidf>
     c40:	100b883a 	mov	r5,r2
     c44:	180d883a 	mov	r6,r3
     c48:	2809883a 	mov	r4,r5
     c4c:	300b883a 	mov	r5,r6
     c50:	00014d80 	call	14d8 <sqrt>
     c54:	100b883a 	mov	r5,r2
     c58:	180d883a 	mov	r6,r3
     c5c:	2809883a 	mov	r4,r5
     c60:	300b883a 	mov	r5,r6
     c64:	00055a80 	call	55a8 <__fixdfsi>
     c68:	e0bff315 	stw	r2,-52(fp)

					// kijk of de magnitude van de huidige bin hoger is
					if (temp > hoogst) {
     c6c:	e0bff317 	ldw	r2,-52(fp)
     c70:	e0ffea17 	ldw	r3,-88(fp)
     c74:	1880020e 	bge	r3,r2,c80 <TaskFrequencySeparator+0x1ac>
						hoogst = temp;
     c78:	e0bff317 	ldw	r2,-52(fp)
     c7c:	e0bfea15 	stw	r2,-88(fp)
		for (int i=0; i<AANTAL_OUTPUT_FREQSEP; i++) { // per bin output frequency separator
			// bepaal de hoogste waarden
			offset = aantal_x*i;
			hoogst = 0;

			for (int j=offset; j<(offset+aantal_x); j++) { // per deel vd fft bins voor elke bin vd frequency separator
     c80:	e0bfec17 	ldw	r2,-80(fp)
     c84:	10800044 	addi	r2,r2,1
     c88:	e0bfec15 	stw	r2,-80(fp)
     c8c:	e0fff283 	ldbu	r3,-54(fp)
     c90:	e0bff117 	ldw	r2,-60(fp)
     c94:	1885883a 	add	r2,r3,r2
     c98:	e0ffec17 	ldw	r3,-80(fp)
     c9c:	18bfb416 	blt	r3,r2,b70 <__alt_data_end+0xfffcfe30>
					}
				}
				// TODO aantal bins van fft (output) aanpassen zodat er minder berekeningen nodig zijn?
			}
			// sla de hoogste magnitude van deze groep bins op
			freqOutput[i] = hoogst;
     ca0:	e0bfeb17 	ldw	r2,-84(fp)
     ca4:	1085883a 	add	r2,r2,r2
     ca8:	1085883a 	add	r2,r2,r2
     cac:	e0ffe904 	addi	r3,fp,-92
     cb0:	1885883a 	add	r2,r3,r2
     cb4:	10800c04 	addi	r2,r2,48
     cb8:	e0ffea17 	ldw	r3,-88(fp)
     cbc:	10c00015 	stw	r3,0(r2)
			if (scale_max < hoogst) {
     cc0:	e0ffe917 	ldw	r3,-92(fp)
     cc4:	e0bfea17 	ldw	r2,-88(fp)
     cc8:	1880020e 	bge	r3,r2,cd4 <TaskFrequencySeparator+0x200>
				scale_max = hoogst;
     ccc:	e0bfea17 	ldw	r2,-88(fp)
     cd0:	e0bfe915 	stw	r2,-92(fp)
		// variabele voor het automatisch op schaal brengen van alle
		// signalen in verhouding tot het de grootste waarde van die signalen
		scale_max = 0;
#endif

		for (int i=0; i<AANTAL_OUTPUT_FREQSEP; i++) { // per bin output frequency separator
     cd4:	e0bfeb17 	ldw	r2,-84(fp)
     cd8:	10800044 	addi	r2,r2,1
     cdc:	e0bfeb15 	stw	r2,-84(fp)
     ce0:	e0bfeb17 	ldw	r2,-84(fp)
     ce4:	10800210 	cmplti	r2,r2,8
     ce8:	103f961e 	bne	r2,zero,b44 <__alt_data_end+0xfffcfe04>
			freqOutput[i] = hoogst;
			if (scale_max < hoogst) {
				scale_max = hoogst;
			}
		}
		OSSemPost(sem_fftoutput);
     cec:	d0a72617 	ldw	r2,-25448(gp)
     cf0:	1009883a 	mov	r4,r2
     cf4:	001641c0 	call	1641c <OSSemPost>
		 * 6 bits per signaal * 8 signalen = 48 bits.
		 * Die 48 bits worden verdeeld over 2 pio blokken, 24 bits per blok.
		 */

		// output op schaal brengen
		for (int i=0; i<AANTAL_OUTPUT_FREQSEP; i++) {
     cf8:	e03fed15 	stw	zero,-76(fp)
     cfc:	00002506 	br	d94 <TaskFrequencySeparator+0x2c0>
#ifdef PRINT_FREQ_RAW
			printf("Signaal %i: %i\n", i, freqOutput[i]); 	// print ruwe output
#endif
			freqOutput[i] = map((long) freqOutput[i], (long) 0, (long) scale_max, (long) 0, (long) FREQSEP_OUTPUT_SCALE);
     d00:	e0bfed17 	ldw	r2,-76(fp)
     d04:	1085883a 	add	r2,r2,r2
     d08:	1085883a 	add	r2,r2,r2
     d0c:	e13fe904 	addi	r4,fp,-92
     d10:	2085883a 	add	r2,r4,r2
     d14:	10800c04 	addi	r2,r2,48
     d18:	10c00017 	ldw	r3,0(r2)
     d1c:	00800804 	movi	r2,32
     d20:	d8800015 	stw	r2,0(sp)
     d24:	000f883a 	mov	r7,zero
     d28:	e1bfe917 	ldw	r6,-92(fp)
     d2c:	000b883a 	mov	r5,zero
     d30:	1809883a 	mov	r4,r3
     d34:	0000e6c0 	call	e6c <map>
     d38:	1007883a 	mov	r3,r2
     d3c:	e0bfed17 	ldw	r2,-76(fp)
     d40:	1085883a 	add	r2,r2,r2
     d44:	1085883a 	add	r2,r2,r2
     d48:	e13fe904 	addi	r4,fp,-92
     d4c:	2085883a 	add	r2,r4,r2
     d50:	10800c04 	addi	r2,r2,48
     d54:	10c00015 	stw	r3,0(r2)
#ifdef PRINT_FREQ_SCALED
			printf("S %i: %i\n", i, freqOutput[i]); 		// print de output op schaal
     d58:	e0bfed17 	ldw	r2,-76(fp)
     d5c:	1085883a 	add	r2,r2,r2
     d60:	1085883a 	add	r2,r2,r2
     d64:	e0ffe904 	addi	r3,fp,-92
     d68:	1885883a 	add	r2,r3,r2
     d6c:	10800c04 	addi	r2,r2,48
     d70:	10800017 	ldw	r2,0(r2)
     d74:	100d883a 	mov	r6,r2
     d78:	e17fed17 	ldw	r5,-76(fp)
     d7c:	010000b4 	movhi	r4,2
     d80:	21363a04 	addi	r4,r4,-10008
     d84:	000624c0 	call	624c <printf>
		 * 6 bits per signaal * 8 signalen = 48 bits.
		 * Die 48 bits worden verdeeld over 2 pio blokken, 24 bits per blok.
		 */

		// output op schaal brengen
		for (int i=0; i<AANTAL_OUTPUT_FREQSEP; i++) {
     d88:	e0bfed17 	ldw	r2,-76(fp)
     d8c:	10800044 	addi	r2,r2,1
     d90:	e0bfed15 	stw	r2,-76(fp)
     d94:	e0bfed17 	ldw	r2,-76(fp)
     d98:	10800210 	cmplti	r2,r2,8
     d9c:	103fd81e 	bne	r2,zero,d00 <__alt_data_end+0xfffcffc0>
			printf("S %i: %i\n", i, freqOutput[i]); 		// print de output op schaal
#endif
		}

		// signalen samenvoegen en output naar vhdl component frame generator sturen
		int deel1 = 0;
     da0:	e03fee15 	stw	zero,-72(fp)
		int deel2 = 0;
     da4:	e03fef15 	stw	zero,-68(fp)
		for (int i=0; i<4; i++) {
     da8:	e03ff015 	stw	zero,-64(fp)
     dac:	00002306 	br	e3c <TaskFrequencySeparator+0x368>
			// 4 signalen worden achter elkaar gezet als 1 variabele per pio (2 pio's = 2 variabelen)
			deel1 |= (freqOutput[(3-i)] << (6*i));
     db0:	00c000c4 	movi	r3,3
     db4:	e0bff017 	ldw	r2,-64(fp)
     db8:	1885c83a 	sub	r2,r3,r2
     dbc:	1085883a 	add	r2,r2,r2
     dc0:	1085883a 	add	r2,r2,r2
     dc4:	e13fe904 	addi	r4,fp,-92
     dc8:	2085883a 	add	r2,r4,r2
     dcc:	10800c04 	addi	r2,r2,48
     dd0:	14000017 	ldw	r16,0(r2)
     dd4:	01400184 	movi	r5,6
     dd8:	e13ff017 	ldw	r4,-64(fp)
     ddc:	0002f440 	call	2f44 <__mulsi3>
     de0:	8084983a 	sll	r2,r16,r2
     de4:	e0ffee17 	ldw	r3,-72(fp)
     de8:	1884b03a 	or	r2,r3,r2
     dec:	e0bfee15 	stw	r2,-72(fp)
			deel2 |= (freqOutput[(3-i)+4] << (6*i));
     df0:	00c001c4 	movi	r3,7
     df4:	e0bff017 	ldw	r2,-64(fp)
     df8:	1885c83a 	sub	r2,r3,r2
     dfc:	1085883a 	add	r2,r2,r2
     e00:	1085883a 	add	r2,r2,r2
     e04:	e0ffe904 	addi	r3,fp,-92
     e08:	1885883a 	add	r2,r3,r2
     e0c:	10800c04 	addi	r2,r2,48
     e10:	14000017 	ldw	r16,0(r2)
     e14:	01400184 	movi	r5,6
     e18:	e13ff017 	ldw	r4,-64(fp)
     e1c:	0002f440 	call	2f44 <__mulsi3>
     e20:	8084983a 	sll	r2,r16,r2
     e24:	e0ffef17 	ldw	r3,-68(fp)
     e28:	1884b03a 	or	r2,r3,r2
     e2c:	e0bfef15 	stw	r2,-68(fp)
		}

		// signalen samenvoegen en output naar vhdl component frame generator sturen
		int deel1 = 0;
		int deel2 = 0;
		for (int i=0; i<4; i++) {
     e30:	e0bff017 	ldw	r2,-64(fp)
     e34:	10800044 	addi	r2,r2,1
     e38:	e0bff015 	stw	r2,-64(fp)
     e3c:	e0bff017 	ldw	r2,-64(fp)
     e40:	10800110 	cmplti	r2,r2,4
     e44:	103fda1e 	bne	r2,zero,db0 <__alt_data_end+0xfffd0070>
			// 4 signalen worden achter elkaar gezet als 1 variabele per pio (2 pio's = 2 variabelen)
			deel1 |= (freqOutput[(3-i)] << (6*i));
			deel2 |= (freqOutput[(3-i)+4] << (6*i));
		}
		*FREQSEP_1 = deel1;
     e48:	00800134 	movhi	r2,4
     e4c:	10881c04 	addi	r2,r2,8304
     e50:	e0ffee17 	ldw	r3,-72(fp)
     e54:	10c00015 	stw	r3,0(r2)
		*FREQSEP_2 = deel2;
     e58:	00800134 	movhi	r2,4
     e5c:	10881804 	addi	r2,r2,8288
     e60:	e0ffef17 	ldw	r3,-68(fp)
     e64:	10c00015 	stw	r3,0(r2)
	}
     e68:	003f2506 	br	b00 <__alt_data_end+0xfffcfdc0>

00000e6c <map>:
}

long map(long x, long in_min, long in_max, long out_min, long out_max) {
     e6c:	defffa04 	addi	sp,sp,-24
     e70:	dfc00515 	stw	ra,20(sp)
     e74:	df000415 	stw	fp,16(sp)
     e78:	df000404 	addi	fp,sp,16
     e7c:	e13ffc15 	stw	r4,-16(fp)
     e80:	e17ffd15 	stw	r5,-12(fp)
     e84:	e1bffe15 	stw	r6,-8(fp)
     e88:	e1ffff15 	stw	r7,-4(fp)
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     e8c:	e0fffc17 	ldw	r3,-16(fp)
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	1889c83a 	sub	r4,r3,r2
     e98:	e0c00217 	ldw	r3,8(fp)
     e9c:	e0bfff17 	ldw	r2,-4(fp)
     ea0:	1885c83a 	sub	r2,r3,r2
     ea4:	100b883a 	mov	r5,r2
     ea8:	0002f440 	call	2f44 <__mulsi3>
     eac:	1009883a 	mov	r4,r2
     eb0:	e0fffe17 	ldw	r3,-8(fp)
     eb4:	e0bffd17 	ldw	r2,-12(fp)
     eb8:	1885c83a 	sub	r2,r3,r2
     ebc:	100b883a 	mov	r5,r2
     ec0:	0002d900 	call	2d90 <__divsi3>
     ec4:	1007883a 	mov	r3,r2
     ec8:	e0bfff17 	ldw	r2,-4(fp)
     ecc:	1885883a 	add	r2,r3,r2
}
     ed0:	e037883a 	mov	sp,fp
     ed4:	dfc00117 	ldw	ra,4(sp)
     ed8:	df000017 	ldw	fp,0(sp)
     edc:	dec00204 	addi	sp,sp,8
     ee0:	f800283a 	ret

00000ee4 <Bel_FFT_Init>:

int Bel_FFT_Init(void) {
     ee4:	defbfb04 	addi	sp,sp,-4116
     ee8:	dfc40415 	stw	ra,4112(sp)
     eec:	df040315 	stw	fp,4108(sp)
     ef0:	df040304 	addi	fp,sp,4108
	// FFT_BASE is the base address of the FFT co-processor. Set bit 31 to bypass the cache on the NIOSII.

	volatile struct bel_fft * belFftPtr = (struct bel_fft *) (FFT_BASE + 0x80000000);
     ef4:	00a00134 	movhi	r2,32772
     ef8:	e0bbff15 	stw	r2,-4100(fp)

	int fin[FFT_LEN * 2] = {
     efc:	e0bc0004 	addi	r2,fp,-4096
     f00:	00c20004 	movi	r3,2048
     f04:	180d883a 	mov	r6,r3
     f08:	000b883a 	mov	r5,zero
     f0c:	1009883a 	mov	r4,r2
     f10:	00060f40 	call	60f4 <memset>
     f14:	008af444 	movi	r2,11217
     f18:	e0bc0215 	stw	r2,-4088(fp)
     f1c:	00903a04 	movi	r2,16616
     f20:	e0bc0415 	stw	r2,-4080(fp)
     f24:	008d7384 	movi	r2,13774
     f28:	e0bc0615 	stw	r2,-4072(fp)
		0x000040E8, 0x00000000, 0x000035CE, 0x00000000 // ...
	};

	int fout[FFT_LEN * 2];

	belFftPtr->Finadr = fin;
     f2c:	e0bbff17 	ldw	r2,-4100(fp)
     f30:	e0fc0004 	addi	r3,fp,-4096
     f34:	10c00315 	stw	r3,12(r2)

	belFftPtr->Foutadr = fout;
     f38:	e0bbff17 	ldw	r2,-4100(fp)
     f3c:	e0fe0004 	addi	r3,fp,-2048
     f40:	10c00415 	stw	r3,16(r2)

	belFftPtr->Factors[0].M = 64;	// geen idee
     f44:	e0bbff17 	ldw	r2,-4100(fp)
     f48:	00c01004 	movi	r3,64
     f4c:	10c0050d 	sth	r3,20(r2)
	belFftPtr->Factors[0].P = 4;	// geen idee
     f50:	e0bbff17 	ldw	r2,-4100(fp)
     f54:	00c00104 	movi	r3,4
     f58:	10c0058d 	sth	r3,22(r2)
	belFftPtr->Factors[1].M = 16;	// geen idee
     f5c:	e0bbff17 	ldw	r2,-4100(fp)
     f60:	00c00404 	movi	r3,16
     f64:	10c0060d 	sth	r3,24(r2)
	belFftPtr->Factors[1].P = 4;	// geen idee
     f68:	e0bbff17 	ldw	r2,-4100(fp)
     f6c:	00c00104 	movi	r3,4
     f70:	10c0068d 	sth	r3,26(r2)
	belFftPtr->Factors[2].M = 4;	// geen idee
     f74:	e0bbff17 	ldw	r2,-4100(fp)
     f78:	00c00104 	movi	r3,4
     f7c:	10c0070d 	sth	r3,28(r2)
	belFftPtr->Factors[2].P = 4;	// geen idee
     f80:	e0bbff17 	ldw	r2,-4100(fp)
     f84:	00c00104 	movi	r3,4
     f88:	10c0078d 	sth	r3,30(r2)
	belFftPtr->Factors[3].M = 1;	// geen idee
     f8c:	e0bbff17 	ldw	r2,-4100(fp)
     f90:	00c00044 	movi	r3,1
     f94:	10c0080d 	sth	r3,32(r2)
	belFftPtr->Factors[3].P = 4;	// geen idee
     f98:	e0bbff17 	ldw	r2,-4100(fp)
     f9c:	00c00104 	movi	r3,4
     fa0:	10c0088d 	sth	r3,34(r2)

	belFftPtr->Control.Start = 1;
     fa4:	e0bbff17 	ldw	r2,-4100(fp)
     fa8:	10c00017 	ldw	r3,0(r2)
     fac:	18c00054 	ori	r3,r3,1
     fb0:	10c00015 	stw	r3,0(r2)

#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     fb4:	00800044 	movi	r2,1
     fb8:	e0bbfd15 	stw	r2,-4108(fp)
     fbc:	00000c06 	br	ff0 <Bel_FFT_Init+0x10c>
		for (int d=1; d<=32767; d++) {}
     fc0:	00800044 	movi	r2,1
     fc4:	e0bbfe15 	stw	r2,-4104(fp)
     fc8:	00000306 	br	fd8 <Bel_FFT_Init+0xf4>
     fcc:	e0bbfe17 	ldw	r2,-4104(fp)
     fd0:	10800044 	addi	r2,r2,1
     fd4:	e0bbfe15 	stw	r2,-4104(fp)
     fd8:	e0bbfe17 	ldw	r2,-4104(fp)
     fdc:	00dfffc4 	movi	r3,32767
     fe0:	18bffa0e 	bge	r3,r2,fcc <__alt_data_end+0xfffd028c>
	belFftPtr->Control.Start = 1;

#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     fe4:	e0bbfd17 	ldw	r2,-4108(fp)
     fe8:	10800044 	addi	r2,r2,1
     fec:	e0bbfd15 	stw	r2,-4108(fp)
     ff0:	e0bbfd17 	ldw	r2,-4108(fp)
     ff4:	00dfffc4 	movi	r3,32767
     ff8:	18bff10e 	bge	r3,r2,fc0 <__alt_data_end+0xfffd0280>
		for (int d=1; d<=32767; d++) {}
#endif
	return 0;
     ffc:	0005883a 	mov	r2,zero
}
    1000:	e037883a 	mov	sp,fp
    1004:	dfc00117 	ldw	ra,4(sp)
    1008:	df000017 	ldw	fp,0(sp)
    100c:	dec00204 	addi	sp,sp,8
    1010:	f800283a 	ret

00001014 <pow>:
    1014:	deffee04 	addi	sp,sp,-72
    1018:	dc800b15 	stw	r18,44(sp)
    101c:	048000b4 	movhi	r18,2
    1020:	ddc01015 	stw	r23,64(sp)
    1024:	dd800f15 	stw	r22,60(sp)
    1028:	dd400e15 	stw	r21,56(sp)
    102c:	dd000d15 	stw	r20,52(sp)
    1030:	dcc00c15 	stw	r19,48(sp)
    1034:	dc400a15 	stw	r17,40(sp)
    1038:	dc000915 	stw	r16,36(sp)
    103c:	dfc01115 	stw	ra,68(sp)
    1040:	94be1c04 	addi	r18,r18,-1936
    1044:	202f883a 	mov	r23,r4
    1048:	282d883a 	mov	r22,r5
    104c:	302b883a 	mov	r21,r6
    1050:	3829883a 	mov	r20,r7
    1054:	00016080 	call	1608 <__ieee754_pow>
    1058:	1023883a 	mov	r17,r2
    105c:	90800017 	ldw	r2,0(r18)
    1060:	04ffffc4 	movi	r19,-1
    1064:	1821883a 	mov	r16,r3
    1068:	14c00426 	beq	r2,r19,107c <pow+0x68>
    106c:	a809883a 	mov	r4,r21
    1070:	a00b883a 	mov	r5,r20
    1074:	00029640 	call	2964 <__fpclassifyd>
    1078:	10000d1e 	bne	r2,zero,10b0 <pow+0x9c>
    107c:	8805883a 	mov	r2,r17
    1080:	8007883a 	mov	r3,r16
    1084:	dfc01117 	ldw	ra,68(sp)
    1088:	ddc01017 	ldw	r23,64(sp)
    108c:	dd800f17 	ldw	r22,60(sp)
    1090:	dd400e17 	ldw	r21,56(sp)
    1094:	dd000d17 	ldw	r20,52(sp)
    1098:	dcc00c17 	ldw	r19,48(sp)
    109c:	dc800b17 	ldw	r18,44(sp)
    10a0:	dc400a17 	ldw	r17,40(sp)
    10a4:	dc000917 	ldw	r16,36(sp)
    10a8:	dec01204 	addi	sp,sp,72
    10ac:	f800283a 	ret
    10b0:	b809883a 	mov	r4,r23
    10b4:	b00b883a 	mov	r5,r22
    10b8:	00029640 	call	2964 <__fpclassifyd>
    10bc:	000d883a 	mov	r6,zero
    10c0:	000f883a 	mov	r7,zero
    10c4:	1000201e 	bne	r2,zero,1148 <pow+0x134>
    10c8:	a809883a 	mov	r4,r21
    10cc:	a00b883a 	mov	r5,r20
    10d0:	00041e80 	call	41e8 <__eqdf2>
    10d4:	103fe91e 	bne	r2,zero,107c <__alt_data_end+0xfffd033c>
    10d8:	01000044 	movi	r4,1
    10dc:	d9000015 	stw	r4,0(sp)
    10e0:	90800017 	ldw	r2,0(r18)
    10e4:	010000b4 	movhi	r4,2
    10e8:	00cffc34 	movhi	r3,16368
    10ec:	21363d04 	addi	r4,r4,-9996
    10f0:	d9000115 	stw	r4,4(sp)
    10f4:	d8000815 	stw	zero,32(sp)
    10f8:	ddc00215 	stw	r23,8(sp)
    10fc:	dd800315 	stw	r22,12(sp)
    1100:	dd400415 	stw	r21,16(sp)
    1104:	dd000515 	stw	r20,20(sp)
    1108:	d8000615 	stw	zero,24(sp)
    110c:	d8c00715 	stw	r3,28(sp)
    1110:	14c02826 	beq	r2,r19,11b4 <pow+0x1a0>
    1114:	01000084 	movi	r4,2
    1118:	11002626 	beq	r2,r4,11b4 <pow+0x1a0>
    111c:	d809883a 	mov	r4,sp
    1120:	00029d80 	call	29d8 <matherr>
    1124:	10006b26 	beq	r2,zero,12d4 <pow+0x2c0>
    1128:	d8800817 	ldw	r2,32(sp)
    112c:	10000326 	beq	r2,zero,113c <pow+0x128>
    1130:	00057680 	call	5768 <__errno>
    1134:	d8c00817 	ldw	r3,32(sp)
    1138:	10c00015 	stw	r3,0(r2)
    113c:	d8800617 	ldw	r2,24(sp)
    1140:	d8c00717 	ldw	r3,28(sp)
    1144:	003fcf06 	br	1084 <__alt_data_end+0xfffd0344>
    1148:	b809883a 	mov	r4,r23
    114c:	b00b883a 	mov	r5,r22
    1150:	00041e80 	call	41e8 <__eqdf2>
    1154:	1000191e 	bne	r2,zero,11bc <pow+0x1a8>
    1158:	000d883a 	mov	r6,zero
    115c:	000f883a 	mov	r7,zero
    1160:	a809883a 	mov	r4,r21
    1164:	a00b883a 	mov	r5,r20
    1168:	00041e80 	call	41e8 <__eqdf2>
    116c:	10003a1e 	bne	r2,zero,1258 <pow+0x244>
    1170:	00c00044 	movi	r3,1
    1174:	d8c00015 	stw	r3,0(sp)
    1178:	90800017 	ldw	r2,0(r18)
    117c:	00c000b4 	movhi	r3,2
    1180:	18f63d04 	addi	r3,r3,-9996
    1184:	d8c00115 	stw	r3,4(sp)
    1188:	d8000815 	stw	zero,32(sp)
    118c:	ddc00215 	stw	r23,8(sp)
    1190:	dd800315 	stw	r22,12(sp)
    1194:	dd400415 	stw	r21,16(sp)
    1198:	dd000515 	stw	r20,20(sp)
    119c:	d8000615 	stw	zero,24(sp)
    11a0:	d8000715 	stw	zero,28(sp)
    11a4:	103fdd26 	beq	r2,zero,111c <__alt_data_end+0xfffd03dc>
    11a8:	0005883a 	mov	r2,zero
    11ac:	00cffc34 	movhi	r3,16368
    11b0:	003fb406 	br	1084 <__alt_data_end+0xfffd0344>
    11b4:	0005883a 	mov	r2,zero
    11b8:	003fb206 	br	1084 <__alt_data_end+0xfffd0344>
    11bc:	8809883a 	mov	r4,r17
    11c0:	800b883a 	mov	r5,r16
    11c4:	00029480 	call	2948 <finite>
    11c8:	10004626 	beq	r2,zero,12e4 <pow+0x2d0>
    11cc:	000d883a 	mov	r6,zero
    11d0:	000f883a 	mov	r7,zero
    11d4:	8809883a 	mov	r4,r17
    11d8:	800b883a 	mov	r5,r16
    11dc:	00041e80 	call	41e8 <__eqdf2>
    11e0:	103fa61e 	bne	r2,zero,107c <__alt_data_end+0xfffd033c>
    11e4:	b809883a 	mov	r4,r23
    11e8:	b00b883a 	mov	r5,r22
    11ec:	00029480 	call	2948 <finite>
    11f0:	103fa226 	beq	r2,zero,107c <__alt_data_end+0xfffd033c>
    11f4:	a809883a 	mov	r4,r21
    11f8:	a00b883a 	mov	r5,r20
    11fc:	00029480 	call	2948 <finite>
    1200:	103f9e26 	beq	r2,zero,107c <__alt_data_end+0xfffd033c>
    1204:	00800104 	movi	r2,4
    1208:	d8800015 	stw	r2,0(sp)
    120c:	90c00017 	ldw	r3,0(r18)
    1210:	008000b4 	movhi	r2,2
    1214:	10b63d04 	addi	r2,r2,-9996
    1218:	d8800115 	stw	r2,4(sp)
    121c:	d8000815 	stw	zero,32(sp)
    1220:	ddc00215 	stw	r23,8(sp)
    1224:	dd800315 	stw	r22,12(sp)
    1228:	dd400415 	stw	r21,16(sp)
    122c:	dd000515 	stw	r20,20(sp)
    1230:	d8000615 	stw	zero,24(sp)
    1234:	d8000715 	stw	zero,28(sp)
    1238:	00800084 	movi	r2,2
    123c:	18804726 	beq	r3,r2,135c <pow+0x348>
    1240:	d809883a 	mov	r4,sp
    1244:	00029d80 	call	29d8 <matherr>
    1248:	10004426 	beq	r2,zero,135c <pow+0x348>
    124c:	d8800817 	ldw	r2,32(sp)
    1250:	103fba26 	beq	r2,zero,113c <__alt_data_end+0xfffd03fc>
    1254:	003fb606 	br	1130 <__alt_data_end+0xfffd03f0>
    1258:	a809883a 	mov	r4,r21
    125c:	a00b883a 	mov	r5,r20
    1260:	00029480 	call	2948 <finite>
    1264:	103f8526 	beq	r2,zero,107c <__alt_data_end+0xfffd033c>
    1268:	000d883a 	mov	r6,zero
    126c:	000f883a 	mov	r7,zero
    1270:	a809883a 	mov	r4,r21
    1274:	a00b883a 	mov	r5,r20
    1278:	000434c0 	call	434c <__ledf2>
    127c:	103f7f0e 	bge	r2,zero,107c <__alt_data_end+0xfffd033c>
    1280:	00c00044 	movi	r3,1
    1284:	d8c00015 	stw	r3,0(sp)
    1288:	90800017 	ldw	r2,0(r18)
    128c:	00c000b4 	movhi	r3,2
    1290:	18f63d04 	addi	r3,r3,-9996
    1294:	d8c00115 	stw	r3,4(sp)
    1298:	d8000815 	stw	zero,32(sp)
    129c:	ddc00215 	stw	r23,8(sp)
    12a0:	dd800315 	stw	r22,12(sp)
    12a4:	dd400415 	stw	r21,16(sp)
    12a8:	dd000515 	stw	r20,20(sp)
    12ac:	d8000615 	stw	zero,24(sp)
    12b0:	10002526 	beq	r2,zero,1348 <pow+0x334>
    12b4:	00fffc34 	movhi	r3,65520
    12b8:	d8c00715 	stw	r3,28(sp)
    12bc:	00c00084 	movi	r3,2
    12c0:	10c0221e 	bne	r2,r3,134c <pow+0x338>
    12c4:	00057680 	call	5768 <__errno>
    12c8:	00c00844 	movi	r3,33
    12cc:	10c00015 	stw	r3,0(r2)
    12d0:	003fde06 	br	124c <__alt_data_end+0xfffd050c>
    12d4:	00057680 	call	5768 <__errno>
    12d8:	00c00844 	movi	r3,33
    12dc:	10c00015 	stw	r3,0(r2)
    12e0:	003f9106 	br	1128 <__alt_data_end+0xfffd03e8>
    12e4:	b809883a 	mov	r4,r23
    12e8:	b00b883a 	mov	r5,r22
    12ec:	00029480 	call	2948 <finite>
    12f0:	103fb626 	beq	r2,zero,11cc <__alt_data_end+0xfffd048c>
    12f4:	a809883a 	mov	r4,r21
    12f8:	a00b883a 	mov	r5,r20
    12fc:	00029480 	call	2948 <finite>
    1300:	103fb226 	beq	r2,zero,11cc <__alt_data_end+0xfffd048c>
    1304:	8809883a 	mov	r4,r17
    1308:	800b883a 	mov	r5,r16
    130c:	00029640 	call	2964 <__fpclassifyd>
    1310:	1000161e 	bne	r2,zero,136c <pow+0x358>
    1314:	00800044 	movi	r2,1
    1318:	d8800015 	stw	r2,0(sp)
    131c:	94000017 	ldw	r16,0(r18)
    1320:	008000b4 	movhi	r2,2
    1324:	10b63d04 	addi	r2,r2,-9996
    1328:	d8800115 	stw	r2,4(sp)
    132c:	d8000815 	stw	zero,32(sp)
    1330:	ddc00215 	stw	r23,8(sp)
    1334:	dd800315 	stw	r22,12(sp)
    1338:	dd400415 	stw	r21,16(sp)
    133c:	dd000515 	stw	r20,20(sp)
    1340:	8000281e 	bne	r16,zero,13e4 <pow+0x3d0>
    1344:	d8000615 	stw	zero,24(sp)
    1348:	d8000715 	stw	zero,28(sp)
    134c:	d809883a 	mov	r4,sp
    1350:	00029d80 	call	29d8 <matherr>
    1354:	103fbd1e 	bne	r2,zero,124c <__alt_data_end+0xfffd050c>
    1358:	003fda06 	br	12c4 <__alt_data_end+0xfffd0584>
    135c:	00057680 	call	5768 <__errno>
    1360:	00c00884 	movi	r3,34
    1364:	10c00015 	stw	r3,0(r2)
    1368:	003fb806 	br	124c <__alt_data_end+0xfffd050c>
    136c:	00c000c4 	movi	r3,3
    1370:	d8c00015 	stw	r3,0(sp)
    1374:	90800017 	ldw	r2,0(r18)
    1378:	00c000b4 	movhi	r3,2
    137c:	18f63d04 	addi	r3,r3,-9996
    1380:	d8c00115 	stw	r3,4(sp)
    1384:	d8000815 	stw	zero,32(sp)
    1388:	ddc00215 	stw	r23,8(sp)
    138c:	dd800315 	stw	r22,12(sp)
    1390:	dd400415 	stw	r21,16(sp)
    1394:	dd000515 	stw	r20,20(sp)
    1398:	000d883a 	mov	r6,zero
    139c:	000f883a 	mov	r7,zero
    13a0:	b809883a 	mov	r4,r23
    13a4:	b00b883a 	mov	r5,r22
    13a8:	1000181e 	bne	r2,zero,140c <pow+0x3f8>
    13ac:	00b80034 	movhi	r2,57344
    13b0:	d8800615 	stw	r2,24(sp)
    13b4:	0091fc34 	movhi	r2,18416
    13b8:	10bfffc4 	addi	r2,r2,-1
    13bc:	d8800715 	stw	r2,28(sp)
    13c0:	000434c0 	call	434c <__ledf2>
    13c4:	10001a16 	blt	r2,zero,1430 <pow+0x41c>
    13c8:	d809883a 	mov	r4,sp
    13cc:	00029d80 	call	29d8 <matherr>
    13d0:	103f551e 	bne	r2,zero,1128 <__alt_data_end+0xfffd03e8>
    13d4:	00057680 	call	5768 <__errno>
    13d8:	00c00884 	movi	r3,34
    13dc:	10c00015 	stw	r3,0(r2)
    13e0:	003f5106 	br	1128 <__alt_data_end+0xfffd03e8>
    13e4:	000d883a 	mov	r6,zero
    13e8:	000f883a 	mov	r7,zero
    13ec:	0009883a 	mov	r4,zero
    13f0:	000b883a 	mov	r5,zero
    13f4:	00038180 	call	3818 <__divdf3>
    13f8:	d8800615 	stw	r2,24(sp)
    13fc:	d8c00715 	stw	r3,28(sp)
    1400:	00800084 	movi	r2,2
    1404:	80bfaf26 	beq	r16,r2,12c4 <__alt_data_end+0xfffd0584>
    1408:	003fd006 	br	134c <__alt_data_end+0xfffd060c>
    140c:	009ffc34 	movhi	r2,32752
    1410:	d8000615 	stw	zero,24(sp)
    1414:	d8800715 	stw	r2,28(sp)
    1418:	000434c0 	call	434c <__ledf2>
    141c:	10001a16 	blt	r2,zero,1488 <pow+0x474>
    1420:	90c00017 	ldw	r3,0(r18)
    1424:	00800084 	movi	r2,2
    1428:	18bfe71e 	bne	r3,r2,13c8 <__alt_data_end+0xfffd0688>
    142c:	003fe906 	br	13d4 <__alt_data_end+0xfffd0694>
    1430:	000d883a 	mov	r6,zero
    1434:	01cff834 	movhi	r7,16352
    1438:	a809883a 	mov	r4,r21
    143c:	a00b883a 	mov	r5,r20
    1440:	00044400 	call	4440 <__muldf3>
    1444:	1009883a 	mov	r4,r2
    1448:	180b883a 	mov	r5,r3
    144c:	1023883a 	mov	r17,r2
    1450:	1821883a 	mov	r16,r3
    1454:	00029ec0 	call	29ec <rint>
    1458:	100d883a 	mov	r6,r2
    145c:	180f883a 	mov	r7,r3
    1460:	8809883a 	mov	r4,r17
    1464:	800b883a 	mov	r5,r16
    1468:	00041e80 	call	41e8 <__eqdf2>
    146c:	103fec26 	beq	r2,zero,1420 <__alt_data_end+0xfffd06e0>
    1470:	00b80034 	movhi	r2,57344
    1474:	d8800615 	stw	r2,24(sp)
    1478:	00b1fc34 	movhi	r2,51184
    147c:	10bfffc4 	addi	r2,r2,-1
    1480:	d8800715 	stw	r2,28(sp)
    1484:	003fe606 	br	1420 <__alt_data_end+0xfffd06e0>
    1488:	000d883a 	mov	r6,zero
    148c:	01cff834 	movhi	r7,16352
    1490:	a809883a 	mov	r4,r21
    1494:	a00b883a 	mov	r5,r20
    1498:	00044400 	call	4440 <__muldf3>
    149c:	1009883a 	mov	r4,r2
    14a0:	180b883a 	mov	r5,r3
    14a4:	1023883a 	mov	r17,r2
    14a8:	1821883a 	mov	r16,r3
    14ac:	00029ec0 	call	29ec <rint>
    14b0:	100d883a 	mov	r6,r2
    14b4:	180f883a 	mov	r7,r3
    14b8:	8809883a 	mov	r4,r17
    14bc:	800b883a 	mov	r5,r16
    14c0:	00041e80 	call	41e8 <__eqdf2>
    14c4:	103fd626 	beq	r2,zero,1420 <__alt_data_end+0xfffd06e0>
    14c8:	00bffc34 	movhi	r2,65520
    14cc:	d8000615 	stw	zero,24(sp)
    14d0:	d8800715 	stw	r2,28(sp)
    14d4:	003fd206 	br	1420 <__alt_data_end+0xfffd06e0>

000014d8 <sqrt>:
    14d8:	defff104 	addi	sp,sp,-60
    14dc:	dd000d15 	stw	r20,52(sp)
    14e0:	050000b4 	movhi	r20,2
    14e4:	dcc00c15 	stw	r19,48(sp)
    14e8:	dc800b15 	stw	r18,44(sp)
    14ec:	dc400a15 	stw	r17,40(sp)
    14f0:	dc000915 	stw	r16,36(sp)
    14f4:	dfc00e15 	stw	ra,56(sp)
    14f8:	a53e1c04 	addi	r20,r20,-1936
    14fc:	2027883a 	mov	r19,r4
    1500:	2825883a 	mov	r18,r5
    1504:	00026ac0 	call	26ac <__ieee754_sqrt>
    1508:	1821883a 	mov	r16,r3
    150c:	a0c00017 	ldw	r3,0(r20)
    1510:	1023883a 	mov	r17,r2
    1514:	00bfffc4 	movi	r2,-1
    1518:	18800a26 	beq	r3,r2,1544 <sqrt+0x6c>
    151c:	9809883a 	mov	r4,r19
    1520:	900b883a 	mov	r5,r18
    1524:	00029640 	call	2964 <__fpclassifyd>
    1528:	10000626 	beq	r2,zero,1544 <sqrt+0x6c>
    152c:	000d883a 	mov	r6,zero
    1530:	000f883a 	mov	r7,zero
    1534:	9809883a 	mov	r4,r19
    1538:	900b883a 	mov	r5,r18
    153c:	000434c0 	call	434c <__ledf2>
    1540:	10000a16 	blt	r2,zero,156c <sqrt+0x94>
    1544:	8805883a 	mov	r2,r17
    1548:	8007883a 	mov	r3,r16
    154c:	dfc00e17 	ldw	ra,56(sp)
    1550:	dd000d17 	ldw	r20,52(sp)
    1554:	dcc00c17 	ldw	r19,48(sp)
    1558:	dc800b17 	ldw	r18,44(sp)
    155c:	dc400a17 	ldw	r17,40(sp)
    1560:	dc000917 	ldw	r16,36(sp)
    1564:	dec00f04 	addi	sp,sp,60
    1568:	f800283a 	ret
    156c:	00800044 	movi	r2,1
    1570:	d8800015 	stw	r2,0(sp)
    1574:	a4000017 	ldw	r16,0(r20)
    1578:	008000b4 	movhi	r2,2
    157c:	10b63e04 	addi	r2,r2,-9992
    1580:	d8800115 	stw	r2,4(sp)
    1584:	d8000815 	stw	zero,32(sp)
    1588:	dcc00415 	stw	r19,16(sp)
    158c:	dc800515 	stw	r18,20(sp)
    1590:	dcc00215 	stw	r19,8(sp)
    1594:	dc800315 	stw	r18,12(sp)
    1598:	80000a1e 	bne	r16,zero,15c4 <sqrt+0xec>
    159c:	d8000615 	stw	zero,24(sp)
    15a0:	d8000715 	stw	zero,28(sp)
    15a4:	d809883a 	mov	r4,sp
    15a8:	00029d80 	call	29d8 <matherr>
    15ac:	10000e26 	beq	r2,zero,15e8 <sqrt+0x110>
    15b0:	d8800817 	ldw	r2,32(sp)
    15b4:	1000101e 	bne	r2,zero,15f8 <sqrt+0x120>
    15b8:	d8800617 	ldw	r2,24(sp)
    15bc:	d8c00717 	ldw	r3,28(sp)
    15c0:	003fe206 	br	154c <__alt_data_end+0xfffd080c>
    15c4:	000d883a 	mov	r6,zero
    15c8:	000f883a 	mov	r7,zero
    15cc:	0009883a 	mov	r4,zero
    15d0:	000b883a 	mov	r5,zero
    15d4:	00038180 	call	3818 <__divdf3>
    15d8:	d8800615 	stw	r2,24(sp)
    15dc:	d8c00715 	stw	r3,28(sp)
    15e0:	00800084 	movi	r2,2
    15e4:	80bfef1e 	bne	r16,r2,15a4 <__alt_data_end+0xfffd0864>
    15e8:	00057680 	call	5768 <__errno>
    15ec:	00c00844 	movi	r3,33
    15f0:	10c00015 	stw	r3,0(r2)
    15f4:	003fee06 	br	15b0 <__alt_data_end+0xfffd0870>
    15f8:	00057680 	call	5768 <__errno>
    15fc:	d8c00817 	ldw	r3,32(sp)
    1600:	10c00015 	stw	r3,0(r2)
    1604:	003fec06 	br	15b8 <__alt_data_end+0xfffd0878>

00001608 <__ieee754_pow>:
    1608:	00a00034 	movhi	r2,32768
    160c:	deffea04 	addi	sp,sp,-88
    1610:	10bfffc4 	addi	r2,r2,-1
    1614:	dc800e15 	stw	r18,56(sp)
    1618:	38a4703a 	and	r18,r7,r2
    161c:	dfc01515 	stw	ra,84(sp)
    1620:	df001415 	stw	fp,80(sp)
    1624:	ddc01315 	stw	r23,76(sp)
    1628:	dd801215 	stw	r22,72(sp)
    162c:	dd401115 	stw	r21,68(sp)
    1630:	dd001015 	stw	r20,64(sp)
    1634:	dcc00f15 	stw	r19,60(sp)
    1638:	dc400d15 	stw	r17,52(sp)
    163c:	dc000c15 	stw	r16,48(sp)
    1640:	9186b03a 	or	r3,r18,r6
    1644:	18002a26 	beq	r3,zero,16f0 <__ieee754_pow+0xe8>
    1648:	28a2703a 	and	r17,r5,r2
    164c:	009ffc34 	movhi	r2,32752
    1650:	14402316 	blt	r2,r17,16e0 <__ieee754_pow+0xd8>
    1654:	88802126 	beq	r17,r2,16dc <__ieee754_pow+0xd4>
    1658:	14802116 	blt	r2,r18,16e0 <__ieee754_pow+0xd8>
    165c:	009ffc34 	movhi	r2,32752
    1660:	90807326 	beq	r18,r2,1830 <__ieee754_pow+0x228>
    1664:	2827883a 	mov	r19,r5
    1668:	2021883a 	mov	r16,r4
    166c:	302d883a 	mov	r22,r6
    1670:	3839883a 	mov	fp,r7
    1674:	28007016 	blt	r5,zero,1838 <__ieee754_pow+0x230>
    1678:	002b883a 	mov	r21,zero
    167c:	b0003a1e 	bne	r22,zero,1768 <__ieee754_pow+0x160>
    1680:	009ffc34 	movhi	r2,32752
    1684:	90807f26 	beq	r18,r2,1884 <__ieee754_pow+0x27c>
    1688:	008ffc34 	movhi	r2,16368
    168c:	90805426 	beq	r18,r2,17e0 <__ieee754_pow+0x1d8>
    1690:	00900034 	movhi	r2,16384
    1694:	e0833b26 	beq	fp,r2,2384 <__ieee754_pow+0xd7c>
    1698:	008ff834 	movhi	r2,16352
    169c:	e080321e 	bne	fp,r2,1768 <__ieee754_pow+0x160>
    16a0:	98003116 	blt	r19,zero,1768 <__ieee754_pow+0x160>
    16a4:	8009883a 	mov	r4,r16
    16a8:	980b883a 	mov	r5,r19
    16ac:	dfc01517 	ldw	ra,84(sp)
    16b0:	df001417 	ldw	fp,80(sp)
    16b4:	ddc01317 	ldw	r23,76(sp)
    16b8:	dd801217 	ldw	r22,72(sp)
    16bc:	dd401117 	ldw	r21,68(sp)
    16c0:	dd001017 	ldw	r20,64(sp)
    16c4:	dcc00f17 	ldw	r19,60(sp)
    16c8:	dc800e17 	ldw	r18,56(sp)
    16cc:	dc400d17 	ldw	r17,52(sp)
    16d0:	dc000c17 	ldw	r16,48(sp)
    16d4:	dec01604 	addi	sp,sp,88
    16d8:	00026ac1 	jmpi	26ac <__ieee754_sqrt>
    16dc:	20001226 	beq	r4,zero,1728 <__ieee754_pow+0x120>
    16e0:	00b00434 	movhi	r2,49168
    16e4:	8885883a 	add	r2,r17,r2
    16e8:	1108b03a 	or	r4,r2,r4
    16ec:	20000f1e 	bne	r4,zero,172c <__ieee754_pow+0x124>
    16f0:	0005883a 	mov	r2,zero
    16f4:	00cffc34 	movhi	r3,16368
    16f8:	dfc01517 	ldw	ra,84(sp)
    16fc:	df001417 	ldw	fp,80(sp)
    1700:	ddc01317 	ldw	r23,76(sp)
    1704:	dd801217 	ldw	r22,72(sp)
    1708:	dd401117 	ldw	r21,68(sp)
    170c:	dd001017 	ldw	r20,64(sp)
    1710:	dcc00f17 	ldw	r19,60(sp)
    1714:	dc800e17 	ldw	r18,56(sp)
    1718:	dc400d17 	ldw	r17,52(sp)
    171c:	dc000c17 	ldw	r16,48(sp)
    1720:	dec01604 	addi	sp,sp,88
    1724:	f800283a 	ret
    1728:	8cbfcc0e 	bge	r17,r18,165c <__alt_data_end+0xfffd091c>
    172c:	010000b4 	movhi	r4,2
    1730:	21368e04 	addi	r4,r4,-9672
    1734:	dfc01517 	ldw	ra,84(sp)
    1738:	df001417 	ldw	fp,80(sp)
    173c:	ddc01317 	ldw	r23,76(sp)
    1740:	dd801217 	ldw	r22,72(sp)
    1744:	dd401117 	ldw	r21,68(sp)
    1748:	dd001017 	ldw	r20,64(sp)
    174c:	dcc00f17 	ldw	r19,60(sp)
    1750:	dc800e17 	ldw	r18,56(sp)
    1754:	dc400d17 	ldw	r17,52(sp)
    1758:	dc000c17 	ldw	r16,48(sp)
    175c:	dec01604 	addi	sp,sp,88
    1760:	00029e01 	jmpi	29e0 <nan>
    1764:	002b883a 	mov	r21,zero
    1768:	8009883a 	mov	r4,r16
    176c:	980b883a 	mov	r5,r19
    1770:	00029340 	call	2934 <fabs>
    1774:	102f883a 	mov	r23,r2
    1778:	80000f26 	beq	r16,zero,17b8 <__ieee754_pow+0x1b0>
    177c:	9816d7fa 	srli	r11,r19,31
    1780:	5affffc4 	addi	r11,r11,-1
    1784:	aac4b03a 	or	r2,r21,r11
    1788:	10004b26 	beq	r2,zero,18b8 <__ieee754_pow+0x2b0>
    178c:	00907834 	movhi	r2,16864
    1790:	1480540e 	bge	r2,r18,18e4 <__ieee754_pow+0x2dc>
    1794:	0090fc34 	movhi	r2,17392
    1798:	14832d0e 	bge	r2,r18,2450 <__ieee754_pow+0xe48>
    179c:	008ffc34 	movhi	r2,16368
    17a0:	10bfffc4 	addi	r2,r2,-1
    17a4:	14401916 	blt	r2,r17,180c <__ieee754_pow+0x204>
    17a8:	e0001916 	blt	fp,zero,1810 <__ieee754_pow+0x208>
    17ac:	0005883a 	mov	r2,zero
    17b0:	0007883a 	mov	r3,zero
    17b4:	003fd006 	br	16f8 <__alt_data_end+0xfffd09b8>
    17b8:	88000526 	beq	r17,zero,17d0 <__ieee754_pow+0x1c8>
    17bc:	00900034 	movhi	r2,16384
    17c0:	10bfffc4 	addi	r2,r2,-1
    17c4:	9884703a 	and	r2,r19,r2
    17c8:	010ffc34 	movhi	r4,16368
    17cc:	113feb1e 	bne	r2,r4,177c <__alt_data_end+0xfffd0a3c>
    17d0:	e0000716 	blt	fp,zero,17f0 <__ieee754_pow+0x1e8>
    17d4:	9802e216 	blt	r19,zero,2360 <__ieee754_pow+0xd58>
    17d8:	b805883a 	mov	r2,r23
    17dc:	003fc606 	br	16f8 <__alt_data_end+0xfffd09b8>
    17e0:	e0037516 	blt	fp,zero,25b8 <__ieee754_pow+0xfb0>
    17e4:	8005883a 	mov	r2,r16
    17e8:	9807883a 	mov	r3,r19
    17ec:	003fc206 	br	16f8 <__alt_data_end+0xfffd09b8>
    17f0:	b80d883a 	mov	r6,r23
    17f4:	180f883a 	mov	r7,r3
    17f8:	0009883a 	mov	r4,zero
    17fc:	014ffc34 	movhi	r5,16368
    1800:	00038180 	call	3818 <__divdf3>
    1804:	102f883a 	mov	r23,r2
    1808:	003ff206 	br	17d4 <__alt_data_end+0xfffd0a94>
    180c:	073fe70e 	bge	zero,fp,17ac <__alt_data_end+0xfffd0a6c>
    1810:	01a20034 	movhi	r6,34816
    1814:	01df8e34 	movhi	r7,32312
    1818:	319d6704 	addi	r6,r6,30108
    181c:	39f90f04 	addi	r7,r7,-7108
    1820:	3009883a 	mov	r4,r6
    1824:	380b883a 	mov	r5,r7
    1828:	00044400 	call	4440 <__muldf3>
    182c:	003fb206 	br	16f8 <__alt_data_end+0xfffd09b8>
    1830:	303f8c26 	beq	r6,zero,1664 <__alt_data_end+0xfffd0924>
    1834:	003faa06 	br	16e0 <__alt_data_end+0xfffd09a0>
    1838:	0090d034 	movhi	r2,17216
    183c:	10bfffc4 	addi	r2,r2,-1
    1840:	14801b16 	blt	r2,r18,18b0 <__ieee754_pow+0x2a8>
    1844:	008ffc34 	movhi	r2,16368
    1848:	10bfffc4 	addi	r2,r2,-1
    184c:	14bf8a0e 	bge	r2,r18,1678 <__alt_data_end+0xfffd0938>
    1850:	9005d53a 	srai	r2,r18,20
    1854:	00c00504 	movi	r3,20
    1858:	10bf0044 	addi	r2,r2,-1023
    185c:	18836b0e 	bge	r3,r2,260c <__ieee754_pow+0x1004>
    1860:	00c00d04 	movi	r3,52
    1864:	1885c83a 	sub	r2,r3,r2
    1868:	3086d83a 	srl	r3,r6,r2
    186c:	1884983a 	sll	r2,r3,r2
    1870:	30bf811e 	bne	r6,r2,1678 <__alt_data_end+0xfffd0938>
    1874:	18c0004c 	andi	r3,r3,1
    1878:	02800084 	movi	r10,2
    187c:	50ebc83a 	sub	r21,r10,r3
    1880:	003f7e06 	br	167c <__alt_data_end+0xfffd093c>
    1884:	01300434 	movhi	r4,49168
    1888:	8909883a 	add	r4,r17,r4
    188c:	2408b03a 	or	r4,r4,r16
    1890:	203f9726 	beq	r4,zero,16f0 <__alt_data_end+0xfffd09b0>
    1894:	008ffc34 	movhi	r2,16368
    1898:	10bfffc4 	addi	r2,r2,-1
    189c:	1442e60e 	bge	r2,r17,2438 <__ieee754_pow+0xe30>
    18a0:	e03fc216 	blt	fp,zero,17ac <__alt_data_end+0xfffd0a6c>
    18a4:	0005883a 	mov	r2,zero
    18a8:	e007883a 	mov	r3,fp
    18ac:	003f9206 	br	16f8 <__alt_data_end+0xfffd09b8>
    18b0:	05400084 	movi	r21,2
    18b4:	003f7106 	br	167c <__alt_data_end+0xfffd093c>
    18b8:	800d883a 	mov	r6,r16
    18bc:	980f883a 	mov	r7,r19
    18c0:	3009883a 	mov	r4,r6
    18c4:	380b883a 	mov	r5,r7
    18c8:	0004cac0 	call	4cac <__subdf3>
    18cc:	100d883a 	mov	r6,r2
    18d0:	180f883a 	mov	r7,r3
    18d4:	1009883a 	mov	r4,r2
    18d8:	180b883a 	mov	r5,r3
    18dc:	00038180 	call	3818 <__divdf3>
    18e0:	003f8506 	br	16f8 <__alt_data_end+0xfffd09b8>
    18e4:	00800434 	movhi	r2,16
    18e8:	10bfffc4 	addi	r2,r2,-1
    18ec:	1442d616 	blt	r2,r17,2448 <__ieee754_pow+0xe40>
    18f0:	b809883a 	mov	r4,r23
    18f4:	000d883a 	mov	r6,zero
    18f8:	01d0d034 	movhi	r7,17216
    18fc:	180b883a 	mov	r5,r3
    1900:	dac00b15 	stw	r11,44(sp)
    1904:	00044400 	call	4440 <__muldf3>
    1908:	dac00b17 	ldw	r11,44(sp)
    190c:	102f883a 	mov	r23,r2
    1910:	1823883a 	mov	r17,r3
    1914:	033ff2c4 	movi	r12,-53
    1918:	8807d53a 	srai	r3,r17,20
    191c:	00800434 	movhi	r2,16
    1920:	10bfffc4 	addi	r2,r2,-1
    1924:	18ff0044 	addi	r3,r3,-1023
    1928:	1b19883a 	add	r12,r3,r12
    192c:	00c00134 	movhi	r3,4
    1930:	8884703a 	and	r2,r17,r2
    1934:	18e62384 	addi	r3,r3,-26482
    1938:	150ffc34 	orhi	r20,r2,16368
    193c:	1880060e 	bge	r3,r2,1958 <__ieee754_pow+0x350>
    1940:	00c00334 	movhi	r3,12
    1944:	18ed9e44 	addi	r3,r3,-18823
    1948:	18833f0e 	bge	r3,r2,2648 <__ieee754_pow+0x1040>
    194c:	00bffc34 	movhi	r2,65520
    1950:	63000044 	addi	r12,r12,1
    1954:	a0a9883a 	add	r20,r20,r2
    1958:	0027883a 	mov	r19,zero
    195c:	d8000215 	stw	zero,8(sp)
    1960:	0013883a 	mov	r9,zero
    1964:	0011883a 	mov	r8,zero
    1968:	0015883a 	mov	r10,zero
    196c:	048ffc34 	movhi	r18,16368
    1970:	900f883a 	mov	r7,r18
    1974:	b809883a 	mov	r4,r23
    1978:	a00b883a 	mov	r5,r20
    197c:	000d883a 	mov	r6,zero
    1980:	da000a15 	stw	r8,40(sp)
    1984:	da400815 	stw	r9,32(sp)
    1988:	dac00b15 	stw	r11,44(sp)
    198c:	db000915 	stw	r12,36(sp)
    1990:	da800515 	stw	r10,20(sp)
    1994:	0004cac0 	call	4cac <__subdf3>
    1998:	b809883a 	mov	r4,r23
    199c:	a00b883a 	mov	r5,r20
    19a0:	900f883a 	mov	r7,r18
    19a4:	000d883a 	mov	r6,zero
    19a8:	d8800015 	stw	r2,0(sp)
    19ac:	d8c00115 	stw	r3,4(sp)
    19b0:	0002f6c0 	call	2f6c <__adddf3>
    19b4:	100d883a 	mov	r6,r2
    19b8:	180f883a 	mov	r7,r3
    19bc:	0009883a 	mov	r4,zero
    19c0:	014ffc34 	movhi	r5,16368
    19c4:	00038180 	call	3818 <__divdf3>
    19c8:	d9000017 	ldw	r4,0(sp)
    19cc:	d9400117 	ldw	r5,4(sp)
    19d0:	100d883a 	mov	r6,r2
    19d4:	180f883a 	mov	r7,r3
    19d8:	d8c00715 	stw	r3,28(sp)
    19dc:	d8800615 	stw	r2,24(sp)
    19e0:	00044400 	call	4440 <__muldf3>
    19e4:	1023883a 	mov	r17,r2
    19e8:	a005d07a 	srai	r2,r20,1
    19ec:	da800517 	ldw	r10,20(sp)
    19f0:	1821883a 	mov	r16,r3
    19f4:	10c80034 	orhi	r3,r2,8192
    19f8:	00800234 	movhi	r2,8
    19fc:	1885883a 	add	r2,r3,r2
    1a00:	1295883a 	add	r10,r2,r10
    1a04:	500f883a 	mov	r7,r10
    1a08:	800b883a 	mov	r5,r16
    1a0c:	000d883a 	mov	r6,zero
    1a10:	0009883a 	mov	r4,zero
    1a14:	da800515 	stw	r10,20(sp)
    1a18:	00044400 	call	4440 <__muldf3>
    1a1c:	d9000017 	ldw	r4,0(sp)
    1a20:	d9400117 	ldw	r5,4(sp)
    1a24:	100d883a 	mov	r6,r2
    1a28:	180f883a 	mov	r7,r3
    1a2c:	0004cac0 	call	4cac <__subdf3>
    1a30:	da800517 	ldw	r10,20(sp)
    1a34:	900f883a 	mov	r7,r18
    1a38:	000d883a 	mov	r6,zero
    1a3c:	500b883a 	mov	r5,r10
    1a40:	0009883a 	mov	r4,zero
    1a44:	d8800015 	stw	r2,0(sp)
    1a48:	d8c00515 	stw	r3,20(sp)
    1a4c:	0004cac0 	call	4cac <__subdf3>
    1a50:	b809883a 	mov	r4,r23
    1a54:	a00b883a 	mov	r5,r20
    1a58:	100d883a 	mov	r6,r2
    1a5c:	180f883a 	mov	r7,r3
    1a60:	0004cac0 	call	4cac <__subdf3>
    1a64:	800f883a 	mov	r7,r16
    1a68:	000d883a 	mov	r6,zero
    1a6c:	1009883a 	mov	r4,r2
    1a70:	180b883a 	mov	r5,r3
    1a74:	00044400 	call	4440 <__muldf3>
    1a78:	db400517 	ldw	r13,20(sp)
    1a7c:	d9000017 	ldw	r4,0(sp)
    1a80:	100d883a 	mov	r6,r2
    1a84:	680b883a 	mov	r5,r13
    1a88:	180f883a 	mov	r7,r3
    1a8c:	0004cac0 	call	4cac <__subdf3>
    1a90:	dbc00617 	ldw	r15,24(sp)
    1a94:	db800717 	ldw	r14,28(sp)
    1a98:	1009883a 	mov	r4,r2
    1a9c:	780d883a 	mov	r6,r15
    1aa0:	700f883a 	mov	r7,r14
    1aa4:	180b883a 	mov	r5,r3
    1aa8:	00044400 	call	4440 <__muldf3>
    1aac:	880d883a 	mov	r6,r17
    1ab0:	800f883a 	mov	r7,r16
    1ab4:	8809883a 	mov	r4,r17
    1ab8:	800b883a 	mov	r5,r16
    1abc:	d8800015 	stw	r2,0(sp)
    1ac0:	d8c00115 	stw	r3,4(sp)
    1ac4:	00044400 	call	4440 <__muldf3>
    1ac8:	01929174 	movhi	r6,19013
    1acc:	01cff2b4 	movhi	r7,16330
    1ad0:	3193bbc4 	addi	r6,r6,20207
    1ad4:	39df8a04 	addi	r7,r7,32296
    1ad8:	1009883a 	mov	r4,r2
    1adc:	180b883a 	mov	r5,r3
    1ae0:	102f883a 	mov	r23,r2
    1ae4:	1829883a 	mov	r20,r3
    1ae8:	00044400 	call	4440 <__muldf3>
    1aec:	01a4f2b4 	movhi	r6,37834
    1af0:	01cff3b4 	movhi	r7,16334
    1af4:	31b6d944 	addi	r6,r6,-9371
    1af8:	39e19284 	addi	r7,r7,-31158
    1afc:	1009883a 	mov	r4,r2
    1b00:	180b883a 	mov	r5,r3
    1b04:	0002f6c0 	call	2f6c <__adddf3>
    1b08:	b80d883a 	mov	r6,r23
    1b0c:	a00f883a 	mov	r7,r20
    1b10:	1009883a 	mov	r4,r2
    1b14:	180b883a 	mov	r5,r3
    1b18:	00044400 	call	4440 <__muldf3>
    1b1c:	01aa4774 	movhi	r6,43293
    1b20:	01cff474 	movhi	r7,16337
    1b24:	31904044 	addi	r6,r6,16641
    1b28:	39dd1804 	addi	r7,r7,29792
    1b2c:	1009883a 	mov	r4,r2
    1b30:	180b883a 	mov	r5,r3
    1b34:	0002f6c0 	call	2f6c <__adddf3>
    1b38:	b80d883a 	mov	r6,r23
    1b3c:	a00f883a 	mov	r7,r20
    1b40:	1009883a 	mov	r4,r2
    1b44:	180b883a 	mov	r5,r3
    1b48:	00044400 	call	4440 <__muldf3>
    1b4c:	019463f4 	movhi	r6,20879
    1b50:	01cff574 	movhi	r7,16341
    1b54:	31899344 	addi	r6,r6,9805
    1b58:	39d55544 	addi	r7,r7,21845
    1b5c:	1009883a 	mov	r4,r2
    1b60:	180b883a 	mov	r5,r3
    1b64:	0002f6c0 	call	2f6c <__adddf3>
    1b68:	b80d883a 	mov	r6,r23
    1b6c:	a00f883a 	mov	r7,r20
    1b70:	1009883a 	mov	r4,r2
    1b74:	180b883a 	mov	r5,r3
    1b78:	00044400 	call	4440 <__muldf3>
    1b7c:	01b6dc34 	movhi	r6,56176
    1b80:	01cff6f4 	movhi	r7,16347
    1b84:	31aaffc4 	addi	r6,r6,-21505
    1b88:	39db6d84 	addi	r7,r7,28086
    1b8c:	1009883a 	mov	r4,r2
    1b90:	180b883a 	mov	r5,r3
    1b94:	0002f6c0 	call	2f6c <__adddf3>
    1b98:	b80d883a 	mov	r6,r23
    1b9c:	a00f883a 	mov	r7,r20
    1ba0:	1009883a 	mov	r4,r2
    1ba4:	180b883a 	mov	r5,r3
    1ba8:	00044400 	call	4440 <__muldf3>
    1bac:	018cccf4 	movhi	r6,13107
    1bb0:	01cff8f4 	movhi	r7,16355
    1bb4:	318cc0c4 	addi	r6,r6,13059
    1bb8:	39ccccc4 	addi	r7,r7,13107
    1bbc:	1009883a 	mov	r4,r2
    1bc0:	180b883a 	mov	r5,r3
    1bc4:	0002f6c0 	call	2f6c <__adddf3>
    1bc8:	b80d883a 	mov	r6,r23
    1bcc:	a00f883a 	mov	r7,r20
    1bd0:	b809883a 	mov	r4,r23
    1bd4:	a00b883a 	mov	r5,r20
    1bd8:	1825883a 	mov	r18,r3
    1bdc:	d8800515 	stw	r2,20(sp)
    1be0:	00044400 	call	4440 <__muldf3>
    1be4:	db400517 	ldw	r13,20(sp)
    1be8:	900b883a 	mov	r5,r18
    1bec:	100d883a 	mov	r6,r2
    1bf0:	6809883a 	mov	r4,r13
    1bf4:	180f883a 	mov	r7,r3
    1bf8:	00044400 	call	4440 <__muldf3>
    1bfc:	800f883a 	mov	r7,r16
    1c00:	8809883a 	mov	r4,r17
    1c04:	800b883a 	mov	r5,r16
    1c08:	000d883a 	mov	r6,zero
    1c0c:	102f883a 	mov	r23,r2
    1c10:	1829883a 	mov	r20,r3
    1c14:	0002f6c0 	call	2f6c <__adddf3>
    1c18:	d9800017 	ldw	r6,0(sp)
    1c1c:	d9c00117 	ldw	r7,4(sp)
    1c20:	1009883a 	mov	r4,r2
    1c24:	180b883a 	mov	r5,r3
    1c28:	00044400 	call	4440 <__muldf3>
    1c2c:	b80d883a 	mov	r6,r23
    1c30:	a00f883a 	mov	r7,r20
    1c34:	1009883a 	mov	r4,r2
    1c38:	180b883a 	mov	r5,r3
    1c3c:	0002f6c0 	call	2f6c <__adddf3>
    1c40:	800f883a 	mov	r7,r16
    1c44:	800b883a 	mov	r5,r16
    1c48:	000d883a 	mov	r6,zero
    1c4c:	0009883a 	mov	r4,zero
    1c50:	1025883a 	mov	r18,r2
    1c54:	182f883a 	mov	r23,r3
    1c58:	00044400 	call	4440 <__muldf3>
    1c5c:	000d883a 	mov	r6,zero
    1c60:	01d00234 	movhi	r7,16392
    1c64:	1009883a 	mov	r4,r2
    1c68:	180b883a 	mov	r5,r3
    1c6c:	d8c00715 	stw	r3,28(sp)
    1c70:	d8800615 	stw	r2,24(sp)
    1c74:	0002f6c0 	call	2f6c <__adddf3>
    1c78:	900d883a 	mov	r6,r18
    1c7c:	b80f883a 	mov	r7,r23
    1c80:	1009883a 	mov	r4,r2
    1c84:	180b883a 	mov	r5,r3
    1c88:	0002f6c0 	call	2f6c <__adddf3>
    1c8c:	800b883a 	mov	r5,r16
    1c90:	000d883a 	mov	r6,zero
    1c94:	180f883a 	mov	r7,r3
    1c98:	0009883a 	mov	r4,zero
    1c9c:	1829883a 	mov	r20,r3
    1ca0:	00044400 	call	4440 <__muldf3>
    1ca4:	a00b883a 	mov	r5,r20
    1ca8:	000d883a 	mov	r6,zero
    1cac:	01d00234 	movhi	r7,16392
    1cb0:	0009883a 	mov	r4,zero
    1cb4:	d8800315 	stw	r2,12(sp)
    1cb8:	d8c00415 	stw	r3,16(sp)
    1cbc:	0004cac0 	call	4cac <__subdf3>
    1cc0:	dbc00617 	ldw	r15,24(sp)
    1cc4:	db800717 	ldw	r14,28(sp)
    1cc8:	1009883a 	mov	r4,r2
    1ccc:	780d883a 	mov	r6,r15
    1cd0:	700f883a 	mov	r7,r14
    1cd4:	180b883a 	mov	r5,r3
    1cd8:	0004cac0 	call	4cac <__subdf3>
    1cdc:	9009883a 	mov	r4,r18
    1ce0:	b80b883a 	mov	r5,r23
    1ce4:	100d883a 	mov	r6,r2
    1ce8:	180f883a 	mov	r7,r3
    1cec:	0004cac0 	call	4cac <__subdf3>
    1cf0:	880d883a 	mov	r6,r17
    1cf4:	800f883a 	mov	r7,r16
    1cf8:	1009883a 	mov	r4,r2
    1cfc:	180b883a 	mov	r5,r3
    1d00:	00044400 	call	4440 <__muldf3>
    1d04:	d9000017 	ldw	r4,0(sp)
    1d08:	d9400117 	ldw	r5,4(sp)
    1d0c:	a00f883a 	mov	r7,r20
    1d10:	000d883a 	mov	r6,zero
    1d14:	1023883a 	mov	r17,r2
    1d18:	1821883a 	mov	r16,r3
    1d1c:	00044400 	call	4440 <__muldf3>
    1d20:	8809883a 	mov	r4,r17
    1d24:	800b883a 	mov	r5,r16
    1d28:	100d883a 	mov	r6,r2
    1d2c:	180f883a 	mov	r7,r3
    1d30:	0002f6c0 	call	2f6c <__adddf3>
    1d34:	d9000317 	ldw	r4,12(sp)
    1d38:	d9400417 	ldw	r5,16(sp)
    1d3c:	100d883a 	mov	r6,r2
    1d40:	180f883a 	mov	r7,r3
    1d44:	102f883a 	mov	r23,r2
    1d48:	1823883a 	mov	r17,r3
    1d4c:	0002f6c0 	call	2f6c <__adddf3>
    1d50:	01cffbf4 	movhi	r7,16367
    1d54:	39f1c244 	addi	r7,r7,-14583
    1d58:	0009883a 	mov	r4,zero
    1d5c:	180b883a 	mov	r5,r3
    1d60:	01b80034 	movhi	r6,57344
    1d64:	1821883a 	mov	r16,r3
    1d68:	00044400 	call	4440 <__muldf3>
    1d6c:	d9800317 	ldw	r6,12(sp)
    1d70:	d9c00417 	ldw	r7,16(sp)
    1d74:	800b883a 	mov	r5,r16
    1d78:	0009883a 	mov	r4,zero
    1d7c:	1825883a 	mov	r18,r3
    1d80:	d8800015 	stw	r2,0(sp)
    1d84:	0004cac0 	call	4cac <__subdf3>
    1d88:	b809883a 	mov	r4,r23
    1d8c:	880b883a 	mov	r5,r17
    1d90:	100d883a 	mov	r6,r2
    1d94:	180f883a 	mov	r7,r3
    1d98:	0004cac0 	call	4cac <__subdf3>
    1d9c:	01b70eb4 	movhi	r6,56378
    1da0:	01cffbf4 	movhi	r7,16367
    1da4:	3180ff44 	addi	r6,r6,1021
    1da8:	39f1c244 	addi	r7,r7,-14583
    1dac:	1009883a 	mov	r4,r2
    1db0:	180b883a 	mov	r5,r3
    1db4:	00044400 	call	4440 <__muldf3>
    1db8:	018516f4 	movhi	r6,5211
    1dbc:	01ef8fb4 	movhi	r7,48702
    1dc0:	800b883a 	mov	r5,r16
    1dc4:	31807d44 	addi	r6,r6,501
    1dc8:	39cbf804 	addi	r7,r7,12256
    1dcc:	0009883a 	mov	r4,zero
    1dd0:	1029883a 	mov	r20,r2
    1dd4:	1823883a 	mov	r17,r3
    1dd8:	00044400 	call	4440 <__muldf3>
    1ddc:	a009883a 	mov	r4,r20
    1de0:	880b883a 	mov	r5,r17
    1de4:	100d883a 	mov	r6,r2
    1de8:	180f883a 	mov	r7,r3
    1dec:	0002f6c0 	call	2f6c <__adddf3>
    1df0:	da400817 	ldw	r9,32(sp)
    1df4:	da000a17 	ldw	r8,40(sp)
    1df8:	180b883a 	mov	r5,r3
    1dfc:	480d883a 	mov	r6,r9
    1e00:	400f883a 	mov	r7,r8
    1e04:	1009883a 	mov	r4,r2
    1e08:	0002f6c0 	call	2f6c <__adddf3>
    1e0c:	db000917 	ldw	r12,36(sp)
    1e10:	1029883a 	mov	r20,r2
    1e14:	1823883a 	mov	r17,r3
    1e18:	6009883a 	mov	r4,r12
    1e1c:	00056280 	call	5628 <__floatsidf>
    1e20:	d9000017 	ldw	r4,0(sp)
    1e24:	a00d883a 	mov	r6,r20
    1e28:	880f883a 	mov	r7,r17
    1e2c:	900b883a 	mov	r5,r18
    1e30:	182f883a 	mov	r23,r3
    1e34:	d8800115 	stw	r2,4(sp)
    1e38:	0002f6c0 	call	2f6c <__adddf3>
    1e3c:	d9c00217 	ldw	r7,8(sp)
    1e40:	980d883a 	mov	r6,r19
    1e44:	1009883a 	mov	r4,r2
    1e48:	180b883a 	mov	r5,r3
    1e4c:	0002f6c0 	call	2f6c <__adddf3>
    1e50:	d9800117 	ldw	r6,4(sp)
    1e54:	b80f883a 	mov	r7,r23
    1e58:	1009883a 	mov	r4,r2
    1e5c:	180b883a 	mov	r5,r3
    1e60:	0002f6c0 	call	2f6c <__adddf3>
    1e64:	d9800117 	ldw	r6,4(sp)
    1e68:	b80f883a 	mov	r7,r23
    1e6c:	0009883a 	mov	r4,zero
    1e70:	180b883a 	mov	r5,r3
    1e74:	1821883a 	mov	r16,r3
    1e78:	0004cac0 	call	4cac <__subdf3>
    1e7c:	d9c00217 	ldw	r7,8(sp)
    1e80:	980d883a 	mov	r6,r19
    1e84:	1009883a 	mov	r4,r2
    1e88:	180b883a 	mov	r5,r3
    1e8c:	0004cac0 	call	4cac <__subdf3>
    1e90:	d9800017 	ldw	r6,0(sp)
    1e94:	900f883a 	mov	r7,r18
    1e98:	1009883a 	mov	r4,r2
    1e9c:	180b883a 	mov	r5,r3
    1ea0:	0004cac0 	call	4cac <__subdf3>
    1ea4:	880b883a 	mov	r5,r17
    1ea8:	100d883a 	mov	r6,r2
    1eac:	180f883a 	mov	r7,r3
    1eb0:	a009883a 	mov	r4,r20
    1eb4:	0004cac0 	call	4cac <__subdf3>
    1eb8:	dac00b17 	ldw	r11,44(sp)
    1ebc:	aabfffc4 	addi	r10,r21,-1
    1ec0:	1025883a 	mov	r18,r2
    1ec4:	52d6b03a 	or	r11,r10,r11
    1ec8:	1823883a 	mov	r17,r3
    1ecc:	58015826 	beq	r11,zero,2430 <__ieee754_pow+0xe28>
    1ed0:	04cffc34 	movhi	r19,16368
    1ed4:	b009883a 	mov	r4,r22
    1ed8:	000d883a 	mov	r6,zero
    1edc:	e00f883a 	mov	r7,fp
    1ee0:	e00b883a 	mov	r5,fp
    1ee4:	0004cac0 	call	4cac <__subdf3>
    1ee8:	800f883a 	mov	r7,r16
    1eec:	000d883a 	mov	r6,zero
    1ef0:	1009883a 	mov	r4,r2
    1ef4:	180b883a 	mov	r5,r3
    1ef8:	00044400 	call	4440 <__muldf3>
    1efc:	b00d883a 	mov	r6,r22
    1f00:	9009883a 	mov	r4,r18
    1f04:	880b883a 	mov	r5,r17
    1f08:	e00f883a 	mov	r7,fp
    1f0c:	1829883a 	mov	r20,r3
    1f10:	102b883a 	mov	r21,r2
    1f14:	00044400 	call	4440 <__muldf3>
    1f18:	a00b883a 	mov	r5,r20
    1f1c:	100d883a 	mov	r6,r2
    1f20:	180f883a 	mov	r7,r3
    1f24:	a809883a 	mov	r4,r21
    1f28:	0002f6c0 	call	2f6c <__adddf3>
    1f2c:	800b883a 	mov	r5,r16
    1f30:	000d883a 	mov	r6,zero
    1f34:	e00f883a 	mov	r7,fp
    1f38:	0009883a 	mov	r4,zero
    1f3c:	102d883a 	mov	r22,r2
    1f40:	1829883a 	mov	r20,r3
    1f44:	00044400 	call	4440 <__muldf3>
    1f48:	100d883a 	mov	r6,r2
    1f4c:	180f883a 	mov	r7,r3
    1f50:	b009883a 	mov	r4,r22
    1f54:	a00b883a 	mov	r5,r20
    1f58:	1025883a 	mov	r18,r2
    1f5c:	1823883a 	mov	r17,r3
    1f60:	0002f6c0 	call	2f6c <__adddf3>
    1f64:	102f883a 	mov	r23,r2
    1f68:	00902434 	movhi	r2,16528
    1f6c:	10bfffc4 	addi	r2,r2,-1
    1f70:	1821883a 	mov	r16,r3
    1f74:	9013883a 	mov	r9,r18
    1f78:	8811883a 	mov	r8,r17
    1f7c:	10c1070e 	bge	r2,r3,239c <__ieee754_pow+0xd94>
    1f80:	00afdc34 	movhi	r2,49008
    1f84:	1885883a 	add	r2,r3,r2
    1f88:	15c4b03a 	or	r2,r2,r23
    1f8c:	1001901e 	bne	r2,zero,25d0 <__ieee754_pow+0xfc8>
    1f90:	01994b34 	movhi	r6,25900
    1f94:	01cf25f4 	movhi	r7,15511
    1f98:	31a0bf84 	addi	r6,r6,-32002
    1f9c:	39c551c4 	addi	r7,r7,5447
    1fa0:	b009883a 	mov	r4,r22
    1fa4:	a00b883a 	mov	r5,r20
    1fa8:	0002f6c0 	call	2f6c <__adddf3>
    1fac:	900d883a 	mov	r6,r18
    1fb0:	880f883a 	mov	r7,r17
    1fb4:	b809883a 	mov	r4,r23
    1fb8:	800b883a 	mov	r5,r16
    1fbc:	1039883a 	mov	fp,r2
    1fc0:	182b883a 	mov	r21,r3
    1fc4:	0004cac0 	call	4cac <__subdf3>
    1fc8:	100d883a 	mov	r6,r2
    1fcc:	180f883a 	mov	r7,r3
    1fd0:	e009883a 	mov	r4,fp
    1fd4:	a80b883a 	mov	r5,r21
    1fd8:	00042700 	call	4270 <__gedf2>
    1fdc:	00817c16 	blt	zero,r2,25d0 <__ieee754_pow+0xfc8>
    1fe0:	802b883a 	mov	r21,r16
    1fe4:	a805d53a 	srai	r2,r21,20
    1fe8:	00c00434 	movhi	r3,16
    1fec:	01000434 	movhi	r4,16
    1ff0:	10bf0084 	addi	r2,r2,-1022
    1ff4:	1885d83a 	sra	r2,r3,r2
    1ff8:	213fffc4 	addi	r4,r4,-1
    1ffc:	1405883a 	add	r2,r2,r16
    2000:	1006907a 	slli	r3,r2,1
    2004:	112a703a 	and	r21,r2,r4
    2008:	ad400434 	orhi	r21,r21,16
    200c:	1806d57a 	srli	r3,r3,21
    2010:	18ff0044 	addi	r3,r3,-1023
    2014:	20cfd83a 	sra	r7,r4,r3
    2018:	01000504 	movi	r4,20
    201c:	20c7c83a 	sub	r3,r4,r3
    2020:	a8c7d83a 	sra	r3,r21,r3
    2024:	01ce303a 	nor	r7,zero,r7
    2028:	388e703a 	and	r7,r7,r2
    202c:	d8c00015 	stw	r3,0(sp)
    2030:	80019016 	blt	r16,zero,2674 <__ieee754_pow+0x106c>
    2034:	000d883a 	mov	r6,zero
    2038:	9009883a 	mov	r4,r18
    203c:	880b883a 	mov	r5,r17
    2040:	0004cac0 	call	4cac <__subdf3>
    2044:	100d883a 	mov	r6,r2
    2048:	180f883a 	mov	r7,r3
    204c:	b009883a 	mov	r4,r22
    2050:	a00b883a 	mov	r5,r20
    2054:	d8c00a15 	stw	r3,40(sp)
    2058:	d8800815 	stw	r2,32(sp)
    205c:	0002f6c0 	call	2f6c <__adddf3>
    2060:	d8800017 	ldw	r2,0(sp)
    2064:	da000a17 	ldw	r8,40(sp)
    2068:	da400817 	ldw	r9,32(sp)
    206c:	1004953a 	slli	r2,r2,20
    2070:	1821883a 	mov	r16,r3
    2074:	d8800215 	stw	r2,8(sp)
    2078:	01cff9b4 	movhi	r7,16358
    207c:	800b883a 	mov	r5,r16
    2080:	39cb90c4 	addi	r7,r7,11843
    2084:	0009883a 	mov	r4,zero
    2088:	000d883a 	mov	r6,zero
    208c:	da000a15 	stw	r8,40(sp)
    2090:	da400815 	stw	r9,32(sp)
    2094:	00044400 	call	4440 <__muldf3>
    2098:	da400817 	ldw	r9,32(sp)
    209c:	da000a17 	ldw	r8,40(sp)
    20a0:	800b883a 	mov	r5,r16
    20a4:	480d883a 	mov	r6,r9
    20a8:	400f883a 	mov	r7,r8
    20ac:	0009883a 	mov	r4,zero
    20b0:	1039883a 	mov	fp,r2
    20b4:	182f883a 	mov	r23,r3
    20b8:	0004cac0 	call	4cac <__subdf3>
    20bc:	b009883a 	mov	r4,r22
    20c0:	a00b883a 	mov	r5,r20
    20c4:	100d883a 	mov	r6,r2
    20c8:	180f883a 	mov	r7,r3
    20cc:	0004cac0 	call	4cac <__subdf3>
    20d0:	01bfbeb4 	movhi	r6,65274
    20d4:	01cff9b4 	movhi	r7,16358
    20d8:	318e7bc4 	addi	r6,r6,14831
    20dc:	39cb9084 	addi	r7,r7,11842
    20e0:	1009883a 	mov	r4,r2
    20e4:	180b883a 	mov	r5,r3
    20e8:	00044400 	call	4440 <__muldf3>
    20ec:	01832a34 	movhi	r6,3240
    20f0:	01ef8834 	movhi	r7,48672
    20f4:	800b883a 	mov	r5,r16
    20f8:	319b0e44 	addi	r6,r6,27705
    20fc:	39d71844 	addi	r7,r7,23649
    2100:	0009883a 	mov	r4,zero
    2104:	1029883a 	mov	r20,r2
    2108:	1823883a 	mov	r17,r3
    210c:	00044400 	call	4440 <__muldf3>
    2110:	a009883a 	mov	r4,r20
    2114:	880b883a 	mov	r5,r17
    2118:	100d883a 	mov	r6,r2
    211c:	180f883a 	mov	r7,r3
    2120:	0002f6c0 	call	2f6c <__adddf3>
    2124:	e009883a 	mov	r4,fp
    2128:	b80b883a 	mov	r5,r23
    212c:	100d883a 	mov	r6,r2
    2130:	180f883a 	mov	r7,r3
    2134:	102d883a 	mov	r22,r2
    2138:	1829883a 	mov	r20,r3
    213c:	0002f6c0 	call	2f6c <__adddf3>
    2140:	e00d883a 	mov	r6,fp
    2144:	b80f883a 	mov	r7,r23
    2148:	1009883a 	mov	r4,r2
    214c:	180b883a 	mov	r5,r3
    2150:	1023883a 	mov	r17,r2
    2154:	1821883a 	mov	r16,r3
    2158:	0004cac0 	call	4cac <__subdf3>
    215c:	b009883a 	mov	r4,r22
    2160:	a00b883a 	mov	r5,r20
    2164:	100d883a 	mov	r6,r2
    2168:	180f883a 	mov	r7,r3
    216c:	0004cac0 	call	4cac <__subdf3>
    2170:	880d883a 	mov	r6,r17
    2174:	800f883a 	mov	r7,r16
    2178:	8809883a 	mov	r4,r17
    217c:	800b883a 	mov	r5,r16
    2180:	1039883a 	mov	fp,r2
    2184:	182f883a 	mov	r23,r3
    2188:	00044400 	call	4440 <__muldf3>
    218c:	019caff4 	movhi	r6,29375
    2190:	01cf99b4 	movhi	r7,15974
    2194:	31a93404 	addi	r6,r6,-23344
    2198:	39cdda44 	addi	r7,r7,14185
    219c:	1009883a 	mov	r4,r2
    21a0:	180b883a 	mov	r5,r3
    21a4:	102d883a 	mov	r22,r2
    21a8:	1829883a 	mov	r20,r3
    21ac:	00044400 	call	4440 <__muldf3>
    21b0:	01b174b4 	movhi	r6,50642
    21b4:	01cfaf34 	movhi	r7,16060
    21b8:	319afc44 	addi	r6,r6,27633
    21bc:	39ef5044 	addi	r7,r7,-17087
    21c0:	1009883a 	mov	r4,r2
    21c4:	180b883a 	mov	r5,r3
    21c8:	0004cac0 	call	4cac <__subdf3>
    21cc:	b00d883a 	mov	r6,r22
    21d0:	a00f883a 	mov	r7,r20
    21d4:	1009883a 	mov	r4,r2
    21d8:	180b883a 	mov	r5,r3
    21dc:	00044400 	call	4440 <__muldf3>
    21e0:	01abc9b4 	movhi	r6,44838
    21e4:	01cfc474 	movhi	r7,16145
    21e8:	31b78b04 	addi	r6,r6,-8660
    21ec:	39d59a84 	addi	r7,r7,22122
    21f0:	1009883a 	mov	r4,r2
    21f4:	180b883a 	mov	r5,r3
    21f8:	0002f6c0 	call	2f6c <__adddf3>
    21fc:	b00d883a 	mov	r6,r22
    2200:	a00f883a 	mov	r7,r20
    2204:	1009883a 	mov	r4,r2
    2208:	180b883a 	mov	r5,r3
    220c:	00044400 	call	4440 <__muldf3>
    2210:	0185aff4 	movhi	r6,5823
    2214:	01cfd9f4 	movhi	r7,16231
    2218:	31af64c4 	addi	r6,r6,-17005
    221c:	39f05b04 	addi	r7,r7,-16020
    2220:	1009883a 	mov	r4,r2
    2224:	180b883a 	mov	r5,r3
    2228:	0004cac0 	call	4cac <__subdf3>
    222c:	b00d883a 	mov	r6,r22
    2230:	a00f883a 	mov	r7,r20
    2234:	1009883a 	mov	r4,r2
    2238:	180b883a 	mov	r5,r3
    223c:	00044400 	call	4440 <__muldf3>
    2240:	01955574 	movhi	r6,21845
    2244:	01cff174 	movhi	r7,16325
    2248:	31954f84 	addi	r6,r6,21822
    224c:	39d55544 	addi	r7,r7,21845
    2250:	1009883a 	mov	r4,r2
    2254:	180b883a 	mov	r5,r3
    2258:	0002f6c0 	call	2f6c <__adddf3>
    225c:	b00d883a 	mov	r6,r22
    2260:	a00f883a 	mov	r7,r20
    2264:	1009883a 	mov	r4,r2
    2268:	180b883a 	mov	r5,r3
    226c:	00044400 	call	4440 <__muldf3>
    2270:	100d883a 	mov	r6,r2
    2274:	180f883a 	mov	r7,r3
    2278:	8809883a 	mov	r4,r17
    227c:	800b883a 	mov	r5,r16
    2280:	0004cac0 	call	4cac <__subdf3>
    2284:	100d883a 	mov	r6,r2
    2288:	180f883a 	mov	r7,r3
    228c:	8809883a 	mov	r4,r17
    2290:	800b883a 	mov	r5,r16
    2294:	102d883a 	mov	r22,r2
    2298:	1829883a 	mov	r20,r3
    229c:	00044400 	call	4440 <__muldf3>
    22a0:	b009883a 	mov	r4,r22
    22a4:	a00b883a 	mov	r5,r20
    22a8:	000d883a 	mov	r6,zero
    22ac:	01d00034 	movhi	r7,16384
    22b0:	1025883a 	mov	r18,r2
    22b4:	182b883a 	mov	r21,r3
    22b8:	0004cac0 	call	4cac <__subdf3>
    22bc:	100d883a 	mov	r6,r2
    22c0:	180f883a 	mov	r7,r3
    22c4:	9009883a 	mov	r4,r18
    22c8:	a80b883a 	mov	r5,r21
    22cc:	00038180 	call	3818 <__divdf3>
    22d0:	e00d883a 	mov	r6,fp
    22d4:	b80f883a 	mov	r7,r23
    22d8:	8809883a 	mov	r4,r17
    22dc:	800b883a 	mov	r5,r16
    22e0:	102d883a 	mov	r22,r2
    22e4:	1829883a 	mov	r20,r3
    22e8:	00044400 	call	4440 <__muldf3>
    22ec:	e00d883a 	mov	r6,fp
    22f0:	b80f883a 	mov	r7,r23
    22f4:	1009883a 	mov	r4,r2
    22f8:	180b883a 	mov	r5,r3
    22fc:	0002f6c0 	call	2f6c <__adddf3>
    2300:	100d883a 	mov	r6,r2
    2304:	180f883a 	mov	r7,r3
    2308:	b009883a 	mov	r4,r22
    230c:	a00b883a 	mov	r5,r20
    2310:	0004cac0 	call	4cac <__subdf3>
    2314:	880d883a 	mov	r6,r17
    2318:	800f883a 	mov	r7,r16
    231c:	1009883a 	mov	r4,r2
    2320:	180b883a 	mov	r5,r3
    2324:	0004cac0 	call	4cac <__subdf3>
    2328:	0009883a 	mov	r4,zero
    232c:	014ffc34 	movhi	r5,16368
    2330:	100d883a 	mov	r6,r2
    2334:	180f883a 	mov	r7,r3
    2338:	0004cac0 	call	4cac <__subdf3>
    233c:	d9000217 	ldw	r4,8(sp)
    2340:	190b883a 	add	r5,r3,r4
    2344:	2809d53a 	srai	r4,r5,20
    2348:	0100cd0e 	bge	zero,r4,2680 <__ieee754_pow+0x1078>
    234c:	1009883a 	mov	r4,r2
    2350:	000d883a 	mov	r6,zero
    2354:	980f883a 	mov	r7,r19
    2358:	00044400 	call	4440 <__muldf3>
    235c:	003ce606 	br	16f8 <__alt_data_end+0xfffd09b8>
    2360:	00b00434 	movhi	r2,49168
    2364:	8885883a 	add	r2,r17,r2
    2368:	1544b03a 	or	r2,r2,r21
    236c:	1000b326 	beq	r2,zero,263c <__ieee754_pow+0x1034>
    2370:	00800044 	movi	r2,1
    2374:	a8bd181e 	bne	r21,r2,17d8 <__alt_data_end+0xfffd0a98>
    2378:	18e0003c 	xorhi	r3,r3,32768
    237c:	b805883a 	mov	r2,r23
    2380:	003cdd06 	br	16f8 <__alt_data_end+0xfffd09b8>
    2384:	800d883a 	mov	r6,r16
    2388:	980f883a 	mov	r7,r19
    238c:	8009883a 	mov	r4,r16
    2390:	980b883a 	mov	r5,r19
    2394:	00044400 	call	4440 <__muldf3>
    2398:	003cd706 	br	16f8 <__alt_data_end+0xfffd09b8>
    239c:	05600034 	movhi	r21,32768
    23a0:	ad7fffc4 	addi	r21,r21,-1
    23a4:	00902474 	movhi	r2,16529
    23a8:	1d6a703a 	and	r21,r3,r21
    23ac:	10b2ffc4 	addi	r2,r2,-13313
    23b0:	15409d0e 	bge	r2,r21,2628 <__ieee754_pow+0x1020>
    23b4:	008fdbf4 	movhi	r2,16239
    23b8:	108d0004 	addi	r2,r2,13312
    23bc:	1885883a 	add	r2,r3,r2
    23c0:	15c4b03a 	or	r2,r2,r23
    23c4:	10000b1e 	bne	r2,zero,23f4 <__ieee754_pow+0xdec>
    23c8:	900d883a 	mov	r6,r18
    23cc:	880f883a 	mov	r7,r17
    23d0:	b809883a 	mov	r4,r23
    23d4:	180b883a 	mov	r5,r3
    23d8:	0004cac0 	call	4cac <__subdf3>
    23dc:	100d883a 	mov	r6,r2
    23e0:	180f883a 	mov	r7,r3
    23e4:	b009883a 	mov	r4,r22
    23e8:	a00b883a 	mov	r5,r20
    23ec:	000434c0 	call	434c <__ledf2>
    23f0:	00befc16 	blt	zero,r2,1fe4 <__alt_data_end+0xfffd12a4>
    23f4:	01b0be74 	movhi	r6,49913
    23f8:	01c06974 	movhi	r7,421
    23fc:	980b883a 	mov	r5,r19
    2400:	31bcd644 	addi	r6,r6,-3239
    2404:	39db87c4 	addi	r7,r7,28191
    2408:	0009883a 	mov	r4,zero
    240c:	00044400 	call	4440 <__muldf3>
    2410:	01b0be74 	movhi	r6,49913
    2414:	01c06974 	movhi	r7,421
    2418:	31bcd644 	addi	r6,r6,-3239
    241c:	39db87c4 	addi	r7,r7,28191
    2420:	1009883a 	mov	r4,r2
    2424:	180b883a 	mov	r5,r3
    2428:	00044400 	call	4440 <__muldf3>
    242c:	003cb206 	br	16f8 <__alt_data_end+0xfffd09b8>
    2430:	04effc34 	movhi	r19,49136
    2434:	003ea706 	br	1ed4 <__alt_data_end+0xfffd1194>
    2438:	e03cdc0e 	bge	fp,zero,17ac <__alt_data_end+0xfffd0a6c>
    243c:	0005883a 	mov	r2,zero
    2440:	e0e0003c 	xorhi	r3,fp,32768
    2444:	003cac06 	br	16f8 <__alt_data_end+0xfffd09b8>
    2448:	0019883a 	mov	r12,zero
    244c:	003d3206 	br	1918 <__alt_data_end+0xfffd0bd8>
    2450:	008ffc34 	movhi	r2,16368
    2454:	10bfff84 	addi	r2,r2,-2
    2458:	147cd30e 	bge	r2,r17,17a8 <__alt_data_end+0xfffd0a68>
    245c:	01cffc34 	movhi	r7,16368
    2460:	3c7cea16 	blt	r7,r17,180c <__alt_data_end+0xfffd0acc>
    2464:	b809883a 	mov	r4,r23
    2468:	000d883a 	mov	r6,zero
    246c:	180b883a 	mov	r5,r3
    2470:	dac00b15 	stw	r11,44(sp)
    2474:	0004cac0 	call	4cac <__subdf3>
    2478:	01cffdf4 	movhi	r7,16375
    247c:	39c551c4 	addi	r7,r7,5447
    2480:	01980034 	movhi	r6,24576
    2484:	1009883a 	mov	r4,r2
    2488:	180b883a 	mov	r5,r3
    248c:	1023883a 	mov	r17,r2
    2490:	1821883a 	mov	r16,r3
    2494:	00044400 	call	4440 <__muldf3>
    2498:	01be17b4 	movhi	r6,63582
    249c:	01cf9574 	movhi	r7,15957
    24a0:	8809883a 	mov	r4,r17
    24a4:	800b883a 	mov	r5,r16
    24a8:	31b7d104 	addi	r6,r6,-8380
    24ac:	39eb82c4 	addi	r7,r7,-20981
    24b0:	1027883a 	mov	r19,r2
    24b4:	1825883a 	mov	r18,r3
    24b8:	00044400 	call	4440 <__muldf3>
    24bc:	8809883a 	mov	r4,r17
    24c0:	800b883a 	mov	r5,r16
    24c4:	000d883a 	mov	r6,zero
    24c8:	01cff434 	movhi	r7,16336
    24cc:	1829883a 	mov	r20,r3
    24d0:	d8800a15 	stw	r2,40(sp)
    24d4:	00044400 	call	4440 <__muldf3>
    24d8:	01155574 	movhi	r4,21845
    24dc:	014ff574 	movhi	r5,16341
    24e0:	100d883a 	mov	r6,r2
    24e4:	180f883a 	mov	r7,r3
    24e8:	21155544 	addi	r4,r4,21845
    24ec:	29555544 	addi	r5,r5,21845
    24f0:	0004cac0 	call	4cac <__subdf3>
    24f4:	880d883a 	mov	r6,r17
    24f8:	800f883a 	mov	r7,r16
    24fc:	1009883a 	mov	r4,r2
    2500:	180b883a 	mov	r5,r3
    2504:	00044400 	call	4440 <__muldf3>
    2508:	100d883a 	mov	r6,r2
    250c:	180f883a 	mov	r7,r3
    2510:	0009883a 	mov	r4,zero
    2514:	014ff834 	movhi	r5,16352
    2518:	0004cac0 	call	4cac <__subdf3>
    251c:	880d883a 	mov	r6,r17
    2520:	800f883a 	mov	r7,r16
    2524:	8809883a 	mov	r4,r17
    2528:	800b883a 	mov	r5,r16
    252c:	102f883a 	mov	r23,r2
    2530:	d8c00815 	stw	r3,32(sp)
    2534:	00044400 	call	4440 <__muldf3>
    2538:	da400817 	ldw	r9,32(sp)
    253c:	100d883a 	mov	r6,r2
    2540:	180f883a 	mov	r7,r3
    2544:	480b883a 	mov	r5,r9
    2548:	b809883a 	mov	r4,r23
    254c:	00044400 	call	4440 <__muldf3>
    2550:	01994b34 	movhi	r6,25900
    2554:	01cffdf4 	movhi	r7,16375
    2558:	31a0bf84 	addi	r6,r6,-32002
    255c:	39c551c4 	addi	r7,r7,5447
    2560:	1009883a 	mov	r4,r2
    2564:	180b883a 	mov	r5,r3
    2568:	00044400 	call	4440 <__muldf3>
    256c:	da000a17 	ldw	r8,40(sp)
    2570:	a00b883a 	mov	r5,r20
    2574:	100d883a 	mov	r6,r2
    2578:	4009883a 	mov	r4,r8
    257c:	180f883a 	mov	r7,r3
    2580:	0004cac0 	call	4cac <__subdf3>
    2584:	100d883a 	mov	r6,r2
    2588:	180f883a 	mov	r7,r3
    258c:	9809883a 	mov	r4,r19
    2590:	900b883a 	mov	r5,r18
    2594:	1029883a 	mov	r20,r2
    2598:	1823883a 	mov	r17,r3
    259c:	0002f6c0 	call	2f6c <__adddf3>
    25a0:	1821883a 	mov	r16,r3
    25a4:	980d883a 	mov	r6,r19
    25a8:	900f883a 	mov	r7,r18
    25ac:	0009883a 	mov	r4,zero
    25b0:	180b883a 	mov	r5,r3
    25b4:	003e3a06 	br	1ea0 <__alt_data_end+0xfffd1160>
    25b8:	800d883a 	mov	r6,r16
    25bc:	980f883a 	mov	r7,r19
    25c0:	0009883a 	mov	r4,zero
    25c4:	900b883a 	mov	r5,r18
    25c8:	00038180 	call	3818 <__divdf3>
    25cc:	003c4a06 	br	16f8 <__alt_data_end+0xfffd09b8>
    25d0:	01a20034 	movhi	r6,34816
    25d4:	01df8e34 	movhi	r7,32312
    25d8:	980b883a 	mov	r5,r19
    25dc:	319d6704 	addi	r6,r6,30108
    25e0:	39f90f04 	addi	r7,r7,-7108
    25e4:	0009883a 	mov	r4,zero
    25e8:	00044400 	call	4440 <__muldf3>
    25ec:	01a20034 	movhi	r6,34816
    25f0:	01df8e34 	movhi	r7,32312
    25f4:	319d6704 	addi	r6,r6,30108
    25f8:	39f90f04 	addi	r7,r7,-7108
    25fc:	1009883a 	mov	r4,r2
    2600:	180b883a 	mov	r5,r3
    2604:	00044400 	call	4440 <__muldf3>
    2608:	003c3b06 	br	16f8 <__alt_data_end+0xfffd09b8>
    260c:	303c551e 	bne	r6,zero,1764 <__alt_data_end+0xfffd0a24>
    2610:	1885c83a 	sub	r2,r3,r2
    2614:	9087d83a 	sra	r3,r18,r2
    2618:	1884983a 	sll	r2,r3,r2
    261c:	90801f26 	beq	r18,r2,269c <__ieee754_pow+0x1094>
    2620:	002b883a 	mov	r21,zero
    2624:	003c1806 	br	1688 <__alt_data_end+0xfffd0948>
    2628:	008ff834 	movhi	r2,16352
    262c:	157e6d16 	blt	r2,r21,1fe4 <__alt_data_end+0xfffd12a4>
    2630:	d8000215 	stw	zero,8(sp)
    2634:	d8000015 	stw	zero,0(sp)
    2638:	003e8f06 	br	2078 <__alt_data_end+0xfffd1338>
    263c:	b80d883a 	mov	r6,r23
    2640:	180f883a 	mov	r7,r3
    2644:	003c9e06 	br	18c0 <__alt_data_end+0xfffd0b80>
    2648:	008ff8f4 	movhi	r2,16355
    264c:	10ae00c4 	addi	r2,r2,-18429
    2650:	0250f434 	movhi	r9,17360
    2654:	020f9374 	movhi	r8,15949
    2658:	d8800215 	stw	r2,8(sp)
    265c:	4a740184 	addi	r9,r9,-12282
    2660:	423f7ac4 	addi	r8,r8,-533
    2664:	04d00034 	movhi	r19,16384
    2668:	02800134 	movhi	r10,4
    266c:	048ffe34 	movhi	r18,16376
    2670:	003cbf06 	br	1970 <__alt_data_end+0xfffd0c30>
    2674:	00c9c83a 	sub	r4,zero,r3
    2678:	d9000015 	stw	r4,0(sp)
    267c:	003e6d06 	br	2034 <__alt_data_end+0xfffd12f4>
    2680:	d9800017 	ldw	r6,0(sp)
    2684:	1009883a 	mov	r4,r2
    2688:	180b883a 	mov	r5,r3
    268c:	0002bd80 	call	2bd8 <scalbn>
    2690:	1009883a 	mov	r4,r2
    2694:	180b883a 	mov	r5,r3
    2698:	003f2d06 	br	2350 <__alt_data_end+0xfffd1610>
    269c:	18c0004c 	andi	r3,r3,1
    26a0:	02800084 	movi	r10,2
    26a4:	50ebc83a 	sub	r21,r10,r3
    26a8:	003bf706 	br	1688 <__alt_data_end+0xfffd0948>

000026ac <__ieee754_sqrt>:
    26ac:	defffd04 	addi	sp,sp,-12
    26b0:	dc400115 	stw	r17,4(sp)
    26b4:	dc000015 	stw	r16,0(sp)
    26b8:	dfc00215 	stw	ra,8(sp)
    26bc:	28dffc2c 	andhi	r3,r5,32752
    26c0:	009ffc34 	movhi	r2,32752
    26c4:	2821883a 	mov	r16,r5
    26c8:	2023883a 	mov	r17,r4
    26cc:	200d883a 	mov	r6,r4
    26d0:	18807b26 	beq	r3,r2,28c0 <__ieee754_sqrt+0x214>
    26d4:	01405f0e 	bge	zero,r5,2854 <__ieee754_sqrt+0x1a8>
    26d8:	2815d53a 	srai	r10,r5,20
    26dc:	50006a26 	beq	r10,zero,2888 <__ieee754_sqrt+0x1dc>
    26e0:	00c00434 	movhi	r3,16
    26e4:	52bf0044 	addi	r10,r10,-1023
    26e8:	18ffffc4 	addi	r3,r3,-1
    26ec:	80c6703a 	and	r3,r16,r3
    26f0:	5080004c 	andi	r2,r10,1
    26f4:	18c00434 	orhi	r3,r3,16
    26f8:	1000511e 	bne	r2,zero,2840 <__ieee754_sqrt+0x194>
    26fc:	3004d7fa 	srli	r2,r6,31
    2700:	5015d07a 	srai	r10,r10,1
    2704:	18c7883a 	add	r3,r3,r3
    2708:	10c5883a 	add	r2,r2,r3
    270c:	01400584 	movi	r5,22
    2710:	3187883a 	add	r3,r6,r6
    2714:	0013883a 	mov	r9,zero
    2718:	000f883a 	mov	r7,zero
    271c:	01000834 	movhi	r4,32
    2720:	390d883a 	add	r6,r7,r4
    2724:	1810d7fa 	srli	r8,r3,31
    2728:	297fffc4 	addi	r5,r5,-1
    272c:	11800316 	blt	r2,r6,273c <__ieee754_sqrt+0x90>
    2730:	1185c83a 	sub	r2,r2,r6
    2734:	310f883a 	add	r7,r6,r4
    2738:	4913883a 	add	r9,r9,r4
    273c:	1085883a 	add	r2,r2,r2
    2740:	4085883a 	add	r2,r8,r2
    2744:	18c7883a 	add	r3,r3,r3
    2748:	2008d07a 	srli	r4,r4,1
    274c:	283ff41e 	bne	r5,zero,2720 <__alt_data_end+0xfffd19e0>
    2750:	01200034 	movhi	r4,32768
    2754:	01800804 	movi	r6,32
    2758:	0011883a 	mov	r8,zero
    275c:	0019883a 	mov	r12,zero
    2760:	201b883a 	mov	r13,r4
    2764:	00000806 	br	2788 <__ieee754_sqrt+0xdc>
    2768:	38801726 	beq	r7,r2,27c8 <__ieee754_sqrt+0x11c>
    276c:	180ad7fa 	srli	r5,r3,31
    2770:	1085883a 	add	r2,r2,r2
    2774:	31bfffc4 	addi	r6,r6,-1
    2778:	2885883a 	add	r2,r5,r2
    277c:	18c7883a 	add	r3,r3,r3
    2780:	2008d07a 	srli	r4,r4,1
    2784:	30001726 	beq	r6,zero,27e4 <__ieee754_sqrt+0x138>
    2788:	230b883a 	add	r5,r4,r12
    278c:	38bff60e 	bge	r7,r2,2768 <__alt_data_end+0xfffd1a28>
    2790:	2ae0002c 	andhi	r11,r5,32768
    2794:	2919883a 	add	r12,r5,r4
    2798:	5b400826 	beq	r11,r13,27bc <__ieee754_sqrt+0x110>
    279c:	3817883a 	mov	r11,r7
    27a0:	11c5c83a 	sub	r2,r2,r7
    27a4:	1940012e 	bgeu	r3,r5,27ac <__ieee754_sqrt+0x100>
    27a8:	10bfffc4 	addi	r2,r2,-1
    27ac:	1947c83a 	sub	r3,r3,r5
    27b0:	4111883a 	add	r8,r8,r4
    27b4:	580f883a 	mov	r7,r11
    27b8:	003fec06 	br	276c <__alt_data_end+0xfffd1a2c>
    27bc:	603ff716 	blt	r12,zero,279c <__alt_data_end+0xfffd1a5c>
    27c0:	3ac00044 	addi	r11,r7,1
    27c4:	003ff606 	br	27a0 <__alt_data_end+0xfffd1a60>
    27c8:	19401936 	bltu	r3,r5,2830 <__ieee754_sqrt+0x184>
    27cc:	2ae0002c 	andhi	r11,r5,32768
    27d0:	2919883a 	add	r12,r5,r4
    27d4:	5b404526 	beq	r11,r13,28ec <__ieee754_sqrt+0x240>
    27d8:	1017883a 	mov	r11,r2
    27dc:	0005883a 	mov	r2,zero
    27e0:	003ff206 	br	27ac <__alt_data_end+0xfffd1a6c>
    27e4:	10c4b03a 	or	r2,r2,r3
    27e8:	10000426 	beq	r2,zero,27fc <__ieee754_sqrt+0x150>
    27ec:	00bfffc4 	movi	r2,-1
    27f0:	40804026 	beq	r8,r2,28f4 <__ieee754_sqrt+0x248>
    27f4:	4080004c 	andi	r2,r8,1
    27f8:	4091883a 	add	r8,r8,r2
    27fc:	4004d07a 	srli	r2,r8,1
    2800:	4807d07a 	srai	r3,r9,1
    2804:	010ff834 	movhi	r4,16352
    2808:	4a40004c 	andi	r9,r9,1
    280c:	1909883a 	add	r4,r3,r4
    2810:	4800091e 	bne	r9,zero,2838 <__ieee754_sqrt+0x18c>
    2814:	5006953a 	slli	r3,r10,20
    2818:	1907883a 	add	r3,r3,r4
    281c:	dfc00217 	ldw	ra,8(sp)
    2820:	dc400117 	ldw	r17,4(sp)
    2824:	dc000017 	ldw	r16,0(sp)
    2828:	dec00304 	addi	sp,sp,12
    282c:	f800283a 	ret
    2830:	3805883a 	mov	r2,r7
    2834:	003fcd06 	br	276c <__alt_data_end+0xfffd1a2c>
    2838:	10a00034 	orhi	r2,r2,32768
    283c:	003ff506 	br	2814 <__alt_data_end+0xfffd1ad4>
    2840:	3004d7fa 	srli	r2,r6,31
    2844:	18c7883a 	add	r3,r3,r3
    2848:	318d883a 	add	r6,r6,r6
    284c:	10c7883a 	add	r3,r2,r3
    2850:	003faa06 	br	26fc <__alt_data_end+0xfffd19bc>
    2854:	00a00034 	movhi	r2,32768
    2858:	10bfffc4 	addi	r2,r2,-1
    285c:	2884703a 	and	r2,r5,r2
    2860:	1104b03a 	or	r2,r2,r4
    2864:	10001e26 	beq	r2,zero,28e0 <__ieee754_sqrt+0x234>
    2868:	2800291e 	bne	r5,zero,2910 <__ieee754_sqrt+0x264>
    286c:	0015883a 	mov	r10,zero
    2870:	3020d2fa 	srli	r16,r6,11
    2874:	52bffac4 	addi	r10,r10,-21
    2878:	300c957a 	slli	r6,r6,21
    287c:	803ffc26 	beq	r16,zero,2870 <__alt_data_end+0xfffd1b30>
    2880:	8080042c 	andhi	r2,r16,16
    2884:	10001e1e 	bne	r2,zero,2900 <__ieee754_sqrt+0x254>
    2888:	0005883a 	mov	r2,zero
    288c:	00000106 	br	2894 <__ieee754_sqrt+0x1e8>
    2890:	1805883a 	mov	r2,r3
    2894:	8421883a 	add	r16,r16,r16
    2898:	8100042c 	andhi	r4,r16,16
    289c:	10c00044 	addi	r3,r2,1
    28a0:	203ffb26 	beq	r4,zero,2890 <__alt_data_end+0xfffd1b50>
    28a4:	01000804 	movi	r4,32
    28a8:	20c9c83a 	sub	r4,r4,r3
    28ac:	3108d83a 	srl	r4,r6,r4
    28b0:	5095c83a 	sub	r10,r10,r2
    28b4:	30cc983a 	sll	r6,r6,r3
    28b8:	2420b03a 	or	r16,r4,r16
    28bc:	003f8806 	br	26e0 <__alt_data_end+0xfffd19a0>
    28c0:	280f883a 	mov	r7,r5
    28c4:	00044400 	call	4440 <__muldf3>
    28c8:	880d883a 	mov	r6,r17
    28cc:	800f883a 	mov	r7,r16
    28d0:	1009883a 	mov	r4,r2
    28d4:	180b883a 	mov	r5,r3
    28d8:	0002f6c0 	call	2f6c <__adddf3>
    28dc:	003fcf06 	br	281c <__alt_data_end+0xfffd1adc>
    28e0:	2005883a 	mov	r2,r4
    28e4:	2807883a 	mov	r3,r5
    28e8:	003fcc06 	br	281c <__alt_data_end+0xfffd1adc>
    28ec:	603fba16 	blt	r12,zero,27d8 <__alt_data_end+0xfffd1a98>
    28f0:	003fb306 	br	27c0 <__alt_data_end+0xfffd1a80>
    28f4:	4a400044 	addi	r9,r9,1
    28f8:	0005883a 	mov	r2,zero
    28fc:	003fc006 	br	2800 <__alt_data_end+0xfffd1ac0>
    2900:	01000804 	movi	r4,32
    2904:	00bfffc4 	movi	r2,-1
    2908:	0007883a 	mov	r3,zero
    290c:	003fe706 	br	28ac <__alt_data_end+0xfffd1b6c>
    2910:	200d883a 	mov	r6,r4
    2914:	280f883a 	mov	r7,r5
    2918:	0004cac0 	call	4cac <__subdf3>
    291c:	100d883a 	mov	r6,r2
    2920:	180f883a 	mov	r7,r3
    2924:	1009883a 	mov	r4,r2
    2928:	180b883a 	mov	r5,r3
    292c:	00038180 	call	3818 <__divdf3>
    2930:	003fba06 	br	281c <__alt_data_end+0xfffd1adc>

00002934 <fabs>:
    2934:	00e00034 	movhi	r3,32768
    2938:	18ffffc4 	addi	r3,r3,-1
    293c:	2005883a 	mov	r2,r4
    2940:	28c6703a 	and	r3,r5,r3
    2944:	f800283a 	ret

00002948 <finite>:
    2948:	00a00034 	movhi	r2,32768
    294c:	10bfffc4 	addi	r2,r2,-1
    2950:	288a703a 	and	r5,r5,r2
    2954:	00e00434 	movhi	r3,32784
    2958:	28c5883a 	add	r2,r5,r3
    295c:	1004d7fa 	srli	r2,r2,31
    2960:	f800283a 	ret

00002964 <__fpclassifyd>:
    2964:	00a00034 	movhi	r2,32768
    2968:	10bfffc4 	addi	r2,r2,-1
    296c:	2884703a 	and	r2,r5,r2
    2970:	10000726 	beq	r2,zero,2990 <__fpclassifyd+0x2c>
    2974:	00fffc34 	movhi	r3,65520
    2978:	019ff834 	movhi	r6,32736
    297c:	28c7883a 	add	r3,r5,r3
    2980:	31bfffc4 	addi	r6,r6,-1
    2984:	30c00536 	bltu	r6,r3,299c <__fpclassifyd+0x38>
    2988:	00800104 	movi	r2,4
    298c:	f800283a 	ret
    2990:	2000021e 	bne	r4,zero,299c <__fpclassifyd+0x38>
    2994:	00800084 	movi	r2,2
    2998:	f800283a 	ret
    299c:	00dffc34 	movhi	r3,32752
    29a0:	019ff834 	movhi	r6,32736
    29a4:	28cb883a 	add	r5,r5,r3
    29a8:	31bfffc4 	addi	r6,r6,-1
    29ac:	317ff62e 	bgeu	r6,r5,2988 <__alt_data_end+0xfffd1c48>
    29b0:	01400434 	movhi	r5,16
    29b4:	297fffc4 	addi	r5,r5,-1
    29b8:	28800236 	bltu	r5,r2,29c4 <__fpclassifyd+0x60>
    29bc:	008000c4 	movi	r2,3
    29c0:	f800283a 	ret
    29c4:	10c00226 	beq	r2,r3,29d0 <__fpclassifyd+0x6c>
    29c8:	0005883a 	mov	r2,zero
    29cc:	f800283a 	ret
    29d0:	2005003a 	cmpeq	r2,r4,zero
    29d4:	f800283a 	ret

000029d8 <matherr>:
    29d8:	0005883a 	mov	r2,zero
    29dc:	f800283a 	ret

000029e0 <nan>:
    29e0:	0005883a 	mov	r2,zero
    29e4:	00dffe34 	movhi	r3,32760
    29e8:	f800283a 	ret

000029ec <rint>:
    29ec:	2813d53a 	srai	r9,r5,20
    29f0:	defff904 	addi	sp,sp,-28
    29f4:	dc000215 	stw	r16,8(sp)
    29f8:	4a41ffcc 	andi	r9,r9,2047
    29fc:	dfc00615 	stw	ra,24(sp)
    2a00:	dcc00515 	stw	r19,20(sp)
    2a04:	dc800415 	stw	r18,16(sp)
    2a08:	dc400315 	stw	r17,12(sp)
    2a0c:	01c004c4 	movi	r7,19
    2a10:	49bf0044 	addi	r6,r9,-1023
    2a14:	2811883a 	mov	r8,r5
    2a18:	2005883a 	mov	r2,r4
    2a1c:	2807883a 	mov	r3,r5
    2a20:	2015883a 	mov	r10,r4
    2a24:	2820d7fa 	srli	r16,r5,31
    2a28:	39801316 	blt	r7,r6,2a78 <rint+0x8c>
    2a2c:	30003d16 	blt	r6,zero,2b24 <rint+0x138>
    2a30:	01000434 	movhi	r4,16
    2a34:	213fffc4 	addi	r4,r4,-1
    2a38:	2189d83a 	sra	r4,r4,r6
    2a3c:	290a703a 	and	r5,r5,r4
    2a40:	288ab03a 	or	r5,r5,r2
    2a44:	28001026 	beq	r5,zero,2a88 <rint+0x9c>
    2a48:	2008d07a 	srli	r4,r4,1
    2a4c:	4104703a 	and	r2,r8,r4
    2a50:	1294b03a 	or	r10,r2,r10
    2a54:	50005626 	beq	r10,zero,2bb0 <rint+0x1c4>
    2a58:	31c05d26 	beq	r6,r7,2bd0 <rint+0x1e4>
    2a5c:	0015883a 	mov	r10,zero
    2a60:	00c00134 	movhi	r3,4
    2a64:	1987d83a 	sra	r3,r3,r6
    2a68:	0108303a 	nor	r4,zero,r4
    2a6c:	2210703a 	and	r8,r4,r8
    2a70:	40c6b03a 	or	r3,r8,r3
    2a74:	00001806 	br	2ad8 <rint+0xec>
    2a78:	01c00cc4 	movi	r7,51
    2a7c:	3980090e 	bge	r7,r6,2aa4 <rint+0xb8>
    2a80:	01c10004 	movi	r7,1024
    2a84:	31c04e26 	beq	r6,r7,2bc0 <rint+0x1d4>
    2a88:	dfc00617 	ldw	ra,24(sp)
    2a8c:	dcc00517 	ldw	r19,20(sp)
    2a90:	dc800417 	ldw	r18,16(sp)
    2a94:	dc400317 	ldw	r17,12(sp)
    2a98:	dc000217 	ldw	r16,8(sp)
    2a9c:	dec00704 	addi	sp,sp,28
    2aa0:	f800283a 	ret
    2aa4:	4a7efb44 	addi	r9,r9,-1043
    2aa8:	013fffc4 	movi	r4,-1
    2aac:	2248d83a 	srl	r4,r4,r9
    2ab0:	110a703a 	and	r5,r2,r4
    2ab4:	28004026 	beq	r5,zero,2bb8 <rint+0x1cc>
    2ab8:	2008d07a 	srli	r4,r4,1
    2abc:	1104703a 	and	r2,r2,r4
    2ac0:	10000526 	beq	r2,zero,2ad8 <rint+0xec>
    2ac4:	00900034 	movhi	r2,16384
    2ac8:	1253d83a 	sra	r9,r2,r9
    2acc:	0108303a 	nor	r4,zero,r4
    2ad0:	2294703a 	and	r10,r4,r10
    2ad4:	4a94b03a 	or	r10,r9,r10
    2ad8:	802090fa 	slli	r16,r16,3
    2adc:	180b883a 	mov	r5,r3
    2ae0:	00c000b4 	movhi	r3,2
    2ae4:	18f64004 	addi	r3,r3,-9984
    2ae8:	1c21883a 	add	r16,r3,r16
    2aec:	84400017 	ldw	r17,0(r16)
    2af0:	84000117 	ldw	r16,4(r16)
    2af4:	5009883a 	mov	r4,r10
    2af8:	880d883a 	mov	r6,r17
    2afc:	800f883a 	mov	r7,r16
    2b00:	0002f6c0 	call	2f6c <__adddf3>
    2b04:	d8800015 	stw	r2,0(sp)
    2b08:	d8c00115 	stw	r3,4(sp)
    2b0c:	d9000017 	ldw	r4,0(sp)
    2b10:	d9400117 	ldw	r5,4(sp)
    2b14:	880d883a 	mov	r6,r17
    2b18:	800f883a 	mov	r7,r16
    2b1c:	0004cac0 	call	4cac <__subdf3>
    2b20:	003fd906 	br	2a88 <__alt_data_end+0xfffd1d48>
    2b24:	04600034 	movhi	r17,32768
    2b28:	8c7fffc4 	addi	r17,r17,-1
    2b2c:	2c46703a 	and	r3,r5,r17
    2b30:	1906b03a 	or	r3,r3,r4
    2b34:	18002026 	beq	r3,zero,2bb8 <rint+0x1cc>
    2b38:	01800434 	movhi	r6,16
    2b3c:	31bfffc4 	addi	r6,r6,-1
    2b40:	298c703a 	and	r6,r5,r6
    2b44:	3104b03a 	or	r2,r6,r4
    2b48:	008bc83a 	sub	r5,zero,r2
    2b4c:	800690fa 	slli	r3,r16,3
    2b50:	2884b03a 	or	r2,r5,r2
    2b54:	014000b4 	movhi	r5,2
    2b58:	29764004 	addi	r5,r5,-9984
    2b5c:	28c7883a 	add	r3,r5,r3
    2b60:	1004d33a 	srli	r2,r2,12
    2b64:	1cc00017 	ldw	r19,0(r3)
    2b68:	1c800117 	ldw	r18,4(r3)
    2b6c:	417fffac 	andhi	r5,r8,65534
    2b70:	1080022c 	andhi	r2,r2,8
    2b74:	980d883a 	mov	r6,r19
    2b78:	900f883a 	mov	r7,r18
    2b7c:	114ab03a 	or	r5,r2,r5
    2b80:	0002f6c0 	call	2f6c <__adddf3>
    2b84:	d8800015 	stw	r2,0(sp)
    2b88:	d8c00115 	stw	r3,4(sp)
    2b8c:	d9000017 	ldw	r4,0(sp)
    2b90:	d9400117 	ldw	r5,4(sp)
    2b94:	980d883a 	mov	r6,r19
    2b98:	900f883a 	mov	r7,r18
    2b9c:	0004cac0 	call	4cac <__subdf3>
    2ba0:	800897fa 	slli	r4,r16,31
    2ba4:	1c46703a 	and	r3,r3,r17
    2ba8:	1906b03a 	or	r3,r3,r4
    2bac:	003fb606 	br	2a88 <__alt_data_end+0xfffd1d48>
    2bb0:	0015883a 	mov	r10,zero
    2bb4:	003fc806 	br	2ad8 <__alt_data_end+0xfffd1d98>
    2bb8:	4007883a 	mov	r3,r8
    2bbc:	003fb206 	br	2a88 <__alt_data_end+0xfffd1d48>
    2bc0:	200d883a 	mov	r6,r4
    2bc4:	280f883a 	mov	r7,r5
    2bc8:	0002f6c0 	call	2f6c <__adddf3>
    2bcc:	003fae06 	br	2a88 <__alt_data_end+0xfffd1d48>
    2bd0:	02a00034 	movhi	r10,32768
    2bd4:	003fa206 	br	2a60 <__alt_data_end+0xfffd1d20>

00002bd8 <scalbn>:
    2bd8:	2a1ffc2c 	andhi	r8,r5,32752
    2bdc:	4011d53a 	srai	r8,r8,20
    2be0:	defffe04 	addi	sp,sp,-8
    2be4:	dc000015 	stw	r16,0(sp)
    2be8:	dfc00115 	stw	ra,4(sp)
    2bec:	280f883a 	mov	r7,r5
    2bf0:	2015883a 	mov	r10,r4
    2bf4:	3021883a 	mov	r16,r6
    2bf8:	40001e1e 	bne	r8,zero,2c74 <scalbn+0x9c>
    2bfc:	00a00034 	movhi	r2,32768
    2c00:	10bfffc4 	addi	r2,r2,-1
    2c04:	2884703a 	and	r2,r5,r2
    2c08:	1104b03a 	or	r2,r2,r4
    2c0c:	10002226 	beq	r2,zero,2c98 <scalbn+0xc0>
    2c10:	01d0d434 	movhi	r7,17232
    2c14:	000d883a 	mov	r6,zero
    2c18:	00044400 	call	4440 <__muldf3>
    2c1c:	013ffff4 	movhi	r4,65535
    2c20:	210f2c04 	addi	r4,r4,15536
    2c24:	1015883a 	mov	r10,r2
    2c28:	180f883a 	mov	r7,r3
    2c2c:	81002a16 	blt	r16,r4,2cd8 <scalbn+0x100>
    2c30:	191ffc2c 	andhi	r4,r3,32752
    2c34:	2009d53a 	srai	r4,r4,20
    2c38:	223ff284 	addi	r8,r4,-54
    2c3c:	8211883a 	add	r8,r16,r8
    2c40:	0081ff84 	movi	r2,2046
    2c44:	12002f16 	blt	r2,r8,2d04 <scalbn+0x12c>
    2c48:	0200190e 	bge	zero,r8,2cb0 <scalbn+0xd8>
    2c4c:	4010953a 	slli	r8,r8,20
    2c50:	01600434 	movhi	r5,32784
    2c54:	297fffc4 	addi	r5,r5,-1
    2c58:	194e703a 	and	r7,r3,r5
    2c5c:	5005883a 	mov	r2,r10
    2c60:	3a06b03a 	or	r3,r7,r8
    2c64:	dfc00117 	ldw	ra,4(sp)
    2c68:	dc000017 	ldw	r16,0(sp)
    2c6c:	dec00204 	addi	sp,sp,8
    2c70:	f800283a 	ret
    2c74:	0081ffc4 	movi	r2,2047
    2c78:	2807883a 	mov	r3,r5
    2c7c:	40bfef1e 	bne	r8,r2,2c3c <__alt_data_end+0xfffd1efc>
    2c80:	200d883a 	mov	r6,r4
    2c84:	0002f6c0 	call	2f6c <__adddf3>
    2c88:	dfc00117 	ldw	ra,4(sp)
    2c8c:	dc000017 	ldw	r16,0(sp)
    2c90:	dec00204 	addi	sp,sp,8
    2c94:	f800283a 	ret
    2c98:	2005883a 	mov	r2,r4
    2c9c:	2807883a 	mov	r3,r5
    2ca0:	dfc00117 	ldw	ra,4(sp)
    2ca4:	dc000017 	ldw	r16,0(sp)
    2ca8:	dec00204 	addi	sp,sp,8
    2cac:	f800283a 	ret
    2cb0:	00bff2c4 	movi	r2,-53
    2cb4:	4080240e 	bge	r8,r2,2d48 <scalbn+0x170>
    2cb8:	00b0d414 	movui	r2,50000
    2cbc:	14001116 	blt	r2,r16,2d04 <scalbn+0x12c>
    2cc0:	0130be74 	movhi	r4,49913
    2cc4:	01406974 	movhi	r5,421
    2cc8:	213cd644 	addi	r4,r4,-3239
    2ccc:	295b87c4 	addi	r5,r5,28191
    2cd0:	500d883a 	mov	r6,r10
    2cd4:	0002d740 	call	2d74 <copysign>
    2cd8:	01b0be74 	movhi	r6,49913
    2cdc:	01c06974 	movhi	r7,421
    2ce0:	31bcd644 	addi	r6,r6,-3239
    2ce4:	39db87c4 	addi	r7,r7,28191
    2ce8:	1009883a 	mov	r4,r2
    2cec:	180b883a 	mov	r5,r3
    2cf0:	00044400 	call	4440 <__muldf3>
    2cf4:	dfc00117 	ldw	ra,4(sp)
    2cf8:	dc000017 	ldw	r16,0(sp)
    2cfc:	dec00204 	addi	sp,sp,8
    2d00:	f800283a 	ret
    2d04:	01220034 	movhi	r4,34816
    2d08:	015f8e34 	movhi	r5,32312
    2d0c:	500d883a 	mov	r6,r10
    2d10:	211d6704 	addi	r4,r4,30108
    2d14:	29790f04 	addi	r5,r5,-7108
    2d18:	0002d740 	call	2d74 <copysign>
    2d1c:	01a20034 	movhi	r6,34816
    2d20:	01df8e34 	movhi	r7,32312
    2d24:	319d6704 	addi	r6,r6,30108
    2d28:	39f90f04 	addi	r7,r7,-7108
    2d2c:	1009883a 	mov	r4,r2
    2d30:	180b883a 	mov	r5,r3
    2d34:	00044400 	call	4440 <__muldf3>
    2d38:	dfc00117 	ldw	ra,4(sp)
    2d3c:	dc000017 	ldw	r16,0(sp)
    2d40:	dec00204 	addi	sp,sp,8
    2d44:	f800283a 	ret
    2d48:	42000d84 	addi	r8,r8,54
    2d4c:	4012953a 	slli	r9,r8,20
    2d50:	01e00434 	movhi	r7,32784
    2d54:	39ffffc4 	addi	r7,r7,-1
    2d58:	19ca703a 	and	r5,r3,r7
    2d5c:	000d883a 	mov	r6,zero
    2d60:	01cf2434 	movhi	r7,15504
    2d64:	5009883a 	mov	r4,r10
    2d68:	494ab03a 	or	r5,r9,r5
    2d6c:	00044400 	call	4440 <__muldf3>
    2d70:	003fbc06 	br	2c64 <__alt_data_end+0xfffd1f24>

00002d74 <copysign>:
    2d74:	2005883a 	mov	r2,r4
    2d78:	01200034 	movhi	r4,32768
    2d7c:	213fffc4 	addi	r4,r4,-1
    2d80:	38e0002c 	andhi	r3,r7,32768
    2d84:	290a703a 	and	r5,r5,r4
    2d88:	28c6b03a 	or	r3,r5,r3
    2d8c:	f800283a 	ret

00002d90 <__divsi3>:
    2d90:	20001b16 	blt	r4,zero,2e00 <__divsi3+0x70>
    2d94:	000f883a 	mov	r7,zero
    2d98:	28001616 	blt	r5,zero,2df4 <__divsi3+0x64>
    2d9c:	200d883a 	mov	r6,r4
    2da0:	29001a2e 	bgeu	r5,r4,2e0c <__divsi3+0x7c>
    2da4:	00800804 	movi	r2,32
    2da8:	00c00044 	movi	r3,1
    2dac:	00000106 	br	2db4 <__divsi3+0x24>
    2db0:	10000d26 	beq	r2,zero,2de8 <__divsi3+0x58>
    2db4:	294b883a 	add	r5,r5,r5
    2db8:	10bfffc4 	addi	r2,r2,-1
    2dbc:	18c7883a 	add	r3,r3,r3
    2dc0:	293ffb36 	bltu	r5,r4,2db0 <__alt_data_end+0xfffd2070>
    2dc4:	0005883a 	mov	r2,zero
    2dc8:	18000726 	beq	r3,zero,2de8 <__divsi3+0x58>
    2dcc:	0005883a 	mov	r2,zero
    2dd0:	31400236 	bltu	r6,r5,2ddc <__divsi3+0x4c>
    2dd4:	314dc83a 	sub	r6,r6,r5
    2dd8:	10c4b03a 	or	r2,r2,r3
    2ddc:	1806d07a 	srli	r3,r3,1
    2de0:	280ad07a 	srli	r5,r5,1
    2de4:	183ffa1e 	bne	r3,zero,2dd0 <__alt_data_end+0xfffd2090>
    2de8:	38000126 	beq	r7,zero,2df0 <__divsi3+0x60>
    2dec:	0085c83a 	sub	r2,zero,r2
    2df0:	f800283a 	ret
    2df4:	014bc83a 	sub	r5,zero,r5
    2df8:	39c0005c 	xori	r7,r7,1
    2dfc:	003fe706 	br	2d9c <__alt_data_end+0xfffd205c>
    2e00:	0109c83a 	sub	r4,zero,r4
    2e04:	01c00044 	movi	r7,1
    2e08:	003fe306 	br	2d98 <__alt_data_end+0xfffd2058>
    2e0c:	00c00044 	movi	r3,1
    2e10:	003fee06 	br	2dcc <__alt_data_end+0xfffd208c>

00002e14 <__modsi3>:
    2e14:	20001716 	blt	r4,zero,2e74 <__modsi3+0x60>
    2e18:	000f883a 	mov	r7,zero
    2e1c:	2005883a 	mov	r2,r4
    2e20:	28001216 	blt	r5,zero,2e6c <__modsi3+0x58>
    2e24:	2900162e 	bgeu	r5,r4,2e80 <__modsi3+0x6c>
    2e28:	01800804 	movi	r6,32
    2e2c:	00c00044 	movi	r3,1
    2e30:	00000106 	br	2e38 <__modsi3+0x24>
    2e34:	30000a26 	beq	r6,zero,2e60 <__modsi3+0x4c>
    2e38:	294b883a 	add	r5,r5,r5
    2e3c:	31bfffc4 	addi	r6,r6,-1
    2e40:	18c7883a 	add	r3,r3,r3
    2e44:	293ffb36 	bltu	r5,r4,2e34 <__alt_data_end+0xfffd20f4>
    2e48:	18000526 	beq	r3,zero,2e60 <__modsi3+0x4c>
    2e4c:	1806d07a 	srli	r3,r3,1
    2e50:	11400136 	bltu	r2,r5,2e58 <__modsi3+0x44>
    2e54:	1145c83a 	sub	r2,r2,r5
    2e58:	280ad07a 	srli	r5,r5,1
    2e5c:	183ffb1e 	bne	r3,zero,2e4c <__alt_data_end+0xfffd210c>
    2e60:	38000126 	beq	r7,zero,2e68 <__modsi3+0x54>
    2e64:	0085c83a 	sub	r2,zero,r2
    2e68:	f800283a 	ret
    2e6c:	014bc83a 	sub	r5,zero,r5
    2e70:	003fec06 	br	2e24 <__alt_data_end+0xfffd20e4>
    2e74:	0109c83a 	sub	r4,zero,r4
    2e78:	01c00044 	movi	r7,1
    2e7c:	003fe706 	br	2e1c <__alt_data_end+0xfffd20dc>
    2e80:	00c00044 	movi	r3,1
    2e84:	003ff106 	br	2e4c <__alt_data_end+0xfffd210c>

00002e88 <__udivsi3>:
    2e88:	200d883a 	mov	r6,r4
    2e8c:	2900152e 	bgeu	r5,r4,2ee4 <__udivsi3+0x5c>
    2e90:	28001416 	blt	r5,zero,2ee4 <__udivsi3+0x5c>
    2e94:	00800804 	movi	r2,32
    2e98:	00c00044 	movi	r3,1
    2e9c:	00000206 	br	2ea8 <__udivsi3+0x20>
    2ea0:	10000e26 	beq	r2,zero,2edc <__udivsi3+0x54>
    2ea4:	28000516 	blt	r5,zero,2ebc <__udivsi3+0x34>
    2ea8:	294b883a 	add	r5,r5,r5
    2eac:	10bfffc4 	addi	r2,r2,-1
    2eb0:	18c7883a 	add	r3,r3,r3
    2eb4:	293ffa36 	bltu	r5,r4,2ea0 <__alt_data_end+0xfffd2160>
    2eb8:	18000826 	beq	r3,zero,2edc <__udivsi3+0x54>
    2ebc:	0005883a 	mov	r2,zero
    2ec0:	31400236 	bltu	r6,r5,2ecc <__udivsi3+0x44>
    2ec4:	314dc83a 	sub	r6,r6,r5
    2ec8:	10c4b03a 	or	r2,r2,r3
    2ecc:	1806d07a 	srli	r3,r3,1
    2ed0:	280ad07a 	srli	r5,r5,1
    2ed4:	183ffa1e 	bne	r3,zero,2ec0 <__alt_data_end+0xfffd2180>
    2ed8:	f800283a 	ret
    2edc:	0005883a 	mov	r2,zero
    2ee0:	f800283a 	ret
    2ee4:	00c00044 	movi	r3,1
    2ee8:	003ff406 	br	2ebc <__alt_data_end+0xfffd217c>

00002eec <__umodsi3>:
    2eec:	2005883a 	mov	r2,r4
    2ef0:	2900122e 	bgeu	r5,r4,2f3c <__umodsi3+0x50>
    2ef4:	28001116 	blt	r5,zero,2f3c <__umodsi3+0x50>
    2ef8:	01800804 	movi	r6,32
    2efc:	00c00044 	movi	r3,1
    2f00:	00000206 	br	2f0c <__umodsi3+0x20>
    2f04:	30000c26 	beq	r6,zero,2f38 <__umodsi3+0x4c>
    2f08:	28000516 	blt	r5,zero,2f20 <__umodsi3+0x34>
    2f0c:	294b883a 	add	r5,r5,r5
    2f10:	31bfffc4 	addi	r6,r6,-1
    2f14:	18c7883a 	add	r3,r3,r3
    2f18:	293ffa36 	bltu	r5,r4,2f04 <__alt_data_end+0xfffd21c4>
    2f1c:	18000626 	beq	r3,zero,2f38 <__umodsi3+0x4c>
    2f20:	1806d07a 	srli	r3,r3,1
    2f24:	11400136 	bltu	r2,r5,2f2c <__umodsi3+0x40>
    2f28:	1145c83a 	sub	r2,r2,r5
    2f2c:	280ad07a 	srli	r5,r5,1
    2f30:	183ffb1e 	bne	r3,zero,2f20 <__alt_data_end+0xfffd21e0>
    2f34:	f800283a 	ret
    2f38:	f800283a 	ret
    2f3c:	00c00044 	movi	r3,1
    2f40:	003ff706 	br	2f20 <__alt_data_end+0xfffd21e0>

00002f44 <__mulsi3>:
    2f44:	0005883a 	mov	r2,zero
    2f48:	20000726 	beq	r4,zero,2f68 <__mulsi3+0x24>
    2f4c:	20c0004c 	andi	r3,r4,1
    2f50:	2008d07a 	srli	r4,r4,1
    2f54:	18000126 	beq	r3,zero,2f5c <__mulsi3+0x18>
    2f58:	1145883a 	add	r2,r2,r5
    2f5c:	294b883a 	add	r5,r5,r5
    2f60:	203ffa1e 	bne	r4,zero,2f4c <__alt_data_end+0xfffd220c>
    2f64:	f800283a 	ret
    2f68:	f800283a 	ret

00002f6c <__adddf3>:
    2f6c:	02c00434 	movhi	r11,16
    2f70:	5affffc4 	addi	r11,r11,-1
    2f74:	2806d7fa 	srli	r3,r5,31
    2f78:	2ad4703a 	and	r10,r5,r11
    2f7c:	3ad2703a 	and	r9,r7,r11
    2f80:	3804d53a 	srli	r2,r7,20
    2f84:	3018d77a 	srli	r12,r6,29
    2f88:	280ad53a 	srli	r5,r5,20
    2f8c:	501490fa 	slli	r10,r10,3
    2f90:	2010d77a 	srli	r8,r4,29
    2f94:	481290fa 	slli	r9,r9,3
    2f98:	380ed7fa 	srli	r7,r7,31
    2f9c:	defffb04 	addi	sp,sp,-20
    2fa0:	dc800215 	stw	r18,8(sp)
    2fa4:	dc400115 	stw	r17,4(sp)
    2fa8:	dc000015 	stw	r16,0(sp)
    2fac:	dfc00415 	stw	ra,16(sp)
    2fb0:	dcc00315 	stw	r19,12(sp)
    2fb4:	1c803fcc 	andi	r18,r3,255
    2fb8:	2c01ffcc 	andi	r16,r5,2047
    2fbc:	5210b03a 	or	r8,r10,r8
    2fc0:	202290fa 	slli	r17,r4,3
    2fc4:	1081ffcc 	andi	r2,r2,2047
    2fc8:	4b12b03a 	or	r9,r9,r12
    2fcc:	300c90fa 	slli	r6,r6,3
    2fd0:	91c07526 	beq	r18,r7,31a8 <__adddf3+0x23c>
    2fd4:	8087c83a 	sub	r3,r16,r2
    2fd8:	00c0ab0e 	bge	zero,r3,3288 <__adddf3+0x31c>
    2fdc:	10002a1e 	bne	r2,zero,3088 <__adddf3+0x11c>
    2fe0:	4984b03a 	or	r2,r9,r6
    2fe4:	1000961e 	bne	r2,zero,3240 <__adddf3+0x2d4>
    2fe8:	888001cc 	andi	r2,r17,7
    2fec:	10000726 	beq	r2,zero,300c <__adddf3+0xa0>
    2ff0:	888003cc 	andi	r2,r17,15
    2ff4:	00c00104 	movi	r3,4
    2ff8:	10c00426 	beq	r2,r3,300c <__adddf3+0xa0>
    2ffc:	88c7883a 	add	r3,r17,r3
    3000:	1c63803a 	cmpltu	r17,r3,r17
    3004:	4451883a 	add	r8,r8,r17
    3008:	1823883a 	mov	r17,r3
    300c:	4080202c 	andhi	r2,r8,128
    3010:	10005926 	beq	r2,zero,3178 <__adddf3+0x20c>
    3014:	84000044 	addi	r16,r16,1
    3018:	0081ffc4 	movi	r2,2047
    301c:	8080ba26 	beq	r16,r2,3308 <__adddf3+0x39c>
    3020:	00bfe034 	movhi	r2,65408
    3024:	10bfffc4 	addi	r2,r2,-1
    3028:	4090703a 	and	r8,r8,r2
    302c:	4004977a 	slli	r2,r8,29
    3030:	4010927a 	slli	r8,r8,9
    3034:	8822d0fa 	srli	r17,r17,3
    3038:	8401ffcc 	andi	r16,r16,2047
    303c:	4010d33a 	srli	r8,r8,12
    3040:	9007883a 	mov	r3,r18
    3044:	1444b03a 	or	r2,r2,r17
    3048:	8401ffcc 	andi	r16,r16,2047
    304c:	8020953a 	slli	r16,r16,20
    3050:	18c03fcc 	andi	r3,r3,255
    3054:	01000434 	movhi	r4,16
    3058:	213fffc4 	addi	r4,r4,-1
    305c:	180697fa 	slli	r3,r3,31
    3060:	4110703a 	and	r8,r8,r4
    3064:	4410b03a 	or	r8,r8,r16
    3068:	40c6b03a 	or	r3,r8,r3
    306c:	dfc00417 	ldw	ra,16(sp)
    3070:	dcc00317 	ldw	r19,12(sp)
    3074:	dc800217 	ldw	r18,8(sp)
    3078:	dc400117 	ldw	r17,4(sp)
    307c:	dc000017 	ldw	r16,0(sp)
    3080:	dec00504 	addi	sp,sp,20
    3084:	f800283a 	ret
    3088:	0081ffc4 	movi	r2,2047
    308c:	80bfd626 	beq	r16,r2,2fe8 <__alt_data_end+0xfffd22a8>
    3090:	4a402034 	orhi	r9,r9,128
    3094:	00800e04 	movi	r2,56
    3098:	10c09f16 	blt	r2,r3,3318 <__adddf3+0x3ac>
    309c:	008007c4 	movi	r2,31
    30a0:	10c0c216 	blt	r2,r3,33ac <__adddf3+0x440>
    30a4:	00800804 	movi	r2,32
    30a8:	10c5c83a 	sub	r2,r2,r3
    30ac:	488a983a 	sll	r5,r9,r2
    30b0:	30c8d83a 	srl	r4,r6,r3
    30b4:	3084983a 	sll	r2,r6,r2
    30b8:	48c6d83a 	srl	r3,r9,r3
    30bc:	290cb03a 	or	r6,r5,r4
    30c0:	1004c03a 	cmpne	r2,r2,zero
    30c4:	308cb03a 	or	r6,r6,r2
    30c8:	898dc83a 	sub	r6,r17,r6
    30cc:	89a3803a 	cmpltu	r17,r17,r6
    30d0:	40d1c83a 	sub	r8,r8,r3
    30d4:	4451c83a 	sub	r8,r8,r17
    30d8:	3023883a 	mov	r17,r6
    30dc:	4080202c 	andhi	r2,r8,128
    30e0:	10002326 	beq	r2,zero,3170 <__adddf3+0x204>
    30e4:	04c02034 	movhi	r19,128
    30e8:	9cffffc4 	addi	r19,r19,-1
    30ec:	44e6703a 	and	r19,r8,r19
    30f0:	98007626 	beq	r19,zero,32cc <__adddf3+0x360>
    30f4:	9809883a 	mov	r4,r19
    30f8:	00057040 	call	5704 <__clzsi2>
    30fc:	10fffe04 	addi	r3,r2,-8
    3100:	010007c4 	movi	r4,31
    3104:	20c07716 	blt	r4,r3,32e4 <__adddf3+0x378>
    3108:	00800804 	movi	r2,32
    310c:	10c5c83a 	sub	r2,r2,r3
    3110:	8884d83a 	srl	r2,r17,r2
    3114:	98d0983a 	sll	r8,r19,r3
    3118:	88e2983a 	sll	r17,r17,r3
    311c:	1204b03a 	or	r2,r2,r8
    3120:	1c007416 	blt	r3,r16,32f4 <__adddf3+0x388>
    3124:	1c21c83a 	sub	r16,r3,r16
    3128:	82000044 	addi	r8,r16,1
    312c:	00c007c4 	movi	r3,31
    3130:	1a009116 	blt	r3,r8,3378 <__adddf3+0x40c>
    3134:	00c00804 	movi	r3,32
    3138:	1a07c83a 	sub	r3,r3,r8
    313c:	8a08d83a 	srl	r4,r17,r8
    3140:	88e2983a 	sll	r17,r17,r3
    3144:	10c6983a 	sll	r3,r2,r3
    3148:	1210d83a 	srl	r8,r2,r8
    314c:	8804c03a 	cmpne	r2,r17,zero
    3150:	1906b03a 	or	r3,r3,r4
    3154:	18a2b03a 	or	r17,r3,r2
    3158:	0021883a 	mov	r16,zero
    315c:	003fa206 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3160:	1890b03a 	or	r8,r3,r2
    3164:	40017d26 	beq	r8,zero,375c <__adddf3+0x7f0>
    3168:	1011883a 	mov	r8,r2
    316c:	1823883a 	mov	r17,r3
    3170:	888001cc 	andi	r2,r17,7
    3174:	103f9e1e 	bne	r2,zero,2ff0 <__alt_data_end+0xfffd22b0>
    3178:	4004977a 	slli	r2,r8,29
    317c:	8822d0fa 	srli	r17,r17,3
    3180:	4010d0fa 	srli	r8,r8,3
    3184:	9007883a 	mov	r3,r18
    3188:	1444b03a 	or	r2,r2,r17
    318c:	0101ffc4 	movi	r4,2047
    3190:	81002426 	beq	r16,r4,3224 <__adddf3+0x2b8>
    3194:	8120703a 	and	r16,r16,r4
    3198:	01000434 	movhi	r4,16
    319c:	213fffc4 	addi	r4,r4,-1
    31a0:	4110703a 	and	r8,r8,r4
    31a4:	003fa806 	br	3048 <__alt_data_end+0xfffd2308>
    31a8:	8089c83a 	sub	r4,r16,r2
    31ac:	01005e0e 	bge	zero,r4,3328 <__adddf3+0x3bc>
    31b0:	10002b26 	beq	r2,zero,3260 <__adddf3+0x2f4>
    31b4:	0081ffc4 	movi	r2,2047
    31b8:	80bf8b26 	beq	r16,r2,2fe8 <__alt_data_end+0xfffd22a8>
    31bc:	4a402034 	orhi	r9,r9,128
    31c0:	00800e04 	movi	r2,56
    31c4:	1100a40e 	bge	r2,r4,3458 <__adddf3+0x4ec>
    31c8:	498cb03a 	or	r6,r9,r6
    31cc:	300ac03a 	cmpne	r5,r6,zero
    31d0:	0013883a 	mov	r9,zero
    31d4:	2c4b883a 	add	r5,r5,r17
    31d8:	2c63803a 	cmpltu	r17,r5,r17
    31dc:	4a11883a 	add	r8,r9,r8
    31e0:	8a11883a 	add	r8,r17,r8
    31e4:	2823883a 	mov	r17,r5
    31e8:	4080202c 	andhi	r2,r8,128
    31ec:	103fe026 	beq	r2,zero,3170 <__alt_data_end+0xfffd2430>
    31f0:	84000044 	addi	r16,r16,1
    31f4:	0081ffc4 	movi	r2,2047
    31f8:	8080d226 	beq	r16,r2,3544 <__adddf3+0x5d8>
    31fc:	00bfe034 	movhi	r2,65408
    3200:	10bfffc4 	addi	r2,r2,-1
    3204:	4090703a 	and	r8,r8,r2
    3208:	880ad07a 	srli	r5,r17,1
    320c:	400897fa 	slli	r4,r8,31
    3210:	88c0004c 	andi	r3,r17,1
    3214:	28e2b03a 	or	r17,r5,r3
    3218:	4010d07a 	srli	r8,r8,1
    321c:	2462b03a 	or	r17,r4,r17
    3220:	003f7106 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3224:	4088b03a 	or	r4,r8,r2
    3228:	20014526 	beq	r4,zero,3740 <__adddf3+0x7d4>
    322c:	01000434 	movhi	r4,16
    3230:	42000234 	orhi	r8,r8,8
    3234:	213fffc4 	addi	r4,r4,-1
    3238:	4110703a 	and	r8,r8,r4
    323c:	003f8206 	br	3048 <__alt_data_end+0xfffd2308>
    3240:	18ffffc4 	addi	r3,r3,-1
    3244:	1800491e 	bne	r3,zero,336c <__adddf3+0x400>
    3248:	898bc83a 	sub	r5,r17,r6
    324c:	8963803a 	cmpltu	r17,r17,r5
    3250:	4251c83a 	sub	r8,r8,r9
    3254:	4451c83a 	sub	r8,r8,r17
    3258:	2823883a 	mov	r17,r5
    325c:	003f9f06 	br	30dc <__alt_data_end+0xfffd239c>
    3260:	4984b03a 	or	r2,r9,r6
    3264:	103f6026 	beq	r2,zero,2fe8 <__alt_data_end+0xfffd22a8>
    3268:	213fffc4 	addi	r4,r4,-1
    326c:	2000931e 	bne	r4,zero,34bc <__adddf3+0x550>
    3270:	898d883a 	add	r6,r17,r6
    3274:	3463803a 	cmpltu	r17,r6,r17
    3278:	4251883a 	add	r8,r8,r9
    327c:	8a11883a 	add	r8,r17,r8
    3280:	3023883a 	mov	r17,r6
    3284:	003fd806 	br	31e8 <__alt_data_end+0xfffd24a8>
    3288:	1800541e 	bne	r3,zero,33dc <__adddf3+0x470>
    328c:	80800044 	addi	r2,r16,1
    3290:	1081ffcc 	andi	r2,r2,2047
    3294:	00c00044 	movi	r3,1
    3298:	1880a00e 	bge	r3,r2,351c <__adddf3+0x5b0>
    329c:	8989c83a 	sub	r4,r17,r6
    32a0:	8905803a 	cmpltu	r2,r17,r4
    32a4:	4267c83a 	sub	r19,r8,r9
    32a8:	98a7c83a 	sub	r19,r19,r2
    32ac:	9880202c 	andhi	r2,r19,128
    32b0:	10006326 	beq	r2,zero,3440 <__adddf3+0x4d4>
    32b4:	3463c83a 	sub	r17,r6,r17
    32b8:	4a07c83a 	sub	r3,r9,r8
    32bc:	344d803a 	cmpltu	r6,r6,r17
    32c0:	19a7c83a 	sub	r19,r3,r6
    32c4:	3825883a 	mov	r18,r7
    32c8:	983f8a1e 	bne	r19,zero,30f4 <__alt_data_end+0xfffd23b4>
    32cc:	8809883a 	mov	r4,r17
    32d0:	00057040 	call	5704 <__clzsi2>
    32d4:	10800804 	addi	r2,r2,32
    32d8:	10fffe04 	addi	r3,r2,-8
    32dc:	010007c4 	movi	r4,31
    32e0:	20ff890e 	bge	r4,r3,3108 <__alt_data_end+0xfffd23c8>
    32e4:	10bff604 	addi	r2,r2,-40
    32e8:	8884983a 	sll	r2,r17,r2
    32ec:	0023883a 	mov	r17,zero
    32f0:	1c3f8c0e 	bge	r3,r16,3124 <__alt_data_end+0xfffd23e4>
    32f4:	023fe034 	movhi	r8,65408
    32f8:	423fffc4 	addi	r8,r8,-1
    32fc:	80e1c83a 	sub	r16,r16,r3
    3300:	1210703a 	and	r8,r2,r8
    3304:	003f3806 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3308:	9007883a 	mov	r3,r18
    330c:	0011883a 	mov	r8,zero
    3310:	0005883a 	mov	r2,zero
    3314:	003f4c06 	br	3048 <__alt_data_end+0xfffd2308>
    3318:	498cb03a 	or	r6,r9,r6
    331c:	300cc03a 	cmpne	r6,r6,zero
    3320:	0007883a 	mov	r3,zero
    3324:	003f6806 	br	30c8 <__alt_data_end+0xfffd2388>
    3328:	20009c1e 	bne	r4,zero,359c <__adddf3+0x630>
    332c:	80800044 	addi	r2,r16,1
    3330:	1141ffcc 	andi	r5,r2,2047
    3334:	01000044 	movi	r4,1
    3338:	2140670e 	bge	r4,r5,34d8 <__adddf3+0x56c>
    333c:	0101ffc4 	movi	r4,2047
    3340:	11007f26 	beq	r2,r4,3540 <__adddf3+0x5d4>
    3344:	898d883a 	add	r6,r17,r6
    3348:	4247883a 	add	r3,r8,r9
    334c:	3451803a 	cmpltu	r8,r6,r17
    3350:	40d1883a 	add	r8,r8,r3
    3354:	402297fa 	slli	r17,r8,31
    3358:	300cd07a 	srli	r6,r6,1
    335c:	4010d07a 	srli	r8,r8,1
    3360:	1021883a 	mov	r16,r2
    3364:	89a2b03a 	or	r17,r17,r6
    3368:	003f1f06 	br	2fe8 <__alt_data_end+0xfffd22a8>
    336c:	0081ffc4 	movi	r2,2047
    3370:	80bf481e 	bne	r16,r2,3094 <__alt_data_end+0xfffd2354>
    3374:	003f1c06 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3378:	843ff844 	addi	r16,r16,-31
    337c:	01000804 	movi	r4,32
    3380:	1406d83a 	srl	r3,r2,r16
    3384:	41005026 	beq	r8,r4,34c8 <__adddf3+0x55c>
    3388:	01001004 	movi	r4,64
    338c:	2211c83a 	sub	r8,r4,r8
    3390:	1204983a 	sll	r2,r2,r8
    3394:	88a2b03a 	or	r17,r17,r2
    3398:	8822c03a 	cmpne	r17,r17,zero
    339c:	1c62b03a 	or	r17,r3,r17
    33a0:	0011883a 	mov	r8,zero
    33a4:	0021883a 	mov	r16,zero
    33a8:	003f7106 	br	3170 <__alt_data_end+0xfffd2430>
    33ac:	193ff804 	addi	r4,r3,-32
    33b0:	00800804 	movi	r2,32
    33b4:	4908d83a 	srl	r4,r9,r4
    33b8:	18804526 	beq	r3,r2,34d0 <__adddf3+0x564>
    33bc:	00801004 	movi	r2,64
    33c0:	10c5c83a 	sub	r2,r2,r3
    33c4:	4886983a 	sll	r3,r9,r2
    33c8:	198cb03a 	or	r6,r3,r6
    33cc:	300cc03a 	cmpne	r6,r6,zero
    33d0:	218cb03a 	or	r6,r4,r6
    33d4:	0007883a 	mov	r3,zero
    33d8:	003f3b06 	br	30c8 <__alt_data_end+0xfffd2388>
    33dc:	80002a26 	beq	r16,zero,3488 <__adddf3+0x51c>
    33e0:	0101ffc4 	movi	r4,2047
    33e4:	11006826 	beq	r2,r4,3588 <__adddf3+0x61c>
    33e8:	00c7c83a 	sub	r3,zero,r3
    33ec:	42002034 	orhi	r8,r8,128
    33f0:	01000e04 	movi	r4,56
    33f4:	20c07c16 	blt	r4,r3,35e8 <__adddf3+0x67c>
    33f8:	010007c4 	movi	r4,31
    33fc:	20c0da16 	blt	r4,r3,3768 <__adddf3+0x7fc>
    3400:	01000804 	movi	r4,32
    3404:	20c9c83a 	sub	r4,r4,r3
    3408:	4114983a 	sll	r10,r8,r4
    340c:	88cad83a 	srl	r5,r17,r3
    3410:	8908983a 	sll	r4,r17,r4
    3414:	40c6d83a 	srl	r3,r8,r3
    3418:	5162b03a 	or	r17,r10,r5
    341c:	2008c03a 	cmpne	r4,r4,zero
    3420:	8922b03a 	or	r17,r17,r4
    3424:	3463c83a 	sub	r17,r6,r17
    3428:	48c7c83a 	sub	r3,r9,r3
    342c:	344d803a 	cmpltu	r6,r6,r17
    3430:	1991c83a 	sub	r8,r3,r6
    3434:	1021883a 	mov	r16,r2
    3438:	3825883a 	mov	r18,r7
    343c:	003f2706 	br	30dc <__alt_data_end+0xfffd239c>
    3440:	24d0b03a 	or	r8,r4,r19
    3444:	40001b1e 	bne	r8,zero,34b4 <__adddf3+0x548>
    3448:	0005883a 	mov	r2,zero
    344c:	0007883a 	mov	r3,zero
    3450:	0021883a 	mov	r16,zero
    3454:	003f4d06 	br	318c <__alt_data_end+0xfffd244c>
    3458:	008007c4 	movi	r2,31
    345c:	11003c16 	blt	r2,r4,3550 <__adddf3+0x5e4>
    3460:	00800804 	movi	r2,32
    3464:	1105c83a 	sub	r2,r2,r4
    3468:	488e983a 	sll	r7,r9,r2
    346c:	310ad83a 	srl	r5,r6,r4
    3470:	3084983a 	sll	r2,r6,r2
    3474:	4912d83a 	srl	r9,r9,r4
    3478:	394ab03a 	or	r5,r7,r5
    347c:	1004c03a 	cmpne	r2,r2,zero
    3480:	288ab03a 	or	r5,r5,r2
    3484:	003f5306 	br	31d4 <__alt_data_end+0xfffd2494>
    3488:	4448b03a 	or	r4,r8,r17
    348c:	20003e26 	beq	r4,zero,3588 <__adddf3+0x61c>
    3490:	00c6303a 	nor	r3,zero,r3
    3494:	18003a1e 	bne	r3,zero,3580 <__adddf3+0x614>
    3498:	3463c83a 	sub	r17,r6,r17
    349c:	4a07c83a 	sub	r3,r9,r8
    34a0:	344d803a 	cmpltu	r6,r6,r17
    34a4:	1991c83a 	sub	r8,r3,r6
    34a8:	1021883a 	mov	r16,r2
    34ac:	3825883a 	mov	r18,r7
    34b0:	003f0a06 	br	30dc <__alt_data_end+0xfffd239c>
    34b4:	2023883a 	mov	r17,r4
    34b8:	003f0d06 	br	30f0 <__alt_data_end+0xfffd23b0>
    34bc:	0081ffc4 	movi	r2,2047
    34c0:	80bf3f1e 	bne	r16,r2,31c0 <__alt_data_end+0xfffd2480>
    34c4:	003ec806 	br	2fe8 <__alt_data_end+0xfffd22a8>
    34c8:	0005883a 	mov	r2,zero
    34cc:	003fb106 	br	3394 <__alt_data_end+0xfffd2654>
    34d0:	0007883a 	mov	r3,zero
    34d4:	003fbc06 	br	33c8 <__alt_data_end+0xfffd2688>
    34d8:	4444b03a 	or	r2,r8,r17
    34dc:	8000871e 	bne	r16,zero,36fc <__adddf3+0x790>
    34e0:	1000ba26 	beq	r2,zero,37cc <__adddf3+0x860>
    34e4:	4984b03a 	or	r2,r9,r6
    34e8:	103ebf26 	beq	r2,zero,2fe8 <__alt_data_end+0xfffd22a8>
    34ec:	8985883a 	add	r2,r17,r6
    34f0:	4247883a 	add	r3,r8,r9
    34f4:	1451803a 	cmpltu	r8,r2,r17
    34f8:	40d1883a 	add	r8,r8,r3
    34fc:	40c0202c 	andhi	r3,r8,128
    3500:	1023883a 	mov	r17,r2
    3504:	183f1a26 	beq	r3,zero,3170 <__alt_data_end+0xfffd2430>
    3508:	00bfe034 	movhi	r2,65408
    350c:	10bfffc4 	addi	r2,r2,-1
    3510:	2021883a 	mov	r16,r4
    3514:	4090703a 	and	r8,r8,r2
    3518:	003eb306 	br	2fe8 <__alt_data_end+0xfffd22a8>
    351c:	4444b03a 	or	r2,r8,r17
    3520:	8000291e 	bne	r16,zero,35c8 <__adddf3+0x65c>
    3524:	10004b1e 	bne	r2,zero,3654 <__adddf3+0x6e8>
    3528:	4990b03a 	or	r8,r9,r6
    352c:	40008b26 	beq	r8,zero,375c <__adddf3+0x7f0>
    3530:	4811883a 	mov	r8,r9
    3534:	3023883a 	mov	r17,r6
    3538:	3825883a 	mov	r18,r7
    353c:	003eaa06 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3540:	1021883a 	mov	r16,r2
    3544:	0011883a 	mov	r8,zero
    3548:	0005883a 	mov	r2,zero
    354c:	003f0f06 	br	318c <__alt_data_end+0xfffd244c>
    3550:	217ff804 	addi	r5,r4,-32
    3554:	00800804 	movi	r2,32
    3558:	494ad83a 	srl	r5,r9,r5
    355c:	20807d26 	beq	r4,r2,3754 <__adddf3+0x7e8>
    3560:	00801004 	movi	r2,64
    3564:	1109c83a 	sub	r4,r2,r4
    3568:	4912983a 	sll	r9,r9,r4
    356c:	498cb03a 	or	r6,r9,r6
    3570:	300cc03a 	cmpne	r6,r6,zero
    3574:	298ab03a 	or	r5,r5,r6
    3578:	0013883a 	mov	r9,zero
    357c:	003f1506 	br	31d4 <__alt_data_end+0xfffd2494>
    3580:	0101ffc4 	movi	r4,2047
    3584:	113f9a1e 	bne	r2,r4,33f0 <__alt_data_end+0xfffd26b0>
    3588:	4811883a 	mov	r8,r9
    358c:	3023883a 	mov	r17,r6
    3590:	1021883a 	mov	r16,r2
    3594:	3825883a 	mov	r18,r7
    3598:	003e9306 	br	2fe8 <__alt_data_end+0xfffd22a8>
    359c:	8000161e 	bne	r16,zero,35f8 <__adddf3+0x68c>
    35a0:	444ab03a 	or	r5,r8,r17
    35a4:	28005126 	beq	r5,zero,36ec <__adddf3+0x780>
    35a8:	0108303a 	nor	r4,zero,r4
    35ac:	20004d1e 	bne	r4,zero,36e4 <__adddf3+0x778>
    35b0:	89a3883a 	add	r17,r17,r6
    35b4:	4253883a 	add	r9,r8,r9
    35b8:	898d803a 	cmpltu	r6,r17,r6
    35bc:	3251883a 	add	r8,r6,r9
    35c0:	1021883a 	mov	r16,r2
    35c4:	003f0806 	br	31e8 <__alt_data_end+0xfffd24a8>
    35c8:	1000301e 	bne	r2,zero,368c <__adddf3+0x720>
    35cc:	4984b03a 	or	r2,r9,r6
    35d0:	10007126 	beq	r2,zero,3798 <__adddf3+0x82c>
    35d4:	4811883a 	mov	r8,r9
    35d8:	3023883a 	mov	r17,r6
    35dc:	3825883a 	mov	r18,r7
    35e0:	0401ffc4 	movi	r16,2047
    35e4:	003e8006 	br	2fe8 <__alt_data_end+0xfffd22a8>
    35e8:	4462b03a 	or	r17,r8,r17
    35ec:	8822c03a 	cmpne	r17,r17,zero
    35f0:	0007883a 	mov	r3,zero
    35f4:	003f8b06 	br	3424 <__alt_data_end+0xfffd26e4>
    35f8:	0141ffc4 	movi	r5,2047
    35fc:	11403b26 	beq	r2,r5,36ec <__adddf3+0x780>
    3600:	0109c83a 	sub	r4,zero,r4
    3604:	42002034 	orhi	r8,r8,128
    3608:	01400e04 	movi	r5,56
    360c:	29006716 	blt	r5,r4,37ac <__adddf3+0x840>
    3610:	014007c4 	movi	r5,31
    3614:	29007016 	blt	r5,r4,37d8 <__adddf3+0x86c>
    3618:	01400804 	movi	r5,32
    361c:	290bc83a 	sub	r5,r5,r4
    3620:	4154983a 	sll	r10,r8,r5
    3624:	890ed83a 	srl	r7,r17,r4
    3628:	894a983a 	sll	r5,r17,r5
    362c:	4108d83a 	srl	r4,r8,r4
    3630:	51e2b03a 	or	r17,r10,r7
    3634:	280ac03a 	cmpne	r5,r5,zero
    3638:	8962b03a 	or	r17,r17,r5
    363c:	89a3883a 	add	r17,r17,r6
    3640:	2253883a 	add	r9,r4,r9
    3644:	898d803a 	cmpltu	r6,r17,r6
    3648:	3251883a 	add	r8,r6,r9
    364c:	1021883a 	mov	r16,r2
    3650:	003ee506 	br	31e8 <__alt_data_end+0xfffd24a8>
    3654:	4984b03a 	or	r2,r9,r6
    3658:	103e6326 	beq	r2,zero,2fe8 <__alt_data_end+0xfffd22a8>
    365c:	8987c83a 	sub	r3,r17,r6
    3660:	88c9803a 	cmpltu	r4,r17,r3
    3664:	4245c83a 	sub	r2,r8,r9
    3668:	1105c83a 	sub	r2,r2,r4
    366c:	1100202c 	andhi	r4,r2,128
    3670:	203ebb26 	beq	r4,zero,3160 <__alt_data_end+0xfffd2420>
    3674:	3463c83a 	sub	r17,r6,r17
    3678:	4a07c83a 	sub	r3,r9,r8
    367c:	344d803a 	cmpltu	r6,r6,r17
    3680:	1991c83a 	sub	r8,r3,r6
    3684:	3825883a 	mov	r18,r7
    3688:	003e5706 	br	2fe8 <__alt_data_end+0xfffd22a8>
    368c:	4984b03a 	or	r2,r9,r6
    3690:	10002e26 	beq	r2,zero,374c <__adddf3+0x7e0>
    3694:	4004d0fa 	srli	r2,r8,3
    3698:	8822d0fa 	srli	r17,r17,3
    369c:	4010977a 	slli	r8,r8,29
    36a0:	10c0022c 	andhi	r3,r2,8
    36a4:	4462b03a 	or	r17,r8,r17
    36a8:	18000826 	beq	r3,zero,36cc <__adddf3+0x760>
    36ac:	4808d0fa 	srli	r4,r9,3
    36b0:	20c0022c 	andhi	r3,r4,8
    36b4:	1800051e 	bne	r3,zero,36cc <__adddf3+0x760>
    36b8:	300cd0fa 	srli	r6,r6,3
    36bc:	4806977a 	slli	r3,r9,29
    36c0:	2005883a 	mov	r2,r4
    36c4:	3825883a 	mov	r18,r7
    36c8:	19a2b03a 	or	r17,r3,r6
    36cc:	8810d77a 	srli	r8,r17,29
    36d0:	100490fa 	slli	r2,r2,3
    36d4:	882290fa 	slli	r17,r17,3
    36d8:	0401ffc4 	movi	r16,2047
    36dc:	4090b03a 	or	r8,r8,r2
    36e0:	003e4106 	br	2fe8 <__alt_data_end+0xfffd22a8>
    36e4:	0141ffc4 	movi	r5,2047
    36e8:	117fc71e 	bne	r2,r5,3608 <__alt_data_end+0xfffd28c8>
    36ec:	4811883a 	mov	r8,r9
    36f0:	3023883a 	mov	r17,r6
    36f4:	1021883a 	mov	r16,r2
    36f8:	003e3b06 	br	2fe8 <__alt_data_end+0xfffd22a8>
    36fc:	10002f26 	beq	r2,zero,37bc <__adddf3+0x850>
    3700:	4984b03a 	or	r2,r9,r6
    3704:	10001126 	beq	r2,zero,374c <__adddf3+0x7e0>
    3708:	4004d0fa 	srli	r2,r8,3
    370c:	8822d0fa 	srli	r17,r17,3
    3710:	4010977a 	slli	r8,r8,29
    3714:	10c0022c 	andhi	r3,r2,8
    3718:	4462b03a 	or	r17,r8,r17
    371c:	183feb26 	beq	r3,zero,36cc <__alt_data_end+0xfffd298c>
    3720:	4808d0fa 	srli	r4,r9,3
    3724:	20c0022c 	andhi	r3,r4,8
    3728:	183fe81e 	bne	r3,zero,36cc <__alt_data_end+0xfffd298c>
    372c:	300cd0fa 	srli	r6,r6,3
    3730:	4806977a 	slli	r3,r9,29
    3734:	2005883a 	mov	r2,r4
    3738:	19a2b03a 	or	r17,r3,r6
    373c:	003fe306 	br	36cc <__alt_data_end+0xfffd298c>
    3740:	0011883a 	mov	r8,zero
    3744:	0005883a 	mov	r2,zero
    3748:	003e3f06 	br	3048 <__alt_data_end+0xfffd2308>
    374c:	0401ffc4 	movi	r16,2047
    3750:	003e2506 	br	2fe8 <__alt_data_end+0xfffd22a8>
    3754:	0013883a 	mov	r9,zero
    3758:	003f8406 	br	356c <__alt_data_end+0xfffd282c>
    375c:	0005883a 	mov	r2,zero
    3760:	0007883a 	mov	r3,zero
    3764:	003e8906 	br	318c <__alt_data_end+0xfffd244c>
    3768:	197ff804 	addi	r5,r3,-32
    376c:	01000804 	movi	r4,32
    3770:	414ad83a 	srl	r5,r8,r5
    3774:	19002426 	beq	r3,r4,3808 <__adddf3+0x89c>
    3778:	01001004 	movi	r4,64
    377c:	20c7c83a 	sub	r3,r4,r3
    3780:	40c6983a 	sll	r3,r8,r3
    3784:	1c46b03a 	or	r3,r3,r17
    3788:	1806c03a 	cmpne	r3,r3,zero
    378c:	28e2b03a 	or	r17,r5,r3
    3790:	0007883a 	mov	r3,zero
    3794:	003f2306 	br	3424 <__alt_data_end+0xfffd26e4>
    3798:	0007883a 	mov	r3,zero
    379c:	5811883a 	mov	r8,r11
    37a0:	00bfffc4 	movi	r2,-1
    37a4:	0401ffc4 	movi	r16,2047
    37a8:	003e7806 	br	318c <__alt_data_end+0xfffd244c>
    37ac:	4462b03a 	or	r17,r8,r17
    37b0:	8822c03a 	cmpne	r17,r17,zero
    37b4:	0009883a 	mov	r4,zero
    37b8:	003fa006 	br	363c <__alt_data_end+0xfffd28fc>
    37bc:	4811883a 	mov	r8,r9
    37c0:	3023883a 	mov	r17,r6
    37c4:	0401ffc4 	movi	r16,2047
    37c8:	003e0706 	br	2fe8 <__alt_data_end+0xfffd22a8>
    37cc:	4811883a 	mov	r8,r9
    37d0:	3023883a 	mov	r17,r6
    37d4:	003e0406 	br	2fe8 <__alt_data_end+0xfffd22a8>
    37d8:	21fff804 	addi	r7,r4,-32
    37dc:	01400804 	movi	r5,32
    37e0:	41ced83a 	srl	r7,r8,r7
    37e4:	21400a26 	beq	r4,r5,3810 <__adddf3+0x8a4>
    37e8:	01401004 	movi	r5,64
    37ec:	2909c83a 	sub	r4,r5,r4
    37f0:	4108983a 	sll	r4,r8,r4
    37f4:	2448b03a 	or	r4,r4,r17
    37f8:	2008c03a 	cmpne	r4,r4,zero
    37fc:	3922b03a 	or	r17,r7,r4
    3800:	0009883a 	mov	r4,zero
    3804:	003f8d06 	br	363c <__alt_data_end+0xfffd28fc>
    3808:	0007883a 	mov	r3,zero
    380c:	003fdd06 	br	3784 <__alt_data_end+0xfffd2a44>
    3810:	0009883a 	mov	r4,zero
    3814:	003ff706 	br	37f4 <__alt_data_end+0xfffd2ab4>

00003818 <__divdf3>:
    3818:	defff004 	addi	sp,sp,-64
    381c:	dc800815 	stw	r18,32(sp)
    3820:	2824d53a 	srli	r18,r5,20
    3824:	dd800c15 	stw	r22,48(sp)
    3828:	282cd7fa 	srli	r22,r5,31
    382c:	dc000615 	stw	r16,24(sp)
    3830:	04000434 	movhi	r16,16
    3834:	843fffc4 	addi	r16,r16,-1
    3838:	dfc00f15 	stw	ra,60(sp)
    383c:	df000e15 	stw	fp,56(sp)
    3840:	ddc00d15 	stw	r23,52(sp)
    3844:	dd400b15 	stw	r21,44(sp)
    3848:	dd000a15 	stw	r20,40(sp)
    384c:	dcc00915 	stw	r19,36(sp)
    3850:	dc400715 	stw	r17,28(sp)
    3854:	9481ffcc 	andi	r18,r18,2047
    3858:	2c20703a 	and	r16,r5,r16
    385c:	b2003fcc 	andi	r8,r22,255
    3860:	90006126 	beq	r18,zero,39e8 <__divdf3+0x1d0>
    3864:	0081ffc4 	movi	r2,2047
    3868:	202b883a 	mov	r21,r4
    386c:	90803726 	beq	r18,r2,394c <__divdf3+0x134>
    3870:	80800434 	orhi	r2,r16,16
    3874:	100490fa 	slli	r2,r2,3
    3878:	2020d77a 	srli	r16,r4,29
    387c:	202a90fa 	slli	r21,r4,3
    3880:	94bf0044 	addi	r18,r18,-1023
    3884:	80a0b03a 	or	r16,r16,r2
    3888:	0013883a 	mov	r9,zero
    388c:	000b883a 	mov	r5,zero
    3890:	3806d53a 	srli	r3,r7,20
    3894:	382ed7fa 	srli	r23,r7,31
    3898:	04400434 	movhi	r17,16
    389c:	8c7fffc4 	addi	r17,r17,-1
    38a0:	18c1ffcc 	andi	r3,r3,2047
    38a4:	3029883a 	mov	r20,r6
    38a8:	3c62703a 	and	r17,r7,r17
    38ac:	bf003fcc 	andi	fp,r23,255
    38b0:	18006e26 	beq	r3,zero,3a6c <__divdf3+0x254>
    38b4:	0081ffc4 	movi	r2,2047
    38b8:	18806626 	beq	r3,r2,3a54 <__divdf3+0x23c>
    38bc:	88800434 	orhi	r2,r17,16
    38c0:	100490fa 	slli	r2,r2,3
    38c4:	3022d77a 	srli	r17,r6,29
    38c8:	302890fa 	slli	r20,r6,3
    38cc:	18ff0044 	addi	r3,r3,-1023
    38d0:	88a2b03a 	or	r17,r17,r2
    38d4:	000f883a 	mov	r7,zero
    38d8:	b5e6f03a 	xor	r19,r22,r23
    38dc:	3a4cb03a 	or	r6,r7,r9
    38e0:	008003c4 	movi	r2,15
    38e4:	9809883a 	mov	r4,r19
    38e8:	90c7c83a 	sub	r3,r18,r3
    38ec:	9cc03fcc 	andi	r19,r19,255
    38f0:	11809636 	bltu	r2,r6,3b4c <__divdf3+0x334>
    38f4:	300c90ba 	slli	r6,r6,2
    38f8:	00800034 	movhi	r2,0
    38fc:	108e4304 	addi	r2,r2,14604
    3900:	308d883a 	add	r6,r6,r2
    3904:	30800017 	ldw	r2,0(r6)
    3908:	1000683a 	jmp	r2
    390c:	00003b4c 	andi	zero,zero,237
    3910:	00003984 	movi	zero,230
    3914:	00003b3c 	xorhi	zero,zero,236
    3918:	00003978 	rdprs	zero,zero,229
    391c:	00003b3c 	xorhi	zero,zero,236
    3920:	00003b10 	cmplti	zero,zero,236
    3924:	00003b3c 	xorhi	zero,zero,236
    3928:	00003978 	rdprs	zero,zero,229
    392c:	00003984 	movi	zero,230
    3930:	00003984 	movi	zero,230
    3934:	00003b10 	cmplti	zero,zero,236
    3938:	00003978 	rdprs	zero,zero,229
    393c:	00003968 	cmpgeui	zero,zero,229
    3940:	00003968 	cmpgeui	zero,zero,229
    3944:	00003968 	cmpgeui	zero,zero,229
    3948:	00003ed4 	movui	zero,251
    394c:	2404b03a 	or	r2,r4,r16
    3950:	10006c1e 	bne	r2,zero,3b04 <__divdf3+0x2ec>
    3954:	02400204 	movi	r9,8
    3958:	0021883a 	mov	r16,zero
    395c:	002b883a 	mov	r21,zero
    3960:	01400084 	movi	r5,2
    3964:	003fca06 	br	3890 <__alt_data_end+0xfffd2b50>
    3968:	8023883a 	mov	r17,r16
    396c:	a829883a 	mov	r20,r21
    3970:	4039883a 	mov	fp,r8
    3974:	280f883a 	mov	r7,r5
    3978:	00800084 	movi	r2,2
    397c:	3881601e 	bne	r7,r2,3f00 <__divdf3+0x6e8>
    3980:	e027883a 	mov	r19,fp
    3984:	9900004c 	andi	r4,r19,1
    3988:	0081ffc4 	movi	r2,2047
    398c:	0021883a 	mov	r16,zero
    3990:	002b883a 	mov	r21,zero
    3994:	1004953a 	slli	r2,r2,20
    3998:	20c03fcc 	andi	r3,r4,255
    399c:	01400434 	movhi	r5,16
    39a0:	297fffc4 	addi	r5,r5,-1
    39a4:	180697fa 	slli	r3,r3,31
    39a8:	8160703a 	and	r16,r16,r5
    39ac:	80a0b03a 	or	r16,r16,r2
    39b0:	80c6b03a 	or	r3,r16,r3
    39b4:	a805883a 	mov	r2,r21
    39b8:	dfc00f17 	ldw	ra,60(sp)
    39bc:	df000e17 	ldw	fp,56(sp)
    39c0:	ddc00d17 	ldw	r23,52(sp)
    39c4:	dd800c17 	ldw	r22,48(sp)
    39c8:	dd400b17 	ldw	r21,44(sp)
    39cc:	dd000a17 	ldw	r20,40(sp)
    39d0:	dcc00917 	ldw	r19,36(sp)
    39d4:	dc800817 	ldw	r18,32(sp)
    39d8:	dc400717 	ldw	r17,28(sp)
    39dc:	dc000617 	ldw	r16,24(sp)
    39e0:	dec01004 	addi	sp,sp,64
    39e4:	f800283a 	ret
    39e8:	2404b03a 	or	r2,r4,r16
    39ec:	2023883a 	mov	r17,r4
    39f0:	10003f26 	beq	r2,zero,3af0 <__divdf3+0x2d8>
    39f4:	80015e26 	beq	r16,zero,3f70 <__divdf3+0x758>
    39f8:	8009883a 	mov	r4,r16
    39fc:	d9800215 	stw	r6,8(sp)
    3a00:	d9c00515 	stw	r7,20(sp)
    3a04:	da000415 	stw	r8,16(sp)
    3a08:	00057040 	call	5704 <__clzsi2>
    3a0c:	d9800217 	ldw	r6,8(sp)
    3a10:	d9c00517 	ldw	r7,20(sp)
    3a14:	da000417 	ldw	r8,16(sp)
    3a18:	113ffd44 	addi	r4,r2,-11
    3a1c:	00c00704 	movi	r3,28
    3a20:	19014f16 	blt	r3,r4,3f60 <__divdf3+0x748>
    3a24:	00c00744 	movi	r3,29
    3a28:	157ffe04 	addi	r21,r2,-8
    3a2c:	1907c83a 	sub	r3,r3,r4
    3a30:	8560983a 	sll	r16,r16,r21
    3a34:	88c6d83a 	srl	r3,r17,r3
    3a38:	8d6a983a 	sll	r21,r17,r21
    3a3c:	1c20b03a 	or	r16,r3,r16
    3a40:	1080fcc4 	addi	r2,r2,1011
    3a44:	00a5c83a 	sub	r18,zero,r2
    3a48:	0013883a 	mov	r9,zero
    3a4c:	000b883a 	mov	r5,zero
    3a50:	003f8f06 	br	3890 <__alt_data_end+0xfffd2b50>
    3a54:	3444b03a 	or	r2,r6,r17
    3a58:	1000231e 	bne	r2,zero,3ae8 <__divdf3+0x2d0>
    3a5c:	0023883a 	mov	r17,zero
    3a60:	0029883a 	mov	r20,zero
    3a64:	01c00084 	movi	r7,2
    3a68:	003f9b06 	br	38d8 <__alt_data_end+0xfffd2b98>
    3a6c:	3444b03a 	or	r2,r6,r17
    3a70:	10001926 	beq	r2,zero,3ad8 <__divdf3+0x2c0>
    3a74:	88014b26 	beq	r17,zero,3fa4 <__divdf3+0x78c>
    3a78:	8809883a 	mov	r4,r17
    3a7c:	d9400115 	stw	r5,4(sp)
    3a80:	d9800215 	stw	r6,8(sp)
    3a84:	da000415 	stw	r8,16(sp)
    3a88:	da400315 	stw	r9,12(sp)
    3a8c:	00057040 	call	5704 <__clzsi2>
    3a90:	d9400117 	ldw	r5,4(sp)
    3a94:	d9800217 	ldw	r6,8(sp)
    3a98:	da000417 	ldw	r8,16(sp)
    3a9c:	da400317 	ldw	r9,12(sp)
    3aa0:	113ffd44 	addi	r4,r2,-11
    3aa4:	00c00704 	movi	r3,28
    3aa8:	19013a16 	blt	r3,r4,3f94 <__divdf3+0x77c>
    3aac:	00c00744 	movi	r3,29
    3ab0:	153ffe04 	addi	r20,r2,-8
    3ab4:	1907c83a 	sub	r3,r3,r4
    3ab8:	8d22983a 	sll	r17,r17,r20
    3abc:	30c6d83a 	srl	r3,r6,r3
    3ac0:	3528983a 	sll	r20,r6,r20
    3ac4:	1c62b03a 	or	r17,r3,r17
    3ac8:	1080fcc4 	addi	r2,r2,1011
    3acc:	0087c83a 	sub	r3,zero,r2
    3ad0:	000f883a 	mov	r7,zero
    3ad4:	003f8006 	br	38d8 <__alt_data_end+0xfffd2b98>
    3ad8:	0023883a 	mov	r17,zero
    3adc:	0029883a 	mov	r20,zero
    3ae0:	01c00044 	movi	r7,1
    3ae4:	003f7c06 	br	38d8 <__alt_data_end+0xfffd2b98>
    3ae8:	01c000c4 	movi	r7,3
    3aec:	003f7a06 	br	38d8 <__alt_data_end+0xfffd2b98>
    3af0:	02400104 	movi	r9,4
    3af4:	0021883a 	mov	r16,zero
    3af8:	002b883a 	mov	r21,zero
    3afc:	01400044 	movi	r5,1
    3b00:	003f6306 	br	3890 <__alt_data_end+0xfffd2b50>
    3b04:	02400304 	movi	r9,12
    3b08:	014000c4 	movi	r5,3
    3b0c:	003f6006 	br	3890 <__alt_data_end+0xfffd2b50>
    3b10:	04000434 	movhi	r16,16
    3b14:	0009883a 	mov	r4,zero
    3b18:	843fffc4 	addi	r16,r16,-1
    3b1c:	057fffc4 	movi	r21,-1
    3b20:	0081ffc4 	movi	r2,2047
    3b24:	003f9b06 	br	3994 <__alt_data_end+0xfffd2c54>
    3b28:	00c00044 	movi	r3,1
    3b2c:	1887c83a 	sub	r3,r3,r2
    3b30:	01000e04 	movi	r4,56
    3b34:	20c1530e 	bge	r4,r3,4084 <__divdf3+0x86c>
    3b38:	9900004c 	andi	r4,r19,1
    3b3c:	0005883a 	mov	r2,zero
    3b40:	0021883a 	mov	r16,zero
    3b44:	002b883a 	mov	r21,zero
    3b48:	003f9206 	br	3994 <__alt_data_end+0xfffd2c54>
    3b4c:	8c012e36 	bltu	r17,r16,4008 <__divdf3+0x7f0>
    3b50:	84412c26 	beq	r16,r17,4004 <__divdf3+0x7ec>
    3b54:	a82f883a 	mov	r23,r21
    3b58:	18ffffc4 	addi	r3,r3,-1
    3b5c:	002b883a 	mov	r21,zero
    3b60:	a004d63a 	srli	r2,r20,24
    3b64:	8822923a 	slli	r17,r17,8
    3b68:	a028923a 	slli	r20,r20,8
    3b6c:	8009883a 	mov	r4,r16
    3b70:	88acb03a 	or	r22,r17,r2
    3b74:	dd000015 	stw	r20,0(sp)
    3b78:	b028d43a 	srli	r20,r22,16
    3b7c:	d8c00215 	stw	r3,8(sp)
    3b80:	b4bfffcc 	andi	r18,r22,65535
    3b84:	a00b883a 	mov	r5,r20
    3b88:	0002e880 	call	2e88 <__udivsi3>
    3b8c:	100b883a 	mov	r5,r2
    3b90:	9009883a 	mov	r4,r18
    3b94:	1023883a 	mov	r17,r2
    3b98:	0002f440 	call	2f44 <__mulsi3>
    3b9c:	8009883a 	mov	r4,r16
    3ba0:	a00b883a 	mov	r5,r20
    3ba4:	1039883a 	mov	fp,r2
    3ba8:	0002eec0 	call	2eec <__umodsi3>
    3bac:	1004943a 	slli	r2,r2,16
    3bb0:	b808d43a 	srli	r4,r23,16
    3bb4:	d8c00217 	ldw	r3,8(sp)
    3bb8:	2084b03a 	or	r2,r4,r2
    3bbc:	1700062e 	bgeu	r2,fp,3bd8 <__divdf3+0x3c0>
    3bc0:	1585883a 	add	r2,r2,r22
    3bc4:	893fffc4 	addi	r4,r17,-1
    3bc8:	15811d36 	bltu	r2,r22,4040 <__divdf3+0x828>
    3bcc:	17011c2e 	bgeu	r2,fp,4040 <__divdf3+0x828>
    3bd0:	8c7fff84 	addi	r17,r17,-2
    3bd4:	1585883a 	add	r2,r2,r22
    3bd8:	1739c83a 	sub	fp,r2,fp
    3bdc:	a00b883a 	mov	r5,r20
    3be0:	e009883a 	mov	r4,fp
    3be4:	d8c00215 	stw	r3,8(sp)
    3be8:	0002e880 	call	2e88 <__udivsi3>
    3bec:	100b883a 	mov	r5,r2
    3bf0:	9009883a 	mov	r4,r18
    3bf4:	1021883a 	mov	r16,r2
    3bf8:	0002f440 	call	2f44 <__mulsi3>
    3bfc:	a00b883a 	mov	r5,r20
    3c00:	e009883a 	mov	r4,fp
    3c04:	d8800415 	stw	r2,16(sp)
    3c08:	0002eec0 	call	2eec <__umodsi3>
    3c0c:	1004943a 	slli	r2,r2,16
    3c10:	da000417 	ldw	r8,16(sp)
    3c14:	bdffffcc 	andi	r23,r23,65535
    3c18:	b884b03a 	or	r2,r23,r2
    3c1c:	d8c00217 	ldw	r3,8(sp)
    3c20:	1200062e 	bgeu	r2,r8,3c3c <__divdf3+0x424>
    3c24:	1585883a 	add	r2,r2,r22
    3c28:	813fffc4 	addi	r4,r16,-1
    3c2c:	15810236 	bltu	r2,r22,4038 <__divdf3+0x820>
    3c30:	1201012e 	bgeu	r2,r8,4038 <__divdf3+0x820>
    3c34:	843fff84 	addi	r16,r16,-2
    3c38:	1585883a 	add	r2,r2,r22
    3c3c:	8822943a 	slli	r17,r17,16
    3c40:	d9800017 	ldw	r6,0(sp)
    3c44:	1211c83a 	sub	r8,r2,r8
    3c48:	8c22b03a 	or	r17,r17,r16
    3c4c:	373fffcc 	andi	fp,r6,65535
    3c50:	8abfffcc 	andi	r10,r17,65535
    3c54:	8820d43a 	srli	r16,r17,16
    3c58:	5009883a 	mov	r4,r10
    3c5c:	e00b883a 	mov	r5,fp
    3c60:	302ed43a 	srli	r23,r6,16
    3c64:	d8c00215 	stw	r3,8(sp)
    3c68:	da000415 	stw	r8,16(sp)
    3c6c:	da800115 	stw	r10,4(sp)
    3c70:	0002f440 	call	2f44 <__mulsi3>
    3c74:	800b883a 	mov	r5,r16
    3c78:	e009883a 	mov	r4,fp
    3c7c:	d8800515 	stw	r2,20(sp)
    3c80:	0002f440 	call	2f44 <__mulsi3>
    3c84:	8009883a 	mov	r4,r16
    3c88:	b80b883a 	mov	r5,r23
    3c8c:	d8800315 	stw	r2,12(sp)
    3c90:	0002f440 	call	2f44 <__mulsi3>
    3c94:	da800117 	ldw	r10,4(sp)
    3c98:	b80b883a 	mov	r5,r23
    3c9c:	1021883a 	mov	r16,r2
    3ca0:	5009883a 	mov	r4,r10
    3ca4:	0002f440 	call	2f44 <__mulsi3>
    3ca8:	d9c00517 	ldw	r7,20(sp)
    3cac:	da400317 	ldw	r9,12(sp)
    3cb0:	d8c00217 	ldw	r3,8(sp)
    3cb4:	3808d43a 	srli	r4,r7,16
    3cb8:	1245883a 	add	r2,r2,r9
    3cbc:	da000417 	ldw	r8,16(sp)
    3cc0:	2085883a 	add	r2,r4,r2
    3cc4:	1240022e 	bgeu	r2,r9,3cd0 <__divdf3+0x4b8>
    3cc8:	01000074 	movhi	r4,1
    3ccc:	8121883a 	add	r16,r16,r4
    3cd0:	1008d43a 	srli	r4,r2,16
    3cd4:	1004943a 	slli	r2,r2,16
    3cd8:	39ffffcc 	andi	r7,r7,65535
    3cdc:	2409883a 	add	r4,r4,r16
    3ce0:	11c5883a 	add	r2,r2,r7
    3ce4:	4100bb36 	bltu	r8,r4,3fd4 <__divdf3+0x7bc>
    3ce8:	4100d726 	beq	r8,r4,4048 <__divdf3+0x830>
    3cec:	4109c83a 	sub	r4,r8,r4
    3cf0:	a8a1c83a 	sub	r16,r21,r2
    3cf4:	ac2b803a 	cmpltu	r21,r21,r16
    3cf8:	256bc83a 	sub	r21,r4,r21
    3cfc:	b540d926 	beq	r22,r21,4064 <__divdf3+0x84c>
    3d00:	a00b883a 	mov	r5,r20
    3d04:	a809883a 	mov	r4,r21
    3d08:	d8c00215 	stw	r3,8(sp)
    3d0c:	0002e880 	call	2e88 <__udivsi3>
    3d10:	100b883a 	mov	r5,r2
    3d14:	9009883a 	mov	r4,r18
    3d18:	d8800515 	stw	r2,20(sp)
    3d1c:	0002f440 	call	2f44 <__mulsi3>
    3d20:	a809883a 	mov	r4,r21
    3d24:	a00b883a 	mov	r5,r20
    3d28:	d8800415 	stw	r2,16(sp)
    3d2c:	0002eec0 	call	2eec <__umodsi3>
    3d30:	1004943a 	slli	r2,r2,16
    3d34:	8008d43a 	srli	r4,r16,16
    3d38:	da000417 	ldw	r8,16(sp)
    3d3c:	d8c00217 	ldw	r3,8(sp)
    3d40:	2084b03a 	or	r2,r4,r2
    3d44:	d9c00517 	ldw	r7,20(sp)
    3d48:	1200062e 	bgeu	r2,r8,3d64 <__divdf3+0x54c>
    3d4c:	1585883a 	add	r2,r2,r22
    3d50:	393fffc4 	addi	r4,r7,-1
    3d54:	1580c536 	bltu	r2,r22,406c <__divdf3+0x854>
    3d58:	1200c42e 	bgeu	r2,r8,406c <__divdf3+0x854>
    3d5c:	39ffff84 	addi	r7,r7,-2
    3d60:	1585883a 	add	r2,r2,r22
    3d64:	122bc83a 	sub	r21,r2,r8
    3d68:	a00b883a 	mov	r5,r20
    3d6c:	a809883a 	mov	r4,r21
    3d70:	d8c00215 	stw	r3,8(sp)
    3d74:	d9c00515 	stw	r7,20(sp)
    3d78:	0002e880 	call	2e88 <__udivsi3>
    3d7c:	9009883a 	mov	r4,r18
    3d80:	100b883a 	mov	r5,r2
    3d84:	d8800415 	stw	r2,16(sp)
    3d88:	0002f440 	call	2f44 <__mulsi3>
    3d8c:	a809883a 	mov	r4,r21
    3d90:	a00b883a 	mov	r5,r20
    3d94:	1025883a 	mov	r18,r2
    3d98:	0002eec0 	call	2eec <__umodsi3>
    3d9c:	1004943a 	slli	r2,r2,16
    3da0:	813fffcc 	andi	r4,r16,65535
    3da4:	d8c00217 	ldw	r3,8(sp)
    3da8:	20a0b03a 	or	r16,r4,r2
    3dac:	d9c00517 	ldw	r7,20(sp)
    3db0:	da000417 	ldw	r8,16(sp)
    3db4:	8480062e 	bgeu	r16,r18,3dd0 <__divdf3+0x5b8>
    3db8:	85a1883a 	add	r16,r16,r22
    3dbc:	40bfffc4 	addi	r2,r8,-1
    3dc0:	8580ac36 	bltu	r16,r22,4074 <__divdf3+0x85c>
    3dc4:	8480ab2e 	bgeu	r16,r18,4074 <__divdf3+0x85c>
    3dc8:	423fff84 	addi	r8,r8,-2
    3dcc:	85a1883a 	add	r16,r16,r22
    3dd0:	3804943a 	slli	r2,r7,16
    3dd4:	84a1c83a 	sub	r16,r16,r18
    3dd8:	e009883a 	mov	r4,fp
    3ddc:	1228b03a 	or	r20,r2,r8
    3de0:	a1ffffcc 	andi	r7,r20,65535
    3de4:	a024d43a 	srli	r18,r20,16
    3de8:	380b883a 	mov	r5,r7
    3dec:	d8c00215 	stw	r3,8(sp)
    3df0:	d9c00515 	stw	r7,20(sp)
    3df4:	0002f440 	call	2f44 <__mulsi3>
    3df8:	900b883a 	mov	r5,r18
    3dfc:	e009883a 	mov	r4,fp
    3e00:	102b883a 	mov	r21,r2
    3e04:	0002f440 	call	2f44 <__mulsi3>
    3e08:	900b883a 	mov	r5,r18
    3e0c:	b809883a 	mov	r4,r23
    3e10:	1039883a 	mov	fp,r2
    3e14:	0002f440 	call	2f44 <__mulsi3>
    3e18:	d9c00517 	ldw	r7,20(sp)
    3e1c:	b80b883a 	mov	r5,r23
    3e20:	1025883a 	mov	r18,r2
    3e24:	3809883a 	mov	r4,r7
    3e28:	0002f440 	call	2f44 <__mulsi3>
    3e2c:	a808d43a 	srli	r4,r21,16
    3e30:	1705883a 	add	r2,r2,fp
    3e34:	d8c00217 	ldw	r3,8(sp)
    3e38:	2085883a 	add	r2,r4,r2
    3e3c:	1700022e 	bgeu	r2,fp,3e48 <__divdf3+0x630>
    3e40:	01000074 	movhi	r4,1
    3e44:	9125883a 	add	r18,r18,r4
    3e48:	1008d43a 	srli	r4,r2,16
    3e4c:	1004943a 	slli	r2,r2,16
    3e50:	ad7fffcc 	andi	r21,r21,65535
    3e54:	2489883a 	add	r4,r4,r18
    3e58:	1545883a 	add	r2,r2,r21
    3e5c:	81003836 	bltu	r16,r4,3f40 <__divdf3+0x728>
    3e60:	81003626 	beq	r16,r4,3f3c <__divdf3+0x724>
    3e64:	a5000054 	ori	r20,r20,1
    3e68:	1880ffc4 	addi	r2,r3,1023
    3e6c:	00bf2e0e 	bge	zero,r2,3b28 <__alt_data_end+0xfffd2de8>
    3e70:	a10001cc 	andi	r4,r20,7
    3e74:	20000726 	beq	r4,zero,3e94 <__divdf3+0x67c>
    3e78:	a10003cc 	andi	r4,r20,15
    3e7c:	01400104 	movi	r5,4
    3e80:	21400426 	beq	r4,r5,3e94 <__divdf3+0x67c>
    3e84:	a149883a 	add	r4,r20,r5
    3e88:	2529803a 	cmpltu	r20,r4,r20
    3e8c:	8d23883a 	add	r17,r17,r20
    3e90:	2029883a 	mov	r20,r4
    3e94:	8900402c 	andhi	r4,r17,256
    3e98:	20000426 	beq	r4,zero,3eac <__divdf3+0x694>
    3e9c:	18810004 	addi	r2,r3,1024
    3ea0:	00ffc034 	movhi	r3,65280
    3ea4:	18ffffc4 	addi	r3,r3,-1
    3ea8:	88e2703a 	and	r17,r17,r3
    3eac:	00c1ff84 	movi	r3,2046
    3eb0:	18beb416 	blt	r3,r2,3984 <__alt_data_end+0xfffd2c44>
    3eb4:	a028d0fa 	srli	r20,r20,3
    3eb8:	882a977a 	slli	r21,r17,29
    3ebc:	8820927a 	slli	r16,r17,9
    3ec0:	1081ffcc 	andi	r2,r2,2047
    3ec4:	ad2ab03a 	or	r21,r21,r20
    3ec8:	8020d33a 	srli	r16,r16,12
    3ecc:	9900004c 	andi	r4,r19,1
    3ed0:	003eb006 	br	3994 <__alt_data_end+0xfffd2c54>
    3ed4:	8080022c 	andhi	r2,r16,8
    3ed8:	10001226 	beq	r2,zero,3f24 <__divdf3+0x70c>
    3edc:	8880022c 	andhi	r2,r17,8
    3ee0:	1000101e 	bne	r2,zero,3f24 <__divdf3+0x70c>
    3ee4:	00800434 	movhi	r2,16
    3ee8:	8c000234 	orhi	r16,r17,8
    3eec:	10bfffc4 	addi	r2,r2,-1
    3ef0:	b809883a 	mov	r4,r23
    3ef4:	80a0703a 	and	r16,r16,r2
    3ef8:	a02b883a 	mov	r21,r20
    3efc:	003f0806 	br	3b20 <__alt_data_end+0xfffd2de0>
    3f00:	008000c4 	movi	r2,3
    3f04:	3880b126 	beq	r7,r2,41cc <__divdf3+0x9b4>
    3f08:	00800044 	movi	r2,1
    3f0c:	38805b1e 	bne	r7,r2,407c <__divdf3+0x864>
    3f10:	e009883a 	mov	r4,fp
    3f14:	0005883a 	mov	r2,zero
    3f18:	0021883a 	mov	r16,zero
    3f1c:	002b883a 	mov	r21,zero
    3f20:	003e9c06 	br	3994 <__alt_data_end+0xfffd2c54>
    3f24:	00800434 	movhi	r2,16
    3f28:	84000234 	orhi	r16,r16,8
    3f2c:	10bfffc4 	addi	r2,r2,-1
    3f30:	b009883a 	mov	r4,r22
    3f34:	80a0703a 	and	r16,r16,r2
    3f38:	003ef906 	br	3b20 <__alt_data_end+0xfffd2de0>
    3f3c:	103fca26 	beq	r2,zero,3e68 <__alt_data_end+0xfffd3128>
    3f40:	b421883a 	add	r16,r22,r16
    3f44:	a17fffc4 	addi	r5,r20,-1
    3f48:	8580422e 	bgeu	r16,r22,4054 <__divdf3+0x83c>
    3f4c:	2829883a 	mov	r20,r5
    3f50:	813fc41e 	bne	r16,r4,3e64 <__alt_data_end+0xfffd3124>
    3f54:	d9800017 	ldw	r6,0(sp)
    3f58:	30bfc21e 	bne	r6,r2,3e64 <__alt_data_end+0xfffd3124>
    3f5c:	003fc206 	br	3e68 <__alt_data_end+0xfffd3128>
    3f60:	143ff604 	addi	r16,r2,-40
    3f64:	8c20983a 	sll	r16,r17,r16
    3f68:	002b883a 	mov	r21,zero
    3f6c:	003eb406 	br	3a40 <__alt_data_end+0xfffd2d00>
    3f70:	d9800215 	stw	r6,8(sp)
    3f74:	d9c00515 	stw	r7,20(sp)
    3f78:	da000415 	stw	r8,16(sp)
    3f7c:	00057040 	call	5704 <__clzsi2>
    3f80:	10800804 	addi	r2,r2,32
    3f84:	da000417 	ldw	r8,16(sp)
    3f88:	d9c00517 	ldw	r7,20(sp)
    3f8c:	d9800217 	ldw	r6,8(sp)
    3f90:	003ea106 	br	3a18 <__alt_data_end+0xfffd2cd8>
    3f94:	147ff604 	addi	r17,r2,-40
    3f98:	3462983a 	sll	r17,r6,r17
    3f9c:	0029883a 	mov	r20,zero
    3fa0:	003ec906 	br	3ac8 <__alt_data_end+0xfffd2d88>
    3fa4:	3009883a 	mov	r4,r6
    3fa8:	d9400115 	stw	r5,4(sp)
    3fac:	d9800215 	stw	r6,8(sp)
    3fb0:	da000415 	stw	r8,16(sp)
    3fb4:	da400315 	stw	r9,12(sp)
    3fb8:	00057040 	call	5704 <__clzsi2>
    3fbc:	10800804 	addi	r2,r2,32
    3fc0:	da400317 	ldw	r9,12(sp)
    3fc4:	da000417 	ldw	r8,16(sp)
    3fc8:	d9800217 	ldw	r6,8(sp)
    3fcc:	d9400117 	ldw	r5,4(sp)
    3fd0:	003eb306 	br	3aa0 <__alt_data_end+0xfffd2d60>
    3fd4:	d9800017 	ldw	r6,0(sp)
    3fd8:	a9ab883a 	add	r21,r21,r6
    3fdc:	a98b803a 	cmpltu	r5,r21,r6
    3fe0:	2d8b883a 	add	r5,r5,r22
    3fe4:	2a11883a 	add	r8,r5,r8
    3fe8:	897fffc4 	addi	r5,r17,-1
    3fec:	b2000c2e 	bgeu	r22,r8,4020 <__divdf3+0x808>
    3ff0:	41003f36 	bltu	r8,r4,40f0 <__divdf3+0x8d8>
    3ff4:	22006c26 	beq	r4,r8,41a8 <__divdf3+0x990>
    3ff8:	4109c83a 	sub	r4,r8,r4
    3ffc:	2823883a 	mov	r17,r5
    4000:	003f3b06 	br	3cf0 <__alt_data_end+0xfffd2fb0>
    4004:	ad3ed336 	bltu	r21,r20,3b54 <__alt_data_end+0xfffd2e14>
    4008:	a804d07a 	srli	r2,r21,1
    400c:	802e97fa 	slli	r23,r16,31
    4010:	a82a97fa 	slli	r21,r21,31
    4014:	8020d07a 	srli	r16,r16,1
    4018:	b8aeb03a 	or	r23,r23,r2
    401c:	003ed006 	br	3b60 <__alt_data_end+0xfffd2e20>
    4020:	b23ff51e 	bne	r22,r8,3ff8 <__alt_data_end+0xfffd32b8>
    4024:	d9800017 	ldw	r6,0(sp)
    4028:	a9bff12e 	bgeu	r21,r6,3ff0 <__alt_data_end+0xfffd32b0>
    402c:	b109c83a 	sub	r4,r22,r4
    4030:	2823883a 	mov	r17,r5
    4034:	003f2e06 	br	3cf0 <__alt_data_end+0xfffd2fb0>
    4038:	2021883a 	mov	r16,r4
    403c:	003eff06 	br	3c3c <__alt_data_end+0xfffd2efc>
    4040:	2023883a 	mov	r17,r4
    4044:	003ee406 	br	3bd8 <__alt_data_end+0xfffd2e98>
    4048:	a8bfe236 	bltu	r21,r2,3fd4 <__alt_data_end+0xfffd3294>
    404c:	0009883a 	mov	r4,zero
    4050:	003f2706 	br	3cf0 <__alt_data_end+0xfffd2fb0>
    4054:	81002d36 	bltu	r16,r4,410c <__divdf3+0x8f4>
    4058:	24005626 	beq	r4,r16,41b4 <__divdf3+0x99c>
    405c:	2829883a 	mov	r20,r5
    4060:	003f8006 	br	3e64 <__alt_data_end+0xfffd3124>
    4064:	053fffc4 	movi	r20,-1
    4068:	003f7f06 	br	3e68 <__alt_data_end+0xfffd3128>
    406c:	200f883a 	mov	r7,r4
    4070:	003f3c06 	br	3d64 <__alt_data_end+0xfffd3024>
    4074:	1011883a 	mov	r8,r2
    4078:	003f5506 	br	3dd0 <__alt_data_end+0xfffd3090>
    407c:	e027883a 	mov	r19,fp
    4080:	003f7906 	br	3e68 <__alt_data_end+0xfffd3128>
    4084:	010007c4 	movi	r4,31
    4088:	20c02816 	blt	r4,r3,412c <__divdf3+0x914>
    408c:	00800804 	movi	r2,32
    4090:	10c5c83a 	sub	r2,r2,r3
    4094:	888a983a 	sll	r5,r17,r2
    4098:	a0c8d83a 	srl	r4,r20,r3
    409c:	a084983a 	sll	r2,r20,r2
    40a0:	88e2d83a 	srl	r17,r17,r3
    40a4:	2906b03a 	or	r3,r5,r4
    40a8:	1004c03a 	cmpne	r2,r2,zero
    40ac:	1886b03a 	or	r3,r3,r2
    40b0:	188001cc 	andi	r2,r3,7
    40b4:	10000726 	beq	r2,zero,40d4 <__divdf3+0x8bc>
    40b8:	188003cc 	andi	r2,r3,15
    40bc:	01000104 	movi	r4,4
    40c0:	11000426 	beq	r2,r4,40d4 <__divdf3+0x8bc>
    40c4:	1805883a 	mov	r2,r3
    40c8:	10c00104 	addi	r3,r2,4
    40cc:	1885803a 	cmpltu	r2,r3,r2
    40d0:	88a3883a 	add	r17,r17,r2
    40d4:	8880202c 	andhi	r2,r17,128
    40d8:	10002926 	beq	r2,zero,4180 <__divdf3+0x968>
    40dc:	9900004c 	andi	r4,r19,1
    40e0:	00800044 	movi	r2,1
    40e4:	0021883a 	mov	r16,zero
    40e8:	002b883a 	mov	r21,zero
    40ec:	003e2906 	br	3994 <__alt_data_end+0xfffd2c54>
    40f0:	d9800017 	ldw	r6,0(sp)
    40f4:	8c7fff84 	addi	r17,r17,-2
    40f8:	a9ab883a 	add	r21,r21,r6
    40fc:	a98b803a 	cmpltu	r5,r21,r6
    4100:	2d8b883a 	add	r5,r5,r22
    4104:	2a11883a 	add	r8,r5,r8
    4108:	003ef806 	br	3cec <__alt_data_end+0xfffd2fac>
    410c:	d9800017 	ldw	r6,0(sp)
    4110:	318f883a 	add	r7,r6,r6
    4114:	398b803a 	cmpltu	r5,r7,r6
    4118:	2d8d883a 	add	r6,r5,r22
    411c:	81a1883a 	add	r16,r16,r6
    4120:	a17fff84 	addi	r5,r20,-2
    4124:	d9c00015 	stw	r7,0(sp)
    4128:	003f8806 	br	3f4c <__alt_data_end+0xfffd320c>
    412c:	013ff844 	movi	r4,-31
    4130:	2085c83a 	sub	r2,r4,r2
    4134:	8888d83a 	srl	r4,r17,r2
    4138:	00800804 	movi	r2,32
    413c:	18802126 	beq	r3,r2,41c4 <__divdf3+0x9ac>
    4140:	04001004 	movi	r16,64
    4144:	80c7c83a 	sub	r3,r16,r3
    4148:	88e0983a 	sll	r16,r17,r3
    414c:	8504b03a 	or	r2,r16,r20
    4150:	1004c03a 	cmpne	r2,r2,zero
    4154:	2084b03a 	or	r2,r4,r2
    4158:	144001cc 	andi	r17,r2,7
    415c:	88000d1e 	bne	r17,zero,4194 <__divdf3+0x97c>
    4160:	0021883a 	mov	r16,zero
    4164:	102ad0fa 	srli	r21,r2,3
    4168:	9900004c 	andi	r4,r19,1
    416c:	0005883a 	mov	r2,zero
    4170:	ac6ab03a 	or	r21,r21,r17
    4174:	003e0706 	br	3994 <__alt_data_end+0xfffd2c54>
    4178:	1007883a 	mov	r3,r2
    417c:	0023883a 	mov	r17,zero
    4180:	8820927a 	slli	r16,r17,9
    4184:	1805883a 	mov	r2,r3
    4188:	8822977a 	slli	r17,r17,29
    418c:	8020d33a 	srli	r16,r16,12
    4190:	003ff406 	br	4164 <__alt_data_end+0xfffd3424>
    4194:	10c003cc 	andi	r3,r2,15
    4198:	01000104 	movi	r4,4
    419c:	193ff626 	beq	r3,r4,4178 <__alt_data_end+0xfffd3438>
    41a0:	0023883a 	mov	r17,zero
    41a4:	003fc806 	br	40c8 <__alt_data_end+0xfffd3388>
    41a8:	a8bfd136 	bltu	r21,r2,40f0 <__alt_data_end+0xfffd33b0>
    41ac:	2823883a 	mov	r17,r5
    41b0:	003fa606 	br	404c <__alt_data_end+0xfffd330c>
    41b4:	d9800017 	ldw	r6,0(sp)
    41b8:	30bfd436 	bltu	r6,r2,410c <__alt_data_end+0xfffd33cc>
    41bc:	2829883a 	mov	r20,r5
    41c0:	003f6406 	br	3f54 <__alt_data_end+0xfffd3214>
    41c4:	0021883a 	mov	r16,zero
    41c8:	003fe006 	br	414c <__alt_data_end+0xfffd340c>
    41cc:	00800434 	movhi	r2,16
    41d0:	8c000234 	orhi	r16,r17,8
    41d4:	10bfffc4 	addi	r2,r2,-1
    41d8:	e009883a 	mov	r4,fp
    41dc:	80a0703a 	and	r16,r16,r2
    41e0:	a02b883a 	mov	r21,r20
    41e4:	003e4e06 	br	3b20 <__alt_data_end+0xfffd2de0>

000041e8 <__eqdf2>:
    41e8:	2804d53a 	srli	r2,r5,20
    41ec:	3806d53a 	srli	r3,r7,20
    41f0:	02000434 	movhi	r8,16
    41f4:	423fffc4 	addi	r8,r8,-1
    41f8:	1081ffcc 	andi	r2,r2,2047
    41fc:	0281ffc4 	movi	r10,2047
    4200:	2a12703a 	and	r9,r5,r8
    4204:	18c1ffcc 	andi	r3,r3,2047
    4208:	3a10703a 	and	r8,r7,r8
    420c:	280ad7fa 	srli	r5,r5,31
    4210:	380ed7fa 	srli	r7,r7,31
    4214:	12801026 	beq	r2,r10,4258 <__eqdf2+0x70>
    4218:	0281ffc4 	movi	r10,2047
    421c:	1a800a26 	beq	r3,r10,4248 <__eqdf2+0x60>
    4220:	10c00226 	beq	r2,r3,422c <__eqdf2+0x44>
    4224:	00800044 	movi	r2,1
    4228:	f800283a 	ret
    422c:	4a3ffd1e 	bne	r9,r8,4224 <__alt_data_end+0xfffd34e4>
    4230:	21bffc1e 	bne	r4,r6,4224 <__alt_data_end+0xfffd34e4>
    4234:	29c00c26 	beq	r5,r7,4268 <__eqdf2+0x80>
    4238:	103ffa1e 	bne	r2,zero,4224 <__alt_data_end+0xfffd34e4>
    423c:	2244b03a 	or	r2,r4,r9
    4240:	1004c03a 	cmpne	r2,r2,zero
    4244:	f800283a 	ret
    4248:	3214b03a 	or	r10,r6,r8
    424c:	503ff426 	beq	r10,zero,4220 <__alt_data_end+0xfffd34e0>
    4250:	00800044 	movi	r2,1
    4254:	f800283a 	ret
    4258:	2254b03a 	or	r10,r4,r9
    425c:	503fee26 	beq	r10,zero,4218 <__alt_data_end+0xfffd34d8>
    4260:	00800044 	movi	r2,1
    4264:	f800283a 	ret
    4268:	0005883a 	mov	r2,zero
    426c:	f800283a 	ret

00004270 <__gedf2>:
    4270:	2804d53a 	srli	r2,r5,20
    4274:	3806d53a 	srli	r3,r7,20
    4278:	02000434 	movhi	r8,16
    427c:	423fffc4 	addi	r8,r8,-1
    4280:	1081ffcc 	andi	r2,r2,2047
    4284:	0241ffc4 	movi	r9,2047
    4288:	2a14703a 	and	r10,r5,r8
    428c:	18c1ffcc 	andi	r3,r3,2047
    4290:	3a10703a 	and	r8,r7,r8
    4294:	280ad7fa 	srli	r5,r5,31
    4298:	380ed7fa 	srli	r7,r7,31
    429c:	12401d26 	beq	r2,r9,4314 <__gedf2+0xa4>
    42a0:	0241ffc4 	movi	r9,2047
    42a4:	1a401226 	beq	r3,r9,42f0 <__gedf2+0x80>
    42a8:	1000081e 	bne	r2,zero,42cc <__gedf2+0x5c>
    42ac:	2296b03a 	or	r11,r4,r10
    42b0:	5813003a 	cmpeq	r9,r11,zero
    42b4:	1800091e 	bne	r3,zero,42dc <__gedf2+0x6c>
    42b8:	3218b03a 	or	r12,r6,r8
    42bc:	6000071e 	bne	r12,zero,42dc <__gedf2+0x6c>
    42c0:	0005883a 	mov	r2,zero
    42c4:	5800101e 	bne	r11,zero,4308 <__gedf2+0x98>
    42c8:	f800283a 	ret
    42cc:	18000c1e 	bne	r3,zero,4300 <__gedf2+0x90>
    42d0:	3212b03a 	or	r9,r6,r8
    42d4:	48000c26 	beq	r9,zero,4308 <__gedf2+0x98>
    42d8:	0013883a 	mov	r9,zero
    42dc:	39c03fcc 	andi	r7,r7,255
    42e0:	48000826 	beq	r9,zero,4304 <__gedf2+0x94>
    42e4:	38000926 	beq	r7,zero,430c <__gedf2+0x9c>
    42e8:	00800044 	movi	r2,1
    42ec:	f800283a 	ret
    42f0:	3212b03a 	or	r9,r6,r8
    42f4:	483fec26 	beq	r9,zero,42a8 <__alt_data_end+0xfffd3568>
    42f8:	00bfff84 	movi	r2,-2
    42fc:	f800283a 	ret
    4300:	39c03fcc 	andi	r7,r7,255
    4304:	29c00626 	beq	r5,r7,4320 <__gedf2+0xb0>
    4308:	283ff726 	beq	r5,zero,42e8 <__alt_data_end+0xfffd35a8>
    430c:	00bfffc4 	movi	r2,-1
    4310:	f800283a 	ret
    4314:	2292b03a 	or	r9,r4,r10
    4318:	483fe126 	beq	r9,zero,42a0 <__alt_data_end+0xfffd3560>
    431c:	003ff606 	br	42f8 <__alt_data_end+0xfffd35b8>
    4320:	18bff916 	blt	r3,r2,4308 <__alt_data_end+0xfffd35c8>
    4324:	10c00316 	blt	r2,r3,4334 <__gedf2+0xc4>
    4328:	42bff736 	bltu	r8,r10,4308 <__alt_data_end+0xfffd35c8>
    432c:	52000326 	beq	r10,r8,433c <__gedf2+0xcc>
    4330:	5200042e 	bgeu	r10,r8,4344 <__gedf2+0xd4>
    4334:	283fec1e 	bne	r5,zero,42e8 <__alt_data_end+0xfffd35a8>
    4338:	003ff406 	br	430c <__alt_data_end+0xfffd35cc>
    433c:	313ff236 	bltu	r6,r4,4308 <__alt_data_end+0xfffd35c8>
    4340:	21bffc36 	bltu	r4,r6,4334 <__alt_data_end+0xfffd35f4>
    4344:	0005883a 	mov	r2,zero
    4348:	f800283a 	ret

0000434c <__ledf2>:
    434c:	2804d53a 	srli	r2,r5,20
    4350:	3810d53a 	srli	r8,r7,20
    4354:	00c00434 	movhi	r3,16
    4358:	18ffffc4 	addi	r3,r3,-1
    435c:	1081ffcc 	andi	r2,r2,2047
    4360:	0241ffc4 	movi	r9,2047
    4364:	28d4703a 	and	r10,r5,r3
    4368:	4201ffcc 	andi	r8,r8,2047
    436c:	38c6703a 	and	r3,r7,r3
    4370:	280ad7fa 	srli	r5,r5,31
    4374:	380ed7fa 	srli	r7,r7,31
    4378:	12401f26 	beq	r2,r9,43f8 <__ledf2+0xac>
    437c:	0241ffc4 	movi	r9,2047
    4380:	42401426 	beq	r8,r9,43d4 <__ledf2+0x88>
    4384:	1000091e 	bne	r2,zero,43ac <__ledf2+0x60>
    4388:	2296b03a 	or	r11,r4,r10
    438c:	5813003a 	cmpeq	r9,r11,zero
    4390:	29403fcc 	andi	r5,r5,255
    4394:	40000a1e 	bne	r8,zero,43c0 <__ledf2+0x74>
    4398:	30d8b03a 	or	r12,r6,r3
    439c:	6000081e 	bne	r12,zero,43c0 <__ledf2+0x74>
    43a0:	0005883a 	mov	r2,zero
    43a4:	5800111e 	bne	r11,zero,43ec <__ledf2+0xa0>
    43a8:	f800283a 	ret
    43ac:	29403fcc 	andi	r5,r5,255
    43b0:	40000c1e 	bne	r8,zero,43e4 <__ledf2+0x98>
    43b4:	30d2b03a 	or	r9,r6,r3
    43b8:	48000c26 	beq	r9,zero,43ec <__ledf2+0xa0>
    43bc:	0013883a 	mov	r9,zero
    43c0:	39c03fcc 	andi	r7,r7,255
    43c4:	48000826 	beq	r9,zero,43e8 <__ledf2+0x9c>
    43c8:	38001126 	beq	r7,zero,4410 <__ledf2+0xc4>
    43cc:	00800044 	movi	r2,1
    43d0:	f800283a 	ret
    43d4:	30d2b03a 	or	r9,r6,r3
    43d8:	483fea26 	beq	r9,zero,4384 <__alt_data_end+0xfffd3644>
    43dc:	00800084 	movi	r2,2
    43e0:	f800283a 	ret
    43e4:	39c03fcc 	andi	r7,r7,255
    43e8:	39400726 	beq	r7,r5,4408 <__ledf2+0xbc>
    43ec:	2800081e 	bne	r5,zero,4410 <__ledf2+0xc4>
    43f0:	00800044 	movi	r2,1
    43f4:	f800283a 	ret
    43f8:	2292b03a 	or	r9,r4,r10
    43fc:	483fdf26 	beq	r9,zero,437c <__alt_data_end+0xfffd363c>
    4400:	00800084 	movi	r2,2
    4404:	f800283a 	ret
    4408:	4080030e 	bge	r8,r2,4418 <__ledf2+0xcc>
    440c:	383fef26 	beq	r7,zero,43cc <__alt_data_end+0xfffd368c>
    4410:	00bfffc4 	movi	r2,-1
    4414:	f800283a 	ret
    4418:	123feb16 	blt	r2,r8,43c8 <__alt_data_end+0xfffd3688>
    441c:	1abff336 	bltu	r3,r10,43ec <__alt_data_end+0xfffd36ac>
    4420:	50c00326 	beq	r10,r3,4430 <__ledf2+0xe4>
    4424:	50c0042e 	bgeu	r10,r3,4438 <__ledf2+0xec>
    4428:	283fe81e 	bne	r5,zero,43cc <__alt_data_end+0xfffd368c>
    442c:	003ff806 	br	4410 <__alt_data_end+0xfffd36d0>
    4430:	313fee36 	bltu	r6,r4,43ec <__alt_data_end+0xfffd36ac>
    4434:	21bffc36 	bltu	r4,r6,4428 <__alt_data_end+0xfffd36e8>
    4438:	0005883a 	mov	r2,zero
    443c:	f800283a 	ret

00004440 <__muldf3>:
    4440:	deffee04 	addi	sp,sp,-72
    4444:	dd000c15 	stw	r20,48(sp)
    4448:	2828d53a 	srli	r20,r5,20
    444c:	ddc00f15 	stw	r23,60(sp)
    4450:	282ed7fa 	srli	r23,r5,31
    4454:	dc000815 	stw	r16,32(sp)
    4458:	04000434 	movhi	r16,16
    445c:	dcc00b15 	stw	r19,44(sp)
    4460:	843fffc4 	addi	r16,r16,-1
    4464:	dfc01115 	stw	ra,68(sp)
    4468:	df001015 	stw	fp,64(sp)
    446c:	dd800e15 	stw	r22,56(sp)
    4470:	dd400d15 	stw	r21,52(sp)
    4474:	dc800a15 	stw	r18,40(sp)
    4478:	dc400915 	stw	r17,36(sp)
    447c:	a501ffcc 	andi	r20,r20,2047
    4480:	2c20703a 	and	r16,r5,r16
    4484:	b827883a 	mov	r19,r23
    4488:	ba403fcc 	andi	r9,r23,255
    448c:	a0006026 	beq	r20,zero,4610 <__muldf3+0x1d0>
    4490:	0081ffc4 	movi	r2,2047
    4494:	202d883a 	mov	r22,r4
    4498:	a0803626 	beq	r20,r2,4574 <__muldf3+0x134>
    449c:	84000434 	orhi	r16,r16,16
    44a0:	200ad77a 	srli	r5,r4,29
    44a4:	800490fa 	slli	r2,r16,3
    44a8:	202c90fa 	slli	r22,r4,3
    44ac:	a53f0044 	addi	r20,r20,-1023
    44b0:	28a0b03a 	or	r16,r5,r2
    44b4:	002b883a 	mov	r21,zero
    44b8:	000b883a 	mov	r5,zero
    44bc:	3804d53a 	srli	r2,r7,20
    44c0:	3838d7fa 	srli	fp,r7,31
    44c4:	04400434 	movhi	r17,16
    44c8:	8c7fffc4 	addi	r17,r17,-1
    44cc:	1081ffcc 	andi	r2,r2,2047
    44d0:	3025883a 	mov	r18,r6
    44d4:	3c62703a 	and	r17,r7,r17
    44d8:	e2803fcc 	andi	r10,fp,255
    44dc:	10006d26 	beq	r2,zero,4694 <__muldf3+0x254>
    44e0:	00c1ffc4 	movi	r3,2047
    44e4:	10c06526 	beq	r2,r3,467c <__muldf3+0x23c>
    44e8:	8c400434 	orhi	r17,r17,16
    44ec:	300ed77a 	srli	r7,r6,29
    44f0:	880690fa 	slli	r3,r17,3
    44f4:	302490fa 	slli	r18,r6,3
    44f8:	10bf0044 	addi	r2,r2,-1023
    44fc:	38e2b03a 	or	r17,r7,r3
    4500:	000f883a 	mov	r7,zero
    4504:	a087883a 	add	r3,r20,r2
    4508:	010003c4 	movi	r4,15
    450c:	3d44b03a 	or	r2,r7,r21
    4510:	e5ccf03a 	xor	r6,fp,r23
    4514:	1a000044 	addi	r8,r3,1
    4518:	20809b36 	bltu	r4,r2,4788 <__muldf3+0x348>
    451c:	100490ba 	slli	r2,r2,2
    4520:	01000034 	movhi	r4,0
    4524:	21114d04 	addi	r4,r4,17716
    4528:	1105883a 	add	r2,r2,r4
    452c:	10800017 	ldw	r2,0(r2)
    4530:	1000683a 	jmp	r2
    4534:	00004788 	cmpgei	zero,zero,286
    4538:	00004594 	movui	zero,278
    453c:	00004594 	movui	zero,278
    4540:	00004590 	cmplti	zero,zero,278
    4544:	00004764 	muli	zero,zero,285
    4548:	00004764 	muli	zero,zero,285
    454c:	0000474c 	andi	zero,zero,285
    4550:	00004590 	cmplti	zero,zero,278
    4554:	00004764 	muli	zero,zero,285
    4558:	0000474c 	andi	zero,zero,285
    455c:	00004764 	muli	zero,zero,285
    4560:	00004590 	cmplti	zero,zero,278
    4564:	00004774 	movhi	zero,285
    4568:	00004774 	movhi	zero,285
    456c:	00004774 	movhi	zero,285
    4570:	00004ad4 	movui	zero,299
    4574:	2404b03a 	or	r2,r4,r16
    4578:	1000711e 	bne	r2,zero,4740 <__muldf3+0x300>
    457c:	05400204 	movi	r21,8
    4580:	0021883a 	mov	r16,zero
    4584:	002d883a 	mov	r22,zero
    4588:	01400084 	movi	r5,2
    458c:	003fcb06 	br	44bc <__alt_data_end+0xfffd377c>
    4590:	500d883a 	mov	r6,r10
    4594:	00800084 	movi	r2,2
    4598:	38805926 	beq	r7,r2,4700 <__muldf3+0x2c0>
    459c:	008000c4 	movi	r2,3
    45a0:	3881bb26 	beq	r7,r2,4c90 <__muldf3+0x850>
    45a4:	00800044 	movi	r2,1
    45a8:	3881961e 	bne	r7,r2,4c04 <__muldf3+0x7c4>
    45ac:	3027883a 	mov	r19,r6
    45b0:	0005883a 	mov	r2,zero
    45b4:	0021883a 	mov	r16,zero
    45b8:	002d883a 	mov	r22,zero
    45bc:	1004953a 	slli	r2,r2,20
    45c0:	98c03fcc 	andi	r3,r19,255
    45c4:	04400434 	movhi	r17,16
    45c8:	8c7fffc4 	addi	r17,r17,-1
    45cc:	180697fa 	slli	r3,r3,31
    45d0:	8460703a 	and	r16,r16,r17
    45d4:	80a0b03a 	or	r16,r16,r2
    45d8:	80c6b03a 	or	r3,r16,r3
    45dc:	b005883a 	mov	r2,r22
    45e0:	dfc01117 	ldw	ra,68(sp)
    45e4:	df001017 	ldw	fp,64(sp)
    45e8:	ddc00f17 	ldw	r23,60(sp)
    45ec:	dd800e17 	ldw	r22,56(sp)
    45f0:	dd400d17 	ldw	r21,52(sp)
    45f4:	dd000c17 	ldw	r20,48(sp)
    45f8:	dcc00b17 	ldw	r19,44(sp)
    45fc:	dc800a17 	ldw	r18,40(sp)
    4600:	dc400917 	ldw	r17,36(sp)
    4604:	dc000817 	ldw	r16,32(sp)
    4608:	dec01204 	addi	sp,sp,72
    460c:	f800283a 	ret
    4610:	2404b03a 	or	r2,r4,r16
    4614:	202b883a 	mov	r21,r4
    4618:	10004426 	beq	r2,zero,472c <__muldf3+0x2ec>
    461c:	80015126 	beq	r16,zero,4b64 <__muldf3+0x724>
    4620:	8009883a 	mov	r4,r16
    4624:	d9800715 	stw	r6,28(sp)
    4628:	d9c00215 	stw	r7,8(sp)
    462c:	da400415 	stw	r9,16(sp)
    4630:	00057040 	call	5704 <__clzsi2>
    4634:	d9800717 	ldw	r6,28(sp)
    4638:	d9c00217 	ldw	r7,8(sp)
    463c:	da400417 	ldw	r9,16(sp)
    4640:	113ffd44 	addi	r4,r2,-11
    4644:	00c00704 	movi	r3,28
    4648:	19014216 	blt	r3,r4,4b54 <__muldf3+0x714>
    464c:	00c00744 	movi	r3,29
    4650:	15bffe04 	addi	r22,r2,-8
    4654:	1907c83a 	sub	r3,r3,r4
    4658:	85a0983a 	sll	r16,r16,r22
    465c:	a8c6d83a 	srl	r3,r21,r3
    4660:	adac983a 	sll	r22,r21,r22
    4664:	1c20b03a 	or	r16,r3,r16
    4668:	1080fcc4 	addi	r2,r2,1011
    466c:	00a9c83a 	sub	r20,zero,r2
    4670:	002b883a 	mov	r21,zero
    4674:	000b883a 	mov	r5,zero
    4678:	003f9006 	br	44bc <__alt_data_end+0xfffd377c>
    467c:	3446b03a 	or	r3,r6,r17
    4680:	1800281e 	bne	r3,zero,4724 <__muldf3+0x2e4>
    4684:	0023883a 	mov	r17,zero
    4688:	0025883a 	mov	r18,zero
    468c:	01c00084 	movi	r7,2
    4690:	003f9c06 	br	4504 <__alt_data_end+0xfffd37c4>
    4694:	3446b03a 	or	r3,r6,r17
    4698:	18001e26 	beq	r3,zero,4714 <__muldf3+0x2d4>
    469c:	88012126 	beq	r17,zero,4b24 <__muldf3+0x6e4>
    46a0:	8809883a 	mov	r4,r17
    46a4:	d9400215 	stw	r5,8(sp)
    46a8:	d9800715 	stw	r6,28(sp)
    46ac:	da400415 	stw	r9,16(sp)
    46b0:	da800315 	stw	r10,12(sp)
    46b4:	00057040 	call	5704 <__clzsi2>
    46b8:	d9400217 	ldw	r5,8(sp)
    46bc:	d9800717 	ldw	r6,28(sp)
    46c0:	da400417 	ldw	r9,16(sp)
    46c4:	da800317 	ldw	r10,12(sp)
    46c8:	113ffd44 	addi	r4,r2,-11
    46cc:	00c00704 	movi	r3,28
    46d0:	19011016 	blt	r3,r4,4b14 <__muldf3+0x6d4>
    46d4:	00c00744 	movi	r3,29
    46d8:	14bffe04 	addi	r18,r2,-8
    46dc:	1907c83a 	sub	r3,r3,r4
    46e0:	8ca2983a 	sll	r17,r17,r18
    46e4:	30c6d83a 	srl	r3,r6,r3
    46e8:	34a4983a 	sll	r18,r6,r18
    46ec:	1c62b03a 	or	r17,r3,r17
    46f0:	1080fcc4 	addi	r2,r2,1011
    46f4:	0085c83a 	sub	r2,zero,r2
    46f8:	000f883a 	mov	r7,zero
    46fc:	003f8106 	br	4504 <__alt_data_end+0xfffd37c4>
    4700:	3027883a 	mov	r19,r6
    4704:	0081ffc4 	movi	r2,2047
    4708:	0021883a 	mov	r16,zero
    470c:	002d883a 	mov	r22,zero
    4710:	003faa06 	br	45bc <__alt_data_end+0xfffd387c>
    4714:	0023883a 	mov	r17,zero
    4718:	0025883a 	mov	r18,zero
    471c:	01c00044 	movi	r7,1
    4720:	003f7806 	br	4504 <__alt_data_end+0xfffd37c4>
    4724:	01c000c4 	movi	r7,3
    4728:	003f7606 	br	4504 <__alt_data_end+0xfffd37c4>
    472c:	05400104 	movi	r21,4
    4730:	0021883a 	mov	r16,zero
    4734:	002d883a 	mov	r22,zero
    4738:	01400044 	movi	r5,1
    473c:	003f5f06 	br	44bc <__alt_data_end+0xfffd377c>
    4740:	05400304 	movi	r21,12
    4744:	014000c4 	movi	r5,3
    4748:	003f5c06 	br	44bc <__alt_data_end+0xfffd377c>
    474c:	04000434 	movhi	r16,16
    4750:	0027883a 	mov	r19,zero
    4754:	843fffc4 	addi	r16,r16,-1
    4758:	05bfffc4 	movi	r22,-1
    475c:	0081ffc4 	movi	r2,2047
    4760:	003f9606 	br	45bc <__alt_data_end+0xfffd387c>
    4764:	8023883a 	mov	r17,r16
    4768:	b025883a 	mov	r18,r22
    476c:	280f883a 	mov	r7,r5
    4770:	003f8806 	br	4594 <__alt_data_end+0xfffd3854>
    4774:	8023883a 	mov	r17,r16
    4778:	b025883a 	mov	r18,r22
    477c:	480d883a 	mov	r6,r9
    4780:	280f883a 	mov	r7,r5
    4784:	003f8306 	br	4594 <__alt_data_end+0xfffd3854>
    4788:	b026d43a 	srli	r19,r22,16
    478c:	902ed43a 	srli	r23,r18,16
    4790:	b5bfffcc 	andi	r22,r22,65535
    4794:	94bfffcc 	andi	r18,r18,65535
    4798:	b00b883a 	mov	r5,r22
    479c:	9009883a 	mov	r4,r18
    47a0:	d8c00515 	stw	r3,20(sp)
    47a4:	d9800715 	stw	r6,28(sp)
    47a8:	da000615 	stw	r8,24(sp)
    47ac:	0002f440 	call	2f44 <__mulsi3>
    47b0:	980b883a 	mov	r5,r19
    47b4:	9009883a 	mov	r4,r18
    47b8:	1029883a 	mov	r20,r2
    47bc:	0002f440 	call	2f44 <__mulsi3>
    47c0:	b80b883a 	mov	r5,r23
    47c4:	9809883a 	mov	r4,r19
    47c8:	102b883a 	mov	r21,r2
    47cc:	0002f440 	call	2f44 <__mulsi3>
    47d0:	b809883a 	mov	r4,r23
    47d4:	b00b883a 	mov	r5,r22
    47d8:	1039883a 	mov	fp,r2
    47dc:	0002f440 	call	2f44 <__mulsi3>
    47e0:	a008d43a 	srli	r4,r20,16
    47e4:	1545883a 	add	r2,r2,r21
    47e8:	d8c00517 	ldw	r3,20(sp)
    47ec:	2085883a 	add	r2,r4,r2
    47f0:	d9800717 	ldw	r6,28(sp)
    47f4:	da000617 	ldw	r8,24(sp)
    47f8:	1540022e 	bgeu	r2,r21,4804 <__muldf3+0x3c4>
    47fc:	01000074 	movhi	r4,1
    4800:	e139883a 	add	fp,fp,r4
    4804:	100e943a 	slli	r7,r2,16
    4808:	1004d43a 	srli	r2,r2,16
    480c:	882ad43a 	srli	r21,r17,16
    4810:	a53fffcc 	andi	r20,r20,65535
    4814:	8c7fffcc 	andi	r17,r17,65535
    4818:	3d29883a 	add	r20,r7,r20
    481c:	b00b883a 	mov	r5,r22
    4820:	8809883a 	mov	r4,r17
    4824:	d8c00515 	stw	r3,20(sp)
    4828:	d9800715 	stw	r6,28(sp)
    482c:	da000615 	stw	r8,24(sp)
    4830:	dd000115 	stw	r20,4(sp)
    4834:	d8800015 	stw	r2,0(sp)
    4838:	0002f440 	call	2f44 <__mulsi3>
    483c:	980b883a 	mov	r5,r19
    4840:	8809883a 	mov	r4,r17
    4844:	d8800215 	stw	r2,8(sp)
    4848:	0002f440 	call	2f44 <__mulsi3>
    484c:	9809883a 	mov	r4,r19
    4850:	a80b883a 	mov	r5,r21
    4854:	1029883a 	mov	r20,r2
    4858:	0002f440 	call	2f44 <__mulsi3>
    485c:	b00b883a 	mov	r5,r22
    4860:	a809883a 	mov	r4,r21
    4864:	d8800415 	stw	r2,16(sp)
    4868:	0002f440 	call	2f44 <__mulsi3>
    486c:	d9c00217 	ldw	r7,8(sp)
    4870:	1505883a 	add	r2,r2,r20
    4874:	d8c00517 	ldw	r3,20(sp)
    4878:	3826d43a 	srli	r19,r7,16
    487c:	d9800717 	ldw	r6,28(sp)
    4880:	da000617 	ldw	r8,24(sp)
    4884:	9885883a 	add	r2,r19,r2
    4888:	da400417 	ldw	r9,16(sp)
    488c:	1500022e 	bgeu	r2,r20,4898 <__muldf3+0x458>
    4890:	01000074 	movhi	r4,1
    4894:	4913883a 	add	r9,r9,r4
    4898:	1028d43a 	srli	r20,r2,16
    489c:	1004943a 	slli	r2,r2,16
    48a0:	802cd43a 	srli	r22,r16,16
    48a4:	843fffcc 	andi	r16,r16,65535
    48a8:	3cffffcc 	andi	r19,r7,65535
    48ac:	9009883a 	mov	r4,r18
    48b0:	800b883a 	mov	r5,r16
    48b4:	a269883a 	add	r20,r20,r9
    48b8:	d8c00515 	stw	r3,20(sp)
    48bc:	d9800715 	stw	r6,28(sp)
    48c0:	da000615 	stw	r8,24(sp)
    48c4:	14e7883a 	add	r19,r2,r19
    48c8:	0002f440 	call	2f44 <__mulsi3>
    48cc:	9009883a 	mov	r4,r18
    48d0:	b00b883a 	mov	r5,r22
    48d4:	d8800315 	stw	r2,12(sp)
    48d8:	0002f440 	call	2f44 <__mulsi3>
    48dc:	b809883a 	mov	r4,r23
    48e0:	b00b883a 	mov	r5,r22
    48e4:	d8800215 	stw	r2,8(sp)
    48e8:	0002f440 	call	2f44 <__mulsi3>
    48ec:	b80b883a 	mov	r5,r23
    48f0:	8009883a 	mov	r4,r16
    48f4:	d8800415 	stw	r2,16(sp)
    48f8:	0002f440 	call	2f44 <__mulsi3>
    48fc:	da800317 	ldw	r10,12(sp)
    4900:	d9c00217 	ldw	r7,8(sp)
    4904:	d9000017 	ldw	r4,0(sp)
    4908:	502ed43a 	srli	r23,r10,16
    490c:	11c5883a 	add	r2,r2,r7
    4910:	24e5883a 	add	r18,r4,r19
    4914:	b885883a 	add	r2,r23,r2
    4918:	d8c00517 	ldw	r3,20(sp)
    491c:	d9800717 	ldw	r6,28(sp)
    4920:	da000617 	ldw	r8,24(sp)
    4924:	da400417 	ldw	r9,16(sp)
    4928:	11c0022e 	bgeu	r2,r7,4934 <__muldf3+0x4f4>
    492c:	01000074 	movhi	r4,1
    4930:	4913883a 	add	r9,r9,r4
    4934:	100ed43a 	srli	r7,r2,16
    4938:	1004943a 	slli	r2,r2,16
    493c:	55ffffcc 	andi	r23,r10,65535
    4940:	3a53883a 	add	r9,r7,r9
    4944:	8809883a 	mov	r4,r17
    4948:	800b883a 	mov	r5,r16
    494c:	d8c00515 	stw	r3,20(sp)
    4950:	d9800715 	stw	r6,28(sp)
    4954:	da000615 	stw	r8,24(sp)
    4958:	da400415 	stw	r9,16(sp)
    495c:	15ef883a 	add	r23,r2,r23
    4960:	0002f440 	call	2f44 <__mulsi3>
    4964:	8809883a 	mov	r4,r17
    4968:	b00b883a 	mov	r5,r22
    496c:	d8800215 	stw	r2,8(sp)
    4970:	0002f440 	call	2f44 <__mulsi3>
    4974:	b00b883a 	mov	r5,r22
    4978:	a809883a 	mov	r4,r21
    497c:	d8800315 	stw	r2,12(sp)
    4980:	0002f440 	call	2f44 <__mulsi3>
    4984:	8009883a 	mov	r4,r16
    4988:	a80b883a 	mov	r5,r21
    498c:	1023883a 	mov	r17,r2
    4990:	0002f440 	call	2f44 <__mulsi3>
    4994:	d9c00217 	ldw	r7,8(sp)
    4998:	da800317 	ldw	r10,12(sp)
    499c:	d8c00517 	ldw	r3,20(sp)
    49a0:	3808d43a 	srli	r4,r7,16
    49a4:	1285883a 	add	r2,r2,r10
    49a8:	d9800717 	ldw	r6,28(sp)
    49ac:	2085883a 	add	r2,r4,r2
    49b0:	da000617 	ldw	r8,24(sp)
    49b4:	da400417 	ldw	r9,16(sp)
    49b8:	1280022e 	bgeu	r2,r10,49c4 <__muldf3+0x584>
    49bc:	01000074 	movhi	r4,1
    49c0:	8923883a 	add	r17,r17,r4
    49c4:	1008943a 	slli	r4,r2,16
    49c8:	39ffffcc 	andi	r7,r7,65535
    49cc:	e4b9883a 	add	fp,fp,r18
    49d0:	21cf883a 	add	r7,r4,r7
    49d4:	e4e7803a 	cmpltu	r19,fp,r19
    49d8:	3d0f883a 	add	r7,r7,r20
    49dc:	bf39883a 	add	fp,r23,fp
    49e0:	99c9883a 	add	r4,r19,r7
    49e4:	e5ef803a 	cmpltu	r23,fp,r23
    49e8:	490b883a 	add	r5,r9,r4
    49ec:	1004d43a 	srli	r2,r2,16
    49f0:	b965883a 	add	r18,r23,r5
    49f4:	24c9803a 	cmpltu	r4,r4,r19
    49f8:	3d29803a 	cmpltu	r20,r7,r20
    49fc:	a128b03a 	or	r20,r20,r4
    4a00:	95ef803a 	cmpltu	r23,r18,r23
    4a04:	2a53803a 	cmpltu	r9,r5,r9
    4a08:	a0a9883a 	add	r20,r20,r2
    4a0c:	4deeb03a 	or	r23,r9,r23
    4a10:	a5ef883a 	add	r23,r20,r23
    4a14:	bc63883a 	add	r17,r23,r17
    4a18:	e004927a 	slli	r2,fp,9
    4a1c:	d9000117 	ldw	r4,4(sp)
    4a20:	882e927a 	slli	r23,r17,9
    4a24:	9022d5fa 	srli	r17,r18,23
    4a28:	e038d5fa 	srli	fp,fp,23
    4a2c:	1104b03a 	or	r2,r2,r4
    4a30:	9024927a 	slli	r18,r18,9
    4a34:	1004c03a 	cmpne	r2,r2,zero
    4a38:	bc62b03a 	or	r17,r23,r17
    4a3c:	1738b03a 	or	fp,r2,fp
    4a40:	8880402c 	andhi	r2,r17,256
    4a44:	e4a4b03a 	or	r18,fp,r18
    4a48:	10000726 	beq	r2,zero,4a68 <__muldf3+0x628>
    4a4c:	9006d07a 	srli	r3,r18,1
    4a50:	880497fa 	slli	r2,r17,31
    4a54:	9480004c 	andi	r18,r18,1
    4a58:	8822d07a 	srli	r17,r17,1
    4a5c:	1ca4b03a 	or	r18,r3,r18
    4a60:	14a4b03a 	or	r18,r2,r18
    4a64:	4007883a 	mov	r3,r8
    4a68:	1880ffc4 	addi	r2,r3,1023
    4a6c:	0080460e 	bge	zero,r2,4b88 <__muldf3+0x748>
    4a70:	910001cc 	andi	r4,r18,7
    4a74:	20000726 	beq	r4,zero,4a94 <__muldf3+0x654>
    4a78:	910003cc 	andi	r4,r18,15
    4a7c:	01400104 	movi	r5,4
    4a80:	21400426 	beq	r4,r5,4a94 <__muldf3+0x654>
    4a84:	9149883a 	add	r4,r18,r5
    4a88:	24a5803a 	cmpltu	r18,r4,r18
    4a8c:	8ca3883a 	add	r17,r17,r18
    4a90:	2025883a 	mov	r18,r4
    4a94:	8900402c 	andhi	r4,r17,256
    4a98:	20000426 	beq	r4,zero,4aac <__muldf3+0x66c>
    4a9c:	18810004 	addi	r2,r3,1024
    4aa0:	00ffc034 	movhi	r3,65280
    4aa4:	18ffffc4 	addi	r3,r3,-1
    4aa8:	88e2703a 	and	r17,r17,r3
    4aac:	00c1ff84 	movi	r3,2046
    4ab0:	18bf1316 	blt	r3,r2,4700 <__alt_data_end+0xfffd39c0>
    4ab4:	882c977a 	slli	r22,r17,29
    4ab8:	9024d0fa 	srli	r18,r18,3
    4abc:	8822927a 	slli	r17,r17,9
    4ac0:	1081ffcc 	andi	r2,r2,2047
    4ac4:	b4acb03a 	or	r22,r22,r18
    4ac8:	8820d33a 	srli	r16,r17,12
    4acc:	3027883a 	mov	r19,r6
    4ad0:	003eba06 	br	45bc <__alt_data_end+0xfffd387c>
    4ad4:	8080022c 	andhi	r2,r16,8
    4ad8:	10000926 	beq	r2,zero,4b00 <__muldf3+0x6c0>
    4adc:	8880022c 	andhi	r2,r17,8
    4ae0:	1000071e 	bne	r2,zero,4b00 <__muldf3+0x6c0>
    4ae4:	00800434 	movhi	r2,16
    4ae8:	8c000234 	orhi	r16,r17,8
    4aec:	10bfffc4 	addi	r2,r2,-1
    4af0:	e027883a 	mov	r19,fp
    4af4:	80a0703a 	and	r16,r16,r2
    4af8:	902d883a 	mov	r22,r18
    4afc:	003f1706 	br	475c <__alt_data_end+0xfffd3a1c>
    4b00:	00800434 	movhi	r2,16
    4b04:	84000234 	orhi	r16,r16,8
    4b08:	10bfffc4 	addi	r2,r2,-1
    4b0c:	80a0703a 	and	r16,r16,r2
    4b10:	003f1206 	br	475c <__alt_data_end+0xfffd3a1c>
    4b14:	147ff604 	addi	r17,r2,-40
    4b18:	3462983a 	sll	r17,r6,r17
    4b1c:	0025883a 	mov	r18,zero
    4b20:	003ef306 	br	46f0 <__alt_data_end+0xfffd39b0>
    4b24:	3009883a 	mov	r4,r6
    4b28:	d9400215 	stw	r5,8(sp)
    4b2c:	d9800715 	stw	r6,28(sp)
    4b30:	da400415 	stw	r9,16(sp)
    4b34:	da800315 	stw	r10,12(sp)
    4b38:	00057040 	call	5704 <__clzsi2>
    4b3c:	10800804 	addi	r2,r2,32
    4b40:	da800317 	ldw	r10,12(sp)
    4b44:	da400417 	ldw	r9,16(sp)
    4b48:	d9800717 	ldw	r6,28(sp)
    4b4c:	d9400217 	ldw	r5,8(sp)
    4b50:	003edd06 	br	46c8 <__alt_data_end+0xfffd3988>
    4b54:	143ff604 	addi	r16,r2,-40
    4b58:	ac20983a 	sll	r16,r21,r16
    4b5c:	002d883a 	mov	r22,zero
    4b60:	003ec106 	br	4668 <__alt_data_end+0xfffd3928>
    4b64:	d9800715 	stw	r6,28(sp)
    4b68:	d9c00215 	stw	r7,8(sp)
    4b6c:	da400415 	stw	r9,16(sp)
    4b70:	00057040 	call	5704 <__clzsi2>
    4b74:	10800804 	addi	r2,r2,32
    4b78:	da400417 	ldw	r9,16(sp)
    4b7c:	d9c00217 	ldw	r7,8(sp)
    4b80:	d9800717 	ldw	r6,28(sp)
    4b84:	003eae06 	br	4640 <__alt_data_end+0xfffd3900>
    4b88:	00c00044 	movi	r3,1
    4b8c:	1887c83a 	sub	r3,r3,r2
    4b90:	01000e04 	movi	r4,56
    4b94:	20fe8516 	blt	r4,r3,45ac <__alt_data_end+0xfffd386c>
    4b98:	010007c4 	movi	r4,31
    4b9c:	20c01b16 	blt	r4,r3,4c0c <__muldf3+0x7cc>
    4ba0:	00800804 	movi	r2,32
    4ba4:	10c5c83a 	sub	r2,r2,r3
    4ba8:	888a983a 	sll	r5,r17,r2
    4bac:	90c8d83a 	srl	r4,r18,r3
    4bb0:	9084983a 	sll	r2,r18,r2
    4bb4:	88e2d83a 	srl	r17,r17,r3
    4bb8:	2906b03a 	or	r3,r5,r4
    4bbc:	1004c03a 	cmpne	r2,r2,zero
    4bc0:	1886b03a 	or	r3,r3,r2
    4bc4:	188001cc 	andi	r2,r3,7
    4bc8:	10000726 	beq	r2,zero,4be8 <__muldf3+0x7a8>
    4bcc:	188003cc 	andi	r2,r3,15
    4bd0:	01000104 	movi	r4,4
    4bd4:	11000426 	beq	r2,r4,4be8 <__muldf3+0x7a8>
    4bd8:	1805883a 	mov	r2,r3
    4bdc:	10c00104 	addi	r3,r2,4
    4be0:	1885803a 	cmpltu	r2,r3,r2
    4be4:	88a3883a 	add	r17,r17,r2
    4be8:	8880202c 	andhi	r2,r17,128
    4bec:	10001c26 	beq	r2,zero,4c60 <__muldf3+0x820>
    4bf0:	3027883a 	mov	r19,r6
    4bf4:	00800044 	movi	r2,1
    4bf8:	0021883a 	mov	r16,zero
    4bfc:	002d883a 	mov	r22,zero
    4c00:	003e6e06 	br	45bc <__alt_data_end+0xfffd387c>
    4c04:	4007883a 	mov	r3,r8
    4c08:	003f9706 	br	4a68 <__alt_data_end+0xfffd3d28>
    4c0c:	017ff844 	movi	r5,-31
    4c10:	2885c83a 	sub	r2,r5,r2
    4c14:	888ad83a 	srl	r5,r17,r2
    4c18:	00800804 	movi	r2,32
    4c1c:	18801a26 	beq	r3,r2,4c88 <__muldf3+0x848>
    4c20:	01001004 	movi	r4,64
    4c24:	20c7c83a 	sub	r3,r4,r3
    4c28:	88e2983a 	sll	r17,r17,r3
    4c2c:	8ca4b03a 	or	r18,r17,r18
    4c30:	9004c03a 	cmpne	r2,r18,zero
    4c34:	2884b03a 	or	r2,r5,r2
    4c38:	144001cc 	andi	r17,r2,7
    4c3c:	88000d1e 	bne	r17,zero,4c74 <__muldf3+0x834>
    4c40:	0021883a 	mov	r16,zero
    4c44:	102cd0fa 	srli	r22,r2,3
    4c48:	3027883a 	mov	r19,r6
    4c4c:	0005883a 	mov	r2,zero
    4c50:	b46cb03a 	or	r22,r22,r17
    4c54:	003e5906 	br	45bc <__alt_data_end+0xfffd387c>
    4c58:	1007883a 	mov	r3,r2
    4c5c:	0023883a 	mov	r17,zero
    4c60:	8820927a 	slli	r16,r17,9
    4c64:	1805883a 	mov	r2,r3
    4c68:	8822977a 	slli	r17,r17,29
    4c6c:	8020d33a 	srli	r16,r16,12
    4c70:	003ff406 	br	4c44 <__alt_data_end+0xfffd3f04>
    4c74:	10c003cc 	andi	r3,r2,15
    4c78:	01000104 	movi	r4,4
    4c7c:	193ff626 	beq	r3,r4,4c58 <__alt_data_end+0xfffd3f18>
    4c80:	0023883a 	mov	r17,zero
    4c84:	003fd506 	br	4bdc <__alt_data_end+0xfffd3e9c>
    4c88:	0023883a 	mov	r17,zero
    4c8c:	003fe706 	br	4c2c <__alt_data_end+0xfffd3eec>
    4c90:	00800434 	movhi	r2,16
    4c94:	8c000234 	orhi	r16,r17,8
    4c98:	10bfffc4 	addi	r2,r2,-1
    4c9c:	3027883a 	mov	r19,r6
    4ca0:	80a0703a 	and	r16,r16,r2
    4ca4:	902d883a 	mov	r22,r18
    4ca8:	003eac06 	br	475c <__alt_data_end+0xfffd3a1c>

00004cac <__subdf3>:
    4cac:	02000434 	movhi	r8,16
    4cb0:	423fffc4 	addi	r8,r8,-1
    4cb4:	defffb04 	addi	sp,sp,-20
    4cb8:	2a14703a 	and	r10,r5,r8
    4cbc:	3812d53a 	srli	r9,r7,20
    4cc0:	3a10703a 	and	r8,r7,r8
    4cc4:	2006d77a 	srli	r3,r4,29
    4cc8:	3004d77a 	srli	r2,r6,29
    4ccc:	dc000015 	stw	r16,0(sp)
    4cd0:	501490fa 	slli	r10,r10,3
    4cd4:	2820d53a 	srli	r16,r5,20
    4cd8:	401090fa 	slli	r8,r8,3
    4cdc:	dc800215 	stw	r18,8(sp)
    4ce0:	dc400115 	stw	r17,4(sp)
    4ce4:	dfc00415 	stw	ra,16(sp)
    4ce8:	202290fa 	slli	r17,r4,3
    4cec:	dcc00315 	stw	r19,12(sp)
    4cf0:	4a41ffcc 	andi	r9,r9,2047
    4cf4:	0101ffc4 	movi	r4,2047
    4cf8:	2824d7fa 	srli	r18,r5,31
    4cfc:	8401ffcc 	andi	r16,r16,2047
    4d00:	50c6b03a 	or	r3,r10,r3
    4d04:	380ed7fa 	srli	r7,r7,31
    4d08:	408ab03a 	or	r5,r8,r2
    4d0c:	300c90fa 	slli	r6,r6,3
    4d10:	49009626 	beq	r9,r4,4f6c <__subdf3+0x2c0>
    4d14:	39c0005c 	xori	r7,r7,1
    4d18:	8245c83a 	sub	r2,r16,r9
    4d1c:	3c807426 	beq	r7,r18,4ef0 <__subdf3+0x244>
    4d20:	0080af0e 	bge	zero,r2,4fe0 <__subdf3+0x334>
    4d24:	48002a1e 	bne	r9,zero,4dd0 <__subdf3+0x124>
    4d28:	2988b03a 	or	r4,r5,r6
    4d2c:	20009a1e 	bne	r4,zero,4f98 <__subdf3+0x2ec>
    4d30:	888001cc 	andi	r2,r17,7
    4d34:	10000726 	beq	r2,zero,4d54 <__subdf3+0xa8>
    4d38:	888003cc 	andi	r2,r17,15
    4d3c:	01000104 	movi	r4,4
    4d40:	11000426 	beq	r2,r4,4d54 <__subdf3+0xa8>
    4d44:	890b883a 	add	r5,r17,r4
    4d48:	2c63803a 	cmpltu	r17,r5,r17
    4d4c:	1c47883a 	add	r3,r3,r17
    4d50:	2823883a 	mov	r17,r5
    4d54:	1880202c 	andhi	r2,r3,128
    4d58:	10005926 	beq	r2,zero,4ec0 <__subdf3+0x214>
    4d5c:	84000044 	addi	r16,r16,1
    4d60:	0081ffc4 	movi	r2,2047
    4d64:	8080be26 	beq	r16,r2,5060 <__subdf3+0x3b4>
    4d68:	017fe034 	movhi	r5,65408
    4d6c:	297fffc4 	addi	r5,r5,-1
    4d70:	1946703a 	and	r3,r3,r5
    4d74:	1804977a 	slli	r2,r3,29
    4d78:	1806927a 	slli	r3,r3,9
    4d7c:	8822d0fa 	srli	r17,r17,3
    4d80:	8401ffcc 	andi	r16,r16,2047
    4d84:	180ad33a 	srli	r5,r3,12
    4d88:	9100004c 	andi	r4,r18,1
    4d8c:	1444b03a 	or	r2,r2,r17
    4d90:	80c1ffcc 	andi	r3,r16,2047
    4d94:	1820953a 	slli	r16,r3,20
    4d98:	20c03fcc 	andi	r3,r4,255
    4d9c:	180897fa 	slli	r4,r3,31
    4da0:	00c00434 	movhi	r3,16
    4da4:	18ffffc4 	addi	r3,r3,-1
    4da8:	28c6703a 	and	r3,r5,r3
    4dac:	1c06b03a 	or	r3,r3,r16
    4db0:	1906b03a 	or	r3,r3,r4
    4db4:	dfc00417 	ldw	ra,16(sp)
    4db8:	dcc00317 	ldw	r19,12(sp)
    4dbc:	dc800217 	ldw	r18,8(sp)
    4dc0:	dc400117 	ldw	r17,4(sp)
    4dc4:	dc000017 	ldw	r16,0(sp)
    4dc8:	dec00504 	addi	sp,sp,20
    4dcc:	f800283a 	ret
    4dd0:	0101ffc4 	movi	r4,2047
    4dd4:	813fd626 	beq	r16,r4,4d30 <__alt_data_end+0xfffd3ff0>
    4dd8:	29402034 	orhi	r5,r5,128
    4ddc:	01000e04 	movi	r4,56
    4de0:	2080a316 	blt	r4,r2,5070 <__subdf3+0x3c4>
    4de4:	010007c4 	movi	r4,31
    4de8:	2080c616 	blt	r4,r2,5104 <__subdf3+0x458>
    4dec:	01000804 	movi	r4,32
    4df0:	2089c83a 	sub	r4,r4,r2
    4df4:	2910983a 	sll	r8,r5,r4
    4df8:	308ed83a 	srl	r7,r6,r2
    4dfc:	3108983a 	sll	r4,r6,r4
    4e00:	2884d83a 	srl	r2,r5,r2
    4e04:	41ccb03a 	or	r6,r8,r7
    4e08:	2008c03a 	cmpne	r4,r4,zero
    4e0c:	310cb03a 	or	r6,r6,r4
    4e10:	898dc83a 	sub	r6,r17,r6
    4e14:	89a3803a 	cmpltu	r17,r17,r6
    4e18:	1887c83a 	sub	r3,r3,r2
    4e1c:	1c47c83a 	sub	r3,r3,r17
    4e20:	3023883a 	mov	r17,r6
    4e24:	1880202c 	andhi	r2,r3,128
    4e28:	10002326 	beq	r2,zero,4eb8 <__subdf3+0x20c>
    4e2c:	04c02034 	movhi	r19,128
    4e30:	9cffffc4 	addi	r19,r19,-1
    4e34:	1ce6703a 	and	r19,r3,r19
    4e38:	98007a26 	beq	r19,zero,5024 <__subdf3+0x378>
    4e3c:	9809883a 	mov	r4,r19
    4e40:	00057040 	call	5704 <__clzsi2>
    4e44:	113ffe04 	addi	r4,r2,-8
    4e48:	00c007c4 	movi	r3,31
    4e4c:	19007b16 	blt	r3,r4,503c <__subdf3+0x390>
    4e50:	00800804 	movi	r2,32
    4e54:	1105c83a 	sub	r2,r2,r4
    4e58:	8884d83a 	srl	r2,r17,r2
    4e5c:	9906983a 	sll	r3,r19,r4
    4e60:	8922983a 	sll	r17,r17,r4
    4e64:	10c4b03a 	or	r2,r2,r3
    4e68:	24007816 	blt	r4,r16,504c <__subdf3+0x3a0>
    4e6c:	2421c83a 	sub	r16,r4,r16
    4e70:	80c00044 	addi	r3,r16,1
    4e74:	010007c4 	movi	r4,31
    4e78:	20c09516 	blt	r4,r3,50d0 <__subdf3+0x424>
    4e7c:	01400804 	movi	r5,32
    4e80:	28cbc83a 	sub	r5,r5,r3
    4e84:	88c8d83a 	srl	r4,r17,r3
    4e88:	8962983a 	sll	r17,r17,r5
    4e8c:	114a983a 	sll	r5,r2,r5
    4e90:	10c6d83a 	srl	r3,r2,r3
    4e94:	8804c03a 	cmpne	r2,r17,zero
    4e98:	290ab03a 	or	r5,r5,r4
    4e9c:	28a2b03a 	or	r17,r5,r2
    4ea0:	0021883a 	mov	r16,zero
    4ea4:	003fa206 	br	4d30 <__alt_data_end+0xfffd3ff0>
    4ea8:	2090b03a 	or	r8,r4,r2
    4eac:	40018e26 	beq	r8,zero,54e8 <__subdf3+0x83c>
    4eb0:	1007883a 	mov	r3,r2
    4eb4:	2023883a 	mov	r17,r4
    4eb8:	888001cc 	andi	r2,r17,7
    4ebc:	103f9e1e 	bne	r2,zero,4d38 <__alt_data_end+0xfffd3ff8>
    4ec0:	1804977a 	slli	r2,r3,29
    4ec4:	8822d0fa 	srli	r17,r17,3
    4ec8:	1810d0fa 	srli	r8,r3,3
    4ecc:	9100004c 	andi	r4,r18,1
    4ed0:	1444b03a 	or	r2,r2,r17
    4ed4:	00c1ffc4 	movi	r3,2047
    4ed8:	80c02826 	beq	r16,r3,4f7c <__subdf3+0x2d0>
    4edc:	01400434 	movhi	r5,16
    4ee0:	297fffc4 	addi	r5,r5,-1
    4ee4:	80e0703a 	and	r16,r16,r3
    4ee8:	414a703a 	and	r5,r8,r5
    4eec:	003fa806 	br	4d90 <__alt_data_end+0xfffd4050>
    4ef0:	0080630e 	bge	zero,r2,5080 <__subdf3+0x3d4>
    4ef4:	48003026 	beq	r9,zero,4fb8 <__subdf3+0x30c>
    4ef8:	0101ffc4 	movi	r4,2047
    4efc:	813f8c26 	beq	r16,r4,4d30 <__alt_data_end+0xfffd3ff0>
    4f00:	29402034 	orhi	r5,r5,128
    4f04:	01000e04 	movi	r4,56
    4f08:	2080a90e 	bge	r4,r2,51b0 <__subdf3+0x504>
    4f0c:	298cb03a 	or	r6,r5,r6
    4f10:	3012c03a 	cmpne	r9,r6,zero
    4f14:	0005883a 	mov	r2,zero
    4f18:	4c53883a 	add	r9,r9,r17
    4f1c:	4c63803a 	cmpltu	r17,r9,r17
    4f20:	10c7883a 	add	r3,r2,r3
    4f24:	88c7883a 	add	r3,r17,r3
    4f28:	4823883a 	mov	r17,r9
    4f2c:	1880202c 	andhi	r2,r3,128
    4f30:	1000d026 	beq	r2,zero,5274 <__subdf3+0x5c8>
    4f34:	84000044 	addi	r16,r16,1
    4f38:	0081ffc4 	movi	r2,2047
    4f3c:	8080fe26 	beq	r16,r2,5338 <__subdf3+0x68c>
    4f40:	00bfe034 	movhi	r2,65408
    4f44:	10bfffc4 	addi	r2,r2,-1
    4f48:	1886703a 	and	r3,r3,r2
    4f4c:	880ad07a 	srli	r5,r17,1
    4f50:	180497fa 	slli	r2,r3,31
    4f54:	8900004c 	andi	r4,r17,1
    4f58:	2922b03a 	or	r17,r5,r4
    4f5c:	1806d07a 	srli	r3,r3,1
    4f60:	1462b03a 	or	r17,r2,r17
    4f64:	3825883a 	mov	r18,r7
    4f68:	003f7106 	br	4d30 <__alt_data_end+0xfffd3ff0>
    4f6c:	2984b03a 	or	r2,r5,r6
    4f70:	103f6826 	beq	r2,zero,4d14 <__alt_data_end+0xfffd3fd4>
    4f74:	39c03fcc 	andi	r7,r7,255
    4f78:	003f6706 	br	4d18 <__alt_data_end+0xfffd3fd8>
    4f7c:	4086b03a 	or	r3,r8,r2
    4f80:	18015226 	beq	r3,zero,54cc <__subdf3+0x820>
    4f84:	00c00434 	movhi	r3,16
    4f88:	41400234 	orhi	r5,r8,8
    4f8c:	18ffffc4 	addi	r3,r3,-1
    4f90:	28ca703a 	and	r5,r5,r3
    4f94:	003f7e06 	br	4d90 <__alt_data_end+0xfffd4050>
    4f98:	10bfffc4 	addi	r2,r2,-1
    4f9c:	1000491e 	bne	r2,zero,50c4 <__subdf3+0x418>
    4fa0:	898fc83a 	sub	r7,r17,r6
    4fa4:	89e3803a 	cmpltu	r17,r17,r7
    4fa8:	1947c83a 	sub	r3,r3,r5
    4fac:	1c47c83a 	sub	r3,r3,r17
    4fb0:	3823883a 	mov	r17,r7
    4fb4:	003f9b06 	br	4e24 <__alt_data_end+0xfffd40e4>
    4fb8:	2988b03a 	or	r4,r5,r6
    4fbc:	203f5c26 	beq	r4,zero,4d30 <__alt_data_end+0xfffd3ff0>
    4fc0:	10bfffc4 	addi	r2,r2,-1
    4fc4:	1000931e 	bne	r2,zero,5214 <__subdf3+0x568>
    4fc8:	898d883a 	add	r6,r17,r6
    4fcc:	3463803a 	cmpltu	r17,r6,r17
    4fd0:	1947883a 	add	r3,r3,r5
    4fd4:	88c7883a 	add	r3,r17,r3
    4fd8:	3023883a 	mov	r17,r6
    4fdc:	003fd306 	br	4f2c <__alt_data_end+0xfffd41ec>
    4fe0:	1000541e 	bne	r2,zero,5134 <__subdf3+0x488>
    4fe4:	80800044 	addi	r2,r16,1
    4fe8:	1081ffcc 	andi	r2,r2,2047
    4fec:	01000044 	movi	r4,1
    4ff0:	2080a20e 	bge	r4,r2,527c <__subdf3+0x5d0>
    4ff4:	8989c83a 	sub	r4,r17,r6
    4ff8:	8905803a 	cmpltu	r2,r17,r4
    4ffc:	1967c83a 	sub	r19,r3,r5
    5000:	98a7c83a 	sub	r19,r19,r2
    5004:	9880202c 	andhi	r2,r19,128
    5008:	10006326 	beq	r2,zero,5198 <__subdf3+0x4ec>
    500c:	3463c83a 	sub	r17,r6,r17
    5010:	28c7c83a 	sub	r3,r5,r3
    5014:	344d803a 	cmpltu	r6,r6,r17
    5018:	19a7c83a 	sub	r19,r3,r6
    501c:	3825883a 	mov	r18,r7
    5020:	983f861e 	bne	r19,zero,4e3c <__alt_data_end+0xfffd40fc>
    5024:	8809883a 	mov	r4,r17
    5028:	00057040 	call	5704 <__clzsi2>
    502c:	10800804 	addi	r2,r2,32
    5030:	113ffe04 	addi	r4,r2,-8
    5034:	00c007c4 	movi	r3,31
    5038:	193f850e 	bge	r3,r4,4e50 <__alt_data_end+0xfffd4110>
    503c:	10bff604 	addi	r2,r2,-40
    5040:	8884983a 	sll	r2,r17,r2
    5044:	0023883a 	mov	r17,zero
    5048:	243f880e 	bge	r4,r16,4e6c <__alt_data_end+0xfffd412c>
    504c:	00ffe034 	movhi	r3,65408
    5050:	18ffffc4 	addi	r3,r3,-1
    5054:	8121c83a 	sub	r16,r16,r4
    5058:	10c6703a 	and	r3,r2,r3
    505c:	003f3406 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5060:	9100004c 	andi	r4,r18,1
    5064:	000b883a 	mov	r5,zero
    5068:	0005883a 	mov	r2,zero
    506c:	003f4806 	br	4d90 <__alt_data_end+0xfffd4050>
    5070:	298cb03a 	or	r6,r5,r6
    5074:	300cc03a 	cmpne	r6,r6,zero
    5078:	0005883a 	mov	r2,zero
    507c:	003f6406 	br	4e10 <__alt_data_end+0xfffd40d0>
    5080:	10009a1e 	bne	r2,zero,52ec <__subdf3+0x640>
    5084:	82400044 	addi	r9,r16,1
    5088:	4881ffcc 	andi	r2,r9,2047
    508c:	02800044 	movi	r10,1
    5090:	5080670e 	bge	r10,r2,5230 <__subdf3+0x584>
    5094:	0081ffc4 	movi	r2,2047
    5098:	4880af26 	beq	r9,r2,5358 <__subdf3+0x6ac>
    509c:	898d883a 	add	r6,r17,r6
    50a0:	1945883a 	add	r2,r3,r5
    50a4:	3447803a 	cmpltu	r3,r6,r17
    50a8:	1887883a 	add	r3,r3,r2
    50ac:	182297fa 	slli	r17,r3,31
    50b0:	300cd07a 	srli	r6,r6,1
    50b4:	1806d07a 	srli	r3,r3,1
    50b8:	4821883a 	mov	r16,r9
    50bc:	89a2b03a 	or	r17,r17,r6
    50c0:	003f1b06 	br	4d30 <__alt_data_end+0xfffd3ff0>
    50c4:	0101ffc4 	movi	r4,2047
    50c8:	813f441e 	bne	r16,r4,4ddc <__alt_data_end+0xfffd409c>
    50cc:	003f1806 	br	4d30 <__alt_data_end+0xfffd3ff0>
    50d0:	843ff844 	addi	r16,r16,-31
    50d4:	01400804 	movi	r5,32
    50d8:	1408d83a 	srl	r4,r2,r16
    50dc:	19405026 	beq	r3,r5,5220 <__subdf3+0x574>
    50e0:	01401004 	movi	r5,64
    50e4:	28c7c83a 	sub	r3,r5,r3
    50e8:	10c4983a 	sll	r2,r2,r3
    50ec:	88a2b03a 	or	r17,r17,r2
    50f0:	8822c03a 	cmpne	r17,r17,zero
    50f4:	2462b03a 	or	r17,r4,r17
    50f8:	0007883a 	mov	r3,zero
    50fc:	0021883a 	mov	r16,zero
    5100:	003f6d06 	br	4eb8 <__alt_data_end+0xfffd4178>
    5104:	11fff804 	addi	r7,r2,-32
    5108:	01000804 	movi	r4,32
    510c:	29ced83a 	srl	r7,r5,r7
    5110:	11004526 	beq	r2,r4,5228 <__subdf3+0x57c>
    5114:	01001004 	movi	r4,64
    5118:	2089c83a 	sub	r4,r4,r2
    511c:	2904983a 	sll	r2,r5,r4
    5120:	118cb03a 	or	r6,r2,r6
    5124:	300cc03a 	cmpne	r6,r6,zero
    5128:	398cb03a 	or	r6,r7,r6
    512c:	0005883a 	mov	r2,zero
    5130:	003f3706 	br	4e10 <__alt_data_end+0xfffd40d0>
    5134:	80002a26 	beq	r16,zero,51e0 <__subdf3+0x534>
    5138:	0101ffc4 	movi	r4,2047
    513c:	49006626 	beq	r9,r4,52d8 <__subdf3+0x62c>
    5140:	0085c83a 	sub	r2,zero,r2
    5144:	18c02034 	orhi	r3,r3,128
    5148:	01000e04 	movi	r4,56
    514c:	20807e16 	blt	r4,r2,5348 <__subdf3+0x69c>
    5150:	010007c4 	movi	r4,31
    5154:	2080e716 	blt	r4,r2,54f4 <__subdf3+0x848>
    5158:	01000804 	movi	r4,32
    515c:	2089c83a 	sub	r4,r4,r2
    5160:	1914983a 	sll	r10,r3,r4
    5164:	8890d83a 	srl	r8,r17,r2
    5168:	8908983a 	sll	r4,r17,r4
    516c:	1884d83a 	srl	r2,r3,r2
    5170:	5222b03a 	or	r17,r10,r8
    5174:	2006c03a 	cmpne	r3,r4,zero
    5178:	88e2b03a 	or	r17,r17,r3
    517c:	3463c83a 	sub	r17,r6,r17
    5180:	2885c83a 	sub	r2,r5,r2
    5184:	344d803a 	cmpltu	r6,r6,r17
    5188:	1187c83a 	sub	r3,r2,r6
    518c:	4821883a 	mov	r16,r9
    5190:	3825883a 	mov	r18,r7
    5194:	003f2306 	br	4e24 <__alt_data_end+0xfffd40e4>
    5198:	24d0b03a 	or	r8,r4,r19
    519c:	40001b1e 	bne	r8,zero,520c <__subdf3+0x560>
    51a0:	0005883a 	mov	r2,zero
    51a4:	0009883a 	mov	r4,zero
    51a8:	0021883a 	mov	r16,zero
    51ac:	003f4906 	br	4ed4 <__alt_data_end+0xfffd4194>
    51b0:	010007c4 	movi	r4,31
    51b4:	20803a16 	blt	r4,r2,52a0 <__subdf3+0x5f4>
    51b8:	01000804 	movi	r4,32
    51bc:	2089c83a 	sub	r4,r4,r2
    51c0:	2912983a 	sll	r9,r5,r4
    51c4:	3090d83a 	srl	r8,r6,r2
    51c8:	3108983a 	sll	r4,r6,r4
    51cc:	2884d83a 	srl	r2,r5,r2
    51d0:	4a12b03a 	or	r9,r9,r8
    51d4:	2008c03a 	cmpne	r4,r4,zero
    51d8:	4912b03a 	or	r9,r9,r4
    51dc:	003f4e06 	br	4f18 <__alt_data_end+0xfffd41d8>
    51e0:	1c48b03a 	or	r4,r3,r17
    51e4:	20003c26 	beq	r4,zero,52d8 <__subdf3+0x62c>
    51e8:	0084303a 	nor	r2,zero,r2
    51ec:	1000381e 	bne	r2,zero,52d0 <__subdf3+0x624>
    51f0:	3463c83a 	sub	r17,r6,r17
    51f4:	28c5c83a 	sub	r2,r5,r3
    51f8:	344d803a 	cmpltu	r6,r6,r17
    51fc:	1187c83a 	sub	r3,r2,r6
    5200:	4821883a 	mov	r16,r9
    5204:	3825883a 	mov	r18,r7
    5208:	003f0606 	br	4e24 <__alt_data_end+0xfffd40e4>
    520c:	2023883a 	mov	r17,r4
    5210:	003f0906 	br	4e38 <__alt_data_end+0xfffd40f8>
    5214:	0101ffc4 	movi	r4,2047
    5218:	813f3a1e 	bne	r16,r4,4f04 <__alt_data_end+0xfffd41c4>
    521c:	003ec406 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5220:	0005883a 	mov	r2,zero
    5224:	003fb106 	br	50ec <__alt_data_end+0xfffd43ac>
    5228:	0005883a 	mov	r2,zero
    522c:	003fbc06 	br	5120 <__alt_data_end+0xfffd43e0>
    5230:	1c44b03a 	or	r2,r3,r17
    5234:	80008e1e 	bne	r16,zero,5470 <__subdf3+0x7c4>
    5238:	1000c826 	beq	r2,zero,555c <__subdf3+0x8b0>
    523c:	2984b03a 	or	r2,r5,r6
    5240:	103ebb26 	beq	r2,zero,4d30 <__alt_data_end+0xfffd3ff0>
    5244:	8989883a 	add	r4,r17,r6
    5248:	1945883a 	add	r2,r3,r5
    524c:	2447803a 	cmpltu	r3,r4,r17
    5250:	1887883a 	add	r3,r3,r2
    5254:	1880202c 	andhi	r2,r3,128
    5258:	2023883a 	mov	r17,r4
    525c:	103f1626 	beq	r2,zero,4eb8 <__alt_data_end+0xfffd4178>
    5260:	00bfe034 	movhi	r2,65408
    5264:	10bfffc4 	addi	r2,r2,-1
    5268:	5021883a 	mov	r16,r10
    526c:	1886703a 	and	r3,r3,r2
    5270:	003eaf06 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5274:	3825883a 	mov	r18,r7
    5278:	003f0f06 	br	4eb8 <__alt_data_end+0xfffd4178>
    527c:	1c44b03a 	or	r2,r3,r17
    5280:	8000251e 	bne	r16,zero,5318 <__subdf3+0x66c>
    5284:	1000661e 	bne	r2,zero,5420 <__subdf3+0x774>
    5288:	2990b03a 	or	r8,r5,r6
    528c:	40009626 	beq	r8,zero,54e8 <__subdf3+0x83c>
    5290:	2807883a 	mov	r3,r5
    5294:	3023883a 	mov	r17,r6
    5298:	3825883a 	mov	r18,r7
    529c:	003ea406 	br	4d30 <__alt_data_end+0xfffd3ff0>
    52a0:	127ff804 	addi	r9,r2,-32
    52a4:	01000804 	movi	r4,32
    52a8:	2a52d83a 	srl	r9,r5,r9
    52ac:	11008c26 	beq	r2,r4,54e0 <__subdf3+0x834>
    52b0:	01001004 	movi	r4,64
    52b4:	2085c83a 	sub	r2,r4,r2
    52b8:	2884983a 	sll	r2,r5,r2
    52bc:	118cb03a 	or	r6,r2,r6
    52c0:	300cc03a 	cmpne	r6,r6,zero
    52c4:	4992b03a 	or	r9,r9,r6
    52c8:	0005883a 	mov	r2,zero
    52cc:	003f1206 	br	4f18 <__alt_data_end+0xfffd41d8>
    52d0:	0101ffc4 	movi	r4,2047
    52d4:	493f9c1e 	bne	r9,r4,5148 <__alt_data_end+0xfffd4408>
    52d8:	2807883a 	mov	r3,r5
    52dc:	3023883a 	mov	r17,r6
    52e0:	4821883a 	mov	r16,r9
    52e4:	3825883a 	mov	r18,r7
    52e8:	003e9106 	br	4d30 <__alt_data_end+0xfffd3ff0>
    52ec:	80001f1e 	bne	r16,zero,536c <__subdf3+0x6c0>
    52f0:	1c48b03a 	or	r4,r3,r17
    52f4:	20005a26 	beq	r4,zero,5460 <__subdf3+0x7b4>
    52f8:	0084303a 	nor	r2,zero,r2
    52fc:	1000561e 	bne	r2,zero,5458 <__subdf3+0x7ac>
    5300:	89a3883a 	add	r17,r17,r6
    5304:	1945883a 	add	r2,r3,r5
    5308:	898d803a 	cmpltu	r6,r17,r6
    530c:	3087883a 	add	r3,r6,r2
    5310:	4821883a 	mov	r16,r9
    5314:	003f0506 	br	4f2c <__alt_data_end+0xfffd41ec>
    5318:	10002b1e 	bne	r2,zero,53c8 <__subdf3+0x71c>
    531c:	2984b03a 	or	r2,r5,r6
    5320:	10008026 	beq	r2,zero,5524 <__subdf3+0x878>
    5324:	2807883a 	mov	r3,r5
    5328:	3023883a 	mov	r17,r6
    532c:	3825883a 	mov	r18,r7
    5330:	0401ffc4 	movi	r16,2047
    5334:	003e7e06 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5338:	3809883a 	mov	r4,r7
    533c:	0011883a 	mov	r8,zero
    5340:	0005883a 	mov	r2,zero
    5344:	003ee306 	br	4ed4 <__alt_data_end+0xfffd4194>
    5348:	1c62b03a 	or	r17,r3,r17
    534c:	8822c03a 	cmpne	r17,r17,zero
    5350:	0005883a 	mov	r2,zero
    5354:	003f8906 	br	517c <__alt_data_end+0xfffd443c>
    5358:	3809883a 	mov	r4,r7
    535c:	4821883a 	mov	r16,r9
    5360:	0011883a 	mov	r8,zero
    5364:	0005883a 	mov	r2,zero
    5368:	003eda06 	br	4ed4 <__alt_data_end+0xfffd4194>
    536c:	0101ffc4 	movi	r4,2047
    5370:	49003b26 	beq	r9,r4,5460 <__subdf3+0x7b4>
    5374:	0085c83a 	sub	r2,zero,r2
    5378:	18c02034 	orhi	r3,r3,128
    537c:	01000e04 	movi	r4,56
    5380:	20806e16 	blt	r4,r2,553c <__subdf3+0x890>
    5384:	010007c4 	movi	r4,31
    5388:	20807716 	blt	r4,r2,5568 <__subdf3+0x8bc>
    538c:	01000804 	movi	r4,32
    5390:	2089c83a 	sub	r4,r4,r2
    5394:	1914983a 	sll	r10,r3,r4
    5398:	8890d83a 	srl	r8,r17,r2
    539c:	8908983a 	sll	r4,r17,r4
    53a0:	1884d83a 	srl	r2,r3,r2
    53a4:	5222b03a 	or	r17,r10,r8
    53a8:	2006c03a 	cmpne	r3,r4,zero
    53ac:	88e2b03a 	or	r17,r17,r3
    53b0:	89a3883a 	add	r17,r17,r6
    53b4:	1145883a 	add	r2,r2,r5
    53b8:	898d803a 	cmpltu	r6,r17,r6
    53bc:	3087883a 	add	r3,r6,r2
    53c0:	4821883a 	mov	r16,r9
    53c4:	003ed906 	br	4f2c <__alt_data_end+0xfffd41ec>
    53c8:	2984b03a 	or	r2,r5,r6
    53cc:	10004226 	beq	r2,zero,54d8 <__subdf3+0x82c>
    53d0:	1808d0fa 	srli	r4,r3,3
    53d4:	8822d0fa 	srli	r17,r17,3
    53d8:	1806977a 	slli	r3,r3,29
    53dc:	2080022c 	andhi	r2,r4,8
    53e0:	1c62b03a 	or	r17,r3,r17
    53e4:	10000826 	beq	r2,zero,5408 <__subdf3+0x75c>
    53e8:	2812d0fa 	srli	r9,r5,3
    53ec:	4880022c 	andhi	r2,r9,8
    53f0:	1000051e 	bne	r2,zero,5408 <__subdf3+0x75c>
    53f4:	300cd0fa 	srli	r6,r6,3
    53f8:	2804977a 	slli	r2,r5,29
    53fc:	4809883a 	mov	r4,r9
    5400:	3825883a 	mov	r18,r7
    5404:	11a2b03a 	or	r17,r2,r6
    5408:	8806d77a 	srli	r3,r17,29
    540c:	200890fa 	slli	r4,r4,3
    5410:	882290fa 	slli	r17,r17,3
    5414:	0401ffc4 	movi	r16,2047
    5418:	1906b03a 	or	r3,r3,r4
    541c:	003e4406 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5420:	2984b03a 	or	r2,r5,r6
    5424:	103e4226 	beq	r2,zero,4d30 <__alt_data_end+0xfffd3ff0>
    5428:	8989c83a 	sub	r4,r17,r6
    542c:	8911803a 	cmpltu	r8,r17,r4
    5430:	1945c83a 	sub	r2,r3,r5
    5434:	1205c83a 	sub	r2,r2,r8
    5438:	1200202c 	andhi	r8,r2,128
    543c:	403e9a26 	beq	r8,zero,4ea8 <__alt_data_end+0xfffd4168>
    5440:	3463c83a 	sub	r17,r6,r17
    5444:	28c5c83a 	sub	r2,r5,r3
    5448:	344d803a 	cmpltu	r6,r6,r17
    544c:	1187c83a 	sub	r3,r2,r6
    5450:	3825883a 	mov	r18,r7
    5454:	003e3606 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5458:	0101ffc4 	movi	r4,2047
    545c:	493fc71e 	bne	r9,r4,537c <__alt_data_end+0xfffd463c>
    5460:	2807883a 	mov	r3,r5
    5464:	3023883a 	mov	r17,r6
    5468:	4821883a 	mov	r16,r9
    546c:	003e3006 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5470:	10003626 	beq	r2,zero,554c <__subdf3+0x8a0>
    5474:	2984b03a 	or	r2,r5,r6
    5478:	10001726 	beq	r2,zero,54d8 <__subdf3+0x82c>
    547c:	1808d0fa 	srli	r4,r3,3
    5480:	8822d0fa 	srli	r17,r17,3
    5484:	1806977a 	slli	r3,r3,29
    5488:	2080022c 	andhi	r2,r4,8
    548c:	1c62b03a 	or	r17,r3,r17
    5490:	10000726 	beq	r2,zero,54b0 <__subdf3+0x804>
    5494:	2812d0fa 	srli	r9,r5,3
    5498:	4880022c 	andhi	r2,r9,8
    549c:	1000041e 	bne	r2,zero,54b0 <__subdf3+0x804>
    54a0:	300cd0fa 	srli	r6,r6,3
    54a4:	2804977a 	slli	r2,r5,29
    54a8:	4809883a 	mov	r4,r9
    54ac:	11a2b03a 	or	r17,r2,r6
    54b0:	8806d77a 	srli	r3,r17,29
    54b4:	200890fa 	slli	r4,r4,3
    54b8:	882290fa 	slli	r17,r17,3
    54bc:	3825883a 	mov	r18,r7
    54c0:	1906b03a 	or	r3,r3,r4
    54c4:	0401ffc4 	movi	r16,2047
    54c8:	003e1906 	br	4d30 <__alt_data_end+0xfffd3ff0>
    54cc:	000b883a 	mov	r5,zero
    54d0:	0005883a 	mov	r2,zero
    54d4:	003e2e06 	br	4d90 <__alt_data_end+0xfffd4050>
    54d8:	0401ffc4 	movi	r16,2047
    54dc:	003e1406 	br	4d30 <__alt_data_end+0xfffd3ff0>
    54e0:	0005883a 	mov	r2,zero
    54e4:	003f7506 	br	52bc <__alt_data_end+0xfffd457c>
    54e8:	0005883a 	mov	r2,zero
    54ec:	0009883a 	mov	r4,zero
    54f0:	003e7806 	br	4ed4 <__alt_data_end+0xfffd4194>
    54f4:	123ff804 	addi	r8,r2,-32
    54f8:	01000804 	movi	r4,32
    54fc:	1a10d83a 	srl	r8,r3,r8
    5500:	11002526 	beq	r2,r4,5598 <__subdf3+0x8ec>
    5504:	01001004 	movi	r4,64
    5508:	2085c83a 	sub	r2,r4,r2
    550c:	1884983a 	sll	r2,r3,r2
    5510:	1444b03a 	or	r2,r2,r17
    5514:	1004c03a 	cmpne	r2,r2,zero
    5518:	40a2b03a 	or	r17,r8,r2
    551c:	0005883a 	mov	r2,zero
    5520:	003f1606 	br	517c <__alt_data_end+0xfffd443c>
    5524:	02000434 	movhi	r8,16
    5528:	0009883a 	mov	r4,zero
    552c:	423fffc4 	addi	r8,r8,-1
    5530:	00bfffc4 	movi	r2,-1
    5534:	0401ffc4 	movi	r16,2047
    5538:	003e6606 	br	4ed4 <__alt_data_end+0xfffd4194>
    553c:	1c62b03a 	or	r17,r3,r17
    5540:	8822c03a 	cmpne	r17,r17,zero
    5544:	0005883a 	mov	r2,zero
    5548:	003f9906 	br	53b0 <__alt_data_end+0xfffd4670>
    554c:	2807883a 	mov	r3,r5
    5550:	3023883a 	mov	r17,r6
    5554:	0401ffc4 	movi	r16,2047
    5558:	003df506 	br	4d30 <__alt_data_end+0xfffd3ff0>
    555c:	2807883a 	mov	r3,r5
    5560:	3023883a 	mov	r17,r6
    5564:	003df206 	br	4d30 <__alt_data_end+0xfffd3ff0>
    5568:	123ff804 	addi	r8,r2,-32
    556c:	01000804 	movi	r4,32
    5570:	1a10d83a 	srl	r8,r3,r8
    5574:	11000a26 	beq	r2,r4,55a0 <__subdf3+0x8f4>
    5578:	01001004 	movi	r4,64
    557c:	2085c83a 	sub	r2,r4,r2
    5580:	1884983a 	sll	r2,r3,r2
    5584:	1444b03a 	or	r2,r2,r17
    5588:	1004c03a 	cmpne	r2,r2,zero
    558c:	40a2b03a 	or	r17,r8,r2
    5590:	0005883a 	mov	r2,zero
    5594:	003f8606 	br	53b0 <__alt_data_end+0xfffd4670>
    5598:	0005883a 	mov	r2,zero
    559c:	003fdc06 	br	5510 <__alt_data_end+0xfffd47d0>
    55a0:	0005883a 	mov	r2,zero
    55a4:	003ff706 	br	5584 <__alt_data_end+0xfffd4844>

000055a8 <__fixdfsi>:
    55a8:	280cd53a 	srli	r6,r5,20
    55ac:	00c00434 	movhi	r3,16
    55b0:	18ffffc4 	addi	r3,r3,-1
    55b4:	3181ffcc 	andi	r6,r6,2047
    55b8:	01c0ff84 	movi	r7,1022
    55bc:	28c6703a 	and	r3,r5,r3
    55c0:	280ad7fa 	srli	r5,r5,31
    55c4:	3980120e 	bge	r7,r6,5610 <__fixdfsi+0x68>
    55c8:	00810744 	movi	r2,1053
    55cc:	11800c16 	blt	r2,r6,5600 <__fixdfsi+0x58>
    55d0:	00810cc4 	movi	r2,1075
    55d4:	1185c83a 	sub	r2,r2,r6
    55d8:	01c007c4 	movi	r7,31
    55dc:	18c00434 	orhi	r3,r3,16
    55e0:	38800d16 	blt	r7,r2,5618 <__fixdfsi+0x70>
    55e4:	31befb44 	addi	r6,r6,-1043
    55e8:	2084d83a 	srl	r2,r4,r2
    55ec:	1986983a 	sll	r3,r3,r6
    55f0:	1884b03a 	or	r2,r3,r2
    55f4:	28000726 	beq	r5,zero,5614 <__fixdfsi+0x6c>
    55f8:	0085c83a 	sub	r2,zero,r2
    55fc:	f800283a 	ret
    5600:	00a00034 	movhi	r2,32768
    5604:	10bfffc4 	addi	r2,r2,-1
    5608:	2885883a 	add	r2,r5,r2
    560c:	f800283a 	ret
    5610:	0005883a 	mov	r2,zero
    5614:	f800283a 	ret
    5618:	008104c4 	movi	r2,1043
    561c:	1185c83a 	sub	r2,r2,r6
    5620:	1884d83a 	srl	r2,r3,r2
    5624:	003ff306 	br	55f4 <__alt_data_end+0xfffd48b4>

00005628 <__floatsidf>:
    5628:	defffd04 	addi	sp,sp,-12
    562c:	dfc00215 	stw	ra,8(sp)
    5630:	dc400115 	stw	r17,4(sp)
    5634:	dc000015 	stw	r16,0(sp)
    5638:	20002b26 	beq	r4,zero,56e8 <__floatsidf+0xc0>
    563c:	2023883a 	mov	r17,r4
    5640:	2020d7fa 	srli	r16,r4,31
    5644:	20002d16 	blt	r4,zero,56fc <__floatsidf+0xd4>
    5648:	8809883a 	mov	r4,r17
    564c:	00057040 	call	5704 <__clzsi2>
    5650:	01410784 	movi	r5,1054
    5654:	288bc83a 	sub	r5,r5,r2
    5658:	01010cc4 	movi	r4,1075
    565c:	2149c83a 	sub	r4,r4,r5
    5660:	00c007c4 	movi	r3,31
    5664:	1900160e 	bge	r3,r4,56c0 <__floatsidf+0x98>
    5668:	00c104c4 	movi	r3,1043
    566c:	1947c83a 	sub	r3,r3,r5
    5670:	88c6983a 	sll	r3,r17,r3
    5674:	00800434 	movhi	r2,16
    5678:	10bfffc4 	addi	r2,r2,-1
    567c:	1886703a 	and	r3,r3,r2
    5680:	2941ffcc 	andi	r5,r5,2047
    5684:	800d883a 	mov	r6,r16
    5688:	0005883a 	mov	r2,zero
    568c:	280a953a 	slli	r5,r5,20
    5690:	31803fcc 	andi	r6,r6,255
    5694:	01000434 	movhi	r4,16
    5698:	300c97fa 	slli	r6,r6,31
    569c:	213fffc4 	addi	r4,r4,-1
    56a0:	1906703a 	and	r3,r3,r4
    56a4:	1946b03a 	or	r3,r3,r5
    56a8:	1986b03a 	or	r3,r3,r6
    56ac:	dfc00217 	ldw	ra,8(sp)
    56b0:	dc400117 	ldw	r17,4(sp)
    56b4:	dc000017 	ldw	r16,0(sp)
    56b8:	dec00304 	addi	sp,sp,12
    56bc:	f800283a 	ret
    56c0:	00c002c4 	movi	r3,11
    56c4:	1887c83a 	sub	r3,r3,r2
    56c8:	88c6d83a 	srl	r3,r17,r3
    56cc:	8904983a 	sll	r2,r17,r4
    56d0:	01000434 	movhi	r4,16
    56d4:	213fffc4 	addi	r4,r4,-1
    56d8:	2941ffcc 	andi	r5,r5,2047
    56dc:	1906703a 	and	r3,r3,r4
    56e0:	800d883a 	mov	r6,r16
    56e4:	003fe906 	br	568c <__alt_data_end+0xfffd494c>
    56e8:	000d883a 	mov	r6,zero
    56ec:	000b883a 	mov	r5,zero
    56f0:	0007883a 	mov	r3,zero
    56f4:	0005883a 	mov	r2,zero
    56f8:	003fe406 	br	568c <__alt_data_end+0xfffd494c>
    56fc:	0123c83a 	sub	r17,zero,r4
    5700:	003fd106 	br	5648 <__alt_data_end+0xfffd4908>

00005704 <__clzsi2>:
    5704:	00bfffd4 	movui	r2,65535
    5708:	11000536 	bltu	r2,r4,5720 <__clzsi2+0x1c>
    570c:	00803fc4 	movi	r2,255
    5710:	11000f36 	bltu	r2,r4,5750 <__clzsi2+0x4c>
    5714:	00800804 	movi	r2,32
    5718:	0007883a 	mov	r3,zero
    571c:	00000506 	br	5734 <__clzsi2+0x30>
    5720:	00804034 	movhi	r2,256
    5724:	10bfffc4 	addi	r2,r2,-1
    5728:	11000c2e 	bgeu	r2,r4,575c <__clzsi2+0x58>
    572c:	00800204 	movi	r2,8
    5730:	00c00604 	movi	r3,24
    5734:	20c8d83a 	srl	r4,r4,r3
    5738:	00c000b4 	movhi	r3,2
    573c:	18f64404 	addi	r3,r3,-9968
    5740:	1909883a 	add	r4,r3,r4
    5744:	20c00003 	ldbu	r3,0(r4)
    5748:	10c5c83a 	sub	r2,r2,r3
    574c:	f800283a 	ret
    5750:	00800604 	movi	r2,24
    5754:	00c00204 	movi	r3,8
    5758:	003ff606 	br	5734 <__alt_data_end+0xfffd49f4>
    575c:	00800404 	movi	r2,16
    5760:	1007883a 	mov	r3,r2
    5764:	003ff306 	br	5734 <__alt_data_end+0xfffd49f4>

00005768 <__errno>:
    5768:	008000b4 	movhi	r2,2
    576c:	10be1e04 	addi	r2,r2,-1928
    5770:	10800017 	ldw	r2,0(r2)
    5774:	f800283a 	ret

00005778 <malloc>:
    5778:	008000b4 	movhi	r2,2
    577c:	10be1e04 	addi	r2,r2,-1928
    5780:	200b883a 	mov	r5,r4
    5784:	11000017 	ldw	r4,0(r2)
    5788:	00057a01 	jmpi	57a0 <_malloc_r>

0000578c <free>:
    578c:	008000b4 	movhi	r2,2
    5790:	10be1e04 	addi	r2,r2,-1928
    5794:	200b883a 	mov	r5,r4
    5798:	11000017 	ldw	r4,0(r2)
    579c:	000a97c1 	jmpi	a97c <_free_r>

000057a0 <_malloc_r>:
    57a0:	defff504 	addi	sp,sp,-44
    57a4:	dc800315 	stw	r18,12(sp)
    57a8:	dfc00a15 	stw	ra,40(sp)
    57ac:	df000915 	stw	fp,36(sp)
    57b0:	ddc00815 	stw	r23,32(sp)
    57b4:	dd800715 	stw	r22,28(sp)
    57b8:	dd400615 	stw	r21,24(sp)
    57bc:	dd000515 	stw	r20,20(sp)
    57c0:	dcc00415 	stw	r19,16(sp)
    57c4:	dc400215 	stw	r17,8(sp)
    57c8:	dc000115 	stw	r16,4(sp)
    57cc:	288002c4 	addi	r2,r5,11
    57d0:	00c00584 	movi	r3,22
    57d4:	2025883a 	mov	r18,r4
    57d8:	18807f2e 	bgeu	r3,r2,59d8 <_malloc_r+0x238>
    57dc:	047ffe04 	movi	r17,-8
    57e0:	1462703a 	and	r17,r2,r17
    57e4:	8800a316 	blt	r17,zero,5a74 <_malloc_r+0x2d4>
    57e8:	8940a236 	bltu	r17,r5,5a74 <_malloc_r+0x2d4>
    57ec:	00109d40 	call	109d4 <__malloc_lock>
    57f0:	00807dc4 	movi	r2,503
    57f4:	1441e92e 	bgeu	r2,r17,5f9c <_malloc_r+0x7fc>
    57f8:	8804d27a 	srli	r2,r17,9
    57fc:	1000a126 	beq	r2,zero,5a84 <_malloc_r+0x2e4>
    5800:	00c00104 	movi	r3,4
    5804:	18811e36 	bltu	r3,r2,5c80 <_malloc_r+0x4e0>
    5808:	8804d1ba 	srli	r2,r17,6
    580c:	12000e44 	addi	r8,r2,57
    5810:	11c00e04 	addi	r7,r2,56
    5814:	4209883a 	add	r4,r8,r8
    5818:	04c000b4 	movhi	r19,2
    581c:	2109883a 	add	r4,r4,r4
    5820:	9cf85f04 	addi	r19,r19,-7812
    5824:	2109883a 	add	r4,r4,r4
    5828:	9909883a 	add	r4,r19,r4
    582c:	24000117 	ldw	r16,4(r4)
    5830:	213ffe04 	addi	r4,r4,-8
    5834:	24009726 	beq	r4,r16,5a94 <_malloc_r+0x2f4>
    5838:	80800117 	ldw	r2,4(r16)
    583c:	01bfff04 	movi	r6,-4
    5840:	014003c4 	movi	r5,15
    5844:	1184703a 	and	r2,r2,r6
    5848:	1447c83a 	sub	r3,r2,r17
    584c:	28c00716 	blt	r5,r3,586c <_malloc_r+0xcc>
    5850:	1800920e 	bge	r3,zero,5a9c <_malloc_r+0x2fc>
    5854:	84000317 	ldw	r16,12(r16)
    5858:	24008e26 	beq	r4,r16,5a94 <_malloc_r+0x2f4>
    585c:	80800117 	ldw	r2,4(r16)
    5860:	1184703a 	and	r2,r2,r6
    5864:	1447c83a 	sub	r3,r2,r17
    5868:	28fff90e 	bge	r5,r3,5850 <__alt_data_end+0xfffd4b10>
    586c:	3809883a 	mov	r4,r7
    5870:	018000b4 	movhi	r6,2
    5874:	9c000417 	ldw	r16,16(r19)
    5878:	31b85f04 	addi	r6,r6,-7812
    587c:	32000204 	addi	r8,r6,8
    5880:	82013426 	beq	r16,r8,5d54 <_malloc_r+0x5b4>
    5884:	80c00117 	ldw	r3,4(r16)
    5888:	00bfff04 	movi	r2,-4
    588c:	188e703a 	and	r7,r3,r2
    5890:	3c45c83a 	sub	r2,r7,r17
    5894:	00c003c4 	movi	r3,15
    5898:	18811f16 	blt	r3,r2,5d18 <_malloc_r+0x578>
    589c:	32000515 	stw	r8,20(r6)
    58a0:	32000415 	stw	r8,16(r6)
    58a4:	10007f0e 	bge	r2,zero,5aa4 <_malloc_r+0x304>
    58a8:	00807fc4 	movi	r2,511
    58ac:	11c0fd36 	bltu	r2,r7,5ca4 <_malloc_r+0x504>
    58b0:	3806d0fa 	srli	r3,r7,3
    58b4:	01c00044 	movi	r7,1
    58b8:	30800117 	ldw	r2,4(r6)
    58bc:	19400044 	addi	r5,r3,1
    58c0:	294b883a 	add	r5,r5,r5
    58c4:	1807d0ba 	srai	r3,r3,2
    58c8:	294b883a 	add	r5,r5,r5
    58cc:	294b883a 	add	r5,r5,r5
    58d0:	298b883a 	add	r5,r5,r6
    58d4:	38c6983a 	sll	r3,r7,r3
    58d8:	29c00017 	ldw	r7,0(r5)
    58dc:	2a7ffe04 	addi	r9,r5,-8
    58e0:	1886b03a 	or	r3,r3,r2
    58e4:	82400315 	stw	r9,12(r16)
    58e8:	81c00215 	stw	r7,8(r16)
    58ec:	30c00115 	stw	r3,4(r6)
    58f0:	2c000015 	stw	r16,0(r5)
    58f4:	3c000315 	stw	r16,12(r7)
    58f8:	2005d0ba 	srai	r2,r4,2
    58fc:	01400044 	movi	r5,1
    5900:	288a983a 	sll	r5,r5,r2
    5904:	19406f36 	bltu	r3,r5,5ac4 <_malloc_r+0x324>
    5908:	28c4703a 	and	r2,r5,r3
    590c:	10000a1e 	bne	r2,zero,5938 <_malloc_r+0x198>
    5910:	00bfff04 	movi	r2,-4
    5914:	294b883a 	add	r5,r5,r5
    5918:	2088703a 	and	r4,r4,r2
    591c:	28c4703a 	and	r2,r5,r3
    5920:	21000104 	addi	r4,r4,4
    5924:	1000041e 	bne	r2,zero,5938 <_malloc_r+0x198>
    5928:	294b883a 	add	r5,r5,r5
    592c:	28c4703a 	and	r2,r5,r3
    5930:	21000104 	addi	r4,r4,4
    5934:	103ffc26 	beq	r2,zero,5928 <__alt_data_end+0xfffd4be8>
    5938:	02bfff04 	movi	r10,-4
    593c:	024003c4 	movi	r9,15
    5940:	21800044 	addi	r6,r4,1
    5944:	318d883a 	add	r6,r6,r6
    5948:	318d883a 	add	r6,r6,r6
    594c:	318d883a 	add	r6,r6,r6
    5950:	998d883a 	add	r6,r19,r6
    5954:	333ffe04 	addi	r12,r6,-8
    5958:	2017883a 	mov	r11,r4
    595c:	31800104 	addi	r6,r6,4
    5960:	34000017 	ldw	r16,0(r6)
    5964:	31fffd04 	addi	r7,r6,-12
    5968:	81c0041e 	bne	r16,r7,597c <_malloc_r+0x1dc>
    596c:	0000fb06 	br	5d5c <_malloc_r+0x5bc>
    5970:	1801030e 	bge	r3,zero,5d80 <_malloc_r+0x5e0>
    5974:	84000317 	ldw	r16,12(r16)
    5978:	81c0f826 	beq	r16,r7,5d5c <_malloc_r+0x5bc>
    597c:	80800117 	ldw	r2,4(r16)
    5980:	1284703a 	and	r2,r2,r10
    5984:	1447c83a 	sub	r3,r2,r17
    5988:	48fff90e 	bge	r9,r3,5970 <__alt_data_end+0xfffd4c30>
    598c:	80800317 	ldw	r2,12(r16)
    5990:	81000217 	ldw	r4,8(r16)
    5994:	89400054 	ori	r5,r17,1
    5998:	81400115 	stw	r5,4(r16)
    599c:	20800315 	stw	r2,12(r4)
    59a0:	11000215 	stw	r4,8(r2)
    59a4:	8463883a 	add	r17,r16,r17
    59a8:	9c400515 	stw	r17,20(r19)
    59ac:	9c400415 	stw	r17,16(r19)
    59b0:	18800054 	ori	r2,r3,1
    59b4:	88800115 	stw	r2,4(r17)
    59b8:	8a000315 	stw	r8,12(r17)
    59bc:	8a000215 	stw	r8,8(r17)
    59c0:	88e3883a 	add	r17,r17,r3
    59c4:	88c00015 	stw	r3,0(r17)
    59c8:	9009883a 	mov	r4,r18
    59cc:	0010af40 	call	10af4 <__malloc_unlock>
    59d0:	80800204 	addi	r2,r16,8
    59d4:	00001b06 	br	5a44 <_malloc_r+0x2a4>
    59d8:	04400404 	movi	r17,16
    59dc:	89402536 	bltu	r17,r5,5a74 <_malloc_r+0x2d4>
    59e0:	00109d40 	call	109d4 <__malloc_lock>
    59e4:	00800184 	movi	r2,6
    59e8:	01000084 	movi	r4,2
    59ec:	04c000b4 	movhi	r19,2
    59f0:	1085883a 	add	r2,r2,r2
    59f4:	9cf85f04 	addi	r19,r19,-7812
    59f8:	1085883a 	add	r2,r2,r2
    59fc:	9885883a 	add	r2,r19,r2
    5a00:	14000117 	ldw	r16,4(r2)
    5a04:	10fffe04 	addi	r3,r2,-8
    5a08:	80c0d926 	beq	r16,r3,5d70 <_malloc_r+0x5d0>
    5a0c:	80c00117 	ldw	r3,4(r16)
    5a10:	81000317 	ldw	r4,12(r16)
    5a14:	00bfff04 	movi	r2,-4
    5a18:	1884703a 	and	r2,r3,r2
    5a1c:	81400217 	ldw	r5,8(r16)
    5a20:	8085883a 	add	r2,r16,r2
    5a24:	10c00117 	ldw	r3,4(r2)
    5a28:	29000315 	stw	r4,12(r5)
    5a2c:	21400215 	stw	r5,8(r4)
    5a30:	18c00054 	ori	r3,r3,1
    5a34:	10c00115 	stw	r3,4(r2)
    5a38:	9009883a 	mov	r4,r18
    5a3c:	0010af40 	call	10af4 <__malloc_unlock>
    5a40:	80800204 	addi	r2,r16,8
    5a44:	dfc00a17 	ldw	ra,40(sp)
    5a48:	df000917 	ldw	fp,36(sp)
    5a4c:	ddc00817 	ldw	r23,32(sp)
    5a50:	dd800717 	ldw	r22,28(sp)
    5a54:	dd400617 	ldw	r21,24(sp)
    5a58:	dd000517 	ldw	r20,20(sp)
    5a5c:	dcc00417 	ldw	r19,16(sp)
    5a60:	dc800317 	ldw	r18,12(sp)
    5a64:	dc400217 	ldw	r17,8(sp)
    5a68:	dc000117 	ldw	r16,4(sp)
    5a6c:	dec00b04 	addi	sp,sp,44
    5a70:	f800283a 	ret
    5a74:	00800304 	movi	r2,12
    5a78:	90800015 	stw	r2,0(r18)
    5a7c:	0005883a 	mov	r2,zero
    5a80:	003ff006 	br	5a44 <__alt_data_end+0xfffd4d04>
    5a84:	01002004 	movi	r4,128
    5a88:	02001004 	movi	r8,64
    5a8c:	01c00fc4 	movi	r7,63
    5a90:	003f6106 	br	5818 <__alt_data_end+0xfffd4ad8>
    5a94:	4009883a 	mov	r4,r8
    5a98:	003f7506 	br	5870 <__alt_data_end+0xfffd4b30>
    5a9c:	81000317 	ldw	r4,12(r16)
    5aa0:	003fde06 	br	5a1c <__alt_data_end+0xfffd4cdc>
    5aa4:	81c5883a 	add	r2,r16,r7
    5aa8:	11400117 	ldw	r5,4(r2)
    5aac:	9009883a 	mov	r4,r18
    5ab0:	29400054 	ori	r5,r5,1
    5ab4:	11400115 	stw	r5,4(r2)
    5ab8:	0010af40 	call	10af4 <__malloc_unlock>
    5abc:	80800204 	addi	r2,r16,8
    5ac0:	003fe006 	br	5a44 <__alt_data_end+0xfffd4d04>
    5ac4:	9c000217 	ldw	r16,8(r19)
    5ac8:	00bfff04 	movi	r2,-4
    5acc:	85800117 	ldw	r22,4(r16)
    5ad0:	b0ac703a 	and	r22,r22,r2
    5ad4:	b4400336 	bltu	r22,r17,5ae4 <_malloc_r+0x344>
    5ad8:	b445c83a 	sub	r2,r22,r17
    5adc:	00c003c4 	movi	r3,15
    5ae0:	18805d16 	blt	r3,r2,5c58 <_malloc_r+0x4b8>
    5ae4:	05c000b4 	movhi	r23,2
    5ae8:	008000b4 	movhi	r2,2
    5aec:	10854604 	addi	r2,r2,5400
    5af0:	bdfe1f04 	addi	r23,r23,-1924
    5af4:	15400017 	ldw	r21,0(r2)
    5af8:	b8c00017 	ldw	r3,0(r23)
    5afc:	00bfffc4 	movi	r2,-1
    5b00:	858d883a 	add	r6,r16,r22
    5b04:	8d6b883a 	add	r21,r17,r21
    5b08:	1880ea26 	beq	r3,r2,5eb4 <_malloc_r+0x714>
    5b0c:	ad4403c4 	addi	r21,r21,4111
    5b10:	00bc0004 	movi	r2,-4096
    5b14:	a8aa703a 	and	r21,r21,r2
    5b18:	a80b883a 	mov	r5,r21
    5b1c:	9009883a 	mov	r4,r18
    5b20:	d9800015 	stw	r6,0(sp)
    5b24:	000635c0 	call	635c <_sbrk_r>
    5b28:	1029883a 	mov	r20,r2
    5b2c:	00bfffc4 	movi	r2,-1
    5b30:	d9800017 	ldw	r6,0(sp)
    5b34:	a080e826 	beq	r20,r2,5ed8 <_malloc_r+0x738>
    5b38:	a180a636 	bltu	r20,r6,5dd4 <_malloc_r+0x634>
    5b3c:	070000b4 	movhi	fp,2
    5b40:	e7056b04 	addi	fp,fp,5548
    5b44:	e0800017 	ldw	r2,0(fp)
    5b48:	a887883a 	add	r3,r21,r2
    5b4c:	e0c00015 	stw	r3,0(fp)
    5b50:	3500e626 	beq	r6,r20,5eec <_malloc_r+0x74c>
    5b54:	b9000017 	ldw	r4,0(r23)
    5b58:	00bfffc4 	movi	r2,-1
    5b5c:	2080ee26 	beq	r4,r2,5f18 <_malloc_r+0x778>
    5b60:	a185c83a 	sub	r2,r20,r6
    5b64:	10c5883a 	add	r2,r2,r3
    5b68:	e0800015 	stw	r2,0(fp)
    5b6c:	a0c001cc 	andi	r3,r20,7
    5b70:	1800bc26 	beq	r3,zero,5e64 <_malloc_r+0x6c4>
    5b74:	a0e9c83a 	sub	r20,r20,r3
    5b78:	00840204 	movi	r2,4104
    5b7c:	a5000204 	addi	r20,r20,8
    5b80:	10c7c83a 	sub	r3,r2,r3
    5b84:	a545883a 	add	r2,r20,r21
    5b88:	1083ffcc 	andi	r2,r2,4095
    5b8c:	18abc83a 	sub	r21,r3,r2
    5b90:	a80b883a 	mov	r5,r21
    5b94:	9009883a 	mov	r4,r18
    5b98:	000635c0 	call	635c <_sbrk_r>
    5b9c:	00ffffc4 	movi	r3,-1
    5ba0:	10c0e126 	beq	r2,r3,5f28 <_malloc_r+0x788>
    5ba4:	1505c83a 	sub	r2,r2,r20
    5ba8:	1545883a 	add	r2,r2,r21
    5bac:	10800054 	ori	r2,r2,1
    5bb0:	e0c00017 	ldw	r3,0(fp)
    5bb4:	9d000215 	stw	r20,8(r19)
    5bb8:	a0800115 	stw	r2,4(r20)
    5bbc:	a8c7883a 	add	r3,r21,r3
    5bc0:	e0c00015 	stw	r3,0(fp)
    5bc4:	84c00e26 	beq	r16,r19,5c00 <_malloc_r+0x460>
    5bc8:	018003c4 	movi	r6,15
    5bcc:	3580a72e 	bgeu	r6,r22,5e6c <_malloc_r+0x6cc>
    5bd0:	81400117 	ldw	r5,4(r16)
    5bd4:	013ffe04 	movi	r4,-8
    5bd8:	b0bffd04 	addi	r2,r22,-12
    5bdc:	1104703a 	and	r2,r2,r4
    5be0:	2900004c 	andi	r4,r5,1
    5be4:	2088b03a 	or	r4,r4,r2
    5be8:	81000115 	stw	r4,4(r16)
    5bec:	01400144 	movi	r5,5
    5bf0:	8089883a 	add	r4,r16,r2
    5bf4:	21400115 	stw	r5,4(r4)
    5bf8:	21400215 	stw	r5,8(r4)
    5bfc:	3080cd36 	bltu	r6,r2,5f34 <_malloc_r+0x794>
    5c00:	008000b4 	movhi	r2,2
    5c04:	10854504 	addi	r2,r2,5396
    5c08:	11000017 	ldw	r4,0(r2)
    5c0c:	20c0012e 	bgeu	r4,r3,5c14 <_malloc_r+0x474>
    5c10:	10c00015 	stw	r3,0(r2)
    5c14:	008000b4 	movhi	r2,2
    5c18:	10854404 	addi	r2,r2,5392
    5c1c:	11000017 	ldw	r4,0(r2)
    5c20:	9c000217 	ldw	r16,8(r19)
    5c24:	20c0012e 	bgeu	r4,r3,5c2c <_malloc_r+0x48c>
    5c28:	10c00015 	stw	r3,0(r2)
    5c2c:	80c00117 	ldw	r3,4(r16)
    5c30:	00bfff04 	movi	r2,-4
    5c34:	1886703a 	and	r3,r3,r2
    5c38:	1c45c83a 	sub	r2,r3,r17
    5c3c:	1c400236 	bltu	r3,r17,5c48 <_malloc_r+0x4a8>
    5c40:	00c003c4 	movi	r3,15
    5c44:	18800416 	blt	r3,r2,5c58 <_malloc_r+0x4b8>
    5c48:	9009883a 	mov	r4,r18
    5c4c:	0010af40 	call	10af4 <__malloc_unlock>
    5c50:	0005883a 	mov	r2,zero
    5c54:	003f7b06 	br	5a44 <__alt_data_end+0xfffd4d04>
    5c58:	88c00054 	ori	r3,r17,1
    5c5c:	80c00115 	stw	r3,4(r16)
    5c60:	8463883a 	add	r17,r16,r17
    5c64:	10800054 	ori	r2,r2,1
    5c68:	9c400215 	stw	r17,8(r19)
    5c6c:	88800115 	stw	r2,4(r17)
    5c70:	9009883a 	mov	r4,r18
    5c74:	0010af40 	call	10af4 <__malloc_unlock>
    5c78:	80800204 	addi	r2,r16,8
    5c7c:	003f7106 	br	5a44 <__alt_data_end+0xfffd4d04>
    5c80:	00c00504 	movi	r3,20
    5c84:	18804a2e 	bgeu	r3,r2,5db0 <_malloc_r+0x610>
    5c88:	00c01504 	movi	r3,84
    5c8c:	18806e36 	bltu	r3,r2,5e48 <_malloc_r+0x6a8>
    5c90:	8804d33a 	srli	r2,r17,12
    5c94:	12001bc4 	addi	r8,r2,111
    5c98:	11c01b84 	addi	r7,r2,110
    5c9c:	4209883a 	add	r4,r8,r8
    5ca0:	003edd06 	br	5818 <__alt_data_end+0xfffd4ad8>
    5ca4:	3804d27a 	srli	r2,r7,9
    5ca8:	00c00104 	movi	r3,4
    5cac:	1880442e 	bgeu	r3,r2,5dc0 <_malloc_r+0x620>
    5cb0:	00c00504 	movi	r3,20
    5cb4:	18808136 	bltu	r3,r2,5ebc <_malloc_r+0x71c>
    5cb8:	11401704 	addi	r5,r2,92
    5cbc:	10c016c4 	addi	r3,r2,91
    5cc0:	294b883a 	add	r5,r5,r5
    5cc4:	294b883a 	add	r5,r5,r5
    5cc8:	294b883a 	add	r5,r5,r5
    5ccc:	994b883a 	add	r5,r19,r5
    5cd0:	28800017 	ldw	r2,0(r5)
    5cd4:	018000b4 	movhi	r6,2
    5cd8:	297ffe04 	addi	r5,r5,-8
    5cdc:	31b85f04 	addi	r6,r6,-7812
    5ce0:	28806526 	beq	r5,r2,5e78 <_malloc_r+0x6d8>
    5ce4:	01bfff04 	movi	r6,-4
    5ce8:	10c00117 	ldw	r3,4(r2)
    5cec:	1986703a 	and	r3,r3,r6
    5cf0:	38c0022e 	bgeu	r7,r3,5cfc <_malloc_r+0x55c>
    5cf4:	10800217 	ldw	r2,8(r2)
    5cf8:	28bffb1e 	bne	r5,r2,5ce8 <__alt_data_end+0xfffd4fa8>
    5cfc:	11400317 	ldw	r5,12(r2)
    5d00:	98c00117 	ldw	r3,4(r19)
    5d04:	81400315 	stw	r5,12(r16)
    5d08:	80800215 	stw	r2,8(r16)
    5d0c:	2c000215 	stw	r16,8(r5)
    5d10:	14000315 	stw	r16,12(r2)
    5d14:	003ef806 	br	58f8 <__alt_data_end+0xfffd4bb8>
    5d18:	88c00054 	ori	r3,r17,1
    5d1c:	80c00115 	stw	r3,4(r16)
    5d20:	8463883a 	add	r17,r16,r17
    5d24:	34400515 	stw	r17,20(r6)
    5d28:	34400415 	stw	r17,16(r6)
    5d2c:	10c00054 	ori	r3,r2,1
    5d30:	8a000315 	stw	r8,12(r17)
    5d34:	8a000215 	stw	r8,8(r17)
    5d38:	88c00115 	stw	r3,4(r17)
    5d3c:	88a3883a 	add	r17,r17,r2
    5d40:	88800015 	stw	r2,0(r17)
    5d44:	9009883a 	mov	r4,r18
    5d48:	0010af40 	call	10af4 <__malloc_unlock>
    5d4c:	80800204 	addi	r2,r16,8
    5d50:	003f3c06 	br	5a44 <__alt_data_end+0xfffd4d04>
    5d54:	30c00117 	ldw	r3,4(r6)
    5d58:	003ee706 	br	58f8 <__alt_data_end+0xfffd4bb8>
    5d5c:	5ac00044 	addi	r11,r11,1
    5d60:	588000cc 	andi	r2,r11,3
    5d64:	31800204 	addi	r6,r6,8
    5d68:	103efd1e 	bne	r2,zero,5960 <__alt_data_end+0xfffd4c20>
    5d6c:	00002406 	br	5e00 <_malloc_r+0x660>
    5d70:	14000317 	ldw	r16,12(r2)
    5d74:	143f251e 	bne	r2,r16,5a0c <__alt_data_end+0xfffd4ccc>
    5d78:	21000084 	addi	r4,r4,2
    5d7c:	003ebc06 	br	5870 <__alt_data_end+0xfffd4b30>
    5d80:	8085883a 	add	r2,r16,r2
    5d84:	10c00117 	ldw	r3,4(r2)
    5d88:	81000317 	ldw	r4,12(r16)
    5d8c:	81400217 	ldw	r5,8(r16)
    5d90:	18c00054 	ori	r3,r3,1
    5d94:	10c00115 	stw	r3,4(r2)
    5d98:	29000315 	stw	r4,12(r5)
    5d9c:	21400215 	stw	r5,8(r4)
    5da0:	9009883a 	mov	r4,r18
    5da4:	0010af40 	call	10af4 <__malloc_unlock>
    5da8:	80800204 	addi	r2,r16,8
    5dac:	003f2506 	br	5a44 <__alt_data_end+0xfffd4d04>
    5db0:	12001704 	addi	r8,r2,92
    5db4:	11c016c4 	addi	r7,r2,91
    5db8:	4209883a 	add	r4,r8,r8
    5dbc:	003e9606 	br	5818 <__alt_data_end+0xfffd4ad8>
    5dc0:	3804d1ba 	srli	r2,r7,6
    5dc4:	11400e44 	addi	r5,r2,57
    5dc8:	10c00e04 	addi	r3,r2,56
    5dcc:	294b883a 	add	r5,r5,r5
    5dd0:	003fbc06 	br	5cc4 <__alt_data_end+0xfffd4f84>
    5dd4:	84ff5926 	beq	r16,r19,5b3c <__alt_data_end+0xfffd4dfc>
    5dd8:	008000b4 	movhi	r2,2
    5ddc:	10b85f04 	addi	r2,r2,-7812
    5de0:	14000217 	ldw	r16,8(r2)
    5de4:	00bfff04 	movi	r2,-4
    5de8:	80c00117 	ldw	r3,4(r16)
    5dec:	1886703a 	and	r3,r3,r2
    5df0:	003f9106 	br	5c38 <__alt_data_end+0xfffd4ef8>
    5df4:	60800217 	ldw	r2,8(r12)
    5df8:	213fffc4 	addi	r4,r4,-1
    5dfc:	1300651e 	bne	r2,r12,5f94 <_malloc_r+0x7f4>
    5e00:	208000cc 	andi	r2,r4,3
    5e04:	633ffe04 	addi	r12,r12,-8
    5e08:	103ffa1e 	bne	r2,zero,5df4 <__alt_data_end+0xfffd50b4>
    5e0c:	98800117 	ldw	r2,4(r19)
    5e10:	0146303a 	nor	r3,zero,r5
    5e14:	1884703a 	and	r2,r3,r2
    5e18:	98800115 	stw	r2,4(r19)
    5e1c:	294b883a 	add	r5,r5,r5
    5e20:	117f2836 	bltu	r2,r5,5ac4 <__alt_data_end+0xfffd4d84>
    5e24:	283f2726 	beq	r5,zero,5ac4 <__alt_data_end+0xfffd4d84>
    5e28:	2886703a 	and	r3,r5,r2
    5e2c:	5809883a 	mov	r4,r11
    5e30:	183ec31e 	bne	r3,zero,5940 <__alt_data_end+0xfffd4c00>
    5e34:	294b883a 	add	r5,r5,r5
    5e38:	2886703a 	and	r3,r5,r2
    5e3c:	21000104 	addi	r4,r4,4
    5e40:	183ffc26 	beq	r3,zero,5e34 <__alt_data_end+0xfffd50f4>
    5e44:	003ebe06 	br	5940 <__alt_data_end+0xfffd4c00>
    5e48:	00c05504 	movi	r3,340
    5e4c:	18801236 	bltu	r3,r2,5e98 <_malloc_r+0x6f8>
    5e50:	8804d3fa 	srli	r2,r17,15
    5e54:	12001e04 	addi	r8,r2,120
    5e58:	11c01dc4 	addi	r7,r2,119
    5e5c:	4209883a 	add	r4,r8,r8
    5e60:	003e6d06 	br	5818 <__alt_data_end+0xfffd4ad8>
    5e64:	00c40004 	movi	r3,4096
    5e68:	003f4606 	br	5b84 <__alt_data_end+0xfffd4e44>
    5e6c:	00800044 	movi	r2,1
    5e70:	a0800115 	stw	r2,4(r20)
    5e74:	003f7406 	br	5c48 <__alt_data_end+0xfffd4f08>
    5e78:	1805d0ba 	srai	r2,r3,2
    5e7c:	01c00044 	movi	r7,1
    5e80:	30c00117 	ldw	r3,4(r6)
    5e84:	388e983a 	sll	r7,r7,r2
    5e88:	2805883a 	mov	r2,r5
    5e8c:	38c6b03a 	or	r3,r7,r3
    5e90:	30c00115 	stw	r3,4(r6)
    5e94:	003f9b06 	br	5d04 <__alt_data_end+0xfffd4fc4>
    5e98:	00c15504 	movi	r3,1364
    5e9c:	18801a36 	bltu	r3,r2,5f08 <_malloc_r+0x768>
    5ea0:	8804d4ba 	srli	r2,r17,18
    5ea4:	12001f44 	addi	r8,r2,125
    5ea8:	11c01f04 	addi	r7,r2,124
    5eac:	4209883a 	add	r4,r8,r8
    5eb0:	003e5906 	br	5818 <__alt_data_end+0xfffd4ad8>
    5eb4:	ad400404 	addi	r21,r21,16
    5eb8:	003f1706 	br	5b18 <__alt_data_end+0xfffd4dd8>
    5ebc:	00c01504 	movi	r3,84
    5ec0:	18802336 	bltu	r3,r2,5f50 <_malloc_r+0x7b0>
    5ec4:	3804d33a 	srli	r2,r7,12
    5ec8:	11401bc4 	addi	r5,r2,111
    5ecc:	10c01b84 	addi	r3,r2,110
    5ed0:	294b883a 	add	r5,r5,r5
    5ed4:	003f7b06 	br	5cc4 <__alt_data_end+0xfffd4f84>
    5ed8:	9c000217 	ldw	r16,8(r19)
    5edc:	00bfff04 	movi	r2,-4
    5ee0:	80c00117 	ldw	r3,4(r16)
    5ee4:	1886703a 	and	r3,r3,r2
    5ee8:	003f5306 	br	5c38 <__alt_data_end+0xfffd4ef8>
    5eec:	3083ffcc 	andi	r2,r6,4095
    5ef0:	103f181e 	bne	r2,zero,5b54 <__alt_data_end+0xfffd4e14>
    5ef4:	99000217 	ldw	r4,8(r19)
    5ef8:	b545883a 	add	r2,r22,r21
    5efc:	10800054 	ori	r2,r2,1
    5f00:	20800115 	stw	r2,4(r4)
    5f04:	003f3e06 	br	5c00 <__alt_data_end+0xfffd4ec0>
    5f08:	01003f84 	movi	r4,254
    5f0c:	02001fc4 	movi	r8,127
    5f10:	01c01f84 	movi	r7,126
    5f14:	003e4006 	br	5818 <__alt_data_end+0xfffd4ad8>
    5f18:	008000b4 	movhi	r2,2
    5f1c:	10be1f04 	addi	r2,r2,-1924
    5f20:	15000015 	stw	r20,0(r2)
    5f24:	003f1106 	br	5b6c <__alt_data_end+0xfffd4e2c>
    5f28:	00800044 	movi	r2,1
    5f2c:	002b883a 	mov	r21,zero
    5f30:	003f1f06 	br	5bb0 <__alt_data_end+0xfffd4e70>
    5f34:	81400204 	addi	r5,r16,8
    5f38:	9009883a 	mov	r4,r18
    5f3c:	000a97c0 	call	a97c <_free_r>
    5f40:	008000b4 	movhi	r2,2
    5f44:	10856b04 	addi	r2,r2,5548
    5f48:	10c00017 	ldw	r3,0(r2)
    5f4c:	003f2c06 	br	5c00 <__alt_data_end+0xfffd4ec0>
    5f50:	00c05504 	movi	r3,340
    5f54:	18800536 	bltu	r3,r2,5f6c <_malloc_r+0x7cc>
    5f58:	3804d3fa 	srli	r2,r7,15
    5f5c:	11401e04 	addi	r5,r2,120
    5f60:	10c01dc4 	addi	r3,r2,119
    5f64:	294b883a 	add	r5,r5,r5
    5f68:	003f5606 	br	5cc4 <__alt_data_end+0xfffd4f84>
    5f6c:	00c15504 	movi	r3,1364
    5f70:	18800536 	bltu	r3,r2,5f88 <_malloc_r+0x7e8>
    5f74:	3804d4ba 	srli	r2,r7,18
    5f78:	11401f44 	addi	r5,r2,125
    5f7c:	10c01f04 	addi	r3,r2,124
    5f80:	294b883a 	add	r5,r5,r5
    5f84:	003f4f06 	br	5cc4 <__alt_data_end+0xfffd4f84>
    5f88:	01403f84 	movi	r5,254
    5f8c:	00c01f84 	movi	r3,126
    5f90:	003f4c06 	br	5cc4 <__alt_data_end+0xfffd4f84>
    5f94:	98800117 	ldw	r2,4(r19)
    5f98:	003fa006 	br	5e1c <__alt_data_end+0xfffd50dc>
    5f9c:	8808d0fa 	srli	r4,r17,3
    5fa0:	20800044 	addi	r2,r4,1
    5fa4:	1085883a 	add	r2,r2,r2
    5fa8:	003e9006 	br	59ec <__alt_data_end+0xfffd4cac>

00005fac <memcpy>:
    5fac:	defffd04 	addi	sp,sp,-12
    5fb0:	dfc00215 	stw	ra,8(sp)
    5fb4:	dc400115 	stw	r17,4(sp)
    5fb8:	dc000015 	stw	r16,0(sp)
    5fbc:	00c003c4 	movi	r3,15
    5fc0:	2005883a 	mov	r2,r4
    5fc4:	1980452e 	bgeu	r3,r6,60dc <memcpy+0x130>
    5fc8:	2906b03a 	or	r3,r5,r4
    5fcc:	18c000cc 	andi	r3,r3,3
    5fd0:	1800441e 	bne	r3,zero,60e4 <memcpy+0x138>
    5fd4:	347ffc04 	addi	r17,r6,-16
    5fd8:	8822d13a 	srli	r17,r17,4
    5fdc:	28c00104 	addi	r3,r5,4
    5fe0:	23400104 	addi	r13,r4,4
    5fe4:	8820913a 	slli	r16,r17,4
    5fe8:	2b000204 	addi	r12,r5,8
    5fec:	22c00204 	addi	r11,r4,8
    5ff0:	84000504 	addi	r16,r16,20
    5ff4:	2a800304 	addi	r10,r5,12
    5ff8:	22400304 	addi	r9,r4,12
    5ffc:	2c21883a 	add	r16,r5,r16
    6000:	2811883a 	mov	r8,r5
    6004:	200f883a 	mov	r7,r4
    6008:	41000017 	ldw	r4,0(r8)
    600c:	1fc00017 	ldw	ra,0(r3)
    6010:	63c00017 	ldw	r15,0(r12)
    6014:	39000015 	stw	r4,0(r7)
    6018:	53800017 	ldw	r14,0(r10)
    601c:	6fc00015 	stw	ra,0(r13)
    6020:	5bc00015 	stw	r15,0(r11)
    6024:	4b800015 	stw	r14,0(r9)
    6028:	18c00404 	addi	r3,r3,16
    602c:	39c00404 	addi	r7,r7,16
    6030:	42000404 	addi	r8,r8,16
    6034:	6b400404 	addi	r13,r13,16
    6038:	63000404 	addi	r12,r12,16
    603c:	5ac00404 	addi	r11,r11,16
    6040:	52800404 	addi	r10,r10,16
    6044:	4a400404 	addi	r9,r9,16
    6048:	1c3fef1e 	bne	r3,r16,6008 <__alt_data_end+0xfffd52c8>
    604c:	89c00044 	addi	r7,r17,1
    6050:	380e913a 	slli	r7,r7,4
    6054:	310003cc 	andi	r4,r6,15
    6058:	02c000c4 	movi	r11,3
    605c:	11c7883a 	add	r3,r2,r7
    6060:	29cb883a 	add	r5,r5,r7
    6064:	5900212e 	bgeu	r11,r4,60ec <memcpy+0x140>
    6068:	1813883a 	mov	r9,r3
    606c:	2811883a 	mov	r8,r5
    6070:	200f883a 	mov	r7,r4
    6074:	42800017 	ldw	r10,0(r8)
    6078:	4a400104 	addi	r9,r9,4
    607c:	39ffff04 	addi	r7,r7,-4
    6080:	4abfff15 	stw	r10,-4(r9)
    6084:	42000104 	addi	r8,r8,4
    6088:	59fffa36 	bltu	r11,r7,6074 <__alt_data_end+0xfffd5334>
    608c:	213fff04 	addi	r4,r4,-4
    6090:	2008d0ba 	srli	r4,r4,2
    6094:	318000cc 	andi	r6,r6,3
    6098:	21000044 	addi	r4,r4,1
    609c:	2109883a 	add	r4,r4,r4
    60a0:	2109883a 	add	r4,r4,r4
    60a4:	1907883a 	add	r3,r3,r4
    60a8:	290b883a 	add	r5,r5,r4
    60ac:	30000626 	beq	r6,zero,60c8 <memcpy+0x11c>
    60b0:	198d883a 	add	r6,r3,r6
    60b4:	29c00003 	ldbu	r7,0(r5)
    60b8:	18c00044 	addi	r3,r3,1
    60bc:	29400044 	addi	r5,r5,1
    60c0:	19ffffc5 	stb	r7,-1(r3)
    60c4:	19bffb1e 	bne	r3,r6,60b4 <__alt_data_end+0xfffd5374>
    60c8:	dfc00217 	ldw	ra,8(sp)
    60cc:	dc400117 	ldw	r17,4(sp)
    60d0:	dc000017 	ldw	r16,0(sp)
    60d4:	dec00304 	addi	sp,sp,12
    60d8:	f800283a 	ret
    60dc:	2007883a 	mov	r3,r4
    60e0:	003ff206 	br	60ac <__alt_data_end+0xfffd536c>
    60e4:	2007883a 	mov	r3,r4
    60e8:	003ff106 	br	60b0 <__alt_data_end+0xfffd5370>
    60ec:	200d883a 	mov	r6,r4
    60f0:	003fee06 	br	60ac <__alt_data_end+0xfffd536c>

000060f4 <memset>:
    60f4:	20c000cc 	andi	r3,r4,3
    60f8:	2005883a 	mov	r2,r4
    60fc:	18004426 	beq	r3,zero,6210 <memset+0x11c>
    6100:	31ffffc4 	addi	r7,r6,-1
    6104:	30004026 	beq	r6,zero,6208 <memset+0x114>
    6108:	2813883a 	mov	r9,r5
    610c:	200d883a 	mov	r6,r4
    6110:	2007883a 	mov	r3,r4
    6114:	00000406 	br	6128 <memset+0x34>
    6118:	3a3fffc4 	addi	r8,r7,-1
    611c:	31800044 	addi	r6,r6,1
    6120:	38003926 	beq	r7,zero,6208 <memset+0x114>
    6124:	400f883a 	mov	r7,r8
    6128:	18c00044 	addi	r3,r3,1
    612c:	32400005 	stb	r9,0(r6)
    6130:	1a0000cc 	andi	r8,r3,3
    6134:	403ff81e 	bne	r8,zero,6118 <__alt_data_end+0xfffd53d8>
    6138:	010000c4 	movi	r4,3
    613c:	21c02d2e 	bgeu	r4,r7,61f4 <memset+0x100>
    6140:	29003fcc 	andi	r4,r5,255
    6144:	200c923a 	slli	r6,r4,8
    6148:	3108b03a 	or	r4,r6,r4
    614c:	200c943a 	slli	r6,r4,16
    6150:	218cb03a 	or	r6,r4,r6
    6154:	010003c4 	movi	r4,15
    6158:	21c0182e 	bgeu	r4,r7,61bc <memset+0xc8>
    615c:	3b3ffc04 	addi	r12,r7,-16
    6160:	6018d13a 	srli	r12,r12,4
    6164:	1a000104 	addi	r8,r3,4
    6168:	1ac00204 	addi	r11,r3,8
    616c:	6008913a 	slli	r4,r12,4
    6170:	1a800304 	addi	r10,r3,12
    6174:	1813883a 	mov	r9,r3
    6178:	21000504 	addi	r4,r4,20
    617c:	1909883a 	add	r4,r3,r4
    6180:	49800015 	stw	r6,0(r9)
    6184:	41800015 	stw	r6,0(r8)
    6188:	59800015 	stw	r6,0(r11)
    618c:	51800015 	stw	r6,0(r10)
    6190:	42000404 	addi	r8,r8,16
    6194:	4a400404 	addi	r9,r9,16
    6198:	5ac00404 	addi	r11,r11,16
    619c:	52800404 	addi	r10,r10,16
    61a0:	413ff71e 	bne	r8,r4,6180 <__alt_data_end+0xfffd5440>
    61a4:	63000044 	addi	r12,r12,1
    61a8:	6018913a 	slli	r12,r12,4
    61ac:	39c003cc 	andi	r7,r7,15
    61b0:	010000c4 	movi	r4,3
    61b4:	1b07883a 	add	r3,r3,r12
    61b8:	21c00e2e 	bgeu	r4,r7,61f4 <memset+0x100>
    61bc:	1813883a 	mov	r9,r3
    61c0:	3811883a 	mov	r8,r7
    61c4:	010000c4 	movi	r4,3
    61c8:	49800015 	stw	r6,0(r9)
    61cc:	423fff04 	addi	r8,r8,-4
    61d0:	4a400104 	addi	r9,r9,4
    61d4:	223ffc36 	bltu	r4,r8,61c8 <__alt_data_end+0xfffd5488>
    61d8:	393fff04 	addi	r4,r7,-4
    61dc:	2008d0ba 	srli	r4,r4,2
    61e0:	39c000cc 	andi	r7,r7,3
    61e4:	21000044 	addi	r4,r4,1
    61e8:	2109883a 	add	r4,r4,r4
    61ec:	2109883a 	add	r4,r4,r4
    61f0:	1907883a 	add	r3,r3,r4
    61f4:	38000526 	beq	r7,zero,620c <memset+0x118>
    61f8:	19cf883a 	add	r7,r3,r7
    61fc:	19400005 	stb	r5,0(r3)
    6200:	18c00044 	addi	r3,r3,1
    6204:	38fffd1e 	bne	r7,r3,61fc <__alt_data_end+0xfffd54bc>
    6208:	f800283a 	ret
    620c:	f800283a 	ret
    6210:	2007883a 	mov	r3,r4
    6214:	300f883a 	mov	r7,r6
    6218:	003fc706 	br	6138 <__alt_data_end+0xfffd53f8>

0000621c <_printf_r>:
    621c:	defffd04 	addi	sp,sp,-12
    6220:	2805883a 	mov	r2,r5
    6224:	dfc00015 	stw	ra,0(sp)
    6228:	d9800115 	stw	r6,4(sp)
    622c:	d9c00215 	stw	r7,8(sp)
    6230:	21400217 	ldw	r5,8(r4)
    6234:	d9c00104 	addi	r7,sp,4
    6238:	100d883a 	mov	r6,r2
    623c:	00064480 	call	6448 <___vfprintf_internal_r>
    6240:	dfc00017 	ldw	ra,0(sp)
    6244:	dec00304 	addi	sp,sp,12
    6248:	f800283a 	ret

0000624c <printf>:
    624c:	defffc04 	addi	sp,sp,-16
    6250:	dfc00015 	stw	ra,0(sp)
    6254:	d9400115 	stw	r5,4(sp)
    6258:	d9800215 	stw	r6,8(sp)
    625c:	d9c00315 	stw	r7,12(sp)
    6260:	008000b4 	movhi	r2,2
    6264:	10be1e04 	addi	r2,r2,-1928
    6268:	10800017 	ldw	r2,0(r2)
    626c:	200b883a 	mov	r5,r4
    6270:	d9800104 	addi	r6,sp,4
    6274:	11000217 	ldw	r4,8(r2)
    6278:	00087240 	call	8724 <__vfprintf_internal>
    627c:	dfc00017 	ldw	ra,0(sp)
    6280:	dec00404 	addi	sp,sp,16
    6284:	f800283a 	ret

00006288 <_puts_r>:
    6288:	defff604 	addi	sp,sp,-40
    628c:	dc000715 	stw	r16,28(sp)
    6290:	2021883a 	mov	r16,r4
    6294:	2809883a 	mov	r4,r5
    6298:	dc400815 	stw	r17,32(sp)
    629c:	dfc00915 	stw	ra,36(sp)
    62a0:	2823883a 	mov	r17,r5
    62a4:	00063b00 	call	63b0 <strlen>
    62a8:	10c00044 	addi	r3,r2,1
    62ac:	d8800115 	stw	r2,4(sp)
    62b0:	008000b4 	movhi	r2,2
    62b4:	10b68504 	addi	r2,r2,-9708
    62b8:	d8800215 	stw	r2,8(sp)
    62bc:	00800044 	movi	r2,1
    62c0:	d8800315 	stw	r2,12(sp)
    62c4:	00800084 	movi	r2,2
    62c8:	dc400015 	stw	r17,0(sp)
    62cc:	d8c00615 	stw	r3,24(sp)
    62d0:	dec00415 	stw	sp,16(sp)
    62d4:	d8800515 	stw	r2,20(sp)
    62d8:	80000226 	beq	r16,zero,62e4 <_puts_r+0x5c>
    62dc:	80800e17 	ldw	r2,56(r16)
    62e0:	10001426 	beq	r2,zero,6334 <_puts_r+0xac>
    62e4:	81400217 	ldw	r5,8(r16)
    62e8:	2880030b 	ldhu	r2,12(r5)
    62ec:	10c8000c 	andi	r3,r2,8192
    62f0:	1800061e 	bne	r3,zero,630c <_puts_r+0x84>
    62f4:	29001917 	ldw	r4,100(r5)
    62f8:	00f7ffc4 	movi	r3,-8193
    62fc:	10880014 	ori	r2,r2,8192
    6300:	20c6703a 	and	r3,r4,r3
    6304:	2880030d 	sth	r2,12(r5)
    6308:	28c01915 	stw	r3,100(r5)
    630c:	d9800404 	addi	r6,sp,16
    6310:	8009883a 	mov	r4,r16
    6314:	000ac8c0 	call	ac8c <__sfvwrite_r>
    6318:	1000091e 	bne	r2,zero,6340 <_puts_r+0xb8>
    631c:	00800284 	movi	r2,10
    6320:	dfc00917 	ldw	ra,36(sp)
    6324:	dc400817 	ldw	r17,32(sp)
    6328:	dc000717 	ldw	r16,28(sp)
    632c:	dec00a04 	addi	sp,sp,40
    6330:	f800283a 	ret
    6334:	8009883a 	mov	r4,r16
    6338:	000a8080 	call	a808 <__sinit>
    633c:	003fe906 	br	62e4 <__alt_data_end+0xfffd55a4>
    6340:	00bfffc4 	movi	r2,-1
    6344:	003ff606 	br	6320 <__alt_data_end+0xfffd55e0>

00006348 <puts>:
    6348:	008000b4 	movhi	r2,2
    634c:	10be1e04 	addi	r2,r2,-1928
    6350:	200b883a 	mov	r5,r4
    6354:	11000017 	ldw	r4,0(r2)
    6358:	00062881 	jmpi	6288 <_puts_r>

0000635c <_sbrk_r>:
    635c:	defffd04 	addi	sp,sp,-12
    6360:	dc000015 	stw	r16,0(sp)
    6364:	040000b4 	movhi	r16,2
    6368:	dc400115 	stw	r17,4(sp)
    636c:	84054704 	addi	r16,r16,5404
    6370:	2023883a 	mov	r17,r4
    6374:	2809883a 	mov	r4,r5
    6378:	dfc00215 	stw	ra,8(sp)
    637c:	80000015 	stw	zero,0(r16)
    6380:	00106c40 	call	106c4 <sbrk>
    6384:	00ffffc4 	movi	r3,-1
    6388:	10c00526 	beq	r2,r3,63a0 <_sbrk_r+0x44>
    638c:	dfc00217 	ldw	ra,8(sp)
    6390:	dc400117 	ldw	r17,4(sp)
    6394:	dc000017 	ldw	r16,0(sp)
    6398:	dec00304 	addi	sp,sp,12
    639c:	f800283a 	ret
    63a0:	80c00017 	ldw	r3,0(r16)
    63a4:	183ff926 	beq	r3,zero,638c <__alt_data_end+0xfffd564c>
    63a8:	88c00015 	stw	r3,0(r17)
    63ac:	003ff706 	br	638c <__alt_data_end+0xfffd564c>

000063b0 <strlen>:
    63b0:	208000cc 	andi	r2,r4,3
    63b4:	10002026 	beq	r2,zero,6438 <strlen+0x88>
    63b8:	20800007 	ldb	r2,0(r4)
    63bc:	10002026 	beq	r2,zero,6440 <strlen+0x90>
    63c0:	2005883a 	mov	r2,r4
    63c4:	00000206 	br	63d0 <strlen+0x20>
    63c8:	10c00007 	ldb	r3,0(r2)
    63cc:	18001826 	beq	r3,zero,6430 <strlen+0x80>
    63d0:	10800044 	addi	r2,r2,1
    63d4:	10c000cc 	andi	r3,r2,3
    63d8:	183ffb1e 	bne	r3,zero,63c8 <__alt_data_end+0xfffd5688>
    63dc:	10c00017 	ldw	r3,0(r2)
    63e0:	01ffbff4 	movhi	r7,65279
    63e4:	39ffbfc4 	addi	r7,r7,-257
    63e8:	00ca303a 	nor	r5,zero,r3
    63ec:	01a02074 	movhi	r6,32897
    63f0:	19c7883a 	add	r3,r3,r7
    63f4:	31a02004 	addi	r6,r6,-32640
    63f8:	1946703a 	and	r3,r3,r5
    63fc:	1986703a 	and	r3,r3,r6
    6400:	1800091e 	bne	r3,zero,6428 <strlen+0x78>
    6404:	10800104 	addi	r2,r2,4
    6408:	10c00017 	ldw	r3,0(r2)
    640c:	19cb883a 	add	r5,r3,r7
    6410:	00c6303a 	nor	r3,zero,r3
    6414:	28c6703a 	and	r3,r5,r3
    6418:	1986703a 	and	r3,r3,r6
    641c:	183ff926 	beq	r3,zero,6404 <__alt_data_end+0xfffd56c4>
    6420:	00000106 	br	6428 <strlen+0x78>
    6424:	10800044 	addi	r2,r2,1
    6428:	10c00007 	ldb	r3,0(r2)
    642c:	183ffd1e 	bne	r3,zero,6424 <__alt_data_end+0xfffd56e4>
    6430:	1105c83a 	sub	r2,r2,r4
    6434:	f800283a 	ret
    6438:	2005883a 	mov	r2,r4
    643c:	003fe706 	br	63dc <__alt_data_end+0xfffd569c>
    6440:	0005883a 	mov	r2,zero
    6444:	f800283a 	ret

00006448 <___vfprintf_internal_r>:
    6448:	deffb804 	addi	sp,sp,-288
    644c:	dfc04715 	stw	ra,284(sp)
    6450:	ddc04515 	stw	r23,276(sp)
    6454:	dd404315 	stw	r21,268(sp)
    6458:	d9002d15 	stw	r4,180(sp)
    645c:	282f883a 	mov	r23,r5
    6460:	302b883a 	mov	r21,r6
    6464:	d9c02e15 	stw	r7,184(sp)
    6468:	df004615 	stw	fp,280(sp)
    646c:	dd804415 	stw	r22,272(sp)
    6470:	dd004215 	stw	r20,264(sp)
    6474:	dcc04115 	stw	r19,260(sp)
    6478:	dc804015 	stw	r18,256(sp)
    647c:	dc403f15 	stw	r17,252(sp)
    6480:	dc003e15 	stw	r16,248(sp)
    6484:	000b3880 	call	b388 <_localeconv_r>
    6488:	10800017 	ldw	r2,0(r2)
    648c:	1009883a 	mov	r4,r2
    6490:	d8803415 	stw	r2,208(sp)
    6494:	00063b00 	call	63b0 <strlen>
    6498:	d8803715 	stw	r2,220(sp)
    649c:	d8802d17 	ldw	r2,180(sp)
    64a0:	10000226 	beq	r2,zero,64ac <___vfprintf_internal_r+0x64>
    64a4:	10800e17 	ldw	r2,56(r2)
    64a8:	1000fb26 	beq	r2,zero,6898 <___vfprintf_internal_r+0x450>
    64ac:	b880030b 	ldhu	r2,12(r23)
    64b0:	10c8000c 	andi	r3,r2,8192
    64b4:	1800061e 	bne	r3,zero,64d0 <___vfprintf_internal_r+0x88>
    64b8:	b9001917 	ldw	r4,100(r23)
    64bc:	00f7ffc4 	movi	r3,-8193
    64c0:	10880014 	ori	r2,r2,8192
    64c4:	20c6703a 	and	r3,r4,r3
    64c8:	b880030d 	sth	r2,12(r23)
    64cc:	b8c01915 	stw	r3,100(r23)
    64d0:	10c0020c 	andi	r3,r2,8
    64d4:	1800c326 	beq	r3,zero,67e4 <___vfprintf_internal_r+0x39c>
    64d8:	b8c00417 	ldw	r3,16(r23)
    64dc:	1800c126 	beq	r3,zero,67e4 <___vfprintf_internal_r+0x39c>
    64e0:	1080068c 	andi	r2,r2,26
    64e4:	00c00284 	movi	r3,10
    64e8:	10c0c626 	beq	r2,r3,6804 <___vfprintf_internal_r+0x3bc>
    64ec:	d8c00404 	addi	r3,sp,16
    64f0:	050000b4 	movhi	r20,2
    64f4:	d9001e04 	addi	r4,sp,120
    64f8:	a5369684 	addi	r20,r20,-9638
    64fc:	d8c01e15 	stw	r3,120(sp)
    6500:	d8002015 	stw	zero,128(sp)
    6504:	d8001f15 	stw	zero,124(sp)
    6508:	d8003315 	stw	zero,204(sp)
    650c:	d8003615 	stw	zero,216(sp)
    6510:	d8003815 	stw	zero,224(sp)
    6514:	1811883a 	mov	r8,r3
    6518:	d8003915 	stw	zero,228(sp)
    651c:	d8003a15 	stw	zero,232(sp)
    6520:	d8002f15 	stw	zero,188(sp)
    6524:	d9002815 	stw	r4,160(sp)
    6528:	a8800007 	ldb	r2,0(r21)
    652c:	10028b26 	beq	r2,zero,6f5c <___vfprintf_internal_r+0xb14>
    6530:	00c00944 	movi	r3,37
    6534:	a823883a 	mov	r17,r21
    6538:	10c0021e 	bne	r2,r3,6544 <___vfprintf_internal_r+0xfc>
    653c:	00001406 	br	6590 <___vfprintf_internal_r+0x148>
    6540:	10c00326 	beq	r2,r3,6550 <___vfprintf_internal_r+0x108>
    6544:	8c400044 	addi	r17,r17,1
    6548:	88800007 	ldb	r2,0(r17)
    654c:	103ffc1e 	bne	r2,zero,6540 <__alt_data_end+0xfffd5800>
    6550:	8d61c83a 	sub	r16,r17,r21
    6554:	80000e26 	beq	r16,zero,6590 <___vfprintf_internal_r+0x148>
    6558:	d8c02017 	ldw	r3,128(sp)
    655c:	d8801f17 	ldw	r2,124(sp)
    6560:	45400015 	stw	r21,0(r8)
    6564:	1c07883a 	add	r3,r3,r16
    6568:	10800044 	addi	r2,r2,1
    656c:	d8c02015 	stw	r3,128(sp)
    6570:	44000115 	stw	r16,4(r8)
    6574:	d8801f15 	stw	r2,124(sp)
    6578:	00c001c4 	movi	r3,7
    657c:	1880a916 	blt	r3,r2,6824 <___vfprintf_internal_r+0x3dc>
    6580:	42000204 	addi	r8,r8,8
    6584:	d9402f17 	ldw	r5,188(sp)
    6588:	2c0b883a 	add	r5,r5,r16
    658c:	d9402f15 	stw	r5,188(sp)
    6590:	88800007 	ldb	r2,0(r17)
    6594:	1000aa26 	beq	r2,zero,6840 <___vfprintf_internal_r+0x3f8>
    6598:	8d400044 	addi	r21,r17,1
    659c:	8c400047 	ldb	r17,1(r17)
    65a0:	0021883a 	mov	r16,zero
    65a4:	00bfffc4 	movi	r2,-1
    65a8:	0025883a 	mov	r18,zero
    65ac:	dc002905 	stb	r16,164(sp)
    65b0:	d8002785 	stb	zero,158(sp)
    65b4:	d8002b05 	stb	zero,172(sp)
    65b8:	d8802a15 	stw	r2,168(sp)
    65bc:	d8003115 	stw	zero,196(sp)
    65c0:	04c01604 	movi	r19,88
    65c4:	05800244 	movi	r22,9
    65c8:	9021883a 	mov	r16,r18
    65cc:	4039883a 	mov	fp,r8
    65d0:	ad400044 	addi	r21,r21,1
    65d4:	88bff804 	addi	r2,r17,-32
    65d8:	98833236 	bltu	r19,r2,72a4 <___vfprintf_internal_r+0xe5c>
    65dc:	100490ba 	slli	r2,r2,2
    65e0:	00c00034 	movhi	r3,0
    65e4:	18d97d04 	addi	r3,r3,26100
    65e8:	10c5883a 	add	r2,r2,r3
    65ec:	10800017 	ldw	r2,0(r2)
    65f0:	1000683a 	jmp	r2
    65f4:	0000719c 	xori	zero,zero,454
    65f8:	000072a4 	muli	zero,zero,458
    65fc:	000072a4 	muli	zero,zero,458
    6600:	000071bc 	xorhi	zero,zero,454
    6604:	000072a4 	muli	zero,zero,458
    6608:	000072a4 	muli	zero,zero,458
    660c:	000072a4 	muli	zero,zero,458
    6610:	000072a4 	muli	zero,zero,458
    6614:	000072a4 	muli	zero,zero,458
    6618:	000072a4 	muli	zero,zero,458
    661c:	000068a4 	muli	zero,zero,418
    6620:	000070ac 	andhi	zero,zero,450
    6624:	000072a4 	muli	zero,zero,458
    6628:	00006768 	cmpgeui	zero,zero,413
    662c:	000068c8 	cmpgei	zero,zero,419
    6630:	000072a4 	muli	zero,zero,458
    6634:	00006918 	cmpnei	zero,zero,420
    6638:	00006924 	muli	zero,zero,420
    663c:	00006924 	muli	zero,zero,420
    6640:	00006924 	muli	zero,zero,420
    6644:	00006924 	muli	zero,zero,420
    6648:	00006924 	muli	zero,zero,420
    664c:	00006924 	muli	zero,zero,420
    6650:	00006924 	muli	zero,zero,420
    6654:	00006924 	muli	zero,zero,420
    6658:	00006924 	muli	zero,zero,420
    665c:	000072a4 	muli	zero,zero,458
    6660:	000072a4 	muli	zero,zero,458
    6664:	000072a4 	muli	zero,zero,458
    6668:	000072a4 	muli	zero,zero,458
    666c:	000072a4 	muli	zero,zero,458
    6670:	000072a4 	muli	zero,zero,458
    6674:	000072a4 	muli	zero,zero,458
    6678:	000072a4 	muli	zero,zero,458
    667c:	000072a4 	muli	zero,zero,458
    6680:	000072a4 	muli	zero,zero,458
    6684:	00006960 	cmpeqi	zero,zero,421
    6688:	00006a28 	cmpgeui	zero,zero,424
    668c:	000072a4 	muli	zero,zero,458
    6690:	00006a28 	cmpgeui	zero,zero,424
    6694:	000072a4 	muli	zero,zero,458
    6698:	000072a4 	muli	zero,zero,458
    669c:	000072a4 	muli	zero,zero,458
    66a0:	000072a4 	muli	zero,zero,458
    66a4:	00006ad4 	movui	zero,427
    66a8:	000072a4 	muli	zero,zero,458
    66ac:	000072a4 	muli	zero,zero,458
    66b0:	00006ae0 	cmpeqi	zero,zero,427
    66b4:	000072a4 	muli	zero,zero,458
    66b8:	000072a4 	muli	zero,zero,458
    66bc:	000072a4 	muli	zero,zero,458
    66c0:	000072a4 	muli	zero,zero,458
    66c4:	000072a4 	muli	zero,zero,458
    66c8:	00006f64 	muli	zero,zero,445
    66cc:	000072a4 	muli	zero,zero,458
    66d0:	000072a4 	muli	zero,zero,458
    66d4:	00006fd0 	cmplti	zero,zero,447
    66d8:	000072a4 	muli	zero,zero,458
    66dc:	000072a4 	muli	zero,zero,458
    66e0:	000072a4 	muli	zero,zero,458
    66e4:	000072a4 	muli	zero,zero,458
    66e8:	000072a4 	muli	zero,zero,458
    66ec:	000072a4 	muli	zero,zero,458
    66f0:	000072a4 	muli	zero,zero,458
    66f4:	000072a4 	muli	zero,zero,458
    66f8:	000072a4 	muli	zero,zero,458
    66fc:	000072a4 	muli	zero,zero,458
    6700:	00007248 	cmpgei	zero,zero,457
    6704:	000071c8 	cmpgei	zero,zero,455
    6708:	00006a28 	cmpgeui	zero,zero,424
    670c:	00006a28 	cmpgeui	zero,zero,424
    6710:	00006a28 	cmpgeui	zero,zero,424
    6714:	000071e8 	cmpgeui	zero,zero,455
    6718:	000071c8 	cmpgei	zero,zero,455
    671c:	000072a4 	muli	zero,zero,458
    6720:	000072a4 	muli	zero,zero,458
    6724:	000071f4 	movhi	zero,455
    6728:	000072a4 	muli	zero,zero,458
    672c:	00007208 	cmpgei	zero,zero,456
    6730:	0000708c 	andi	zero,zero,450
    6734:	00006774 	movhi	zero,413
    6738:	000070c4 	movi	zero,451
    673c:	000072a4 	muli	zero,zero,458
    6740:	000070d0 	cmplti	zero,zero,451
    6744:	000072a4 	muli	zero,zero,458
    6748:	00007134 	movhi	zero,452
    674c:	000072a4 	muli	zero,zero,458
    6750:	000072a4 	muli	zero,zero,458
    6754:	00007154 	movui	zero,453
    6758:	d8c03117 	ldw	r3,196(sp)
    675c:	d8802e15 	stw	r2,184(sp)
    6760:	00c7c83a 	sub	r3,zero,r3
    6764:	d8c03115 	stw	r3,196(sp)
    6768:	84000114 	ori	r16,r16,4
    676c:	ac400007 	ldb	r17,0(r21)
    6770:	003f9706 	br	65d0 <__alt_data_end+0xfffd5890>
    6774:	00800c04 	movi	r2,48
    6778:	d8802705 	stb	r2,156(sp)
    677c:	00801e04 	movi	r2,120
    6780:	d8802745 	stb	r2,157(sp)
    6784:	d9002a17 	ldw	r4,168(sp)
    6788:	d8802e17 	ldw	r2,184(sp)
    678c:	d8002785 	stb	zero,158(sp)
    6790:	e011883a 	mov	r8,fp
    6794:	10c00104 	addi	r3,r2,4
    6798:	14c00017 	ldw	r19,0(r2)
    679c:	002d883a 	mov	r22,zero
    67a0:	80800094 	ori	r2,r16,2
    67a4:	2002ca16 	blt	r4,zero,72d0 <___vfprintf_internal_r+0xe88>
    67a8:	00bfdfc4 	movi	r2,-129
    67ac:	80a4703a 	and	r18,r16,r2
    67b0:	d8c02e15 	stw	r3,184(sp)
    67b4:	94800094 	ori	r18,r18,2
    67b8:	9802b41e 	bne	r19,zero,728c <___vfprintf_internal_r+0xe44>
    67bc:	014000b4 	movhi	r5,2
    67c0:	29768f04 	addi	r5,r5,-9668
    67c4:	d9403915 	stw	r5,228(sp)
    67c8:	04401e04 	movi	r17,120
    67cc:	d8802a17 	ldw	r2,168(sp)
    67d0:	0039883a 	mov	fp,zero
    67d4:	1001fa26 	beq	r2,zero,6fc0 <___vfprintf_internal_r+0xb78>
    67d8:	0027883a 	mov	r19,zero
    67dc:	002d883a 	mov	r22,zero
    67e0:	00021906 	br	7048 <___vfprintf_internal_r+0xc00>
    67e4:	d9002d17 	ldw	r4,180(sp)
    67e8:	b80b883a 	mov	r5,r23
    67ec:	00087fc0 	call	87fc <__swsetup_r>
    67f0:	1005dc1e 	bne	r2,zero,7f64 <___vfprintf_internal_r+0x1b1c>
    67f4:	b880030b 	ldhu	r2,12(r23)
    67f8:	00c00284 	movi	r3,10
    67fc:	1080068c 	andi	r2,r2,26
    6800:	10ff3a1e 	bne	r2,r3,64ec <__alt_data_end+0xfffd57ac>
    6804:	b880038f 	ldh	r2,14(r23)
    6808:	103f3816 	blt	r2,zero,64ec <__alt_data_end+0xfffd57ac>
    680c:	d9c02e17 	ldw	r7,184(sp)
    6810:	d9002d17 	ldw	r4,180(sp)
    6814:	a80d883a 	mov	r6,r21
    6818:	b80b883a 	mov	r5,r23
    681c:	00087400 	call	8740 <__sbprintf>
    6820:	00001106 	br	6868 <___vfprintf_internal_r+0x420>
    6824:	d9002d17 	ldw	r4,180(sp)
    6828:	d9801e04 	addi	r6,sp,120
    682c:	b80b883a 	mov	r5,r23
    6830:	000d0e40 	call	d0e4 <__sprint_r>
    6834:	1000081e 	bne	r2,zero,6858 <___vfprintf_internal_r+0x410>
    6838:	da000404 	addi	r8,sp,16
    683c:	003f5106 	br	6584 <__alt_data_end+0xfffd5844>
    6840:	d8802017 	ldw	r2,128(sp)
    6844:	10000426 	beq	r2,zero,6858 <___vfprintf_internal_r+0x410>
    6848:	d9002d17 	ldw	r4,180(sp)
    684c:	d9801e04 	addi	r6,sp,120
    6850:	b80b883a 	mov	r5,r23
    6854:	000d0e40 	call	d0e4 <__sprint_r>
    6858:	b880030b 	ldhu	r2,12(r23)
    685c:	1080100c 	andi	r2,r2,64
    6860:	1005c01e 	bne	r2,zero,7f64 <___vfprintf_internal_r+0x1b1c>
    6864:	d8802f17 	ldw	r2,188(sp)
    6868:	dfc04717 	ldw	ra,284(sp)
    686c:	df004617 	ldw	fp,280(sp)
    6870:	ddc04517 	ldw	r23,276(sp)
    6874:	dd804417 	ldw	r22,272(sp)
    6878:	dd404317 	ldw	r21,268(sp)
    687c:	dd004217 	ldw	r20,264(sp)
    6880:	dcc04117 	ldw	r19,260(sp)
    6884:	dc804017 	ldw	r18,256(sp)
    6888:	dc403f17 	ldw	r17,252(sp)
    688c:	dc003e17 	ldw	r16,248(sp)
    6890:	dec04804 	addi	sp,sp,288
    6894:	f800283a 	ret
    6898:	d9002d17 	ldw	r4,180(sp)
    689c:	000a8080 	call	a808 <__sinit>
    68a0:	003f0206 	br	64ac <__alt_data_end+0xfffd576c>
    68a4:	d9002e17 	ldw	r4,184(sp)
    68a8:	d9402e17 	ldw	r5,184(sp)
    68ac:	21000017 	ldw	r4,0(r4)
    68b0:	28800104 	addi	r2,r5,4
    68b4:	d9003115 	stw	r4,196(sp)
    68b8:	203fa716 	blt	r4,zero,6758 <__alt_data_end+0xfffd5a18>
    68bc:	d8802e15 	stw	r2,184(sp)
    68c0:	ac400007 	ldb	r17,0(r21)
    68c4:	003f4206 	br	65d0 <__alt_data_end+0xfffd5890>
    68c8:	ac400007 	ldb	r17,0(r21)
    68cc:	01000a84 	movi	r4,42
    68d0:	a8c00044 	addi	r3,r21,1
    68d4:	89075826 	beq	r17,r4,8638 <___vfprintf_internal_r+0x21f0>
    68d8:	8cbff404 	addi	r18,r17,-48
    68dc:	b486ae36 	bltu	r22,r18,8398 <___vfprintf_internal_r+0x1f50>
    68e0:	0009883a 	mov	r4,zero
    68e4:	1823883a 	mov	r17,r3
    68e8:	01400284 	movi	r5,10
    68ec:	0002f440 	call	2f44 <__mulsi3>
    68f0:	88c00007 	ldb	r3,0(r17)
    68f4:	1489883a 	add	r4,r2,r18
    68f8:	8d400044 	addi	r21,r17,1
    68fc:	1cbff404 	addi	r18,r3,-48
    6900:	a823883a 	mov	r17,r21
    6904:	b4bff82e 	bgeu	r22,r18,68e8 <__alt_data_end+0xfffd5ba8>
    6908:	1823883a 	mov	r17,r3
    690c:	2005f616 	blt	r4,zero,80e8 <___vfprintf_internal_r+0x1ca0>
    6910:	d9002a15 	stw	r4,168(sp)
    6914:	003f2f06 	br	65d4 <__alt_data_end+0xfffd5894>
    6918:	84002014 	ori	r16,r16,128
    691c:	ac400007 	ldb	r17,0(r21)
    6920:	003f2b06 	br	65d0 <__alt_data_end+0xfffd5890>
    6924:	8cbff404 	addi	r18,r17,-48
    6928:	d8003115 	stw	zero,196(sp)
    692c:	0009883a 	mov	r4,zero
    6930:	a823883a 	mov	r17,r21
    6934:	01400284 	movi	r5,10
    6938:	0002f440 	call	2f44 <__mulsi3>
    693c:	88c00007 	ldb	r3,0(r17)
    6940:	9089883a 	add	r4,r18,r2
    6944:	ad400044 	addi	r21,r21,1
    6948:	1cbff404 	addi	r18,r3,-48
    694c:	a823883a 	mov	r17,r21
    6950:	b4bff82e 	bgeu	r22,r18,6934 <__alt_data_end+0xfffd5bf4>
    6954:	1823883a 	mov	r17,r3
    6958:	d9003115 	stw	r4,196(sp)
    695c:	003f1d06 	br	65d4 <__alt_data_end+0xfffd5894>
    6960:	8025883a 	mov	r18,r16
    6964:	dc002903 	ldbu	r16,164(sp)
    6968:	e011883a 	mov	r8,fp
    696c:	84003fcc 	andi	r16,r16,255
    6970:	8007531e 	bne	r16,zero,86c0 <___vfprintf_internal_r+0x2278>
    6974:	94800414 	ori	r18,r18,16
    6978:	9080080c 	andi	r2,r18,32
    697c:	1003a326 	beq	r2,zero,780c <___vfprintf_internal_r+0x13c4>
    6980:	d9002e17 	ldw	r4,184(sp)
    6984:	20800117 	ldw	r2,4(r4)
    6988:	24c00017 	ldw	r19,0(r4)
    698c:	21000204 	addi	r4,r4,8
    6990:	d9002e15 	stw	r4,184(sp)
    6994:	102d883a 	mov	r22,r2
    6998:	10047316 	blt	r2,zero,7b68 <___vfprintf_internal_r+0x1720>
    699c:	d9002a17 	ldw	r4,168(sp)
    69a0:	df002783 	ldbu	fp,158(sp)
    69a4:	2003e416 	blt	r4,zero,7938 <___vfprintf_internal_r+0x14f0>
    69a8:	00ffdfc4 	movi	r3,-129
    69ac:	9d84b03a 	or	r2,r19,r22
    69b0:	90e4703a 	and	r18,r18,r3
    69b4:	10018026 	beq	r2,zero,6fb8 <___vfprintf_internal_r+0xb70>
    69b8:	b003ab26 	beq	r22,zero,7868 <___vfprintf_internal_r+0x1420>
    69bc:	dc402915 	stw	r17,164(sp)
    69c0:	dc001e04 	addi	r16,sp,120
    69c4:	b023883a 	mov	r17,r22
    69c8:	402d883a 	mov	r22,r8
    69cc:	9809883a 	mov	r4,r19
    69d0:	880b883a 	mov	r5,r17
    69d4:	01800284 	movi	r6,10
    69d8:	000f883a 	mov	r7,zero
    69dc:	000f6280 	call	f628 <__umoddi3>
    69e0:	10800c04 	addi	r2,r2,48
    69e4:	843fffc4 	addi	r16,r16,-1
    69e8:	9809883a 	mov	r4,r19
    69ec:	880b883a 	mov	r5,r17
    69f0:	80800005 	stb	r2,0(r16)
    69f4:	01800284 	movi	r6,10
    69f8:	000f883a 	mov	r7,zero
    69fc:	000f02c0 	call	f02c <__udivdi3>
    6a00:	1027883a 	mov	r19,r2
    6a04:	10c4b03a 	or	r2,r2,r3
    6a08:	1823883a 	mov	r17,r3
    6a0c:	103fef1e 	bne	r2,zero,69cc <__alt_data_end+0xfffd5c8c>
    6a10:	d8c02817 	ldw	r3,160(sp)
    6a14:	dc402917 	ldw	r17,164(sp)
    6a18:	b011883a 	mov	r8,r22
    6a1c:	1c07c83a 	sub	r3,r3,r16
    6a20:	d8c02b15 	stw	r3,172(sp)
    6a24:	00005f06 	br	6ba4 <___vfprintf_internal_r+0x75c>
    6a28:	8025883a 	mov	r18,r16
    6a2c:	dc002903 	ldbu	r16,164(sp)
    6a30:	e011883a 	mov	r8,fp
    6a34:	84003fcc 	andi	r16,r16,255
    6a38:	80071e1e 	bne	r16,zero,86b4 <___vfprintf_internal_r+0x226c>
    6a3c:	9080020c 	andi	r2,r18,8
    6a40:	1004af26 	beq	r2,zero,7d00 <___vfprintf_internal_r+0x18b8>
    6a44:	d9002e17 	ldw	r4,184(sp)
    6a48:	d9402e17 	ldw	r5,184(sp)
    6a4c:	d8802e17 	ldw	r2,184(sp)
    6a50:	21000017 	ldw	r4,0(r4)
    6a54:	29400117 	ldw	r5,4(r5)
    6a58:	10800204 	addi	r2,r2,8
    6a5c:	d9003615 	stw	r4,216(sp)
    6a60:	d9403815 	stw	r5,224(sp)
    6a64:	d8802e15 	stw	r2,184(sp)
    6a68:	d9003617 	ldw	r4,216(sp)
    6a6c:	d9403817 	ldw	r5,224(sp)
    6a70:	da003d15 	stw	r8,244(sp)
    6a74:	04000044 	movi	r16,1
    6a78:	00029640 	call	2964 <__fpclassifyd>
    6a7c:	da003d17 	ldw	r8,244(sp)
    6a80:	1404441e 	bne	r2,r16,7b94 <___vfprintf_internal_r+0x174c>
    6a84:	d9003617 	ldw	r4,216(sp)
    6a88:	d9403817 	ldw	r5,224(sp)
    6a8c:	000d883a 	mov	r6,zero
    6a90:	000f883a 	mov	r7,zero
    6a94:	000434c0 	call	434c <__ledf2>
    6a98:	da003d17 	ldw	r8,244(sp)
    6a9c:	1005e316 	blt	r2,zero,822c <___vfprintf_internal_r+0x1de4>
    6aa0:	df002783 	ldbu	fp,158(sp)
    6aa4:	008011c4 	movi	r2,71
    6aa8:	1445580e 	bge	r2,r17,800c <___vfprintf_internal_r+0x1bc4>
    6aac:	040000b4 	movhi	r16,2
    6ab0:	84368704 	addi	r16,r16,-9700
    6ab4:	00c000c4 	movi	r3,3
    6ab8:	00bfdfc4 	movi	r2,-129
    6abc:	d8c02915 	stw	r3,164(sp)
    6ac0:	90a4703a 	and	r18,r18,r2
    6ac4:	d8c02b15 	stw	r3,172(sp)
    6ac8:	d8002a15 	stw	zero,168(sp)
    6acc:	d8003215 	stw	zero,200(sp)
    6ad0:	00003a06 	br	6bbc <___vfprintf_internal_r+0x774>
    6ad4:	84000214 	ori	r16,r16,8
    6ad8:	ac400007 	ldb	r17,0(r21)
    6adc:	003ebc06 	br	65d0 <__alt_data_end+0xfffd5890>
    6ae0:	8025883a 	mov	r18,r16
    6ae4:	dc002903 	ldbu	r16,164(sp)
    6ae8:	e011883a 	mov	r8,fp
    6aec:	84003fcc 	andi	r16,r16,255
    6af0:	8007001e 	bne	r16,zero,86f4 <___vfprintf_internal_r+0x22ac>
    6af4:	94800414 	ori	r18,r18,16
    6af8:	9080080c 	andi	r2,r18,32
    6afc:	1002fa26 	beq	r2,zero,76e8 <___vfprintf_internal_r+0x12a0>
    6b00:	d9002e17 	ldw	r4,184(sp)
    6b04:	d9402a17 	ldw	r5,168(sp)
    6b08:	d8002785 	stb	zero,158(sp)
    6b0c:	20800204 	addi	r2,r4,8
    6b10:	24c00017 	ldw	r19,0(r4)
    6b14:	25800117 	ldw	r22,4(r4)
    6b18:	2804b116 	blt	r5,zero,7de0 <___vfprintf_internal_r+0x1998>
    6b1c:	013fdfc4 	movi	r4,-129
    6b20:	9d86b03a 	or	r3,r19,r22
    6b24:	d8802e15 	stw	r2,184(sp)
    6b28:	9124703a 	and	r18,r18,r4
    6b2c:	1802fb1e 	bne	r3,zero,771c <___vfprintf_internal_r+0x12d4>
    6b30:	d8c02a17 	ldw	r3,168(sp)
    6b34:	0039883a 	mov	fp,zero
    6b38:	1805e526 	beq	r3,zero,82d0 <___vfprintf_internal_r+0x1e88>
    6b3c:	0027883a 	mov	r19,zero
    6b40:	002d883a 	mov	r22,zero
    6b44:	dc001e04 	addi	r16,sp,120
    6b48:	9806d0fa 	srli	r3,r19,3
    6b4c:	b008977a 	slli	r4,r22,29
    6b50:	b02cd0fa 	srli	r22,r22,3
    6b54:	9cc001cc 	andi	r19,r19,7
    6b58:	98800c04 	addi	r2,r19,48
    6b5c:	843fffc4 	addi	r16,r16,-1
    6b60:	20e6b03a 	or	r19,r4,r3
    6b64:	80800005 	stb	r2,0(r16)
    6b68:	9d86b03a 	or	r3,r19,r22
    6b6c:	183ff61e 	bne	r3,zero,6b48 <__alt_data_end+0xfffd5e08>
    6b70:	90c0004c 	andi	r3,r18,1
    6b74:	18014126 	beq	r3,zero,707c <___vfprintf_internal_r+0xc34>
    6b78:	10803fcc 	andi	r2,r2,255
    6b7c:	1080201c 	xori	r2,r2,128
    6b80:	10bfe004 	addi	r2,r2,-128
    6b84:	00c00c04 	movi	r3,48
    6b88:	10c13c26 	beq	r2,r3,707c <___vfprintf_internal_r+0xc34>
    6b8c:	80ffffc5 	stb	r3,-1(r16)
    6b90:	d8c02817 	ldw	r3,160(sp)
    6b94:	80bfffc4 	addi	r2,r16,-1
    6b98:	1021883a 	mov	r16,r2
    6b9c:	1887c83a 	sub	r3,r3,r2
    6ba0:	d8c02b15 	stw	r3,172(sp)
    6ba4:	d8802b17 	ldw	r2,172(sp)
    6ba8:	d9002a17 	ldw	r4,168(sp)
    6bac:	1100010e 	bge	r2,r4,6bb4 <___vfprintf_internal_r+0x76c>
    6bb0:	2005883a 	mov	r2,r4
    6bb4:	d8802915 	stw	r2,164(sp)
    6bb8:	d8003215 	stw	zero,200(sp)
    6bbc:	e7003fcc 	andi	fp,fp,255
    6bc0:	e700201c 	xori	fp,fp,128
    6bc4:	e73fe004 	addi	fp,fp,-128
    6bc8:	e0000326 	beq	fp,zero,6bd8 <___vfprintf_internal_r+0x790>
    6bcc:	d8c02917 	ldw	r3,164(sp)
    6bd0:	18c00044 	addi	r3,r3,1
    6bd4:	d8c02915 	stw	r3,164(sp)
    6bd8:	90c0008c 	andi	r3,r18,2
    6bdc:	d8c02c15 	stw	r3,176(sp)
    6be0:	18000326 	beq	r3,zero,6bf0 <___vfprintf_internal_r+0x7a8>
    6be4:	d8c02917 	ldw	r3,164(sp)
    6be8:	18c00084 	addi	r3,r3,2
    6bec:	d8c02915 	stw	r3,164(sp)
    6bf0:	90c0210c 	andi	r3,r18,132
    6bf4:	d8c03015 	stw	r3,192(sp)
    6bf8:	1801c51e 	bne	r3,zero,7310 <___vfprintf_internal_r+0xec8>
    6bfc:	d9003117 	ldw	r4,196(sp)
    6c00:	d8c02917 	ldw	r3,164(sp)
    6c04:	20e7c83a 	sub	r19,r4,r3
    6c08:	04c1c10e 	bge	zero,r19,7310 <___vfprintf_internal_r+0xec8>
    6c0c:	02400404 	movi	r9,16
    6c10:	d8c02017 	ldw	r3,128(sp)
    6c14:	d8801f17 	ldw	r2,124(sp)
    6c18:	4cc52f0e 	bge	r9,r19,80d8 <___vfprintf_internal_r+0x1c90>
    6c1c:	014000b4 	movhi	r5,2
    6c20:	29769a84 	addi	r5,r5,-9622
    6c24:	dc403b15 	stw	r17,236(sp)
    6c28:	d9403515 	stw	r5,212(sp)
    6c2c:	9823883a 	mov	r17,r19
    6c30:	482d883a 	mov	r22,r9
    6c34:	9027883a 	mov	r19,r18
    6c38:	070001c4 	movi	fp,7
    6c3c:	8025883a 	mov	r18,r16
    6c40:	dc002d17 	ldw	r16,180(sp)
    6c44:	00000306 	br	6c54 <___vfprintf_internal_r+0x80c>
    6c48:	8c7ffc04 	addi	r17,r17,-16
    6c4c:	42000204 	addi	r8,r8,8
    6c50:	b440130e 	bge	r22,r17,6ca0 <___vfprintf_internal_r+0x858>
    6c54:	010000b4 	movhi	r4,2
    6c58:	18c00404 	addi	r3,r3,16
    6c5c:	10800044 	addi	r2,r2,1
    6c60:	21369a84 	addi	r4,r4,-9622
    6c64:	41000015 	stw	r4,0(r8)
    6c68:	45800115 	stw	r22,4(r8)
    6c6c:	d8c02015 	stw	r3,128(sp)
    6c70:	d8801f15 	stw	r2,124(sp)
    6c74:	e0bff40e 	bge	fp,r2,6c48 <__alt_data_end+0xfffd5f08>
    6c78:	d9801e04 	addi	r6,sp,120
    6c7c:	b80b883a 	mov	r5,r23
    6c80:	8009883a 	mov	r4,r16
    6c84:	000d0e40 	call	d0e4 <__sprint_r>
    6c88:	103ef31e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    6c8c:	8c7ffc04 	addi	r17,r17,-16
    6c90:	d8c02017 	ldw	r3,128(sp)
    6c94:	d8801f17 	ldw	r2,124(sp)
    6c98:	da000404 	addi	r8,sp,16
    6c9c:	b47fed16 	blt	r22,r17,6c54 <__alt_data_end+0xfffd5f14>
    6ca0:	9021883a 	mov	r16,r18
    6ca4:	9825883a 	mov	r18,r19
    6ca8:	8827883a 	mov	r19,r17
    6cac:	dc403b17 	ldw	r17,236(sp)
    6cb0:	d9403517 	ldw	r5,212(sp)
    6cb4:	98c7883a 	add	r3,r19,r3
    6cb8:	10800044 	addi	r2,r2,1
    6cbc:	41400015 	stw	r5,0(r8)
    6cc0:	44c00115 	stw	r19,4(r8)
    6cc4:	d8c02015 	stw	r3,128(sp)
    6cc8:	d8801f15 	stw	r2,124(sp)
    6ccc:	010001c4 	movi	r4,7
    6cd0:	2082c516 	blt	r4,r2,77e8 <___vfprintf_internal_r+0x13a0>
    6cd4:	df002787 	ldb	fp,158(sp)
    6cd8:	42000204 	addi	r8,r8,8
    6cdc:	e0000c26 	beq	fp,zero,6d10 <___vfprintf_internal_r+0x8c8>
    6ce0:	d8801f17 	ldw	r2,124(sp)
    6ce4:	d9002784 	addi	r4,sp,158
    6ce8:	18c00044 	addi	r3,r3,1
    6cec:	10800044 	addi	r2,r2,1
    6cf0:	41000015 	stw	r4,0(r8)
    6cf4:	01000044 	movi	r4,1
    6cf8:	41000115 	stw	r4,4(r8)
    6cfc:	d8c02015 	stw	r3,128(sp)
    6d00:	d8801f15 	stw	r2,124(sp)
    6d04:	010001c4 	movi	r4,7
    6d08:	20825e16 	blt	r4,r2,7684 <___vfprintf_internal_r+0x123c>
    6d0c:	42000204 	addi	r8,r8,8
    6d10:	d8802c17 	ldw	r2,176(sp)
    6d14:	10000c26 	beq	r2,zero,6d48 <___vfprintf_internal_r+0x900>
    6d18:	d8801f17 	ldw	r2,124(sp)
    6d1c:	d9002704 	addi	r4,sp,156
    6d20:	18c00084 	addi	r3,r3,2
    6d24:	10800044 	addi	r2,r2,1
    6d28:	41000015 	stw	r4,0(r8)
    6d2c:	01000084 	movi	r4,2
    6d30:	41000115 	stw	r4,4(r8)
    6d34:	d8c02015 	stw	r3,128(sp)
    6d38:	d8801f15 	stw	r2,124(sp)
    6d3c:	010001c4 	movi	r4,7
    6d40:	20825816 	blt	r4,r2,76a4 <___vfprintf_internal_r+0x125c>
    6d44:	42000204 	addi	r8,r8,8
    6d48:	d9003017 	ldw	r4,192(sp)
    6d4c:	00802004 	movi	r2,128
    6d50:	2081bb26 	beq	r4,r2,7440 <___vfprintf_internal_r+0xff8>
    6d54:	d9402a17 	ldw	r5,168(sp)
    6d58:	d8802b17 	ldw	r2,172(sp)
    6d5c:	28adc83a 	sub	r22,r5,r2
    6d60:	0580310e 	bge	zero,r22,6e28 <___vfprintf_internal_r+0x9e0>
    6d64:	07000404 	movi	fp,16
    6d68:	d8801f17 	ldw	r2,124(sp)
    6d6c:	e584360e 	bge	fp,r22,7e48 <___vfprintf_internal_r+0x1a00>
    6d70:	014000b4 	movhi	r5,2
    6d74:	29769684 	addi	r5,r5,-9638
    6d78:	dc402a15 	stw	r17,168(sp)
    6d7c:	d9402c15 	stw	r5,176(sp)
    6d80:	b023883a 	mov	r17,r22
    6d84:	04c001c4 	movi	r19,7
    6d88:	a82d883a 	mov	r22,r21
    6d8c:	902b883a 	mov	r21,r18
    6d90:	8025883a 	mov	r18,r16
    6d94:	dc002d17 	ldw	r16,180(sp)
    6d98:	00000306 	br	6da8 <___vfprintf_internal_r+0x960>
    6d9c:	8c7ffc04 	addi	r17,r17,-16
    6da0:	42000204 	addi	r8,r8,8
    6da4:	e440110e 	bge	fp,r17,6dec <___vfprintf_internal_r+0x9a4>
    6da8:	18c00404 	addi	r3,r3,16
    6dac:	10800044 	addi	r2,r2,1
    6db0:	45000015 	stw	r20,0(r8)
    6db4:	47000115 	stw	fp,4(r8)
    6db8:	d8c02015 	stw	r3,128(sp)
    6dbc:	d8801f15 	stw	r2,124(sp)
    6dc0:	98bff60e 	bge	r19,r2,6d9c <__alt_data_end+0xfffd605c>
    6dc4:	d9801e04 	addi	r6,sp,120
    6dc8:	b80b883a 	mov	r5,r23
    6dcc:	8009883a 	mov	r4,r16
    6dd0:	000d0e40 	call	d0e4 <__sprint_r>
    6dd4:	103ea01e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    6dd8:	8c7ffc04 	addi	r17,r17,-16
    6ddc:	d8c02017 	ldw	r3,128(sp)
    6de0:	d8801f17 	ldw	r2,124(sp)
    6de4:	da000404 	addi	r8,sp,16
    6de8:	e47fef16 	blt	fp,r17,6da8 <__alt_data_end+0xfffd6068>
    6dec:	9021883a 	mov	r16,r18
    6df0:	a825883a 	mov	r18,r21
    6df4:	b02b883a 	mov	r21,r22
    6df8:	882d883a 	mov	r22,r17
    6dfc:	dc402a17 	ldw	r17,168(sp)
    6e00:	d9002c17 	ldw	r4,176(sp)
    6e04:	1d87883a 	add	r3,r3,r22
    6e08:	10800044 	addi	r2,r2,1
    6e0c:	41000015 	stw	r4,0(r8)
    6e10:	45800115 	stw	r22,4(r8)
    6e14:	d8c02015 	stw	r3,128(sp)
    6e18:	d8801f15 	stw	r2,124(sp)
    6e1c:	010001c4 	movi	r4,7
    6e20:	20821016 	blt	r4,r2,7664 <___vfprintf_internal_r+0x121c>
    6e24:	42000204 	addi	r8,r8,8
    6e28:	9080400c 	andi	r2,r18,256
    6e2c:	10013a1e 	bne	r2,zero,7318 <___vfprintf_internal_r+0xed0>
    6e30:	d9402b17 	ldw	r5,172(sp)
    6e34:	d8801f17 	ldw	r2,124(sp)
    6e38:	44000015 	stw	r16,0(r8)
    6e3c:	1947883a 	add	r3,r3,r5
    6e40:	10800044 	addi	r2,r2,1
    6e44:	41400115 	stw	r5,4(r8)
    6e48:	d8c02015 	stw	r3,128(sp)
    6e4c:	d8801f15 	stw	r2,124(sp)
    6e50:	010001c4 	movi	r4,7
    6e54:	2081f516 	blt	r4,r2,762c <___vfprintf_internal_r+0x11e4>
    6e58:	42000204 	addi	r8,r8,8
    6e5c:	9480010c 	andi	r18,r18,4
    6e60:	90003226 	beq	r18,zero,6f2c <___vfprintf_internal_r+0xae4>
    6e64:	d9403117 	ldw	r5,196(sp)
    6e68:	d8802917 	ldw	r2,164(sp)
    6e6c:	28a1c83a 	sub	r16,r5,r2
    6e70:	04002e0e 	bge	zero,r16,6f2c <___vfprintf_internal_r+0xae4>
    6e74:	04400404 	movi	r17,16
    6e78:	d8801f17 	ldw	r2,124(sp)
    6e7c:	8c04c40e 	bge	r17,r16,8190 <___vfprintf_internal_r+0x1d48>
    6e80:	014000b4 	movhi	r5,2
    6e84:	29769a84 	addi	r5,r5,-9622
    6e88:	d9403515 	stw	r5,212(sp)
    6e8c:	048001c4 	movi	r18,7
    6e90:	dcc02d17 	ldw	r19,180(sp)
    6e94:	00000306 	br	6ea4 <___vfprintf_internal_r+0xa5c>
    6e98:	843ffc04 	addi	r16,r16,-16
    6e9c:	42000204 	addi	r8,r8,8
    6ea0:	8c00130e 	bge	r17,r16,6ef0 <___vfprintf_internal_r+0xaa8>
    6ea4:	010000b4 	movhi	r4,2
    6ea8:	18c00404 	addi	r3,r3,16
    6eac:	10800044 	addi	r2,r2,1
    6eb0:	21369a84 	addi	r4,r4,-9622
    6eb4:	41000015 	stw	r4,0(r8)
    6eb8:	44400115 	stw	r17,4(r8)
    6ebc:	d8c02015 	stw	r3,128(sp)
    6ec0:	d8801f15 	stw	r2,124(sp)
    6ec4:	90bff40e 	bge	r18,r2,6e98 <__alt_data_end+0xfffd6158>
    6ec8:	d9801e04 	addi	r6,sp,120
    6ecc:	b80b883a 	mov	r5,r23
    6ed0:	9809883a 	mov	r4,r19
    6ed4:	000d0e40 	call	d0e4 <__sprint_r>
    6ed8:	103e5f1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    6edc:	843ffc04 	addi	r16,r16,-16
    6ee0:	d8c02017 	ldw	r3,128(sp)
    6ee4:	d8801f17 	ldw	r2,124(sp)
    6ee8:	da000404 	addi	r8,sp,16
    6eec:	8c3fed16 	blt	r17,r16,6ea4 <__alt_data_end+0xfffd6164>
    6ef0:	d9403517 	ldw	r5,212(sp)
    6ef4:	1c07883a 	add	r3,r3,r16
    6ef8:	10800044 	addi	r2,r2,1
    6efc:	41400015 	stw	r5,0(r8)
    6f00:	44000115 	stw	r16,4(r8)
    6f04:	d8c02015 	stw	r3,128(sp)
    6f08:	d8801f15 	stw	r2,124(sp)
    6f0c:	010001c4 	movi	r4,7
    6f10:	2080060e 	bge	r4,r2,6f2c <___vfprintf_internal_r+0xae4>
    6f14:	d9002d17 	ldw	r4,180(sp)
    6f18:	d9801e04 	addi	r6,sp,120
    6f1c:	b80b883a 	mov	r5,r23
    6f20:	000d0e40 	call	d0e4 <__sprint_r>
    6f24:	103e4c1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    6f28:	d8c02017 	ldw	r3,128(sp)
    6f2c:	d8803117 	ldw	r2,196(sp)
    6f30:	d9002917 	ldw	r4,164(sp)
    6f34:	1100010e 	bge	r2,r4,6f3c <___vfprintf_internal_r+0xaf4>
    6f38:	2005883a 	mov	r2,r4
    6f3c:	d9402f17 	ldw	r5,188(sp)
    6f40:	288b883a 	add	r5,r5,r2
    6f44:	d9402f15 	stw	r5,188(sp)
    6f48:	1801c01e 	bne	r3,zero,764c <___vfprintf_internal_r+0x1204>
    6f4c:	a8800007 	ldb	r2,0(r21)
    6f50:	d8001f15 	stw	zero,124(sp)
    6f54:	da000404 	addi	r8,sp,16
    6f58:	103d751e 	bne	r2,zero,6530 <__alt_data_end+0xfffd57f0>
    6f5c:	a823883a 	mov	r17,r21
    6f60:	003d8b06 	br	6590 <__alt_data_end+0xfffd5850>
    6f64:	8025883a 	mov	r18,r16
    6f68:	dc002903 	ldbu	r16,164(sp)
    6f6c:	e011883a 	mov	r8,fp
    6f70:	84003fcc 	andi	r16,r16,255
    6f74:	8005e51e 	bne	r16,zero,870c <___vfprintf_internal_r+0x22c4>
    6f78:	94800414 	ori	r18,r18,16
    6f7c:	9080080c 	andi	r2,r18,32
    6f80:	10022b26 	beq	r2,zero,7830 <___vfprintf_internal_r+0x13e8>
    6f84:	d9002e17 	ldw	r4,184(sp)
    6f88:	d9402a17 	ldw	r5,168(sp)
    6f8c:	d8002785 	stb	zero,158(sp)
    6f90:	20c00204 	addi	r3,r4,8
    6f94:	24c00017 	ldw	r19,0(r4)
    6f98:	25800117 	ldw	r22,4(r4)
    6f9c:	28042e16 	blt	r5,zero,8058 <___vfprintf_internal_r+0x1c10>
    6fa0:	013fdfc4 	movi	r4,-129
    6fa4:	9d84b03a 	or	r2,r19,r22
    6fa8:	d8c02e15 	stw	r3,184(sp)
    6fac:	9124703a 	and	r18,r18,r4
    6fb0:	0039883a 	mov	fp,zero
    6fb4:	103e801e 	bne	r2,zero,69b8 <__alt_data_end+0xfffd5c78>
    6fb8:	d9002a17 	ldw	r4,168(sp)
    6fbc:	2002e01e 	bne	r4,zero,7b40 <___vfprintf_internal_r+0x16f8>
    6fc0:	d8002a15 	stw	zero,168(sp)
    6fc4:	d8002b15 	stw	zero,172(sp)
    6fc8:	dc001e04 	addi	r16,sp,120
    6fcc:	003ef506 	br	6ba4 <__alt_data_end+0xfffd5e64>
    6fd0:	8025883a 	mov	r18,r16
    6fd4:	dc002903 	ldbu	r16,164(sp)
    6fd8:	e011883a 	mov	r8,fp
    6fdc:	84003fcc 	andi	r16,r16,255
    6fe0:	8005ba1e 	bne	r16,zero,86cc <___vfprintf_internal_r+0x2284>
    6fe4:	010000b4 	movhi	r4,2
    6fe8:	21368a04 	addi	r4,r4,-9688
    6fec:	d9003915 	stw	r4,228(sp)
    6ff0:	9080080c 	andi	r2,r18,32
    6ff4:	10006126 	beq	r2,zero,717c <___vfprintf_internal_r+0xd34>
    6ff8:	d9402e17 	ldw	r5,184(sp)
    6ffc:	2cc00017 	ldw	r19,0(r5)
    7000:	2d800117 	ldw	r22,4(r5)
    7004:	29400204 	addi	r5,r5,8
    7008:	d9402e15 	stw	r5,184(sp)
    700c:	9080004c 	andi	r2,r18,1
    7010:	1001ac26 	beq	r2,zero,76c4 <___vfprintf_internal_r+0x127c>
    7014:	9d84b03a 	or	r2,r19,r22
    7018:	10038526 	beq	r2,zero,7e30 <___vfprintf_internal_r+0x19e8>
    701c:	d8c02a17 	ldw	r3,168(sp)
    7020:	00800c04 	movi	r2,48
    7024:	d8802705 	stb	r2,156(sp)
    7028:	dc402745 	stb	r17,157(sp)
    702c:	d8002785 	stb	zero,158(sp)
    7030:	90800094 	ori	r2,r18,2
    7034:	18047916 	blt	r3,zero,821c <___vfprintf_internal_r+0x1dd4>
    7038:	00bfdfc4 	movi	r2,-129
    703c:	90a4703a 	and	r18,r18,r2
    7040:	94800094 	ori	r18,r18,2
    7044:	0039883a 	mov	fp,zero
    7048:	d9003917 	ldw	r4,228(sp)
    704c:	dc001e04 	addi	r16,sp,120
    7050:	988003cc 	andi	r2,r19,15
    7054:	b006973a 	slli	r3,r22,28
    7058:	2085883a 	add	r2,r4,r2
    705c:	9826d13a 	srli	r19,r19,4
    7060:	10800003 	ldbu	r2,0(r2)
    7064:	b02cd13a 	srli	r22,r22,4
    7068:	843fffc4 	addi	r16,r16,-1
    706c:	1ce6b03a 	or	r19,r3,r19
    7070:	80800005 	stb	r2,0(r16)
    7074:	9d84b03a 	or	r2,r19,r22
    7078:	103ff51e 	bne	r2,zero,7050 <__alt_data_end+0xfffd6310>
    707c:	d8c02817 	ldw	r3,160(sp)
    7080:	1c07c83a 	sub	r3,r3,r16
    7084:	d8c02b15 	stw	r3,172(sp)
    7088:	003ec606 	br	6ba4 <__alt_data_end+0xfffd5e64>
    708c:	8025883a 	mov	r18,r16
    7090:	dc002903 	ldbu	r16,164(sp)
    7094:	e011883a 	mov	r8,fp
    7098:	84003fcc 	andi	r16,r16,255
    709c:	803e9626 	beq	r16,zero,6af8 <__alt_data_end+0xfffd5db8>
    70a0:	d8c02b03 	ldbu	r3,172(sp)
    70a4:	d8c02785 	stb	r3,158(sp)
    70a8:	003e9306 	br	6af8 <__alt_data_end+0xfffd5db8>
    70ac:	00c00044 	movi	r3,1
    70b0:	d8c02905 	stb	r3,164(sp)
    70b4:	00c00ac4 	movi	r3,43
    70b8:	d8c02b05 	stb	r3,172(sp)
    70bc:	ac400007 	ldb	r17,0(r21)
    70c0:	003d4306 	br	65d0 <__alt_data_end+0xfffd5890>
    70c4:	84000814 	ori	r16,r16,32
    70c8:	ac400007 	ldb	r17,0(r21)
    70cc:	003d4006 	br	65d0 <__alt_data_end+0xfffd5890>
    70d0:	d8802e17 	ldw	r2,184(sp)
    70d4:	8025883a 	mov	r18,r16
    70d8:	d8002785 	stb	zero,158(sp)
    70dc:	14000017 	ldw	r16,0(r2)
    70e0:	e011883a 	mov	r8,fp
    70e4:	14c00104 	addi	r19,r2,4
    70e8:	80042d26 	beq	r16,zero,81a0 <___vfprintf_internal_r+0x1d58>
    70ec:	d8c02a17 	ldw	r3,168(sp)
    70f0:	1803e416 	blt	r3,zero,8084 <___vfprintf_internal_r+0x1c3c>
    70f4:	180d883a 	mov	r6,r3
    70f8:	000b883a 	mov	r5,zero
    70fc:	8009883a 	mov	r4,r16
    7100:	df003d15 	stw	fp,244(sp)
    7104:	000b5740 	call	b574 <memchr>
    7108:	da003d17 	ldw	r8,244(sp)
    710c:	10046826 	beq	r2,zero,82b0 <___vfprintf_internal_r+0x1e68>
    7110:	1405c83a 	sub	r2,r2,r16
    7114:	d8802b15 	stw	r2,172(sp)
    7118:	1003e016 	blt	r2,zero,809c <___vfprintf_internal_r+0x1c54>
    711c:	df002783 	ldbu	fp,158(sp)
    7120:	d8802915 	stw	r2,164(sp)
    7124:	dcc02e15 	stw	r19,184(sp)
    7128:	d8002a15 	stw	zero,168(sp)
    712c:	d8003215 	stw	zero,200(sp)
    7130:	003ea206 	br	6bbc <__alt_data_end+0xfffd5e7c>
    7134:	8025883a 	mov	r18,r16
    7138:	dc002903 	ldbu	r16,164(sp)
    713c:	e011883a 	mov	r8,fp
    7140:	84003fcc 	andi	r16,r16,255
    7144:	803f8d26 	beq	r16,zero,6f7c <__alt_data_end+0xfffd623c>
    7148:	d8c02b03 	ldbu	r3,172(sp)
    714c:	d8c02785 	stb	r3,158(sp)
    7150:	003f8a06 	br	6f7c <__alt_data_end+0xfffd623c>
    7154:	8025883a 	mov	r18,r16
    7158:	dc002903 	ldbu	r16,164(sp)
    715c:	e011883a 	mov	r8,fp
    7160:	84003fcc 	andi	r16,r16,255
    7164:	8005661e 	bne	r16,zero,8700 <___vfprintf_internal_r+0x22b8>
    7168:	010000b4 	movhi	r4,2
    716c:	21368f04 	addi	r4,r4,-9668
    7170:	d9003915 	stw	r4,228(sp)
    7174:	9080080c 	andi	r2,r18,32
    7178:	103f9f1e 	bne	r2,zero,6ff8 <__alt_data_end+0xfffd62b8>
    717c:	9080040c 	andi	r2,r18,16
    7180:	1002eb26 	beq	r2,zero,7d30 <___vfprintf_internal_r+0x18e8>
    7184:	d8802e17 	ldw	r2,184(sp)
    7188:	002d883a 	mov	r22,zero
    718c:	14c00017 	ldw	r19,0(r2)
    7190:	10800104 	addi	r2,r2,4
    7194:	d8802e15 	stw	r2,184(sp)
    7198:	003f9c06 	br	700c <__alt_data_end+0xfffd62cc>
    719c:	d8802b07 	ldb	r2,172(sp)
    71a0:	1002e11e 	bne	r2,zero,7d28 <___vfprintf_internal_r+0x18e0>
    71a4:	00c00044 	movi	r3,1
    71a8:	d8c02905 	stb	r3,164(sp)
    71ac:	00c00804 	movi	r3,32
    71b0:	d8c02b05 	stb	r3,172(sp)
    71b4:	ac400007 	ldb	r17,0(r21)
    71b8:	003d0506 	br	65d0 <__alt_data_end+0xfffd5890>
    71bc:	84000054 	ori	r16,r16,1
    71c0:	ac400007 	ldb	r17,0(r21)
    71c4:	003d0206 	br	65d0 <__alt_data_end+0xfffd5890>
    71c8:	8025883a 	mov	r18,r16
    71cc:	dc002903 	ldbu	r16,164(sp)
    71d0:	e011883a 	mov	r8,fp
    71d4:	84003fcc 	andi	r16,r16,255
    71d8:	803de726 	beq	r16,zero,6978 <__alt_data_end+0xfffd5c38>
    71dc:	d8c02b03 	ldbu	r3,172(sp)
    71e0:	d8c02785 	stb	r3,158(sp)
    71e4:	003de406 	br	6978 <__alt_data_end+0xfffd5c38>
    71e8:	84001014 	ori	r16,r16,64
    71ec:	ac400007 	ldb	r17,0(r21)
    71f0:	003cf706 	br	65d0 <__alt_data_end+0xfffd5890>
    71f4:	ac400007 	ldb	r17,0(r21)
    71f8:	00801b04 	movi	r2,108
    71fc:	88838f26 	beq	r17,r2,803c <___vfprintf_internal_r+0x1bf4>
    7200:	84000414 	ori	r16,r16,16
    7204:	003cf206 	br	65d0 <__alt_data_end+0xfffd5890>
    7208:	8025883a 	mov	r18,r16
    720c:	dc002903 	ldbu	r16,164(sp)
    7210:	e011883a 	mov	r8,fp
    7214:	84003fcc 	andi	r16,r16,255
    7218:	80053f1e 	bne	r16,zero,8718 <___vfprintf_internal_r+0x22d0>
    721c:	9080080c 	andi	r2,r18,32
    7220:	1002d226 	beq	r2,zero,7d6c <___vfprintf_internal_r+0x1924>
    7224:	d9002e17 	ldw	r4,184(sp)
    7228:	d9402f17 	ldw	r5,188(sp)
    722c:	20800017 	ldw	r2,0(r4)
    7230:	2807d7fa 	srai	r3,r5,31
    7234:	21000104 	addi	r4,r4,4
    7238:	d9002e15 	stw	r4,184(sp)
    723c:	11400015 	stw	r5,0(r2)
    7240:	10c00115 	stw	r3,4(r2)
    7244:	003cb806 	br	6528 <__alt_data_end+0xfffd57e8>
    7248:	d8c02e17 	ldw	r3,184(sp)
    724c:	d9002e17 	ldw	r4,184(sp)
    7250:	8025883a 	mov	r18,r16
    7254:	18800017 	ldw	r2,0(r3)
    7258:	21000104 	addi	r4,r4,4
    725c:	00c00044 	movi	r3,1
    7260:	e011883a 	mov	r8,fp
    7264:	d8c02915 	stw	r3,164(sp)
    7268:	d8002785 	stb	zero,158(sp)
    726c:	d8801405 	stb	r2,80(sp)
    7270:	d9002e15 	stw	r4,184(sp)
    7274:	d8c02b15 	stw	r3,172(sp)
    7278:	d8002a15 	stw	zero,168(sp)
    727c:	d8003215 	stw	zero,200(sp)
    7280:	dc001404 	addi	r16,sp,80
    7284:	0039883a 	mov	fp,zero
    7288:	003e5306 	br	6bd8 <__alt_data_end+0xfffd5e98>
    728c:	010000b4 	movhi	r4,2
    7290:	21368f04 	addi	r4,r4,-9668
    7294:	0039883a 	mov	fp,zero
    7298:	d9003915 	stw	r4,228(sp)
    729c:	04401e04 	movi	r17,120
    72a0:	003f6906 	br	7048 <__alt_data_end+0xfffd6308>
    72a4:	8025883a 	mov	r18,r16
    72a8:	dc002903 	ldbu	r16,164(sp)
    72ac:	e011883a 	mov	r8,fp
    72b0:	84003fcc 	andi	r16,r16,255
    72b4:	8005081e 	bne	r16,zero,86d8 <___vfprintf_internal_r+0x2290>
    72b8:	883d6126 	beq	r17,zero,6840 <__alt_data_end+0xfffd5b00>
    72bc:	00c00044 	movi	r3,1
    72c0:	d8c02915 	stw	r3,164(sp)
    72c4:	dc401405 	stb	r17,80(sp)
    72c8:	d8002785 	stb	zero,158(sp)
    72cc:	003fe906 	br	7274 <__alt_data_end+0xfffd6534>
    72d0:	014000b4 	movhi	r5,2
    72d4:	29768f04 	addi	r5,r5,-9668
    72d8:	d9403915 	stw	r5,228(sp)
    72dc:	d8c02e15 	stw	r3,184(sp)
    72e0:	1025883a 	mov	r18,r2
    72e4:	04401e04 	movi	r17,120
    72e8:	9d84b03a 	or	r2,r19,r22
    72ec:	1000fc1e 	bne	r2,zero,76e0 <___vfprintf_internal_r+0x1298>
    72f0:	0039883a 	mov	fp,zero
    72f4:	00800084 	movi	r2,2
    72f8:	10803fcc 	andi	r2,r2,255
    72fc:	00c00044 	movi	r3,1
    7300:	10c20f26 	beq	r2,r3,7b40 <___vfprintf_internal_r+0x16f8>
    7304:	00c00084 	movi	r3,2
    7308:	10fd3326 	beq	r2,r3,67d8 <__alt_data_end+0xfffd5a98>
    730c:	003e0b06 	br	6b3c <__alt_data_end+0xfffd5dfc>
    7310:	d8c02017 	ldw	r3,128(sp)
    7314:	003e7106 	br	6cdc <__alt_data_end+0xfffd5f9c>
    7318:	00801944 	movi	r2,101
    731c:	14407e0e 	bge	r2,r17,7518 <___vfprintf_internal_r+0x10d0>
    7320:	d9003617 	ldw	r4,216(sp)
    7324:	d9403817 	ldw	r5,224(sp)
    7328:	000d883a 	mov	r6,zero
    732c:	000f883a 	mov	r7,zero
    7330:	d8c03c15 	stw	r3,240(sp)
    7334:	da003d15 	stw	r8,244(sp)
    7338:	00041e80 	call	41e8 <__eqdf2>
    733c:	d8c03c17 	ldw	r3,240(sp)
    7340:	da003d17 	ldw	r8,244(sp)
    7344:	1000f71e 	bne	r2,zero,7724 <___vfprintf_internal_r+0x12dc>
    7348:	d8801f17 	ldw	r2,124(sp)
    734c:	010000b4 	movhi	r4,2
    7350:	21369604 	addi	r4,r4,-9640
    7354:	18c00044 	addi	r3,r3,1
    7358:	10800044 	addi	r2,r2,1
    735c:	41000015 	stw	r4,0(r8)
    7360:	01000044 	movi	r4,1
    7364:	41000115 	stw	r4,4(r8)
    7368:	d8c02015 	stw	r3,128(sp)
    736c:	d8801f15 	stw	r2,124(sp)
    7370:	010001c4 	movi	r4,7
    7374:	2082b816 	blt	r4,r2,7e58 <___vfprintf_internal_r+0x1a10>
    7378:	42000204 	addi	r8,r8,8
    737c:	d8802617 	ldw	r2,152(sp)
    7380:	d9403317 	ldw	r5,204(sp)
    7384:	11400216 	blt	r2,r5,7390 <___vfprintf_internal_r+0xf48>
    7388:	9080004c 	andi	r2,r18,1
    738c:	103eb326 	beq	r2,zero,6e5c <__alt_data_end+0xfffd611c>
    7390:	d8803717 	ldw	r2,220(sp)
    7394:	d9003417 	ldw	r4,208(sp)
    7398:	d9403717 	ldw	r5,220(sp)
    739c:	1887883a 	add	r3,r3,r2
    73a0:	d8801f17 	ldw	r2,124(sp)
    73a4:	41000015 	stw	r4,0(r8)
    73a8:	41400115 	stw	r5,4(r8)
    73ac:	10800044 	addi	r2,r2,1
    73b0:	d8c02015 	stw	r3,128(sp)
    73b4:	d8801f15 	stw	r2,124(sp)
    73b8:	010001c4 	movi	r4,7
    73bc:	20832916 	blt	r4,r2,8064 <___vfprintf_internal_r+0x1c1c>
    73c0:	42000204 	addi	r8,r8,8
    73c4:	d8803317 	ldw	r2,204(sp)
    73c8:	143fffc4 	addi	r16,r2,-1
    73cc:	043ea30e 	bge	zero,r16,6e5c <__alt_data_end+0xfffd611c>
    73d0:	04400404 	movi	r17,16
    73d4:	d8801f17 	ldw	r2,124(sp)
    73d8:	8c00880e 	bge	r17,r16,75fc <___vfprintf_internal_r+0x11b4>
    73dc:	014000b4 	movhi	r5,2
    73e0:	29769684 	addi	r5,r5,-9638
    73e4:	d9402c15 	stw	r5,176(sp)
    73e8:	058001c4 	movi	r22,7
    73ec:	dcc02d17 	ldw	r19,180(sp)
    73f0:	00000306 	br	7400 <___vfprintf_internal_r+0xfb8>
    73f4:	42000204 	addi	r8,r8,8
    73f8:	843ffc04 	addi	r16,r16,-16
    73fc:	8c00820e 	bge	r17,r16,7608 <___vfprintf_internal_r+0x11c0>
    7400:	18c00404 	addi	r3,r3,16
    7404:	10800044 	addi	r2,r2,1
    7408:	45000015 	stw	r20,0(r8)
    740c:	44400115 	stw	r17,4(r8)
    7410:	d8c02015 	stw	r3,128(sp)
    7414:	d8801f15 	stw	r2,124(sp)
    7418:	b0bff60e 	bge	r22,r2,73f4 <__alt_data_end+0xfffd66b4>
    741c:	d9801e04 	addi	r6,sp,120
    7420:	b80b883a 	mov	r5,r23
    7424:	9809883a 	mov	r4,r19
    7428:	000d0e40 	call	d0e4 <__sprint_r>
    742c:	103d0a1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7430:	d8c02017 	ldw	r3,128(sp)
    7434:	d8801f17 	ldw	r2,124(sp)
    7438:	da000404 	addi	r8,sp,16
    743c:	003fee06 	br	73f8 <__alt_data_end+0xfffd66b8>
    7440:	d9403117 	ldw	r5,196(sp)
    7444:	d8802917 	ldw	r2,164(sp)
    7448:	28adc83a 	sub	r22,r5,r2
    744c:	05be410e 	bge	zero,r22,6d54 <__alt_data_end+0xfffd6014>
    7450:	07000404 	movi	fp,16
    7454:	d8801f17 	ldw	r2,124(sp)
    7458:	e5838f0e 	bge	fp,r22,8298 <___vfprintf_internal_r+0x1e50>
    745c:	014000b4 	movhi	r5,2
    7460:	29769684 	addi	r5,r5,-9638
    7464:	dc403015 	stw	r17,192(sp)
    7468:	d9402c15 	stw	r5,176(sp)
    746c:	b023883a 	mov	r17,r22
    7470:	04c001c4 	movi	r19,7
    7474:	a82d883a 	mov	r22,r21
    7478:	902b883a 	mov	r21,r18
    747c:	8025883a 	mov	r18,r16
    7480:	dc002d17 	ldw	r16,180(sp)
    7484:	00000306 	br	7494 <___vfprintf_internal_r+0x104c>
    7488:	8c7ffc04 	addi	r17,r17,-16
    748c:	42000204 	addi	r8,r8,8
    7490:	e440110e 	bge	fp,r17,74d8 <___vfprintf_internal_r+0x1090>
    7494:	18c00404 	addi	r3,r3,16
    7498:	10800044 	addi	r2,r2,1
    749c:	45000015 	stw	r20,0(r8)
    74a0:	47000115 	stw	fp,4(r8)
    74a4:	d8c02015 	stw	r3,128(sp)
    74a8:	d8801f15 	stw	r2,124(sp)
    74ac:	98bff60e 	bge	r19,r2,7488 <__alt_data_end+0xfffd6748>
    74b0:	d9801e04 	addi	r6,sp,120
    74b4:	b80b883a 	mov	r5,r23
    74b8:	8009883a 	mov	r4,r16
    74bc:	000d0e40 	call	d0e4 <__sprint_r>
    74c0:	103ce51e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    74c4:	8c7ffc04 	addi	r17,r17,-16
    74c8:	d8c02017 	ldw	r3,128(sp)
    74cc:	d8801f17 	ldw	r2,124(sp)
    74d0:	da000404 	addi	r8,sp,16
    74d4:	e47fef16 	blt	fp,r17,7494 <__alt_data_end+0xfffd6754>
    74d8:	9021883a 	mov	r16,r18
    74dc:	a825883a 	mov	r18,r21
    74e0:	b02b883a 	mov	r21,r22
    74e4:	882d883a 	mov	r22,r17
    74e8:	dc403017 	ldw	r17,192(sp)
    74ec:	d9002c17 	ldw	r4,176(sp)
    74f0:	1d87883a 	add	r3,r3,r22
    74f4:	10800044 	addi	r2,r2,1
    74f8:	41000015 	stw	r4,0(r8)
    74fc:	45800115 	stw	r22,4(r8)
    7500:	d8c02015 	stw	r3,128(sp)
    7504:	d8801f15 	stw	r2,124(sp)
    7508:	010001c4 	movi	r4,7
    750c:	20818e16 	blt	r4,r2,7b48 <___vfprintf_internal_r+0x1700>
    7510:	42000204 	addi	r8,r8,8
    7514:	003e0f06 	br	6d54 <__alt_data_end+0xfffd6014>
    7518:	d9403317 	ldw	r5,204(sp)
    751c:	00800044 	movi	r2,1
    7520:	18c00044 	addi	r3,r3,1
    7524:	1141530e 	bge	r2,r5,7a74 <___vfprintf_internal_r+0x162c>
    7528:	dc401f17 	ldw	r17,124(sp)
    752c:	00800044 	movi	r2,1
    7530:	40800115 	stw	r2,4(r8)
    7534:	8c400044 	addi	r17,r17,1
    7538:	44000015 	stw	r16,0(r8)
    753c:	d8c02015 	stw	r3,128(sp)
    7540:	dc401f15 	stw	r17,124(sp)
    7544:	008001c4 	movi	r2,7
    7548:	14416b16 	blt	r2,r17,7af8 <___vfprintf_internal_r+0x16b0>
    754c:	42000204 	addi	r8,r8,8
    7550:	d8803717 	ldw	r2,220(sp)
    7554:	d9003417 	ldw	r4,208(sp)
    7558:	8c400044 	addi	r17,r17,1
    755c:	10c7883a 	add	r3,r2,r3
    7560:	40800115 	stw	r2,4(r8)
    7564:	41000015 	stw	r4,0(r8)
    7568:	d8c02015 	stw	r3,128(sp)
    756c:	dc401f15 	stw	r17,124(sp)
    7570:	008001c4 	movi	r2,7
    7574:	14416916 	blt	r2,r17,7b1c <___vfprintf_internal_r+0x16d4>
    7578:	45800204 	addi	r22,r8,8
    757c:	d9003617 	ldw	r4,216(sp)
    7580:	d9403817 	ldw	r5,224(sp)
    7584:	000d883a 	mov	r6,zero
    7588:	000f883a 	mov	r7,zero
    758c:	d8c03c15 	stw	r3,240(sp)
    7590:	00041e80 	call	41e8 <__eqdf2>
    7594:	d8c03c17 	ldw	r3,240(sp)
    7598:	1000bc26 	beq	r2,zero,788c <___vfprintf_internal_r+0x1444>
    759c:	d9403317 	ldw	r5,204(sp)
    75a0:	84000044 	addi	r16,r16,1
    75a4:	8c400044 	addi	r17,r17,1
    75a8:	28bfffc4 	addi	r2,r5,-1
    75ac:	1887883a 	add	r3,r3,r2
    75b0:	b0800115 	stw	r2,4(r22)
    75b4:	b4000015 	stw	r16,0(r22)
    75b8:	d8c02015 	stw	r3,128(sp)
    75bc:	dc401f15 	stw	r17,124(sp)
    75c0:	008001c4 	movi	r2,7
    75c4:	14414316 	blt	r2,r17,7ad4 <___vfprintf_internal_r+0x168c>
    75c8:	b5800204 	addi	r22,r22,8
    75cc:	d9003a17 	ldw	r4,232(sp)
    75d0:	df0022c4 	addi	fp,sp,139
    75d4:	8c400044 	addi	r17,r17,1
    75d8:	20c7883a 	add	r3,r4,r3
    75dc:	b7000015 	stw	fp,0(r22)
    75e0:	b1000115 	stw	r4,4(r22)
    75e4:	d8c02015 	stw	r3,128(sp)
    75e8:	dc401f15 	stw	r17,124(sp)
    75ec:	008001c4 	movi	r2,7
    75f0:	14400e16 	blt	r2,r17,762c <___vfprintf_internal_r+0x11e4>
    75f4:	b2000204 	addi	r8,r22,8
    75f8:	003e1806 	br	6e5c <__alt_data_end+0xfffd611c>
    75fc:	010000b4 	movhi	r4,2
    7600:	21369684 	addi	r4,r4,-9638
    7604:	d9002c15 	stw	r4,176(sp)
    7608:	d9002c17 	ldw	r4,176(sp)
    760c:	1c07883a 	add	r3,r3,r16
    7610:	44000115 	stw	r16,4(r8)
    7614:	41000015 	stw	r4,0(r8)
    7618:	10800044 	addi	r2,r2,1
    761c:	d8c02015 	stw	r3,128(sp)
    7620:	d8801f15 	stw	r2,124(sp)
    7624:	010001c4 	movi	r4,7
    7628:	20be0b0e 	bge	r4,r2,6e58 <__alt_data_end+0xfffd6118>
    762c:	d9002d17 	ldw	r4,180(sp)
    7630:	d9801e04 	addi	r6,sp,120
    7634:	b80b883a 	mov	r5,r23
    7638:	000d0e40 	call	d0e4 <__sprint_r>
    763c:	103c861e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7640:	d8c02017 	ldw	r3,128(sp)
    7644:	da000404 	addi	r8,sp,16
    7648:	003e0406 	br	6e5c <__alt_data_end+0xfffd611c>
    764c:	d9002d17 	ldw	r4,180(sp)
    7650:	d9801e04 	addi	r6,sp,120
    7654:	b80b883a 	mov	r5,r23
    7658:	000d0e40 	call	d0e4 <__sprint_r>
    765c:	103e3b26 	beq	r2,zero,6f4c <__alt_data_end+0xfffd620c>
    7660:	003c7d06 	br	6858 <__alt_data_end+0xfffd5b18>
    7664:	d9002d17 	ldw	r4,180(sp)
    7668:	d9801e04 	addi	r6,sp,120
    766c:	b80b883a 	mov	r5,r23
    7670:	000d0e40 	call	d0e4 <__sprint_r>
    7674:	103c781e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7678:	d8c02017 	ldw	r3,128(sp)
    767c:	da000404 	addi	r8,sp,16
    7680:	003de906 	br	6e28 <__alt_data_end+0xfffd60e8>
    7684:	d9002d17 	ldw	r4,180(sp)
    7688:	d9801e04 	addi	r6,sp,120
    768c:	b80b883a 	mov	r5,r23
    7690:	000d0e40 	call	d0e4 <__sprint_r>
    7694:	103c701e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7698:	d8c02017 	ldw	r3,128(sp)
    769c:	da000404 	addi	r8,sp,16
    76a0:	003d9b06 	br	6d10 <__alt_data_end+0xfffd5fd0>
    76a4:	d9002d17 	ldw	r4,180(sp)
    76a8:	d9801e04 	addi	r6,sp,120
    76ac:	b80b883a 	mov	r5,r23
    76b0:	000d0e40 	call	d0e4 <__sprint_r>
    76b4:	103c681e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    76b8:	d8c02017 	ldw	r3,128(sp)
    76bc:	da000404 	addi	r8,sp,16
    76c0:	003da106 	br	6d48 <__alt_data_end+0xfffd6008>
    76c4:	d9402a17 	ldw	r5,168(sp)
    76c8:	d8002785 	stb	zero,158(sp)
    76cc:	283f0616 	blt	r5,zero,72e8 <__alt_data_end+0xfffd65a8>
    76d0:	00ffdfc4 	movi	r3,-129
    76d4:	9d84b03a 	or	r2,r19,r22
    76d8:	90e4703a 	and	r18,r18,r3
    76dc:	103c3b26 	beq	r2,zero,67cc <__alt_data_end+0xfffd5a8c>
    76e0:	0039883a 	mov	fp,zero
    76e4:	003e5806 	br	7048 <__alt_data_end+0xfffd6308>
    76e8:	9080040c 	andi	r2,r18,16
    76ec:	1001b326 	beq	r2,zero,7dbc <___vfprintf_internal_r+0x1974>
    76f0:	d8c02e17 	ldw	r3,184(sp)
    76f4:	d9002a17 	ldw	r4,168(sp)
    76f8:	d8002785 	stb	zero,158(sp)
    76fc:	18800104 	addi	r2,r3,4
    7700:	1cc00017 	ldw	r19,0(r3)
    7704:	002d883a 	mov	r22,zero
    7708:	2001b516 	blt	r4,zero,7de0 <___vfprintf_internal_r+0x1998>
    770c:	00ffdfc4 	movi	r3,-129
    7710:	d8802e15 	stw	r2,184(sp)
    7714:	90e4703a 	and	r18,r18,r3
    7718:	983d0526 	beq	r19,zero,6b30 <__alt_data_end+0xfffd5df0>
    771c:	0039883a 	mov	fp,zero
    7720:	003d0806 	br	6b44 <__alt_data_end+0xfffd5e04>
    7724:	dc402617 	ldw	r17,152(sp)
    7728:	0441d30e 	bge	zero,r17,7e78 <___vfprintf_internal_r+0x1a30>
    772c:	dc403217 	ldw	r17,200(sp)
    7730:	d8803317 	ldw	r2,204(sp)
    7734:	1440010e 	bge	r2,r17,773c <___vfprintf_internal_r+0x12f4>
    7738:	1023883a 	mov	r17,r2
    773c:	04400a0e 	bge	zero,r17,7768 <___vfprintf_internal_r+0x1320>
    7740:	d8801f17 	ldw	r2,124(sp)
    7744:	1c47883a 	add	r3,r3,r17
    7748:	44000015 	stw	r16,0(r8)
    774c:	10800044 	addi	r2,r2,1
    7750:	44400115 	stw	r17,4(r8)
    7754:	d8c02015 	stw	r3,128(sp)
    7758:	d8801f15 	stw	r2,124(sp)
    775c:	010001c4 	movi	r4,7
    7760:	20826516 	blt	r4,r2,80f8 <___vfprintf_internal_r+0x1cb0>
    7764:	42000204 	addi	r8,r8,8
    7768:	88026116 	blt	r17,zero,80f0 <___vfprintf_internal_r+0x1ca8>
    776c:	d9003217 	ldw	r4,200(sp)
    7770:	2463c83a 	sub	r17,r4,r17
    7774:	04407b0e 	bge	zero,r17,7964 <___vfprintf_internal_r+0x151c>
    7778:	05800404 	movi	r22,16
    777c:	d8801f17 	ldw	r2,124(sp)
    7780:	b4419d0e 	bge	r22,r17,7df8 <___vfprintf_internal_r+0x19b0>
    7784:	010000b4 	movhi	r4,2
    7788:	21369684 	addi	r4,r4,-9638
    778c:	d9002c15 	stw	r4,176(sp)
    7790:	070001c4 	movi	fp,7
    7794:	dcc02d17 	ldw	r19,180(sp)
    7798:	00000306 	br	77a8 <___vfprintf_internal_r+0x1360>
    779c:	42000204 	addi	r8,r8,8
    77a0:	8c7ffc04 	addi	r17,r17,-16
    77a4:	b441970e 	bge	r22,r17,7e04 <___vfprintf_internal_r+0x19bc>
    77a8:	18c00404 	addi	r3,r3,16
    77ac:	10800044 	addi	r2,r2,1
    77b0:	45000015 	stw	r20,0(r8)
    77b4:	45800115 	stw	r22,4(r8)
    77b8:	d8c02015 	stw	r3,128(sp)
    77bc:	d8801f15 	stw	r2,124(sp)
    77c0:	e0bff60e 	bge	fp,r2,779c <__alt_data_end+0xfffd6a5c>
    77c4:	d9801e04 	addi	r6,sp,120
    77c8:	b80b883a 	mov	r5,r23
    77cc:	9809883a 	mov	r4,r19
    77d0:	000d0e40 	call	d0e4 <__sprint_r>
    77d4:	103c201e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    77d8:	d8c02017 	ldw	r3,128(sp)
    77dc:	d8801f17 	ldw	r2,124(sp)
    77e0:	da000404 	addi	r8,sp,16
    77e4:	003fee06 	br	77a0 <__alt_data_end+0xfffd6a60>
    77e8:	d9002d17 	ldw	r4,180(sp)
    77ec:	d9801e04 	addi	r6,sp,120
    77f0:	b80b883a 	mov	r5,r23
    77f4:	000d0e40 	call	d0e4 <__sprint_r>
    77f8:	103c171e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    77fc:	d8c02017 	ldw	r3,128(sp)
    7800:	df002787 	ldb	fp,158(sp)
    7804:	da000404 	addi	r8,sp,16
    7808:	003d3406 	br	6cdc <__alt_data_end+0xfffd5f9c>
    780c:	9080040c 	andi	r2,r18,16
    7810:	10016126 	beq	r2,zero,7d98 <___vfprintf_internal_r+0x1950>
    7814:	d9402e17 	ldw	r5,184(sp)
    7818:	2cc00017 	ldw	r19,0(r5)
    781c:	29400104 	addi	r5,r5,4
    7820:	d9402e15 	stw	r5,184(sp)
    7824:	982dd7fa 	srai	r22,r19,31
    7828:	b005883a 	mov	r2,r22
    782c:	003c5a06 	br	6998 <__alt_data_end+0xfffd5c58>
    7830:	9080040c 	andi	r2,r18,16
    7834:	10003526 	beq	r2,zero,790c <___vfprintf_internal_r+0x14c4>
    7838:	d8c02e17 	ldw	r3,184(sp)
    783c:	d9002a17 	ldw	r4,168(sp)
    7840:	d8002785 	stb	zero,158(sp)
    7844:	18800104 	addi	r2,r3,4
    7848:	1cc00017 	ldw	r19,0(r3)
    784c:	002d883a 	mov	r22,zero
    7850:	20003716 	blt	r4,zero,7930 <___vfprintf_internal_r+0x14e8>
    7854:	00ffdfc4 	movi	r3,-129
    7858:	d8802e15 	stw	r2,184(sp)
    785c:	90e4703a 	and	r18,r18,r3
    7860:	0039883a 	mov	fp,zero
    7864:	983dd426 	beq	r19,zero,6fb8 <__alt_data_end+0xfffd6278>
    7868:	00800244 	movi	r2,9
    786c:	14fc5336 	bltu	r2,r19,69bc <__alt_data_end+0xfffd5c7c>
    7870:	d8c02817 	ldw	r3,160(sp)
    7874:	dc001dc4 	addi	r16,sp,119
    7878:	9cc00c04 	addi	r19,r19,48
    787c:	1c07c83a 	sub	r3,r3,r16
    7880:	dcc01dc5 	stb	r19,119(sp)
    7884:	d8c02b15 	stw	r3,172(sp)
    7888:	003cc606 	br	6ba4 <__alt_data_end+0xfffd5e64>
    788c:	d8803317 	ldw	r2,204(sp)
    7890:	143fffc4 	addi	r16,r2,-1
    7894:	043f4d0e 	bge	zero,r16,75cc <__alt_data_end+0xfffd688c>
    7898:	07000404 	movi	fp,16
    789c:	e400810e 	bge	fp,r16,7aa4 <___vfprintf_internal_r+0x165c>
    78a0:	014000b4 	movhi	r5,2
    78a4:	29769684 	addi	r5,r5,-9638
    78a8:	d9402c15 	stw	r5,176(sp)
    78ac:	01c001c4 	movi	r7,7
    78b0:	dcc02d17 	ldw	r19,180(sp)
    78b4:	00000306 	br	78c4 <___vfprintf_internal_r+0x147c>
    78b8:	b5800204 	addi	r22,r22,8
    78bc:	843ffc04 	addi	r16,r16,-16
    78c0:	e4007b0e 	bge	fp,r16,7ab0 <___vfprintf_internal_r+0x1668>
    78c4:	18c00404 	addi	r3,r3,16
    78c8:	8c400044 	addi	r17,r17,1
    78cc:	b5000015 	stw	r20,0(r22)
    78d0:	b7000115 	stw	fp,4(r22)
    78d4:	d8c02015 	stw	r3,128(sp)
    78d8:	dc401f15 	stw	r17,124(sp)
    78dc:	3c7ff60e 	bge	r7,r17,78b8 <__alt_data_end+0xfffd6b78>
    78e0:	d9801e04 	addi	r6,sp,120
    78e4:	b80b883a 	mov	r5,r23
    78e8:	9809883a 	mov	r4,r19
    78ec:	d9c03c15 	stw	r7,240(sp)
    78f0:	000d0e40 	call	d0e4 <__sprint_r>
    78f4:	d9c03c17 	ldw	r7,240(sp)
    78f8:	103bd71e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    78fc:	d8c02017 	ldw	r3,128(sp)
    7900:	dc401f17 	ldw	r17,124(sp)
    7904:	dd800404 	addi	r22,sp,16
    7908:	003fec06 	br	78bc <__alt_data_end+0xfffd6b7c>
    790c:	9080100c 	andi	r2,r18,64
    7910:	d8002785 	stb	zero,158(sp)
    7914:	10010e26 	beq	r2,zero,7d50 <___vfprintf_internal_r+0x1908>
    7918:	d9402e17 	ldw	r5,184(sp)
    791c:	d8c02a17 	ldw	r3,168(sp)
    7920:	002d883a 	mov	r22,zero
    7924:	28800104 	addi	r2,r5,4
    7928:	2cc0000b 	ldhu	r19,0(r5)
    792c:	183fc90e 	bge	r3,zero,7854 <__alt_data_end+0xfffd6b14>
    7930:	d8802e15 	stw	r2,184(sp)
    7934:	0039883a 	mov	fp,zero
    7938:	9d84b03a 	or	r2,r19,r22
    793c:	103c1e1e 	bne	r2,zero,69b8 <__alt_data_end+0xfffd5c78>
    7940:	00800044 	movi	r2,1
    7944:	003e6c06 	br	72f8 <__alt_data_end+0xfffd65b8>
    7948:	d9002d17 	ldw	r4,180(sp)
    794c:	d9801e04 	addi	r6,sp,120
    7950:	b80b883a 	mov	r5,r23
    7954:	000d0e40 	call	d0e4 <__sprint_r>
    7958:	103bbf1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    795c:	d8c02017 	ldw	r3,128(sp)
    7960:	da000404 	addi	r8,sp,16
    7964:	d9003217 	ldw	r4,200(sp)
    7968:	d8802617 	ldw	r2,152(sp)
    796c:	d9403317 	ldw	r5,204(sp)
    7970:	8123883a 	add	r17,r16,r4
    7974:	11400216 	blt	r2,r5,7980 <___vfprintf_internal_r+0x1538>
    7978:	9100004c 	andi	r4,r18,1
    797c:	20000d26 	beq	r4,zero,79b4 <___vfprintf_internal_r+0x156c>
    7980:	d9003717 	ldw	r4,220(sp)
    7984:	d9403417 	ldw	r5,208(sp)
    7988:	1907883a 	add	r3,r3,r4
    798c:	d9001f17 	ldw	r4,124(sp)
    7990:	41400015 	stw	r5,0(r8)
    7994:	d9403717 	ldw	r5,220(sp)
    7998:	21000044 	addi	r4,r4,1
    799c:	d8c02015 	stw	r3,128(sp)
    79a0:	41400115 	stw	r5,4(r8)
    79a4:	d9001f15 	stw	r4,124(sp)
    79a8:	014001c4 	movi	r5,7
    79ac:	2901e816 	blt	r5,r4,8150 <___vfprintf_internal_r+0x1d08>
    79b0:	42000204 	addi	r8,r8,8
    79b4:	d9003317 	ldw	r4,204(sp)
    79b8:	8121883a 	add	r16,r16,r4
    79bc:	2085c83a 	sub	r2,r4,r2
    79c0:	8461c83a 	sub	r16,r16,r17
    79c4:	1400010e 	bge	r2,r16,79cc <___vfprintf_internal_r+0x1584>
    79c8:	1021883a 	mov	r16,r2
    79cc:	04000a0e 	bge	zero,r16,79f8 <___vfprintf_internal_r+0x15b0>
    79d0:	d9001f17 	ldw	r4,124(sp)
    79d4:	1c07883a 	add	r3,r3,r16
    79d8:	44400015 	stw	r17,0(r8)
    79dc:	21000044 	addi	r4,r4,1
    79e0:	44000115 	stw	r16,4(r8)
    79e4:	d8c02015 	stw	r3,128(sp)
    79e8:	d9001f15 	stw	r4,124(sp)
    79ec:	014001c4 	movi	r5,7
    79f0:	2901fb16 	blt	r5,r4,81e0 <___vfprintf_internal_r+0x1d98>
    79f4:	42000204 	addi	r8,r8,8
    79f8:	8001f716 	blt	r16,zero,81d8 <___vfprintf_internal_r+0x1d90>
    79fc:	1421c83a 	sub	r16,r2,r16
    7a00:	043d160e 	bge	zero,r16,6e5c <__alt_data_end+0xfffd611c>
    7a04:	04400404 	movi	r17,16
    7a08:	d8801f17 	ldw	r2,124(sp)
    7a0c:	8c3efb0e 	bge	r17,r16,75fc <__alt_data_end+0xfffd68bc>
    7a10:	014000b4 	movhi	r5,2
    7a14:	29769684 	addi	r5,r5,-9638
    7a18:	d9402c15 	stw	r5,176(sp)
    7a1c:	058001c4 	movi	r22,7
    7a20:	dcc02d17 	ldw	r19,180(sp)
    7a24:	00000306 	br	7a34 <___vfprintf_internal_r+0x15ec>
    7a28:	42000204 	addi	r8,r8,8
    7a2c:	843ffc04 	addi	r16,r16,-16
    7a30:	8c3ef50e 	bge	r17,r16,7608 <__alt_data_end+0xfffd68c8>
    7a34:	18c00404 	addi	r3,r3,16
    7a38:	10800044 	addi	r2,r2,1
    7a3c:	45000015 	stw	r20,0(r8)
    7a40:	44400115 	stw	r17,4(r8)
    7a44:	d8c02015 	stw	r3,128(sp)
    7a48:	d8801f15 	stw	r2,124(sp)
    7a4c:	b0bff60e 	bge	r22,r2,7a28 <__alt_data_end+0xfffd6ce8>
    7a50:	d9801e04 	addi	r6,sp,120
    7a54:	b80b883a 	mov	r5,r23
    7a58:	9809883a 	mov	r4,r19
    7a5c:	000d0e40 	call	d0e4 <__sprint_r>
    7a60:	103b7d1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7a64:	d8c02017 	ldw	r3,128(sp)
    7a68:	d8801f17 	ldw	r2,124(sp)
    7a6c:	da000404 	addi	r8,sp,16
    7a70:	003fee06 	br	7a2c <__alt_data_end+0xfffd6cec>
    7a74:	9088703a 	and	r4,r18,r2
    7a78:	203eab1e 	bne	r4,zero,7528 <__alt_data_end+0xfffd67e8>
    7a7c:	dc401f17 	ldw	r17,124(sp)
    7a80:	40800115 	stw	r2,4(r8)
    7a84:	44000015 	stw	r16,0(r8)
    7a88:	8c400044 	addi	r17,r17,1
    7a8c:	d8c02015 	stw	r3,128(sp)
    7a90:	dc401f15 	stw	r17,124(sp)
    7a94:	008001c4 	movi	r2,7
    7a98:	14400e16 	blt	r2,r17,7ad4 <___vfprintf_internal_r+0x168c>
    7a9c:	45800204 	addi	r22,r8,8
    7aa0:	003eca06 	br	75cc <__alt_data_end+0xfffd688c>
    7aa4:	010000b4 	movhi	r4,2
    7aa8:	21369684 	addi	r4,r4,-9638
    7aac:	d9002c15 	stw	r4,176(sp)
    7ab0:	d8802c17 	ldw	r2,176(sp)
    7ab4:	1c07883a 	add	r3,r3,r16
    7ab8:	8c400044 	addi	r17,r17,1
    7abc:	b0800015 	stw	r2,0(r22)
    7ac0:	b4000115 	stw	r16,4(r22)
    7ac4:	d8c02015 	stw	r3,128(sp)
    7ac8:	dc401f15 	stw	r17,124(sp)
    7acc:	008001c4 	movi	r2,7
    7ad0:	147ebd0e 	bge	r2,r17,75c8 <__alt_data_end+0xfffd6888>
    7ad4:	d9002d17 	ldw	r4,180(sp)
    7ad8:	d9801e04 	addi	r6,sp,120
    7adc:	b80b883a 	mov	r5,r23
    7ae0:	000d0e40 	call	d0e4 <__sprint_r>
    7ae4:	103b5c1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7ae8:	d8c02017 	ldw	r3,128(sp)
    7aec:	dc401f17 	ldw	r17,124(sp)
    7af0:	dd800404 	addi	r22,sp,16
    7af4:	003eb506 	br	75cc <__alt_data_end+0xfffd688c>
    7af8:	d9002d17 	ldw	r4,180(sp)
    7afc:	d9801e04 	addi	r6,sp,120
    7b00:	b80b883a 	mov	r5,r23
    7b04:	000d0e40 	call	d0e4 <__sprint_r>
    7b08:	103b531e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7b0c:	d8c02017 	ldw	r3,128(sp)
    7b10:	dc401f17 	ldw	r17,124(sp)
    7b14:	da000404 	addi	r8,sp,16
    7b18:	003e8d06 	br	7550 <__alt_data_end+0xfffd6810>
    7b1c:	d9002d17 	ldw	r4,180(sp)
    7b20:	d9801e04 	addi	r6,sp,120
    7b24:	b80b883a 	mov	r5,r23
    7b28:	000d0e40 	call	d0e4 <__sprint_r>
    7b2c:	103b4a1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7b30:	d8c02017 	ldw	r3,128(sp)
    7b34:	dc401f17 	ldw	r17,124(sp)
    7b38:	dd800404 	addi	r22,sp,16
    7b3c:	003e8f06 	br	757c <__alt_data_end+0xfffd683c>
    7b40:	0027883a 	mov	r19,zero
    7b44:	003f4a06 	br	7870 <__alt_data_end+0xfffd6b30>
    7b48:	d9002d17 	ldw	r4,180(sp)
    7b4c:	d9801e04 	addi	r6,sp,120
    7b50:	b80b883a 	mov	r5,r23
    7b54:	000d0e40 	call	d0e4 <__sprint_r>
    7b58:	103b3f1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7b5c:	d8c02017 	ldw	r3,128(sp)
    7b60:	da000404 	addi	r8,sp,16
    7b64:	003c7b06 	br	6d54 <__alt_data_end+0xfffd6014>
    7b68:	d9402a17 	ldw	r5,168(sp)
    7b6c:	04e7c83a 	sub	r19,zero,r19
    7b70:	07000b44 	movi	fp,45
    7b74:	9804c03a 	cmpne	r2,r19,zero
    7b78:	05adc83a 	sub	r22,zero,r22
    7b7c:	df002785 	stb	fp,158(sp)
    7b80:	b0adc83a 	sub	r22,r22,r2
    7b84:	28017b16 	blt	r5,zero,8174 <___vfprintf_internal_r+0x1d2c>
    7b88:	00bfdfc4 	movi	r2,-129
    7b8c:	90a4703a 	and	r18,r18,r2
    7b90:	003b8906 	br	69b8 <__alt_data_end+0xfffd5c78>
    7b94:	d9003617 	ldw	r4,216(sp)
    7b98:	d9403817 	ldw	r5,224(sp)
    7b9c:	da003d15 	stw	r8,244(sp)
    7ba0:	00029640 	call	2964 <__fpclassifyd>
    7ba4:	da003d17 	ldw	r8,244(sp)
    7ba8:	1000f026 	beq	r2,zero,7f6c <___vfprintf_internal_r+0x1b24>
    7bac:	d9002a17 	ldw	r4,168(sp)
    7bb0:	05bff7c4 	movi	r22,-33
    7bb4:	00bfffc4 	movi	r2,-1
    7bb8:	8dac703a 	and	r22,r17,r22
    7bbc:	20820026 	beq	r4,r2,83c0 <___vfprintf_internal_r+0x1f78>
    7bc0:	008011c4 	movi	r2,71
    7bc4:	b081f726 	beq	r22,r2,83a4 <___vfprintf_internal_r+0x1f5c>
    7bc8:	d9003817 	ldw	r4,224(sp)
    7bcc:	90c04014 	ori	r3,r18,256
    7bd0:	d8c02c15 	stw	r3,176(sp)
    7bd4:	20021516 	blt	r4,zero,842c <___vfprintf_internal_r+0x1fe4>
    7bd8:	dcc03817 	ldw	r19,224(sp)
    7bdc:	d8002905 	stb	zero,164(sp)
    7be0:	00801984 	movi	r2,102
    7be4:	8881f926 	beq	r17,r2,83cc <___vfprintf_internal_r+0x1f84>
    7be8:	00801184 	movi	r2,70
    7bec:	88821c26 	beq	r17,r2,8460 <___vfprintf_internal_r+0x2018>
    7bf0:	00801144 	movi	r2,69
    7bf4:	b081ef26 	beq	r22,r2,83b4 <___vfprintf_internal_r+0x1f6c>
    7bf8:	d8c02a17 	ldw	r3,168(sp)
    7bfc:	d8802104 	addi	r2,sp,132
    7c00:	d8800315 	stw	r2,12(sp)
    7c04:	d9403617 	ldw	r5,216(sp)
    7c08:	d8802504 	addi	r2,sp,148
    7c0c:	d9002d17 	ldw	r4,180(sp)
    7c10:	d8800215 	stw	r2,8(sp)
    7c14:	d8802604 	addi	r2,sp,152
    7c18:	d8c00015 	stw	r3,0(sp)
    7c1c:	d8800115 	stw	r2,4(sp)
    7c20:	01c00084 	movi	r7,2
    7c24:	980d883a 	mov	r6,r19
    7c28:	d8c03c15 	stw	r3,240(sp)
    7c2c:	da003d15 	stw	r8,244(sp)
    7c30:	0008b780 	call	8b78 <_dtoa_r>
    7c34:	1021883a 	mov	r16,r2
    7c38:	008019c4 	movi	r2,103
    7c3c:	d8c03c17 	ldw	r3,240(sp)
    7c40:	da003d17 	ldw	r8,244(sp)
    7c44:	88817126 	beq	r17,r2,820c <___vfprintf_internal_r+0x1dc4>
    7c48:	008011c4 	movi	r2,71
    7c4c:	88829126 	beq	r17,r2,8694 <___vfprintf_internal_r+0x224c>
    7c50:	80f9883a 	add	fp,r16,r3
    7c54:	d9003617 	ldw	r4,216(sp)
    7c58:	000d883a 	mov	r6,zero
    7c5c:	000f883a 	mov	r7,zero
    7c60:	980b883a 	mov	r5,r19
    7c64:	da003d15 	stw	r8,244(sp)
    7c68:	00041e80 	call	41e8 <__eqdf2>
    7c6c:	da003d17 	ldw	r8,244(sp)
    7c70:	10018d26 	beq	r2,zero,82a8 <___vfprintf_internal_r+0x1e60>
    7c74:	d8802117 	ldw	r2,132(sp)
    7c78:	1700062e 	bgeu	r2,fp,7c94 <___vfprintf_internal_r+0x184c>
    7c7c:	01000c04 	movi	r4,48
    7c80:	10c00044 	addi	r3,r2,1
    7c84:	d8c02115 	stw	r3,132(sp)
    7c88:	11000005 	stb	r4,0(r2)
    7c8c:	d8802117 	ldw	r2,132(sp)
    7c90:	173ffb36 	bltu	r2,fp,7c80 <__alt_data_end+0xfffd6f40>
    7c94:	1405c83a 	sub	r2,r2,r16
    7c98:	d8803315 	stw	r2,204(sp)
    7c9c:	008011c4 	movi	r2,71
    7ca0:	b0817626 	beq	r22,r2,827c <___vfprintf_internal_r+0x1e34>
    7ca4:	00801944 	movi	r2,101
    7ca8:	1442800e 	bge	r2,r17,86ac <___vfprintf_internal_r+0x2264>
    7cac:	d8c02617 	ldw	r3,152(sp)
    7cb0:	00801984 	movi	r2,102
    7cb4:	d8c03215 	stw	r3,200(sp)
    7cb8:	8881fe26 	beq	r17,r2,84b4 <___vfprintf_internal_r+0x206c>
    7cbc:	d8c03217 	ldw	r3,200(sp)
    7cc0:	d9003317 	ldw	r4,204(sp)
    7cc4:	1901dd16 	blt	r3,r4,843c <___vfprintf_internal_r+0x1ff4>
    7cc8:	9480004c 	andi	r18,r18,1
    7ccc:	90022b1e 	bne	r18,zero,857c <___vfprintf_internal_r+0x2134>
    7cd0:	1805883a 	mov	r2,r3
    7cd4:	18028316 	blt	r3,zero,86e4 <___vfprintf_internal_r+0x229c>
    7cd8:	d8c03217 	ldw	r3,200(sp)
    7cdc:	044019c4 	movi	r17,103
    7ce0:	d8c02b15 	stw	r3,172(sp)
    7ce4:	df002907 	ldb	fp,164(sp)
    7ce8:	e001531e 	bne	fp,zero,8238 <___vfprintf_internal_r+0x1df0>
    7cec:	df002783 	ldbu	fp,158(sp)
    7cf0:	d8802915 	stw	r2,164(sp)
    7cf4:	dc802c17 	ldw	r18,176(sp)
    7cf8:	d8002a15 	stw	zero,168(sp)
    7cfc:	003baf06 	br	6bbc <__alt_data_end+0xfffd5e7c>
    7d00:	d8c02e17 	ldw	r3,184(sp)
    7d04:	d9002e17 	ldw	r4,184(sp)
    7d08:	d9402e17 	ldw	r5,184(sp)
    7d0c:	18c00017 	ldw	r3,0(r3)
    7d10:	21000117 	ldw	r4,4(r4)
    7d14:	29400204 	addi	r5,r5,8
    7d18:	d8c03615 	stw	r3,216(sp)
    7d1c:	d9003815 	stw	r4,224(sp)
    7d20:	d9402e15 	stw	r5,184(sp)
    7d24:	003b5006 	br	6a68 <__alt_data_end+0xfffd5d28>
    7d28:	ac400007 	ldb	r17,0(r21)
    7d2c:	003a2806 	br	65d0 <__alt_data_end+0xfffd5890>
    7d30:	9080100c 	andi	r2,r18,64
    7d34:	1000a826 	beq	r2,zero,7fd8 <___vfprintf_internal_r+0x1b90>
    7d38:	d8c02e17 	ldw	r3,184(sp)
    7d3c:	002d883a 	mov	r22,zero
    7d40:	1cc0000b 	ldhu	r19,0(r3)
    7d44:	18c00104 	addi	r3,r3,4
    7d48:	d8c02e15 	stw	r3,184(sp)
    7d4c:	003caf06 	br	700c <__alt_data_end+0xfffd62cc>
    7d50:	d9002e17 	ldw	r4,184(sp)
    7d54:	d9402a17 	ldw	r5,168(sp)
    7d58:	002d883a 	mov	r22,zero
    7d5c:	20800104 	addi	r2,r4,4
    7d60:	24c00017 	ldw	r19,0(r4)
    7d64:	283ebb0e 	bge	r5,zero,7854 <__alt_data_end+0xfffd6b14>
    7d68:	003ef106 	br	7930 <__alt_data_end+0xfffd6bf0>
    7d6c:	9080040c 	andi	r2,r18,16
    7d70:	1000921e 	bne	r2,zero,7fbc <___vfprintf_internal_r+0x1b74>
    7d74:	9480100c 	andi	r18,r18,64
    7d78:	90013926 	beq	r18,zero,8260 <___vfprintf_internal_r+0x1e18>
    7d7c:	d9402e17 	ldw	r5,184(sp)
    7d80:	d8c02f17 	ldw	r3,188(sp)
    7d84:	28800017 	ldw	r2,0(r5)
    7d88:	29400104 	addi	r5,r5,4
    7d8c:	d9402e15 	stw	r5,184(sp)
    7d90:	10c0000d 	sth	r3,0(r2)
    7d94:	0039e406 	br	6528 <__alt_data_end+0xfffd57e8>
    7d98:	9080100c 	andi	r2,r18,64
    7d9c:	10008026 	beq	r2,zero,7fa0 <___vfprintf_internal_r+0x1b58>
    7da0:	d8802e17 	ldw	r2,184(sp)
    7da4:	14c0000f 	ldh	r19,0(r2)
    7da8:	10800104 	addi	r2,r2,4
    7dac:	d8802e15 	stw	r2,184(sp)
    7db0:	982dd7fa 	srai	r22,r19,31
    7db4:	b005883a 	mov	r2,r22
    7db8:	003af706 	br	6998 <__alt_data_end+0xfffd5c58>
    7dbc:	9080100c 	andi	r2,r18,64
    7dc0:	d8002785 	stb	zero,158(sp)
    7dc4:	10008a1e 	bne	r2,zero,7ff0 <___vfprintf_internal_r+0x1ba8>
    7dc8:	d9002e17 	ldw	r4,184(sp)
    7dcc:	d9402a17 	ldw	r5,168(sp)
    7dd0:	002d883a 	mov	r22,zero
    7dd4:	20800104 	addi	r2,r4,4
    7dd8:	24c00017 	ldw	r19,0(r4)
    7ddc:	283e4b0e 	bge	r5,zero,770c <__alt_data_end+0xfffd69cc>
    7de0:	9d86b03a 	or	r3,r19,r22
    7de4:	d8802e15 	stw	r2,184(sp)
    7de8:	183e4c1e 	bne	r3,zero,771c <__alt_data_end+0xfffd69dc>
    7dec:	0039883a 	mov	fp,zero
    7df0:	0005883a 	mov	r2,zero
    7df4:	003d4006 	br	72f8 <__alt_data_end+0xfffd65b8>
    7df8:	014000b4 	movhi	r5,2
    7dfc:	29769684 	addi	r5,r5,-9638
    7e00:	d9402c15 	stw	r5,176(sp)
    7e04:	d9402c17 	ldw	r5,176(sp)
    7e08:	1c47883a 	add	r3,r3,r17
    7e0c:	10800044 	addi	r2,r2,1
    7e10:	41400015 	stw	r5,0(r8)
    7e14:	44400115 	stw	r17,4(r8)
    7e18:	d8c02015 	stw	r3,128(sp)
    7e1c:	d8801f15 	stw	r2,124(sp)
    7e20:	010001c4 	movi	r4,7
    7e24:	20bec816 	blt	r4,r2,7948 <__alt_data_end+0xfffd6c08>
    7e28:	42000204 	addi	r8,r8,8
    7e2c:	003ecd06 	br	7964 <__alt_data_end+0xfffd6c24>
    7e30:	d9002a17 	ldw	r4,168(sp)
    7e34:	d8002785 	stb	zero,158(sp)
    7e38:	203d2d16 	blt	r4,zero,72f0 <__alt_data_end+0xfffd65b0>
    7e3c:	00bfdfc4 	movi	r2,-129
    7e40:	90a4703a 	and	r18,r18,r2
    7e44:	003a6106 	br	67cc <__alt_data_end+0xfffd5a8c>
    7e48:	010000b4 	movhi	r4,2
    7e4c:	21369684 	addi	r4,r4,-9638
    7e50:	d9002c15 	stw	r4,176(sp)
    7e54:	003bea06 	br	6e00 <__alt_data_end+0xfffd60c0>
    7e58:	d9002d17 	ldw	r4,180(sp)
    7e5c:	d9801e04 	addi	r6,sp,120
    7e60:	b80b883a 	mov	r5,r23
    7e64:	000d0e40 	call	d0e4 <__sprint_r>
    7e68:	103a7b1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7e6c:	d8c02017 	ldw	r3,128(sp)
    7e70:	da000404 	addi	r8,sp,16
    7e74:	003d4106 	br	737c <__alt_data_end+0xfffd663c>
    7e78:	d8801f17 	ldw	r2,124(sp)
    7e7c:	014000b4 	movhi	r5,2
    7e80:	01000044 	movi	r4,1
    7e84:	18c00044 	addi	r3,r3,1
    7e88:	10800044 	addi	r2,r2,1
    7e8c:	29769604 	addi	r5,r5,-9640
    7e90:	41000115 	stw	r4,4(r8)
    7e94:	41400015 	stw	r5,0(r8)
    7e98:	d8c02015 	stw	r3,128(sp)
    7e9c:	d8801f15 	stw	r2,124(sp)
    7ea0:	010001c4 	movi	r4,7
    7ea4:	20805c16 	blt	r4,r2,8018 <___vfprintf_internal_r+0x1bd0>
    7ea8:	42000204 	addi	r8,r8,8
    7eac:	8800041e 	bne	r17,zero,7ec0 <___vfprintf_internal_r+0x1a78>
    7eb0:	d8803317 	ldw	r2,204(sp)
    7eb4:	1000021e 	bne	r2,zero,7ec0 <___vfprintf_internal_r+0x1a78>
    7eb8:	9080004c 	andi	r2,r18,1
    7ebc:	103be726 	beq	r2,zero,6e5c <__alt_data_end+0xfffd611c>
    7ec0:	d9003717 	ldw	r4,220(sp)
    7ec4:	d8801f17 	ldw	r2,124(sp)
    7ec8:	d9403417 	ldw	r5,208(sp)
    7ecc:	20c7883a 	add	r3,r4,r3
    7ed0:	10800044 	addi	r2,r2,1
    7ed4:	41000115 	stw	r4,4(r8)
    7ed8:	41400015 	stw	r5,0(r8)
    7edc:	d8c02015 	stw	r3,128(sp)
    7ee0:	d8801f15 	stw	r2,124(sp)
    7ee4:	010001c4 	movi	r4,7
    7ee8:	20812116 	blt	r4,r2,8370 <___vfprintf_internal_r+0x1f28>
    7eec:	42000204 	addi	r8,r8,8
    7ef0:	0463c83a 	sub	r17,zero,r17
    7ef4:	0440730e 	bge	zero,r17,80c4 <___vfprintf_internal_r+0x1c7c>
    7ef8:	05800404 	movi	r22,16
    7efc:	b440860e 	bge	r22,r17,8118 <___vfprintf_internal_r+0x1cd0>
    7f00:	014000b4 	movhi	r5,2
    7f04:	29769684 	addi	r5,r5,-9638
    7f08:	d9402c15 	stw	r5,176(sp)
    7f0c:	070001c4 	movi	fp,7
    7f10:	dcc02d17 	ldw	r19,180(sp)
    7f14:	00000306 	br	7f24 <___vfprintf_internal_r+0x1adc>
    7f18:	42000204 	addi	r8,r8,8
    7f1c:	8c7ffc04 	addi	r17,r17,-16
    7f20:	b440800e 	bge	r22,r17,8124 <___vfprintf_internal_r+0x1cdc>
    7f24:	18c00404 	addi	r3,r3,16
    7f28:	10800044 	addi	r2,r2,1
    7f2c:	45000015 	stw	r20,0(r8)
    7f30:	45800115 	stw	r22,4(r8)
    7f34:	d8c02015 	stw	r3,128(sp)
    7f38:	d8801f15 	stw	r2,124(sp)
    7f3c:	e0bff60e 	bge	fp,r2,7f18 <__alt_data_end+0xfffd71d8>
    7f40:	d9801e04 	addi	r6,sp,120
    7f44:	b80b883a 	mov	r5,r23
    7f48:	9809883a 	mov	r4,r19
    7f4c:	000d0e40 	call	d0e4 <__sprint_r>
    7f50:	103a411e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    7f54:	d8c02017 	ldw	r3,128(sp)
    7f58:	d8801f17 	ldw	r2,124(sp)
    7f5c:	da000404 	addi	r8,sp,16
    7f60:	003fee06 	br	7f1c <__alt_data_end+0xfffd71dc>
    7f64:	00bfffc4 	movi	r2,-1
    7f68:	003a3f06 	br	6868 <__alt_data_end+0xfffd5b28>
    7f6c:	008011c4 	movi	r2,71
    7f70:	1440b816 	blt	r2,r17,8254 <___vfprintf_internal_r+0x1e0c>
    7f74:	040000b4 	movhi	r16,2
    7f78:	84368804 	addi	r16,r16,-9696
    7f7c:	00c000c4 	movi	r3,3
    7f80:	00bfdfc4 	movi	r2,-129
    7f84:	d8c02915 	stw	r3,164(sp)
    7f88:	90a4703a 	and	r18,r18,r2
    7f8c:	df002783 	ldbu	fp,158(sp)
    7f90:	d8c02b15 	stw	r3,172(sp)
    7f94:	d8002a15 	stw	zero,168(sp)
    7f98:	d8003215 	stw	zero,200(sp)
    7f9c:	003b0706 	br	6bbc <__alt_data_end+0xfffd5e7c>
    7fa0:	d8c02e17 	ldw	r3,184(sp)
    7fa4:	1cc00017 	ldw	r19,0(r3)
    7fa8:	18c00104 	addi	r3,r3,4
    7fac:	d8c02e15 	stw	r3,184(sp)
    7fb0:	982dd7fa 	srai	r22,r19,31
    7fb4:	b005883a 	mov	r2,r22
    7fb8:	003a7706 	br	6998 <__alt_data_end+0xfffd5c58>
    7fbc:	d8c02e17 	ldw	r3,184(sp)
    7fc0:	d9002f17 	ldw	r4,188(sp)
    7fc4:	18800017 	ldw	r2,0(r3)
    7fc8:	18c00104 	addi	r3,r3,4
    7fcc:	d8c02e15 	stw	r3,184(sp)
    7fd0:	11000015 	stw	r4,0(r2)
    7fd4:	00395406 	br	6528 <__alt_data_end+0xfffd57e8>
    7fd8:	d9002e17 	ldw	r4,184(sp)
    7fdc:	002d883a 	mov	r22,zero
    7fe0:	24c00017 	ldw	r19,0(r4)
    7fe4:	21000104 	addi	r4,r4,4
    7fe8:	d9002e15 	stw	r4,184(sp)
    7fec:	003c0706 	br	700c <__alt_data_end+0xfffd62cc>
    7ff0:	d9402e17 	ldw	r5,184(sp)
    7ff4:	d8c02a17 	ldw	r3,168(sp)
    7ff8:	002d883a 	mov	r22,zero
    7ffc:	28800104 	addi	r2,r5,4
    8000:	2cc0000b 	ldhu	r19,0(r5)
    8004:	183dc10e 	bge	r3,zero,770c <__alt_data_end+0xfffd69cc>
    8008:	003f7506 	br	7de0 <__alt_data_end+0xfffd70a0>
    800c:	040000b4 	movhi	r16,2
    8010:	84368604 	addi	r16,r16,-9704
    8014:	003aa706 	br	6ab4 <__alt_data_end+0xfffd5d74>
    8018:	d9002d17 	ldw	r4,180(sp)
    801c:	d9801e04 	addi	r6,sp,120
    8020:	b80b883a 	mov	r5,r23
    8024:	000d0e40 	call	d0e4 <__sprint_r>
    8028:	103a0b1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    802c:	dc402617 	ldw	r17,152(sp)
    8030:	d8c02017 	ldw	r3,128(sp)
    8034:	da000404 	addi	r8,sp,16
    8038:	003f9c06 	br	7eac <__alt_data_end+0xfffd716c>
    803c:	ac400043 	ldbu	r17,1(r21)
    8040:	84000814 	ori	r16,r16,32
    8044:	ad400044 	addi	r21,r21,1
    8048:	8c403fcc 	andi	r17,r17,255
    804c:	8c40201c 	xori	r17,r17,128
    8050:	8c7fe004 	addi	r17,r17,-128
    8054:	00395e06 	br	65d0 <__alt_data_end+0xfffd5890>
    8058:	d8c02e15 	stw	r3,184(sp)
    805c:	0039883a 	mov	fp,zero
    8060:	003e3506 	br	7938 <__alt_data_end+0xfffd6bf8>
    8064:	d9002d17 	ldw	r4,180(sp)
    8068:	d9801e04 	addi	r6,sp,120
    806c:	b80b883a 	mov	r5,r23
    8070:	000d0e40 	call	d0e4 <__sprint_r>
    8074:	1039f81e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    8078:	d8c02017 	ldw	r3,128(sp)
    807c:	da000404 	addi	r8,sp,16
    8080:	003cd006 	br	73c4 <__alt_data_end+0xfffd6684>
    8084:	8009883a 	mov	r4,r16
    8088:	df003d15 	stw	fp,244(sp)
    808c:	00063b00 	call	63b0 <strlen>
    8090:	d8802b15 	stw	r2,172(sp)
    8094:	da003d17 	ldw	r8,244(sp)
    8098:	103c200e 	bge	r2,zero,711c <__alt_data_end+0xfffd63dc>
    809c:	0005883a 	mov	r2,zero
    80a0:	003c1e06 	br	711c <__alt_data_end+0xfffd63dc>
    80a4:	d9002d17 	ldw	r4,180(sp)
    80a8:	d9801e04 	addi	r6,sp,120
    80ac:	b80b883a 	mov	r5,r23
    80b0:	000d0e40 	call	d0e4 <__sprint_r>
    80b4:	1039e81e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    80b8:	d8c02017 	ldw	r3,128(sp)
    80bc:	d8801f17 	ldw	r2,124(sp)
    80c0:	da000404 	addi	r8,sp,16
    80c4:	d9403317 	ldw	r5,204(sp)
    80c8:	10800044 	addi	r2,r2,1
    80cc:	44000015 	stw	r16,0(r8)
    80d0:	28c7883a 	add	r3,r5,r3
    80d4:	003b5b06 	br	6e44 <__alt_data_end+0xfffd6104>
    80d8:	010000b4 	movhi	r4,2
    80dc:	21369a84 	addi	r4,r4,-9622
    80e0:	d9003515 	stw	r4,212(sp)
    80e4:	003af206 	br	6cb0 <__alt_data_end+0xfffd5f70>
    80e8:	013fffc4 	movi	r4,-1
    80ec:	003a0806 	br	6910 <__alt_data_end+0xfffd5bd0>
    80f0:	0023883a 	mov	r17,zero
    80f4:	003d9d06 	br	776c <__alt_data_end+0xfffd6a2c>
    80f8:	d9002d17 	ldw	r4,180(sp)
    80fc:	d9801e04 	addi	r6,sp,120
    8100:	b80b883a 	mov	r5,r23
    8104:	000d0e40 	call	d0e4 <__sprint_r>
    8108:	1039d31e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    810c:	d8c02017 	ldw	r3,128(sp)
    8110:	da000404 	addi	r8,sp,16
    8114:	003d9406 	br	7768 <__alt_data_end+0xfffd6a28>
    8118:	010000b4 	movhi	r4,2
    811c:	21369684 	addi	r4,r4,-9638
    8120:	d9002c15 	stw	r4,176(sp)
    8124:	d9002c17 	ldw	r4,176(sp)
    8128:	1c47883a 	add	r3,r3,r17
    812c:	10800044 	addi	r2,r2,1
    8130:	41000015 	stw	r4,0(r8)
    8134:	44400115 	stw	r17,4(r8)
    8138:	d8c02015 	stw	r3,128(sp)
    813c:	d8801f15 	stw	r2,124(sp)
    8140:	010001c4 	movi	r4,7
    8144:	20bfd716 	blt	r4,r2,80a4 <__alt_data_end+0xfffd7364>
    8148:	42000204 	addi	r8,r8,8
    814c:	003fdd06 	br	80c4 <__alt_data_end+0xfffd7384>
    8150:	d9002d17 	ldw	r4,180(sp)
    8154:	d9801e04 	addi	r6,sp,120
    8158:	b80b883a 	mov	r5,r23
    815c:	000d0e40 	call	d0e4 <__sprint_r>
    8160:	1039bd1e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    8164:	d8802617 	ldw	r2,152(sp)
    8168:	d8c02017 	ldw	r3,128(sp)
    816c:	da000404 	addi	r8,sp,16
    8170:	003e1006 	br	79b4 <__alt_data_end+0xfffd6c74>
    8174:	00800044 	movi	r2,1
    8178:	10803fcc 	andi	r2,r2,255
    817c:	00c00044 	movi	r3,1
    8180:	10fa0d26 	beq	r2,r3,69b8 <__alt_data_end+0xfffd5c78>
    8184:	00c00084 	movi	r3,2
    8188:	10fbaf26 	beq	r2,r3,7048 <__alt_data_end+0xfffd6308>
    818c:	003a6d06 	br	6b44 <__alt_data_end+0xfffd5e04>
    8190:	010000b4 	movhi	r4,2
    8194:	21369a84 	addi	r4,r4,-9622
    8198:	d9003515 	stw	r4,212(sp)
    819c:	003b5406 	br	6ef0 <__alt_data_end+0xfffd61b0>
    81a0:	d8802a17 	ldw	r2,168(sp)
    81a4:	00c00184 	movi	r3,6
    81a8:	1880012e 	bgeu	r3,r2,81b0 <___vfprintf_internal_r+0x1d68>
    81ac:	1805883a 	mov	r2,r3
    81b0:	d8802b15 	stw	r2,172(sp)
    81b4:	1000ef16 	blt	r2,zero,8574 <___vfprintf_internal_r+0x212c>
    81b8:	040000b4 	movhi	r16,2
    81bc:	d8802915 	stw	r2,164(sp)
    81c0:	dcc02e15 	stw	r19,184(sp)
    81c4:	d8002a15 	stw	zero,168(sp)
    81c8:	d8003215 	stw	zero,200(sp)
    81cc:	84369404 	addi	r16,r16,-9648
    81d0:	0039883a 	mov	fp,zero
    81d4:	003a8006 	br	6bd8 <__alt_data_end+0xfffd5e98>
    81d8:	0021883a 	mov	r16,zero
    81dc:	003e0706 	br	79fc <__alt_data_end+0xfffd6cbc>
    81e0:	d9002d17 	ldw	r4,180(sp)
    81e4:	d9801e04 	addi	r6,sp,120
    81e8:	b80b883a 	mov	r5,r23
    81ec:	000d0e40 	call	d0e4 <__sprint_r>
    81f0:	1039991e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    81f4:	d8802617 	ldw	r2,152(sp)
    81f8:	d9403317 	ldw	r5,204(sp)
    81fc:	d8c02017 	ldw	r3,128(sp)
    8200:	da000404 	addi	r8,sp,16
    8204:	2885c83a 	sub	r2,r5,r2
    8208:	003dfb06 	br	79f8 <__alt_data_end+0xfffd6cb8>
    820c:	9080004c 	andi	r2,r18,1
    8210:	103e8f1e 	bne	r2,zero,7c50 <__alt_data_end+0xfffd6f10>
    8214:	d8802117 	ldw	r2,132(sp)
    8218:	003e9e06 	br	7c94 <__alt_data_end+0xfffd6f54>
    821c:	1025883a 	mov	r18,r2
    8220:	0039883a 	mov	fp,zero
    8224:	00800084 	movi	r2,2
    8228:	003fd306 	br	8178 <__alt_data_end+0xfffd7438>
    822c:	07000b44 	movi	fp,45
    8230:	df002785 	stb	fp,158(sp)
    8234:	003a1b06 	br	6aa4 <__alt_data_end+0xfffd5d64>
    8238:	00c00b44 	movi	r3,45
    823c:	d8c02785 	stb	r3,158(sp)
    8240:	d8802915 	stw	r2,164(sp)
    8244:	dc802c17 	ldw	r18,176(sp)
    8248:	d8002a15 	stw	zero,168(sp)
    824c:	07000b44 	movi	fp,45
    8250:	003a5e06 	br	6bcc <__alt_data_end+0xfffd5e8c>
    8254:	040000b4 	movhi	r16,2
    8258:	84368904 	addi	r16,r16,-9692
    825c:	003f4706 	br	7f7c <__alt_data_end+0xfffd723c>
    8260:	d9002e17 	ldw	r4,184(sp)
    8264:	d9402f17 	ldw	r5,188(sp)
    8268:	20800017 	ldw	r2,0(r4)
    826c:	21000104 	addi	r4,r4,4
    8270:	d9002e15 	stw	r4,184(sp)
    8274:	11400015 	stw	r5,0(r2)
    8278:	0038ab06 	br	6528 <__alt_data_end+0xfffd57e8>
    827c:	dd802617 	ldw	r22,152(sp)
    8280:	00bfff44 	movi	r2,-3
    8284:	b0801c16 	blt	r22,r2,82f8 <___vfprintf_internal_r+0x1eb0>
    8288:	d9402a17 	ldw	r5,168(sp)
    828c:	2d801a16 	blt	r5,r22,82f8 <___vfprintf_internal_r+0x1eb0>
    8290:	dd803215 	stw	r22,200(sp)
    8294:	003e8906 	br	7cbc <__alt_data_end+0xfffd6f7c>
    8298:	010000b4 	movhi	r4,2
    829c:	21369684 	addi	r4,r4,-9638
    82a0:	d9002c15 	stw	r4,176(sp)
    82a4:	003c9106 	br	74ec <__alt_data_end+0xfffd67ac>
    82a8:	e005883a 	mov	r2,fp
    82ac:	003e7906 	br	7c94 <__alt_data_end+0xfffd6f54>
    82b0:	d9002a17 	ldw	r4,168(sp)
    82b4:	df002783 	ldbu	fp,158(sp)
    82b8:	dcc02e15 	stw	r19,184(sp)
    82bc:	d9002915 	stw	r4,164(sp)
    82c0:	d9002b15 	stw	r4,172(sp)
    82c4:	d8002a15 	stw	zero,168(sp)
    82c8:	d8003215 	stw	zero,200(sp)
    82cc:	003a3b06 	br	6bbc <__alt_data_end+0xfffd5e7c>
    82d0:	9080004c 	andi	r2,r18,1
    82d4:	0039883a 	mov	fp,zero
    82d8:	10000426 	beq	r2,zero,82ec <___vfprintf_internal_r+0x1ea4>
    82dc:	00800c04 	movi	r2,48
    82e0:	dc001dc4 	addi	r16,sp,119
    82e4:	d8801dc5 	stb	r2,119(sp)
    82e8:	003b6406 	br	707c <__alt_data_end+0xfffd633c>
    82ec:	d8002b15 	stw	zero,172(sp)
    82f0:	dc001e04 	addi	r16,sp,120
    82f4:	003a2b06 	br	6ba4 <__alt_data_end+0xfffd5e64>
    82f8:	8c7fff84 	addi	r17,r17,-2
    82fc:	b5bfffc4 	addi	r22,r22,-1
    8300:	dd802615 	stw	r22,152(sp)
    8304:	dc4022c5 	stb	r17,139(sp)
    8308:	b000bf16 	blt	r22,zero,8608 <___vfprintf_internal_r+0x21c0>
    830c:	00800ac4 	movi	r2,43
    8310:	d8802305 	stb	r2,140(sp)
    8314:	00800244 	movi	r2,9
    8318:	15807016 	blt	r2,r22,84dc <___vfprintf_internal_r+0x2094>
    831c:	00800c04 	movi	r2,48
    8320:	b5800c04 	addi	r22,r22,48
    8324:	d8802345 	stb	r2,141(sp)
    8328:	dd802385 	stb	r22,142(sp)
    832c:	d88023c4 	addi	r2,sp,143
    8330:	df0022c4 	addi	fp,sp,139
    8334:	d8c03317 	ldw	r3,204(sp)
    8338:	1739c83a 	sub	fp,r2,fp
    833c:	d9003317 	ldw	r4,204(sp)
    8340:	e0c7883a 	add	r3,fp,r3
    8344:	df003a15 	stw	fp,232(sp)
    8348:	d8c02b15 	stw	r3,172(sp)
    834c:	00800044 	movi	r2,1
    8350:	1100b30e 	bge	r2,r4,8620 <___vfprintf_internal_r+0x21d8>
    8354:	d8c02b17 	ldw	r3,172(sp)
    8358:	18c00044 	addi	r3,r3,1
    835c:	d8c02b15 	stw	r3,172(sp)
    8360:	1805883a 	mov	r2,r3
    8364:	1800ac16 	blt	r3,zero,8618 <___vfprintf_internal_r+0x21d0>
    8368:	d8003215 	stw	zero,200(sp)
    836c:	003e5d06 	br	7ce4 <__alt_data_end+0xfffd6fa4>
    8370:	d9002d17 	ldw	r4,180(sp)
    8374:	d9801e04 	addi	r6,sp,120
    8378:	b80b883a 	mov	r5,r23
    837c:	000d0e40 	call	d0e4 <__sprint_r>
    8380:	1039351e 	bne	r2,zero,6858 <__alt_data_end+0xfffd5b18>
    8384:	dc402617 	ldw	r17,152(sp)
    8388:	d8c02017 	ldw	r3,128(sp)
    838c:	d8801f17 	ldw	r2,124(sp)
    8390:	da000404 	addi	r8,sp,16
    8394:	003ed606 	br	7ef0 <__alt_data_end+0xfffd71b0>
    8398:	182b883a 	mov	r21,r3
    839c:	d8002a15 	stw	zero,168(sp)
    83a0:	00388c06 	br	65d4 <__alt_data_end+0xfffd5894>
    83a4:	d8802a17 	ldw	r2,168(sp)
    83a8:	103e071e 	bne	r2,zero,7bc8 <__alt_data_end+0xfffd6e88>
    83ac:	dc002a15 	stw	r16,168(sp)
    83b0:	003e0506 	br	7bc8 <__alt_data_end+0xfffd6e88>
    83b4:	d9002a17 	ldw	r4,168(sp)
    83b8:	20c00044 	addi	r3,r4,1
    83bc:	003e0f06 	br	7bfc <__alt_data_end+0xfffd6ebc>
    83c0:	01400184 	movi	r5,6
    83c4:	d9402a15 	stw	r5,168(sp)
    83c8:	003dff06 	br	7bc8 <__alt_data_end+0xfffd6e88>
    83cc:	d8802104 	addi	r2,sp,132
    83d0:	d8800315 	stw	r2,12(sp)
    83d4:	d8802504 	addi	r2,sp,148
    83d8:	d8800215 	stw	r2,8(sp)
    83dc:	d8802604 	addi	r2,sp,152
    83e0:	d8800115 	stw	r2,4(sp)
    83e4:	d8802a17 	ldw	r2,168(sp)
    83e8:	d9403617 	ldw	r5,216(sp)
    83ec:	d9002d17 	ldw	r4,180(sp)
    83f0:	d8800015 	stw	r2,0(sp)
    83f4:	01c000c4 	movi	r7,3
    83f8:	980d883a 	mov	r6,r19
    83fc:	da003d15 	stw	r8,244(sp)
    8400:	0008b780 	call	8b78 <_dtoa_r>
    8404:	d8c02a17 	ldw	r3,168(sp)
    8408:	da003d17 	ldw	r8,244(sp)
    840c:	1021883a 	mov	r16,r2
    8410:	10f9883a 	add	fp,r2,r3
    8414:	81000007 	ldb	r4,0(r16)
    8418:	00800c04 	movi	r2,48
    841c:	20805e26 	beq	r4,r2,8598 <___vfprintf_internal_r+0x2150>
    8420:	d8c02617 	ldw	r3,152(sp)
    8424:	e0f9883a 	add	fp,fp,r3
    8428:	003e0a06 	br	7c54 <__alt_data_end+0xfffd6f14>
    842c:	00c00b44 	movi	r3,45
    8430:	24e0003c 	xorhi	r19,r4,32768
    8434:	d8c02905 	stb	r3,164(sp)
    8438:	003de906 	br	7be0 <__alt_data_end+0xfffd6ea0>
    843c:	d8c03217 	ldw	r3,200(sp)
    8440:	00c07a0e 	bge	zero,r3,862c <___vfprintf_internal_r+0x21e4>
    8444:	00800044 	movi	r2,1
    8448:	d9003317 	ldw	r4,204(sp)
    844c:	1105883a 	add	r2,r2,r4
    8450:	d8802b15 	stw	r2,172(sp)
    8454:	10004e16 	blt	r2,zero,8590 <___vfprintf_internal_r+0x2148>
    8458:	044019c4 	movi	r17,103
    845c:	003e2106 	br	7ce4 <__alt_data_end+0xfffd6fa4>
    8460:	d9002a17 	ldw	r4,168(sp)
    8464:	d8802104 	addi	r2,sp,132
    8468:	d8800315 	stw	r2,12(sp)
    846c:	d9000015 	stw	r4,0(sp)
    8470:	d8802504 	addi	r2,sp,148
    8474:	d9403617 	ldw	r5,216(sp)
    8478:	d9002d17 	ldw	r4,180(sp)
    847c:	d8800215 	stw	r2,8(sp)
    8480:	d8802604 	addi	r2,sp,152
    8484:	d8800115 	stw	r2,4(sp)
    8488:	01c000c4 	movi	r7,3
    848c:	980d883a 	mov	r6,r19
    8490:	da003d15 	stw	r8,244(sp)
    8494:	0008b780 	call	8b78 <_dtoa_r>
    8498:	d8c02a17 	ldw	r3,168(sp)
    849c:	da003d17 	ldw	r8,244(sp)
    84a0:	1021883a 	mov	r16,r2
    84a4:	00801184 	movi	r2,70
    84a8:	80f9883a 	add	fp,r16,r3
    84ac:	88bfd926 	beq	r17,r2,8414 <__alt_data_end+0xfffd76d4>
    84b0:	003de806 	br	7c54 <__alt_data_end+0xfffd6f14>
    84b4:	d9002a17 	ldw	r4,168(sp)
    84b8:	00c04d0e 	bge	zero,r3,85f0 <___vfprintf_internal_r+0x21a8>
    84bc:	2000441e 	bne	r4,zero,85d0 <___vfprintf_internal_r+0x2188>
    84c0:	9480004c 	andi	r18,r18,1
    84c4:	9000421e 	bne	r18,zero,85d0 <___vfprintf_internal_r+0x2188>
    84c8:	1805883a 	mov	r2,r3
    84cc:	18006f16 	blt	r3,zero,868c <___vfprintf_internal_r+0x2244>
    84d0:	d8c03217 	ldw	r3,200(sp)
    84d4:	d8c02b15 	stw	r3,172(sp)
    84d8:	003e0206 	br	7ce4 <__alt_data_end+0xfffd6fa4>
    84dc:	df0022c4 	addi	fp,sp,139
    84e0:	dc002a15 	stw	r16,168(sp)
    84e4:	4027883a 	mov	r19,r8
    84e8:	e021883a 	mov	r16,fp
    84ec:	b009883a 	mov	r4,r22
    84f0:	01400284 	movi	r5,10
    84f4:	0002e140 	call	2e14 <__modsi3>
    84f8:	10800c04 	addi	r2,r2,48
    84fc:	843fffc4 	addi	r16,r16,-1
    8500:	b009883a 	mov	r4,r22
    8504:	01400284 	movi	r5,10
    8508:	80800005 	stb	r2,0(r16)
    850c:	0002d900 	call	2d90 <__divsi3>
    8510:	102d883a 	mov	r22,r2
    8514:	00800244 	movi	r2,9
    8518:	15bff416 	blt	r2,r22,84ec <__alt_data_end+0xfffd77ac>
    851c:	9811883a 	mov	r8,r19
    8520:	b0800c04 	addi	r2,r22,48
    8524:	8027883a 	mov	r19,r16
    8528:	997fffc4 	addi	r5,r19,-1
    852c:	98bfffc5 	stb	r2,-1(r19)
    8530:	dc002a17 	ldw	r16,168(sp)
    8534:	2f006d2e 	bgeu	r5,fp,86ec <___vfprintf_internal_r+0x22a4>
    8538:	d9c02384 	addi	r7,sp,142
    853c:	3ccfc83a 	sub	r7,r7,r19
    8540:	d9002344 	addi	r4,sp,141
    8544:	e1cf883a 	add	r7,fp,r7
    8548:	00000106 	br	8550 <___vfprintf_internal_r+0x2108>
    854c:	28800003 	ldbu	r2,0(r5)
    8550:	20800005 	stb	r2,0(r4)
    8554:	21000044 	addi	r4,r4,1
    8558:	29400044 	addi	r5,r5,1
    855c:	393ffb1e 	bne	r7,r4,854c <__alt_data_end+0xfffd780c>
    8560:	d8802304 	addi	r2,sp,140
    8564:	14c5c83a 	sub	r2,r2,r19
    8568:	d8c02344 	addi	r3,sp,141
    856c:	1885883a 	add	r2,r3,r2
    8570:	003f7006 	br	8334 <__alt_data_end+0xfffd75f4>
    8574:	0005883a 	mov	r2,zero
    8578:	003f0f06 	br	81b8 <__alt_data_end+0xfffd7478>
    857c:	d8c03217 	ldw	r3,200(sp)
    8580:	18c00044 	addi	r3,r3,1
    8584:	d8c02b15 	stw	r3,172(sp)
    8588:	1805883a 	mov	r2,r3
    858c:	183fb20e 	bge	r3,zero,8458 <__alt_data_end+0xfffd7718>
    8590:	0005883a 	mov	r2,zero
    8594:	003fb006 	br	8458 <__alt_data_end+0xfffd7718>
    8598:	d9003617 	ldw	r4,216(sp)
    859c:	000d883a 	mov	r6,zero
    85a0:	000f883a 	mov	r7,zero
    85a4:	980b883a 	mov	r5,r19
    85a8:	d8c03c15 	stw	r3,240(sp)
    85ac:	da003d15 	stw	r8,244(sp)
    85b0:	00041e80 	call	41e8 <__eqdf2>
    85b4:	d8c03c17 	ldw	r3,240(sp)
    85b8:	da003d17 	ldw	r8,244(sp)
    85bc:	103f9826 	beq	r2,zero,8420 <__alt_data_end+0xfffd76e0>
    85c0:	00800044 	movi	r2,1
    85c4:	10c7c83a 	sub	r3,r2,r3
    85c8:	d8c02615 	stw	r3,152(sp)
    85cc:	003f9506 	br	8424 <__alt_data_end+0xfffd76e4>
    85d0:	d9002a17 	ldw	r4,168(sp)
    85d4:	d8c03217 	ldw	r3,200(sp)
    85d8:	20800044 	addi	r2,r4,1
    85dc:	1885883a 	add	r2,r3,r2
    85e0:	d8802b15 	stw	r2,172(sp)
    85e4:	103dbf0e 	bge	r2,zero,7ce4 <__alt_data_end+0xfffd6fa4>
    85e8:	0005883a 	mov	r2,zero
    85ec:	003dbd06 	br	7ce4 <__alt_data_end+0xfffd6fa4>
    85f0:	2000201e 	bne	r4,zero,8674 <___vfprintf_internal_r+0x222c>
    85f4:	9480004c 	andi	r18,r18,1
    85f8:	90001e1e 	bne	r18,zero,8674 <___vfprintf_internal_r+0x222c>
    85fc:	00800044 	movi	r2,1
    8600:	d8802b15 	stw	r2,172(sp)
    8604:	003db706 	br	7ce4 <__alt_data_end+0xfffd6fa4>
    8608:	00800b44 	movi	r2,45
    860c:	05adc83a 	sub	r22,zero,r22
    8610:	d8802305 	stb	r2,140(sp)
    8614:	003f3f06 	br	8314 <__alt_data_end+0xfffd75d4>
    8618:	0005883a 	mov	r2,zero
    861c:	003f5206 	br	8368 <__alt_data_end+0xfffd7628>
    8620:	90a4703a 	and	r18,r18,r2
    8624:	903f4e26 	beq	r18,zero,8360 <__alt_data_end+0xfffd7620>
    8628:	003f4a06 	br	8354 <__alt_data_end+0xfffd7614>
    862c:	00800084 	movi	r2,2
    8630:	10c5c83a 	sub	r2,r2,r3
    8634:	003f8406 	br	8448 <__alt_data_end+0xfffd7708>
    8638:	d9402e17 	ldw	r5,184(sp)
    863c:	d9002e17 	ldw	r4,184(sp)
    8640:	ac400043 	ldbu	r17,1(r21)
    8644:	29400017 	ldw	r5,0(r5)
    8648:	20800104 	addi	r2,r4,4
    864c:	d8802e15 	stw	r2,184(sp)
    8650:	d9402a15 	stw	r5,168(sp)
    8654:	182b883a 	mov	r21,r3
    8658:	283e7b0e 	bge	r5,zero,8048 <__alt_data_end+0xfffd7308>
    865c:	8c403fcc 	andi	r17,r17,255
    8660:	017fffc4 	movi	r5,-1
    8664:	8c40201c 	xori	r17,r17,128
    8668:	d9402a15 	stw	r5,168(sp)
    866c:	8c7fe004 	addi	r17,r17,-128
    8670:	0037d706 	br	65d0 <__alt_data_end+0xfffd5890>
    8674:	d8c02a17 	ldw	r3,168(sp)
    8678:	18c00084 	addi	r3,r3,2
    867c:	d8c02b15 	stw	r3,172(sp)
    8680:	1805883a 	mov	r2,r3
    8684:	183d970e 	bge	r3,zero,7ce4 <__alt_data_end+0xfffd6fa4>
    8688:	003fd706 	br	85e8 <__alt_data_end+0xfffd78a8>
    868c:	0005883a 	mov	r2,zero
    8690:	003f8f06 	br	84d0 <__alt_data_end+0xfffd7790>
    8694:	9080004c 	andi	r2,r18,1
    8698:	103f821e 	bne	r2,zero,84a4 <__alt_data_end+0xfffd7764>
    869c:	d8802117 	ldw	r2,132(sp)
    86a0:	1405c83a 	sub	r2,r2,r16
    86a4:	d8803315 	stw	r2,204(sp)
    86a8:	b47ef426 	beq	r22,r17,827c <__alt_data_end+0xfffd753c>
    86ac:	dd802617 	ldw	r22,152(sp)
    86b0:	003f1206 	br	82fc <__alt_data_end+0xfffd75bc>
    86b4:	d8c02b03 	ldbu	r3,172(sp)
    86b8:	d8c02785 	stb	r3,158(sp)
    86bc:	0038df06 	br	6a3c <__alt_data_end+0xfffd5cfc>
    86c0:	d8c02b03 	ldbu	r3,172(sp)
    86c4:	d8c02785 	stb	r3,158(sp)
    86c8:	0038aa06 	br	6974 <__alt_data_end+0xfffd5c34>
    86cc:	d8c02b03 	ldbu	r3,172(sp)
    86d0:	d8c02785 	stb	r3,158(sp)
    86d4:	003a4306 	br	6fe4 <__alt_data_end+0xfffd62a4>
    86d8:	d8c02b03 	ldbu	r3,172(sp)
    86dc:	d8c02785 	stb	r3,158(sp)
    86e0:	003af506 	br	72b8 <__alt_data_end+0xfffd6578>
    86e4:	0005883a 	mov	r2,zero
    86e8:	003d7b06 	br	7cd8 <__alt_data_end+0xfffd6f98>
    86ec:	d8802344 	addi	r2,sp,141
    86f0:	003f1006 	br	8334 <__alt_data_end+0xfffd75f4>
    86f4:	d8c02b03 	ldbu	r3,172(sp)
    86f8:	d8c02785 	stb	r3,158(sp)
    86fc:	0038fd06 	br	6af4 <__alt_data_end+0xfffd5db4>
    8700:	d8c02b03 	ldbu	r3,172(sp)
    8704:	d8c02785 	stb	r3,158(sp)
    8708:	003a9706 	br	7168 <__alt_data_end+0xfffd6428>
    870c:	d8c02b03 	ldbu	r3,172(sp)
    8710:	d8c02785 	stb	r3,158(sp)
    8714:	003a1806 	br	6f78 <__alt_data_end+0xfffd6238>
    8718:	d8c02b03 	ldbu	r3,172(sp)
    871c:	d8c02785 	stb	r3,158(sp)
    8720:	003abe06 	br	721c <__alt_data_end+0xfffd64dc>

00008724 <__vfprintf_internal>:
    8724:	008000b4 	movhi	r2,2
    8728:	10be1e04 	addi	r2,r2,-1928
    872c:	300f883a 	mov	r7,r6
    8730:	280d883a 	mov	r6,r5
    8734:	200b883a 	mov	r5,r4
    8738:	11000017 	ldw	r4,0(r2)
    873c:	00064481 	jmpi	6448 <___vfprintf_internal_r>

00008740 <__sbprintf>:
    8740:	2880030b 	ldhu	r2,12(r5)
    8744:	2ac01917 	ldw	r11,100(r5)
    8748:	2a80038b 	ldhu	r10,14(r5)
    874c:	2a400717 	ldw	r9,28(r5)
    8750:	2a000917 	ldw	r8,36(r5)
    8754:	defee204 	addi	sp,sp,-1144
    8758:	00c10004 	movi	r3,1024
    875c:	dc011a15 	stw	r16,1128(sp)
    8760:	10bfff4c 	andi	r2,r2,65533
    8764:	2821883a 	mov	r16,r5
    8768:	d8cb883a 	add	r5,sp,r3
    876c:	dc811c15 	stw	r18,1136(sp)
    8770:	dc411b15 	stw	r17,1132(sp)
    8774:	dfc11d15 	stw	ra,1140(sp)
    8778:	2025883a 	mov	r18,r4
    877c:	d881030d 	sth	r2,1036(sp)
    8780:	dac11915 	stw	r11,1124(sp)
    8784:	da81038d 	sth	r10,1038(sp)
    8788:	da410715 	stw	r9,1052(sp)
    878c:	da010915 	stw	r8,1060(sp)
    8790:	dec10015 	stw	sp,1024(sp)
    8794:	dec10415 	stw	sp,1040(sp)
    8798:	d8c10215 	stw	r3,1032(sp)
    879c:	d8c10515 	stw	r3,1044(sp)
    87a0:	d8010615 	stw	zero,1048(sp)
    87a4:	00064480 	call	6448 <___vfprintf_internal_r>
    87a8:	1023883a 	mov	r17,r2
    87ac:	10000416 	blt	r2,zero,87c0 <__sbprintf+0x80>
    87b0:	d9410004 	addi	r5,sp,1024
    87b4:	9009883a 	mov	r4,r18
    87b8:	000a41c0 	call	a41c <_fflush_r>
    87bc:	10000d1e 	bne	r2,zero,87f4 <__sbprintf+0xb4>
    87c0:	d881030b 	ldhu	r2,1036(sp)
    87c4:	1080100c 	andi	r2,r2,64
    87c8:	10000326 	beq	r2,zero,87d8 <__sbprintf+0x98>
    87cc:	8080030b 	ldhu	r2,12(r16)
    87d0:	10801014 	ori	r2,r2,64
    87d4:	8080030d 	sth	r2,12(r16)
    87d8:	8805883a 	mov	r2,r17
    87dc:	dfc11d17 	ldw	ra,1140(sp)
    87e0:	dc811c17 	ldw	r18,1136(sp)
    87e4:	dc411b17 	ldw	r17,1132(sp)
    87e8:	dc011a17 	ldw	r16,1128(sp)
    87ec:	dec11e04 	addi	sp,sp,1144
    87f0:	f800283a 	ret
    87f4:	047fffc4 	movi	r17,-1
    87f8:	003ff106 	br	87c0 <__alt_data_end+0xfffd7a80>

000087fc <__swsetup_r>:
    87fc:	008000b4 	movhi	r2,2
    8800:	defffd04 	addi	sp,sp,-12
    8804:	10be1e04 	addi	r2,r2,-1928
    8808:	dc400115 	stw	r17,4(sp)
    880c:	2023883a 	mov	r17,r4
    8810:	11000017 	ldw	r4,0(r2)
    8814:	dc000015 	stw	r16,0(sp)
    8818:	dfc00215 	stw	ra,8(sp)
    881c:	2821883a 	mov	r16,r5
    8820:	20000226 	beq	r4,zero,882c <__swsetup_r+0x30>
    8824:	20800e17 	ldw	r2,56(r4)
    8828:	10003126 	beq	r2,zero,88f0 <__swsetup_r+0xf4>
    882c:	8080030b 	ldhu	r2,12(r16)
    8830:	10c0020c 	andi	r3,r2,8
    8834:	1009883a 	mov	r4,r2
    8838:	18000f26 	beq	r3,zero,8878 <__swsetup_r+0x7c>
    883c:	80c00417 	ldw	r3,16(r16)
    8840:	18001526 	beq	r3,zero,8898 <__swsetup_r+0x9c>
    8844:	1100004c 	andi	r4,r2,1
    8848:	20001c1e 	bne	r4,zero,88bc <__swsetup_r+0xc0>
    884c:	1080008c 	andi	r2,r2,2
    8850:	1000291e 	bne	r2,zero,88f8 <__swsetup_r+0xfc>
    8854:	80800517 	ldw	r2,20(r16)
    8858:	80800215 	stw	r2,8(r16)
    885c:	18001c26 	beq	r3,zero,88d0 <__swsetup_r+0xd4>
    8860:	0005883a 	mov	r2,zero
    8864:	dfc00217 	ldw	ra,8(sp)
    8868:	dc400117 	ldw	r17,4(sp)
    886c:	dc000017 	ldw	r16,0(sp)
    8870:	dec00304 	addi	sp,sp,12
    8874:	f800283a 	ret
    8878:	2080040c 	andi	r2,r4,16
    887c:	10002e26 	beq	r2,zero,8938 <__swsetup_r+0x13c>
    8880:	2080010c 	andi	r2,r4,4
    8884:	10001e1e 	bne	r2,zero,8900 <__swsetup_r+0x104>
    8888:	80c00417 	ldw	r3,16(r16)
    888c:	20800214 	ori	r2,r4,8
    8890:	8080030d 	sth	r2,12(r16)
    8894:	183feb1e 	bne	r3,zero,8844 <__alt_data_end+0xfffd7b04>
    8898:	1100a00c 	andi	r4,r2,640
    889c:	01408004 	movi	r5,512
    88a0:	217fe826 	beq	r4,r5,8844 <__alt_data_end+0xfffd7b04>
    88a4:	800b883a 	mov	r5,r16
    88a8:	8809883a 	mov	r4,r17
    88ac:	000b3b80 	call	b3b8 <__smakebuf_r>
    88b0:	8080030b 	ldhu	r2,12(r16)
    88b4:	80c00417 	ldw	r3,16(r16)
    88b8:	003fe206 	br	8844 <__alt_data_end+0xfffd7b04>
    88bc:	80800517 	ldw	r2,20(r16)
    88c0:	80000215 	stw	zero,8(r16)
    88c4:	0085c83a 	sub	r2,zero,r2
    88c8:	80800615 	stw	r2,24(r16)
    88cc:	183fe41e 	bne	r3,zero,8860 <__alt_data_end+0xfffd7b20>
    88d0:	80c0030b 	ldhu	r3,12(r16)
    88d4:	0005883a 	mov	r2,zero
    88d8:	1900200c 	andi	r4,r3,128
    88dc:	203fe126 	beq	r4,zero,8864 <__alt_data_end+0xfffd7b24>
    88e0:	18c01014 	ori	r3,r3,64
    88e4:	80c0030d 	sth	r3,12(r16)
    88e8:	00bfffc4 	movi	r2,-1
    88ec:	003fdd06 	br	8864 <__alt_data_end+0xfffd7b24>
    88f0:	000a8080 	call	a808 <__sinit>
    88f4:	003fcd06 	br	882c <__alt_data_end+0xfffd7aec>
    88f8:	0005883a 	mov	r2,zero
    88fc:	003fd606 	br	8858 <__alt_data_end+0xfffd7b18>
    8900:	81400c17 	ldw	r5,48(r16)
    8904:	28000626 	beq	r5,zero,8920 <__swsetup_r+0x124>
    8908:	80801004 	addi	r2,r16,64
    890c:	28800326 	beq	r5,r2,891c <__swsetup_r+0x120>
    8910:	8809883a 	mov	r4,r17
    8914:	000a97c0 	call	a97c <_free_r>
    8918:	8100030b 	ldhu	r4,12(r16)
    891c:	80000c15 	stw	zero,48(r16)
    8920:	80c00417 	ldw	r3,16(r16)
    8924:	00bff6c4 	movi	r2,-37
    8928:	1108703a 	and	r4,r2,r4
    892c:	80000115 	stw	zero,4(r16)
    8930:	80c00015 	stw	r3,0(r16)
    8934:	003fd506 	br	888c <__alt_data_end+0xfffd7b4c>
    8938:	00800244 	movi	r2,9
    893c:	88800015 	stw	r2,0(r17)
    8940:	20801014 	ori	r2,r4,64
    8944:	8080030d 	sth	r2,12(r16)
    8948:	00bfffc4 	movi	r2,-1
    894c:	003fc506 	br	8864 <__alt_data_end+0xfffd7b24>

00008950 <quorem>:
    8950:	defff204 	addi	sp,sp,-56
    8954:	ddc00b15 	stw	r23,44(sp)
    8958:	20800417 	ldw	r2,16(r4)
    895c:	2dc00417 	ldw	r23,16(r5)
    8960:	dfc00d15 	stw	ra,52(sp)
    8964:	df000c15 	stw	fp,48(sp)
    8968:	dd800a15 	stw	r22,40(sp)
    896c:	dd400915 	stw	r21,36(sp)
    8970:	dd000815 	stw	r20,32(sp)
    8974:	dcc00715 	stw	r19,28(sp)
    8978:	dc800615 	stw	r18,24(sp)
    897c:	dc400515 	stw	r17,20(sp)
    8980:	dc000415 	stw	r16,16(sp)
    8984:	15c07a16 	blt	r2,r23,8b70 <quorem+0x220>
    8988:	bdffffc4 	addi	r23,r23,-1
    898c:	bde9883a 	add	r20,r23,r23
    8990:	28c00504 	addi	r3,r5,20
    8994:	a529883a 	add	r20,r20,r20
    8998:	1d39883a 	add	fp,r3,r20
    899c:	24c00504 	addi	r19,r4,20
    89a0:	d9400215 	stw	r5,8(sp)
    89a4:	9d29883a 	add	r20,r19,r20
    89a8:	e1400017 	ldw	r5,0(fp)
    89ac:	d9000015 	stw	r4,0(sp)
    89b0:	a1000017 	ldw	r4,0(r20)
    89b4:	29400044 	addi	r5,r5,1
    89b8:	d8c00115 	stw	r3,4(sp)
    89bc:	dd000315 	stw	r20,12(sp)
    89c0:	0002e880 	call	2e88 <__udivsi3>
    89c4:	1025883a 	mov	r18,r2
    89c8:	10003026 	beq	r2,zero,8a8c <quorem+0x13c>
    89cc:	dc400117 	ldw	r17,4(sp)
    89d0:	9829883a 	mov	r20,r19
    89d4:	002d883a 	mov	r22,zero
    89d8:	0021883a 	mov	r16,zero
    89dc:	8d400017 	ldw	r21,0(r17)
    89e0:	900b883a 	mov	r5,r18
    89e4:	8c400104 	addi	r17,r17,4
    89e8:	a93fffcc 	andi	r4,r21,65535
    89ec:	0002f440 	call	2f44 <__mulsi3>
    89f0:	a808d43a 	srli	r4,r21,16
    89f4:	900b883a 	mov	r5,r18
    89f8:	15ad883a 	add	r22,r2,r22
    89fc:	0002f440 	call	2f44 <__mulsi3>
    8a00:	a1000017 	ldw	r4,0(r20)
    8a04:	b00cd43a 	srli	r6,r22,16
    8a08:	b0ffffcc 	andi	r3,r22,65535
    8a0c:	217fffcc 	andi	r5,r4,65535
    8a10:	2c21883a 	add	r16,r5,r16
    8a14:	80c7c83a 	sub	r3,r16,r3
    8a18:	2008d43a 	srli	r4,r4,16
    8a1c:	1185883a 	add	r2,r2,r6
    8a20:	1821d43a 	srai	r16,r3,16
    8a24:	117fffcc 	andi	r5,r2,65535
    8a28:	2149c83a 	sub	r4,r4,r5
    8a2c:	2421883a 	add	r16,r4,r16
    8a30:	8008943a 	slli	r4,r16,16
    8a34:	18ffffcc 	andi	r3,r3,65535
    8a38:	102cd43a 	srli	r22,r2,16
    8a3c:	20c8b03a 	or	r4,r4,r3
    8a40:	a1000015 	stw	r4,0(r20)
    8a44:	8021d43a 	srai	r16,r16,16
    8a48:	a5000104 	addi	r20,r20,4
    8a4c:	e47fe32e 	bgeu	fp,r17,89dc <__alt_data_end+0xfffd7c9c>
    8a50:	d8c00317 	ldw	r3,12(sp)
    8a54:	18800017 	ldw	r2,0(r3)
    8a58:	10000c1e 	bne	r2,zero,8a8c <quorem+0x13c>
    8a5c:	18bfff04 	addi	r2,r3,-4
    8a60:	9880082e 	bgeu	r19,r2,8a84 <quorem+0x134>
    8a64:	18ffff17 	ldw	r3,-4(r3)
    8a68:	18000326 	beq	r3,zero,8a78 <quorem+0x128>
    8a6c:	00000506 	br	8a84 <quorem+0x134>
    8a70:	10c00017 	ldw	r3,0(r2)
    8a74:	1800031e 	bne	r3,zero,8a84 <quorem+0x134>
    8a78:	10bfff04 	addi	r2,r2,-4
    8a7c:	bdffffc4 	addi	r23,r23,-1
    8a80:	98bffb36 	bltu	r19,r2,8a70 <__alt_data_end+0xfffd7d30>
    8a84:	d8c00017 	ldw	r3,0(sp)
    8a88:	1dc00415 	stw	r23,16(r3)
    8a8c:	d9400217 	ldw	r5,8(sp)
    8a90:	d9000017 	ldw	r4,0(sp)
    8a94:	000c1380 	call	c138 <__mcmp>
    8a98:	10002816 	blt	r2,zero,8b3c <quorem+0x1ec>
    8a9c:	dc400117 	ldw	r17,4(sp)
    8aa0:	94800044 	addi	r18,r18,1
    8aa4:	980d883a 	mov	r6,r19
    8aa8:	0007883a 	mov	r3,zero
    8aac:	31000017 	ldw	r4,0(r6)
    8ab0:	89400017 	ldw	r5,0(r17)
    8ab4:	31800104 	addi	r6,r6,4
    8ab8:	20bfffcc 	andi	r2,r4,65535
    8abc:	10c7883a 	add	r3,r2,r3
    8ac0:	28bfffcc 	andi	r2,r5,65535
    8ac4:	1885c83a 	sub	r2,r3,r2
    8ac8:	280ad43a 	srli	r5,r5,16
    8acc:	2008d43a 	srli	r4,r4,16
    8ad0:	1007d43a 	srai	r3,r2,16
    8ad4:	10bfffcc 	andi	r2,r2,65535
    8ad8:	2149c83a 	sub	r4,r4,r5
    8adc:	20c9883a 	add	r4,r4,r3
    8ae0:	200a943a 	slli	r5,r4,16
    8ae4:	8c400104 	addi	r17,r17,4
    8ae8:	2007d43a 	srai	r3,r4,16
    8aec:	2884b03a 	or	r2,r5,r2
    8af0:	30bfff15 	stw	r2,-4(r6)
    8af4:	e47fed2e 	bgeu	fp,r17,8aac <__alt_data_end+0xfffd7d6c>
    8af8:	bdc5883a 	add	r2,r23,r23
    8afc:	1085883a 	add	r2,r2,r2
    8b00:	9887883a 	add	r3,r19,r2
    8b04:	18800017 	ldw	r2,0(r3)
    8b08:	10000c1e 	bne	r2,zero,8b3c <quorem+0x1ec>
    8b0c:	18bfff04 	addi	r2,r3,-4
    8b10:	9880082e 	bgeu	r19,r2,8b34 <quorem+0x1e4>
    8b14:	18ffff17 	ldw	r3,-4(r3)
    8b18:	18000326 	beq	r3,zero,8b28 <quorem+0x1d8>
    8b1c:	00000506 	br	8b34 <quorem+0x1e4>
    8b20:	10c00017 	ldw	r3,0(r2)
    8b24:	1800031e 	bne	r3,zero,8b34 <quorem+0x1e4>
    8b28:	10bfff04 	addi	r2,r2,-4
    8b2c:	bdffffc4 	addi	r23,r23,-1
    8b30:	98bffb36 	bltu	r19,r2,8b20 <__alt_data_end+0xfffd7de0>
    8b34:	d8c00017 	ldw	r3,0(sp)
    8b38:	1dc00415 	stw	r23,16(r3)
    8b3c:	9005883a 	mov	r2,r18
    8b40:	dfc00d17 	ldw	ra,52(sp)
    8b44:	df000c17 	ldw	fp,48(sp)
    8b48:	ddc00b17 	ldw	r23,44(sp)
    8b4c:	dd800a17 	ldw	r22,40(sp)
    8b50:	dd400917 	ldw	r21,36(sp)
    8b54:	dd000817 	ldw	r20,32(sp)
    8b58:	dcc00717 	ldw	r19,28(sp)
    8b5c:	dc800617 	ldw	r18,24(sp)
    8b60:	dc400517 	ldw	r17,20(sp)
    8b64:	dc000417 	ldw	r16,16(sp)
    8b68:	dec00e04 	addi	sp,sp,56
    8b6c:	f800283a 	ret
    8b70:	0005883a 	mov	r2,zero
    8b74:	003ff206 	br	8b40 <__alt_data_end+0xfffd7e00>

00008b78 <_dtoa_r>:
    8b78:	20801017 	ldw	r2,64(r4)
    8b7c:	deffde04 	addi	sp,sp,-136
    8b80:	df002015 	stw	fp,128(sp)
    8b84:	dcc01b15 	stw	r19,108(sp)
    8b88:	dc801a15 	stw	r18,104(sp)
    8b8c:	dc401915 	stw	r17,100(sp)
    8b90:	dc001815 	stw	r16,96(sp)
    8b94:	dfc02115 	stw	ra,132(sp)
    8b98:	ddc01f15 	stw	r23,124(sp)
    8b9c:	dd801e15 	stw	r22,120(sp)
    8ba0:	dd401d15 	stw	r21,116(sp)
    8ba4:	dd001c15 	stw	r20,112(sp)
    8ba8:	d9c00315 	stw	r7,12(sp)
    8bac:	2039883a 	mov	fp,r4
    8bb0:	3023883a 	mov	r17,r6
    8bb4:	2825883a 	mov	r18,r5
    8bb8:	dc002417 	ldw	r16,144(sp)
    8bbc:	3027883a 	mov	r19,r6
    8bc0:	10000826 	beq	r2,zero,8be4 <_dtoa_r+0x6c>
    8bc4:	21801117 	ldw	r6,68(r4)
    8bc8:	00c00044 	movi	r3,1
    8bcc:	100b883a 	mov	r5,r2
    8bd0:	1986983a 	sll	r3,r3,r6
    8bd4:	11800115 	stw	r6,4(r2)
    8bd8:	10c00215 	stw	r3,8(r2)
    8bdc:	000b85c0 	call	b85c <_Bfree>
    8be0:	e0001015 	stw	zero,64(fp)
    8be4:	88002e16 	blt	r17,zero,8ca0 <_dtoa_r+0x128>
    8be8:	80000015 	stw	zero,0(r16)
    8bec:	889ffc2c 	andhi	r2,r17,32752
    8bf0:	00dffc34 	movhi	r3,32752
    8bf4:	10c01c26 	beq	r2,r3,8c68 <_dtoa_r+0xf0>
    8bf8:	000d883a 	mov	r6,zero
    8bfc:	000f883a 	mov	r7,zero
    8c00:	9009883a 	mov	r4,r18
    8c04:	980b883a 	mov	r5,r19
    8c08:	00041e80 	call	41e8 <__eqdf2>
    8c0c:	10002b1e 	bne	r2,zero,8cbc <_dtoa_r+0x144>
    8c10:	d9c02317 	ldw	r7,140(sp)
    8c14:	00800044 	movi	r2,1
    8c18:	38800015 	stw	r2,0(r7)
    8c1c:	d8802517 	ldw	r2,148(sp)
    8c20:	10019e26 	beq	r2,zero,929c <_dtoa_r+0x724>
    8c24:	d8c02517 	ldw	r3,148(sp)
    8c28:	008000b4 	movhi	r2,2
    8c2c:	10b69644 	addi	r2,r2,-9639
    8c30:	18800015 	stw	r2,0(r3)
    8c34:	10bfffc4 	addi	r2,r2,-1
    8c38:	dfc02117 	ldw	ra,132(sp)
    8c3c:	df002017 	ldw	fp,128(sp)
    8c40:	ddc01f17 	ldw	r23,124(sp)
    8c44:	dd801e17 	ldw	r22,120(sp)
    8c48:	dd401d17 	ldw	r21,116(sp)
    8c4c:	dd001c17 	ldw	r20,112(sp)
    8c50:	dcc01b17 	ldw	r19,108(sp)
    8c54:	dc801a17 	ldw	r18,104(sp)
    8c58:	dc401917 	ldw	r17,100(sp)
    8c5c:	dc001817 	ldw	r16,96(sp)
    8c60:	dec02204 	addi	sp,sp,136
    8c64:	f800283a 	ret
    8c68:	d8c02317 	ldw	r3,140(sp)
    8c6c:	0089c3c4 	movi	r2,9999
    8c70:	18800015 	stw	r2,0(r3)
    8c74:	90017726 	beq	r18,zero,9254 <_dtoa_r+0x6dc>
    8c78:	008000b4 	movhi	r2,2
    8c7c:	10b6a204 	addi	r2,r2,-9592
    8c80:	d9002517 	ldw	r4,148(sp)
    8c84:	203fec26 	beq	r4,zero,8c38 <__alt_data_end+0xfffd7ef8>
    8c88:	10c000c7 	ldb	r3,3(r2)
    8c8c:	1801781e 	bne	r3,zero,9270 <_dtoa_r+0x6f8>
    8c90:	10c000c4 	addi	r3,r2,3
    8c94:	d9802517 	ldw	r6,148(sp)
    8c98:	30c00015 	stw	r3,0(r6)
    8c9c:	003fe606 	br	8c38 <__alt_data_end+0xfffd7ef8>
    8ca0:	04e00034 	movhi	r19,32768
    8ca4:	9cffffc4 	addi	r19,r19,-1
    8ca8:	00800044 	movi	r2,1
    8cac:	8ce6703a 	and	r19,r17,r19
    8cb0:	80800015 	stw	r2,0(r16)
    8cb4:	9823883a 	mov	r17,r19
    8cb8:	003fcc06 	br	8bec <__alt_data_end+0xfffd7eac>
    8cbc:	d8800204 	addi	r2,sp,8
    8cc0:	d8800015 	stw	r2,0(sp)
    8cc4:	d9c00104 	addi	r7,sp,4
    8cc8:	900b883a 	mov	r5,r18
    8ccc:	980d883a 	mov	r6,r19
    8cd0:	e009883a 	mov	r4,fp
    8cd4:	8820d53a 	srli	r16,r17,20
    8cd8:	000c5040 	call	c504 <__d2b>
    8cdc:	d8800915 	stw	r2,36(sp)
    8ce0:	8001651e 	bne	r16,zero,9278 <_dtoa_r+0x700>
    8ce4:	dd800217 	ldw	r22,8(sp)
    8ce8:	dc000117 	ldw	r16,4(sp)
    8cec:	00800804 	movi	r2,32
    8cf0:	b421883a 	add	r16,r22,r16
    8cf4:	80c10c84 	addi	r3,r16,1074
    8cf8:	10c2d10e 	bge	r2,r3,9840 <_dtoa_r+0xcc8>
    8cfc:	00801004 	movi	r2,64
    8d00:	81010484 	addi	r4,r16,1042
    8d04:	10c7c83a 	sub	r3,r2,r3
    8d08:	9108d83a 	srl	r4,r18,r4
    8d0c:	88e2983a 	sll	r17,r17,r3
    8d10:	2448b03a 	or	r4,r4,r17
    8d14:	000fbec0 	call	fbec <__floatunsidf>
    8d18:	017f8434 	movhi	r5,65040
    8d1c:	01800044 	movi	r6,1
    8d20:	1009883a 	mov	r4,r2
    8d24:	194b883a 	add	r5,r3,r5
    8d28:	843fffc4 	addi	r16,r16,-1
    8d2c:	d9801115 	stw	r6,68(sp)
    8d30:	000d883a 	mov	r6,zero
    8d34:	01cffe34 	movhi	r7,16376
    8d38:	0004cac0 	call	4cac <__subdf3>
    8d3c:	0198dbf4 	movhi	r6,25455
    8d40:	01cff4f4 	movhi	r7,16339
    8d44:	3190d844 	addi	r6,r6,17249
    8d48:	39e1e9c4 	addi	r7,r7,-30809
    8d4c:	1009883a 	mov	r4,r2
    8d50:	180b883a 	mov	r5,r3
    8d54:	00044400 	call	4440 <__muldf3>
    8d58:	01a2d874 	movhi	r6,35681
    8d5c:	01cff1f4 	movhi	r7,16327
    8d60:	31b22cc4 	addi	r6,r6,-14157
    8d64:	39e28a04 	addi	r7,r7,-30168
    8d68:	180b883a 	mov	r5,r3
    8d6c:	1009883a 	mov	r4,r2
    8d70:	0002f6c0 	call	2f6c <__adddf3>
    8d74:	8009883a 	mov	r4,r16
    8d78:	1029883a 	mov	r20,r2
    8d7c:	1823883a 	mov	r17,r3
    8d80:	00056280 	call	5628 <__floatsidf>
    8d84:	019427f4 	movhi	r6,20639
    8d88:	01cff4f4 	movhi	r7,16339
    8d8c:	319e7ec4 	addi	r6,r6,31227
    8d90:	39d104c4 	addi	r7,r7,17427
    8d94:	1009883a 	mov	r4,r2
    8d98:	180b883a 	mov	r5,r3
    8d9c:	00044400 	call	4440 <__muldf3>
    8da0:	100d883a 	mov	r6,r2
    8da4:	180f883a 	mov	r7,r3
    8da8:	a009883a 	mov	r4,r20
    8dac:	880b883a 	mov	r5,r17
    8db0:	0002f6c0 	call	2f6c <__adddf3>
    8db4:	1009883a 	mov	r4,r2
    8db8:	180b883a 	mov	r5,r3
    8dbc:	1029883a 	mov	r20,r2
    8dc0:	1823883a 	mov	r17,r3
    8dc4:	00055a80 	call	55a8 <__fixdfsi>
    8dc8:	000d883a 	mov	r6,zero
    8dcc:	000f883a 	mov	r7,zero
    8dd0:	a009883a 	mov	r4,r20
    8dd4:	880b883a 	mov	r5,r17
    8dd8:	d8800515 	stw	r2,20(sp)
    8ddc:	000434c0 	call	434c <__ledf2>
    8de0:	10028716 	blt	r2,zero,9800 <_dtoa_r+0xc88>
    8de4:	d8c00517 	ldw	r3,20(sp)
    8de8:	00800584 	movi	r2,22
    8dec:	10c27536 	bltu	r2,r3,97c4 <_dtoa_r+0xc4c>
    8df0:	180490fa 	slli	r2,r3,3
    8df4:	00c000b4 	movhi	r3,2
    8df8:	18f6bd04 	addi	r3,r3,-9484
    8dfc:	1885883a 	add	r2,r3,r2
    8e00:	11000017 	ldw	r4,0(r2)
    8e04:	11400117 	ldw	r5,4(r2)
    8e08:	900d883a 	mov	r6,r18
    8e0c:	980f883a 	mov	r7,r19
    8e10:	00042700 	call	4270 <__gedf2>
    8e14:	00828d0e 	bge	zero,r2,984c <_dtoa_r+0xcd4>
    8e18:	d9000517 	ldw	r4,20(sp)
    8e1c:	d8000e15 	stw	zero,56(sp)
    8e20:	213fffc4 	addi	r4,r4,-1
    8e24:	d9000515 	stw	r4,20(sp)
    8e28:	b42dc83a 	sub	r22,r22,r16
    8e2c:	b5bfffc4 	addi	r22,r22,-1
    8e30:	b0026f16 	blt	r22,zero,97f0 <_dtoa_r+0xc78>
    8e34:	d8000815 	stw	zero,32(sp)
    8e38:	d9c00517 	ldw	r7,20(sp)
    8e3c:	38026416 	blt	r7,zero,97d0 <_dtoa_r+0xc58>
    8e40:	b1ed883a 	add	r22,r22,r7
    8e44:	d9c00d15 	stw	r7,52(sp)
    8e48:	d8000a15 	stw	zero,40(sp)
    8e4c:	d9800317 	ldw	r6,12(sp)
    8e50:	00800244 	movi	r2,9
    8e54:	11811436 	bltu	r2,r6,92a8 <_dtoa_r+0x730>
    8e58:	00800144 	movi	r2,5
    8e5c:	1184e10e 	bge	r2,r6,a1e4 <_dtoa_r+0x166c>
    8e60:	31bfff04 	addi	r6,r6,-4
    8e64:	d9800315 	stw	r6,12(sp)
    8e68:	0023883a 	mov	r17,zero
    8e6c:	d9800317 	ldw	r6,12(sp)
    8e70:	008000c4 	movi	r2,3
    8e74:	30836726 	beq	r6,r2,9c14 <_dtoa_r+0x109c>
    8e78:	1183410e 	bge	r2,r6,9b80 <_dtoa_r+0x1008>
    8e7c:	d9c00317 	ldw	r7,12(sp)
    8e80:	00800104 	movi	r2,4
    8e84:	38827c26 	beq	r7,r2,9878 <_dtoa_r+0xd00>
    8e88:	00800144 	movi	r2,5
    8e8c:	3884c41e 	bne	r7,r2,a1a0 <_dtoa_r+0x1628>
    8e90:	00800044 	movi	r2,1
    8e94:	d8800b15 	stw	r2,44(sp)
    8e98:	d8c00517 	ldw	r3,20(sp)
    8e9c:	d9002217 	ldw	r4,136(sp)
    8ea0:	1907883a 	add	r3,r3,r4
    8ea4:	19800044 	addi	r6,r3,1
    8ea8:	d8c00c15 	stw	r3,48(sp)
    8eac:	d9800615 	stw	r6,24(sp)
    8eb0:	0183a40e 	bge	zero,r6,9d44 <_dtoa_r+0x11cc>
    8eb4:	d9800617 	ldw	r6,24(sp)
    8eb8:	3021883a 	mov	r16,r6
    8ebc:	e0001115 	stw	zero,68(fp)
    8ec0:	008005c4 	movi	r2,23
    8ec4:	1184c92e 	bgeu	r2,r6,a1ec <_dtoa_r+0x1674>
    8ec8:	00c00044 	movi	r3,1
    8ecc:	00800104 	movi	r2,4
    8ed0:	1085883a 	add	r2,r2,r2
    8ed4:	11000504 	addi	r4,r2,20
    8ed8:	180b883a 	mov	r5,r3
    8edc:	18c00044 	addi	r3,r3,1
    8ee0:	313ffb2e 	bgeu	r6,r4,8ed0 <__alt_data_end+0xfffd8190>
    8ee4:	e1401115 	stw	r5,68(fp)
    8ee8:	e009883a 	mov	r4,fp
    8eec:	000b7b40 	call	b7b4 <_Balloc>
    8ef0:	d8800715 	stw	r2,28(sp)
    8ef4:	e0801015 	stw	r2,64(fp)
    8ef8:	00800384 	movi	r2,14
    8efc:	1400f736 	bltu	r2,r16,92dc <_dtoa_r+0x764>
    8f00:	8800f626 	beq	r17,zero,92dc <_dtoa_r+0x764>
    8f04:	d9c00517 	ldw	r7,20(sp)
    8f08:	01c39a0e 	bge	zero,r7,9d74 <_dtoa_r+0x11fc>
    8f0c:	388003cc 	andi	r2,r7,15
    8f10:	100490fa 	slli	r2,r2,3
    8f14:	382bd13a 	srai	r21,r7,4
    8f18:	00c000b4 	movhi	r3,2
    8f1c:	18f6bd04 	addi	r3,r3,-9484
    8f20:	1885883a 	add	r2,r3,r2
    8f24:	a8c0040c 	andi	r3,r21,16
    8f28:	12400017 	ldw	r9,0(r2)
    8f2c:	12000117 	ldw	r8,4(r2)
    8f30:	18037926 	beq	r3,zero,9d18 <_dtoa_r+0x11a0>
    8f34:	008000b4 	movhi	r2,2
    8f38:	10b6b304 	addi	r2,r2,-9524
    8f3c:	11800817 	ldw	r6,32(r2)
    8f40:	11c00917 	ldw	r7,36(r2)
    8f44:	9009883a 	mov	r4,r18
    8f48:	980b883a 	mov	r5,r19
    8f4c:	da001715 	stw	r8,92(sp)
    8f50:	da401615 	stw	r9,88(sp)
    8f54:	00038180 	call	3818 <__divdf3>
    8f58:	da001717 	ldw	r8,92(sp)
    8f5c:	da401617 	ldw	r9,88(sp)
    8f60:	ad4003cc 	andi	r21,r21,15
    8f64:	040000c4 	movi	r16,3
    8f68:	1023883a 	mov	r17,r2
    8f6c:	1829883a 	mov	r20,r3
    8f70:	a8001126 	beq	r21,zero,8fb8 <_dtoa_r+0x440>
    8f74:	05c000b4 	movhi	r23,2
    8f78:	bdf6b304 	addi	r23,r23,-9524
    8f7c:	4805883a 	mov	r2,r9
    8f80:	4007883a 	mov	r3,r8
    8f84:	a980004c 	andi	r6,r21,1
    8f88:	1009883a 	mov	r4,r2
    8f8c:	a82bd07a 	srai	r21,r21,1
    8f90:	180b883a 	mov	r5,r3
    8f94:	30000426 	beq	r6,zero,8fa8 <_dtoa_r+0x430>
    8f98:	b9800017 	ldw	r6,0(r23)
    8f9c:	b9c00117 	ldw	r7,4(r23)
    8fa0:	84000044 	addi	r16,r16,1
    8fa4:	00044400 	call	4440 <__muldf3>
    8fa8:	bdc00204 	addi	r23,r23,8
    8fac:	a83ff51e 	bne	r21,zero,8f84 <__alt_data_end+0xfffd8244>
    8fb0:	1013883a 	mov	r9,r2
    8fb4:	1811883a 	mov	r8,r3
    8fb8:	480d883a 	mov	r6,r9
    8fbc:	400f883a 	mov	r7,r8
    8fc0:	8809883a 	mov	r4,r17
    8fc4:	a00b883a 	mov	r5,r20
    8fc8:	00038180 	call	3818 <__divdf3>
    8fcc:	d8800f15 	stw	r2,60(sp)
    8fd0:	d8c01015 	stw	r3,64(sp)
    8fd4:	d8c00e17 	ldw	r3,56(sp)
    8fd8:	18000626 	beq	r3,zero,8ff4 <_dtoa_r+0x47c>
    8fdc:	d9000f17 	ldw	r4,60(sp)
    8fe0:	d9401017 	ldw	r5,64(sp)
    8fe4:	000d883a 	mov	r6,zero
    8fe8:	01cffc34 	movhi	r7,16368
    8fec:	000434c0 	call	434c <__ledf2>
    8ff0:	10040b16 	blt	r2,zero,a020 <_dtoa_r+0x14a8>
    8ff4:	8009883a 	mov	r4,r16
    8ff8:	00056280 	call	5628 <__floatsidf>
    8ffc:	d9800f17 	ldw	r6,60(sp)
    9000:	d9c01017 	ldw	r7,64(sp)
    9004:	1009883a 	mov	r4,r2
    9008:	180b883a 	mov	r5,r3
    900c:	00044400 	call	4440 <__muldf3>
    9010:	000d883a 	mov	r6,zero
    9014:	01d00734 	movhi	r7,16412
    9018:	1009883a 	mov	r4,r2
    901c:	180b883a 	mov	r5,r3
    9020:	0002f6c0 	call	2f6c <__adddf3>
    9024:	1021883a 	mov	r16,r2
    9028:	d8800617 	ldw	r2,24(sp)
    902c:	047f3034 	movhi	r17,64704
    9030:	1c63883a 	add	r17,r3,r17
    9034:	10031826 	beq	r2,zero,9c98 <_dtoa_r+0x1120>
    9038:	d8c00517 	ldw	r3,20(sp)
    903c:	db000617 	ldw	r12,24(sp)
    9040:	d8c01315 	stw	r3,76(sp)
    9044:	d9000b17 	ldw	r4,44(sp)
    9048:	20038f26 	beq	r4,zero,9e88 <_dtoa_r+0x1310>
    904c:	60bfffc4 	addi	r2,r12,-1
    9050:	100490fa 	slli	r2,r2,3
    9054:	00c000b4 	movhi	r3,2
    9058:	18f6bd04 	addi	r3,r3,-9484
    905c:	1885883a 	add	r2,r3,r2
    9060:	11800017 	ldw	r6,0(r2)
    9064:	11c00117 	ldw	r7,4(r2)
    9068:	d8800717 	ldw	r2,28(sp)
    906c:	0009883a 	mov	r4,zero
    9070:	014ff834 	movhi	r5,16352
    9074:	db001615 	stw	r12,88(sp)
    9078:	15c00044 	addi	r23,r2,1
    907c:	00038180 	call	3818 <__divdf3>
    9080:	800d883a 	mov	r6,r16
    9084:	880f883a 	mov	r7,r17
    9088:	1009883a 	mov	r4,r2
    908c:	180b883a 	mov	r5,r3
    9090:	0004cac0 	call	4cac <__subdf3>
    9094:	d9401017 	ldw	r5,64(sp)
    9098:	d9000f17 	ldw	r4,60(sp)
    909c:	102b883a 	mov	r21,r2
    90a0:	d8c01215 	stw	r3,72(sp)
    90a4:	00055a80 	call	55a8 <__fixdfsi>
    90a8:	1009883a 	mov	r4,r2
    90ac:	1029883a 	mov	r20,r2
    90b0:	00056280 	call	5628 <__floatsidf>
    90b4:	d9000f17 	ldw	r4,60(sp)
    90b8:	d9401017 	ldw	r5,64(sp)
    90bc:	100d883a 	mov	r6,r2
    90c0:	180f883a 	mov	r7,r3
    90c4:	0004cac0 	call	4cac <__subdf3>
    90c8:	1823883a 	mov	r17,r3
    90cc:	d8c00717 	ldw	r3,28(sp)
    90d0:	d9401217 	ldw	r5,72(sp)
    90d4:	a2000c04 	addi	r8,r20,48
    90d8:	1021883a 	mov	r16,r2
    90dc:	1a000005 	stb	r8,0(r3)
    90e0:	800d883a 	mov	r6,r16
    90e4:	880f883a 	mov	r7,r17
    90e8:	a809883a 	mov	r4,r21
    90ec:	4029883a 	mov	r20,r8
    90f0:	00042700 	call	4270 <__gedf2>
    90f4:	00841d16 	blt	zero,r2,a16c <_dtoa_r+0x15f4>
    90f8:	800d883a 	mov	r6,r16
    90fc:	880f883a 	mov	r7,r17
    9100:	0009883a 	mov	r4,zero
    9104:	014ffc34 	movhi	r5,16368
    9108:	0004cac0 	call	4cac <__subdf3>
    910c:	d9401217 	ldw	r5,72(sp)
    9110:	100d883a 	mov	r6,r2
    9114:	180f883a 	mov	r7,r3
    9118:	a809883a 	mov	r4,r21
    911c:	00042700 	call	4270 <__gedf2>
    9120:	db001617 	ldw	r12,88(sp)
    9124:	00840e16 	blt	zero,r2,a160 <_dtoa_r+0x15e8>
    9128:	00800044 	movi	r2,1
    912c:	13006b0e 	bge	r2,r12,92dc <_dtoa_r+0x764>
    9130:	d9000717 	ldw	r4,28(sp)
    9134:	dd800f15 	stw	r22,60(sp)
    9138:	dcc01015 	stw	r19,64(sp)
    913c:	2319883a 	add	r12,r4,r12
    9140:	dcc01217 	ldw	r19,72(sp)
    9144:	602d883a 	mov	r22,r12
    9148:	dc801215 	stw	r18,72(sp)
    914c:	b825883a 	mov	r18,r23
    9150:	00000906 	br	9178 <_dtoa_r+0x600>
    9154:	0004cac0 	call	4cac <__subdf3>
    9158:	a80d883a 	mov	r6,r21
    915c:	980f883a 	mov	r7,r19
    9160:	1009883a 	mov	r4,r2
    9164:	180b883a 	mov	r5,r3
    9168:	000434c0 	call	434c <__ledf2>
    916c:	1003e816 	blt	r2,zero,a110 <_dtoa_r+0x1598>
    9170:	b825883a 	mov	r18,r23
    9174:	bd83e926 	beq	r23,r22,a11c <_dtoa_r+0x15a4>
    9178:	a809883a 	mov	r4,r21
    917c:	980b883a 	mov	r5,r19
    9180:	000d883a 	mov	r6,zero
    9184:	01d00934 	movhi	r7,16420
    9188:	00044400 	call	4440 <__muldf3>
    918c:	000d883a 	mov	r6,zero
    9190:	01d00934 	movhi	r7,16420
    9194:	8009883a 	mov	r4,r16
    9198:	880b883a 	mov	r5,r17
    919c:	102b883a 	mov	r21,r2
    91a0:	1827883a 	mov	r19,r3
    91a4:	00044400 	call	4440 <__muldf3>
    91a8:	180b883a 	mov	r5,r3
    91ac:	1009883a 	mov	r4,r2
    91b0:	1821883a 	mov	r16,r3
    91b4:	1023883a 	mov	r17,r2
    91b8:	00055a80 	call	55a8 <__fixdfsi>
    91bc:	1009883a 	mov	r4,r2
    91c0:	1029883a 	mov	r20,r2
    91c4:	00056280 	call	5628 <__floatsidf>
    91c8:	8809883a 	mov	r4,r17
    91cc:	800b883a 	mov	r5,r16
    91d0:	100d883a 	mov	r6,r2
    91d4:	180f883a 	mov	r7,r3
    91d8:	0004cac0 	call	4cac <__subdf3>
    91dc:	a5000c04 	addi	r20,r20,48
    91e0:	a80d883a 	mov	r6,r21
    91e4:	980f883a 	mov	r7,r19
    91e8:	1009883a 	mov	r4,r2
    91ec:	180b883a 	mov	r5,r3
    91f0:	95000005 	stb	r20,0(r18)
    91f4:	1021883a 	mov	r16,r2
    91f8:	1823883a 	mov	r17,r3
    91fc:	000434c0 	call	434c <__ledf2>
    9200:	bdc00044 	addi	r23,r23,1
    9204:	800d883a 	mov	r6,r16
    9208:	880f883a 	mov	r7,r17
    920c:	0009883a 	mov	r4,zero
    9210:	014ffc34 	movhi	r5,16368
    9214:	103fcf0e 	bge	r2,zero,9154 <__alt_data_end+0xfffd8414>
    9218:	d8c01317 	ldw	r3,76(sp)
    921c:	d8c00515 	stw	r3,20(sp)
    9220:	d9400917 	ldw	r5,36(sp)
    9224:	e009883a 	mov	r4,fp
    9228:	000b85c0 	call	b85c <_Bfree>
    922c:	d9000517 	ldw	r4,20(sp)
    9230:	d9802317 	ldw	r6,140(sp)
    9234:	d9c02517 	ldw	r7,148(sp)
    9238:	b8000005 	stb	zero,0(r23)
    923c:	20800044 	addi	r2,r4,1
    9240:	30800015 	stw	r2,0(r6)
    9244:	3802aa26 	beq	r7,zero,9cf0 <_dtoa_r+0x1178>
    9248:	3dc00015 	stw	r23,0(r7)
    924c:	d8800717 	ldw	r2,28(sp)
    9250:	003e7906 	br	8c38 <__alt_data_end+0xfffd7ef8>
    9254:	00800434 	movhi	r2,16
    9258:	10bfffc4 	addi	r2,r2,-1
    925c:	88a2703a 	and	r17,r17,r2
    9260:	883e851e 	bne	r17,zero,8c78 <__alt_data_end+0xfffd7f38>
    9264:	008000b4 	movhi	r2,2
    9268:	10b69f04 	addi	r2,r2,-9604
    926c:	003e8406 	br	8c80 <__alt_data_end+0xfffd7f40>
    9270:	10c00204 	addi	r3,r2,8
    9274:	003e8706 	br	8c94 <__alt_data_end+0xfffd7f54>
    9278:	01400434 	movhi	r5,16
    927c:	297fffc4 	addi	r5,r5,-1
    9280:	994a703a 	and	r5,r19,r5
    9284:	9009883a 	mov	r4,r18
    9288:	843f0044 	addi	r16,r16,-1023
    928c:	294ffc34 	orhi	r5,r5,16368
    9290:	dd800217 	ldw	r22,8(sp)
    9294:	d8001115 	stw	zero,68(sp)
    9298:	003ea506 	br	8d30 <__alt_data_end+0xfffd7ff0>
    929c:	008000b4 	movhi	r2,2
    92a0:	10b69604 	addi	r2,r2,-9640
    92a4:	003e6406 	br	8c38 <__alt_data_end+0xfffd7ef8>
    92a8:	e0001115 	stw	zero,68(fp)
    92ac:	000b883a 	mov	r5,zero
    92b0:	e009883a 	mov	r4,fp
    92b4:	000b7b40 	call	b7b4 <_Balloc>
    92b8:	01bfffc4 	movi	r6,-1
    92bc:	01c00044 	movi	r7,1
    92c0:	d8800715 	stw	r2,28(sp)
    92c4:	d9800c15 	stw	r6,48(sp)
    92c8:	e0801015 	stw	r2,64(fp)
    92cc:	d8000315 	stw	zero,12(sp)
    92d0:	d9c00b15 	stw	r7,44(sp)
    92d4:	d9800615 	stw	r6,24(sp)
    92d8:	d8002215 	stw	zero,136(sp)
    92dc:	d8800117 	ldw	r2,4(sp)
    92e0:	10008916 	blt	r2,zero,9508 <_dtoa_r+0x990>
    92e4:	d9000517 	ldw	r4,20(sp)
    92e8:	00c00384 	movi	r3,14
    92ec:	19008616 	blt	r3,r4,9508 <_dtoa_r+0x990>
    92f0:	200490fa 	slli	r2,r4,3
    92f4:	00c000b4 	movhi	r3,2
    92f8:	d9802217 	ldw	r6,136(sp)
    92fc:	18f6bd04 	addi	r3,r3,-9484
    9300:	1885883a 	add	r2,r3,r2
    9304:	14000017 	ldw	r16,0(r2)
    9308:	14400117 	ldw	r17,4(r2)
    930c:	30016316 	blt	r6,zero,989c <_dtoa_r+0xd24>
    9310:	800d883a 	mov	r6,r16
    9314:	880f883a 	mov	r7,r17
    9318:	9009883a 	mov	r4,r18
    931c:	980b883a 	mov	r5,r19
    9320:	00038180 	call	3818 <__divdf3>
    9324:	180b883a 	mov	r5,r3
    9328:	1009883a 	mov	r4,r2
    932c:	00055a80 	call	55a8 <__fixdfsi>
    9330:	1009883a 	mov	r4,r2
    9334:	102b883a 	mov	r21,r2
    9338:	00056280 	call	5628 <__floatsidf>
    933c:	800d883a 	mov	r6,r16
    9340:	880f883a 	mov	r7,r17
    9344:	1009883a 	mov	r4,r2
    9348:	180b883a 	mov	r5,r3
    934c:	00044400 	call	4440 <__muldf3>
    9350:	100d883a 	mov	r6,r2
    9354:	180f883a 	mov	r7,r3
    9358:	9009883a 	mov	r4,r18
    935c:	980b883a 	mov	r5,r19
    9360:	0004cac0 	call	4cac <__subdf3>
    9364:	d9c00717 	ldw	r7,28(sp)
    9368:	1009883a 	mov	r4,r2
    936c:	a8800c04 	addi	r2,r21,48
    9370:	38800005 	stb	r2,0(r7)
    9374:	3dc00044 	addi	r23,r7,1
    9378:	d9c00617 	ldw	r7,24(sp)
    937c:	01800044 	movi	r6,1
    9380:	180b883a 	mov	r5,r3
    9384:	2005883a 	mov	r2,r4
    9388:	39803826 	beq	r7,r6,946c <_dtoa_r+0x8f4>
    938c:	000d883a 	mov	r6,zero
    9390:	01d00934 	movhi	r7,16420
    9394:	00044400 	call	4440 <__muldf3>
    9398:	000d883a 	mov	r6,zero
    939c:	000f883a 	mov	r7,zero
    93a0:	1009883a 	mov	r4,r2
    93a4:	180b883a 	mov	r5,r3
    93a8:	1025883a 	mov	r18,r2
    93ac:	1827883a 	mov	r19,r3
    93b0:	00041e80 	call	41e8 <__eqdf2>
    93b4:	103f9a26 	beq	r2,zero,9220 <__alt_data_end+0xfffd84e0>
    93b8:	d9c00617 	ldw	r7,24(sp)
    93bc:	d8c00717 	ldw	r3,28(sp)
    93c0:	b829883a 	mov	r20,r23
    93c4:	38bfffc4 	addi	r2,r7,-1
    93c8:	18ad883a 	add	r22,r3,r2
    93cc:	00000a06 	br	93f8 <_dtoa_r+0x880>
    93d0:	00044400 	call	4440 <__muldf3>
    93d4:	000d883a 	mov	r6,zero
    93d8:	000f883a 	mov	r7,zero
    93dc:	1009883a 	mov	r4,r2
    93e0:	180b883a 	mov	r5,r3
    93e4:	1025883a 	mov	r18,r2
    93e8:	1827883a 	mov	r19,r3
    93ec:	b829883a 	mov	r20,r23
    93f0:	00041e80 	call	41e8 <__eqdf2>
    93f4:	103f8a26 	beq	r2,zero,9220 <__alt_data_end+0xfffd84e0>
    93f8:	800d883a 	mov	r6,r16
    93fc:	880f883a 	mov	r7,r17
    9400:	9009883a 	mov	r4,r18
    9404:	980b883a 	mov	r5,r19
    9408:	00038180 	call	3818 <__divdf3>
    940c:	180b883a 	mov	r5,r3
    9410:	1009883a 	mov	r4,r2
    9414:	00055a80 	call	55a8 <__fixdfsi>
    9418:	1009883a 	mov	r4,r2
    941c:	102b883a 	mov	r21,r2
    9420:	00056280 	call	5628 <__floatsidf>
    9424:	800d883a 	mov	r6,r16
    9428:	880f883a 	mov	r7,r17
    942c:	1009883a 	mov	r4,r2
    9430:	180b883a 	mov	r5,r3
    9434:	00044400 	call	4440 <__muldf3>
    9438:	100d883a 	mov	r6,r2
    943c:	180f883a 	mov	r7,r3
    9440:	9009883a 	mov	r4,r18
    9444:	980b883a 	mov	r5,r19
    9448:	0004cac0 	call	4cac <__subdf3>
    944c:	aa000c04 	addi	r8,r21,48
    9450:	a2000005 	stb	r8,0(r20)
    9454:	000d883a 	mov	r6,zero
    9458:	01d00934 	movhi	r7,16420
    945c:	1009883a 	mov	r4,r2
    9460:	180b883a 	mov	r5,r3
    9464:	a5c00044 	addi	r23,r20,1
    9468:	b53fd91e 	bne	r22,r20,93d0 <__alt_data_end+0xfffd8690>
    946c:	100d883a 	mov	r6,r2
    9470:	180f883a 	mov	r7,r3
    9474:	1009883a 	mov	r4,r2
    9478:	180b883a 	mov	r5,r3
    947c:	0002f6c0 	call	2f6c <__adddf3>
    9480:	100d883a 	mov	r6,r2
    9484:	180f883a 	mov	r7,r3
    9488:	8009883a 	mov	r4,r16
    948c:	880b883a 	mov	r5,r17
    9490:	1027883a 	mov	r19,r2
    9494:	1825883a 	mov	r18,r3
    9498:	000434c0 	call	434c <__ledf2>
    949c:	10000816 	blt	r2,zero,94c0 <_dtoa_r+0x948>
    94a0:	980d883a 	mov	r6,r19
    94a4:	900f883a 	mov	r7,r18
    94a8:	8009883a 	mov	r4,r16
    94ac:	880b883a 	mov	r5,r17
    94b0:	00041e80 	call	41e8 <__eqdf2>
    94b4:	103f5a1e 	bne	r2,zero,9220 <__alt_data_end+0xfffd84e0>
    94b8:	ad40004c 	andi	r21,r21,1
    94bc:	a83f5826 	beq	r21,zero,9220 <__alt_data_end+0xfffd84e0>
    94c0:	bd3fffc3 	ldbu	r20,-1(r23)
    94c4:	b8bfffc4 	addi	r2,r23,-1
    94c8:	1007883a 	mov	r3,r2
    94cc:	01400e44 	movi	r5,57
    94d0:	d9800717 	ldw	r6,28(sp)
    94d4:	00000506 	br	94ec <_dtoa_r+0x974>
    94d8:	18ffffc4 	addi	r3,r3,-1
    94dc:	11824726 	beq	r2,r6,9dfc <_dtoa_r+0x1284>
    94e0:	1d000003 	ldbu	r20,0(r3)
    94e4:	102f883a 	mov	r23,r2
    94e8:	10bfffc4 	addi	r2,r2,-1
    94ec:	a1003fcc 	andi	r4,r20,255
    94f0:	2100201c 	xori	r4,r4,128
    94f4:	213fe004 	addi	r4,r4,-128
    94f8:	217ff726 	beq	r4,r5,94d8 <__alt_data_end+0xfffd8798>
    94fc:	a2000044 	addi	r8,r20,1
    9500:	12000005 	stb	r8,0(r2)
    9504:	003f4606 	br	9220 <__alt_data_end+0xfffd84e0>
    9508:	d9000b17 	ldw	r4,44(sp)
    950c:	2000c826 	beq	r4,zero,9830 <_dtoa_r+0xcb8>
    9510:	d9800317 	ldw	r6,12(sp)
    9514:	00c00044 	movi	r3,1
    9518:	1980f90e 	bge	r3,r6,9900 <_dtoa_r+0xd88>
    951c:	d8800617 	ldw	r2,24(sp)
    9520:	d8c00a17 	ldw	r3,40(sp)
    9524:	157fffc4 	addi	r21,r2,-1
    9528:	1d41f316 	blt	r3,r21,9cf8 <_dtoa_r+0x1180>
    952c:	1d6bc83a 	sub	r21,r3,r21
    9530:	d9c00617 	ldw	r7,24(sp)
    9534:	3802aa16 	blt	r7,zero,9fe0 <_dtoa_r+0x1468>
    9538:	dd000817 	ldw	r20,32(sp)
    953c:	d8800617 	ldw	r2,24(sp)
    9540:	d8c00817 	ldw	r3,32(sp)
    9544:	01400044 	movi	r5,1
    9548:	e009883a 	mov	r4,fp
    954c:	1887883a 	add	r3,r3,r2
    9550:	d8c00815 	stw	r3,32(sp)
    9554:	b0ad883a 	add	r22,r22,r2
    9558:	000bbe80 	call	bbe8 <__i2b>
    955c:	1023883a 	mov	r17,r2
    9560:	a0000826 	beq	r20,zero,9584 <_dtoa_r+0xa0c>
    9564:	0580070e 	bge	zero,r22,9584 <_dtoa_r+0xa0c>
    9568:	a005883a 	mov	r2,r20
    956c:	b500b916 	blt	r22,r20,9854 <_dtoa_r+0xcdc>
    9570:	d9000817 	ldw	r4,32(sp)
    9574:	a0a9c83a 	sub	r20,r20,r2
    9578:	b0adc83a 	sub	r22,r22,r2
    957c:	2089c83a 	sub	r4,r4,r2
    9580:	d9000815 	stw	r4,32(sp)
    9584:	d9800a17 	ldw	r6,40(sp)
    9588:	0181810e 	bge	zero,r6,9b90 <_dtoa_r+0x1018>
    958c:	d9c00b17 	ldw	r7,44(sp)
    9590:	3800b326 	beq	r7,zero,9860 <_dtoa_r+0xce8>
    9594:	a800b226 	beq	r21,zero,9860 <_dtoa_r+0xce8>
    9598:	880b883a 	mov	r5,r17
    959c:	a80d883a 	mov	r6,r21
    95a0:	e009883a 	mov	r4,fp
    95a4:	000beb00 	call	beb0 <__pow5mult>
    95a8:	d9800917 	ldw	r6,36(sp)
    95ac:	100b883a 	mov	r5,r2
    95b0:	e009883a 	mov	r4,fp
    95b4:	1023883a 	mov	r17,r2
    95b8:	000bc240 	call	bc24 <__multiply>
    95bc:	1021883a 	mov	r16,r2
    95c0:	d8800a17 	ldw	r2,40(sp)
    95c4:	d9400917 	ldw	r5,36(sp)
    95c8:	e009883a 	mov	r4,fp
    95cc:	1545c83a 	sub	r2,r2,r21
    95d0:	d8800a15 	stw	r2,40(sp)
    95d4:	000b85c0 	call	b85c <_Bfree>
    95d8:	d8c00a17 	ldw	r3,40(sp)
    95dc:	18009f1e 	bne	r3,zero,985c <_dtoa_r+0xce4>
    95e0:	05c00044 	movi	r23,1
    95e4:	e009883a 	mov	r4,fp
    95e8:	b80b883a 	mov	r5,r23
    95ec:	000bbe80 	call	bbe8 <__i2b>
    95f0:	d9000d17 	ldw	r4,52(sp)
    95f4:	102b883a 	mov	r21,r2
    95f8:	2000ce26 	beq	r4,zero,9934 <_dtoa_r+0xdbc>
    95fc:	200d883a 	mov	r6,r4
    9600:	100b883a 	mov	r5,r2
    9604:	e009883a 	mov	r4,fp
    9608:	000beb00 	call	beb0 <__pow5mult>
    960c:	d9800317 	ldw	r6,12(sp)
    9610:	102b883a 	mov	r21,r2
    9614:	b981810e 	bge	r23,r6,9c1c <_dtoa_r+0x10a4>
    9618:	0027883a 	mov	r19,zero
    961c:	a8800417 	ldw	r2,16(r21)
    9620:	05c00804 	movi	r23,32
    9624:	10800104 	addi	r2,r2,4
    9628:	1085883a 	add	r2,r2,r2
    962c:	1085883a 	add	r2,r2,r2
    9630:	a885883a 	add	r2,r21,r2
    9634:	11000017 	ldw	r4,0(r2)
    9638:	000bad00 	call	bad0 <__hi0bits>
    963c:	b885c83a 	sub	r2,r23,r2
    9640:	1585883a 	add	r2,r2,r22
    9644:	108007cc 	andi	r2,r2,31
    9648:	1000b326 	beq	r2,zero,9918 <_dtoa_r+0xda0>
    964c:	00c00804 	movi	r3,32
    9650:	1887c83a 	sub	r3,r3,r2
    9654:	01000104 	movi	r4,4
    9658:	20c2cd0e 	bge	r4,r3,a190 <_dtoa_r+0x1618>
    965c:	00c00704 	movi	r3,28
    9660:	1885c83a 	sub	r2,r3,r2
    9664:	d8c00817 	ldw	r3,32(sp)
    9668:	a0a9883a 	add	r20,r20,r2
    966c:	b0ad883a 	add	r22,r22,r2
    9670:	1887883a 	add	r3,r3,r2
    9674:	d8c00815 	stw	r3,32(sp)
    9678:	d9800817 	ldw	r6,32(sp)
    967c:	0180040e 	bge	zero,r6,9690 <_dtoa_r+0xb18>
    9680:	800b883a 	mov	r5,r16
    9684:	e009883a 	mov	r4,fp
    9688:	000bff00 	call	bff0 <__lshift>
    968c:	1021883a 	mov	r16,r2
    9690:	0580050e 	bge	zero,r22,96a8 <_dtoa_r+0xb30>
    9694:	a80b883a 	mov	r5,r21
    9698:	b00d883a 	mov	r6,r22
    969c:	e009883a 	mov	r4,fp
    96a0:	000bff00 	call	bff0 <__lshift>
    96a4:	102b883a 	mov	r21,r2
    96a8:	d9c00e17 	ldw	r7,56(sp)
    96ac:	3801211e 	bne	r7,zero,9b34 <_dtoa_r+0xfbc>
    96b0:	d9800617 	ldw	r6,24(sp)
    96b4:	0181380e 	bge	zero,r6,9b98 <_dtoa_r+0x1020>
    96b8:	d8c00b17 	ldw	r3,44(sp)
    96bc:	1800ab1e 	bne	r3,zero,996c <_dtoa_r+0xdf4>
    96c0:	dc800717 	ldw	r18,28(sp)
    96c4:	dcc00617 	ldw	r19,24(sp)
    96c8:	9029883a 	mov	r20,r18
    96cc:	00000206 	br	96d8 <_dtoa_r+0xb60>
    96d0:	000b8840 	call	b884 <__multadd>
    96d4:	1021883a 	mov	r16,r2
    96d8:	a80b883a 	mov	r5,r21
    96dc:	8009883a 	mov	r4,r16
    96e0:	00089500 	call	8950 <quorem>
    96e4:	10800c04 	addi	r2,r2,48
    96e8:	90800005 	stb	r2,0(r18)
    96ec:	94800044 	addi	r18,r18,1
    96f0:	9507c83a 	sub	r3,r18,r20
    96f4:	000f883a 	mov	r7,zero
    96f8:	01800284 	movi	r6,10
    96fc:	800b883a 	mov	r5,r16
    9700:	e009883a 	mov	r4,fp
    9704:	1cfff216 	blt	r3,r19,96d0 <__alt_data_end+0xfffd8990>
    9708:	1011883a 	mov	r8,r2
    970c:	d8800617 	ldw	r2,24(sp)
    9710:	0082370e 	bge	zero,r2,9ff0 <_dtoa_r+0x1478>
    9714:	d9000717 	ldw	r4,28(sp)
    9718:	0025883a 	mov	r18,zero
    971c:	20af883a 	add	r23,r4,r2
    9720:	01800044 	movi	r6,1
    9724:	800b883a 	mov	r5,r16
    9728:	e009883a 	mov	r4,fp
    972c:	da001715 	stw	r8,92(sp)
    9730:	000bff00 	call	bff0 <__lshift>
    9734:	a80b883a 	mov	r5,r21
    9738:	1009883a 	mov	r4,r2
    973c:	d8800915 	stw	r2,36(sp)
    9740:	000c1380 	call	c138 <__mcmp>
    9744:	da001717 	ldw	r8,92(sp)
    9748:	0081800e 	bge	zero,r2,9d4c <_dtoa_r+0x11d4>
    974c:	b93fffc3 	ldbu	r4,-1(r23)
    9750:	b8bfffc4 	addi	r2,r23,-1
    9754:	1007883a 	mov	r3,r2
    9758:	01800e44 	movi	r6,57
    975c:	d9c00717 	ldw	r7,28(sp)
    9760:	00000506 	br	9778 <_dtoa_r+0xc00>
    9764:	18ffffc4 	addi	r3,r3,-1
    9768:	11c12326 	beq	r2,r7,9bf8 <_dtoa_r+0x1080>
    976c:	19000003 	ldbu	r4,0(r3)
    9770:	102f883a 	mov	r23,r2
    9774:	10bfffc4 	addi	r2,r2,-1
    9778:	21403fcc 	andi	r5,r4,255
    977c:	2940201c 	xori	r5,r5,128
    9780:	297fe004 	addi	r5,r5,-128
    9784:	29bff726 	beq	r5,r6,9764 <__alt_data_end+0xfffd8a24>
    9788:	21000044 	addi	r4,r4,1
    978c:	11000005 	stb	r4,0(r2)
    9790:	a80b883a 	mov	r5,r21
    9794:	e009883a 	mov	r4,fp
    9798:	000b85c0 	call	b85c <_Bfree>
    979c:	883ea026 	beq	r17,zero,9220 <__alt_data_end+0xfffd84e0>
    97a0:	90000426 	beq	r18,zero,97b4 <_dtoa_r+0xc3c>
    97a4:	94400326 	beq	r18,r17,97b4 <_dtoa_r+0xc3c>
    97a8:	900b883a 	mov	r5,r18
    97ac:	e009883a 	mov	r4,fp
    97b0:	000b85c0 	call	b85c <_Bfree>
    97b4:	880b883a 	mov	r5,r17
    97b8:	e009883a 	mov	r4,fp
    97bc:	000b85c0 	call	b85c <_Bfree>
    97c0:	003e9706 	br	9220 <__alt_data_end+0xfffd84e0>
    97c4:	01800044 	movi	r6,1
    97c8:	d9800e15 	stw	r6,56(sp)
    97cc:	003d9606 	br	8e28 <__alt_data_end+0xfffd80e8>
    97d0:	d8800817 	ldw	r2,32(sp)
    97d4:	d8c00517 	ldw	r3,20(sp)
    97d8:	d8000d15 	stw	zero,52(sp)
    97dc:	10c5c83a 	sub	r2,r2,r3
    97e0:	00c9c83a 	sub	r4,zero,r3
    97e4:	d8800815 	stw	r2,32(sp)
    97e8:	d9000a15 	stw	r4,40(sp)
    97ec:	003d9706 	br	8e4c <__alt_data_end+0xfffd810c>
    97f0:	05adc83a 	sub	r22,zero,r22
    97f4:	dd800815 	stw	r22,32(sp)
    97f8:	002d883a 	mov	r22,zero
    97fc:	003d8e06 	br	8e38 <__alt_data_end+0xfffd80f8>
    9800:	d9000517 	ldw	r4,20(sp)
    9804:	00056280 	call	5628 <__floatsidf>
    9808:	100d883a 	mov	r6,r2
    980c:	180f883a 	mov	r7,r3
    9810:	a009883a 	mov	r4,r20
    9814:	880b883a 	mov	r5,r17
    9818:	00041e80 	call	41e8 <__eqdf2>
    981c:	103d7126 	beq	r2,zero,8de4 <__alt_data_end+0xfffd80a4>
    9820:	d9c00517 	ldw	r7,20(sp)
    9824:	39ffffc4 	addi	r7,r7,-1
    9828:	d9c00515 	stw	r7,20(sp)
    982c:	003d6d06 	br	8de4 <__alt_data_end+0xfffd80a4>
    9830:	dd400a17 	ldw	r21,40(sp)
    9834:	dd000817 	ldw	r20,32(sp)
    9838:	0023883a 	mov	r17,zero
    983c:	003f4806 	br	9560 <__alt_data_end+0xfffd8820>
    9840:	10e3c83a 	sub	r17,r2,r3
    9844:	9448983a 	sll	r4,r18,r17
    9848:	003d3206 	br	8d14 <__alt_data_end+0xfffd7fd4>
    984c:	d8000e15 	stw	zero,56(sp)
    9850:	003d7506 	br	8e28 <__alt_data_end+0xfffd80e8>
    9854:	b005883a 	mov	r2,r22
    9858:	003f4506 	br	9570 <__alt_data_end+0xfffd8830>
    985c:	dc000915 	stw	r16,36(sp)
    9860:	d9800a17 	ldw	r6,40(sp)
    9864:	d9400917 	ldw	r5,36(sp)
    9868:	e009883a 	mov	r4,fp
    986c:	000beb00 	call	beb0 <__pow5mult>
    9870:	1021883a 	mov	r16,r2
    9874:	003f5a06 	br	95e0 <__alt_data_end+0xfffd88a0>
    9878:	01c00044 	movi	r7,1
    987c:	d9c00b15 	stw	r7,44(sp)
    9880:	d8802217 	ldw	r2,136(sp)
    9884:	0081280e 	bge	zero,r2,9d28 <_dtoa_r+0x11b0>
    9888:	100d883a 	mov	r6,r2
    988c:	1021883a 	mov	r16,r2
    9890:	d8800c15 	stw	r2,48(sp)
    9894:	d8800615 	stw	r2,24(sp)
    9898:	003d8806 	br	8ebc <__alt_data_end+0xfffd817c>
    989c:	d8800617 	ldw	r2,24(sp)
    98a0:	00be9b16 	blt	zero,r2,9310 <__alt_data_end+0xfffd85d0>
    98a4:	10010f1e 	bne	r2,zero,9ce4 <_dtoa_r+0x116c>
    98a8:	880b883a 	mov	r5,r17
    98ac:	000d883a 	mov	r6,zero
    98b0:	01d00534 	movhi	r7,16404
    98b4:	8009883a 	mov	r4,r16
    98b8:	00044400 	call	4440 <__muldf3>
    98bc:	900d883a 	mov	r6,r18
    98c0:	980f883a 	mov	r7,r19
    98c4:	1009883a 	mov	r4,r2
    98c8:	180b883a 	mov	r5,r3
    98cc:	00042700 	call	4270 <__gedf2>
    98d0:	002b883a 	mov	r21,zero
    98d4:	0023883a 	mov	r17,zero
    98d8:	1000bf16 	blt	r2,zero,9bd8 <_dtoa_r+0x1060>
    98dc:	d9802217 	ldw	r6,136(sp)
    98e0:	ddc00717 	ldw	r23,28(sp)
    98e4:	018c303a 	nor	r6,zero,r6
    98e8:	d9800515 	stw	r6,20(sp)
    98ec:	a80b883a 	mov	r5,r21
    98f0:	e009883a 	mov	r4,fp
    98f4:	000b85c0 	call	b85c <_Bfree>
    98f8:	883e4926 	beq	r17,zero,9220 <__alt_data_end+0xfffd84e0>
    98fc:	003fad06 	br	97b4 <__alt_data_end+0xfffd8a74>
    9900:	d9c01117 	ldw	r7,68(sp)
    9904:	3801bc26 	beq	r7,zero,9ff8 <_dtoa_r+0x1480>
    9908:	10810cc4 	addi	r2,r2,1075
    990c:	dd400a17 	ldw	r21,40(sp)
    9910:	dd000817 	ldw	r20,32(sp)
    9914:	003f0a06 	br	9540 <__alt_data_end+0xfffd8800>
    9918:	00800704 	movi	r2,28
    991c:	d9000817 	ldw	r4,32(sp)
    9920:	a0a9883a 	add	r20,r20,r2
    9924:	b0ad883a 	add	r22,r22,r2
    9928:	2089883a 	add	r4,r4,r2
    992c:	d9000815 	stw	r4,32(sp)
    9930:	003f5106 	br	9678 <__alt_data_end+0xfffd8938>
    9934:	d8c00317 	ldw	r3,12(sp)
    9938:	b8c1fc0e 	bge	r23,r3,a12c <_dtoa_r+0x15b4>
    993c:	0027883a 	mov	r19,zero
    9940:	b805883a 	mov	r2,r23
    9944:	003f3e06 	br	9640 <__alt_data_end+0xfffd8900>
    9948:	880b883a 	mov	r5,r17
    994c:	e009883a 	mov	r4,fp
    9950:	000f883a 	mov	r7,zero
    9954:	01800284 	movi	r6,10
    9958:	000b8840 	call	b884 <__multadd>
    995c:	d9000c17 	ldw	r4,48(sp)
    9960:	1023883a 	mov	r17,r2
    9964:	0102040e 	bge	zero,r4,a178 <_dtoa_r+0x1600>
    9968:	d9000615 	stw	r4,24(sp)
    996c:	0500050e 	bge	zero,r20,9984 <_dtoa_r+0xe0c>
    9970:	880b883a 	mov	r5,r17
    9974:	a00d883a 	mov	r6,r20
    9978:	e009883a 	mov	r4,fp
    997c:	000bff00 	call	bff0 <__lshift>
    9980:	1023883a 	mov	r17,r2
    9984:	9801241e 	bne	r19,zero,9e18 <_dtoa_r+0x12a0>
    9988:	8829883a 	mov	r20,r17
    998c:	d9000617 	ldw	r4,24(sp)
    9990:	dcc00717 	ldw	r19,28(sp)
    9994:	9480004c 	andi	r18,r18,1
    9998:	20bfffc4 	addi	r2,r4,-1
    999c:	9885883a 	add	r2,r19,r2
    99a0:	d8800415 	stw	r2,16(sp)
    99a4:	dc800615 	stw	r18,24(sp)
    99a8:	a80b883a 	mov	r5,r21
    99ac:	8009883a 	mov	r4,r16
    99b0:	00089500 	call	8950 <quorem>
    99b4:	880b883a 	mov	r5,r17
    99b8:	8009883a 	mov	r4,r16
    99bc:	102f883a 	mov	r23,r2
    99c0:	000c1380 	call	c138 <__mcmp>
    99c4:	a80b883a 	mov	r5,r21
    99c8:	a00d883a 	mov	r6,r20
    99cc:	e009883a 	mov	r4,fp
    99d0:	102d883a 	mov	r22,r2
    99d4:	000c1980 	call	c198 <__mdiff>
    99d8:	1007883a 	mov	r3,r2
    99dc:	10800317 	ldw	r2,12(r2)
    99e0:	bc800c04 	addi	r18,r23,48
    99e4:	180b883a 	mov	r5,r3
    99e8:	10004e1e 	bne	r2,zero,9b24 <_dtoa_r+0xfac>
    99ec:	8009883a 	mov	r4,r16
    99f0:	d8c01615 	stw	r3,88(sp)
    99f4:	000c1380 	call	c138 <__mcmp>
    99f8:	d8c01617 	ldw	r3,88(sp)
    99fc:	e009883a 	mov	r4,fp
    9a00:	d8801615 	stw	r2,88(sp)
    9a04:	180b883a 	mov	r5,r3
    9a08:	000b85c0 	call	b85c <_Bfree>
    9a0c:	d8801617 	ldw	r2,88(sp)
    9a10:	1000041e 	bne	r2,zero,9a24 <_dtoa_r+0xeac>
    9a14:	d9800317 	ldw	r6,12(sp)
    9a18:	3000021e 	bne	r6,zero,9a24 <_dtoa_r+0xeac>
    9a1c:	d8c00617 	ldw	r3,24(sp)
    9a20:	18003726 	beq	r3,zero,9b00 <_dtoa_r+0xf88>
    9a24:	b0002016 	blt	r22,zero,9aa8 <_dtoa_r+0xf30>
    9a28:	b000041e 	bne	r22,zero,9a3c <_dtoa_r+0xec4>
    9a2c:	d9000317 	ldw	r4,12(sp)
    9a30:	2000021e 	bne	r4,zero,9a3c <_dtoa_r+0xec4>
    9a34:	d8c00617 	ldw	r3,24(sp)
    9a38:	18001b26 	beq	r3,zero,9aa8 <_dtoa_r+0xf30>
    9a3c:	00810716 	blt	zero,r2,9e5c <_dtoa_r+0x12e4>
    9a40:	d8c00417 	ldw	r3,16(sp)
    9a44:	9d800044 	addi	r22,r19,1
    9a48:	9c800005 	stb	r18,0(r19)
    9a4c:	b02f883a 	mov	r23,r22
    9a50:	98c10626 	beq	r19,r3,9e6c <_dtoa_r+0x12f4>
    9a54:	800b883a 	mov	r5,r16
    9a58:	000f883a 	mov	r7,zero
    9a5c:	01800284 	movi	r6,10
    9a60:	e009883a 	mov	r4,fp
    9a64:	000b8840 	call	b884 <__multadd>
    9a68:	1021883a 	mov	r16,r2
    9a6c:	000f883a 	mov	r7,zero
    9a70:	01800284 	movi	r6,10
    9a74:	880b883a 	mov	r5,r17
    9a78:	e009883a 	mov	r4,fp
    9a7c:	8d002526 	beq	r17,r20,9b14 <_dtoa_r+0xf9c>
    9a80:	000b8840 	call	b884 <__multadd>
    9a84:	a00b883a 	mov	r5,r20
    9a88:	000f883a 	mov	r7,zero
    9a8c:	01800284 	movi	r6,10
    9a90:	e009883a 	mov	r4,fp
    9a94:	1023883a 	mov	r17,r2
    9a98:	000b8840 	call	b884 <__multadd>
    9a9c:	1029883a 	mov	r20,r2
    9aa0:	b027883a 	mov	r19,r22
    9aa4:	003fc006 	br	99a8 <__alt_data_end+0xfffd8c68>
    9aa8:	9011883a 	mov	r8,r18
    9aac:	00800e0e 	bge	zero,r2,9ae8 <_dtoa_r+0xf70>
    9ab0:	800b883a 	mov	r5,r16
    9ab4:	01800044 	movi	r6,1
    9ab8:	e009883a 	mov	r4,fp
    9abc:	da001715 	stw	r8,92(sp)
    9ac0:	000bff00 	call	bff0 <__lshift>
    9ac4:	a80b883a 	mov	r5,r21
    9ac8:	1009883a 	mov	r4,r2
    9acc:	1021883a 	mov	r16,r2
    9ad0:	000c1380 	call	c138 <__mcmp>
    9ad4:	da001717 	ldw	r8,92(sp)
    9ad8:	0081960e 	bge	zero,r2,a134 <_dtoa_r+0x15bc>
    9adc:	00800e44 	movi	r2,57
    9ae0:	40817026 	beq	r8,r2,a0a4 <_dtoa_r+0x152c>
    9ae4:	ba000c44 	addi	r8,r23,49
    9ae8:	8825883a 	mov	r18,r17
    9aec:	9dc00044 	addi	r23,r19,1
    9af0:	9a000005 	stb	r8,0(r19)
    9af4:	a023883a 	mov	r17,r20
    9af8:	dc000915 	stw	r16,36(sp)
    9afc:	003f2406 	br	9790 <__alt_data_end+0xfffd8a50>
    9b00:	00800e44 	movi	r2,57
    9b04:	9011883a 	mov	r8,r18
    9b08:	90816626 	beq	r18,r2,a0a4 <_dtoa_r+0x152c>
    9b0c:	05bff516 	blt	zero,r22,9ae4 <__alt_data_end+0xfffd8da4>
    9b10:	003ff506 	br	9ae8 <__alt_data_end+0xfffd8da8>
    9b14:	000b8840 	call	b884 <__multadd>
    9b18:	1023883a 	mov	r17,r2
    9b1c:	1029883a 	mov	r20,r2
    9b20:	003fdf06 	br	9aa0 <__alt_data_end+0xfffd8d60>
    9b24:	e009883a 	mov	r4,fp
    9b28:	000b85c0 	call	b85c <_Bfree>
    9b2c:	00800044 	movi	r2,1
    9b30:	003fbc06 	br	9a24 <__alt_data_end+0xfffd8ce4>
    9b34:	a80b883a 	mov	r5,r21
    9b38:	8009883a 	mov	r4,r16
    9b3c:	000c1380 	call	c138 <__mcmp>
    9b40:	103edb0e 	bge	r2,zero,96b0 <__alt_data_end+0xfffd8970>
    9b44:	800b883a 	mov	r5,r16
    9b48:	000f883a 	mov	r7,zero
    9b4c:	01800284 	movi	r6,10
    9b50:	e009883a 	mov	r4,fp
    9b54:	000b8840 	call	b884 <__multadd>
    9b58:	1021883a 	mov	r16,r2
    9b5c:	d8800517 	ldw	r2,20(sp)
    9b60:	d8c00b17 	ldw	r3,44(sp)
    9b64:	10bfffc4 	addi	r2,r2,-1
    9b68:	d8800515 	stw	r2,20(sp)
    9b6c:	183f761e 	bne	r3,zero,9948 <__alt_data_end+0xfffd8c08>
    9b70:	d9000c17 	ldw	r4,48(sp)
    9b74:	0101730e 	bge	zero,r4,a144 <_dtoa_r+0x15cc>
    9b78:	d9000615 	stw	r4,24(sp)
    9b7c:	003ed006 	br	96c0 <__alt_data_end+0xfffd8980>
    9b80:	00800084 	movi	r2,2
    9b84:	3081861e 	bne	r6,r2,a1a0 <_dtoa_r+0x1628>
    9b88:	d8000b15 	stw	zero,44(sp)
    9b8c:	003f3c06 	br	9880 <__alt_data_end+0xfffd8b40>
    9b90:	dc000917 	ldw	r16,36(sp)
    9b94:	003e9206 	br	95e0 <__alt_data_end+0xfffd88a0>
    9b98:	d9c00317 	ldw	r7,12(sp)
    9b9c:	00800084 	movi	r2,2
    9ba0:	11fec50e 	bge	r2,r7,96b8 <__alt_data_end+0xfffd8978>
    9ba4:	d9000617 	ldw	r4,24(sp)
    9ba8:	20013c1e 	bne	r4,zero,a09c <_dtoa_r+0x1524>
    9bac:	a80b883a 	mov	r5,r21
    9bb0:	000f883a 	mov	r7,zero
    9bb4:	01800144 	movi	r6,5
    9bb8:	e009883a 	mov	r4,fp
    9bbc:	000b8840 	call	b884 <__multadd>
    9bc0:	100b883a 	mov	r5,r2
    9bc4:	8009883a 	mov	r4,r16
    9bc8:	102b883a 	mov	r21,r2
    9bcc:	000c1380 	call	c138 <__mcmp>
    9bd0:	dc000915 	stw	r16,36(sp)
    9bd4:	00bf410e 	bge	zero,r2,98dc <__alt_data_end+0xfffd8b9c>
    9bd8:	d9c00717 	ldw	r7,28(sp)
    9bdc:	00800c44 	movi	r2,49
    9be0:	38800005 	stb	r2,0(r7)
    9be4:	d8800517 	ldw	r2,20(sp)
    9be8:	3dc00044 	addi	r23,r7,1
    9bec:	10800044 	addi	r2,r2,1
    9bf0:	d8800515 	stw	r2,20(sp)
    9bf4:	003f3d06 	br	98ec <__alt_data_end+0xfffd8bac>
    9bf8:	d9800517 	ldw	r6,20(sp)
    9bfc:	d9c00717 	ldw	r7,28(sp)
    9c00:	00800c44 	movi	r2,49
    9c04:	31800044 	addi	r6,r6,1
    9c08:	d9800515 	stw	r6,20(sp)
    9c0c:	38800005 	stb	r2,0(r7)
    9c10:	003edf06 	br	9790 <__alt_data_end+0xfffd8a50>
    9c14:	d8000b15 	stw	zero,44(sp)
    9c18:	003c9f06 	br	8e98 <__alt_data_end+0xfffd8158>
    9c1c:	903e7e1e 	bne	r18,zero,9618 <__alt_data_end+0xfffd88d8>
    9c20:	00800434 	movhi	r2,16
    9c24:	10bfffc4 	addi	r2,r2,-1
    9c28:	9884703a 	and	r2,r19,r2
    9c2c:	1000ea1e 	bne	r2,zero,9fd8 <_dtoa_r+0x1460>
    9c30:	9cdffc2c 	andhi	r19,r19,32752
    9c34:	9800e826 	beq	r19,zero,9fd8 <_dtoa_r+0x1460>
    9c38:	d9c00817 	ldw	r7,32(sp)
    9c3c:	b5800044 	addi	r22,r22,1
    9c40:	04c00044 	movi	r19,1
    9c44:	39c00044 	addi	r7,r7,1
    9c48:	d9c00815 	stw	r7,32(sp)
    9c4c:	d8800d17 	ldw	r2,52(sp)
    9c50:	103e721e 	bne	r2,zero,961c <__alt_data_end+0xfffd88dc>
    9c54:	00800044 	movi	r2,1
    9c58:	003e7906 	br	9640 <__alt_data_end+0xfffd8900>
    9c5c:	8009883a 	mov	r4,r16
    9c60:	00056280 	call	5628 <__floatsidf>
    9c64:	d9800f17 	ldw	r6,60(sp)
    9c68:	d9c01017 	ldw	r7,64(sp)
    9c6c:	1009883a 	mov	r4,r2
    9c70:	180b883a 	mov	r5,r3
    9c74:	00044400 	call	4440 <__muldf3>
    9c78:	000d883a 	mov	r6,zero
    9c7c:	01d00734 	movhi	r7,16412
    9c80:	1009883a 	mov	r4,r2
    9c84:	180b883a 	mov	r5,r3
    9c88:	0002f6c0 	call	2f6c <__adddf3>
    9c8c:	047f3034 	movhi	r17,64704
    9c90:	1021883a 	mov	r16,r2
    9c94:	1c63883a 	add	r17,r3,r17
    9c98:	d9000f17 	ldw	r4,60(sp)
    9c9c:	d9401017 	ldw	r5,64(sp)
    9ca0:	000d883a 	mov	r6,zero
    9ca4:	01d00534 	movhi	r7,16404
    9ca8:	0004cac0 	call	4cac <__subdf3>
    9cac:	800d883a 	mov	r6,r16
    9cb0:	880f883a 	mov	r7,r17
    9cb4:	1009883a 	mov	r4,r2
    9cb8:	180b883a 	mov	r5,r3
    9cbc:	102b883a 	mov	r21,r2
    9cc0:	1829883a 	mov	r20,r3
    9cc4:	00042700 	call	4270 <__gedf2>
    9cc8:	00806c16 	blt	zero,r2,9e7c <_dtoa_r+0x1304>
    9ccc:	89e0003c 	xorhi	r7,r17,32768
    9cd0:	800d883a 	mov	r6,r16
    9cd4:	a809883a 	mov	r4,r21
    9cd8:	a00b883a 	mov	r5,r20
    9cdc:	000434c0 	call	434c <__ledf2>
    9ce0:	103d7e0e 	bge	r2,zero,92dc <__alt_data_end+0xfffd859c>
    9ce4:	002b883a 	mov	r21,zero
    9ce8:	0023883a 	mov	r17,zero
    9cec:	003efb06 	br	98dc <__alt_data_end+0xfffd8b9c>
    9cf0:	d8800717 	ldw	r2,28(sp)
    9cf4:	003bd006 	br	8c38 <__alt_data_end+0xfffd7ef8>
    9cf8:	d9000a17 	ldw	r4,40(sp)
    9cfc:	d9800d17 	ldw	r6,52(sp)
    9d00:	dd400a15 	stw	r21,40(sp)
    9d04:	a905c83a 	sub	r2,r21,r4
    9d08:	308d883a 	add	r6,r6,r2
    9d0c:	d9800d15 	stw	r6,52(sp)
    9d10:	002b883a 	mov	r21,zero
    9d14:	003e0606 	br	9530 <__alt_data_end+0xfffd87f0>
    9d18:	9023883a 	mov	r17,r18
    9d1c:	9829883a 	mov	r20,r19
    9d20:	04000084 	movi	r16,2
    9d24:	003c9206 	br	8f70 <__alt_data_end+0xfffd8230>
    9d28:	04000044 	movi	r16,1
    9d2c:	dc000c15 	stw	r16,48(sp)
    9d30:	dc000615 	stw	r16,24(sp)
    9d34:	dc002215 	stw	r16,136(sp)
    9d38:	e0001115 	stw	zero,68(fp)
    9d3c:	000b883a 	mov	r5,zero
    9d40:	003c6906 	br	8ee8 <__alt_data_end+0xfffd81a8>
    9d44:	3021883a 	mov	r16,r6
    9d48:	003ffb06 	br	9d38 <__alt_data_end+0xfffd8ff8>
    9d4c:	1000021e 	bne	r2,zero,9d58 <_dtoa_r+0x11e0>
    9d50:	4200004c 	andi	r8,r8,1
    9d54:	403e7d1e 	bne	r8,zero,974c <__alt_data_end+0xfffd8a0c>
    9d58:	01000c04 	movi	r4,48
    9d5c:	00000106 	br	9d64 <_dtoa_r+0x11ec>
    9d60:	102f883a 	mov	r23,r2
    9d64:	b8bfffc4 	addi	r2,r23,-1
    9d68:	10c00007 	ldb	r3,0(r2)
    9d6c:	193ffc26 	beq	r3,r4,9d60 <__alt_data_end+0xfffd9020>
    9d70:	003e8706 	br	9790 <__alt_data_end+0xfffd8a50>
    9d74:	d8800517 	ldw	r2,20(sp)
    9d78:	00a3c83a 	sub	r17,zero,r2
    9d7c:	8800a426 	beq	r17,zero,a010 <_dtoa_r+0x1498>
    9d80:	888003cc 	andi	r2,r17,15
    9d84:	100490fa 	slli	r2,r2,3
    9d88:	00c000b4 	movhi	r3,2
    9d8c:	18f6bd04 	addi	r3,r3,-9484
    9d90:	1885883a 	add	r2,r3,r2
    9d94:	11800017 	ldw	r6,0(r2)
    9d98:	11c00117 	ldw	r7,4(r2)
    9d9c:	9009883a 	mov	r4,r18
    9da0:	980b883a 	mov	r5,r19
    9da4:	8823d13a 	srai	r17,r17,4
    9da8:	00044400 	call	4440 <__muldf3>
    9dac:	d8800f15 	stw	r2,60(sp)
    9db0:	d8c01015 	stw	r3,64(sp)
    9db4:	8800e826 	beq	r17,zero,a158 <_dtoa_r+0x15e0>
    9db8:	050000b4 	movhi	r20,2
    9dbc:	a536b304 	addi	r20,r20,-9524
    9dc0:	04000084 	movi	r16,2
    9dc4:	8980004c 	andi	r6,r17,1
    9dc8:	1009883a 	mov	r4,r2
    9dcc:	8823d07a 	srai	r17,r17,1
    9dd0:	180b883a 	mov	r5,r3
    9dd4:	30000426 	beq	r6,zero,9de8 <_dtoa_r+0x1270>
    9dd8:	a1800017 	ldw	r6,0(r20)
    9ddc:	a1c00117 	ldw	r7,4(r20)
    9de0:	84000044 	addi	r16,r16,1
    9de4:	00044400 	call	4440 <__muldf3>
    9de8:	a5000204 	addi	r20,r20,8
    9dec:	883ff51e 	bne	r17,zero,9dc4 <__alt_data_end+0xfffd9084>
    9df0:	d8800f15 	stw	r2,60(sp)
    9df4:	d8c01015 	stw	r3,64(sp)
    9df8:	003c7606 	br	8fd4 <__alt_data_end+0xfffd8294>
    9dfc:	00c00c04 	movi	r3,48
    9e00:	10c00005 	stb	r3,0(r2)
    9e04:	d8c00517 	ldw	r3,20(sp)
    9e08:	bd3fffc3 	ldbu	r20,-1(r23)
    9e0c:	18c00044 	addi	r3,r3,1
    9e10:	d8c00515 	stw	r3,20(sp)
    9e14:	003db906 	br	94fc <__alt_data_end+0xfffd87bc>
    9e18:	89400117 	ldw	r5,4(r17)
    9e1c:	e009883a 	mov	r4,fp
    9e20:	000b7b40 	call	b7b4 <_Balloc>
    9e24:	89800417 	ldw	r6,16(r17)
    9e28:	89400304 	addi	r5,r17,12
    9e2c:	11000304 	addi	r4,r2,12
    9e30:	31800084 	addi	r6,r6,2
    9e34:	318d883a 	add	r6,r6,r6
    9e38:	318d883a 	add	r6,r6,r6
    9e3c:	1027883a 	mov	r19,r2
    9e40:	0005fac0 	call	5fac <memcpy>
    9e44:	01800044 	movi	r6,1
    9e48:	980b883a 	mov	r5,r19
    9e4c:	e009883a 	mov	r4,fp
    9e50:	000bff00 	call	bff0 <__lshift>
    9e54:	1029883a 	mov	r20,r2
    9e58:	003ecc06 	br	998c <__alt_data_end+0xfffd8c4c>
    9e5c:	00800e44 	movi	r2,57
    9e60:	90809026 	beq	r18,r2,a0a4 <_dtoa_r+0x152c>
    9e64:	92000044 	addi	r8,r18,1
    9e68:	003f1f06 	br	9ae8 <__alt_data_end+0xfffd8da8>
    9e6c:	9011883a 	mov	r8,r18
    9e70:	8825883a 	mov	r18,r17
    9e74:	a023883a 	mov	r17,r20
    9e78:	003e2906 	br	9720 <__alt_data_end+0xfffd89e0>
    9e7c:	002b883a 	mov	r21,zero
    9e80:	0023883a 	mov	r17,zero
    9e84:	003f5406 	br	9bd8 <__alt_data_end+0xfffd8e98>
    9e88:	61bfffc4 	addi	r6,r12,-1
    9e8c:	300490fa 	slli	r2,r6,3
    9e90:	00c000b4 	movhi	r3,2
    9e94:	18f6bd04 	addi	r3,r3,-9484
    9e98:	1885883a 	add	r2,r3,r2
    9e9c:	11000017 	ldw	r4,0(r2)
    9ea0:	11400117 	ldw	r5,4(r2)
    9ea4:	d8800717 	ldw	r2,28(sp)
    9ea8:	880f883a 	mov	r7,r17
    9eac:	d9801215 	stw	r6,72(sp)
    9eb0:	800d883a 	mov	r6,r16
    9eb4:	db001615 	stw	r12,88(sp)
    9eb8:	15c00044 	addi	r23,r2,1
    9ebc:	00044400 	call	4440 <__muldf3>
    9ec0:	d9401017 	ldw	r5,64(sp)
    9ec4:	d9000f17 	ldw	r4,60(sp)
    9ec8:	d8c01515 	stw	r3,84(sp)
    9ecc:	d8801415 	stw	r2,80(sp)
    9ed0:	00055a80 	call	55a8 <__fixdfsi>
    9ed4:	1009883a 	mov	r4,r2
    9ed8:	1021883a 	mov	r16,r2
    9edc:	00056280 	call	5628 <__floatsidf>
    9ee0:	d9000f17 	ldw	r4,60(sp)
    9ee4:	d9401017 	ldw	r5,64(sp)
    9ee8:	100d883a 	mov	r6,r2
    9eec:	180f883a 	mov	r7,r3
    9ef0:	0004cac0 	call	4cac <__subdf3>
    9ef4:	1829883a 	mov	r20,r3
    9ef8:	d8c00717 	ldw	r3,28(sp)
    9efc:	84000c04 	addi	r16,r16,48
    9f00:	1023883a 	mov	r17,r2
    9f04:	1c000005 	stb	r16,0(r3)
    9f08:	db001617 	ldw	r12,88(sp)
    9f0c:	00800044 	movi	r2,1
    9f10:	60802226 	beq	r12,r2,9f9c <_dtoa_r+0x1424>
    9f14:	d9c00717 	ldw	r7,28(sp)
    9f18:	8805883a 	mov	r2,r17
    9f1c:	b82b883a 	mov	r21,r23
    9f20:	3b19883a 	add	r12,r7,r12
    9f24:	6023883a 	mov	r17,r12
    9f28:	a007883a 	mov	r3,r20
    9f2c:	dc800f15 	stw	r18,60(sp)
    9f30:	000d883a 	mov	r6,zero
    9f34:	01d00934 	movhi	r7,16420
    9f38:	1009883a 	mov	r4,r2
    9f3c:	180b883a 	mov	r5,r3
    9f40:	00044400 	call	4440 <__muldf3>
    9f44:	180b883a 	mov	r5,r3
    9f48:	1009883a 	mov	r4,r2
    9f4c:	1829883a 	mov	r20,r3
    9f50:	1025883a 	mov	r18,r2
    9f54:	00055a80 	call	55a8 <__fixdfsi>
    9f58:	1009883a 	mov	r4,r2
    9f5c:	1021883a 	mov	r16,r2
    9f60:	00056280 	call	5628 <__floatsidf>
    9f64:	100d883a 	mov	r6,r2
    9f68:	180f883a 	mov	r7,r3
    9f6c:	9009883a 	mov	r4,r18
    9f70:	a00b883a 	mov	r5,r20
    9f74:	84000c04 	addi	r16,r16,48
    9f78:	0004cac0 	call	4cac <__subdf3>
    9f7c:	ad400044 	addi	r21,r21,1
    9f80:	ac3fffc5 	stb	r16,-1(r21)
    9f84:	ac7fea1e 	bne	r21,r17,9f30 <__alt_data_end+0xfffd91f0>
    9f88:	1023883a 	mov	r17,r2
    9f8c:	d8801217 	ldw	r2,72(sp)
    9f90:	dc800f17 	ldw	r18,60(sp)
    9f94:	1829883a 	mov	r20,r3
    9f98:	b8af883a 	add	r23,r23,r2
    9f9c:	d9001417 	ldw	r4,80(sp)
    9fa0:	d9401517 	ldw	r5,84(sp)
    9fa4:	000d883a 	mov	r6,zero
    9fa8:	01cff834 	movhi	r7,16352
    9fac:	0002f6c0 	call	2f6c <__adddf3>
    9fb0:	880d883a 	mov	r6,r17
    9fb4:	a00f883a 	mov	r7,r20
    9fb8:	1009883a 	mov	r4,r2
    9fbc:	180b883a 	mov	r5,r3
    9fc0:	000434c0 	call	434c <__ledf2>
    9fc4:	10003e0e 	bge	r2,zero,a0c0 <_dtoa_r+0x1548>
    9fc8:	d9001317 	ldw	r4,76(sp)
    9fcc:	bd3fffc3 	ldbu	r20,-1(r23)
    9fd0:	d9000515 	stw	r4,20(sp)
    9fd4:	003d3b06 	br	94c4 <__alt_data_end+0xfffd8784>
    9fd8:	0027883a 	mov	r19,zero
    9fdc:	003f1b06 	br	9c4c <__alt_data_end+0xfffd8f0c>
    9fe0:	d8800817 	ldw	r2,32(sp)
    9fe4:	11e9c83a 	sub	r20,r2,r7
    9fe8:	0005883a 	mov	r2,zero
    9fec:	003d5406 	br	9540 <__alt_data_end+0xfffd8800>
    9ff0:	00800044 	movi	r2,1
    9ff4:	003dc706 	br	9714 <__alt_data_end+0xfffd89d4>
    9ff8:	d8c00217 	ldw	r3,8(sp)
    9ffc:	00800d84 	movi	r2,54
    a000:	dd400a17 	ldw	r21,40(sp)
    a004:	10c5c83a 	sub	r2,r2,r3
    a008:	dd000817 	ldw	r20,32(sp)
    a00c:	003d4c06 	br	9540 <__alt_data_end+0xfffd8800>
    a010:	dc800f15 	stw	r18,60(sp)
    a014:	dcc01015 	stw	r19,64(sp)
    a018:	04000084 	movi	r16,2
    a01c:	003bed06 	br	8fd4 <__alt_data_end+0xfffd8294>
    a020:	d9000617 	ldw	r4,24(sp)
    a024:	203f0d26 	beq	r4,zero,9c5c <__alt_data_end+0xfffd8f1c>
    a028:	d9800c17 	ldw	r6,48(sp)
    a02c:	01bcab0e 	bge	zero,r6,92dc <__alt_data_end+0xfffd859c>
    a030:	d9401017 	ldw	r5,64(sp)
    a034:	d9000f17 	ldw	r4,60(sp)
    a038:	000d883a 	mov	r6,zero
    a03c:	01d00934 	movhi	r7,16420
    a040:	00044400 	call	4440 <__muldf3>
    a044:	81000044 	addi	r4,r16,1
    a048:	d8800f15 	stw	r2,60(sp)
    a04c:	d8c01015 	stw	r3,64(sp)
    a050:	00056280 	call	5628 <__floatsidf>
    a054:	d9800f17 	ldw	r6,60(sp)
    a058:	d9c01017 	ldw	r7,64(sp)
    a05c:	1009883a 	mov	r4,r2
    a060:	180b883a 	mov	r5,r3
    a064:	00044400 	call	4440 <__muldf3>
    a068:	01d00734 	movhi	r7,16412
    a06c:	000d883a 	mov	r6,zero
    a070:	1009883a 	mov	r4,r2
    a074:	180b883a 	mov	r5,r3
    a078:	0002f6c0 	call	2f6c <__adddf3>
    a07c:	d9c00517 	ldw	r7,20(sp)
    a080:	047f3034 	movhi	r17,64704
    a084:	1021883a 	mov	r16,r2
    a088:	39ffffc4 	addi	r7,r7,-1
    a08c:	d9c01315 	stw	r7,76(sp)
    a090:	1c63883a 	add	r17,r3,r17
    a094:	db000c17 	ldw	r12,48(sp)
    a098:	003bea06 	br	9044 <__alt_data_end+0xfffd8304>
    a09c:	dc000915 	stw	r16,36(sp)
    a0a0:	003e0e06 	br	98dc <__alt_data_end+0xfffd8b9c>
    a0a4:	01000e44 	movi	r4,57
    a0a8:	8825883a 	mov	r18,r17
    a0ac:	9dc00044 	addi	r23,r19,1
    a0b0:	99000005 	stb	r4,0(r19)
    a0b4:	a023883a 	mov	r17,r20
    a0b8:	dc000915 	stw	r16,36(sp)
    a0bc:	003da406 	br	9750 <__alt_data_end+0xfffd8a10>
    a0c0:	d9801417 	ldw	r6,80(sp)
    a0c4:	d9c01517 	ldw	r7,84(sp)
    a0c8:	0009883a 	mov	r4,zero
    a0cc:	014ff834 	movhi	r5,16352
    a0d0:	0004cac0 	call	4cac <__subdf3>
    a0d4:	880d883a 	mov	r6,r17
    a0d8:	a00f883a 	mov	r7,r20
    a0dc:	1009883a 	mov	r4,r2
    a0e0:	180b883a 	mov	r5,r3
    a0e4:	00042700 	call	4270 <__gedf2>
    a0e8:	00bc7c0e 	bge	zero,r2,92dc <__alt_data_end+0xfffd859c>
    a0ec:	01000c04 	movi	r4,48
    a0f0:	00000106 	br	a0f8 <_dtoa_r+0x1580>
    a0f4:	102f883a 	mov	r23,r2
    a0f8:	b8bfffc4 	addi	r2,r23,-1
    a0fc:	10c00007 	ldb	r3,0(r2)
    a100:	193ffc26 	beq	r3,r4,a0f4 <__alt_data_end+0xfffd93b4>
    a104:	d9801317 	ldw	r6,76(sp)
    a108:	d9800515 	stw	r6,20(sp)
    a10c:	003c4406 	br	9220 <__alt_data_end+0xfffd84e0>
    a110:	d9801317 	ldw	r6,76(sp)
    a114:	d9800515 	stw	r6,20(sp)
    a118:	003cea06 	br	94c4 <__alt_data_end+0xfffd8784>
    a11c:	dd800f17 	ldw	r22,60(sp)
    a120:	dcc01017 	ldw	r19,64(sp)
    a124:	dc801217 	ldw	r18,72(sp)
    a128:	003c6c06 	br	92dc <__alt_data_end+0xfffd859c>
    a12c:	903e031e 	bne	r18,zero,993c <__alt_data_end+0xfffd8bfc>
    a130:	003ebb06 	br	9c20 <__alt_data_end+0xfffd8ee0>
    a134:	103e6c1e 	bne	r2,zero,9ae8 <__alt_data_end+0xfffd8da8>
    a138:	4080004c 	andi	r2,r8,1
    a13c:	103e6a26 	beq	r2,zero,9ae8 <__alt_data_end+0xfffd8da8>
    a140:	003e6606 	br	9adc <__alt_data_end+0xfffd8d9c>
    a144:	d8c00317 	ldw	r3,12(sp)
    a148:	00800084 	movi	r2,2
    a14c:	10c02916 	blt	r2,r3,a1f4 <_dtoa_r+0x167c>
    a150:	d9000c17 	ldw	r4,48(sp)
    a154:	003e8806 	br	9b78 <__alt_data_end+0xfffd8e38>
    a158:	04000084 	movi	r16,2
    a15c:	003b9d06 	br	8fd4 <__alt_data_end+0xfffd8294>
    a160:	d9001317 	ldw	r4,76(sp)
    a164:	d9000515 	stw	r4,20(sp)
    a168:	003cd606 	br	94c4 <__alt_data_end+0xfffd8784>
    a16c:	d8801317 	ldw	r2,76(sp)
    a170:	d8800515 	stw	r2,20(sp)
    a174:	003c2a06 	br	9220 <__alt_data_end+0xfffd84e0>
    a178:	d9800317 	ldw	r6,12(sp)
    a17c:	00800084 	movi	r2,2
    a180:	11801516 	blt	r2,r6,a1d8 <_dtoa_r+0x1660>
    a184:	d9c00c17 	ldw	r7,48(sp)
    a188:	d9c00615 	stw	r7,24(sp)
    a18c:	003df706 	br	996c <__alt_data_end+0xfffd8c2c>
    a190:	193d3926 	beq	r3,r4,9678 <__alt_data_end+0xfffd8938>
    a194:	00c00f04 	movi	r3,60
    a198:	1885c83a 	sub	r2,r3,r2
    a19c:	003ddf06 	br	991c <__alt_data_end+0xfffd8bdc>
    a1a0:	e009883a 	mov	r4,fp
    a1a4:	e0001115 	stw	zero,68(fp)
    a1a8:	000b883a 	mov	r5,zero
    a1ac:	000b7b40 	call	b7b4 <_Balloc>
    a1b0:	d8800715 	stw	r2,28(sp)
    a1b4:	d8c00717 	ldw	r3,28(sp)
    a1b8:	00bfffc4 	movi	r2,-1
    a1bc:	01000044 	movi	r4,1
    a1c0:	d8800c15 	stw	r2,48(sp)
    a1c4:	e0c01015 	stw	r3,64(fp)
    a1c8:	d9000b15 	stw	r4,44(sp)
    a1cc:	d8800615 	stw	r2,24(sp)
    a1d0:	d8002215 	stw	zero,136(sp)
    a1d4:	003c4106 	br	92dc <__alt_data_end+0xfffd859c>
    a1d8:	d8c00c17 	ldw	r3,48(sp)
    a1dc:	d8c00615 	stw	r3,24(sp)
    a1e0:	003e7006 	br	9ba4 <__alt_data_end+0xfffd8e64>
    a1e4:	04400044 	movi	r17,1
    a1e8:	003b2006 	br	8e6c <__alt_data_end+0xfffd812c>
    a1ec:	000b883a 	mov	r5,zero
    a1f0:	003b3d06 	br	8ee8 <__alt_data_end+0xfffd81a8>
    a1f4:	d8800c17 	ldw	r2,48(sp)
    a1f8:	d8800615 	stw	r2,24(sp)
    a1fc:	003e6906 	br	9ba4 <__alt_data_end+0xfffd8e64>

0000a200 <__sflush_r>:
    a200:	2880030b 	ldhu	r2,12(r5)
    a204:	defffb04 	addi	sp,sp,-20
    a208:	dcc00315 	stw	r19,12(sp)
    a20c:	dc400115 	stw	r17,4(sp)
    a210:	dfc00415 	stw	ra,16(sp)
    a214:	dc800215 	stw	r18,8(sp)
    a218:	dc000015 	stw	r16,0(sp)
    a21c:	10c0020c 	andi	r3,r2,8
    a220:	2823883a 	mov	r17,r5
    a224:	2027883a 	mov	r19,r4
    a228:	1800311e 	bne	r3,zero,a2f0 <__sflush_r+0xf0>
    a22c:	28c00117 	ldw	r3,4(r5)
    a230:	10820014 	ori	r2,r2,2048
    a234:	2880030d 	sth	r2,12(r5)
    a238:	00c04b0e 	bge	zero,r3,a368 <__sflush_r+0x168>
    a23c:	8a000a17 	ldw	r8,40(r17)
    a240:	40002326 	beq	r8,zero,a2d0 <__sflush_r+0xd0>
    a244:	9c000017 	ldw	r16,0(r19)
    a248:	10c4000c 	andi	r3,r2,4096
    a24c:	98000015 	stw	zero,0(r19)
    a250:	18004826 	beq	r3,zero,a374 <__sflush_r+0x174>
    a254:	89801417 	ldw	r6,80(r17)
    a258:	10c0010c 	andi	r3,r2,4
    a25c:	18000626 	beq	r3,zero,a278 <__sflush_r+0x78>
    a260:	88c00117 	ldw	r3,4(r17)
    a264:	88800c17 	ldw	r2,48(r17)
    a268:	30cdc83a 	sub	r6,r6,r3
    a26c:	10000226 	beq	r2,zero,a278 <__sflush_r+0x78>
    a270:	88800f17 	ldw	r2,60(r17)
    a274:	308dc83a 	sub	r6,r6,r2
    a278:	89400717 	ldw	r5,28(r17)
    a27c:	000f883a 	mov	r7,zero
    a280:	9809883a 	mov	r4,r19
    a284:	403ee83a 	callr	r8
    a288:	00ffffc4 	movi	r3,-1
    a28c:	10c04426 	beq	r2,r3,a3a0 <__sflush_r+0x1a0>
    a290:	88c0030b 	ldhu	r3,12(r17)
    a294:	89000417 	ldw	r4,16(r17)
    a298:	88000115 	stw	zero,4(r17)
    a29c:	197dffcc 	andi	r5,r3,63487
    a2a0:	8940030d 	sth	r5,12(r17)
    a2a4:	89000015 	stw	r4,0(r17)
    a2a8:	18c4000c 	andi	r3,r3,4096
    a2ac:	18002c1e 	bne	r3,zero,a360 <__sflush_r+0x160>
    a2b0:	89400c17 	ldw	r5,48(r17)
    a2b4:	9c000015 	stw	r16,0(r19)
    a2b8:	28000526 	beq	r5,zero,a2d0 <__sflush_r+0xd0>
    a2bc:	88801004 	addi	r2,r17,64
    a2c0:	28800226 	beq	r5,r2,a2cc <__sflush_r+0xcc>
    a2c4:	9809883a 	mov	r4,r19
    a2c8:	000a97c0 	call	a97c <_free_r>
    a2cc:	88000c15 	stw	zero,48(r17)
    a2d0:	0005883a 	mov	r2,zero
    a2d4:	dfc00417 	ldw	ra,16(sp)
    a2d8:	dcc00317 	ldw	r19,12(sp)
    a2dc:	dc800217 	ldw	r18,8(sp)
    a2e0:	dc400117 	ldw	r17,4(sp)
    a2e4:	dc000017 	ldw	r16,0(sp)
    a2e8:	dec00504 	addi	sp,sp,20
    a2ec:	f800283a 	ret
    a2f0:	2c800417 	ldw	r18,16(r5)
    a2f4:	903ff626 	beq	r18,zero,a2d0 <__alt_data_end+0xfffd9590>
    a2f8:	2c000017 	ldw	r16,0(r5)
    a2fc:	108000cc 	andi	r2,r2,3
    a300:	2c800015 	stw	r18,0(r5)
    a304:	84a1c83a 	sub	r16,r16,r18
    a308:	1000131e 	bne	r2,zero,a358 <__sflush_r+0x158>
    a30c:	28800517 	ldw	r2,20(r5)
    a310:	88800215 	stw	r2,8(r17)
    a314:	04000316 	blt	zero,r16,a324 <__sflush_r+0x124>
    a318:	003fed06 	br	a2d0 <__alt_data_end+0xfffd9590>
    a31c:	90a5883a 	add	r18,r18,r2
    a320:	043feb0e 	bge	zero,r16,a2d0 <__alt_data_end+0xfffd9590>
    a324:	88800917 	ldw	r2,36(r17)
    a328:	89400717 	ldw	r5,28(r17)
    a32c:	800f883a 	mov	r7,r16
    a330:	900d883a 	mov	r6,r18
    a334:	9809883a 	mov	r4,r19
    a338:	103ee83a 	callr	r2
    a33c:	80a1c83a 	sub	r16,r16,r2
    a340:	00bff616 	blt	zero,r2,a31c <__alt_data_end+0xfffd95dc>
    a344:	88c0030b 	ldhu	r3,12(r17)
    a348:	00bfffc4 	movi	r2,-1
    a34c:	18c01014 	ori	r3,r3,64
    a350:	88c0030d 	sth	r3,12(r17)
    a354:	003fdf06 	br	a2d4 <__alt_data_end+0xfffd9594>
    a358:	0005883a 	mov	r2,zero
    a35c:	003fec06 	br	a310 <__alt_data_end+0xfffd95d0>
    a360:	88801415 	stw	r2,80(r17)
    a364:	003fd206 	br	a2b0 <__alt_data_end+0xfffd9570>
    a368:	28c00f17 	ldw	r3,60(r5)
    a36c:	00ffb316 	blt	zero,r3,a23c <__alt_data_end+0xfffd94fc>
    a370:	003fd706 	br	a2d0 <__alt_data_end+0xfffd9590>
    a374:	89400717 	ldw	r5,28(r17)
    a378:	000d883a 	mov	r6,zero
    a37c:	01c00044 	movi	r7,1
    a380:	9809883a 	mov	r4,r19
    a384:	403ee83a 	callr	r8
    a388:	100d883a 	mov	r6,r2
    a38c:	00bfffc4 	movi	r2,-1
    a390:	30801426 	beq	r6,r2,a3e4 <__sflush_r+0x1e4>
    a394:	8880030b 	ldhu	r2,12(r17)
    a398:	8a000a17 	ldw	r8,40(r17)
    a39c:	003fae06 	br	a258 <__alt_data_end+0xfffd9518>
    a3a0:	98c00017 	ldw	r3,0(r19)
    a3a4:	183fba26 	beq	r3,zero,a290 <__alt_data_end+0xfffd9550>
    a3a8:	01000744 	movi	r4,29
    a3ac:	19000626 	beq	r3,r4,a3c8 <__sflush_r+0x1c8>
    a3b0:	01000584 	movi	r4,22
    a3b4:	19000426 	beq	r3,r4,a3c8 <__sflush_r+0x1c8>
    a3b8:	88c0030b 	ldhu	r3,12(r17)
    a3bc:	18c01014 	ori	r3,r3,64
    a3c0:	88c0030d 	sth	r3,12(r17)
    a3c4:	003fc306 	br	a2d4 <__alt_data_end+0xfffd9594>
    a3c8:	8880030b 	ldhu	r2,12(r17)
    a3cc:	88c00417 	ldw	r3,16(r17)
    a3d0:	88000115 	stw	zero,4(r17)
    a3d4:	10bdffcc 	andi	r2,r2,63487
    a3d8:	8880030d 	sth	r2,12(r17)
    a3dc:	88c00015 	stw	r3,0(r17)
    a3e0:	003fb306 	br	a2b0 <__alt_data_end+0xfffd9570>
    a3e4:	98800017 	ldw	r2,0(r19)
    a3e8:	103fea26 	beq	r2,zero,a394 <__alt_data_end+0xfffd9654>
    a3ec:	00c00744 	movi	r3,29
    a3f0:	10c00226 	beq	r2,r3,a3fc <__sflush_r+0x1fc>
    a3f4:	00c00584 	movi	r3,22
    a3f8:	10c0031e 	bne	r2,r3,a408 <__sflush_r+0x208>
    a3fc:	9c000015 	stw	r16,0(r19)
    a400:	0005883a 	mov	r2,zero
    a404:	003fb306 	br	a2d4 <__alt_data_end+0xfffd9594>
    a408:	88c0030b 	ldhu	r3,12(r17)
    a40c:	3005883a 	mov	r2,r6
    a410:	18c01014 	ori	r3,r3,64
    a414:	88c0030d 	sth	r3,12(r17)
    a418:	003fae06 	br	a2d4 <__alt_data_end+0xfffd9594>

0000a41c <_fflush_r>:
    a41c:	defffd04 	addi	sp,sp,-12
    a420:	dc000115 	stw	r16,4(sp)
    a424:	dfc00215 	stw	ra,8(sp)
    a428:	2021883a 	mov	r16,r4
    a42c:	20000226 	beq	r4,zero,a438 <_fflush_r+0x1c>
    a430:	20800e17 	ldw	r2,56(r4)
    a434:	10000c26 	beq	r2,zero,a468 <_fflush_r+0x4c>
    a438:	2880030f 	ldh	r2,12(r5)
    a43c:	1000051e 	bne	r2,zero,a454 <_fflush_r+0x38>
    a440:	0005883a 	mov	r2,zero
    a444:	dfc00217 	ldw	ra,8(sp)
    a448:	dc000117 	ldw	r16,4(sp)
    a44c:	dec00304 	addi	sp,sp,12
    a450:	f800283a 	ret
    a454:	8009883a 	mov	r4,r16
    a458:	dfc00217 	ldw	ra,8(sp)
    a45c:	dc000117 	ldw	r16,4(sp)
    a460:	dec00304 	addi	sp,sp,12
    a464:	000a2001 	jmpi	a200 <__sflush_r>
    a468:	d9400015 	stw	r5,0(sp)
    a46c:	000a8080 	call	a808 <__sinit>
    a470:	d9400017 	ldw	r5,0(sp)
    a474:	003ff006 	br	a438 <__alt_data_end+0xfffd96f8>

0000a478 <fflush>:
    a478:	20000526 	beq	r4,zero,a490 <fflush+0x18>
    a47c:	008000b4 	movhi	r2,2
    a480:	10be1e04 	addi	r2,r2,-1928
    a484:	200b883a 	mov	r5,r4
    a488:	11000017 	ldw	r4,0(r2)
    a48c:	000a41c1 	jmpi	a41c <_fflush_r>
    a490:	008000b4 	movhi	r2,2
    a494:	10be1d04 	addi	r2,r2,-1932
    a498:	11000017 	ldw	r4,0(r2)
    a49c:	01400074 	movhi	r5,1
    a4a0:	29690704 	addi	r5,r5,-23524
    a4a4:	000b2181 	jmpi	b218 <_fwalk_reent>

0000a4a8 <__fp_unlock>:
    a4a8:	0005883a 	mov	r2,zero
    a4ac:	f800283a 	ret

0000a4b0 <_cleanup_r>:
    a4b0:	01400074 	movhi	r5,1
    a4b4:	297a1c04 	addi	r5,r5,-6032
    a4b8:	000b2181 	jmpi	b218 <_fwalk_reent>

0000a4bc <__sinit.part.1>:
    a4bc:	defff704 	addi	sp,sp,-36
    a4c0:	00c00074 	movhi	r3,1
    a4c4:	dfc00815 	stw	ra,32(sp)
    a4c8:	ddc00715 	stw	r23,28(sp)
    a4cc:	dd800615 	stw	r22,24(sp)
    a4d0:	dd400515 	stw	r21,20(sp)
    a4d4:	dd000415 	stw	r20,16(sp)
    a4d8:	dcc00315 	stw	r19,12(sp)
    a4dc:	dc800215 	stw	r18,8(sp)
    a4e0:	dc400115 	stw	r17,4(sp)
    a4e4:	dc000015 	stw	r16,0(sp)
    a4e8:	18e92c04 	addi	r3,r3,-23376
    a4ec:	24000117 	ldw	r16,4(r4)
    a4f0:	20c00f15 	stw	r3,60(r4)
    a4f4:	2080bb04 	addi	r2,r4,748
    a4f8:	00c000c4 	movi	r3,3
    a4fc:	20c0b915 	stw	r3,740(r4)
    a500:	2080ba15 	stw	r2,744(r4)
    a504:	2000b815 	stw	zero,736(r4)
    a508:	05c00204 	movi	r23,8
    a50c:	00800104 	movi	r2,4
    a510:	2025883a 	mov	r18,r4
    a514:	b80d883a 	mov	r6,r23
    a518:	81001704 	addi	r4,r16,92
    a51c:	000b883a 	mov	r5,zero
    a520:	80000015 	stw	zero,0(r16)
    a524:	80000115 	stw	zero,4(r16)
    a528:	80000215 	stw	zero,8(r16)
    a52c:	8080030d 	sth	r2,12(r16)
    a530:	80001915 	stw	zero,100(r16)
    a534:	8000038d 	sth	zero,14(r16)
    a538:	80000415 	stw	zero,16(r16)
    a53c:	80000515 	stw	zero,20(r16)
    a540:	80000615 	stw	zero,24(r16)
    a544:	00060f40 	call	60f4 <memset>
    a548:	05800074 	movhi	r22,1
    a54c:	94400217 	ldw	r17,8(r18)
    a550:	05400074 	movhi	r21,1
    a554:	05000074 	movhi	r20,1
    a558:	04c00074 	movhi	r19,1
    a55c:	b5b37404 	addi	r22,r22,-12848
    a560:	ad738b04 	addi	r21,r21,-12756
    a564:	a533aa04 	addi	r20,r20,-12632
    a568:	9cf3c104 	addi	r19,r19,-12540
    a56c:	85800815 	stw	r22,32(r16)
    a570:	85400915 	stw	r21,36(r16)
    a574:	85000a15 	stw	r20,40(r16)
    a578:	84c00b15 	stw	r19,44(r16)
    a57c:	84000715 	stw	r16,28(r16)
    a580:	00800284 	movi	r2,10
    a584:	8880030d 	sth	r2,12(r17)
    a588:	00800044 	movi	r2,1
    a58c:	b80d883a 	mov	r6,r23
    a590:	89001704 	addi	r4,r17,92
    a594:	000b883a 	mov	r5,zero
    a598:	88000015 	stw	zero,0(r17)
    a59c:	88000115 	stw	zero,4(r17)
    a5a0:	88000215 	stw	zero,8(r17)
    a5a4:	88001915 	stw	zero,100(r17)
    a5a8:	8880038d 	sth	r2,14(r17)
    a5ac:	88000415 	stw	zero,16(r17)
    a5b0:	88000515 	stw	zero,20(r17)
    a5b4:	88000615 	stw	zero,24(r17)
    a5b8:	00060f40 	call	60f4 <memset>
    a5bc:	94000317 	ldw	r16,12(r18)
    a5c0:	00800484 	movi	r2,18
    a5c4:	8c400715 	stw	r17,28(r17)
    a5c8:	8d800815 	stw	r22,32(r17)
    a5cc:	8d400915 	stw	r21,36(r17)
    a5d0:	8d000a15 	stw	r20,40(r17)
    a5d4:	8cc00b15 	stw	r19,44(r17)
    a5d8:	8080030d 	sth	r2,12(r16)
    a5dc:	00800084 	movi	r2,2
    a5e0:	80000015 	stw	zero,0(r16)
    a5e4:	80000115 	stw	zero,4(r16)
    a5e8:	80000215 	stw	zero,8(r16)
    a5ec:	80001915 	stw	zero,100(r16)
    a5f0:	8080038d 	sth	r2,14(r16)
    a5f4:	80000415 	stw	zero,16(r16)
    a5f8:	80000515 	stw	zero,20(r16)
    a5fc:	80000615 	stw	zero,24(r16)
    a600:	b80d883a 	mov	r6,r23
    a604:	000b883a 	mov	r5,zero
    a608:	81001704 	addi	r4,r16,92
    a60c:	00060f40 	call	60f4 <memset>
    a610:	00800044 	movi	r2,1
    a614:	84000715 	stw	r16,28(r16)
    a618:	85800815 	stw	r22,32(r16)
    a61c:	85400915 	stw	r21,36(r16)
    a620:	85000a15 	stw	r20,40(r16)
    a624:	84c00b15 	stw	r19,44(r16)
    a628:	90800e15 	stw	r2,56(r18)
    a62c:	dfc00817 	ldw	ra,32(sp)
    a630:	ddc00717 	ldw	r23,28(sp)
    a634:	dd800617 	ldw	r22,24(sp)
    a638:	dd400517 	ldw	r21,20(sp)
    a63c:	dd000417 	ldw	r20,16(sp)
    a640:	dcc00317 	ldw	r19,12(sp)
    a644:	dc800217 	ldw	r18,8(sp)
    a648:	dc400117 	ldw	r17,4(sp)
    a64c:	dc000017 	ldw	r16,0(sp)
    a650:	dec00904 	addi	sp,sp,36
    a654:	f800283a 	ret

0000a658 <__fp_lock>:
    a658:	0005883a 	mov	r2,zero
    a65c:	f800283a 	ret

0000a660 <__sfmoreglue>:
    a660:	defffc04 	addi	sp,sp,-16
    a664:	dc800215 	stw	r18,8(sp)
    a668:	2825883a 	mov	r18,r5
    a66c:	dc000015 	stw	r16,0(sp)
    a670:	01401a04 	movi	r5,104
    a674:	2021883a 	mov	r16,r4
    a678:	913fffc4 	addi	r4,r18,-1
    a67c:	dfc00315 	stw	ra,12(sp)
    a680:	dc400115 	stw	r17,4(sp)
    a684:	0002f440 	call	2f44 <__mulsi3>
    a688:	8009883a 	mov	r4,r16
    a68c:	11401d04 	addi	r5,r2,116
    a690:	1023883a 	mov	r17,r2
    a694:	00057a00 	call	57a0 <_malloc_r>
    a698:	1021883a 	mov	r16,r2
    a69c:	10000726 	beq	r2,zero,a6bc <__sfmoreglue+0x5c>
    a6a0:	11000304 	addi	r4,r2,12
    a6a4:	10000015 	stw	zero,0(r2)
    a6a8:	14800115 	stw	r18,4(r2)
    a6ac:	11000215 	stw	r4,8(r2)
    a6b0:	89801a04 	addi	r6,r17,104
    a6b4:	000b883a 	mov	r5,zero
    a6b8:	00060f40 	call	60f4 <memset>
    a6bc:	8005883a 	mov	r2,r16
    a6c0:	dfc00317 	ldw	ra,12(sp)
    a6c4:	dc800217 	ldw	r18,8(sp)
    a6c8:	dc400117 	ldw	r17,4(sp)
    a6cc:	dc000017 	ldw	r16,0(sp)
    a6d0:	dec00404 	addi	sp,sp,16
    a6d4:	f800283a 	ret

0000a6d8 <__sfp>:
    a6d8:	defffb04 	addi	sp,sp,-20
    a6dc:	dc000015 	stw	r16,0(sp)
    a6e0:	040000b4 	movhi	r16,2
    a6e4:	843e1d04 	addi	r16,r16,-1932
    a6e8:	dcc00315 	stw	r19,12(sp)
    a6ec:	2027883a 	mov	r19,r4
    a6f0:	81000017 	ldw	r4,0(r16)
    a6f4:	dfc00415 	stw	ra,16(sp)
    a6f8:	dc800215 	stw	r18,8(sp)
    a6fc:	20800e17 	ldw	r2,56(r4)
    a700:	dc400115 	stw	r17,4(sp)
    a704:	1000021e 	bne	r2,zero,a710 <__sfp+0x38>
    a708:	000a4bc0 	call	a4bc <__sinit.part.1>
    a70c:	81000017 	ldw	r4,0(r16)
    a710:	2480b804 	addi	r18,r4,736
    a714:	047fffc4 	movi	r17,-1
    a718:	91000117 	ldw	r4,4(r18)
    a71c:	94000217 	ldw	r16,8(r18)
    a720:	213fffc4 	addi	r4,r4,-1
    a724:	20000a16 	blt	r4,zero,a750 <__sfp+0x78>
    a728:	8080030f 	ldh	r2,12(r16)
    a72c:	10000c26 	beq	r2,zero,a760 <__sfp+0x88>
    a730:	80c01d04 	addi	r3,r16,116
    a734:	00000206 	br	a740 <__sfp+0x68>
    a738:	18bfe60f 	ldh	r2,-104(r3)
    a73c:	10000826 	beq	r2,zero,a760 <__sfp+0x88>
    a740:	213fffc4 	addi	r4,r4,-1
    a744:	1c3ffd04 	addi	r16,r3,-12
    a748:	18c01a04 	addi	r3,r3,104
    a74c:	247ffa1e 	bne	r4,r17,a738 <__alt_data_end+0xfffd99f8>
    a750:	90800017 	ldw	r2,0(r18)
    a754:	10001d26 	beq	r2,zero,a7cc <__sfp+0xf4>
    a758:	1025883a 	mov	r18,r2
    a75c:	003fee06 	br	a718 <__alt_data_end+0xfffd99d8>
    a760:	00bfffc4 	movi	r2,-1
    a764:	8080038d 	sth	r2,14(r16)
    a768:	00800044 	movi	r2,1
    a76c:	8080030d 	sth	r2,12(r16)
    a770:	80001915 	stw	zero,100(r16)
    a774:	80000015 	stw	zero,0(r16)
    a778:	80000215 	stw	zero,8(r16)
    a77c:	80000115 	stw	zero,4(r16)
    a780:	80000415 	stw	zero,16(r16)
    a784:	80000515 	stw	zero,20(r16)
    a788:	80000615 	stw	zero,24(r16)
    a78c:	01800204 	movi	r6,8
    a790:	000b883a 	mov	r5,zero
    a794:	81001704 	addi	r4,r16,92
    a798:	00060f40 	call	60f4 <memset>
    a79c:	8005883a 	mov	r2,r16
    a7a0:	80000c15 	stw	zero,48(r16)
    a7a4:	80000d15 	stw	zero,52(r16)
    a7a8:	80001115 	stw	zero,68(r16)
    a7ac:	80001215 	stw	zero,72(r16)
    a7b0:	dfc00417 	ldw	ra,16(sp)
    a7b4:	dcc00317 	ldw	r19,12(sp)
    a7b8:	dc800217 	ldw	r18,8(sp)
    a7bc:	dc400117 	ldw	r17,4(sp)
    a7c0:	dc000017 	ldw	r16,0(sp)
    a7c4:	dec00504 	addi	sp,sp,20
    a7c8:	f800283a 	ret
    a7cc:	01400104 	movi	r5,4
    a7d0:	9809883a 	mov	r4,r19
    a7d4:	000a6600 	call	a660 <__sfmoreglue>
    a7d8:	90800015 	stw	r2,0(r18)
    a7dc:	103fde1e 	bne	r2,zero,a758 <__alt_data_end+0xfffd9a18>
    a7e0:	00800304 	movi	r2,12
    a7e4:	98800015 	stw	r2,0(r19)
    a7e8:	0005883a 	mov	r2,zero
    a7ec:	003ff006 	br	a7b0 <__alt_data_end+0xfffd9a70>

0000a7f0 <_cleanup>:
    a7f0:	008000b4 	movhi	r2,2
    a7f4:	10be1d04 	addi	r2,r2,-1932
    a7f8:	11000017 	ldw	r4,0(r2)
    a7fc:	01400074 	movhi	r5,1
    a800:	297a1c04 	addi	r5,r5,-6032
    a804:	000b2181 	jmpi	b218 <_fwalk_reent>

0000a808 <__sinit>:
    a808:	20800e17 	ldw	r2,56(r4)
    a80c:	10000126 	beq	r2,zero,a814 <__sinit+0xc>
    a810:	f800283a 	ret
    a814:	000a4bc1 	jmpi	a4bc <__sinit.part.1>

0000a818 <__sfp_lock_acquire>:
    a818:	f800283a 	ret

0000a81c <__sfp_lock_release>:
    a81c:	f800283a 	ret

0000a820 <__sinit_lock_acquire>:
    a820:	f800283a 	ret

0000a824 <__sinit_lock_release>:
    a824:	f800283a 	ret

0000a828 <__fp_lock_all>:
    a828:	008000b4 	movhi	r2,2
    a82c:	10be1e04 	addi	r2,r2,-1928
    a830:	11000017 	ldw	r4,0(r2)
    a834:	01400074 	movhi	r5,1
    a838:	29699604 	addi	r5,r5,-22952
    a83c:	000b1541 	jmpi	b154 <_fwalk>

0000a840 <__fp_unlock_all>:
    a840:	008000b4 	movhi	r2,2
    a844:	10be1e04 	addi	r2,r2,-1928
    a848:	11000017 	ldw	r4,0(r2)
    a84c:	01400074 	movhi	r5,1
    a850:	29692a04 	addi	r5,r5,-23384
    a854:	000b1541 	jmpi	b154 <_fwalk>

0000a858 <_malloc_trim_r>:
    a858:	defffb04 	addi	sp,sp,-20
    a85c:	dcc00315 	stw	r19,12(sp)
    a860:	04c000b4 	movhi	r19,2
    a864:	dc800215 	stw	r18,8(sp)
    a868:	dc400115 	stw	r17,4(sp)
    a86c:	dc000015 	stw	r16,0(sp)
    a870:	dfc00415 	stw	ra,16(sp)
    a874:	2821883a 	mov	r16,r5
    a878:	9cf85f04 	addi	r19,r19,-7812
    a87c:	2025883a 	mov	r18,r4
    a880:	00109d40 	call	109d4 <__malloc_lock>
    a884:	98800217 	ldw	r2,8(r19)
    a888:	14400117 	ldw	r17,4(r2)
    a88c:	00bfff04 	movi	r2,-4
    a890:	88a2703a 	and	r17,r17,r2
    a894:	8c21c83a 	sub	r16,r17,r16
    a898:	8403fbc4 	addi	r16,r16,4079
    a89c:	8020d33a 	srli	r16,r16,12
    a8a0:	0083ffc4 	movi	r2,4095
    a8a4:	843fffc4 	addi	r16,r16,-1
    a8a8:	8020933a 	slli	r16,r16,12
    a8ac:	1400060e 	bge	r2,r16,a8c8 <_malloc_trim_r+0x70>
    a8b0:	000b883a 	mov	r5,zero
    a8b4:	9009883a 	mov	r4,r18
    a8b8:	000635c0 	call	635c <_sbrk_r>
    a8bc:	98c00217 	ldw	r3,8(r19)
    a8c0:	1c47883a 	add	r3,r3,r17
    a8c4:	10c00a26 	beq	r2,r3,a8f0 <_malloc_trim_r+0x98>
    a8c8:	9009883a 	mov	r4,r18
    a8cc:	0010af40 	call	10af4 <__malloc_unlock>
    a8d0:	0005883a 	mov	r2,zero
    a8d4:	dfc00417 	ldw	ra,16(sp)
    a8d8:	dcc00317 	ldw	r19,12(sp)
    a8dc:	dc800217 	ldw	r18,8(sp)
    a8e0:	dc400117 	ldw	r17,4(sp)
    a8e4:	dc000017 	ldw	r16,0(sp)
    a8e8:	dec00504 	addi	sp,sp,20
    a8ec:	f800283a 	ret
    a8f0:	040bc83a 	sub	r5,zero,r16
    a8f4:	9009883a 	mov	r4,r18
    a8f8:	000635c0 	call	635c <_sbrk_r>
    a8fc:	00ffffc4 	movi	r3,-1
    a900:	10c00d26 	beq	r2,r3,a938 <_malloc_trim_r+0xe0>
    a904:	00c000b4 	movhi	r3,2
    a908:	18c56b04 	addi	r3,r3,5548
    a90c:	18800017 	ldw	r2,0(r3)
    a910:	99000217 	ldw	r4,8(r19)
    a914:	8c23c83a 	sub	r17,r17,r16
    a918:	8c400054 	ori	r17,r17,1
    a91c:	1421c83a 	sub	r16,r2,r16
    a920:	24400115 	stw	r17,4(r4)
    a924:	9009883a 	mov	r4,r18
    a928:	1c000015 	stw	r16,0(r3)
    a92c:	0010af40 	call	10af4 <__malloc_unlock>
    a930:	00800044 	movi	r2,1
    a934:	003fe706 	br	a8d4 <__alt_data_end+0xfffd9b94>
    a938:	000b883a 	mov	r5,zero
    a93c:	9009883a 	mov	r4,r18
    a940:	000635c0 	call	635c <_sbrk_r>
    a944:	99000217 	ldw	r4,8(r19)
    a948:	014003c4 	movi	r5,15
    a94c:	1107c83a 	sub	r3,r2,r4
    a950:	28ffdd0e 	bge	r5,r3,a8c8 <__alt_data_end+0xfffd9b88>
    a954:	014000b4 	movhi	r5,2
    a958:	297e1f04 	addi	r5,r5,-1924
    a95c:	29400017 	ldw	r5,0(r5)
    a960:	18c00054 	ori	r3,r3,1
    a964:	20c00115 	stw	r3,4(r4)
    a968:	00c000b4 	movhi	r3,2
    a96c:	1145c83a 	sub	r2,r2,r5
    a970:	18c56b04 	addi	r3,r3,5548
    a974:	18800015 	stw	r2,0(r3)
    a978:	003fd306 	br	a8c8 <__alt_data_end+0xfffd9b88>

0000a97c <_free_r>:
    a97c:	28004126 	beq	r5,zero,aa84 <_free_r+0x108>
    a980:	defffd04 	addi	sp,sp,-12
    a984:	dc400115 	stw	r17,4(sp)
    a988:	dc000015 	stw	r16,0(sp)
    a98c:	2023883a 	mov	r17,r4
    a990:	2821883a 	mov	r16,r5
    a994:	dfc00215 	stw	ra,8(sp)
    a998:	00109d40 	call	109d4 <__malloc_lock>
    a99c:	81ffff17 	ldw	r7,-4(r16)
    a9a0:	00bfff84 	movi	r2,-2
    a9a4:	010000b4 	movhi	r4,2
    a9a8:	81bffe04 	addi	r6,r16,-8
    a9ac:	3884703a 	and	r2,r7,r2
    a9b0:	21385f04 	addi	r4,r4,-7812
    a9b4:	308b883a 	add	r5,r6,r2
    a9b8:	2a400117 	ldw	r9,4(r5)
    a9bc:	22000217 	ldw	r8,8(r4)
    a9c0:	00ffff04 	movi	r3,-4
    a9c4:	48c6703a 	and	r3,r9,r3
    a9c8:	2a005726 	beq	r5,r8,ab28 <_free_r+0x1ac>
    a9cc:	28c00115 	stw	r3,4(r5)
    a9d0:	39c0004c 	andi	r7,r7,1
    a9d4:	3800091e 	bne	r7,zero,a9fc <_free_r+0x80>
    a9d8:	823ffe17 	ldw	r8,-8(r16)
    a9dc:	22400204 	addi	r9,r4,8
    a9e0:	320dc83a 	sub	r6,r6,r8
    a9e4:	31c00217 	ldw	r7,8(r6)
    a9e8:	1205883a 	add	r2,r2,r8
    a9ec:	3a406526 	beq	r7,r9,ab84 <_free_r+0x208>
    a9f0:	32000317 	ldw	r8,12(r6)
    a9f4:	3a000315 	stw	r8,12(r7)
    a9f8:	41c00215 	stw	r7,8(r8)
    a9fc:	28cf883a 	add	r7,r5,r3
    aa00:	39c00117 	ldw	r7,4(r7)
    aa04:	39c0004c 	andi	r7,r7,1
    aa08:	38003a26 	beq	r7,zero,aaf4 <_free_r+0x178>
    aa0c:	10c00054 	ori	r3,r2,1
    aa10:	30c00115 	stw	r3,4(r6)
    aa14:	3087883a 	add	r3,r6,r2
    aa18:	18800015 	stw	r2,0(r3)
    aa1c:	00c07fc4 	movi	r3,511
    aa20:	18801936 	bltu	r3,r2,aa88 <_free_r+0x10c>
    aa24:	1004d0fa 	srli	r2,r2,3
    aa28:	01c00044 	movi	r7,1
    aa2c:	21400117 	ldw	r5,4(r4)
    aa30:	10c00044 	addi	r3,r2,1
    aa34:	18c7883a 	add	r3,r3,r3
    aa38:	1005d0ba 	srai	r2,r2,2
    aa3c:	18c7883a 	add	r3,r3,r3
    aa40:	18c7883a 	add	r3,r3,r3
    aa44:	1907883a 	add	r3,r3,r4
    aa48:	3884983a 	sll	r2,r7,r2
    aa4c:	19c00017 	ldw	r7,0(r3)
    aa50:	1a3ffe04 	addi	r8,r3,-8
    aa54:	1144b03a 	or	r2,r2,r5
    aa58:	32000315 	stw	r8,12(r6)
    aa5c:	31c00215 	stw	r7,8(r6)
    aa60:	20800115 	stw	r2,4(r4)
    aa64:	19800015 	stw	r6,0(r3)
    aa68:	39800315 	stw	r6,12(r7)
    aa6c:	8809883a 	mov	r4,r17
    aa70:	dfc00217 	ldw	ra,8(sp)
    aa74:	dc400117 	ldw	r17,4(sp)
    aa78:	dc000017 	ldw	r16,0(sp)
    aa7c:	dec00304 	addi	sp,sp,12
    aa80:	0010af41 	jmpi	10af4 <__malloc_unlock>
    aa84:	f800283a 	ret
    aa88:	100ad27a 	srli	r5,r2,9
    aa8c:	00c00104 	movi	r3,4
    aa90:	19404a36 	bltu	r3,r5,abbc <_free_r+0x240>
    aa94:	100ad1ba 	srli	r5,r2,6
    aa98:	28c00e44 	addi	r3,r5,57
    aa9c:	18c7883a 	add	r3,r3,r3
    aaa0:	29400e04 	addi	r5,r5,56
    aaa4:	18c7883a 	add	r3,r3,r3
    aaa8:	18c7883a 	add	r3,r3,r3
    aaac:	1909883a 	add	r4,r3,r4
    aab0:	20c00017 	ldw	r3,0(r4)
    aab4:	01c000b4 	movhi	r7,2
    aab8:	213ffe04 	addi	r4,r4,-8
    aabc:	39f85f04 	addi	r7,r7,-7812
    aac0:	20c04426 	beq	r4,r3,abd4 <_free_r+0x258>
    aac4:	01ffff04 	movi	r7,-4
    aac8:	19400117 	ldw	r5,4(r3)
    aacc:	29ca703a 	and	r5,r5,r7
    aad0:	1140022e 	bgeu	r2,r5,aadc <_free_r+0x160>
    aad4:	18c00217 	ldw	r3,8(r3)
    aad8:	20fffb1e 	bne	r4,r3,aac8 <__alt_data_end+0xfffd9d88>
    aadc:	19000317 	ldw	r4,12(r3)
    aae0:	31000315 	stw	r4,12(r6)
    aae4:	30c00215 	stw	r3,8(r6)
    aae8:	21800215 	stw	r6,8(r4)
    aaec:	19800315 	stw	r6,12(r3)
    aaf0:	003fde06 	br	aa6c <__alt_data_end+0xfffd9d2c>
    aaf4:	29c00217 	ldw	r7,8(r5)
    aaf8:	10c5883a 	add	r2,r2,r3
    aafc:	00c000b4 	movhi	r3,2
    ab00:	18f86104 	addi	r3,r3,-7804
    ab04:	38c03b26 	beq	r7,r3,abf4 <_free_r+0x278>
    ab08:	2a000317 	ldw	r8,12(r5)
    ab0c:	11400054 	ori	r5,r2,1
    ab10:	3087883a 	add	r3,r6,r2
    ab14:	3a000315 	stw	r8,12(r7)
    ab18:	41c00215 	stw	r7,8(r8)
    ab1c:	31400115 	stw	r5,4(r6)
    ab20:	18800015 	stw	r2,0(r3)
    ab24:	003fbd06 	br	aa1c <__alt_data_end+0xfffd9cdc>
    ab28:	39c0004c 	andi	r7,r7,1
    ab2c:	10c5883a 	add	r2,r2,r3
    ab30:	3800071e 	bne	r7,zero,ab50 <_free_r+0x1d4>
    ab34:	81fffe17 	ldw	r7,-8(r16)
    ab38:	31cdc83a 	sub	r6,r6,r7
    ab3c:	30c00317 	ldw	r3,12(r6)
    ab40:	31400217 	ldw	r5,8(r6)
    ab44:	11c5883a 	add	r2,r2,r7
    ab48:	28c00315 	stw	r3,12(r5)
    ab4c:	19400215 	stw	r5,8(r3)
    ab50:	10c00054 	ori	r3,r2,1
    ab54:	30c00115 	stw	r3,4(r6)
    ab58:	00c000b4 	movhi	r3,2
    ab5c:	18fe2004 	addi	r3,r3,-1920
    ab60:	18c00017 	ldw	r3,0(r3)
    ab64:	21800215 	stw	r6,8(r4)
    ab68:	10ffc036 	bltu	r2,r3,aa6c <__alt_data_end+0xfffd9d2c>
    ab6c:	008000b4 	movhi	r2,2
    ab70:	10854604 	addi	r2,r2,5400
    ab74:	11400017 	ldw	r5,0(r2)
    ab78:	8809883a 	mov	r4,r17
    ab7c:	000a8580 	call	a858 <_malloc_trim_r>
    ab80:	003fba06 	br	aa6c <__alt_data_end+0xfffd9d2c>
    ab84:	28c9883a 	add	r4,r5,r3
    ab88:	21000117 	ldw	r4,4(r4)
    ab8c:	2100004c 	andi	r4,r4,1
    ab90:	2000391e 	bne	r4,zero,ac78 <_free_r+0x2fc>
    ab94:	29c00217 	ldw	r7,8(r5)
    ab98:	29000317 	ldw	r4,12(r5)
    ab9c:	1885883a 	add	r2,r3,r2
    aba0:	10c00054 	ori	r3,r2,1
    aba4:	39000315 	stw	r4,12(r7)
    aba8:	21c00215 	stw	r7,8(r4)
    abac:	30c00115 	stw	r3,4(r6)
    abb0:	308d883a 	add	r6,r6,r2
    abb4:	30800015 	stw	r2,0(r6)
    abb8:	003fac06 	br	aa6c <__alt_data_end+0xfffd9d2c>
    abbc:	00c00504 	movi	r3,20
    abc0:	19401536 	bltu	r3,r5,ac18 <_free_r+0x29c>
    abc4:	28c01704 	addi	r3,r5,92
    abc8:	18c7883a 	add	r3,r3,r3
    abcc:	294016c4 	addi	r5,r5,91
    abd0:	003fb406 	br	aaa4 <__alt_data_end+0xfffd9d64>
    abd4:	280bd0ba 	srai	r5,r5,2
    abd8:	00c00044 	movi	r3,1
    abdc:	38800117 	ldw	r2,4(r7)
    abe0:	194a983a 	sll	r5,r3,r5
    abe4:	2007883a 	mov	r3,r4
    abe8:	2884b03a 	or	r2,r5,r2
    abec:	38800115 	stw	r2,4(r7)
    abf0:	003fbb06 	br	aae0 <__alt_data_end+0xfffd9da0>
    abf4:	21800515 	stw	r6,20(r4)
    abf8:	21800415 	stw	r6,16(r4)
    abfc:	10c00054 	ori	r3,r2,1
    ac00:	31c00315 	stw	r7,12(r6)
    ac04:	31c00215 	stw	r7,8(r6)
    ac08:	30c00115 	stw	r3,4(r6)
    ac0c:	308d883a 	add	r6,r6,r2
    ac10:	30800015 	stw	r2,0(r6)
    ac14:	003f9506 	br	aa6c <__alt_data_end+0xfffd9d2c>
    ac18:	00c01504 	movi	r3,84
    ac1c:	19400536 	bltu	r3,r5,ac34 <_free_r+0x2b8>
    ac20:	100ad33a 	srli	r5,r2,12
    ac24:	28c01bc4 	addi	r3,r5,111
    ac28:	18c7883a 	add	r3,r3,r3
    ac2c:	29401b84 	addi	r5,r5,110
    ac30:	003f9c06 	br	aaa4 <__alt_data_end+0xfffd9d64>
    ac34:	00c05504 	movi	r3,340
    ac38:	19400536 	bltu	r3,r5,ac50 <_free_r+0x2d4>
    ac3c:	100ad3fa 	srli	r5,r2,15
    ac40:	28c01e04 	addi	r3,r5,120
    ac44:	18c7883a 	add	r3,r3,r3
    ac48:	29401dc4 	addi	r5,r5,119
    ac4c:	003f9506 	br	aaa4 <__alt_data_end+0xfffd9d64>
    ac50:	00c15504 	movi	r3,1364
    ac54:	19400536 	bltu	r3,r5,ac6c <_free_r+0x2f0>
    ac58:	100ad4ba 	srli	r5,r2,18
    ac5c:	28c01f44 	addi	r3,r5,125
    ac60:	18c7883a 	add	r3,r3,r3
    ac64:	29401f04 	addi	r5,r5,124
    ac68:	003f8e06 	br	aaa4 <__alt_data_end+0xfffd9d64>
    ac6c:	00c03f84 	movi	r3,254
    ac70:	01401f84 	movi	r5,126
    ac74:	003f8b06 	br	aaa4 <__alt_data_end+0xfffd9d64>
    ac78:	10c00054 	ori	r3,r2,1
    ac7c:	30c00115 	stw	r3,4(r6)
    ac80:	308d883a 	add	r6,r6,r2
    ac84:	30800015 	stw	r2,0(r6)
    ac88:	003f7806 	br	aa6c <__alt_data_end+0xfffd9d2c>

0000ac8c <__sfvwrite_r>:
    ac8c:	30800217 	ldw	r2,8(r6)
    ac90:	10006726 	beq	r2,zero,ae30 <__sfvwrite_r+0x1a4>
    ac94:	28c0030b 	ldhu	r3,12(r5)
    ac98:	defff404 	addi	sp,sp,-48
    ac9c:	dd400715 	stw	r21,28(sp)
    aca0:	dd000615 	stw	r20,24(sp)
    aca4:	dc000215 	stw	r16,8(sp)
    aca8:	dfc00b15 	stw	ra,44(sp)
    acac:	df000a15 	stw	fp,40(sp)
    acb0:	ddc00915 	stw	r23,36(sp)
    acb4:	dd800815 	stw	r22,32(sp)
    acb8:	dcc00515 	stw	r19,20(sp)
    acbc:	dc800415 	stw	r18,16(sp)
    acc0:	dc400315 	stw	r17,12(sp)
    acc4:	1880020c 	andi	r2,r3,8
    acc8:	2821883a 	mov	r16,r5
    accc:	202b883a 	mov	r21,r4
    acd0:	3029883a 	mov	r20,r6
    acd4:	10002726 	beq	r2,zero,ad74 <__sfvwrite_r+0xe8>
    acd8:	28800417 	ldw	r2,16(r5)
    acdc:	10002526 	beq	r2,zero,ad74 <__sfvwrite_r+0xe8>
    ace0:	1880008c 	andi	r2,r3,2
    ace4:	a4400017 	ldw	r17,0(r20)
    ace8:	10002a26 	beq	r2,zero,ad94 <__sfvwrite_r+0x108>
    acec:	05a00034 	movhi	r22,32768
    acf0:	0027883a 	mov	r19,zero
    acf4:	0025883a 	mov	r18,zero
    acf8:	b5bf0004 	addi	r22,r22,-1024
    acfc:	980d883a 	mov	r6,r19
    ad00:	a809883a 	mov	r4,r21
    ad04:	90004626 	beq	r18,zero,ae20 <__sfvwrite_r+0x194>
    ad08:	900f883a 	mov	r7,r18
    ad0c:	b480022e 	bgeu	r22,r18,ad18 <__sfvwrite_r+0x8c>
    ad10:	01e00034 	movhi	r7,32768
    ad14:	39ff0004 	addi	r7,r7,-1024
    ad18:	80800917 	ldw	r2,36(r16)
    ad1c:	81400717 	ldw	r5,28(r16)
    ad20:	103ee83a 	callr	r2
    ad24:	00805a0e 	bge	zero,r2,ae90 <__sfvwrite_r+0x204>
    ad28:	a0c00217 	ldw	r3,8(r20)
    ad2c:	98a7883a 	add	r19,r19,r2
    ad30:	90a5c83a 	sub	r18,r18,r2
    ad34:	1885c83a 	sub	r2,r3,r2
    ad38:	a0800215 	stw	r2,8(r20)
    ad3c:	103fef1e 	bne	r2,zero,acfc <__alt_data_end+0xfffd9fbc>
    ad40:	0005883a 	mov	r2,zero
    ad44:	dfc00b17 	ldw	ra,44(sp)
    ad48:	df000a17 	ldw	fp,40(sp)
    ad4c:	ddc00917 	ldw	r23,36(sp)
    ad50:	dd800817 	ldw	r22,32(sp)
    ad54:	dd400717 	ldw	r21,28(sp)
    ad58:	dd000617 	ldw	r20,24(sp)
    ad5c:	dcc00517 	ldw	r19,20(sp)
    ad60:	dc800417 	ldw	r18,16(sp)
    ad64:	dc400317 	ldw	r17,12(sp)
    ad68:	dc000217 	ldw	r16,8(sp)
    ad6c:	dec00c04 	addi	sp,sp,48
    ad70:	f800283a 	ret
    ad74:	800b883a 	mov	r5,r16
    ad78:	a809883a 	mov	r4,r21
    ad7c:	00087fc0 	call	87fc <__swsetup_r>
    ad80:	1000ee1e 	bne	r2,zero,b13c <__sfvwrite_r+0x4b0>
    ad84:	80c0030b 	ldhu	r3,12(r16)
    ad88:	a4400017 	ldw	r17,0(r20)
    ad8c:	1880008c 	andi	r2,r3,2
    ad90:	103fd61e 	bne	r2,zero,acec <__alt_data_end+0xfffd9fac>
    ad94:	1880004c 	andi	r2,r3,1
    ad98:	1000421e 	bne	r2,zero,aea4 <__sfvwrite_r+0x218>
    ad9c:	0039883a 	mov	fp,zero
    ada0:	0025883a 	mov	r18,zero
    ada4:	90001a26 	beq	r18,zero,ae10 <__sfvwrite_r+0x184>
    ada8:	1880800c 	andi	r2,r3,512
    adac:	84c00217 	ldw	r19,8(r16)
    adb0:	10002126 	beq	r2,zero,ae38 <__sfvwrite_r+0x1ac>
    adb4:	982f883a 	mov	r23,r19
    adb8:	94c09636 	bltu	r18,r19,b014 <__sfvwrite_r+0x388>
    adbc:	1881200c 	andi	r2,r3,1152
    adc0:	1000a11e 	bne	r2,zero,b048 <__sfvwrite_r+0x3bc>
    adc4:	81000017 	ldw	r4,0(r16)
    adc8:	b80d883a 	mov	r6,r23
    adcc:	e00b883a 	mov	r5,fp
    add0:	000b6580 	call	b658 <memmove>
    add4:	80c00217 	ldw	r3,8(r16)
    add8:	81000017 	ldw	r4,0(r16)
    addc:	9005883a 	mov	r2,r18
    ade0:	1ce7c83a 	sub	r19,r3,r19
    ade4:	25cf883a 	add	r7,r4,r23
    ade8:	84c00215 	stw	r19,8(r16)
    adec:	81c00015 	stw	r7,0(r16)
    adf0:	a0c00217 	ldw	r3,8(r20)
    adf4:	e0b9883a 	add	fp,fp,r2
    adf8:	90a5c83a 	sub	r18,r18,r2
    adfc:	18a7c83a 	sub	r19,r3,r2
    ae00:	a4c00215 	stw	r19,8(r20)
    ae04:	983fce26 	beq	r19,zero,ad40 <__alt_data_end+0xfffda000>
    ae08:	80c0030b 	ldhu	r3,12(r16)
    ae0c:	903fe61e 	bne	r18,zero,ada8 <__alt_data_end+0xfffda068>
    ae10:	8f000017 	ldw	fp,0(r17)
    ae14:	8c800117 	ldw	r18,4(r17)
    ae18:	8c400204 	addi	r17,r17,8
    ae1c:	003fe106 	br	ada4 <__alt_data_end+0xfffda064>
    ae20:	8cc00017 	ldw	r19,0(r17)
    ae24:	8c800117 	ldw	r18,4(r17)
    ae28:	8c400204 	addi	r17,r17,8
    ae2c:	003fb306 	br	acfc <__alt_data_end+0xfffd9fbc>
    ae30:	0005883a 	mov	r2,zero
    ae34:	f800283a 	ret
    ae38:	81000017 	ldw	r4,0(r16)
    ae3c:	80800417 	ldw	r2,16(r16)
    ae40:	11005a36 	bltu	r2,r4,afac <__sfvwrite_r+0x320>
    ae44:	85c00517 	ldw	r23,20(r16)
    ae48:	95c05836 	bltu	r18,r23,afac <__sfvwrite_r+0x320>
    ae4c:	00a00034 	movhi	r2,32768
    ae50:	10bfffc4 	addi	r2,r2,-1
    ae54:	9009883a 	mov	r4,r18
    ae58:	1480012e 	bgeu	r2,r18,ae60 <__sfvwrite_r+0x1d4>
    ae5c:	1009883a 	mov	r4,r2
    ae60:	b80b883a 	mov	r5,r23
    ae64:	0002d900 	call	2d90 <__divsi3>
    ae68:	b80b883a 	mov	r5,r23
    ae6c:	1009883a 	mov	r4,r2
    ae70:	0002f440 	call	2f44 <__mulsi3>
    ae74:	81400717 	ldw	r5,28(r16)
    ae78:	80c00917 	ldw	r3,36(r16)
    ae7c:	100f883a 	mov	r7,r2
    ae80:	e00d883a 	mov	r6,fp
    ae84:	a809883a 	mov	r4,r21
    ae88:	183ee83a 	callr	r3
    ae8c:	00bfd816 	blt	zero,r2,adf0 <__alt_data_end+0xfffda0b0>
    ae90:	8080030b 	ldhu	r2,12(r16)
    ae94:	10801014 	ori	r2,r2,64
    ae98:	8080030d 	sth	r2,12(r16)
    ae9c:	00bfffc4 	movi	r2,-1
    aea0:	003fa806 	br	ad44 <__alt_data_end+0xfffda004>
    aea4:	0027883a 	mov	r19,zero
    aea8:	0011883a 	mov	r8,zero
    aeac:	0039883a 	mov	fp,zero
    aeb0:	0025883a 	mov	r18,zero
    aeb4:	90001f26 	beq	r18,zero,af34 <__sfvwrite_r+0x2a8>
    aeb8:	40005a26 	beq	r8,zero,b024 <__sfvwrite_r+0x398>
    aebc:	982d883a 	mov	r22,r19
    aec0:	94c0012e 	bgeu	r18,r19,aec8 <__sfvwrite_r+0x23c>
    aec4:	902d883a 	mov	r22,r18
    aec8:	81000017 	ldw	r4,0(r16)
    aecc:	80800417 	ldw	r2,16(r16)
    aed0:	b02f883a 	mov	r23,r22
    aed4:	81c00517 	ldw	r7,20(r16)
    aed8:	1100032e 	bgeu	r2,r4,aee8 <__sfvwrite_r+0x25c>
    aedc:	80c00217 	ldw	r3,8(r16)
    aee0:	38c7883a 	add	r3,r7,r3
    aee4:	1d801816 	blt	r3,r22,af48 <__sfvwrite_r+0x2bc>
    aee8:	b1c03e16 	blt	r22,r7,afe4 <__sfvwrite_r+0x358>
    aeec:	80800917 	ldw	r2,36(r16)
    aef0:	81400717 	ldw	r5,28(r16)
    aef4:	e00d883a 	mov	r6,fp
    aef8:	da000115 	stw	r8,4(sp)
    aefc:	a809883a 	mov	r4,r21
    af00:	103ee83a 	callr	r2
    af04:	102f883a 	mov	r23,r2
    af08:	da000117 	ldw	r8,4(sp)
    af0c:	00bfe00e 	bge	zero,r2,ae90 <__alt_data_end+0xfffda150>
    af10:	9de7c83a 	sub	r19,r19,r23
    af14:	98001f26 	beq	r19,zero,af94 <__sfvwrite_r+0x308>
    af18:	a0800217 	ldw	r2,8(r20)
    af1c:	e5f9883a 	add	fp,fp,r23
    af20:	95e5c83a 	sub	r18,r18,r23
    af24:	15efc83a 	sub	r23,r2,r23
    af28:	a5c00215 	stw	r23,8(r20)
    af2c:	b83f8426 	beq	r23,zero,ad40 <__alt_data_end+0xfffda000>
    af30:	903fe11e 	bne	r18,zero,aeb8 <__alt_data_end+0xfffda178>
    af34:	8f000017 	ldw	fp,0(r17)
    af38:	8c800117 	ldw	r18,4(r17)
    af3c:	0011883a 	mov	r8,zero
    af40:	8c400204 	addi	r17,r17,8
    af44:	003fdb06 	br	aeb4 <__alt_data_end+0xfffda174>
    af48:	180d883a 	mov	r6,r3
    af4c:	e00b883a 	mov	r5,fp
    af50:	da000115 	stw	r8,4(sp)
    af54:	d8c00015 	stw	r3,0(sp)
    af58:	000b6580 	call	b658 <memmove>
    af5c:	d8c00017 	ldw	r3,0(sp)
    af60:	80800017 	ldw	r2,0(r16)
    af64:	800b883a 	mov	r5,r16
    af68:	a809883a 	mov	r4,r21
    af6c:	10c5883a 	add	r2,r2,r3
    af70:	80800015 	stw	r2,0(r16)
    af74:	d8c00015 	stw	r3,0(sp)
    af78:	000a41c0 	call	a41c <_fflush_r>
    af7c:	d8c00017 	ldw	r3,0(sp)
    af80:	da000117 	ldw	r8,4(sp)
    af84:	103fc21e 	bne	r2,zero,ae90 <__alt_data_end+0xfffda150>
    af88:	182f883a 	mov	r23,r3
    af8c:	9de7c83a 	sub	r19,r19,r23
    af90:	983fe11e 	bne	r19,zero,af18 <__alt_data_end+0xfffda1d8>
    af94:	800b883a 	mov	r5,r16
    af98:	a809883a 	mov	r4,r21
    af9c:	000a41c0 	call	a41c <_fflush_r>
    afa0:	103fbb1e 	bne	r2,zero,ae90 <__alt_data_end+0xfffda150>
    afa4:	0011883a 	mov	r8,zero
    afa8:	003fdb06 	br	af18 <__alt_data_end+0xfffda1d8>
    afac:	94c0012e 	bgeu	r18,r19,afb4 <__sfvwrite_r+0x328>
    afb0:	9027883a 	mov	r19,r18
    afb4:	980d883a 	mov	r6,r19
    afb8:	e00b883a 	mov	r5,fp
    afbc:	000b6580 	call	b658 <memmove>
    afc0:	80800217 	ldw	r2,8(r16)
    afc4:	80c00017 	ldw	r3,0(r16)
    afc8:	14c5c83a 	sub	r2,r2,r19
    afcc:	1cc7883a 	add	r3,r3,r19
    afd0:	80800215 	stw	r2,8(r16)
    afd4:	80c00015 	stw	r3,0(r16)
    afd8:	10004326 	beq	r2,zero,b0e8 <__sfvwrite_r+0x45c>
    afdc:	9805883a 	mov	r2,r19
    afe0:	003f8306 	br	adf0 <__alt_data_end+0xfffda0b0>
    afe4:	b00d883a 	mov	r6,r22
    afe8:	e00b883a 	mov	r5,fp
    afec:	da000115 	stw	r8,4(sp)
    aff0:	000b6580 	call	b658 <memmove>
    aff4:	80800217 	ldw	r2,8(r16)
    aff8:	80c00017 	ldw	r3,0(r16)
    affc:	da000117 	ldw	r8,4(sp)
    b000:	1585c83a 	sub	r2,r2,r22
    b004:	1dad883a 	add	r22,r3,r22
    b008:	80800215 	stw	r2,8(r16)
    b00c:	85800015 	stw	r22,0(r16)
    b010:	003fbf06 	br	af10 <__alt_data_end+0xfffda1d0>
    b014:	81000017 	ldw	r4,0(r16)
    b018:	9027883a 	mov	r19,r18
    b01c:	902f883a 	mov	r23,r18
    b020:	003f6906 	br	adc8 <__alt_data_end+0xfffda088>
    b024:	900d883a 	mov	r6,r18
    b028:	01400284 	movi	r5,10
    b02c:	e009883a 	mov	r4,fp
    b030:	000b5740 	call	b574 <memchr>
    b034:	10003e26 	beq	r2,zero,b130 <__sfvwrite_r+0x4a4>
    b038:	10800044 	addi	r2,r2,1
    b03c:	1727c83a 	sub	r19,r2,fp
    b040:	02000044 	movi	r8,1
    b044:	003f9d06 	br	aebc <__alt_data_end+0xfffda17c>
    b048:	80800517 	ldw	r2,20(r16)
    b04c:	81400417 	ldw	r5,16(r16)
    b050:	81c00017 	ldw	r7,0(r16)
    b054:	10a7883a 	add	r19,r2,r2
    b058:	9885883a 	add	r2,r19,r2
    b05c:	1026d7fa 	srli	r19,r2,31
    b060:	396dc83a 	sub	r22,r7,r5
    b064:	b1000044 	addi	r4,r22,1
    b068:	9885883a 	add	r2,r19,r2
    b06c:	1027d07a 	srai	r19,r2,1
    b070:	2485883a 	add	r2,r4,r18
    b074:	980d883a 	mov	r6,r19
    b078:	9880022e 	bgeu	r19,r2,b084 <__sfvwrite_r+0x3f8>
    b07c:	1027883a 	mov	r19,r2
    b080:	100d883a 	mov	r6,r2
    b084:	18c1000c 	andi	r3,r3,1024
    b088:	18001c26 	beq	r3,zero,b0fc <__sfvwrite_r+0x470>
    b08c:	300b883a 	mov	r5,r6
    b090:	a809883a 	mov	r4,r21
    b094:	00057a00 	call	57a0 <_malloc_r>
    b098:	102f883a 	mov	r23,r2
    b09c:	10002926 	beq	r2,zero,b144 <__sfvwrite_r+0x4b8>
    b0a0:	81400417 	ldw	r5,16(r16)
    b0a4:	b00d883a 	mov	r6,r22
    b0a8:	1009883a 	mov	r4,r2
    b0ac:	0005fac0 	call	5fac <memcpy>
    b0b0:	8080030b 	ldhu	r2,12(r16)
    b0b4:	00fedfc4 	movi	r3,-1153
    b0b8:	10c4703a 	and	r2,r2,r3
    b0bc:	10802014 	ori	r2,r2,128
    b0c0:	8080030d 	sth	r2,12(r16)
    b0c4:	bd89883a 	add	r4,r23,r22
    b0c8:	9d8fc83a 	sub	r7,r19,r22
    b0cc:	85c00415 	stw	r23,16(r16)
    b0d0:	84c00515 	stw	r19,20(r16)
    b0d4:	81000015 	stw	r4,0(r16)
    b0d8:	9027883a 	mov	r19,r18
    b0dc:	81c00215 	stw	r7,8(r16)
    b0e0:	902f883a 	mov	r23,r18
    b0e4:	003f3806 	br	adc8 <__alt_data_end+0xfffda088>
    b0e8:	800b883a 	mov	r5,r16
    b0ec:	a809883a 	mov	r4,r21
    b0f0:	000a41c0 	call	a41c <_fflush_r>
    b0f4:	103fb926 	beq	r2,zero,afdc <__alt_data_end+0xfffda29c>
    b0f8:	003f6506 	br	ae90 <__alt_data_end+0xfffda150>
    b0fc:	a809883a 	mov	r4,r21
    b100:	000c86c0 	call	c86c <_realloc_r>
    b104:	102f883a 	mov	r23,r2
    b108:	103fee1e 	bne	r2,zero,b0c4 <__alt_data_end+0xfffda384>
    b10c:	81400417 	ldw	r5,16(r16)
    b110:	a809883a 	mov	r4,r21
    b114:	000a97c0 	call	a97c <_free_r>
    b118:	8080030b 	ldhu	r2,12(r16)
    b11c:	00ffdfc4 	movi	r3,-129
    b120:	1884703a 	and	r2,r3,r2
    b124:	00c00304 	movi	r3,12
    b128:	a8c00015 	stw	r3,0(r21)
    b12c:	003f5906 	br	ae94 <__alt_data_end+0xfffda154>
    b130:	94c00044 	addi	r19,r18,1
    b134:	02000044 	movi	r8,1
    b138:	003f6006 	br	aebc <__alt_data_end+0xfffda17c>
    b13c:	00bfffc4 	movi	r2,-1
    b140:	003f0006 	br	ad44 <__alt_data_end+0xfffda004>
    b144:	00800304 	movi	r2,12
    b148:	a8800015 	stw	r2,0(r21)
    b14c:	8080030b 	ldhu	r2,12(r16)
    b150:	003f5006 	br	ae94 <__alt_data_end+0xfffda154>

0000b154 <_fwalk>:
    b154:	defff704 	addi	sp,sp,-36
    b158:	dd000415 	stw	r20,16(sp)
    b15c:	dfc00815 	stw	ra,32(sp)
    b160:	ddc00715 	stw	r23,28(sp)
    b164:	dd800615 	stw	r22,24(sp)
    b168:	dd400515 	stw	r21,20(sp)
    b16c:	dcc00315 	stw	r19,12(sp)
    b170:	dc800215 	stw	r18,8(sp)
    b174:	dc400115 	stw	r17,4(sp)
    b178:	dc000015 	stw	r16,0(sp)
    b17c:	2500b804 	addi	r20,r4,736
    b180:	a0002326 	beq	r20,zero,b210 <_fwalk+0xbc>
    b184:	282b883a 	mov	r21,r5
    b188:	002f883a 	mov	r23,zero
    b18c:	05800044 	movi	r22,1
    b190:	04ffffc4 	movi	r19,-1
    b194:	a4400117 	ldw	r17,4(r20)
    b198:	a4800217 	ldw	r18,8(r20)
    b19c:	8c7fffc4 	addi	r17,r17,-1
    b1a0:	88000d16 	blt	r17,zero,b1d8 <_fwalk+0x84>
    b1a4:	94000304 	addi	r16,r18,12
    b1a8:	94800384 	addi	r18,r18,14
    b1ac:	8080000b 	ldhu	r2,0(r16)
    b1b0:	8c7fffc4 	addi	r17,r17,-1
    b1b4:	813ffd04 	addi	r4,r16,-12
    b1b8:	b080042e 	bgeu	r22,r2,b1cc <_fwalk+0x78>
    b1bc:	9080000f 	ldh	r2,0(r18)
    b1c0:	14c00226 	beq	r2,r19,b1cc <_fwalk+0x78>
    b1c4:	a83ee83a 	callr	r21
    b1c8:	b8aeb03a 	or	r23,r23,r2
    b1cc:	84001a04 	addi	r16,r16,104
    b1d0:	94801a04 	addi	r18,r18,104
    b1d4:	8cfff51e 	bne	r17,r19,b1ac <__alt_data_end+0xfffda46c>
    b1d8:	a5000017 	ldw	r20,0(r20)
    b1dc:	a03fed1e 	bne	r20,zero,b194 <__alt_data_end+0xfffda454>
    b1e0:	b805883a 	mov	r2,r23
    b1e4:	dfc00817 	ldw	ra,32(sp)
    b1e8:	ddc00717 	ldw	r23,28(sp)
    b1ec:	dd800617 	ldw	r22,24(sp)
    b1f0:	dd400517 	ldw	r21,20(sp)
    b1f4:	dd000417 	ldw	r20,16(sp)
    b1f8:	dcc00317 	ldw	r19,12(sp)
    b1fc:	dc800217 	ldw	r18,8(sp)
    b200:	dc400117 	ldw	r17,4(sp)
    b204:	dc000017 	ldw	r16,0(sp)
    b208:	dec00904 	addi	sp,sp,36
    b20c:	f800283a 	ret
    b210:	002f883a 	mov	r23,zero
    b214:	003ff206 	br	b1e0 <__alt_data_end+0xfffda4a0>

0000b218 <_fwalk_reent>:
    b218:	defff704 	addi	sp,sp,-36
    b21c:	dd000415 	stw	r20,16(sp)
    b220:	dfc00815 	stw	ra,32(sp)
    b224:	ddc00715 	stw	r23,28(sp)
    b228:	dd800615 	stw	r22,24(sp)
    b22c:	dd400515 	stw	r21,20(sp)
    b230:	dcc00315 	stw	r19,12(sp)
    b234:	dc800215 	stw	r18,8(sp)
    b238:	dc400115 	stw	r17,4(sp)
    b23c:	dc000015 	stw	r16,0(sp)
    b240:	2500b804 	addi	r20,r4,736
    b244:	a0002326 	beq	r20,zero,b2d4 <_fwalk_reent+0xbc>
    b248:	282b883a 	mov	r21,r5
    b24c:	2027883a 	mov	r19,r4
    b250:	002f883a 	mov	r23,zero
    b254:	05800044 	movi	r22,1
    b258:	04bfffc4 	movi	r18,-1
    b25c:	a4400117 	ldw	r17,4(r20)
    b260:	a4000217 	ldw	r16,8(r20)
    b264:	8c7fffc4 	addi	r17,r17,-1
    b268:	88000c16 	blt	r17,zero,b29c <_fwalk_reent+0x84>
    b26c:	84000304 	addi	r16,r16,12
    b270:	8080000b 	ldhu	r2,0(r16)
    b274:	8c7fffc4 	addi	r17,r17,-1
    b278:	817ffd04 	addi	r5,r16,-12
    b27c:	b080052e 	bgeu	r22,r2,b294 <_fwalk_reent+0x7c>
    b280:	8080008f 	ldh	r2,2(r16)
    b284:	9809883a 	mov	r4,r19
    b288:	14800226 	beq	r2,r18,b294 <_fwalk_reent+0x7c>
    b28c:	a83ee83a 	callr	r21
    b290:	b8aeb03a 	or	r23,r23,r2
    b294:	84001a04 	addi	r16,r16,104
    b298:	8cbff51e 	bne	r17,r18,b270 <__alt_data_end+0xfffda530>
    b29c:	a5000017 	ldw	r20,0(r20)
    b2a0:	a03fee1e 	bne	r20,zero,b25c <__alt_data_end+0xfffda51c>
    b2a4:	b805883a 	mov	r2,r23
    b2a8:	dfc00817 	ldw	ra,32(sp)
    b2ac:	ddc00717 	ldw	r23,28(sp)
    b2b0:	dd800617 	ldw	r22,24(sp)
    b2b4:	dd400517 	ldw	r21,20(sp)
    b2b8:	dd000417 	ldw	r20,16(sp)
    b2bc:	dcc00317 	ldw	r19,12(sp)
    b2c0:	dc800217 	ldw	r18,8(sp)
    b2c4:	dc400117 	ldw	r17,4(sp)
    b2c8:	dc000017 	ldw	r16,0(sp)
    b2cc:	dec00904 	addi	sp,sp,36
    b2d0:	f800283a 	ret
    b2d4:	002f883a 	mov	r23,zero
    b2d8:	003ff206 	br	b2a4 <__alt_data_end+0xfffda564>

0000b2dc <_setlocale_r>:
    b2dc:	30001b26 	beq	r6,zero,b34c <_setlocale_r+0x70>
    b2e0:	014000b4 	movhi	r5,2
    b2e4:	defffe04 	addi	sp,sp,-8
    b2e8:	2976a304 	addi	r5,r5,-9588
    b2ec:	3009883a 	mov	r4,r6
    b2f0:	dc000015 	stw	r16,0(sp)
    b2f4:	dfc00115 	stw	ra,4(sp)
    b2f8:	3021883a 	mov	r16,r6
    b2fc:	000cf0c0 	call	cf0c <strcmp>
    b300:	1000061e 	bne	r2,zero,b31c <_setlocale_r+0x40>
    b304:	008000b4 	movhi	r2,2
    b308:	10b68404 	addi	r2,r2,-9712
    b30c:	dfc00117 	ldw	ra,4(sp)
    b310:	dc000017 	ldw	r16,0(sp)
    b314:	dec00204 	addi	sp,sp,8
    b318:	f800283a 	ret
    b31c:	014000b4 	movhi	r5,2
    b320:	29768404 	addi	r5,r5,-9712
    b324:	8009883a 	mov	r4,r16
    b328:	000cf0c0 	call	cf0c <strcmp>
    b32c:	103ff526 	beq	r2,zero,b304 <__alt_data_end+0xfffda5c4>
    b330:	014000b4 	movhi	r5,2
    b334:	29768e04 	addi	r5,r5,-9672
    b338:	8009883a 	mov	r4,r16
    b33c:	000cf0c0 	call	cf0c <strcmp>
    b340:	103ff026 	beq	r2,zero,b304 <__alt_data_end+0xfffda5c4>
    b344:	0005883a 	mov	r2,zero
    b348:	003ff006 	br	b30c <__alt_data_end+0xfffda5cc>
    b34c:	008000b4 	movhi	r2,2
    b350:	10b68404 	addi	r2,r2,-9712
    b354:	f800283a 	ret

0000b358 <__locale_charset>:
    b358:	008000b4 	movhi	r2,2
    b35c:	10b96904 	addi	r2,r2,-6748
    b360:	f800283a 	ret

0000b364 <__locale_mb_cur_max>:
    b364:	008000b4 	movhi	r2,2
    b368:	10be2104 	addi	r2,r2,-1916
    b36c:	10800017 	ldw	r2,0(r2)
    b370:	f800283a 	ret

0000b374 <__locale_msgcharset>:
    b374:	008000b4 	movhi	r2,2
    b378:	10b96104 	addi	r2,r2,-6780
    b37c:	f800283a 	ret

0000b380 <__locale_cjk_lang>:
    b380:	0005883a 	mov	r2,zero
    b384:	f800283a 	ret

0000b388 <_localeconv_r>:
    b388:	008000b4 	movhi	r2,2
    b38c:	10b97104 	addi	r2,r2,-6716
    b390:	f800283a 	ret

0000b394 <setlocale>:
    b394:	008000b4 	movhi	r2,2
    b398:	10be1e04 	addi	r2,r2,-1928
    b39c:	280d883a 	mov	r6,r5
    b3a0:	200b883a 	mov	r5,r4
    b3a4:	11000017 	ldw	r4,0(r2)
    b3a8:	000b2dc1 	jmpi	b2dc <_setlocale_r>

0000b3ac <localeconv>:
    b3ac:	008000b4 	movhi	r2,2
    b3b0:	10b97104 	addi	r2,r2,-6716
    b3b4:	f800283a 	ret

0000b3b8 <__smakebuf_r>:
    b3b8:	2880030b 	ldhu	r2,12(r5)
    b3bc:	10c0008c 	andi	r3,r2,2
    b3c0:	1800411e 	bne	r3,zero,b4c8 <__smakebuf_r+0x110>
    b3c4:	deffec04 	addi	sp,sp,-80
    b3c8:	dc000f15 	stw	r16,60(sp)
    b3cc:	2821883a 	mov	r16,r5
    b3d0:	2940038f 	ldh	r5,14(r5)
    b3d4:	dc401015 	stw	r17,64(sp)
    b3d8:	dfc01315 	stw	ra,76(sp)
    b3dc:	dcc01215 	stw	r19,72(sp)
    b3e0:	dc801115 	stw	r18,68(sp)
    b3e4:	2023883a 	mov	r17,r4
    b3e8:	28001c16 	blt	r5,zero,b45c <__smakebuf_r+0xa4>
    b3ec:	d80d883a 	mov	r6,sp
    b3f0:	000eb7c0 	call	eb7c <_fstat_r>
    b3f4:	10001816 	blt	r2,zero,b458 <__smakebuf_r+0xa0>
    b3f8:	d8800117 	ldw	r2,4(sp)
    b3fc:	00e00014 	movui	r3,32768
    b400:	10bc000c 	andi	r2,r2,61440
    b404:	14c80020 	cmpeqi	r19,r2,8192
    b408:	10c03726 	beq	r2,r3,b4e8 <__smakebuf_r+0x130>
    b40c:	80c0030b 	ldhu	r3,12(r16)
    b410:	18c20014 	ori	r3,r3,2048
    b414:	80c0030d 	sth	r3,12(r16)
    b418:	00c80004 	movi	r3,8192
    b41c:	10c0521e 	bne	r2,r3,b568 <__smakebuf_r+0x1b0>
    b420:	8140038f 	ldh	r5,14(r16)
    b424:	8809883a 	mov	r4,r17
    b428:	000ebd80 	call	ebd8 <_isatty_r>
    b42c:	10004c26 	beq	r2,zero,b560 <__smakebuf_r+0x1a8>
    b430:	8080030b 	ldhu	r2,12(r16)
    b434:	80c010c4 	addi	r3,r16,67
    b438:	80c00015 	stw	r3,0(r16)
    b43c:	10800054 	ori	r2,r2,1
    b440:	8080030d 	sth	r2,12(r16)
    b444:	00800044 	movi	r2,1
    b448:	80c00415 	stw	r3,16(r16)
    b44c:	80800515 	stw	r2,20(r16)
    b450:	04810004 	movi	r18,1024
    b454:	00000706 	br	b474 <__smakebuf_r+0xbc>
    b458:	8080030b 	ldhu	r2,12(r16)
    b45c:	10c0200c 	andi	r3,r2,128
    b460:	18001f1e 	bne	r3,zero,b4e0 <__smakebuf_r+0x128>
    b464:	04810004 	movi	r18,1024
    b468:	10820014 	ori	r2,r2,2048
    b46c:	8080030d 	sth	r2,12(r16)
    b470:	0027883a 	mov	r19,zero
    b474:	900b883a 	mov	r5,r18
    b478:	8809883a 	mov	r4,r17
    b47c:	00057a00 	call	57a0 <_malloc_r>
    b480:	10002c26 	beq	r2,zero,b534 <__smakebuf_r+0x17c>
    b484:	80c0030b 	ldhu	r3,12(r16)
    b488:	01000074 	movhi	r4,1
    b48c:	21292c04 	addi	r4,r4,-23376
    b490:	89000f15 	stw	r4,60(r17)
    b494:	18c02014 	ori	r3,r3,128
    b498:	80c0030d 	sth	r3,12(r16)
    b49c:	80800015 	stw	r2,0(r16)
    b4a0:	80800415 	stw	r2,16(r16)
    b4a4:	84800515 	stw	r18,20(r16)
    b4a8:	98001a1e 	bne	r19,zero,b514 <__smakebuf_r+0x15c>
    b4ac:	dfc01317 	ldw	ra,76(sp)
    b4b0:	dcc01217 	ldw	r19,72(sp)
    b4b4:	dc801117 	ldw	r18,68(sp)
    b4b8:	dc401017 	ldw	r17,64(sp)
    b4bc:	dc000f17 	ldw	r16,60(sp)
    b4c0:	dec01404 	addi	sp,sp,80
    b4c4:	f800283a 	ret
    b4c8:	288010c4 	addi	r2,r5,67
    b4cc:	28800015 	stw	r2,0(r5)
    b4d0:	28800415 	stw	r2,16(r5)
    b4d4:	00800044 	movi	r2,1
    b4d8:	28800515 	stw	r2,20(r5)
    b4dc:	f800283a 	ret
    b4e0:	04801004 	movi	r18,64
    b4e4:	003fe006 	br	b468 <__alt_data_end+0xfffda728>
    b4e8:	81000a17 	ldw	r4,40(r16)
    b4ec:	00c00074 	movhi	r3,1
    b4f0:	18f3aa04 	addi	r3,r3,-12632
    b4f4:	20ffc51e 	bne	r4,r3,b40c <__alt_data_end+0xfffda6cc>
    b4f8:	8080030b 	ldhu	r2,12(r16)
    b4fc:	04810004 	movi	r18,1024
    b500:	84801315 	stw	r18,76(r16)
    b504:	1484b03a 	or	r2,r2,r18
    b508:	8080030d 	sth	r2,12(r16)
    b50c:	0027883a 	mov	r19,zero
    b510:	003fd806 	br	b474 <__alt_data_end+0xfffda734>
    b514:	8140038f 	ldh	r5,14(r16)
    b518:	8809883a 	mov	r4,r17
    b51c:	000ebd80 	call	ebd8 <_isatty_r>
    b520:	103fe226 	beq	r2,zero,b4ac <__alt_data_end+0xfffda76c>
    b524:	8080030b 	ldhu	r2,12(r16)
    b528:	10800054 	ori	r2,r2,1
    b52c:	8080030d 	sth	r2,12(r16)
    b530:	003fde06 	br	b4ac <__alt_data_end+0xfffda76c>
    b534:	8080030b 	ldhu	r2,12(r16)
    b538:	10c0800c 	andi	r3,r2,512
    b53c:	183fdb1e 	bne	r3,zero,b4ac <__alt_data_end+0xfffda76c>
    b540:	10800094 	ori	r2,r2,2
    b544:	80c010c4 	addi	r3,r16,67
    b548:	8080030d 	sth	r2,12(r16)
    b54c:	00800044 	movi	r2,1
    b550:	80c00015 	stw	r3,0(r16)
    b554:	80c00415 	stw	r3,16(r16)
    b558:	80800515 	stw	r2,20(r16)
    b55c:	003fd306 	br	b4ac <__alt_data_end+0xfffda76c>
    b560:	04810004 	movi	r18,1024
    b564:	003fc306 	br	b474 <__alt_data_end+0xfffda734>
    b568:	0027883a 	mov	r19,zero
    b56c:	04810004 	movi	r18,1024
    b570:	003fc006 	br	b474 <__alt_data_end+0xfffda734>

0000b574 <memchr>:
    b574:	208000cc 	andi	r2,r4,3
    b578:	280f883a 	mov	r7,r5
    b57c:	10003426 	beq	r2,zero,b650 <memchr+0xdc>
    b580:	30bfffc4 	addi	r2,r6,-1
    b584:	30001a26 	beq	r6,zero,b5f0 <memchr+0x7c>
    b588:	20c00003 	ldbu	r3,0(r4)
    b58c:	29803fcc 	andi	r6,r5,255
    b590:	30c0051e 	bne	r6,r3,b5a8 <memchr+0x34>
    b594:	00001806 	br	b5f8 <memchr+0x84>
    b598:	10001526 	beq	r2,zero,b5f0 <memchr+0x7c>
    b59c:	20c00003 	ldbu	r3,0(r4)
    b5a0:	10bfffc4 	addi	r2,r2,-1
    b5a4:	30c01426 	beq	r6,r3,b5f8 <memchr+0x84>
    b5a8:	21000044 	addi	r4,r4,1
    b5ac:	20c000cc 	andi	r3,r4,3
    b5b0:	183ff91e 	bne	r3,zero,b598 <__alt_data_end+0xfffda858>
    b5b4:	020000c4 	movi	r8,3
    b5b8:	40801136 	bltu	r8,r2,b600 <memchr+0x8c>
    b5bc:	10000c26 	beq	r2,zero,b5f0 <memchr+0x7c>
    b5c0:	20c00003 	ldbu	r3,0(r4)
    b5c4:	29403fcc 	andi	r5,r5,255
    b5c8:	28c00b26 	beq	r5,r3,b5f8 <memchr+0x84>
    b5cc:	20c00044 	addi	r3,r4,1
    b5d0:	39803fcc 	andi	r6,r7,255
    b5d4:	2089883a 	add	r4,r4,r2
    b5d8:	00000306 	br	b5e8 <memchr+0x74>
    b5dc:	18c00044 	addi	r3,r3,1
    b5e0:	197fffc3 	ldbu	r5,-1(r3)
    b5e4:	31400526 	beq	r6,r5,b5fc <memchr+0x88>
    b5e8:	1805883a 	mov	r2,r3
    b5ec:	20fffb1e 	bne	r4,r3,b5dc <__alt_data_end+0xfffda89c>
    b5f0:	0005883a 	mov	r2,zero
    b5f4:	f800283a 	ret
    b5f8:	2005883a 	mov	r2,r4
    b5fc:	f800283a 	ret
    b600:	28c03fcc 	andi	r3,r5,255
    b604:	1812923a 	slli	r9,r3,8
    b608:	02ffbff4 	movhi	r11,65279
    b60c:	02a02074 	movhi	r10,32897
    b610:	48d2b03a 	or	r9,r9,r3
    b614:	4806943a 	slli	r3,r9,16
    b618:	5affbfc4 	addi	r11,r11,-257
    b61c:	52a02004 	addi	r10,r10,-32640
    b620:	48d2b03a 	or	r9,r9,r3
    b624:	20c00017 	ldw	r3,0(r4)
    b628:	48c6f03a 	xor	r3,r9,r3
    b62c:	1acd883a 	add	r6,r3,r11
    b630:	00c6303a 	nor	r3,zero,r3
    b634:	30c6703a 	and	r3,r6,r3
    b638:	1a86703a 	and	r3,r3,r10
    b63c:	183fe01e 	bne	r3,zero,b5c0 <__alt_data_end+0xfffda880>
    b640:	10bfff04 	addi	r2,r2,-4
    b644:	21000104 	addi	r4,r4,4
    b648:	40bff636 	bltu	r8,r2,b624 <__alt_data_end+0xfffda8e4>
    b64c:	003fdb06 	br	b5bc <__alt_data_end+0xfffda87c>
    b650:	3005883a 	mov	r2,r6
    b654:	003fd706 	br	b5b4 <__alt_data_end+0xfffda874>

0000b658 <memmove>:
    b658:	2005883a 	mov	r2,r4
    b65c:	29000b2e 	bgeu	r5,r4,b68c <memmove+0x34>
    b660:	298f883a 	add	r7,r5,r6
    b664:	21c0092e 	bgeu	r4,r7,b68c <memmove+0x34>
    b668:	2187883a 	add	r3,r4,r6
    b66c:	198bc83a 	sub	r5,r3,r6
    b670:	30004826 	beq	r6,zero,b794 <memmove+0x13c>
    b674:	39ffffc4 	addi	r7,r7,-1
    b678:	39000003 	ldbu	r4,0(r7)
    b67c:	18ffffc4 	addi	r3,r3,-1
    b680:	19000005 	stb	r4,0(r3)
    b684:	28fffb1e 	bne	r5,r3,b674 <__alt_data_end+0xfffda934>
    b688:	f800283a 	ret
    b68c:	00c003c4 	movi	r3,15
    b690:	1980412e 	bgeu	r3,r6,b798 <memmove+0x140>
    b694:	2886b03a 	or	r3,r5,r2
    b698:	18c000cc 	andi	r3,r3,3
    b69c:	1800401e 	bne	r3,zero,b7a0 <memmove+0x148>
    b6a0:	33fffc04 	addi	r15,r6,-16
    b6a4:	781ed13a 	srli	r15,r15,4
    b6a8:	28c00104 	addi	r3,r5,4
    b6ac:	13400104 	addi	r13,r2,4
    b6b0:	781c913a 	slli	r14,r15,4
    b6b4:	2b000204 	addi	r12,r5,8
    b6b8:	12c00204 	addi	r11,r2,8
    b6bc:	73800504 	addi	r14,r14,20
    b6c0:	2a800304 	addi	r10,r5,12
    b6c4:	12400304 	addi	r9,r2,12
    b6c8:	2b9d883a 	add	r14,r5,r14
    b6cc:	2811883a 	mov	r8,r5
    b6d0:	100f883a 	mov	r7,r2
    b6d4:	41000017 	ldw	r4,0(r8)
    b6d8:	39c00404 	addi	r7,r7,16
    b6dc:	18c00404 	addi	r3,r3,16
    b6e0:	393ffc15 	stw	r4,-16(r7)
    b6e4:	193ffc17 	ldw	r4,-16(r3)
    b6e8:	6b400404 	addi	r13,r13,16
    b6ec:	5ac00404 	addi	r11,r11,16
    b6f0:	693ffc15 	stw	r4,-16(r13)
    b6f4:	61000017 	ldw	r4,0(r12)
    b6f8:	4a400404 	addi	r9,r9,16
    b6fc:	42000404 	addi	r8,r8,16
    b700:	593ffc15 	stw	r4,-16(r11)
    b704:	51000017 	ldw	r4,0(r10)
    b708:	63000404 	addi	r12,r12,16
    b70c:	52800404 	addi	r10,r10,16
    b710:	493ffc15 	stw	r4,-16(r9)
    b714:	1bbfef1e 	bne	r3,r14,b6d4 <__alt_data_end+0xfffda994>
    b718:	79000044 	addi	r4,r15,1
    b71c:	2008913a 	slli	r4,r4,4
    b720:	328003cc 	andi	r10,r6,15
    b724:	02c000c4 	movi	r11,3
    b728:	1107883a 	add	r3,r2,r4
    b72c:	290b883a 	add	r5,r5,r4
    b730:	5a801e2e 	bgeu	r11,r10,b7ac <memmove+0x154>
    b734:	1813883a 	mov	r9,r3
    b738:	2811883a 	mov	r8,r5
    b73c:	500f883a 	mov	r7,r10
    b740:	41000017 	ldw	r4,0(r8)
    b744:	4a400104 	addi	r9,r9,4
    b748:	39ffff04 	addi	r7,r7,-4
    b74c:	493fff15 	stw	r4,-4(r9)
    b750:	42000104 	addi	r8,r8,4
    b754:	59fffa36 	bltu	r11,r7,b740 <__alt_data_end+0xfffdaa00>
    b758:	513fff04 	addi	r4,r10,-4
    b75c:	2008d0ba 	srli	r4,r4,2
    b760:	318000cc 	andi	r6,r6,3
    b764:	21000044 	addi	r4,r4,1
    b768:	2109883a 	add	r4,r4,r4
    b76c:	2109883a 	add	r4,r4,r4
    b770:	1907883a 	add	r3,r3,r4
    b774:	290b883a 	add	r5,r5,r4
    b778:	30000b26 	beq	r6,zero,b7a8 <memmove+0x150>
    b77c:	198d883a 	add	r6,r3,r6
    b780:	29c00003 	ldbu	r7,0(r5)
    b784:	18c00044 	addi	r3,r3,1
    b788:	29400044 	addi	r5,r5,1
    b78c:	19ffffc5 	stb	r7,-1(r3)
    b790:	19bffb1e 	bne	r3,r6,b780 <__alt_data_end+0xfffdaa40>
    b794:	f800283a 	ret
    b798:	1007883a 	mov	r3,r2
    b79c:	003ff606 	br	b778 <__alt_data_end+0xfffdaa38>
    b7a0:	1007883a 	mov	r3,r2
    b7a4:	003ff506 	br	b77c <__alt_data_end+0xfffdaa3c>
    b7a8:	f800283a 	ret
    b7ac:	500d883a 	mov	r6,r10
    b7b0:	003ff106 	br	b778 <__alt_data_end+0xfffdaa38>

0000b7b4 <_Balloc>:
    b7b4:	20801317 	ldw	r2,76(r4)
    b7b8:	defffc04 	addi	sp,sp,-16
    b7bc:	dc400115 	stw	r17,4(sp)
    b7c0:	dc000015 	stw	r16,0(sp)
    b7c4:	dfc00315 	stw	ra,12(sp)
    b7c8:	dc800215 	stw	r18,8(sp)
    b7cc:	2023883a 	mov	r17,r4
    b7d0:	2821883a 	mov	r16,r5
    b7d4:	10000f26 	beq	r2,zero,b814 <_Balloc+0x60>
    b7d8:	8407883a 	add	r3,r16,r16
    b7dc:	18c7883a 	add	r3,r3,r3
    b7e0:	10c7883a 	add	r3,r2,r3
    b7e4:	18800017 	ldw	r2,0(r3)
    b7e8:	10001126 	beq	r2,zero,b830 <_Balloc+0x7c>
    b7ec:	11000017 	ldw	r4,0(r2)
    b7f0:	19000015 	stw	r4,0(r3)
    b7f4:	10000415 	stw	zero,16(r2)
    b7f8:	10000315 	stw	zero,12(r2)
    b7fc:	dfc00317 	ldw	ra,12(sp)
    b800:	dc800217 	ldw	r18,8(sp)
    b804:	dc400117 	ldw	r17,4(sp)
    b808:	dc000017 	ldw	r16,0(sp)
    b80c:	dec00404 	addi	sp,sp,16
    b810:	f800283a 	ret
    b814:	01800844 	movi	r6,33
    b818:	01400104 	movi	r5,4
    b81c:	000e7940 	call	e794 <_calloc_r>
    b820:	88801315 	stw	r2,76(r17)
    b824:	103fec1e 	bne	r2,zero,b7d8 <__alt_data_end+0xfffdaa98>
    b828:	0005883a 	mov	r2,zero
    b82c:	003ff306 	br	b7fc <__alt_data_end+0xfffdaabc>
    b830:	01400044 	movi	r5,1
    b834:	2c24983a 	sll	r18,r5,r16
    b838:	8809883a 	mov	r4,r17
    b83c:	91800144 	addi	r6,r18,5
    b840:	318d883a 	add	r6,r6,r6
    b844:	318d883a 	add	r6,r6,r6
    b848:	000e7940 	call	e794 <_calloc_r>
    b84c:	103ff626 	beq	r2,zero,b828 <__alt_data_end+0xfffdaae8>
    b850:	14000115 	stw	r16,4(r2)
    b854:	14800215 	stw	r18,8(r2)
    b858:	003fe606 	br	b7f4 <__alt_data_end+0xfffdaab4>

0000b85c <_Bfree>:
    b85c:	28000826 	beq	r5,zero,b880 <_Bfree+0x24>
    b860:	28c00117 	ldw	r3,4(r5)
    b864:	20801317 	ldw	r2,76(r4)
    b868:	18c7883a 	add	r3,r3,r3
    b86c:	18c7883a 	add	r3,r3,r3
    b870:	10c5883a 	add	r2,r2,r3
    b874:	10c00017 	ldw	r3,0(r2)
    b878:	28c00015 	stw	r3,0(r5)
    b87c:	11400015 	stw	r5,0(r2)
    b880:	f800283a 	ret

0000b884 <__multadd>:
    b884:	defff704 	addi	sp,sp,-36
    b888:	dc800215 	stw	r18,8(sp)
    b88c:	2c800417 	ldw	r18,16(r5)
    b890:	dd800615 	stw	r22,24(sp)
    b894:	dd400515 	stw	r21,20(sp)
    b898:	dd000415 	stw	r20,16(sp)
    b89c:	dcc00315 	stw	r19,12(sp)
    b8a0:	dc400115 	stw	r17,4(sp)
    b8a4:	dc000015 	stw	r16,0(sp)
    b8a8:	dfc00815 	stw	ra,32(sp)
    b8ac:	ddc00715 	stw	r23,28(sp)
    b8b0:	2827883a 	mov	r19,r5
    b8b4:	2029883a 	mov	r20,r4
    b8b8:	3023883a 	mov	r17,r6
    b8bc:	3821883a 	mov	r16,r7
    b8c0:	2d400504 	addi	r21,r5,20
    b8c4:	002d883a 	mov	r22,zero
    b8c8:	adc00017 	ldw	r23,0(r21)
    b8cc:	880b883a 	mov	r5,r17
    b8d0:	ad400104 	addi	r21,r21,4
    b8d4:	b93fffcc 	andi	r4,r23,65535
    b8d8:	0002f440 	call	2f44 <__mulsi3>
    b8dc:	b808d43a 	srli	r4,r23,16
    b8e0:	880b883a 	mov	r5,r17
    b8e4:	1421883a 	add	r16,r2,r16
    b8e8:	0002f440 	call	2f44 <__mulsi3>
    b8ec:	800ed43a 	srli	r7,r16,16
    b8f0:	80ffffcc 	andi	r3,r16,65535
    b8f4:	b5800044 	addi	r22,r22,1
    b8f8:	11c5883a 	add	r2,r2,r7
    b8fc:	100e943a 	slli	r7,r2,16
    b900:	1020d43a 	srli	r16,r2,16
    b904:	38c7883a 	add	r3,r7,r3
    b908:	a8ffff15 	stw	r3,-4(r21)
    b90c:	b4bfee16 	blt	r22,r18,b8c8 <__alt_data_end+0xfffdab88>
    b910:	80000926 	beq	r16,zero,b938 <__multadd+0xb4>
    b914:	98800217 	ldw	r2,8(r19)
    b918:	9080130e 	bge	r18,r2,b968 <__multadd+0xe4>
    b91c:	90800144 	addi	r2,r18,5
    b920:	1085883a 	add	r2,r2,r2
    b924:	1085883a 	add	r2,r2,r2
    b928:	9885883a 	add	r2,r19,r2
    b92c:	14000015 	stw	r16,0(r2)
    b930:	94800044 	addi	r18,r18,1
    b934:	9c800415 	stw	r18,16(r19)
    b938:	9805883a 	mov	r2,r19
    b93c:	dfc00817 	ldw	ra,32(sp)
    b940:	ddc00717 	ldw	r23,28(sp)
    b944:	dd800617 	ldw	r22,24(sp)
    b948:	dd400517 	ldw	r21,20(sp)
    b94c:	dd000417 	ldw	r20,16(sp)
    b950:	dcc00317 	ldw	r19,12(sp)
    b954:	dc800217 	ldw	r18,8(sp)
    b958:	dc400117 	ldw	r17,4(sp)
    b95c:	dc000017 	ldw	r16,0(sp)
    b960:	dec00904 	addi	sp,sp,36
    b964:	f800283a 	ret
    b968:	99400117 	ldw	r5,4(r19)
    b96c:	a009883a 	mov	r4,r20
    b970:	29400044 	addi	r5,r5,1
    b974:	000b7b40 	call	b7b4 <_Balloc>
    b978:	99800417 	ldw	r6,16(r19)
    b97c:	99400304 	addi	r5,r19,12
    b980:	11000304 	addi	r4,r2,12
    b984:	31800084 	addi	r6,r6,2
    b988:	318d883a 	add	r6,r6,r6
    b98c:	318d883a 	add	r6,r6,r6
    b990:	1023883a 	mov	r17,r2
    b994:	0005fac0 	call	5fac <memcpy>
    b998:	98000a26 	beq	r19,zero,b9c4 <__multadd+0x140>
    b99c:	98c00117 	ldw	r3,4(r19)
    b9a0:	a0801317 	ldw	r2,76(r20)
    b9a4:	18c7883a 	add	r3,r3,r3
    b9a8:	18c7883a 	add	r3,r3,r3
    b9ac:	10c5883a 	add	r2,r2,r3
    b9b0:	10c00017 	ldw	r3,0(r2)
    b9b4:	98c00015 	stw	r3,0(r19)
    b9b8:	14c00015 	stw	r19,0(r2)
    b9bc:	8827883a 	mov	r19,r17
    b9c0:	003fd606 	br	b91c <__alt_data_end+0xfffdabdc>
    b9c4:	8827883a 	mov	r19,r17
    b9c8:	003fd406 	br	b91c <__alt_data_end+0xfffdabdc>

0000b9cc <__s2b>:
    b9cc:	defff904 	addi	sp,sp,-28
    b9d0:	dc400115 	stw	r17,4(sp)
    b9d4:	dc000015 	stw	r16,0(sp)
    b9d8:	2023883a 	mov	r17,r4
    b9dc:	2821883a 	mov	r16,r5
    b9e0:	39000204 	addi	r4,r7,8
    b9e4:	01400244 	movi	r5,9
    b9e8:	dcc00315 	stw	r19,12(sp)
    b9ec:	dc800215 	stw	r18,8(sp)
    b9f0:	dfc00615 	stw	ra,24(sp)
    b9f4:	dd400515 	stw	r21,20(sp)
    b9f8:	dd000415 	stw	r20,16(sp)
    b9fc:	3825883a 	mov	r18,r7
    ba00:	3027883a 	mov	r19,r6
    ba04:	0002d900 	call	2d90 <__divsi3>
    ba08:	00c00044 	movi	r3,1
    ba0c:	000b883a 	mov	r5,zero
    ba10:	1880030e 	bge	r3,r2,ba20 <__s2b+0x54>
    ba14:	18c7883a 	add	r3,r3,r3
    ba18:	29400044 	addi	r5,r5,1
    ba1c:	18bffd16 	blt	r3,r2,ba14 <__alt_data_end+0xfffdacd4>
    ba20:	8809883a 	mov	r4,r17
    ba24:	000b7b40 	call	b7b4 <_Balloc>
    ba28:	d8c00717 	ldw	r3,28(sp)
    ba2c:	10c00515 	stw	r3,20(r2)
    ba30:	00c00044 	movi	r3,1
    ba34:	10c00415 	stw	r3,16(r2)
    ba38:	00c00244 	movi	r3,9
    ba3c:	1cc0210e 	bge	r3,r19,bac4 <__s2b+0xf8>
    ba40:	80eb883a 	add	r21,r16,r3
    ba44:	a829883a 	mov	r20,r21
    ba48:	84e1883a 	add	r16,r16,r19
    ba4c:	a1c00007 	ldb	r7,0(r20)
    ba50:	01800284 	movi	r6,10
    ba54:	a5000044 	addi	r20,r20,1
    ba58:	100b883a 	mov	r5,r2
    ba5c:	39fff404 	addi	r7,r7,-48
    ba60:	8809883a 	mov	r4,r17
    ba64:	000b8840 	call	b884 <__multadd>
    ba68:	a43ff81e 	bne	r20,r16,ba4c <__alt_data_end+0xfffdad0c>
    ba6c:	ace1883a 	add	r16,r21,r19
    ba70:	843ffe04 	addi	r16,r16,-8
    ba74:	9c800a0e 	bge	r19,r18,baa0 <__s2b+0xd4>
    ba78:	94e5c83a 	sub	r18,r18,r19
    ba7c:	84a5883a 	add	r18,r16,r18
    ba80:	81c00007 	ldb	r7,0(r16)
    ba84:	01800284 	movi	r6,10
    ba88:	84000044 	addi	r16,r16,1
    ba8c:	100b883a 	mov	r5,r2
    ba90:	39fff404 	addi	r7,r7,-48
    ba94:	8809883a 	mov	r4,r17
    ba98:	000b8840 	call	b884 <__multadd>
    ba9c:	84bff81e 	bne	r16,r18,ba80 <__alt_data_end+0xfffdad40>
    baa0:	dfc00617 	ldw	ra,24(sp)
    baa4:	dd400517 	ldw	r21,20(sp)
    baa8:	dd000417 	ldw	r20,16(sp)
    baac:	dcc00317 	ldw	r19,12(sp)
    bab0:	dc800217 	ldw	r18,8(sp)
    bab4:	dc400117 	ldw	r17,4(sp)
    bab8:	dc000017 	ldw	r16,0(sp)
    babc:	dec00704 	addi	sp,sp,28
    bac0:	f800283a 	ret
    bac4:	84000284 	addi	r16,r16,10
    bac8:	1827883a 	mov	r19,r3
    bacc:	003fe906 	br	ba74 <__alt_data_end+0xfffdad34>

0000bad0 <__hi0bits>:
    bad0:	20bfffec 	andhi	r2,r4,65535
    bad4:	1000141e 	bne	r2,zero,bb28 <__hi0bits+0x58>
    bad8:	2008943a 	slli	r4,r4,16
    badc:	00800404 	movi	r2,16
    bae0:	20ffc02c 	andhi	r3,r4,65280
    bae4:	1800021e 	bne	r3,zero,baf0 <__hi0bits+0x20>
    bae8:	2008923a 	slli	r4,r4,8
    baec:	10800204 	addi	r2,r2,8
    baf0:	20fc002c 	andhi	r3,r4,61440
    baf4:	1800021e 	bne	r3,zero,bb00 <__hi0bits+0x30>
    baf8:	2008913a 	slli	r4,r4,4
    bafc:	10800104 	addi	r2,r2,4
    bb00:	20f0002c 	andhi	r3,r4,49152
    bb04:	1800031e 	bne	r3,zero,bb14 <__hi0bits+0x44>
    bb08:	2109883a 	add	r4,r4,r4
    bb0c:	10800084 	addi	r2,r2,2
    bb10:	2109883a 	add	r4,r4,r4
    bb14:	20000316 	blt	r4,zero,bb24 <__hi0bits+0x54>
    bb18:	2110002c 	andhi	r4,r4,16384
    bb1c:	2000041e 	bne	r4,zero,bb30 <__hi0bits+0x60>
    bb20:	00800804 	movi	r2,32
    bb24:	f800283a 	ret
    bb28:	0005883a 	mov	r2,zero
    bb2c:	003fec06 	br	bae0 <__alt_data_end+0xfffdada0>
    bb30:	10800044 	addi	r2,r2,1
    bb34:	f800283a 	ret

0000bb38 <__lo0bits>:
    bb38:	20c00017 	ldw	r3,0(r4)
    bb3c:	188001cc 	andi	r2,r3,7
    bb40:	10000826 	beq	r2,zero,bb64 <__lo0bits+0x2c>
    bb44:	1880004c 	andi	r2,r3,1
    bb48:	1000211e 	bne	r2,zero,bbd0 <__lo0bits+0x98>
    bb4c:	1880008c 	andi	r2,r3,2
    bb50:	1000211e 	bne	r2,zero,bbd8 <__lo0bits+0xa0>
    bb54:	1806d0ba 	srli	r3,r3,2
    bb58:	00800084 	movi	r2,2
    bb5c:	20c00015 	stw	r3,0(r4)
    bb60:	f800283a 	ret
    bb64:	18bfffcc 	andi	r2,r3,65535
    bb68:	10001326 	beq	r2,zero,bbb8 <__lo0bits+0x80>
    bb6c:	0005883a 	mov	r2,zero
    bb70:	19403fcc 	andi	r5,r3,255
    bb74:	2800021e 	bne	r5,zero,bb80 <__lo0bits+0x48>
    bb78:	1806d23a 	srli	r3,r3,8
    bb7c:	10800204 	addi	r2,r2,8
    bb80:	194003cc 	andi	r5,r3,15
    bb84:	2800021e 	bne	r5,zero,bb90 <__lo0bits+0x58>
    bb88:	1806d13a 	srli	r3,r3,4
    bb8c:	10800104 	addi	r2,r2,4
    bb90:	194000cc 	andi	r5,r3,3
    bb94:	2800021e 	bne	r5,zero,bba0 <__lo0bits+0x68>
    bb98:	1806d0ba 	srli	r3,r3,2
    bb9c:	10800084 	addi	r2,r2,2
    bba0:	1940004c 	andi	r5,r3,1
    bba4:	2800081e 	bne	r5,zero,bbc8 <__lo0bits+0x90>
    bba8:	1806d07a 	srli	r3,r3,1
    bbac:	1800051e 	bne	r3,zero,bbc4 <__lo0bits+0x8c>
    bbb0:	00800804 	movi	r2,32
    bbb4:	f800283a 	ret
    bbb8:	1806d43a 	srli	r3,r3,16
    bbbc:	00800404 	movi	r2,16
    bbc0:	003feb06 	br	bb70 <__alt_data_end+0xfffdae30>
    bbc4:	10800044 	addi	r2,r2,1
    bbc8:	20c00015 	stw	r3,0(r4)
    bbcc:	f800283a 	ret
    bbd0:	0005883a 	mov	r2,zero
    bbd4:	f800283a 	ret
    bbd8:	1806d07a 	srli	r3,r3,1
    bbdc:	00800044 	movi	r2,1
    bbe0:	20c00015 	stw	r3,0(r4)
    bbe4:	f800283a 	ret

0000bbe8 <__i2b>:
    bbe8:	defffd04 	addi	sp,sp,-12
    bbec:	dc000015 	stw	r16,0(sp)
    bbf0:	04000044 	movi	r16,1
    bbf4:	dc400115 	stw	r17,4(sp)
    bbf8:	2823883a 	mov	r17,r5
    bbfc:	800b883a 	mov	r5,r16
    bc00:	dfc00215 	stw	ra,8(sp)
    bc04:	000b7b40 	call	b7b4 <_Balloc>
    bc08:	14400515 	stw	r17,20(r2)
    bc0c:	14000415 	stw	r16,16(r2)
    bc10:	dfc00217 	ldw	ra,8(sp)
    bc14:	dc400117 	ldw	r17,4(sp)
    bc18:	dc000017 	ldw	r16,0(sp)
    bc1c:	dec00304 	addi	sp,sp,12
    bc20:	f800283a 	ret

0000bc24 <__multiply>:
    bc24:	deffef04 	addi	sp,sp,-68
    bc28:	dc400815 	stw	r17,32(sp)
    bc2c:	dc000715 	stw	r16,28(sp)
    bc30:	34400417 	ldw	r17,16(r6)
    bc34:	2c000417 	ldw	r16,16(r5)
    bc38:	dd800d15 	stw	r22,52(sp)
    bc3c:	dc800915 	stw	r18,36(sp)
    bc40:	dfc01015 	stw	ra,64(sp)
    bc44:	df000f15 	stw	fp,60(sp)
    bc48:	ddc00e15 	stw	r23,56(sp)
    bc4c:	dd400c15 	stw	r21,48(sp)
    bc50:	dd000b15 	stw	r20,44(sp)
    bc54:	dcc00a15 	stw	r19,40(sp)
    bc58:	2825883a 	mov	r18,r5
    bc5c:	302d883a 	mov	r22,r6
    bc60:	8440050e 	bge	r16,r17,bc78 <__multiply+0x54>
    bc64:	8007883a 	mov	r3,r16
    bc68:	3025883a 	mov	r18,r6
    bc6c:	8821883a 	mov	r16,r17
    bc70:	282d883a 	mov	r22,r5
    bc74:	1823883a 	mov	r17,r3
    bc78:	90800217 	ldw	r2,8(r18)
    bc7c:	8447883a 	add	r3,r16,r17
    bc80:	d8c00215 	stw	r3,8(sp)
    bc84:	91400117 	ldw	r5,4(r18)
    bc88:	10c0010e 	bge	r2,r3,bc90 <__multiply+0x6c>
    bc8c:	29400044 	addi	r5,r5,1
    bc90:	000b7b40 	call	b7b4 <_Balloc>
    bc94:	d8c00217 	ldw	r3,8(sp)
    bc98:	d8800615 	stw	r2,24(sp)
    bc9c:	18eb883a 	add	r21,r3,r3
    bca0:	ad6b883a 	add	r21,r21,r21
    bca4:	10c00504 	addi	r3,r2,20
    bca8:	1d6b883a 	add	r21,r3,r21
    bcac:	d8c00115 	stw	r3,4(sp)
    bcb0:	dd400315 	stw	r21,12(sp)
    bcb4:	1805883a 	mov	r2,r3
    bcb8:	1d40042e 	bgeu	r3,r21,bccc <__multiply+0xa8>
    bcbc:	d8c00317 	ldw	r3,12(sp)
    bcc0:	10000015 	stw	zero,0(r2)
    bcc4:	10800104 	addi	r2,r2,4
    bcc8:	10fffc36 	bltu	r2,r3,bcbc <__alt_data_end+0xfffdaf7c>
    bccc:	8c63883a 	add	r17,r17,r17
    bcd0:	b5800504 	addi	r22,r22,20
    bcd4:	8c63883a 	add	r17,r17,r17
    bcd8:	94800504 	addi	r18,r18,20
    bcdc:	8421883a 	add	r16,r16,r16
    bce0:	b463883a 	add	r17,r22,r17
    bce4:	8421883a 	add	r16,r16,r16
    bce8:	dd800015 	stw	r22,0(sp)
    bcec:	dc800415 	stw	r18,16(sp)
    bcf0:	dc400515 	stw	r17,20(sp)
    bcf4:	9429883a 	add	r20,r18,r16
    bcf8:	b4404f2e 	bgeu	r22,r17,be38 <__multiply+0x214>
    bcfc:	d8c00017 	ldw	r3,0(sp)
    bd00:	1c800017 	ldw	r18,0(r3)
    bd04:	947fffcc 	andi	r17,r18,65535
    bd08:	88001e26 	beq	r17,zero,bd84 <__multiply+0x160>
    bd0c:	dd800117 	ldw	r22,4(sp)
    bd10:	dd400417 	ldw	r21,16(sp)
    bd14:	0027883a 	mov	r19,zero
    bd18:	ac800017 	ldw	r18,0(r21)
    bd1c:	b4000017 	ldw	r16,0(r22)
    bd20:	880b883a 	mov	r5,r17
    bd24:	913fffcc 	andi	r4,r18,65535
    bd28:	0002f440 	call	2f44 <__mulsi3>
    bd2c:	9008d43a 	srli	r4,r18,16
    bd30:	84bfffcc 	andi	r18,r16,65535
    bd34:	1485883a 	add	r2,r2,r18
    bd38:	14e5883a 	add	r18,r2,r19
    bd3c:	8020d43a 	srli	r16,r16,16
    bd40:	9026d43a 	srli	r19,r18,16
    bd44:	880b883a 	mov	r5,r17
    bd48:	0002f440 	call	2f44 <__mulsi3>
    bd4c:	1405883a 	add	r2,r2,r16
    bd50:	14e1883a 	add	r16,r2,r19
    bd54:	90ffffcc 	andi	r3,r18,65535
    bd58:	8024943a 	slli	r18,r16,16
    bd5c:	ad400104 	addi	r21,r21,4
    bd60:	b005883a 	mov	r2,r22
    bd64:	90c6b03a 	or	r3,r18,r3
    bd68:	b0c00015 	stw	r3,0(r22)
    bd6c:	8026d43a 	srli	r19,r16,16
    bd70:	b5800104 	addi	r22,r22,4
    bd74:	ad3fe836 	bltu	r21,r20,bd18 <__alt_data_end+0xfffdafd8>
    bd78:	d8c00017 	ldw	r3,0(sp)
    bd7c:	14c00115 	stw	r19,4(r2)
    bd80:	1c800017 	ldw	r18,0(r3)
    bd84:	9024d43a 	srli	r18,r18,16
    bd88:	90002226 	beq	r18,zero,be14 <__multiply+0x1f0>
    bd8c:	d8c00117 	ldw	r3,4(sp)
    bd90:	dd800417 	ldw	r22,16(sp)
    bd94:	002f883a 	mov	r23,zero
    bd98:	1f000017 	ldw	fp,0(r3)
    bd9c:	1823883a 	mov	r17,r3
    bda0:	182b883a 	mov	r21,r3
    bda4:	e021883a 	mov	r16,fp
    bda8:	00000106 	br	bdb0 <__multiply+0x18c>
    bdac:	982b883a 	mov	r21,r19
    bdb0:	b100000b 	ldhu	r4,0(r22)
    bdb4:	8020d43a 	srli	r16,r16,16
    bdb8:	900b883a 	mov	r5,r18
    bdbc:	0002f440 	call	2f44 <__mulsi3>
    bdc0:	1405883a 	add	r2,r2,r16
    bdc4:	15ef883a 	add	r23,r2,r23
    bdc8:	b804943a 	slli	r2,r23,16
    bdcc:	e0ffffcc 	andi	r3,fp,65535
    bdd0:	8c400104 	addi	r17,r17,4
    bdd4:	10c6b03a 	or	r3,r2,r3
    bdd8:	88ffff15 	stw	r3,-4(r17)
    bddc:	b5800104 	addi	r22,r22,4
    bde0:	b13fff17 	ldw	r4,-4(r22)
    bde4:	acc00104 	addi	r19,r21,4
    bde8:	900b883a 	mov	r5,r18
    bdec:	2008d43a 	srli	r4,r4,16
    bdf0:	9c000017 	ldw	r16,0(r19)
    bdf4:	0002f440 	call	2f44 <__mulsi3>
    bdf8:	b806d43a 	srli	r3,r23,16
    bdfc:	813fffcc 	andi	r4,r16,65535
    be00:	1105883a 	add	r2,r2,r4
    be04:	10f9883a 	add	fp,r2,r3
    be08:	e02ed43a 	srli	r23,fp,16
    be0c:	b53fe736 	bltu	r22,r20,bdac <__alt_data_end+0xfffdb06c>
    be10:	af000115 	stw	fp,4(r21)
    be14:	d8c00017 	ldw	r3,0(sp)
    be18:	d9000517 	ldw	r4,20(sp)
    be1c:	18c00104 	addi	r3,r3,4
    be20:	d8c00015 	stw	r3,0(sp)
    be24:	d8c00117 	ldw	r3,4(sp)
    be28:	18c00104 	addi	r3,r3,4
    be2c:	d8c00115 	stw	r3,4(sp)
    be30:	d8c00017 	ldw	r3,0(sp)
    be34:	193fb136 	bltu	r3,r4,bcfc <__alt_data_end+0xfffdafbc>
    be38:	d8c00217 	ldw	r3,8(sp)
    be3c:	00c00c0e 	bge	zero,r3,be70 <__multiply+0x24c>
    be40:	d8c00317 	ldw	r3,12(sp)
    be44:	18bfff17 	ldw	r2,-4(r3)
    be48:	1d7fff04 	addi	r21,r3,-4
    be4c:	10000326 	beq	r2,zero,be5c <__multiply+0x238>
    be50:	00000706 	br	be70 <__multiply+0x24c>
    be54:	a8800017 	ldw	r2,0(r21)
    be58:	1000051e 	bne	r2,zero,be70 <__multiply+0x24c>
    be5c:	d8c00217 	ldw	r3,8(sp)
    be60:	ad7fff04 	addi	r21,r21,-4
    be64:	18ffffc4 	addi	r3,r3,-1
    be68:	d8c00215 	stw	r3,8(sp)
    be6c:	183ff91e 	bne	r3,zero,be54 <__alt_data_end+0xfffdb114>
    be70:	d8c00617 	ldw	r3,24(sp)
    be74:	d9000217 	ldw	r4,8(sp)
    be78:	1805883a 	mov	r2,r3
    be7c:	19000415 	stw	r4,16(r3)
    be80:	dfc01017 	ldw	ra,64(sp)
    be84:	df000f17 	ldw	fp,60(sp)
    be88:	ddc00e17 	ldw	r23,56(sp)
    be8c:	dd800d17 	ldw	r22,52(sp)
    be90:	dd400c17 	ldw	r21,48(sp)
    be94:	dd000b17 	ldw	r20,44(sp)
    be98:	dcc00a17 	ldw	r19,40(sp)
    be9c:	dc800917 	ldw	r18,36(sp)
    bea0:	dc400817 	ldw	r17,32(sp)
    bea4:	dc000717 	ldw	r16,28(sp)
    bea8:	dec01104 	addi	sp,sp,68
    beac:	f800283a 	ret

0000beb0 <__pow5mult>:
    beb0:	defffa04 	addi	sp,sp,-24
    beb4:	dcc00315 	stw	r19,12(sp)
    beb8:	dc000015 	stw	r16,0(sp)
    bebc:	dfc00515 	stw	ra,20(sp)
    bec0:	dd000415 	stw	r20,16(sp)
    bec4:	dc800215 	stw	r18,8(sp)
    bec8:	dc400115 	stw	r17,4(sp)
    becc:	308000cc 	andi	r2,r6,3
    bed0:	3021883a 	mov	r16,r6
    bed4:	2027883a 	mov	r19,r4
    bed8:	10002f1e 	bne	r2,zero,bf98 <__pow5mult+0xe8>
    bedc:	2825883a 	mov	r18,r5
    bee0:	8021d0ba 	srai	r16,r16,2
    bee4:	80001a26 	beq	r16,zero,bf50 <__pow5mult+0xa0>
    bee8:	9c401217 	ldw	r17,72(r19)
    beec:	8800061e 	bne	r17,zero,bf08 <__pow5mult+0x58>
    bef0:	00003406 	br	bfc4 <__pow5mult+0x114>
    bef4:	8021d07a 	srai	r16,r16,1
    bef8:	80001526 	beq	r16,zero,bf50 <__pow5mult+0xa0>
    befc:	88800017 	ldw	r2,0(r17)
    bf00:	10001c26 	beq	r2,zero,bf74 <__pow5mult+0xc4>
    bf04:	1023883a 	mov	r17,r2
    bf08:	8080004c 	andi	r2,r16,1
    bf0c:	103ff926 	beq	r2,zero,bef4 <__alt_data_end+0xfffdb1b4>
    bf10:	880d883a 	mov	r6,r17
    bf14:	900b883a 	mov	r5,r18
    bf18:	9809883a 	mov	r4,r19
    bf1c:	000bc240 	call	bc24 <__multiply>
    bf20:	90001b26 	beq	r18,zero,bf90 <__pow5mult+0xe0>
    bf24:	91000117 	ldw	r4,4(r18)
    bf28:	98c01317 	ldw	r3,76(r19)
    bf2c:	8021d07a 	srai	r16,r16,1
    bf30:	2109883a 	add	r4,r4,r4
    bf34:	2109883a 	add	r4,r4,r4
    bf38:	1907883a 	add	r3,r3,r4
    bf3c:	19000017 	ldw	r4,0(r3)
    bf40:	91000015 	stw	r4,0(r18)
    bf44:	1c800015 	stw	r18,0(r3)
    bf48:	1025883a 	mov	r18,r2
    bf4c:	803feb1e 	bne	r16,zero,befc <__alt_data_end+0xfffdb1bc>
    bf50:	9005883a 	mov	r2,r18
    bf54:	dfc00517 	ldw	ra,20(sp)
    bf58:	dd000417 	ldw	r20,16(sp)
    bf5c:	dcc00317 	ldw	r19,12(sp)
    bf60:	dc800217 	ldw	r18,8(sp)
    bf64:	dc400117 	ldw	r17,4(sp)
    bf68:	dc000017 	ldw	r16,0(sp)
    bf6c:	dec00604 	addi	sp,sp,24
    bf70:	f800283a 	ret
    bf74:	880d883a 	mov	r6,r17
    bf78:	880b883a 	mov	r5,r17
    bf7c:	9809883a 	mov	r4,r19
    bf80:	000bc240 	call	bc24 <__multiply>
    bf84:	88800015 	stw	r2,0(r17)
    bf88:	10000015 	stw	zero,0(r2)
    bf8c:	003fdd06 	br	bf04 <__alt_data_end+0xfffdb1c4>
    bf90:	1025883a 	mov	r18,r2
    bf94:	003fd706 	br	bef4 <__alt_data_end+0xfffdb1b4>
    bf98:	10bfffc4 	addi	r2,r2,-1
    bf9c:	1085883a 	add	r2,r2,r2
    bfa0:	00c000b4 	movhi	r3,2
    bfa4:	18f6a604 	addi	r3,r3,-9576
    bfa8:	1085883a 	add	r2,r2,r2
    bfac:	1885883a 	add	r2,r3,r2
    bfb0:	11800017 	ldw	r6,0(r2)
    bfb4:	000f883a 	mov	r7,zero
    bfb8:	000b8840 	call	b884 <__multadd>
    bfbc:	1025883a 	mov	r18,r2
    bfc0:	003fc706 	br	bee0 <__alt_data_end+0xfffdb1a0>
    bfc4:	05000044 	movi	r20,1
    bfc8:	a00b883a 	mov	r5,r20
    bfcc:	9809883a 	mov	r4,r19
    bfd0:	000b7b40 	call	b7b4 <_Balloc>
    bfd4:	1023883a 	mov	r17,r2
    bfd8:	00809c44 	movi	r2,625
    bfdc:	88800515 	stw	r2,20(r17)
    bfe0:	8d000415 	stw	r20,16(r17)
    bfe4:	9c401215 	stw	r17,72(r19)
    bfe8:	88000015 	stw	zero,0(r17)
    bfec:	003fc606 	br	bf08 <__alt_data_end+0xfffdb1c8>

0000bff0 <__lshift>:
    bff0:	defff904 	addi	sp,sp,-28
    bff4:	dd400515 	stw	r21,20(sp)
    bff8:	dcc00315 	stw	r19,12(sp)
    bffc:	302bd17a 	srai	r21,r6,5
    c000:	2cc00417 	ldw	r19,16(r5)
    c004:	28800217 	ldw	r2,8(r5)
    c008:	dd000415 	stw	r20,16(sp)
    c00c:	ace7883a 	add	r19,r21,r19
    c010:	dc800215 	stw	r18,8(sp)
    c014:	dc400115 	stw	r17,4(sp)
    c018:	dc000015 	stw	r16,0(sp)
    c01c:	dfc00615 	stw	ra,24(sp)
    c020:	9c000044 	addi	r16,r19,1
    c024:	2823883a 	mov	r17,r5
    c028:	3029883a 	mov	r20,r6
    c02c:	2025883a 	mov	r18,r4
    c030:	29400117 	ldw	r5,4(r5)
    c034:	1400030e 	bge	r2,r16,c044 <__lshift+0x54>
    c038:	1085883a 	add	r2,r2,r2
    c03c:	29400044 	addi	r5,r5,1
    c040:	143ffd16 	blt	r2,r16,c038 <__alt_data_end+0xfffdb2f8>
    c044:	9009883a 	mov	r4,r18
    c048:	000b7b40 	call	b7b4 <_Balloc>
    c04c:	10c00504 	addi	r3,r2,20
    c050:	0540070e 	bge	zero,r21,c070 <__lshift+0x80>
    c054:	ad6b883a 	add	r21,r21,r21
    c058:	ad6b883a 	add	r21,r21,r21
    c05c:	1809883a 	mov	r4,r3
    c060:	1d47883a 	add	r3,r3,r21
    c064:	20000015 	stw	zero,0(r4)
    c068:	21000104 	addi	r4,r4,4
    c06c:	193ffd1e 	bne	r3,r4,c064 <__alt_data_end+0xfffdb324>
    c070:	8a000417 	ldw	r8,16(r17)
    c074:	89000504 	addi	r4,r17,20
    c078:	a18007cc 	andi	r6,r20,31
    c07c:	4211883a 	add	r8,r8,r8
    c080:	4211883a 	add	r8,r8,r8
    c084:	2211883a 	add	r8,r4,r8
    c088:	30002326 	beq	r6,zero,c118 <__lshift+0x128>
    c08c:	02400804 	movi	r9,32
    c090:	4993c83a 	sub	r9,r9,r6
    c094:	000b883a 	mov	r5,zero
    c098:	21c00017 	ldw	r7,0(r4)
    c09c:	1815883a 	mov	r10,r3
    c0a0:	18c00104 	addi	r3,r3,4
    c0a4:	398e983a 	sll	r7,r7,r6
    c0a8:	21000104 	addi	r4,r4,4
    c0ac:	394ab03a 	or	r5,r7,r5
    c0b0:	197fff15 	stw	r5,-4(r3)
    c0b4:	217fff17 	ldw	r5,-4(r4)
    c0b8:	2a4ad83a 	srl	r5,r5,r9
    c0bc:	223ff636 	bltu	r4,r8,c098 <__alt_data_end+0xfffdb358>
    c0c0:	51400115 	stw	r5,4(r10)
    c0c4:	28001a1e 	bne	r5,zero,c130 <__lshift+0x140>
    c0c8:	843fffc4 	addi	r16,r16,-1
    c0cc:	14000415 	stw	r16,16(r2)
    c0d0:	88000826 	beq	r17,zero,c0f4 <__lshift+0x104>
    c0d4:	89000117 	ldw	r4,4(r17)
    c0d8:	90c01317 	ldw	r3,76(r18)
    c0dc:	2109883a 	add	r4,r4,r4
    c0e0:	2109883a 	add	r4,r4,r4
    c0e4:	1907883a 	add	r3,r3,r4
    c0e8:	19000017 	ldw	r4,0(r3)
    c0ec:	89000015 	stw	r4,0(r17)
    c0f0:	1c400015 	stw	r17,0(r3)
    c0f4:	dfc00617 	ldw	ra,24(sp)
    c0f8:	dd400517 	ldw	r21,20(sp)
    c0fc:	dd000417 	ldw	r20,16(sp)
    c100:	dcc00317 	ldw	r19,12(sp)
    c104:	dc800217 	ldw	r18,8(sp)
    c108:	dc400117 	ldw	r17,4(sp)
    c10c:	dc000017 	ldw	r16,0(sp)
    c110:	dec00704 	addi	sp,sp,28
    c114:	f800283a 	ret
    c118:	21400017 	ldw	r5,0(r4)
    c11c:	18c00104 	addi	r3,r3,4
    c120:	21000104 	addi	r4,r4,4
    c124:	197fff15 	stw	r5,-4(r3)
    c128:	223ffb36 	bltu	r4,r8,c118 <__alt_data_end+0xfffdb3d8>
    c12c:	003fe606 	br	c0c8 <__alt_data_end+0xfffdb388>
    c130:	9c000084 	addi	r16,r19,2
    c134:	003fe406 	br	c0c8 <__alt_data_end+0xfffdb388>

0000c138 <__mcmp>:
    c138:	20800417 	ldw	r2,16(r4)
    c13c:	28c00417 	ldw	r3,16(r5)
    c140:	10c5c83a 	sub	r2,r2,r3
    c144:	1000111e 	bne	r2,zero,c18c <__mcmp+0x54>
    c148:	18c7883a 	add	r3,r3,r3
    c14c:	18c7883a 	add	r3,r3,r3
    c150:	21000504 	addi	r4,r4,20
    c154:	29400504 	addi	r5,r5,20
    c158:	20c5883a 	add	r2,r4,r3
    c15c:	28cb883a 	add	r5,r5,r3
    c160:	00000106 	br	c168 <__mcmp+0x30>
    c164:	20800a2e 	bgeu	r4,r2,c190 <__mcmp+0x58>
    c168:	10bfff04 	addi	r2,r2,-4
    c16c:	297fff04 	addi	r5,r5,-4
    c170:	11800017 	ldw	r6,0(r2)
    c174:	28c00017 	ldw	r3,0(r5)
    c178:	30fffa26 	beq	r6,r3,c164 <__alt_data_end+0xfffdb424>
    c17c:	30c00236 	bltu	r6,r3,c188 <__mcmp+0x50>
    c180:	00800044 	movi	r2,1
    c184:	f800283a 	ret
    c188:	00bfffc4 	movi	r2,-1
    c18c:	f800283a 	ret
    c190:	0005883a 	mov	r2,zero
    c194:	f800283a 	ret

0000c198 <__mdiff>:
    c198:	28c00417 	ldw	r3,16(r5)
    c19c:	30800417 	ldw	r2,16(r6)
    c1a0:	defffa04 	addi	sp,sp,-24
    c1a4:	dcc00315 	stw	r19,12(sp)
    c1a8:	dc800215 	stw	r18,8(sp)
    c1ac:	dfc00515 	stw	ra,20(sp)
    c1b0:	dd000415 	stw	r20,16(sp)
    c1b4:	dc400115 	stw	r17,4(sp)
    c1b8:	dc000015 	stw	r16,0(sp)
    c1bc:	1887c83a 	sub	r3,r3,r2
    c1c0:	2825883a 	mov	r18,r5
    c1c4:	3027883a 	mov	r19,r6
    c1c8:	1800141e 	bne	r3,zero,c21c <__mdiff+0x84>
    c1cc:	1085883a 	add	r2,r2,r2
    c1d0:	1085883a 	add	r2,r2,r2
    c1d4:	2a000504 	addi	r8,r5,20
    c1d8:	34000504 	addi	r16,r6,20
    c1dc:	4087883a 	add	r3,r8,r2
    c1e0:	8085883a 	add	r2,r16,r2
    c1e4:	00000106 	br	c1ec <__mdiff+0x54>
    c1e8:	40c0592e 	bgeu	r8,r3,c350 <__mdiff+0x1b8>
    c1ec:	18ffff04 	addi	r3,r3,-4
    c1f0:	10bfff04 	addi	r2,r2,-4
    c1f4:	19c00017 	ldw	r7,0(r3)
    c1f8:	11400017 	ldw	r5,0(r2)
    c1fc:	397ffa26 	beq	r7,r5,c1e8 <__alt_data_end+0xfffdb4a8>
    c200:	3940592e 	bgeu	r7,r5,c368 <__mdiff+0x1d0>
    c204:	9005883a 	mov	r2,r18
    c208:	4023883a 	mov	r17,r8
    c20c:	9825883a 	mov	r18,r19
    c210:	05000044 	movi	r20,1
    c214:	1027883a 	mov	r19,r2
    c218:	00000406 	br	c22c <__mdiff+0x94>
    c21c:	18005616 	blt	r3,zero,c378 <__mdiff+0x1e0>
    c220:	34400504 	addi	r17,r6,20
    c224:	2c000504 	addi	r16,r5,20
    c228:	0029883a 	mov	r20,zero
    c22c:	91400117 	ldw	r5,4(r18)
    c230:	000b7b40 	call	b7b4 <_Balloc>
    c234:	92400417 	ldw	r9,16(r18)
    c238:	9b000417 	ldw	r12,16(r19)
    c23c:	12c00504 	addi	r11,r2,20
    c240:	4a51883a 	add	r8,r9,r9
    c244:	6319883a 	add	r12,r12,r12
    c248:	4211883a 	add	r8,r8,r8
    c24c:	6319883a 	add	r12,r12,r12
    c250:	15000315 	stw	r20,12(r2)
    c254:	8211883a 	add	r8,r16,r8
    c258:	8b19883a 	add	r12,r17,r12
    c25c:	0007883a 	mov	r3,zero
    c260:	81400017 	ldw	r5,0(r16)
    c264:	89c00017 	ldw	r7,0(r17)
    c268:	59800104 	addi	r6,r11,4
    c26c:	293fffcc 	andi	r4,r5,65535
    c270:	20c7883a 	add	r3,r4,r3
    c274:	393fffcc 	andi	r4,r7,65535
    c278:	1909c83a 	sub	r4,r3,r4
    c27c:	280ad43a 	srli	r5,r5,16
    c280:	380ed43a 	srli	r7,r7,16
    c284:	2007d43a 	srai	r3,r4,16
    c288:	213fffcc 	andi	r4,r4,65535
    c28c:	29cbc83a 	sub	r5,r5,r7
    c290:	28c7883a 	add	r3,r5,r3
    c294:	180a943a 	slli	r5,r3,16
    c298:	8c400104 	addi	r17,r17,4
    c29c:	84000104 	addi	r16,r16,4
    c2a0:	2908b03a 	or	r4,r5,r4
    c2a4:	59000015 	stw	r4,0(r11)
    c2a8:	1807d43a 	srai	r3,r3,16
    c2ac:	3015883a 	mov	r10,r6
    c2b0:	3017883a 	mov	r11,r6
    c2b4:	8b3fea36 	bltu	r17,r12,c260 <__alt_data_end+0xfffdb520>
    c2b8:	8200162e 	bgeu	r16,r8,c314 <__mdiff+0x17c>
    c2bc:	8017883a 	mov	r11,r16
    c2c0:	59400017 	ldw	r5,0(r11)
    c2c4:	31800104 	addi	r6,r6,4
    c2c8:	5ac00104 	addi	r11,r11,4
    c2cc:	293fffcc 	andi	r4,r5,65535
    c2d0:	20c7883a 	add	r3,r4,r3
    c2d4:	280ed43a 	srli	r7,r5,16
    c2d8:	180bd43a 	srai	r5,r3,16
    c2dc:	193fffcc 	andi	r4,r3,65535
    c2e0:	3947883a 	add	r3,r7,r5
    c2e4:	180a943a 	slli	r5,r3,16
    c2e8:	1807d43a 	srai	r3,r3,16
    c2ec:	2908b03a 	or	r4,r5,r4
    c2f0:	313fff15 	stw	r4,-4(r6)
    c2f4:	5a3ff236 	bltu	r11,r8,c2c0 <__alt_data_end+0xfffdb580>
    c2f8:	0406303a 	nor	r3,zero,r16
    c2fc:	1a07883a 	add	r3,r3,r8
    c300:	1806d0ba 	srli	r3,r3,2
    c304:	18c00044 	addi	r3,r3,1
    c308:	18c7883a 	add	r3,r3,r3
    c30c:	18c7883a 	add	r3,r3,r3
    c310:	50d5883a 	add	r10,r10,r3
    c314:	50ffff04 	addi	r3,r10,-4
    c318:	2000041e 	bne	r4,zero,c32c <__mdiff+0x194>
    c31c:	18ffff04 	addi	r3,r3,-4
    c320:	19000017 	ldw	r4,0(r3)
    c324:	4a7fffc4 	addi	r9,r9,-1
    c328:	203ffc26 	beq	r4,zero,c31c <__alt_data_end+0xfffdb5dc>
    c32c:	12400415 	stw	r9,16(r2)
    c330:	dfc00517 	ldw	ra,20(sp)
    c334:	dd000417 	ldw	r20,16(sp)
    c338:	dcc00317 	ldw	r19,12(sp)
    c33c:	dc800217 	ldw	r18,8(sp)
    c340:	dc400117 	ldw	r17,4(sp)
    c344:	dc000017 	ldw	r16,0(sp)
    c348:	dec00604 	addi	sp,sp,24
    c34c:	f800283a 	ret
    c350:	000b883a 	mov	r5,zero
    c354:	000b7b40 	call	b7b4 <_Balloc>
    c358:	00c00044 	movi	r3,1
    c35c:	10c00415 	stw	r3,16(r2)
    c360:	10000515 	stw	zero,20(r2)
    c364:	003ff206 	br	c330 <__alt_data_end+0xfffdb5f0>
    c368:	8023883a 	mov	r17,r16
    c36c:	0029883a 	mov	r20,zero
    c370:	4021883a 	mov	r16,r8
    c374:	003fad06 	br	c22c <__alt_data_end+0xfffdb4ec>
    c378:	9005883a 	mov	r2,r18
    c37c:	94400504 	addi	r17,r18,20
    c380:	9c000504 	addi	r16,r19,20
    c384:	9825883a 	mov	r18,r19
    c388:	05000044 	movi	r20,1
    c38c:	1027883a 	mov	r19,r2
    c390:	003fa606 	br	c22c <__alt_data_end+0xfffdb4ec>

0000c394 <__ulp>:
    c394:	295ffc2c 	andhi	r5,r5,32752
    c398:	00bf3034 	movhi	r2,64704
    c39c:	2887883a 	add	r3,r5,r2
    c3a0:	00c0020e 	bge	zero,r3,c3ac <__ulp+0x18>
    c3a4:	0005883a 	mov	r2,zero
    c3a8:	f800283a 	ret
    c3ac:	00c7c83a 	sub	r3,zero,r3
    c3b0:	1807d53a 	srai	r3,r3,20
    c3b4:	008004c4 	movi	r2,19
    c3b8:	10c00b0e 	bge	r2,r3,c3e8 <__ulp+0x54>
    c3bc:	18bffb04 	addi	r2,r3,-20
    c3c0:	01000784 	movi	r4,30
    c3c4:	0007883a 	mov	r3,zero
    c3c8:	20800516 	blt	r4,r2,c3e0 <__ulp+0x4c>
    c3cc:	010007c4 	movi	r4,31
    c3d0:	2089c83a 	sub	r4,r4,r2
    c3d4:	00800044 	movi	r2,1
    c3d8:	1104983a 	sll	r2,r2,r4
    c3dc:	f800283a 	ret
    c3e0:	00800044 	movi	r2,1
    c3e4:	f800283a 	ret
    c3e8:	01400234 	movhi	r5,8
    c3ec:	28c7d83a 	sra	r3,r5,r3
    c3f0:	0005883a 	mov	r2,zero
    c3f4:	f800283a 	ret

0000c3f8 <__b2d>:
    c3f8:	defffa04 	addi	sp,sp,-24
    c3fc:	dc000015 	stw	r16,0(sp)
    c400:	24000417 	ldw	r16,16(r4)
    c404:	dc400115 	stw	r17,4(sp)
    c408:	24400504 	addi	r17,r4,20
    c40c:	8421883a 	add	r16,r16,r16
    c410:	8421883a 	add	r16,r16,r16
    c414:	8c21883a 	add	r16,r17,r16
    c418:	dc800215 	stw	r18,8(sp)
    c41c:	84bfff17 	ldw	r18,-4(r16)
    c420:	dd000415 	stw	r20,16(sp)
    c424:	dcc00315 	stw	r19,12(sp)
    c428:	9009883a 	mov	r4,r18
    c42c:	2829883a 	mov	r20,r5
    c430:	dfc00515 	stw	ra,20(sp)
    c434:	000bad00 	call	bad0 <__hi0bits>
    c438:	00c00804 	movi	r3,32
    c43c:	1889c83a 	sub	r4,r3,r2
    c440:	a1000015 	stw	r4,0(r20)
    c444:	01000284 	movi	r4,10
    c448:	84ffff04 	addi	r19,r16,-4
    c44c:	20801216 	blt	r4,r2,c498 <__b2d+0xa0>
    c450:	018002c4 	movi	r6,11
    c454:	308dc83a 	sub	r6,r6,r2
    c458:	9186d83a 	srl	r3,r18,r6
    c45c:	18cffc34 	orhi	r3,r3,16368
    c460:	8cc0212e 	bgeu	r17,r19,c4e8 <__b2d+0xf0>
    c464:	813ffe17 	ldw	r4,-8(r16)
    c468:	218cd83a 	srl	r6,r4,r6
    c46c:	10800544 	addi	r2,r2,21
    c470:	9084983a 	sll	r2,r18,r2
    c474:	1184b03a 	or	r2,r2,r6
    c478:	dfc00517 	ldw	ra,20(sp)
    c47c:	dd000417 	ldw	r20,16(sp)
    c480:	dcc00317 	ldw	r19,12(sp)
    c484:	dc800217 	ldw	r18,8(sp)
    c488:	dc400117 	ldw	r17,4(sp)
    c48c:	dc000017 	ldw	r16,0(sp)
    c490:	dec00604 	addi	sp,sp,24
    c494:	f800283a 	ret
    c498:	8cc00f2e 	bgeu	r17,r19,c4d8 <__b2d+0xe0>
    c49c:	117ffd44 	addi	r5,r2,-11
    c4a0:	80bffe17 	ldw	r2,-8(r16)
    c4a4:	28000e26 	beq	r5,zero,c4e0 <__b2d+0xe8>
    c4a8:	1949c83a 	sub	r4,r3,r5
    c4ac:	9164983a 	sll	r18,r18,r5
    c4b0:	1106d83a 	srl	r3,r2,r4
    c4b4:	81bffe04 	addi	r6,r16,-8
    c4b8:	948ffc34 	orhi	r18,r18,16368
    c4bc:	90c6b03a 	or	r3,r18,r3
    c4c0:	89800e2e 	bgeu	r17,r6,c4fc <__b2d+0x104>
    c4c4:	81bffd17 	ldw	r6,-12(r16)
    c4c8:	1144983a 	sll	r2,r2,r5
    c4cc:	310ad83a 	srl	r5,r6,r4
    c4d0:	2884b03a 	or	r2,r5,r2
    c4d4:	003fe806 	br	c478 <__alt_data_end+0xfffdb738>
    c4d8:	10bffd44 	addi	r2,r2,-11
    c4dc:	1000041e 	bne	r2,zero,c4f0 <__b2d+0xf8>
    c4e0:	90cffc34 	orhi	r3,r18,16368
    c4e4:	003fe406 	br	c478 <__alt_data_end+0xfffdb738>
    c4e8:	000d883a 	mov	r6,zero
    c4ec:	003fdf06 	br	c46c <__alt_data_end+0xfffdb72c>
    c4f0:	90a4983a 	sll	r18,r18,r2
    c4f4:	0005883a 	mov	r2,zero
    c4f8:	003ff906 	br	c4e0 <__alt_data_end+0xfffdb7a0>
    c4fc:	1144983a 	sll	r2,r2,r5
    c500:	003fdd06 	br	c478 <__alt_data_end+0xfffdb738>

0000c504 <__d2b>:
    c504:	defff804 	addi	sp,sp,-32
    c508:	dc000215 	stw	r16,8(sp)
    c50c:	3021883a 	mov	r16,r6
    c510:	dc400315 	stw	r17,12(sp)
    c514:	8022907a 	slli	r17,r16,1
    c518:	dd000615 	stw	r20,24(sp)
    c51c:	2829883a 	mov	r20,r5
    c520:	01400044 	movi	r5,1
    c524:	dcc00515 	stw	r19,20(sp)
    c528:	dc800415 	stw	r18,16(sp)
    c52c:	dfc00715 	stw	ra,28(sp)
    c530:	3825883a 	mov	r18,r7
    c534:	8822d57a 	srli	r17,r17,21
    c538:	000b7b40 	call	b7b4 <_Balloc>
    c53c:	1027883a 	mov	r19,r2
    c540:	00800434 	movhi	r2,16
    c544:	10bfffc4 	addi	r2,r2,-1
    c548:	808c703a 	and	r6,r16,r2
    c54c:	88000126 	beq	r17,zero,c554 <__d2b+0x50>
    c550:	31800434 	orhi	r6,r6,16
    c554:	d9800015 	stw	r6,0(sp)
    c558:	a0002426 	beq	r20,zero,c5ec <__d2b+0xe8>
    c55c:	d9000104 	addi	r4,sp,4
    c560:	dd000115 	stw	r20,4(sp)
    c564:	000bb380 	call	bb38 <__lo0bits>
    c568:	d8c00017 	ldw	r3,0(sp)
    c56c:	10002f1e 	bne	r2,zero,c62c <__d2b+0x128>
    c570:	d9000117 	ldw	r4,4(sp)
    c574:	99000515 	stw	r4,20(r19)
    c578:	1821003a 	cmpeq	r16,r3,zero
    c57c:	01000084 	movi	r4,2
    c580:	2421c83a 	sub	r16,r4,r16
    c584:	98c00615 	stw	r3,24(r19)
    c588:	9c000415 	stw	r16,16(r19)
    c58c:	88001f1e 	bne	r17,zero,c60c <__d2b+0x108>
    c590:	10bef384 	addi	r2,r2,-1074
    c594:	90800015 	stw	r2,0(r18)
    c598:	00900034 	movhi	r2,16384
    c59c:	10bfffc4 	addi	r2,r2,-1
    c5a0:	8085883a 	add	r2,r16,r2
    c5a4:	1085883a 	add	r2,r2,r2
    c5a8:	1085883a 	add	r2,r2,r2
    c5ac:	9885883a 	add	r2,r19,r2
    c5b0:	11000517 	ldw	r4,20(r2)
    c5b4:	8020917a 	slli	r16,r16,5
    c5b8:	000bad00 	call	bad0 <__hi0bits>
    c5bc:	d8c00817 	ldw	r3,32(sp)
    c5c0:	8085c83a 	sub	r2,r16,r2
    c5c4:	18800015 	stw	r2,0(r3)
    c5c8:	9805883a 	mov	r2,r19
    c5cc:	dfc00717 	ldw	ra,28(sp)
    c5d0:	dd000617 	ldw	r20,24(sp)
    c5d4:	dcc00517 	ldw	r19,20(sp)
    c5d8:	dc800417 	ldw	r18,16(sp)
    c5dc:	dc400317 	ldw	r17,12(sp)
    c5e0:	dc000217 	ldw	r16,8(sp)
    c5e4:	dec00804 	addi	sp,sp,32
    c5e8:	f800283a 	ret
    c5ec:	d809883a 	mov	r4,sp
    c5f0:	000bb380 	call	bb38 <__lo0bits>
    c5f4:	d8c00017 	ldw	r3,0(sp)
    c5f8:	04000044 	movi	r16,1
    c5fc:	9c000415 	stw	r16,16(r19)
    c600:	98c00515 	stw	r3,20(r19)
    c604:	10800804 	addi	r2,r2,32
    c608:	883fe126 	beq	r17,zero,c590 <__alt_data_end+0xfffdb850>
    c60c:	00c00d44 	movi	r3,53
    c610:	8c7ef344 	addi	r17,r17,-1075
    c614:	88a3883a 	add	r17,r17,r2
    c618:	1885c83a 	sub	r2,r3,r2
    c61c:	d8c00817 	ldw	r3,32(sp)
    c620:	94400015 	stw	r17,0(r18)
    c624:	18800015 	stw	r2,0(r3)
    c628:	003fe706 	br	c5c8 <__alt_data_end+0xfffdb888>
    c62c:	01000804 	movi	r4,32
    c630:	2089c83a 	sub	r4,r4,r2
    c634:	1908983a 	sll	r4,r3,r4
    c638:	d9400117 	ldw	r5,4(sp)
    c63c:	1886d83a 	srl	r3,r3,r2
    c640:	2148b03a 	or	r4,r4,r5
    c644:	99000515 	stw	r4,20(r19)
    c648:	d8c00015 	stw	r3,0(sp)
    c64c:	003fca06 	br	c578 <__alt_data_end+0xfffdb838>

0000c650 <__ratio>:
    c650:	defff904 	addi	sp,sp,-28
    c654:	dc400315 	stw	r17,12(sp)
    c658:	2823883a 	mov	r17,r5
    c65c:	d9400104 	addi	r5,sp,4
    c660:	dfc00615 	stw	ra,24(sp)
    c664:	dcc00515 	stw	r19,20(sp)
    c668:	dc800415 	stw	r18,16(sp)
    c66c:	2027883a 	mov	r19,r4
    c670:	dc000215 	stw	r16,8(sp)
    c674:	000c3f80 	call	c3f8 <__b2d>
    c678:	d80b883a 	mov	r5,sp
    c67c:	8809883a 	mov	r4,r17
    c680:	1025883a 	mov	r18,r2
    c684:	1821883a 	mov	r16,r3
    c688:	000c3f80 	call	c3f8 <__b2d>
    c68c:	8a000417 	ldw	r8,16(r17)
    c690:	99000417 	ldw	r4,16(r19)
    c694:	d9400117 	ldw	r5,4(sp)
    c698:	2209c83a 	sub	r4,r4,r8
    c69c:	2010917a 	slli	r8,r4,5
    c6a0:	d9000017 	ldw	r4,0(sp)
    c6a4:	2909c83a 	sub	r4,r5,r4
    c6a8:	4109883a 	add	r4,r8,r4
    c6ac:	01000e0e 	bge	zero,r4,c6e8 <__ratio+0x98>
    c6b0:	2008953a 	slli	r4,r4,20
    c6b4:	2421883a 	add	r16,r4,r16
    c6b8:	100d883a 	mov	r6,r2
    c6bc:	180f883a 	mov	r7,r3
    c6c0:	9009883a 	mov	r4,r18
    c6c4:	800b883a 	mov	r5,r16
    c6c8:	00038180 	call	3818 <__divdf3>
    c6cc:	dfc00617 	ldw	ra,24(sp)
    c6d0:	dcc00517 	ldw	r19,20(sp)
    c6d4:	dc800417 	ldw	r18,16(sp)
    c6d8:	dc400317 	ldw	r17,12(sp)
    c6dc:	dc000217 	ldw	r16,8(sp)
    c6e0:	dec00704 	addi	sp,sp,28
    c6e4:	f800283a 	ret
    c6e8:	2008953a 	slli	r4,r4,20
    c6ec:	1907c83a 	sub	r3,r3,r4
    c6f0:	003ff106 	br	c6b8 <__alt_data_end+0xfffdb978>

0000c6f4 <_mprec_log10>:
    c6f4:	defffe04 	addi	sp,sp,-8
    c6f8:	dc000015 	stw	r16,0(sp)
    c6fc:	dfc00115 	stw	ra,4(sp)
    c700:	008005c4 	movi	r2,23
    c704:	2021883a 	mov	r16,r4
    c708:	11000d0e 	bge	r2,r4,c740 <_mprec_log10+0x4c>
    c70c:	0005883a 	mov	r2,zero
    c710:	00cffc34 	movhi	r3,16368
    c714:	843fffc4 	addi	r16,r16,-1
    c718:	000d883a 	mov	r6,zero
    c71c:	01d00934 	movhi	r7,16420
    c720:	1009883a 	mov	r4,r2
    c724:	180b883a 	mov	r5,r3
    c728:	00044400 	call	4440 <__muldf3>
    c72c:	803ff91e 	bne	r16,zero,c714 <__alt_data_end+0xfffdb9d4>
    c730:	dfc00117 	ldw	ra,4(sp)
    c734:	dc000017 	ldw	r16,0(sp)
    c738:	dec00204 	addi	sp,sp,8
    c73c:	f800283a 	ret
    c740:	202090fa 	slli	r16,r4,3
    c744:	008000b4 	movhi	r2,2
    c748:	10b6bd04 	addi	r2,r2,-9484
    c74c:	1421883a 	add	r16,r2,r16
    c750:	80800017 	ldw	r2,0(r16)
    c754:	80c00117 	ldw	r3,4(r16)
    c758:	dfc00117 	ldw	ra,4(sp)
    c75c:	dc000017 	ldw	r16,0(sp)
    c760:	dec00204 	addi	sp,sp,8
    c764:	f800283a 	ret

0000c768 <__copybits>:
    c768:	297fffc4 	addi	r5,r5,-1
    c76c:	280fd17a 	srai	r7,r5,5
    c770:	30c00417 	ldw	r3,16(r6)
    c774:	30800504 	addi	r2,r6,20
    c778:	39c00044 	addi	r7,r7,1
    c77c:	18c7883a 	add	r3,r3,r3
    c780:	39cf883a 	add	r7,r7,r7
    c784:	18c7883a 	add	r3,r3,r3
    c788:	39cf883a 	add	r7,r7,r7
    c78c:	10c7883a 	add	r3,r2,r3
    c790:	21cf883a 	add	r7,r4,r7
    c794:	10c00d2e 	bgeu	r2,r3,c7cc <__copybits+0x64>
    c798:	200b883a 	mov	r5,r4
    c79c:	12000017 	ldw	r8,0(r2)
    c7a0:	29400104 	addi	r5,r5,4
    c7a4:	10800104 	addi	r2,r2,4
    c7a8:	2a3fff15 	stw	r8,-4(r5)
    c7ac:	10fffb36 	bltu	r2,r3,c79c <__alt_data_end+0xfffdba5c>
    c7b0:	1985c83a 	sub	r2,r3,r6
    c7b4:	10bffac4 	addi	r2,r2,-21
    c7b8:	1004d0ba 	srli	r2,r2,2
    c7bc:	10800044 	addi	r2,r2,1
    c7c0:	1085883a 	add	r2,r2,r2
    c7c4:	1085883a 	add	r2,r2,r2
    c7c8:	2089883a 	add	r4,r4,r2
    c7cc:	21c0032e 	bgeu	r4,r7,c7dc <__copybits+0x74>
    c7d0:	20000015 	stw	zero,0(r4)
    c7d4:	21000104 	addi	r4,r4,4
    c7d8:	21fffd36 	bltu	r4,r7,c7d0 <__alt_data_end+0xfffdba90>
    c7dc:	f800283a 	ret

0000c7e0 <__any_on>:
    c7e0:	20c00417 	ldw	r3,16(r4)
    c7e4:	2805d17a 	srai	r2,r5,5
    c7e8:	21000504 	addi	r4,r4,20
    c7ec:	18800d0e 	bge	r3,r2,c824 <__any_on+0x44>
    c7f0:	18c7883a 	add	r3,r3,r3
    c7f4:	18c7883a 	add	r3,r3,r3
    c7f8:	20c7883a 	add	r3,r4,r3
    c7fc:	20c0192e 	bgeu	r4,r3,c864 <__any_on+0x84>
    c800:	18bfff17 	ldw	r2,-4(r3)
    c804:	18ffff04 	addi	r3,r3,-4
    c808:	1000041e 	bne	r2,zero,c81c <__any_on+0x3c>
    c80c:	20c0142e 	bgeu	r4,r3,c860 <__any_on+0x80>
    c810:	18ffff04 	addi	r3,r3,-4
    c814:	19400017 	ldw	r5,0(r3)
    c818:	283ffc26 	beq	r5,zero,c80c <__alt_data_end+0xfffdbacc>
    c81c:	00800044 	movi	r2,1
    c820:	f800283a 	ret
    c824:	10c00a0e 	bge	r2,r3,c850 <__any_on+0x70>
    c828:	1085883a 	add	r2,r2,r2
    c82c:	1085883a 	add	r2,r2,r2
    c830:	294007cc 	andi	r5,r5,31
    c834:	2087883a 	add	r3,r4,r2
    c838:	283ff026 	beq	r5,zero,c7fc <__alt_data_end+0xfffdbabc>
    c83c:	19800017 	ldw	r6,0(r3)
    c840:	3144d83a 	srl	r2,r6,r5
    c844:	114a983a 	sll	r5,r2,r5
    c848:	317ff41e 	bne	r6,r5,c81c <__alt_data_end+0xfffdbadc>
    c84c:	003feb06 	br	c7fc <__alt_data_end+0xfffdbabc>
    c850:	1085883a 	add	r2,r2,r2
    c854:	1085883a 	add	r2,r2,r2
    c858:	2087883a 	add	r3,r4,r2
    c85c:	003fe706 	br	c7fc <__alt_data_end+0xfffdbabc>
    c860:	f800283a 	ret
    c864:	0005883a 	mov	r2,zero
    c868:	f800283a 	ret

0000c86c <_realloc_r>:
    c86c:	defff604 	addi	sp,sp,-40
    c870:	dc800215 	stw	r18,8(sp)
    c874:	dfc00915 	stw	ra,36(sp)
    c878:	df000815 	stw	fp,32(sp)
    c87c:	ddc00715 	stw	r23,28(sp)
    c880:	dd800615 	stw	r22,24(sp)
    c884:	dd400515 	stw	r21,20(sp)
    c888:	dd000415 	stw	r20,16(sp)
    c88c:	dcc00315 	stw	r19,12(sp)
    c890:	dc400115 	stw	r17,4(sp)
    c894:	dc000015 	stw	r16,0(sp)
    c898:	3025883a 	mov	r18,r6
    c89c:	2800b726 	beq	r5,zero,cb7c <_realloc_r+0x310>
    c8a0:	282b883a 	mov	r21,r5
    c8a4:	2029883a 	mov	r20,r4
    c8a8:	00109d40 	call	109d4 <__malloc_lock>
    c8ac:	a8bfff17 	ldw	r2,-4(r21)
    c8b0:	043fff04 	movi	r16,-4
    c8b4:	90c002c4 	addi	r3,r18,11
    c8b8:	01000584 	movi	r4,22
    c8bc:	acfffe04 	addi	r19,r21,-8
    c8c0:	1420703a 	and	r16,r2,r16
    c8c4:	20c0332e 	bgeu	r4,r3,c994 <_realloc_r+0x128>
    c8c8:	047ffe04 	movi	r17,-8
    c8cc:	1c62703a 	and	r17,r3,r17
    c8d0:	8807883a 	mov	r3,r17
    c8d4:	88005816 	blt	r17,zero,ca38 <_realloc_r+0x1cc>
    c8d8:	8c805736 	bltu	r17,r18,ca38 <_realloc_r+0x1cc>
    c8dc:	80c0300e 	bge	r16,r3,c9a0 <_realloc_r+0x134>
    c8e0:	070000b4 	movhi	fp,2
    c8e4:	e7385f04 	addi	fp,fp,-7812
    c8e8:	e1c00217 	ldw	r7,8(fp)
    c8ec:	9c09883a 	add	r4,r19,r16
    c8f0:	22000117 	ldw	r8,4(r4)
    c8f4:	21c06326 	beq	r4,r7,ca84 <_realloc_r+0x218>
    c8f8:	017fff84 	movi	r5,-2
    c8fc:	414a703a 	and	r5,r8,r5
    c900:	214b883a 	add	r5,r4,r5
    c904:	29800117 	ldw	r6,4(r5)
    c908:	3180004c 	andi	r6,r6,1
    c90c:	30003f26 	beq	r6,zero,ca0c <_realloc_r+0x1a0>
    c910:	1080004c 	andi	r2,r2,1
    c914:	10008326 	beq	r2,zero,cb24 <_realloc_r+0x2b8>
    c918:	900b883a 	mov	r5,r18
    c91c:	a009883a 	mov	r4,r20
    c920:	00057a00 	call	57a0 <_malloc_r>
    c924:	1025883a 	mov	r18,r2
    c928:	10011e26 	beq	r2,zero,cda4 <_realloc_r+0x538>
    c92c:	a93fff17 	ldw	r4,-4(r21)
    c930:	10fffe04 	addi	r3,r2,-8
    c934:	00bfff84 	movi	r2,-2
    c938:	2084703a 	and	r2,r4,r2
    c93c:	9885883a 	add	r2,r19,r2
    c940:	1880ee26 	beq	r3,r2,ccfc <_realloc_r+0x490>
    c944:	81bfff04 	addi	r6,r16,-4
    c948:	00800904 	movi	r2,36
    c94c:	1180b836 	bltu	r2,r6,cc30 <_realloc_r+0x3c4>
    c950:	00c004c4 	movi	r3,19
    c954:	19809636 	bltu	r3,r6,cbb0 <_realloc_r+0x344>
    c958:	9005883a 	mov	r2,r18
    c95c:	a807883a 	mov	r3,r21
    c960:	19000017 	ldw	r4,0(r3)
    c964:	11000015 	stw	r4,0(r2)
    c968:	19000117 	ldw	r4,4(r3)
    c96c:	11000115 	stw	r4,4(r2)
    c970:	18c00217 	ldw	r3,8(r3)
    c974:	10c00215 	stw	r3,8(r2)
    c978:	a80b883a 	mov	r5,r21
    c97c:	a009883a 	mov	r4,r20
    c980:	000a97c0 	call	a97c <_free_r>
    c984:	a009883a 	mov	r4,r20
    c988:	0010af40 	call	10af4 <__malloc_unlock>
    c98c:	9005883a 	mov	r2,r18
    c990:	00001206 	br	c9dc <_realloc_r+0x170>
    c994:	00c00404 	movi	r3,16
    c998:	1823883a 	mov	r17,r3
    c99c:	003fce06 	br	c8d8 <__alt_data_end+0xfffdbb98>
    c9a0:	a825883a 	mov	r18,r21
    c9a4:	8445c83a 	sub	r2,r16,r17
    c9a8:	00c003c4 	movi	r3,15
    c9ac:	18802636 	bltu	r3,r2,ca48 <_realloc_r+0x1dc>
    c9b0:	99800117 	ldw	r6,4(r19)
    c9b4:	9c07883a 	add	r3,r19,r16
    c9b8:	3180004c 	andi	r6,r6,1
    c9bc:	3420b03a 	or	r16,r6,r16
    c9c0:	9c000115 	stw	r16,4(r19)
    c9c4:	18800117 	ldw	r2,4(r3)
    c9c8:	10800054 	ori	r2,r2,1
    c9cc:	18800115 	stw	r2,4(r3)
    c9d0:	a009883a 	mov	r4,r20
    c9d4:	0010af40 	call	10af4 <__malloc_unlock>
    c9d8:	9005883a 	mov	r2,r18
    c9dc:	dfc00917 	ldw	ra,36(sp)
    c9e0:	df000817 	ldw	fp,32(sp)
    c9e4:	ddc00717 	ldw	r23,28(sp)
    c9e8:	dd800617 	ldw	r22,24(sp)
    c9ec:	dd400517 	ldw	r21,20(sp)
    c9f0:	dd000417 	ldw	r20,16(sp)
    c9f4:	dcc00317 	ldw	r19,12(sp)
    c9f8:	dc800217 	ldw	r18,8(sp)
    c9fc:	dc400117 	ldw	r17,4(sp)
    ca00:	dc000017 	ldw	r16,0(sp)
    ca04:	dec00a04 	addi	sp,sp,40
    ca08:	f800283a 	ret
    ca0c:	017fff04 	movi	r5,-4
    ca10:	414a703a 	and	r5,r8,r5
    ca14:	814d883a 	add	r6,r16,r5
    ca18:	30c01f16 	blt	r6,r3,ca98 <_realloc_r+0x22c>
    ca1c:	20800317 	ldw	r2,12(r4)
    ca20:	20c00217 	ldw	r3,8(r4)
    ca24:	a825883a 	mov	r18,r21
    ca28:	3021883a 	mov	r16,r6
    ca2c:	18800315 	stw	r2,12(r3)
    ca30:	10c00215 	stw	r3,8(r2)
    ca34:	003fdb06 	br	c9a4 <__alt_data_end+0xfffdbc64>
    ca38:	00800304 	movi	r2,12
    ca3c:	a0800015 	stw	r2,0(r20)
    ca40:	0005883a 	mov	r2,zero
    ca44:	003fe506 	br	c9dc <__alt_data_end+0xfffdbc9c>
    ca48:	98c00117 	ldw	r3,4(r19)
    ca4c:	9c4b883a 	add	r5,r19,r17
    ca50:	11000054 	ori	r4,r2,1
    ca54:	18c0004c 	andi	r3,r3,1
    ca58:	1c62b03a 	or	r17,r3,r17
    ca5c:	9c400115 	stw	r17,4(r19)
    ca60:	29000115 	stw	r4,4(r5)
    ca64:	2885883a 	add	r2,r5,r2
    ca68:	10c00117 	ldw	r3,4(r2)
    ca6c:	29400204 	addi	r5,r5,8
    ca70:	a009883a 	mov	r4,r20
    ca74:	18c00054 	ori	r3,r3,1
    ca78:	10c00115 	stw	r3,4(r2)
    ca7c:	000a97c0 	call	a97c <_free_r>
    ca80:	003fd306 	br	c9d0 <__alt_data_end+0xfffdbc90>
    ca84:	017fff04 	movi	r5,-4
    ca88:	414a703a 	and	r5,r8,r5
    ca8c:	89800404 	addi	r6,r17,16
    ca90:	8151883a 	add	r8,r16,r5
    ca94:	4180590e 	bge	r8,r6,cbfc <_realloc_r+0x390>
    ca98:	1080004c 	andi	r2,r2,1
    ca9c:	103f9e1e 	bne	r2,zero,c918 <__alt_data_end+0xfffdbbd8>
    caa0:	adbffe17 	ldw	r22,-8(r21)
    caa4:	00bfff04 	movi	r2,-4
    caa8:	9dadc83a 	sub	r22,r19,r22
    caac:	b1800117 	ldw	r6,4(r22)
    cab0:	3084703a 	and	r2,r6,r2
    cab4:	20002026 	beq	r4,zero,cb38 <_realloc_r+0x2cc>
    cab8:	80af883a 	add	r23,r16,r2
    cabc:	b96f883a 	add	r23,r23,r5
    cac0:	21c05f26 	beq	r4,r7,cc40 <_realloc_r+0x3d4>
    cac4:	b8c01c16 	blt	r23,r3,cb38 <_realloc_r+0x2cc>
    cac8:	20800317 	ldw	r2,12(r4)
    cacc:	20c00217 	ldw	r3,8(r4)
    cad0:	81bfff04 	addi	r6,r16,-4
    cad4:	01000904 	movi	r4,36
    cad8:	18800315 	stw	r2,12(r3)
    cadc:	10c00215 	stw	r3,8(r2)
    cae0:	b0c00217 	ldw	r3,8(r22)
    cae4:	b0800317 	ldw	r2,12(r22)
    cae8:	b4800204 	addi	r18,r22,8
    caec:	18800315 	stw	r2,12(r3)
    caf0:	10c00215 	stw	r3,8(r2)
    caf4:	21801b36 	bltu	r4,r6,cb64 <_realloc_r+0x2f8>
    caf8:	008004c4 	movi	r2,19
    cafc:	1180352e 	bgeu	r2,r6,cbd4 <_realloc_r+0x368>
    cb00:	a8800017 	ldw	r2,0(r21)
    cb04:	b0800215 	stw	r2,8(r22)
    cb08:	a8800117 	ldw	r2,4(r21)
    cb0c:	b0800315 	stw	r2,12(r22)
    cb10:	008006c4 	movi	r2,27
    cb14:	11807f36 	bltu	r2,r6,cd14 <_realloc_r+0x4a8>
    cb18:	b0800404 	addi	r2,r22,16
    cb1c:	ad400204 	addi	r21,r21,8
    cb20:	00002d06 	br	cbd8 <_realloc_r+0x36c>
    cb24:	adbffe17 	ldw	r22,-8(r21)
    cb28:	00bfff04 	movi	r2,-4
    cb2c:	9dadc83a 	sub	r22,r19,r22
    cb30:	b1000117 	ldw	r4,4(r22)
    cb34:	2084703a 	and	r2,r4,r2
    cb38:	b03f7726 	beq	r22,zero,c918 <__alt_data_end+0xfffdbbd8>
    cb3c:	80af883a 	add	r23,r16,r2
    cb40:	b8ff7516 	blt	r23,r3,c918 <__alt_data_end+0xfffdbbd8>
    cb44:	b0800317 	ldw	r2,12(r22)
    cb48:	b0c00217 	ldw	r3,8(r22)
    cb4c:	81bfff04 	addi	r6,r16,-4
    cb50:	01000904 	movi	r4,36
    cb54:	18800315 	stw	r2,12(r3)
    cb58:	10c00215 	stw	r3,8(r2)
    cb5c:	b4800204 	addi	r18,r22,8
    cb60:	21bfe52e 	bgeu	r4,r6,caf8 <__alt_data_end+0xfffdbdb8>
    cb64:	a80b883a 	mov	r5,r21
    cb68:	9009883a 	mov	r4,r18
    cb6c:	000b6580 	call	b658 <memmove>
    cb70:	b821883a 	mov	r16,r23
    cb74:	b027883a 	mov	r19,r22
    cb78:	003f8a06 	br	c9a4 <__alt_data_end+0xfffdbc64>
    cb7c:	300b883a 	mov	r5,r6
    cb80:	dfc00917 	ldw	ra,36(sp)
    cb84:	df000817 	ldw	fp,32(sp)
    cb88:	ddc00717 	ldw	r23,28(sp)
    cb8c:	dd800617 	ldw	r22,24(sp)
    cb90:	dd400517 	ldw	r21,20(sp)
    cb94:	dd000417 	ldw	r20,16(sp)
    cb98:	dcc00317 	ldw	r19,12(sp)
    cb9c:	dc800217 	ldw	r18,8(sp)
    cba0:	dc400117 	ldw	r17,4(sp)
    cba4:	dc000017 	ldw	r16,0(sp)
    cba8:	dec00a04 	addi	sp,sp,40
    cbac:	00057a01 	jmpi	57a0 <_malloc_r>
    cbb0:	a8c00017 	ldw	r3,0(r21)
    cbb4:	90c00015 	stw	r3,0(r18)
    cbb8:	a8c00117 	ldw	r3,4(r21)
    cbbc:	90c00115 	stw	r3,4(r18)
    cbc0:	00c006c4 	movi	r3,27
    cbc4:	19804536 	bltu	r3,r6,ccdc <_realloc_r+0x470>
    cbc8:	90800204 	addi	r2,r18,8
    cbcc:	a8c00204 	addi	r3,r21,8
    cbd0:	003f6306 	br	c960 <__alt_data_end+0xfffdbc20>
    cbd4:	9005883a 	mov	r2,r18
    cbd8:	a8c00017 	ldw	r3,0(r21)
    cbdc:	b821883a 	mov	r16,r23
    cbe0:	b027883a 	mov	r19,r22
    cbe4:	10c00015 	stw	r3,0(r2)
    cbe8:	a8c00117 	ldw	r3,4(r21)
    cbec:	10c00115 	stw	r3,4(r2)
    cbf0:	a8c00217 	ldw	r3,8(r21)
    cbf4:	10c00215 	stw	r3,8(r2)
    cbf8:	003f6a06 	br	c9a4 <__alt_data_end+0xfffdbc64>
    cbfc:	9c67883a 	add	r19,r19,r17
    cc00:	4445c83a 	sub	r2,r8,r17
    cc04:	e4c00215 	stw	r19,8(fp)
    cc08:	10800054 	ori	r2,r2,1
    cc0c:	98800115 	stw	r2,4(r19)
    cc10:	a8bfff17 	ldw	r2,-4(r21)
    cc14:	a009883a 	mov	r4,r20
    cc18:	1080004c 	andi	r2,r2,1
    cc1c:	1462b03a 	or	r17,r2,r17
    cc20:	ac7fff15 	stw	r17,-4(r21)
    cc24:	0010af40 	call	10af4 <__malloc_unlock>
    cc28:	a805883a 	mov	r2,r21
    cc2c:	003f6b06 	br	c9dc <__alt_data_end+0xfffdbc9c>
    cc30:	a80b883a 	mov	r5,r21
    cc34:	9009883a 	mov	r4,r18
    cc38:	000b6580 	call	b658 <memmove>
    cc3c:	003f4e06 	br	c978 <__alt_data_end+0xfffdbc38>
    cc40:	89000404 	addi	r4,r17,16
    cc44:	b93fbc16 	blt	r23,r4,cb38 <__alt_data_end+0xfffdbdf8>
    cc48:	b0800317 	ldw	r2,12(r22)
    cc4c:	b0c00217 	ldw	r3,8(r22)
    cc50:	81bfff04 	addi	r6,r16,-4
    cc54:	01000904 	movi	r4,36
    cc58:	18800315 	stw	r2,12(r3)
    cc5c:	10c00215 	stw	r3,8(r2)
    cc60:	b4800204 	addi	r18,r22,8
    cc64:	21804336 	bltu	r4,r6,cd74 <_realloc_r+0x508>
    cc68:	008004c4 	movi	r2,19
    cc6c:	11803f2e 	bgeu	r2,r6,cd6c <_realloc_r+0x500>
    cc70:	a8800017 	ldw	r2,0(r21)
    cc74:	b0800215 	stw	r2,8(r22)
    cc78:	a8800117 	ldw	r2,4(r21)
    cc7c:	b0800315 	stw	r2,12(r22)
    cc80:	008006c4 	movi	r2,27
    cc84:	11803f36 	bltu	r2,r6,cd84 <_realloc_r+0x518>
    cc88:	b0800404 	addi	r2,r22,16
    cc8c:	ad400204 	addi	r21,r21,8
    cc90:	a8c00017 	ldw	r3,0(r21)
    cc94:	10c00015 	stw	r3,0(r2)
    cc98:	a8c00117 	ldw	r3,4(r21)
    cc9c:	10c00115 	stw	r3,4(r2)
    cca0:	a8c00217 	ldw	r3,8(r21)
    cca4:	10c00215 	stw	r3,8(r2)
    cca8:	b447883a 	add	r3,r22,r17
    ccac:	bc45c83a 	sub	r2,r23,r17
    ccb0:	e0c00215 	stw	r3,8(fp)
    ccb4:	10800054 	ori	r2,r2,1
    ccb8:	18800115 	stw	r2,4(r3)
    ccbc:	b0800117 	ldw	r2,4(r22)
    ccc0:	a009883a 	mov	r4,r20
    ccc4:	1080004c 	andi	r2,r2,1
    ccc8:	1462b03a 	or	r17,r2,r17
    cccc:	b4400115 	stw	r17,4(r22)
    ccd0:	0010af40 	call	10af4 <__malloc_unlock>
    ccd4:	9005883a 	mov	r2,r18
    ccd8:	003f4006 	br	c9dc <__alt_data_end+0xfffdbc9c>
    ccdc:	a8c00217 	ldw	r3,8(r21)
    cce0:	90c00215 	stw	r3,8(r18)
    cce4:	a8c00317 	ldw	r3,12(r21)
    cce8:	90c00315 	stw	r3,12(r18)
    ccec:	30801126 	beq	r6,r2,cd34 <_realloc_r+0x4c8>
    ccf0:	90800404 	addi	r2,r18,16
    ccf4:	a8c00404 	addi	r3,r21,16
    ccf8:	003f1906 	br	c960 <__alt_data_end+0xfffdbc20>
    ccfc:	90ffff17 	ldw	r3,-4(r18)
    cd00:	00bfff04 	movi	r2,-4
    cd04:	a825883a 	mov	r18,r21
    cd08:	1884703a 	and	r2,r3,r2
    cd0c:	80a1883a 	add	r16,r16,r2
    cd10:	003f2406 	br	c9a4 <__alt_data_end+0xfffdbc64>
    cd14:	a8800217 	ldw	r2,8(r21)
    cd18:	b0800415 	stw	r2,16(r22)
    cd1c:	a8800317 	ldw	r2,12(r21)
    cd20:	b0800515 	stw	r2,20(r22)
    cd24:	31000a26 	beq	r6,r4,cd50 <_realloc_r+0x4e4>
    cd28:	b0800604 	addi	r2,r22,24
    cd2c:	ad400404 	addi	r21,r21,16
    cd30:	003fa906 	br	cbd8 <__alt_data_end+0xfffdbe98>
    cd34:	a9000417 	ldw	r4,16(r21)
    cd38:	90800604 	addi	r2,r18,24
    cd3c:	a8c00604 	addi	r3,r21,24
    cd40:	91000415 	stw	r4,16(r18)
    cd44:	a9000517 	ldw	r4,20(r21)
    cd48:	91000515 	stw	r4,20(r18)
    cd4c:	003f0406 	br	c960 <__alt_data_end+0xfffdbc20>
    cd50:	a8c00417 	ldw	r3,16(r21)
    cd54:	ad400604 	addi	r21,r21,24
    cd58:	b0800804 	addi	r2,r22,32
    cd5c:	b0c00615 	stw	r3,24(r22)
    cd60:	a8ffff17 	ldw	r3,-4(r21)
    cd64:	b0c00715 	stw	r3,28(r22)
    cd68:	003f9b06 	br	cbd8 <__alt_data_end+0xfffdbe98>
    cd6c:	9005883a 	mov	r2,r18
    cd70:	003fc706 	br	cc90 <__alt_data_end+0xfffdbf50>
    cd74:	a80b883a 	mov	r5,r21
    cd78:	9009883a 	mov	r4,r18
    cd7c:	000b6580 	call	b658 <memmove>
    cd80:	003fc906 	br	cca8 <__alt_data_end+0xfffdbf68>
    cd84:	a8800217 	ldw	r2,8(r21)
    cd88:	b0800415 	stw	r2,16(r22)
    cd8c:	a8800317 	ldw	r2,12(r21)
    cd90:	b0800515 	stw	r2,20(r22)
    cd94:	31000726 	beq	r6,r4,cdb4 <_realloc_r+0x548>
    cd98:	b0800604 	addi	r2,r22,24
    cd9c:	ad400404 	addi	r21,r21,16
    cda0:	003fbb06 	br	cc90 <__alt_data_end+0xfffdbf50>
    cda4:	a009883a 	mov	r4,r20
    cda8:	0010af40 	call	10af4 <__malloc_unlock>
    cdac:	0005883a 	mov	r2,zero
    cdb0:	003f0a06 	br	c9dc <__alt_data_end+0xfffdbc9c>
    cdb4:	a8c00417 	ldw	r3,16(r21)
    cdb8:	ad400604 	addi	r21,r21,24
    cdbc:	b0800804 	addi	r2,r22,32
    cdc0:	b0c00615 	stw	r3,24(r22)
    cdc4:	a8ffff17 	ldw	r3,-4(r21)
    cdc8:	b0c00715 	stw	r3,28(r22)
    cdcc:	003fb006 	br	cc90 <__alt_data_end+0xfffdbf50>

0000cdd0 <__sread>:
    cdd0:	defffe04 	addi	sp,sp,-8
    cdd4:	dc000015 	stw	r16,0(sp)
    cdd8:	2821883a 	mov	r16,r5
    cddc:	2940038f 	ldh	r5,14(r5)
    cde0:	dfc00115 	stw	ra,4(sp)
    cde4:	000ec8c0 	call	ec8c <_read_r>
    cde8:	10000716 	blt	r2,zero,ce08 <__sread+0x38>
    cdec:	80c01417 	ldw	r3,80(r16)
    cdf0:	1887883a 	add	r3,r3,r2
    cdf4:	80c01415 	stw	r3,80(r16)
    cdf8:	dfc00117 	ldw	ra,4(sp)
    cdfc:	dc000017 	ldw	r16,0(sp)
    ce00:	dec00204 	addi	sp,sp,8
    ce04:	f800283a 	ret
    ce08:	80c0030b 	ldhu	r3,12(r16)
    ce0c:	18fbffcc 	andi	r3,r3,61439
    ce10:	80c0030d 	sth	r3,12(r16)
    ce14:	dfc00117 	ldw	ra,4(sp)
    ce18:	dc000017 	ldw	r16,0(sp)
    ce1c:	dec00204 	addi	sp,sp,8
    ce20:	f800283a 	ret

0000ce24 <__seofread>:
    ce24:	0005883a 	mov	r2,zero
    ce28:	f800283a 	ret

0000ce2c <__swrite>:
    ce2c:	2880030b 	ldhu	r2,12(r5)
    ce30:	defffb04 	addi	sp,sp,-20
    ce34:	dcc00315 	stw	r19,12(sp)
    ce38:	dc800215 	stw	r18,8(sp)
    ce3c:	dc400115 	stw	r17,4(sp)
    ce40:	dc000015 	stw	r16,0(sp)
    ce44:	dfc00415 	stw	ra,16(sp)
    ce48:	10c0400c 	andi	r3,r2,256
    ce4c:	2821883a 	mov	r16,r5
    ce50:	2023883a 	mov	r17,r4
    ce54:	3025883a 	mov	r18,r6
    ce58:	3827883a 	mov	r19,r7
    ce5c:	18000526 	beq	r3,zero,ce74 <__swrite+0x48>
    ce60:	2940038f 	ldh	r5,14(r5)
    ce64:	01c00084 	movi	r7,2
    ce68:	000d883a 	mov	r6,zero
    ce6c:	000ec2c0 	call	ec2c <_lseek_r>
    ce70:	8080030b 	ldhu	r2,12(r16)
    ce74:	8140038f 	ldh	r5,14(r16)
    ce78:	10bbffcc 	andi	r2,r2,61439
    ce7c:	980f883a 	mov	r7,r19
    ce80:	900d883a 	mov	r6,r18
    ce84:	8809883a 	mov	r4,r17
    ce88:	8080030d 	sth	r2,12(r16)
    ce8c:	dfc00417 	ldw	ra,16(sp)
    ce90:	dcc00317 	ldw	r19,12(sp)
    ce94:	dc800217 	ldw	r18,8(sp)
    ce98:	dc400117 	ldw	r17,4(sp)
    ce9c:	dc000017 	ldw	r16,0(sp)
    cea0:	dec00504 	addi	sp,sp,20
    cea4:	000e6e01 	jmpi	e6e0 <_write_r>

0000cea8 <__sseek>:
    cea8:	defffe04 	addi	sp,sp,-8
    ceac:	dc000015 	stw	r16,0(sp)
    ceb0:	2821883a 	mov	r16,r5
    ceb4:	2940038f 	ldh	r5,14(r5)
    ceb8:	dfc00115 	stw	ra,4(sp)
    cebc:	000ec2c0 	call	ec2c <_lseek_r>
    cec0:	00ffffc4 	movi	r3,-1
    cec4:	10c00826 	beq	r2,r3,cee8 <__sseek+0x40>
    cec8:	80c0030b 	ldhu	r3,12(r16)
    cecc:	80801415 	stw	r2,80(r16)
    ced0:	18c40014 	ori	r3,r3,4096
    ced4:	80c0030d 	sth	r3,12(r16)
    ced8:	dfc00117 	ldw	ra,4(sp)
    cedc:	dc000017 	ldw	r16,0(sp)
    cee0:	dec00204 	addi	sp,sp,8
    cee4:	f800283a 	ret
    cee8:	80c0030b 	ldhu	r3,12(r16)
    ceec:	18fbffcc 	andi	r3,r3,61439
    cef0:	80c0030d 	sth	r3,12(r16)
    cef4:	dfc00117 	ldw	ra,4(sp)
    cef8:	dc000017 	ldw	r16,0(sp)
    cefc:	dec00204 	addi	sp,sp,8
    cf00:	f800283a 	ret

0000cf04 <__sclose>:
    cf04:	2940038f 	ldh	r5,14(r5)
    cf08:	000e7401 	jmpi	e740 <_close_r>

0000cf0c <strcmp>:
    cf0c:	2144b03a 	or	r2,r4,r5
    cf10:	108000cc 	andi	r2,r2,3
    cf14:	1000171e 	bne	r2,zero,cf74 <strcmp+0x68>
    cf18:	20800017 	ldw	r2,0(r4)
    cf1c:	28c00017 	ldw	r3,0(r5)
    cf20:	10c0141e 	bne	r2,r3,cf74 <strcmp+0x68>
    cf24:	027fbff4 	movhi	r9,65279
    cf28:	4a7fbfc4 	addi	r9,r9,-257
    cf2c:	0086303a 	nor	r3,zero,r2
    cf30:	02202074 	movhi	r8,32897
    cf34:	1245883a 	add	r2,r2,r9
    cf38:	42202004 	addi	r8,r8,-32640
    cf3c:	10c4703a 	and	r2,r2,r3
    cf40:	1204703a 	and	r2,r2,r8
    cf44:	10000226 	beq	r2,zero,cf50 <strcmp+0x44>
    cf48:	00002306 	br	cfd8 <strcmp+0xcc>
    cf4c:	1000221e 	bne	r2,zero,cfd8 <strcmp+0xcc>
    cf50:	21000104 	addi	r4,r4,4
    cf54:	20c00017 	ldw	r3,0(r4)
    cf58:	29400104 	addi	r5,r5,4
    cf5c:	29800017 	ldw	r6,0(r5)
    cf60:	1a4f883a 	add	r7,r3,r9
    cf64:	00c4303a 	nor	r2,zero,r3
    cf68:	3884703a 	and	r2,r7,r2
    cf6c:	1204703a 	and	r2,r2,r8
    cf70:	19bff626 	beq	r3,r6,cf4c <__alt_data_end+0xfffdc20c>
    cf74:	20800003 	ldbu	r2,0(r4)
    cf78:	10c03fcc 	andi	r3,r2,255
    cf7c:	18c0201c 	xori	r3,r3,128
    cf80:	18ffe004 	addi	r3,r3,-128
    cf84:	18000c26 	beq	r3,zero,cfb8 <strcmp+0xac>
    cf88:	29800007 	ldb	r6,0(r5)
    cf8c:	19800326 	beq	r3,r6,cf9c <strcmp+0x90>
    cf90:	00001306 	br	cfe0 <strcmp+0xd4>
    cf94:	29800007 	ldb	r6,0(r5)
    cf98:	11800b1e 	bne	r2,r6,cfc8 <strcmp+0xbc>
    cf9c:	21000044 	addi	r4,r4,1
    cfa0:	20c00003 	ldbu	r3,0(r4)
    cfa4:	29400044 	addi	r5,r5,1
    cfa8:	18803fcc 	andi	r2,r3,255
    cfac:	1080201c 	xori	r2,r2,128
    cfb0:	10bfe004 	addi	r2,r2,-128
    cfb4:	103ff71e 	bne	r2,zero,cf94 <__alt_data_end+0xfffdc254>
    cfb8:	0007883a 	mov	r3,zero
    cfbc:	28800003 	ldbu	r2,0(r5)
    cfc0:	1885c83a 	sub	r2,r3,r2
    cfc4:	f800283a 	ret
    cfc8:	28800003 	ldbu	r2,0(r5)
    cfcc:	18c03fcc 	andi	r3,r3,255
    cfd0:	1885c83a 	sub	r2,r3,r2
    cfd4:	f800283a 	ret
    cfd8:	0005883a 	mov	r2,zero
    cfdc:	f800283a 	ret
    cfe0:	10c03fcc 	andi	r3,r2,255
    cfe4:	003ff506 	br	cfbc <__alt_data_end+0xfffdc27c>

0000cfe8 <__sprint_r.part.0>:
    cfe8:	28801917 	ldw	r2,100(r5)
    cfec:	defff604 	addi	sp,sp,-40
    cff0:	dd400515 	stw	r21,20(sp)
    cff4:	dfc00915 	stw	ra,36(sp)
    cff8:	df000815 	stw	fp,32(sp)
    cffc:	ddc00715 	stw	r23,28(sp)
    d000:	dd800615 	stw	r22,24(sp)
    d004:	dd000415 	stw	r20,16(sp)
    d008:	dcc00315 	stw	r19,12(sp)
    d00c:	dc800215 	stw	r18,8(sp)
    d010:	dc400115 	stw	r17,4(sp)
    d014:	dc000015 	stw	r16,0(sp)
    d018:	1088000c 	andi	r2,r2,8192
    d01c:	302b883a 	mov	r21,r6
    d020:	10002e26 	beq	r2,zero,d0dc <__sprint_r.part.0+0xf4>
    d024:	30800217 	ldw	r2,8(r6)
    d028:	35800017 	ldw	r22,0(r6)
    d02c:	10002926 	beq	r2,zero,d0d4 <__sprint_r.part.0+0xec>
    d030:	2827883a 	mov	r19,r5
    d034:	2029883a 	mov	r20,r4
    d038:	b5c00104 	addi	r23,r22,4
    d03c:	04bfffc4 	movi	r18,-1
    d040:	bc400017 	ldw	r17,0(r23)
    d044:	b4000017 	ldw	r16,0(r22)
    d048:	0039883a 	mov	fp,zero
    d04c:	8822d0ba 	srli	r17,r17,2
    d050:	8800031e 	bne	r17,zero,d060 <__sprint_r.part.0+0x78>
    d054:	00001806 	br	d0b8 <__sprint_r.part.0+0xd0>
    d058:	84000104 	addi	r16,r16,4
    d05c:	8f001526 	beq	r17,fp,d0b4 <__sprint_r.part.0+0xcc>
    d060:	81400017 	ldw	r5,0(r16)
    d064:	980d883a 	mov	r6,r19
    d068:	a009883a 	mov	r4,r20
    d06c:	000ead80 	call	ead8 <_fputwc_r>
    d070:	e7000044 	addi	fp,fp,1
    d074:	14bff81e 	bne	r2,r18,d058 <__alt_data_end+0xfffdc318>
    d078:	9005883a 	mov	r2,r18
    d07c:	a8000215 	stw	zero,8(r21)
    d080:	a8000115 	stw	zero,4(r21)
    d084:	dfc00917 	ldw	ra,36(sp)
    d088:	df000817 	ldw	fp,32(sp)
    d08c:	ddc00717 	ldw	r23,28(sp)
    d090:	dd800617 	ldw	r22,24(sp)
    d094:	dd400517 	ldw	r21,20(sp)
    d098:	dd000417 	ldw	r20,16(sp)
    d09c:	dcc00317 	ldw	r19,12(sp)
    d0a0:	dc800217 	ldw	r18,8(sp)
    d0a4:	dc400117 	ldw	r17,4(sp)
    d0a8:	dc000017 	ldw	r16,0(sp)
    d0ac:	dec00a04 	addi	sp,sp,40
    d0b0:	f800283a 	ret
    d0b4:	a8800217 	ldw	r2,8(r21)
    d0b8:	8c63883a 	add	r17,r17,r17
    d0bc:	8c63883a 	add	r17,r17,r17
    d0c0:	1445c83a 	sub	r2,r2,r17
    d0c4:	a8800215 	stw	r2,8(r21)
    d0c8:	b5800204 	addi	r22,r22,8
    d0cc:	bdc00204 	addi	r23,r23,8
    d0d0:	103fdb1e 	bne	r2,zero,d040 <__alt_data_end+0xfffdc300>
    d0d4:	0005883a 	mov	r2,zero
    d0d8:	003fe806 	br	d07c <__alt_data_end+0xfffdc33c>
    d0dc:	000ac8c0 	call	ac8c <__sfvwrite_r>
    d0e0:	003fe606 	br	d07c <__alt_data_end+0xfffdc33c>

0000d0e4 <__sprint_r>:
    d0e4:	30c00217 	ldw	r3,8(r6)
    d0e8:	18000126 	beq	r3,zero,d0f0 <__sprint_r+0xc>
    d0ec:	000cfe81 	jmpi	cfe8 <__sprint_r.part.0>
    d0f0:	30000115 	stw	zero,4(r6)
    d0f4:	0005883a 	mov	r2,zero
    d0f8:	f800283a 	ret

0000d0fc <___vfiprintf_internal_r>:
    d0fc:	deffca04 	addi	sp,sp,-216
    d100:	dd403115 	stw	r21,196(sp)
    d104:	dfc03515 	stw	ra,212(sp)
    d108:	df003415 	stw	fp,208(sp)
    d10c:	ddc03315 	stw	r23,204(sp)
    d110:	dd803215 	stw	r22,200(sp)
    d114:	dd003015 	stw	r20,192(sp)
    d118:	dcc02f15 	stw	r19,188(sp)
    d11c:	dc802e15 	stw	r18,184(sp)
    d120:	dc402d15 	stw	r17,180(sp)
    d124:	dc002c15 	stw	r16,176(sp)
    d128:	d9002115 	stw	r4,132(sp)
    d12c:	d9402015 	stw	r5,128(sp)
    d130:	d9c02215 	stw	r7,136(sp)
    d134:	302b883a 	mov	r21,r6
    d138:	20000226 	beq	r4,zero,d144 <___vfiprintf_internal_r+0x48>
    d13c:	20800e17 	ldw	r2,56(r4)
    d140:	1000cf26 	beq	r2,zero,d480 <___vfiprintf_internal_r+0x384>
    d144:	d8c02017 	ldw	r3,128(sp)
    d148:	1880030b 	ldhu	r2,12(r3)
    d14c:	10c8000c 	andi	r3,r2,8192
    d150:	1800071e 	bne	r3,zero,d170 <___vfiprintf_internal_r+0x74>
    d154:	d9402017 	ldw	r5,128(sp)
    d158:	00f7ffc4 	movi	r3,-8193
    d15c:	10880014 	ori	r2,r2,8192
    d160:	29001917 	ldw	r4,100(r5)
    d164:	2880030d 	sth	r2,12(r5)
    d168:	20c6703a 	and	r3,r4,r3
    d16c:	28c01915 	stw	r3,100(r5)
    d170:	10c0020c 	andi	r3,r2,8
    d174:	1800a526 	beq	r3,zero,d40c <___vfiprintf_internal_r+0x310>
    d178:	d9002017 	ldw	r4,128(sp)
    d17c:	20c00417 	ldw	r3,16(r4)
    d180:	1800a226 	beq	r3,zero,d40c <___vfiprintf_internal_r+0x310>
    d184:	1080068c 	andi	r2,r2,26
    d188:	00c00284 	movi	r3,10
    d18c:	10c0a826 	beq	r2,r3,d430 <___vfiprintf_internal_r+0x334>
    d190:	d9001a04 	addi	r4,sp,104
    d194:	d94019c4 	addi	r5,sp,103
    d198:	048000b4 	movhi	r18,2
    d19c:	2145c83a 	sub	r2,r4,r5
    d1a0:	94b6ef04 	addi	r18,r18,-9284
    d1a4:	d9001e15 	stw	r4,120(sp)
    d1a8:	d9401f15 	stw	r5,124(sp)
    d1ac:	dec01a15 	stw	sp,104(sp)
    d1b0:	d8001c15 	stw	zero,112(sp)
    d1b4:	d8001b15 	stw	zero,108(sp)
    d1b8:	d811883a 	mov	r8,sp
    d1bc:	d8002615 	stw	zero,152(sp)
    d1c0:	d8002415 	stw	zero,144(sp)
    d1c4:	d8802815 	stw	r2,160(sp)
    d1c8:	a82d883a 	mov	r22,r21
    d1cc:	b0800007 	ldb	r2,0(r22)
    d1d0:	10040d26 	beq	r2,zero,e208 <___vfiprintf_internal_r+0x110c>
    d1d4:	00c00944 	movi	r3,37
    d1d8:	b029883a 	mov	r20,r22
    d1dc:	10c0021e 	bne	r2,r3,d1e8 <___vfiprintf_internal_r+0xec>
    d1e0:	00001606 	br	d23c <___vfiprintf_internal_r+0x140>
    d1e4:	10c00326 	beq	r2,r3,d1f4 <___vfiprintf_internal_r+0xf8>
    d1e8:	a5000044 	addi	r20,r20,1
    d1ec:	a0800007 	ldb	r2,0(r20)
    d1f0:	103ffc1e 	bne	r2,zero,d1e4 <__alt_data_end+0xfffdc4a4>
    d1f4:	a5a1c83a 	sub	r16,r20,r22
    d1f8:	80001026 	beq	r16,zero,d23c <___vfiprintf_internal_r+0x140>
    d1fc:	d8c01c17 	ldw	r3,112(sp)
    d200:	d8801b17 	ldw	r2,108(sp)
    d204:	45800015 	stw	r22,0(r8)
    d208:	80c7883a 	add	r3,r16,r3
    d20c:	10800044 	addi	r2,r2,1
    d210:	44000115 	stw	r16,4(r8)
    d214:	d8c01c15 	stw	r3,112(sp)
    d218:	d8801b15 	stw	r2,108(sp)
    d21c:	010001c4 	movi	r4,7
    d220:	2080750e 	bge	r4,r2,d3f8 <___vfiprintf_internal_r+0x2fc>
    d224:	1803951e 	bne	r3,zero,e07c <___vfiprintf_internal_r+0xf80>
    d228:	d8c02417 	ldw	r3,144(sp)
    d22c:	d8001b15 	stw	zero,108(sp)
    d230:	d811883a 	mov	r8,sp
    d234:	1c07883a 	add	r3,r3,r16
    d238:	d8c02415 	stw	r3,144(sp)
    d23c:	a0800007 	ldb	r2,0(r20)
    d240:	1002e026 	beq	r2,zero,ddc4 <___vfiprintf_internal_r+0xcc8>
    d244:	a5800044 	addi	r22,r20,1
    d248:	a0c00047 	ldb	r3,1(r20)
    d24c:	d8001d85 	stb	zero,118(sp)
    d250:	0027883a 	mov	r19,zero
    d254:	d8002305 	stb	zero,140(sp)
    d258:	043fffc4 	movi	r16,-1
    d25c:	d8002515 	stw	zero,148(sp)
    d260:	0023883a 	mov	r17,zero
    d264:	05001604 	movi	r20,88
    d268:	05400244 	movi	r21,9
    d26c:	402f883a 	mov	r23,r8
    d270:	b5800044 	addi	r22,r22,1
    d274:	18bff804 	addi	r2,r3,-32
    d278:	a0827736 	bltu	r20,r2,dc58 <___vfiprintf_internal_r+0xb5c>
    d27c:	100490ba 	slli	r2,r2,2
    d280:	01000074 	movhi	r4,1
    d284:	2134a504 	addi	r4,r4,-11628
    d288:	1105883a 	add	r2,r2,r4
    d28c:	10800017 	ldw	r2,0(r2)
    d290:	1000683a 	jmp	r2
    d294:	0000d958 	cmpnei	zero,zero,869
    d298:	0000dc58 	cmpnei	zero,zero,881
    d29c:	0000dc58 	cmpnei	zero,zero,881
    d2a0:	0000d974 	movhi	zero,869
    d2a4:	0000dc58 	cmpnei	zero,zero,881
    d2a8:	0000dc58 	cmpnei	zero,zero,881
    d2ac:	0000dc58 	cmpnei	zero,zero,881
    d2b0:	0000dc58 	cmpnei	zero,zero,881
    d2b4:	0000dc58 	cmpnei	zero,zero,881
    d2b8:	0000dc58 	cmpnei	zero,zero,881
    d2bc:	0000db7c 	xorhi	zero,zero,877
    d2c0:	0000dba0 	cmpeqi	zero,zero,878
    d2c4:	0000dc58 	cmpnei	zero,zero,881
    d2c8:	0000d498 	cmpnei	zero,zero,850
    d2cc:	0000dbb4 	movhi	zero,878
    d2d0:	0000dc58 	cmpnei	zero,zero,881
    d2d4:	0000d980 	call	d98 <TaskFrequencySeparator+0x2c4>
    d2d8:	0000d98c 	andi	zero,zero,870
    d2dc:	0000d98c 	andi	zero,zero,870
    d2e0:	0000d98c 	andi	zero,zero,870
    d2e4:	0000d98c 	andi	zero,zero,870
    d2e8:	0000d98c 	andi	zero,zero,870
    d2ec:	0000d98c 	andi	zero,zero,870
    d2f0:	0000d98c 	andi	zero,zero,870
    d2f4:	0000d98c 	andi	zero,zero,870
    d2f8:	0000d98c 	andi	zero,zero,870
    d2fc:	0000dc58 	cmpnei	zero,zero,881
    d300:	0000dc58 	cmpnei	zero,zero,881
    d304:	0000dc58 	cmpnei	zero,zero,881
    d308:	0000dc58 	cmpnei	zero,zero,881
    d30c:	0000dc58 	cmpnei	zero,zero,881
    d310:	0000dc58 	cmpnei	zero,zero,881
    d314:	0000dc58 	cmpnei	zero,zero,881
    d318:	0000dc58 	cmpnei	zero,zero,881
    d31c:	0000dc58 	cmpnei	zero,zero,881
    d320:	0000dc58 	cmpnei	zero,zero,881
    d324:	0000d9cc 	andi	zero,zero,871
    d328:	0000dc58 	cmpnei	zero,zero,881
    d32c:	0000dc58 	cmpnei	zero,zero,881
    d330:	0000dc58 	cmpnei	zero,zero,881
    d334:	0000dc58 	cmpnei	zero,zero,881
    d338:	0000dc58 	cmpnei	zero,zero,881
    d33c:	0000dc58 	cmpnei	zero,zero,881
    d340:	0000dc58 	cmpnei	zero,zero,881
    d344:	0000dc58 	cmpnei	zero,zero,881
    d348:	0000dc58 	cmpnei	zero,zero,881
    d34c:	0000dc58 	cmpnei	zero,zero,881
    d350:	0000da08 	cmpgei	zero,zero,872
    d354:	0000dc58 	cmpnei	zero,zero,881
    d358:	0000dc58 	cmpnei	zero,zero,881
    d35c:	0000dc58 	cmpnei	zero,zero,881
    d360:	0000dc58 	cmpnei	zero,zero,881
    d364:	0000dc58 	cmpnei	zero,zero,881
    d368:	0000da64 	muli	zero,zero,873
    d36c:	0000dc58 	cmpnei	zero,zero,881
    d370:	0000dc58 	cmpnei	zero,zero,881
    d374:	0000dad8 	cmpnei	zero,zero,875
    d378:	0000dc58 	cmpnei	zero,zero,881
    d37c:	0000dc58 	cmpnei	zero,zero,881
    d380:	0000dc58 	cmpnei	zero,zero,881
    d384:	0000dc58 	cmpnei	zero,zero,881
    d388:	0000dc58 	cmpnei	zero,zero,881
    d38c:	0000dc58 	cmpnei	zero,zero,881
    d390:	0000dc58 	cmpnei	zero,zero,881
    d394:	0000dc58 	cmpnei	zero,zero,881
    d398:	0000dc58 	cmpnei	zero,zero,881
    d39c:	0000dc58 	cmpnei	zero,zero,881
    d3a0:	0000d880 	call	d88 <TaskFrequencySeparator+0x2b4>
    d3a4:	0000d8b0 	cmpltui	zero,zero,866
    d3a8:	0000dc58 	cmpnei	zero,zero,881
    d3ac:	0000dc58 	cmpnei	zero,zero,881
    d3b0:	0000dc58 	cmpnei	zero,zero,881
    d3b4:	0000dc00 	call	dc0 <TaskFrequencySeparator+0x2ec>
    d3b8:	0000d8b0 	cmpltui	zero,zero,866
    d3bc:	0000dc58 	cmpnei	zero,zero,881
    d3c0:	0000dc58 	cmpnei	zero,zero,881
    d3c4:	0000d758 	cmpnei	zero,zero,861
    d3c8:	0000dc58 	cmpnei	zero,zero,881
    d3cc:	0000d76c 	andhi	zero,zero,861
    d3d0:	0000d7a4 	muli	zero,zero,862
    d3d4:	0000d4a4 	muli	zero,zero,850
    d3d8:	0000d74c 	andi	zero,zero,861
    d3dc:	0000dc58 	cmpnei	zero,zero,881
    d3e0:	0000db18 	cmpnei	zero,zero,876
    d3e4:	0000dc58 	cmpnei	zero,zero,881
    d3e8:	0000db64 	muli	zero,zero,877
    d3ec:	0000dc58 	cmpnei	zero,zero,881
    d3f0:	0000dc58 	cmpnei	zero,zero,881
    d3f4:	0000d828 	cmpgeui	zero,zero,864
    d3f8:	42000204 	addi	r8,r8,8
    d3fc:	d8c02417 	ldw	r3,144(sp)
    d400:	1c07883a 	add	r3,r3,r16
    d404:	d8c02415 	stw	r3,144(sp)
    d408:	003f8c06 	br	d23c <__alt_data_end+0xfffdc4fc>
    d40c:	d9402017 	ldw	r5,128(sp)
    d410:	d9002117 	ldw	r4,132(sp)
    d414:	00087fc0 	call	87fc <__swsetup_r>
    d418:	1003c11e 	bne	r2,zero,e320 <___vfiprintf_internal_r+0x1224>
    d41c:	d9402017 	ldw	r5,128(sp)
    d420:	00c00284 	movi	r3,10
    d424:	2880030b 	ldhu	r2,12(r5)
    d428:	1080068c 	andi	r2,r2,26
    d42c:	10ff581e 	bne	r2,r3,d190 <__alt_data_end+0xfffdc450>
    d430:	d8c02017 	ldw	r3,128(sp)
    d434:	1880038f 	ldh	r2,14(r3)
    d438:	103f5516 	blt	r2,zero,d190 <__alt_data_end+0xfffdc450>
    d43c:	d9c02217 	ldw	r7,136(sp)
    d440:	d9002117 	ldw	r4,132(sp)
    d444:	a80d883a 	mov	r6,r21
    d448:	180b883a 	mov	r5,r3
    d44c:	000e6240 	call	e624 <__sbprintf>
    d450:	dfc03517 	ldw	ra,212(sp)
    d454:	df003417 	ldw	fp,208(sp)
    d458:	ddc03317 	ldw	r23,204(sp)
    d45c:	dd803217 	ldw	r22,200(sp)
    d460:	dd403117 	ldw	r21,196(sp)
    d464:	dd003017 	ldw	r20,192(sp)
    d468:	dcc02f17 	ldw	r19,188(sp)
    d46c:	dc802e17 	ldw	r18,184(sp)
    d470:	dc402d17 	ldw	r17,180(sp)
    d474:	dc002c17 	ldw	r16,176(sp)
    d478:	dec03604 	addi	sp,sp,216
    d47c:	f800283a 	ret
    d480:	000a8080 	call	a808 <__sinit>
    d484:	003f2f06 	br	d144 <__alt_data_end+0xfffdc404>
    d488:	d8c02517 	ldw	r3,148(sp)
    d48c:	d8802215 	stw	r2,136(sp)
    d490:	00c7c83a 	sub	r3,zero,r3
    d494:	d8c02515 	stw	r3,148(sp)
    d498:	8c400114 	ori	r17,r17,4
    d49c:	b0c00007 	ldb	r3,0(r22)
    d4a0:	003f7306 	br	d270 <__alt_data_end+0xfffdc530>
    d4a4:	00800c04 	movi	r2,48
    d4a8:	d9402217 	ldw	r5,136(sp)
    d4ac:	d8801d05 	stb	r2,116(sp)
    d4b0:	00801e04 	movi	r2,120
    d4b4:	d8801d45 	stb	r2,117(sp)
    d4b8:	d8001d85 	stb	zero,118(sp)
    d4bc:	b811883a 	mov	r8,r23
    d4c0:	28c00104 	addi	r3,r5,4
    d4c4:	2cc00017 	ldw	r19,0(r5)
    d4c8:	0029883a 	mov	r20,zero
    d4cc:	88800094 	ori	r2,r17,2
    d4d0:	80032516 	blt	r16,zero,e168 <___vfiprintf_internal_r+0x106c>
    d4d4:	00bfdfc4 	movi	r2,-129
    d4d8:	88a2703a 	and	r17,r17,r2
    d4dc:	d8c02215 	stw	r3,136(sp)
    d4e0:	8c400094 	ori	r17,r17,2
    d4e4:	98032a1e 	bne	r19,zero,e190 <___vfiprintf_internal_r+0x1094>
    d4e8:	008000b4 	movhi	r2,2
    d4ec:	10b68f04 	addi	r2,r2,-9668
    d4f0:	d8802615 	stw	r2,152(sp)
    d4f4:	002b883a 	mov	r21,zero
    d4f8:	8001741e 	bne	r16,zero,dacc <___vfiprintf_internal_r+0x9d0>
    d4fc:	0021883a 	mov	r16,zero
    d500:	0029883a 	mov	r20,zero
    d504:	ddc01a04 	addi	r23,sp,104
    d508:	8027883a 	mov	r19,r16
    d50c:	8500010e 	bge	r16,r20,d514 <___vfiprintf_internal_r+0x418>
    d510:	a027883a 	mov	r19,r20
    d514:	ad403fcc 	andi	r21,r21,255
    d518:	ad40201c 	xori	r21,r21,128
    d51c:	ad7fe004 	addi	r21,r21,-128
    d520:	a8000126 	beq	r21,zero,d528 <___vfiprintf_internal_r+0x42c>
    d524:	9cc00044 	addi	r19,r19,1
    d528:	89c0008c 	andi	r7,r17,2
    d52c:	38000126 	beq	r7,zero,d534 <___vfiprintf_internal_r+0x438>
    d530:	9cc00084 	addi	r19,r19,2
    d534:	88c0210c 	andi	r3,r17,132
    d538:	1801dd1e 	bne	r3,zero,dcb0 <___vfiprintf_internal_r+0xbb4>
    d53c:	d9402517 	ldw	r5,148(sp)
    d540:	2cebc83a 	sub	r21,r5,r19
    d544:	0541da0e 	bge	zero,r21,dcb0 <___vfiprintf_internal_r+0xbb4>
    d548:	07000404 	movi	fp,16
    d54c:	d8801c17 	ldw	r2,112(sp)
    d550:	e543be0e 	bge	fp,r21,e44c <___vfiprintf_internal_r+0x1350>
    d554:	014000b4 	movhi	r5,2
    d558:	2976f304 	addi	r5,r5,-9268
    d55c:	dc002715 	stw	r16,156(sp)
    d560:	d9801b17 	ldw	r6,108(sp)
    d564:	a821883a 	mov	r16,r21
    d568:	d9402315 	stw	r5,140(sp)
    d56c:	028001c4 	movi	r10,7
    d570:	d9c02915 	stw	r7,164(sp)
    d574:	182b883a 	mov	r21,r3
    d578:	00000506 	br	d590 <___vfiprintf_internal_r+0x494>
    d57c:	31000084 	addi	r4,r6,2
    d580:	42000204 	addi	r8,r8,8
    d584:	180d883a 	mov	r6,r3
    d588:	843ffc04 	addi	r16,r16,-16
    d58c:	e4000f0e 	bge	fp,r16,d5cc <___vfiprintf_internal_r+0x4d0>
    d590:	010000b4 	movhi	r4,2
    d594:	10800404 	addi	r2,r2,16
    d598:	30c00044 	addi	r3,r6,1
    d59c:	2136f304 	addi	r4,r4,-9268
    d5a0:	41000015 	stw	r4,0(r8)
    d5a4:	47000115 	stw	fp,4(r8)
    d5a8:	d8801c15 	stw	r2,112(sp)
    d5ac:	d8c01b15 	stw	r3,108(sp)
    d5b0:	50fff20e 	bge	r10,r3,d57c <__alt_data_end+0xfffdc83c>
    d5b4:	1001b21e 	bne	r2,zero,dc80 <___vfiprintf_internal_r+0xb84>
    d5b8:	843ffc04 	addi	r16,r16,-16
    d5bc:	000d883a 	mov	r6,zero
    d5c0:	01000044 	movi	r4,1
    d5c4:	d811883a 	mov	r8,sp
    d5c8:	e43ff116 	blt	fp,r16,d590 <__alt_data_end+0xfffdc850>
    d5cc:	a807883a 	mov	r3,r21
    d5d0:	d9c02917 	ldw	r7,164(sp)
    d5d4:	802b883a 	mov	r21,r16
    d5d8:	dc002717 	ldw	r16,156(sp)
    d5dc:	d9402317 	ldw	r5,140(sp)
    d5e0:	a885883a 	add	r2,r21,r2
    d5e4:	45400115 	stw	r21,4(r8)
    d5e8:	41400015 	stw	r5,0(r8)
    d5ec:	d8801c15 	stw	r2,112(sp)
    d5f0:	d9001b15 	stw	r4,108(sp)
    d5f4:	014001c4 	movi	r5,7
    d5f8:	29026216 	blt	r5,r4,df84 <___vfiprintf_internal_r+0xe88>
    d5fc:	d9801d87 	ldb	r6,118(sp)
    d600:	42000204 	addi	r8,r8,8
    d604:	21400044 	addi	r5,r4,1
    d608:	3001ae1e 	bne	r6,zero,dcc4 <___vfiprintf_internal_r+0xbc8>
    d60c:	3801bb26 	beq	r7,zero,dcfc <___vfiprintf_internal_r+0xc00>
    d610:	d9001d04 	addi	r4,sp,116
    d614:	10800084 	addi	r2,r2,2
    d618:	41000015 	stw	r4,0(r8)
    d61c:	01000084 	movi	r4,2
    d620:	41000115 	stw	r4,4(r8)
    d624:	d8801c15 	stw	r2,112(sp)
    d628:	d9401b15 	stw	r5,108(sp)
    d62c:	010001c4 	movi	r4,7
    d630:	2142680e 	bge	r4,r5,dfd4 <___vfiprintf_internal_r+0xed8>
    d634:	1002b11e 	bne	r2,zero,e0fc <___vfiprintf_internal_r+0x1000>
    d638:	01802004 	movi	r6,128
    d63c:	01400044 	movi	r5,1
    d640:	0009883a 	mov	r4,zero
    d644:	d811883a 	mov	r8,sp
    d648:	1981ae1e 	bne	r3,r6,dd04 <___vfiprintf_internal_r+0xc08>
    d64c:	d8c02517 	ldw	r3,148(sp)
    d650:	1cf9c83a 	sub	fp,r3,r19
    d654:	0701ab0e 	bge	zero,fp,dd04 <___vfiprintf_internal_r+0xc08>
    d658:	05400404 	movi	r21,16
    d65c:	af03a90e 	bge	r21,fp,e504 <___vfiprintf_internal_r+0x1408>
    d660:	014000b4 	movhi	r5,2
    d664:	2976ef04 	addi	r5,r5,-9284
    d668:	d9402315 	stw	r5,140(sp)
    d66c:	01c001c4 	movi	r7,7
    d670:	00000506 	br	d688 <___vfiprintf_internal_r+0x58c>
    d674:	21800084 	addi	r6,r4,2
    d678:	42000204 	addi	r8,r8,8
    d67c:	1809883a 	mov	r4,r3
    d680:	e73ffc04 	addi	fp,fp,-16
    d684:	af000d0e 	bge	r21,fp,d6bc <___vfiprintf_internal_r+0x5c0>
    d688:	10800404 	addi	r2,r2,16
    d68c:	20c00044 	addi	r3,r4,1
    d690:	44800015 	stw	r18,0(r8)
    d694:	45400115 	stw	r21,4(r8)
    d698:	d8801c15 	stw	r2,112(sp)
    d69c:	d8c01b15 	stw	r3,108(sp)
    d6a0:	38fff40e 	bge	r7,r3,d674 <__alt_data_end+0xfffdc934>
    d6a4:	10022b1e 	bne	r2,zero,df54 <___vfiprintf_internal_r+0xe58>
    d6a8:	e73ffc04 	addi	fp,fp,-16
    d6ac:	01800044 	movi	r6,1
    d6b0:	0009883a 	mov	r4,zero
    d6b4:	d811883a 	mov	r8,sp
    d6b8:	af3ff316 	blt	r21,fp,d688 <__alt_data_end+0xfffdc948>
    d6bc:	d8c02317 	ldw	r3,140(sp)
    d6c0:	1705883a 	add	r2,r2,fp
    d6c4:	47000115 	stw	fp,4(r8)
    d6c8:	40c00015 	stw	r3,0(r8)
    d6cc:	d8801c15 	stw	r2,112(sp)
    d6d0:	d9801b15 	stw	r6,108(sp)
    d6d4:	00c001c4 	movi	r3,7
    d6d8:	19829416 	blt	r3,r6,e12c <___vfiprintf_internal_r+0x1030>
    d6dc:	8521c83a 	sub	r16,r16,r20
    d6e0:	42000204 	addi	r8,r8,8
    d6e4:	31400044 	addi	r5,r6,1
    d6e8:	3009883a 	mov	r4,r6
    d6ec:	04018716 	blt	zero,r16,dd0c <___vfiprintf_internal_r+0xc10>
    d6f0:	a085883a 	add	r2,r20,r2
    d6f4:	45c00015 	stw	r23,0(r8)
    d6f8:	45000115 	stw	r20,4(r8)
    d6fc:	d8801c15 	stw	r2,112(sp)
    d700:	d9401b15 	stw	r5,108(sp)
    d704:	00c001c4 	movi	r3,7
    d708:	1941c20e 	bge	r3,r5,de14 <___vfiprintf_internal_r+0xd18>
    d70c:	1002531e 	bne	r2,zero,e05c <___vfiprintf_internal_r+0xf60>
    d710:	d8001b15 	stw	zero,108(sp)
    d714:	8c40010c 	andi	r17,r17,4
    d718:	88023226 	beq	r17,zero,dfe4 <___vfiprintf_internal_r+0xee8>
    d71c:	d9002517 	ldw	r4,148(sp)
    d720:	24e3c83a 	sub	r17,r4,r19
    d724:	04432916 	blt	zero,r17,e3cc <___vfiprintf_internal_r+0x12d0>
    d728:	d8802517 	ldw	r2,148(sp)
    d72c:	14c0010e 	bge	r2,r19,d734 <___vfiprintf_internal_r+0x638>
    d730:	9805883a 	mov	r2,r19
    d734:	d8c02417 	ldw	r3,144(sp)
    d738:	1887883a 	add	r3,r3,r2
    d73c:	d8c02415 	stw	r3,144(sp)
    d740:	d8001b15 	stw	zero,108(sp)
    d744:	d811883a 	mov	r8,sp
    d748:	003ea006 	br	d1cc <__alt_data_end+0xfffdc48c>
    d74c:	8c400814 	ori	r17,r17,32
    d750:	b0c00007 	ldb	r3,0(r22)
    d754:	003ec606 	br	d270 <__alt_data_end+0xfffdc530>
    d758:	b0c00007 	ldb	r3,0(r22)
    d75c:	00801b04 	movi	r2,108
    d760:	18832026 	beq	r3,r2,e3e4 <___vfiprintf_internal_r+0x12e8>
    d764:	8c400414 	ori	r17,r17,16
    d768:	003ec106 	br	d270 <__alt_data_end+0xfffdc530>
    d76c:	9cc03fcc 	andi	r19,r19,255
    d770:	b811883a 	mov	r8,r23
    d774:	9803981e 	bne	r19,zero,e5d8 <___vfiprintf_internal_r+0x14dc>
    d778:	8880080c 	andi	r2,r17,32
    d77c:	1002be26 	beq	r2,zero,e278 <___vfiprintf_internal_r+0x117c>
    d780:	d9002217 	ldw	r4,136(sp)
    d784:	d9402417 	ldw	r5,144(sp)
    d788:	20800017 	ldw	r2,0(r4)
    d78c:	2807d7fa 	srai	r3,r5,31
    d790:	21000104 	addi	r4,r4,4
    d794:	d9002215 	stw	r4,136(sp)
    d798:	11400015 	stw	r5,0(r2)
    d79c:	10c00115 	stw	r3,4(r2)
    d7a0:	003e8a06 	br	d1cc <__alt_data_end+0xfffdc48c>
    d7a4:	9cc03fcc 	andi	r19,r19,255
    d7a8:	b811883a 	mov	r8,r23
    d7ac:	9803871e 	bne	r19,zero,e5cc <___vfiprintf_internal_r+0x14d0>
    d7b0:	8880080c 	andi	r2,r17,32
    d7b4:	10009a26 	beq	r2,zero,da20 <___vfiprintf_internal_r+0x924>
    d7b8:	d9002217 	ldw	r4,136(sp)
    d7bc:	d8001d85 	stb	zero,118(sp)
    d7c0:	20800204 	addi	r2,r4,8
    d7c4:	24c00017 	ldw	r19,0(r4)
    d7c8:	25000117 	ldw	r20,4(r4)
    d7cc:	8002a416 	blt	r16,zero,e260 <___vfiprintf_internal_r+0x1164>
    d7d0:	013fdfc4 	movi	r4,-129
    d7d4:	9d06b03a 	or	r3,r19,r20
    d7d8:	d8802215 	stw	r2,136(sp)
    d7dc:	8922703a 	and	r17,r17,r4
    d7e0:	18009b26 	beq	r3,zero,da50 <___vfiprintf_internal_r+0x954>
    d7e4:	002b883a 	mov	r21,zero
    d7e8:	ddc01a04 	addi	r23,sp,104
    d7ec:	9806d0fa 	srli	r3,r19,3
    d7f0:	a008977a 	slli	r4,r20,29
    d7f4:	a028d0fa 	srli	r20,r20,3
    d7f8:	9cc001cc 	andi	r19,r19,7
    d7fc:	98800c04 	addi	r2,r19,48
    d800:	bdffffc4 	addi	r23,r23,-1
    d804:	20e6b03a 	or	r19,r4,r3
    d808:	b8800005 	stb	r2,0(r23)
    d80c:	9d06b03a 	or	r3,r19,r20
    d810:	183ff61e 	bne	r3,zero,d7ec <__alt_data_end+0xfffdcaac>
    d814:	88c0004c 	andi	r3,r17,1
    d818:	18021f1e 	bne	r3,zero,e098 <___vfiprintf_internal_r+0xf9c>
    d81c:	d9401e17 	ldw	r5,120(sp)
    d820:	2de9c83a 	sub	r20,r5,r23
    d824:	003f3806 	br	d508 <__alt_data_end+0xfffdc7c8>
    d828:	9cc03fcc 	andi	r19,r19,255
    d82c:	b811883a 	mov	r8,r23
    d830:	98034f1e 	bne	r19,zero,e570 <___vfiprintf_internal_r+0x1474>
    d834:	008000b4 	movhi	r2,2
    d838:	10b68f04 	addi	r2,r2,-9668
    d83c:	d8802615 	stw	r2,152(sp)
    d840:	8880080c 	andi	r2,r17,32
    d844:	1000ac26 	beq	r2,zero,daf8 <___vfiprintf_internal_r+0x9fc>
    d848:	d9002217 	ldw	r4,136(sp)
    d84c:	24c00017 	ldw	r19,0(r4)
    d850:	25000117 	ldw	r20,4(r4)
    d854:	21000204 	addi	r4,r4,8
    d858:	d9002215 	stw	r4,136(sp)
    d85c:	8880004c 	andi	r2,r17,1
    d860:	1001e726 	beq	r2,zero,e000 <___vfiprintf_internal_r+0xf04>
    d864:	9d04b03a 	or	r2,r19,r20
    d868:	10025c1e 	bne	r2,zero,e1dc <___vfiprintf_internal_r+0x10e0>
    d86c:	d8001d85 	stb	zero,118(sp)
    d870:	80024416 	blt	r16,zero,e184 <___vfiprintf_internal_r+0x1088>
    d874:	00bfdfc4 	movi	r2,-129
    d878:	88a2703a 	and	r17,r17,r2
    d87c:	003f1d06 	br	d4f4 <__alt_data_end+0xfffdc7b4>
    d880:	d8c02217 	ldw	r3,136(sp)
    d884:	04c00044 	movi	r19,1
    d888:	b811883a 	mov	r8,r23
    d88c:	18800017 	ldw	r2,0(r3)
    d890:	18c00104 	addi	r3,r3,4
    d894:	d8001d85 	stb	zero,118(sp)
    d898:	d8801005 	stb	r2,64(sp)
    d89c:	d8c02215 	stw	r3,136(sp)
    d8a0:	9829883a 	mov	r20,r19
    d8a4:	ddc01004 	addi	r23,sp,64
    d8a8:	0021883a 	mov	r16,zero
    d8ac:	003f1e06 	br	d528 <__alt_data_end+0xfffdc7e8>
    d8b0:	9cc03fcc 	andi	r19,r19,255
    d8b4:	b811883a 	mov	r8,r23
    d8b8:	9803331e 	bne	r19,zero,e588 <___vfiprintf_internal_r+0x148c>
    d8bc:	8880080c 	andi	r2,r17,32
    d8c0:	10004826 	beq	r2,zero,d9e4 <___vfiprintf_internal_r+0x8e8>
    d8c4:	d9002217 	ldw	r4,136(sp)
    d8c8:	20800117 	ldw	r2,4(r4)
    d8cc:	24c00017 	ldw	r19,0(r4)
    d8d0:	21000204 	addi	r4,r4,8
    d8d4:	d9002215 	stw	r4,136(sp)
    d8d8:	1029883a 	mov	r20,r2
    d8dc:	10024c16 	blt	r2,zero,e210 <___vfiprintf_internal_r+0x1114>
    d8e0:	dd401d83 	ldbu	r21,118(sp)
    d8e4:	80007116 	blt	r16,zero,daac <___vfiprintf_internal_r+0x9b0>
    d8e8:	00ffdfc4 	movi	r3,-129
    d8ec:	9d04b03a 	or	r2,r19,r20
    d8f0:	88e2703a 	and	r17,r17,r3
    d8f4:	1000d126 	beq	r2,zero,dc3c <___vfiprintf_internal_r+0xb40>
    d8f8:	a0023526 	beq	r20,zero,e1d0 <___vfiprintf_internal_r+0x10d4>
    d8fc:	ddc01a04 	addi	r23,sp,104
    d900:	4039883a 	mov	fp,r8
    d904:	9809883a 	mov	r4,r19
    d908:	a00b883a 	mov	r5,r20
    d90c:	01800284 	movi	r6,10
    d910:	000f883a 	mov	r7,zero
    d914:	000f6280 	call	f628 <__umoddi3>
    d918:	10800c04 	addi	r2,r2,48
    d91c:	bdffffc4 	addi	r23,r23,-1
    d920:	9809883a 	mov	r4,r19
    d924:	a00b883a 	mov	r5,r20
    d928:	b8800005 	stb	r2,0(r23)
    d92c:	01800284 	movi	r6,10
    d930:	000f883a 	mov	r7,zero
    d934:	000f02c0 	call	f02c <__udivdi3>
    d938:	1027883a 	mov	r19,r2
    d93c:	10c4b03a 	or	r2,r2,r3
    d940:	1829883a 	mov	r20,r3
    d944:	103fef1e 	bne	r2,zero,d904 <__alt_data_end+0xfffdcbc4>
    d948:	d9001e17 	ldw	r4,120(sp)
    d94c:	e011883a 	mov	r8,fp
    d950:	25e9c83a 	sub	r20,r4,r23
    d954:	003eec06 	br	d508 <__alt_data_end+0xfffdc7c8>
    d958:	d8802307 	ldb	r2,140(sp)
    d95c:	1002361e 	bne	r2,zero,e238 <___vfiprintf_internal_r+0x113c>
    d960:	00c00804 	movi	r3,32
    d964:	d8c02305 	stb	r3,140(sp)
    d968:	04c00044 	movi	r19,1
    d96c:	b0c00007 	ldb	r3,0(r22)
    d970:	003e3f06 	br	d270 <__alt_data_end+0xfffdc530>
    d974:	8c400054 	ori	r17,r17,1
    d978:	b0c00007 	ldb	r3,0(r22)
    d97c:	003e3c06 	br	d270 <__alt_data_end+0xfffdc530>
    d980:	8c402014 	ori	r17,r17,128
    d984:	b0c00007 	ldb	r3,0(r22)
    d988:	003e3906 	br	d270 <__alt_data_end+0xfffdc530>
    d98c:	dc002715 	stw	r16,156(sp)
    d990:	d8002515 	stw	zero,148(sp)
    d994:	1f3ff404 	addi	fp,r3,-48
    d998:	0009883a 	mov	r4,zero
    d99c:	b021883a 	mov	r16,r22
    d9a0:	01400284 	movi	r5,10
    d9a4:	0002f440 	call	2f44 <__mulsi3>
    d9a8:	80c00007 	ldb	r3,0(r16)
    d9ac:	e089883a 	add	r4,fp,r2
    d9b0:	b5800044 	addi	r22,r22,1
    d9b4:	1f3ff404 	addi	fp,r3,-48
    d9b8:	b021883a 	mov	r16,r22
    d9bc:	af3ff82e 	bgeu	r21,fp,d9a0 <__alt_data_end+0xfffdcc60>
    d9c0:	d9002515 	stw	r4,148(sp)
    d9c4:	dc002717 	ldw	r16,156(sp)
    d9c8:	003e2a06 	br	d274 <__alt_data_end+0xfffdc534>
    d9cc:	9cc03fcc 	andi	r19,r19,255
    d9d0:	b811883a 	mov	r8,r23
    d9d4:	9802e91e 	bne	r19,zero,e57c <___vfiprintf_internal_r+0x1480>
    d9d8:	8c400414 	ori	r17,r17,16
    d9dc:	8880080c 	andi	r2,r17,32
    d9e0:	103fb81e 	bne	r2,zero,d8c4 <__alt_data_end+0xfffdcb84>
    d9e4:	8880040c 	andi	r2,r17,16
    d9e8:	10022e26 	beq	r2,zero,e2a4 <___vfiprintf_internal_r+0x11a8>
    d9ec:	d9402217 	ldw	r5,136(sp)
    d9f0:	2cc00017 	ldw	r19,0(r5)
    d9f4:	29400104 	addi	r5,r5,4
    d9f8:	d9402215 	stw	r5,136(sp)
    d9fc:	9829d7fa 	srai	r20,r19,31
    da00:	a005883a 	mov	r2,r20
    da04:	003fb506 	br	d8dc <__alt_data_end+0xfffdcb9c>
    da08:	9cc03fcc 	andi	r19,r19,255
    da0c:	b811883a 	mov	r8,r23
    da10:	9802fa1e 	bne	r19,zero,e5fc <___vfiprintf_internal_r+0x1500>
    da14:	8c400414 	ori	r17,r17,16
    da18:	8880080c 	andi	r2,r17,32
    da1c:	103f661e 	bne	r2,zero,d7b8 <__alt_data_end+0xfffdca78>
    da20:	8880040c 	andi	r2,r17,16
    da24:	10020626 	beq	r2,zero,e240 <___vfiprintf_internal_r+0x1144>
    da28:	d9402217 	ldw	r5,136(sp)
    da2c:	d8001d85 	stb	zero,118(sp)
    da30:	0029883a 	mov	r20,zero
    da34:	28800104 	addi	r2,r5,4
    da38:	2cc00017 	ldw	r19,0(r5)
    da3c:	80020816 	blt	r16,zero,e260 <___vfiprintf_internal_r+0x1164>
    da40:	00ffdfc4 	movi	r3,-129
    da44:	d8802215 	stw	r2,136(sp)
    da48:	88e2703a 	and	r17,r17,r3
    da4c:	983f651e 	bne	r19,zero,d7e4 <__alt_data_end+0xfffdcaa4>
    da50:	002b883a 	mov	r21,zero
    da54:	8002cf26 	beq	r16,zero,e594 <___vfiprintf_internal_r+0x1498>
    da58:	0027883a 	mov	r19,zero
    da5c:	0029883a 	mov	r20,zero
    da60:	003f6106 	br	d7e8 <__alt_data_end+0xfffdcaa8>
    da64:	9cc03fcc 	andi	r19,r19,255
    da68:	b811883a 	mov	r8,r23
    da6c:	9802e01e 	bne	r19,zero,e5f0 <___vfiprintf_internal_r+0x14f4>
    da70:	8c400414 	ori	r17,r17,16
    da74:	8880080c 	andi	r2,r17,32
    da78:	1000641e 	bne	r2,zero,dc0c <___vfiprintf_internal_r+0xb10>
    da7c:	8880040c 	andi	r2,r17,16
    da80:	1001c81e 	bne	r2,zero,e1a4 <___vfiprintf_internal_r+0x10a8>
    da84:	8880100c 	andi	r2,r17,64
    da88:	d8001d85 	stb	zero,118(sp)
    da8c:	1002281e 	bne	r2,zero,e330 <___vfiprintf_internal_r+0x1234>
    da90:	d9002217 	ldw	r4,136(sp)
    da94:	0029883a 	mov	r20,zero
    da98:	20800104 	addi	r2,r4,4
    da9c:	24c00017 	ldw	r19,0(r4)
    daa0:	8001c60e 	bge	r16,zero,e1bc <___vfiprintf_internal_r+0x10c0>
    daa4:	d8802215 	stw	r2,136(sp)
    daa8:	002b883a 	mov	r21,zero
    daac:	9d04b03a 	or	r2,r19,r20
    dab0:	103f911e 	bne	r2,zero,d8f8 <__alt_data_end+0xfffdcbb8>
    dab4:	00800044 	movi	r2,1
    dab8:	10803fcc 	andi	r2,r2,255
    dabc:	00c00044 	movi	r3,1
    dac0:	10c05f26 	beq	r2,r3,dc40 <___vfiprintf_internal_r+0xb44>
    dac4:	00c00084 	movi	r3,2
    dac8:	10ffe31e 	bne	r2,r3,da58 <__alt_data_end+0xfffdcd18>
    dacc:	0027883a 	mov	r19,zero
    dad0:	0029883a 	mov	r20,zero
    dad4:	00015106 	br	e01c <___vfiprintf_internal_r+0xf20>
    dad8:	9cc03fcc 	andi	r19,r19,255
    dadc:	b811883a 	mov	r8,r23
    dae0:	9802c01e 	bne	r19,zero,e5e4 <___vfiprintf_internal_r+0x14e8>
    dae4:	014000b4 	movhi	r5,2
    dae8:	29768a04 	addi	r5,r5,-9688
    daec:	d9402615 	stw	r5,152(sp)
    daf0:	8880080c 	andi	r2,r17,32
    daf4:	103f541e 	bne	r2,zero,d848 <__alt_data_end+0xfffdcb08>
    daf8:	8880040c 	andi	r2,r17,16
    dafc:	1001f226 	beq	r2,zero,e2c8 <___vfiprintf_internal_r+0x11cc>
    db00:	d9402217 	ldw	r5,136(sp)
    db04:	0029883a 	mov	r20,zero
    db08:	2cc00017 	ldw	r19,0(r5)
    db0c:	29400104 	addi	r5,r5,4
    db10:	d9402215 	stw	r5,136(sp)
    db14:	003f5106 	br	d85c <__alt_data_end+0xfffdcb1c>
    db18:	d8c02217 	ldw	r3,136(sp)
    db1c:	b811883a 	mov	r8,r23
    db20:	d8001d85 	stb	zero,118(sp)
    db24:	1dc00017 	ldw	r23,0(r3)
    db28:	1f000104 	addi	fp,r3,4
    db2c:	b8025926 	beq	r23,zero,e494 <___vfiprintf_internal_r+0x1398>
    db30:	80023316 	blt	r16,zero,e400 <___vfiprintf_internal_r+0x1304>
    db34:	800d883a 	mov	r6,r16
    db38:	000b883a 	mov	r5,zero
    db3c:	b809883a 	mov	r4,r23
    db40:	da002a15 	stw	r8,168(sp)
    db44:	000b5740 	call	b574 <memchr>
    db48:	da002a17 	ldw	r8,168(sp)
    db4c:	10026826 	beq	r2,zero,e4f0 <___vfiprintf_internal_r+0x13f4>
    db50:	15e9c83a 	sub	r20,r2,r23
    db54:	dd401d83 	ldbu	r21,118(sp)
    db58:	df002215 	stw	fp,136(sp)
    db5c:	0021883a 	mov	r16,zero
    db60:	003e6906 	br	d508 <__alt_data_end+0xfffdc7c8>
    db64:	9cc03fcc 	andi	r19,r19,255
    db68:	b811883a 	mov	r8,r23
    db6c:	983fc126 	beq	r19,zero,da74 <__alt_data_end+0xfffdcd34>
    db70:	d8c02303 	ldbu	r3,140(sp)
    db74:	d8c01d85 	stb	r3,118(sp)
    db78:	003fbe06 	br	da74 <__alt_data_end+0xfffdcd34>
    db7c:	d9002217 	ldw	r4,136(sp)
    db80:	d9402217 	ldw	r5,136(sp)
    db84:	21000017 	ldw	r4,0(r4)
    db88:	28800104 	addi	r2,r5,4
    db8c:	d9002515 	stw	r4,148(sp)
    db90:	203e3d16 	blt	r4,zero,d488 <__alt_data_end+0xfffdc748>
    db94:	d8802215 	stw	r2,136(sp)
    db98:	b0c00007 	ldb	r3,0(r22)
    db9c:	003db406 	br	d270 <__alt_data_end+0xfffdc530>
    dba0:	00c00ac4 	movi	r3,43
    dba4:	d8c02305 	stb	r3,140(sp)
    dba8:	04c00044 	movi	r19,1
    dbac:	b0c00007 	ldb	r3,0(r22)
    dbb0:	003daf06 	br	d270 <__alt_data_end+0xfffdc530>
    dbb4:	b0c00007 	ldb	r3,0(r22)
    dbb8:	01000a84 	movi	r4,42
    dbbc:	b4000044 	addi	r16,r22,1
    dbc0:	19025e26 	beq	r3,r4,e53c <___vfiprintf_internal_r+0x1440>
    dbc4:	1f3ff404 	addi	fp,r3,-48
    dbc8:	0009883a 	mov	r4,zero
    dbcc:	af025236 	bltu	r21,fp,e518 <___vfiprintf_internal_r+0x141c>
    dbd0:	01400284 	movi	r5,10
    dbd4:	0002f440 	call	2f44 <__mulsi3>
    dbd8:	80c00007 	ldb	r3,0(r16)
    dbdc:	1709883a 	add	r4,r2,fp
    dbe0:	85800044 	addi	r22,r16,1
    dbe4:	1f3ff404 	addi	fp,r3,-48
    dbe8:	b021883a 	mov	r16,r22
    dbec:	af3ff82e 	bgeu	r21,fp,dbd0 <__alt_data_end+0xfffdce90>
    dbf0:	2021883a 	mov	r16,r4
    dbf4:	203d9f0e 	bge	r4,zero,d274 <__alt_data_end+0xfffdc534>
    dbf8:	043fffc4 	movi	r16,-1
    dbfc:	003d9d06 	br	d274 <__alt_data_end+0xfffdc534>
    dc00:	8c401014 	ori	r17,r17,64
    dc04:	b0c00007 	ldb	r3,0(r22)
    dc08:	003d9906 	br	d270 <__alt_data_end+0xfffdc530>
    dc0c:	d9002217 	ldw	r4,136(sp)
    dc10:	d8001d85 	stb	zero,118(sp)
    dc14:	20c00204 	addi	r3,r4,8
    dc18:	24c00017 	ldw	r19,0(r4)
    dc1c:	25000117 	ldw	r20,4(r4)
    dc20:	8001e716 	blt	r16,zero,e3c0 <___vfiprintf_internal_r+0x12c4>
    dc24:	013fdfc4 	movi	r4,-129
    dc28:	9d04b03a 	or	r2,r19,r20
    dc2c:	d8c02215 	stw	r3,136(sp)
    dc30:	8922703a 	and	r17,r17,r4
    dc34:	002b883a 	mov	r21,zero
    dc38:	103f2f1e 	bne	r2,zero,d8f8 <__alt_data_end+0xfffdcbb8>
    dc3c:	803e2f26 	beq	r16,zero,d4fc <__alt_data_end+0xfffdc7bc>
    dc40:	0027883a 	mov	r19,zero
    dc44:	9cc00c04 	addi	r19,r19,48
    dc48:	dcc019c5 	stb	r19,103(sp)
    dc4c:	dd002817 	ldw	r20,160(sp)
    dc50:	ddc019c4 	addi	r23,sp,103
    dc54:	003e2c06 	br	d508 <__alt_data_end+0xfffdc7c8>
    dc58:	9cc03fcc 	andi	r19,r19,255
    dc5c:	b811883a 	mov	r8,r23
    dc60:	9802571e 	bne	r19,zero,e5c0 <___vfiprintf_internal_r+0x14c4>
    dc64:	18005726 	beq	r3,zero,ddc4 <___vfiprintf_internal_r+0xcc8>
    dc68:	04c00044 	movi	r19,1
    dc6c:	d8c01005 	stb	r3,64(sp)
    dc70:	d8001d85 	stb	zero,118(sp)
    dc74:	9829883a 	mov	r20,r19
    dc78:	ddc01004 	addi	r23,sp,64
    dc7c:	003f0a06 	br	d8a8 <__alt_data_end+0xfffdcb68>
    dc80:	d9402017 	ldw	r5,128(sp)
    dc84:	d9002117 	ldw	r4,132(sp)
    dc88:	d9801a04 	addi	r6,sp,104
    dc8c:	da802a15 	stw	r10,168(sp)
    dc90:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    dc94:	da802a17 	ldw	r10,168(sp)
    dc98:	1000501e 	bne	r2,zero,dddc <___vfiprintf_internal_r+0xce0>
    dc9c:	d9801b17 	ldw	r6,108(sp)
    dca0:	d8801c17 	ldw	r2,112(sp)
    dca4:	d811883a 	mov	r8,sp
    dca8:	31000044 	addi	r4,r6,1
    dcac:	003e3606 	br	d588 <__alt_data_end+0xfffdc848>
    dcb0:	d9001b17 	ldw	r4,108(sp)
    dcb4:	d8801c17 	ldw	r2,112(sp)
    dcb8:	21400044 	addi	r5,r4,1
    dcbc:	d9801d87 	ldb	r6,118(sp)
    dcc0:	303e5226 	beq	r6,zero,d60c <__alt_data_end+0xfffdc8cc>
    dcc4:	01800044 	movi	r6,1
    dcc8:	d9001d84 	addi	r4,sp,118
    dccc:	1185883a 	add	r2,r2,r6
    dcd0:	41000015 	stw	r4,0(r8)
    dcd4:	41800115 	stw	r6,4(r8)
    dcd8:	d8801c15 	stw	r2,112(sp)
    dcdc:	d9401b15 	stw	r5,108(sp)
    dce0:	010001c4 	movi	r4,7
    dce4:	2140b00e 	bge	r4,r5,dfa8 <___vfiprintf_internal_r+0xeac>
    dce8:	1000f61e 	bne	r2,zero,e0c4 <___vfiprintf_internal_r+0xfc8>
    dcec:	3800b31e 	bne	r7,zero,dfbc <___vfiprintf_internal_r+0xec0>
    dcf0:	0009883a 	mov	r4,zero
    dcf4:	300b883a 	mov	r5,r6
    dcf8:	d811883a 	mov	r8,sp
    dcfc:	01802004 	movi	r6,128
    dd00:	19be5226 	beq	r3,r6,d64c <__alt_data_end+0xfffdc90c>
    dd04:	8521c83a 	sub	r16,r16,r20
    dd08:	043e790e 	bge	zero,r16,d6f0 <__alt_data_end+0xfffdc9b0>
    dd0c:	05400404 	movi	r21,16
    dd10:	ac01b00e 	bge	r21,r16,e3d4 <___vfiprintf_internal_r+0x12d8>
    dd14:	014000b4 	movhi	r5,2
    dd18:	2976ef04 	addi	r5,r5,-9284
    dd1c:	d9402315 	stw	r5,140(sp)
    dd20:	070001c4 	movi	fp,7
    dd24:	00000506 	br	dd3c <___vfiprintf_internal_r+0xc40>
    dd28:	21400084 	addi	r5,r4,2
    dd2c:	42000204 	addi	r8,r8,8
    dd30:	1809883a 	mov	r4,r3
    dd34:	843ffc04 	addi	r16,r16,-16
    dd38:	ac000d0e 	bge	r21,r16,dd70 <___vfiprintf_internal_r+0xc74>
    dd3c:	10800404 	addi	r2,r2,16
    dd40:	20c00044 	addi	r3,r4,1
    dd44:	44800015 	stw	r18,0(r8)
    dd48:	45400115 	stw	r21,4(r8)
    dd4c:	d8801c15 	stw	r2,112(sp)
    dd50:	d8c01b15 	stw	r3,108(sp)
    dd54:	e0fff40e 	bge	fp,r3,dd28 <__alt_data_end+0xfffdcfe8>
    dd58:	1000101e 	bne	r2,zero,dd9c <___vfiprintf_internal_r+0xca0>
    dd5c:	843ffc04 	addi	r16,r16,-16
    dd60:	01400044 	movi	r5,1
    dd64:	0009883a 	mov	r4,zero
    dd68:	d811883a 	mov	r8,sp
    dd6c:	ac3ff316 	blt	r21,r16,dd3c <__alt_data_end+0xfffdcffc>
    dd70:	d8c02317 	ldw	r3,140(sp)
    dd74:	1405883a 	add	r2,r2,r16
    dd78:	44000115 	stw	r16,4(r8)
    dd7c:	40c00015 	stw	r3,0(r8)
    dd80:	d8801c15 	stw	r2,112(sp)
    dd84:	d9401b15 	stw	r5,108(sp)
    dd88:	00c001c4 	movi	r3,7
    dd8c:	19401916 	blt	r3,r5,ddf4 <___vfiprintf_internal_r+0xcf8>
    dd90:	42000204 	addi	r8,r8,8
    dd94:	29400044 	addi	r5,r5,1
    dd98:	003e5506 	br	d6f0 <__alt_data_end+0xfffdc9b0>
    dd9c:	d9402017 	ldw	r5,128(sp)
    dda0:	d9002117 	ldw	r4,132(sp)
    dda4:	d9801a04 	addi	r6,sp,104
    dda8:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    ddac:	10000b1e 	bne	r2,zero,dddc <___vfiprintf_internal_r+0xce0>
    ddb0:	d9001b17 	ldw	r4,108(sp)
    ddb4:	d8801c17 	ldw	r2,112(sp)
    ddb8:	d811883a 	mov	r8,sp
    ddbc:	21400044 	addi	r5,r4,1
    ddc0:	003fdc06 	br	dd34 <__alt_data_end+0xfffdcff4>
    ddc4:	d8801c17 	ldw	r2,112(sp)
    ddc8:	10000426 	beq	r2,zero,dddc <___vfiprintf_internal_r+0xce0>
    ddcc:	d9402017 	ldw	r5,128(sp)
    ddd0:	d9002117 	ldw	r4,132(sp)
    ddd4:	d9801a04 	addi	r6,sp,104
    ddd8:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    dddc:	d9402017 	ldw	r5,128(sp)
    dde0:	2880030b 	ldhu	r2,12(r5)
    dde4:	1080100c 	andi	r2,r2,64
    dde8:	10014d1e 	bne	r2,zero,e320 <___vfiprintf_internal_r+0x1224>
    ddec:	d8802417 	ldw	r2,144(sp)
    ddf0:	003d9706 	br	d450 <__alt_data_end+0xfffdc710>
    ddf4:	1000d21e 	bne	r2,zero,e140 <___vfiprintf_internal_r+0x1044>
    ddf8:	00c00044 	movi	r3,1
    ddfc:	a005883a 	mov	r2,r20
    de00:	ddc00015 	stw	r23,0(sp)
    de04:	dd000115 	stw	r20,4(sp)
    de08:	dd001c15 	stw	r20,112(sp)
    de0c:	d8c01b15 	stw	r3,108(sp)
    de10:	d811883a 	mov	r8,sp
    de14:	42000204 	addi	r8,r8,8
    de18:	8c40010c 	andi	r17,r17,4
    de1c:	88004026 	beq	r17,zero,df20 <___vfiprintf_internal_r+0xe24>
    de20:	d9002517 	ldw	r4,148(sp)
    de24:	24e3c83a 	sub	r17,r4,r19
    de28:	04403d0e 	bge	zero,r17,df20 <___vfiprintf_internal_r+0xe24>
    de2c:	04000404 	movi	r16,16
    de30:	8441a90e 	bge	r16,r17,e4d8 <___vfiprintf_internal_r+0x13dc>
    de34:	00c000b4 	movhi	r3,2
    de38:	18f6f304 	addi	r3,r3,-9268
    de3c:	d9001b17 	ldw	r4,108(sp)
    de40:	d8c02315 	stw	r3,140(sp)
    de44:	050001c4 	movi	r20,7
    de48:	dd402117 	ldw	r21,132(sp)
    de4c:	ddc02017 	ldw	r23,128(sp)
    de50:	00000506 	br	de68 <___vfiprintf_internal_r+0xd6c>
    de54:	21400084 	addi	r5,r4,2
    de58:	42000204 	addi	r8,r8,8
    de5c:	1809883a 	mov	r4,r3
    de60:	8c7ffc04 	addi	r17,r17,-16
    de64:	84400f0e 	bge	r16,r17,dea4 <___vfiprintf_internal_r+0xda8>
    de68:	014000b4 	movhi	r5,2
    de6c:	10800404 	addi	r2,r2,16
    de70:	20c00044 	addi	r3,r4,1
    de74:	2976f304 	addi	r5,r5,-9268
    de78:	41400015 	stw	r5,0(r8)
    de7c:	44000115 	stw	r16,4(r8)
    de80:	d8801c15 	stw	r2,112(sp)
    de84:	d8c01b15 	stw	r3,108(sp)
    de88:	a0fff20e 	bge	r20,r3,de54 <__alt_data_end+0xfffdd114>
    de8c:	1000141e 	bne	r2,zero,dee0 <___vfiprintf_internal_r+0xde4>
    de90:	8c7ffc04 	addi	r17,r17,-16
    de94:	01400044 	movi	r5,1
    de98:	0009883a 	mov	r4,zero
    de9c:	d811883a 	mov	r8,sp
    dea0:	847ff116 	blt	r16,r17,de68 <__alt_data_end+0xfffdd128>
    dea4:	d8c02317 	ldw	r3,140(sp)
    dea8:	1445883a 	add	r2,r2,r17
    deac:	44400115 	stw	r17,4(r8)
    deb0:	40c00015 	stw	r3,0(r8)
    deb4:	d8801c15 	stw	r2,112(sp)
    deb8:	d9401b15 	stw	r5,108(sp)
    debc:	00c001c4 	movi	r3,7
    dec0:	1940170e 	bge	r3,r5,df20 <___vfiprintf_internal_r+0xe24>
    dec4:	1000101e 	bne	r2,zero,df08 <___vfiprintf_internal_r+0xe0c>
    dec8:	d8802517 	ldw	r2,148(sp)
    decc:	14c11616 	blt	r2,r19,e328 <___vfiprintf_internal_r+0x122c>
    ded0:	d9002417 	ldw	r4,144(sp)
    ded4:	2089883a 	add	r4,r4,r2
    ded8:	d9002415 	stw	r4,144(sp)
    dedc:	003e1806 	br	d740 <__alt_data_end+0xfffdca00>
    dee0:	d9801a04 	addi	r6,sp,104
    dee4:	b80b883a 	mov	r5,r23
    dee8:	a809883a 	mov	r4,r21
    deec:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    def0:	103fba1e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    def4:	d9001b17 	ldw	r4,108(sp)
    def8:	d8801c17 	ldw	r2,112(sp)
    defc:	d811883a 	mov	r8,sp
    df00:	21400044 	addi	r5,r4,1
    df04:	003fd606 	br	de60 <__alt_data_end+0xfffdd120>
    df08:	d9402017 	ldw	r5,128(sp)
    df0c:	d9002117 	ldw	r4,132(sp)
    df10:	d9801a04 	addi	r6,sp,104
    df14:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    df18:	103fb01e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    df1c:	d8801c17 	ldw	r2,112(sp)
    df20:	d8c02517 	ldw	r3,148(sp)
    df24:	1cc0010e 	bge	r3,r19,df2c <___vfiprintf_internal_r+0xe30>
    df28:	9807883a 	mov	r3,r19
    df2c:	d9002417 	ldw	r4,144(sp)
    df30:	20c9883a 	add	r4,r4,r3
    df34:	d9002415 	stw	r4,144(sp)
    df38:	103e0126 	beq	r2,zero,d740 <__alt_data_end+0xfffdca00>
    df3c:	d9402017 	ldw	r5,128(sp)
    df40:	d9002117 	ldw	r4,132(sp)
    df44:	d9801a04 	addi	r6,sp,104
    df48:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    df4c:	103dfc26 	beq	r2,zero,d740 <__alt_data_end+0xfffdca00>
    df50:	003fa206 	br	dddc <__alt_data_end+0xfffdd09c>
    df54:	d9402017 	ldw	r5,128(sp)
    df58:	d9002117 	ldw	r4,132(sp)
    df5c:	d9801a04 	addi	r6,sp,104
    df60:	d9c02b15 	stw	r7,172(sp)
    df64:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    df68:	d9c02b17 	ldw	r7,172(sp)
    df6c:	103f9b1e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    df70:	d9001b17 	ldw	r4,108(sp)
    df74:	d8801c17 	ldw	r2,112(sp)
    df78:	d811883a 	mov	r8,sp
    df7c:	21800044 	addi	r6,r4,1
    df80:	003dbf06 	br	d680 <__alt_data_end+0xfffdc940>
    df84:	1000d81e 	bne	r2,zero,e2e8 <___vfiprintf_internal_r+0x11ec>
    df88:	d9001d87 	ldb	r4,118(sp)
    df8c:	20000a26 	beq	r4,zero,dfb8 <___vfiprintf_internal_r+0xebc>
    df90:	00800044 	movi	r2,1
    df94:	d9001d84 	addi	r4,sp,118
    df98:	100b883a 	mov	r5,r2
    df9c:	d9000015 	stw	r4,0(sp)
    dfa0:	d8800115 	stw	r2,4(sp)
    dfa4:	d811883a 	mov	r8,sp
    dfa8:	2809883a 	mov	r4,r5
    dfac:	42000204 	addi	r8,r8,8
    dfb0:	29400044 	addi	r5,r5,1
    dfb4:	003d9506 	br	d60c <__alt_data_end+0xfffdc8cc>
    dfb8:	3800fd26 	beq	r7,zero,e3b0 <___vfiprintf_internal_r+0x12b4>
    dfbc:	00800084 	movi	r2,2
    dfc0:	d9001d04 	addi	r4,sp,116
    dfc4:	d9000015 	stw	r4,0(sp)
    dfc8:	d8800115 	stw	r2,4(sp)
    dfcc:	01400044 	movi	r5,1
    dfd0:	d811883a 	mov	r8,sp
    dfd4:	2809883a 	mov	r4,r5
    dfd8:	42000204 	addi	r8,r8,8
    dfdc:	29400044 	addi	r5,r5,1
    dfe0:	003f4606 	br	dcfc <__alt_data_end+0xfffdcfbc>
    dfe4:	d8802517 	ldw	r2,148(sp)
    dfe8:	14c0010e 	bge	r2,r19,dff0 <___vfiprintf_internal_r+0xef4>
    dfec:	9805883a 	mov	r2,r19
    dff0:	d9402417 	ldw	r5,144(sp)
    dff4:	288b883a 	add	r5,r5,r2
    dff8:	d9402415 	stw	r5,144(sp)
    dffc:	003dd006 	br	d740 <__alt_data_end+0xfffdca00>
    e000:	d8001d85 	stb	zero,118(sp)
    e004:	80005d16 	blt	r16,zero,e17c <___vfiprintf_internal_r+0x1080>
    e008:	00ffdfc4 	movi	r3,-129
    e00c:	9d04b03a 	or	r2,r19,r20
    e010:	88e2703a 	and	r17,r17,r3
    e014:	103d3726 	beq	r2,zero,d4f4 <__alt_data_end+0xfffdc7b4>
    e018:	002b883a 	mov	r21,zero
    e01c:	d9002617 	ldw	r4,152(sp)
    e020:	ddc01a04 	addi	r23,sp,104
    e024:	988003cc 	andi	r2,r19,15
    e028:	a006973a 	slli	r3,r20,28
    e02c:	2085883a 	add	r2,r4,r2
    e030:	9826d13a 	srli	r19,r19,4
    e034:	10800003 	ldbu	r2,0(r2)
    e038:	a028d13a 	srli	r20,r20,4
    e03c:	bdffffc4 	addi	r23,r23,-1
    e040:	1ce6b03a 	or	r19,r3,r19
    e044:	b8800005 	stb	r2,0(r23)
    e048:	9d04b03a 	or	r2,r19,r20
    e04c:	103ff51e 	bne	r2,zero,e024 <__alt_data_end+0xfffdd2e4>
    e050:	d8801e17 	ldw	r2,120(sp)
    e054:	15e9c83a 	sub	r20,r2,r23
    e058:	003d2b06 	br	d508 <__alt_data_end+0xfffdc7c8>
    e05c:	d9402017 	ldw	r5,128(sp)
    e060:	d9002117 	ldw	r4,132(sp)
    e064:	d9801a04 	addi	r6,sp,104
    e068:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e06c:	103f5b1e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e070:	d8801c17 	ldw	r2,112(sp)
    e074:	d811883a 	mov	r8,sp
    e078:	003f6706 	br	de18 <__alt_data_end+0xfffdd0d8>
    e07c:	d9402017 	ldw	r5,128(sp)
    e080:	d9002117 	ldw	r4,132(sp)
    e084:	d9801a04 	addi	r6,sp,104
    e088:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e08c:	103f531e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e090:	d811883a 	mov	r8,sp
    e094:	003cd906 	br	d3fc <__alt_data_end+0xfffdc6bc>
    e098:	10803fcc 	andi	r2,r2,255
    e09c:	1080201c 	xori	r2,r2,128
    e0a0:	10bfe004 	addi	r2,r2,-128
    e0a4:	00c00c04 	movi	r3,48
    e0a8:	10ffe926 	beq	r2,r3,e050 <__alt_data_end+0xfffdd310>
    e0ac:	b8ffffc5 	stb	r3,-1(r23)
    e0b0:	d8c01e17 	ldw	r3,120(sp)
    e0b4:	b8bfffc4 	addi	r2,r23,-1
    e0b8:	102f883a 	mov	r23,r2
    e0bc:	18a9c83a 	sub	r20,r3,r2
    e0c0:	003d1106 	br	d508 <__alt_data_end+0xfffdc7c8>
    e0c4:	d9402017 	ldw	r5,128(sp)
    e0c8:	d9002117 	ldw	r4,132(sp)
    e0cc:	d9801a04 	addi	r6,sp,104
    e0d0:	d8c02a15 	stw	r3,168(sp)
    e0d4:	d9c02b15 	stw	r7,172(sp)
    e0d8:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e0dc:	d8c02a17 	ldw	r3,168(sp)
    e0e0:	d9c02b17 	ldw	r7,172(sp)
    e0e4:	103f3d1e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e0e8:	d9001b17 	ldw	r4,108(sp)
    e0ec:	d8801c17 	ldw	r2,112(sp)
    e0f0:	d811883a 	mov	r8,sp
    e0f4:	21400044 	addi	r5,r4,1
    e0f8:	003d4406 	br	d60c <__alt_data_end+0xfffdc8cc>
    e0fc:	d9402017 	ldw	r5,128(sp)
    e100:	d9002117 	ldw	r4,132(sp)
    e104:	d9801a04 	addi	r6,sp,104
    e108:	d8c02a15 	stw	r3,168(sp)
    e10c:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e110:	d8c02a17 	ldw	r3,168(sp)
    e114:	103f311e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e118:	d9001b17 	ldw	r4,108(sp)
    e11c:	d8801c17 	ldw	r2,112(sp)
    e120:	d811883a 	mov	r8,sp
    e124:	21400044 	addi	r5,r4,1
    e128:	003ef406 	br	dcfc <__alt_data_end+0xfffdcfbc>
    e12c:	1000bd1e 	bne	r2,zero,e424 <___vfiprintf_internal_r+0x1328>
    e130:	01400044 	movi	r5,1
    e134:	0009883a 	mov	r4,zero
    e138:	d811883a 	mov	r8,sp
    e13c:	003ef106 	br	dd04 <__alt_data_end+0xfffdcfc4>
    e140:	d9402017 	ldw	r5,128(sp)
    e144:	d9002117 	ldw	r4,132(sp)
    e148:	d9801a04 	addi	r6,sp,104
    e14c:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e150:	103f221e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e154:	d9401b17 	ldw	r5,108(sp)
    e158:	d8801c17 	ldw	r2,112(sp)
    e15c:	d811883a 	mov	r8,sp
    e160:	29400044 	addi	r5,r5,1
    e164:	003d6206 	br	d6f0 <__alt_data_end+0xfffdc9b0>
    e168:	014000b4 	movhi	r5,2
    e16c:	29768f04 	addi	r5,r5,-9668
    e170:	d9402615 	stw	r5,152(sp)
    e174:	d8c02215 	stw	r3,136(sp)
    e178:	1023883a 	mov	r17,r2
    e17c:	9d04b03a 	or	r2,r19,r20
    e180:	103fa51e 	bne	r2,zero,e018 <__alt_data_end+0xfffdd2d8>
    e184:	002b883a 	mov	r21,zero
    e188:	00800084 	movi	r2,2
    e18c:	003e4a06 	br	dab8 <__alt_data_end+0xfffdcd78>
    e190:	014000b4 	movhi	r5,2
    e194:	29768f04 	addi	r5,r5,-9668
    e198:	002b883a 	mov	r21,zero
    e19c:	d9402615 	stw	r5,152(sp)
    e1a0:	003f9e06 	br	e01c <__alt_data_end+0xfffdd2dc>
    e1a4:	d9402217 	ldw	r5,136(sp)
    e1a8:	d8001d85 	stb	zero,118(sp)
    e1ac:	0029883a 	mov	r20,zero
    e1b0:	28800104 	addi	r2,r5,4
    e1b4:	2cc00017 	ldw	r19,0(r5)
    e1b8:	803e3a16 	blt	r16,zero,daa4 <__alt_data_end+0xfffdcd64>
    e1bc:	00ffdfc4 	movi	r3,-129
    e1c0:	d8802215 	stw	r2,136(sp)
    e1c4:	88e2703a 	and	r17,r17,r3
    e1c8:	002b883a 	mov	r21,zero
    e1cc:	983e9b26 	beq	r19,zero,dc3c <__alt_data_end+0xfffdcefc>
    e1d0:	00800244 	movi	r2,9
    e1d4:	14fdc936 	bltu	r2,r19,d8fc <__alt_data_end+0xfffdcbbc>
    e1d8:	003e9a06 	br	dc44 <__alt_data_end+0xfffdcf04>
    e1dc:	00800c04 	movi	r2,48
    e1e0:	d8c01d45 	stb	r3,117(sp)
    e1e4:	d8801d05 	stb	r2,116(sp)
    e1e8:	d8001d85 	stb	zero,118(sp)
    e1ec:	88c00094 	ori	r3,r17,2
    e1f0:	80009c16 	blt	r16,zero,e464 <___vfiprintf_internal_r+0x1368>
    e1f4:	00bfdfc4 	movi	r2,-129
    e1f8:	88a2703a 	and	r17,r17,r2
    e1fc:	8c400094 	ori	r17,r17,2
    e200:	002b883a 	mov	r21,zero
    e204:	003f8506 	br	e01c <__alt_data_end+0xfffdd2dc>
    e208:	b029883a 	mov	r20,r22
    e20c:	003c0b06 	br	d23c <__alt_data_end+0xfffdc4fc>
    e210:	04e7c83a 	sub	r19,zero,r19
    e214:	05400b44 	movi	r21,45
    e218:	9804c03a 	cmpne	r2,r19,zero
    e21c:	0529c83a 	sub	r20,zero,r20
    e220:	dd401d85 	stb	r21,118(sp)
    e224:	a0a9c83a 	sub	r20,r20,r2
    e228:	80009716 	blt	r16,zero,e488 <___vfiprintf_internal_r+0x138c>
    e22c:	00bfdfc4 	movi	r2,-129
    e230:	88a2703a 	and	r17,r17,r2
    e234:	003db006 	br	d8f8 <__alt_data_end+0xfffdcbb8>
    e238:	b0c00007 	ldb	r3,0(r22)
    e23c:	003c0c06 	br	d270 <__alt_data_end+0xfffdc530>
    e240:	8880100c 	andi	r2,r17,64
    e244:	d8001d85 	stb	zero,118(sp)
    e248:	1000461e 	bne	r2,zero,e364 <___vfiprintf_internal_r+0x1268>
    e24c:	d9002217 	ldw	r4,136(sp)
    e250:	0029883a 	mov	r20,zero
    e254:	20800104 	addi	r2,r4,4
    e258:	24c00017 	ldw	r19,0(r4)
    e25c:	803df80e 	bge	r16,zero,da40 <__alt_data_end+0xfffdcd00>
    e260:	9d06b03a 	or	r3,r19,r20
    e264:	d8802215 	stw	r2,136(sp)
    e268:	183d5e1e 	bne	r3,zero,d7e4 <__alt_data_end+0xfffdcaa4>
    e26c:	002b883a 	mov	r21,zero
    e270:	0005883a 	mov	r2,zero
    e274:	003e1006 	br	dab8 <__alt_data_end+0xfffdcd78>
    e278:	8880040c 	andi	r2,r17,16
    e27c:	1000321e 	bne	r2,zero,e348 <___vfiprintf_internal_r+0x124c>
    e280:	8c40100c 	andi	r17,r17,64
    e284:	88008d26 	beq	r17,zero,e4bc <___vfiprintf_internal_r+0x13c0>
    e288:	d9402217 	ldw	r5,136(sp)
    e28c:	d8c02417 	ldw	r3,144(sp)
    e290:	28800017 	ldw	r2,0(r5)
    e294:	29400104 	addi	r5,r5,4
    e298:	d9402215 	stw	r5,136(sp)
    e29c:	10c0000d 	sth	r3,0(r2)
    e2a0:	003bca06 	br	d1cc <__alt_data_end+0xfffdc48c>
    e2a4:	8880100c 	andi	r2,r17,64
    e2a8:	10003a26 	beq	r2,zero,e394 <___vfiprintf_internal_r+0x1298>
    e2ac:	d8802217 	ldw	r2,136(sp)
    e2b0:	14c0000f 	ldh	r19,0(r2)
    e2b4:	10800104 	addi	r2,r2,4
    e2b8:	d8802215 	stw	r2,136(sp)
    e2bc:	9829d7fa 	srai	r20,r19,31
    e2c0:	a005883a 	mov	r2,r20
    e2c4:	003d8506 	br	d8dc <__alt_data_end+0xfffdcb9c>
    e2c8:	8880100c 	andi	r2,r17,64
    e2cc:	10002b26 	beq	r2,zero,e37c <___vfiprintf_internal_r+0x1280>
    e2d0:	d8802217 	ldw	r2,136(sp)
    e2d4:	0029883a 	mov	r20,zero
    e2d8:	14c0000b 	ldhu	r19,0(r2)
    e2dc:	10800104 	addi	r2,r2,4
    e2e0:	d8802215 	stw	r2,136(sp)
    e2e4:	003d5d06 	br	d85c <__alt_data_end+0xfffdcb1c>
    e2e8:	d9402017 	ldw	r5,128(sp)
    e2ec:	d9002117 	ldw	r4,132(sp)
    e2f0:	d9801a04 	addi	r6,sp,104
    e2f4:	d8c02a15 	stw	r3,168(sp)
    e2f8:	d9c02b15 	stw	r7,172(sp)
    e2fc:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e300:	d8c02a17 	ldw	r3,168(sp)
    e304:	d9c02b17 	ldw	r7,172(sp)
    e308:	103eb41e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e30c:	d9001b17 	ldw	r4,108(sp)
    e310:	d8801c17 	ldw	r2,112(sp)
    e314:	d811883a 	mov	r8,sp
    e318:	21400044 	addi	r5,r4,1
    e31c:	003e6706 	br	dcbc <__alt_data_end+0xfffdcf7c>
    e320:	00bfffc4 	movi	r2,-1
    e324:	003c4a06 	br	d450 <__alt_data_end+0xfffdc710>
    e328:	9805883a 	mov	r2,r19
    e32c:	003ee806 	br	ded0 <__alt_data_end+0xfffdd190>
    e330:	d8c02217 	ldw	r3,136(sp)
    e334:	0029883a 	mov	r20,zero
    e338:	18800104 	addi	r2,r3,4
    e33c:	1cc0000b 	ldhu	r19,0(r3)
    e340:	803f9e0e 	bge	r16,zero,e1bc <__alt_data_end+0xfffdd47c>
    e344:	003dd706 	br	daa4 <__alt_data_end+0xfffdcd64>
    e348:	d8c02217 	ldw	r3,136(sp)
    e34c:	d9002417 	ldw	r4,144(sp)
    e350:	18800017 	ldw	r2,0(r3)
    e354:	18c00104 	addi	r3,r3,4
    e358:	d8c02215 	stw	r3,136(sp)
    e35c:	11000015 	stw	r4,0(r2)
    e360:	003b9a06 	br	d1cc <__alt_data_end+0xfffdc48c>
    e364:	d8c02217 	ldw	r3,136(sp)
    e368:	0029883a 	mov	r20,zero
    e36c:	18800104 	addi	r2,r3,4
    e370:	1cc0000b 	ldhu	r19,0(r3)
    e374:	803db20e 	bge	r16,zero,da40 <__alt_data_end+0xfffdcd00>
    e378:	003fb906 	br	e260 <__alt_data_end+0xfffdd520>
    e37c:	d9002217 	ldw	r4,136(sp)
    e380:	0029883a 	mov	r20,zero
    e384:	24c00017 	ldw	r19,0(r4)
    e388:	21000104 	addi	r4,r4,4
    e38c:	d9002215 	stw	r4,136(sp)
    e390:	003d3206 	br	d85c <__alt_data_end+0xfffdcb1c>
    e394:	d8c02217 	ldw	r3,136(sp)
    e398:	1cc00017 	ldw	r19,0(r3)
    e39c:	18c00104 	addi	r3,r3,4
    e3a0:	d8c02215 	stw	r3,136(sp)
    e3a4:	9829d7fa 	srai	r20,r19,31
    e3a8:	a005883a 	mov	r2,r20
    e3ac:	003d4b06 	br	d8dc <__alt_data_end+0xfffdcb9c>
    e3b0:	0009883a 	mov	r4,zero
    e3b4:	01400044 	movi	r5,1
    e3b8:	d811883a 	mov	r8,sp
    e3bc:	003e4f06 	br	dcfc <__alt_data_end+0xfffdcfbc>
    e3c0:	d8c02215 	stw	r3,136(sp)
    e3c4:	002b883a 	mov	r21,zero
    e3c8:	003db806 	br	daac <__alt_data_end+0xfffdcd6c>
    e3cc:	d811883a 	mov	r8,sp
    e3d0:	003e9606 	br	de2c <__alt_data_end+0xfffdd0ec>
    e3d4:	010000b4 	movhi	r4,2
    e3d8:	2136ef04 	addi	r4,r4,-9284
    e3dc:	d9002315 	stw	r4,140(sp)
    e3e0:	003e6306 	br	dd70 <__alt_data_end+0xfffdd030>
    e3e4:	b0c00043 	ldbu	r3,1(r22)
    e3e8:	8c400814 	ori	r17,r17,32
    e3ec:	b5800044 	addi	r22,r22,1
    e3f0:	18c03fcc 	andi	r3,r3,255
    e3f4:	18c0201c 	xori	r3,r3,128
    e3f8:	18ffe004 	addi	r3,r3,-128
    e3fc:	003b9c06 	br	d270 <__alt_data_end+0xfffdc530>
    e400:	b809883a 	mov	r4,r23
    e404:	da002a15 	stw	r8,168(sp)
    e408:	00063b00 	call	63b0 <strlen>
    e40c:	1029883a 	mov	r20,r2
    e410:	dd401d83 	ldbu	r21,118(sp)
    e414:	df002215 	stw	fp,136(sp)
    e418:	0021883a 	mov	r16,zero
    e41c:	da002a17 	ldw	r8,168(sp)
    e420:	003c3906 	br	d508 <__alt_data_end+0xfffdc7c8>
    e424:	d9402017 	ldw	r5,128(sp)
    e428:	d9002117 	ldw	r4,132(sp)
    e42c:	d9801a04 	addi	r6,sp,104
    e430:	000cfe80 	call	cfe8 <__sprint_r.part.0>
    e434:	103e691e 	bne	r2,zero,dddc <__alt_data_end+0xfffdd09c>
    e438:	d9001b17 	ldw	r4,108(sp)
    e43c:	d8801c17 	ldw	r2,112(sp)
    e440:	d811883a 	mov	r8,sp
    e444:	21400044 	addi	r5,r4,1
    e448:	003e2e06 	br	dd04 <__alt_data_end+0xfffdcfc4>
    e44c:	010000b4 	movhi	r4,2
    e450:	2136f304 	addi	r4,r4,-9268
    e454:	d9002315 	stw	r4,140(sp)
    e458:	d9001b17 	ldw	r4,108(sp)
    e45c:	21000044 	addi	r4,r4,1
    e460:	003c5e06 	br	d5dc <__alt_data_end+0xfffdc89c>
    e464:	002b883a 	mov	r21,zero
    e468:	00800084 	movi	r2,2
    e46c:	10803fcc 	andi	r2,r2,255
    e470:	01000044 	movi	r4,1
    e474:	11002b26 	beq	r2,r4,e524 <___vfiprintf_internal_r+0x1428>
    e478:	01000084 	movi	r4,2
    e47c:	11002b1e 	bne	r2,r4,e52c <___vfiprintf_internal_r+0x1430>
    e480:	1823883a 	mov	r17,r3
    e484:	003ee506 	br	e01c <__alt_data_end+0xfffdd2dc>
    e488:	8807883a 	mov	r3,r17
    e48c:	00800044 	movi	r2,1
    e490:	003ff606 	br	e46c <__alt_data_end+0xfffdd72c>
    e494:	00800184 	movi	r2,6
    e498:	1400012e 	bgeu	r2,r16,e4a0 <___vfiprintf_internal_r+0x13a4>
    e49c:	1021883a 	mov	r16,r2
    e4a0:	8029883a 	mov	r20,r16
    e4a4:	8027883a 	mov	r19,r16
    e4a8:	80002216 	blt	r16,zero,e534 <___vfiprintf_internal_r+0x1438>
    e4ac:	05c000b4 	movhi	r23,2
    e4b0:	df002215 	stw	fp,136(sp)
    e4b4:	bdf69404 	addi	r23,r23,-9648
    e4b8:	003cfb06 	br	d8a8 <__alt_data_end+0xfffdcb68>
    e4bc:	d9002217 	ldw	r4,136(sp)
    e4c0:	d9402417 	ldw	r5,144(sp)
    e4c4:	20800017 	ldw	r2,0(r4)
    e4c8:	21000104 	addi	r4,r4,4
    e4cc:	d9002215 	stw	r4,136(sp)
    e4d0:	11400015 	stw	r5,0(r2)
    e4d4:	003b3d06 	br	d1cc <__alt_data_end+0xfffdc48c>
    e4d8:	014000b4 	movhi	r5,2
    e4dc:	2976f304 	addi	r5,r5,-9268
    e4e0:	d9402315 	stw	r5,140(sp)
    e4e4:	d9401b17 	ldw	r5,108(sp)
    e4e8:	29400044 	addi	r5,r5,1
    e4ec:	003e6d06 	br	dea4 <__alt_data_end+0xfffdd164>
    e4f0:	8029883a 	mov	r20,r16
    e4f4:	dd401d83 	ldbu	r21,118(sp)
    e4f8:	df002215 	stw	fp,136(sp)
    e4fc:	0021883a 	mov	r16,zero
    e500:	003c0106 	br	d508 <__alt_data_end+0xfffdc7c8>
    e504:	00c000b4 	movhi	r3,2
    e508:	18f6ef04 	addi	r3,r3,-9284
    e50c:	d8c02315 	stw	r3,140(sp)
    e510:	280d883a 	mov	r6,r5
    e514:	003c6906 	br	d6bc <__alt_data_end+0xfffdc97c>
    e518:	802d883a 	mov	r22,r16
    e51c:	0021883a 	mov	r16,zero
    e520:	003b5406 	br	d274 <__alt_data_end+0xfffdc534>
    e524:	1823883a 	mov	r17,r3
    e528:	003cf306 	br	d8f8 <__alt_data_end+0xfffdcbb8>
    e52c:	1823883a 	mov	r17,r3
    e530:	003cad06 	br	d7e8 <__alt_data_end+0xfffdcaa8>
    e534:	0027883a 	mov	r19,zero
    e538:	003fdc06 	br	e4ac <__alt_data_end+0xfffdd76c>
    e53c:	d9402217 	ldw	r5,136(sp)
    e540:	8005883a 	mov	r2,r16
    e544:	b0c00043 	ldbu	r3,1(r22)
    e548:	2c000017 	ldw	r16,0(r5)
    e54c:	29000104 	addi	r4,r5,4
    e550:	d9002215 	stw	r4,136(sp)
    e554:	102d883a 	mov	r22,r2
    e558:	803fa50e 	bge	r16,zero,e3f0 <__alt_data_end+0xfffdd6b0>
    e55c:	18c03fcc 	andi	r3,r3,255
    e560:	18c0201c 	xori	r3,r3,128
    e564:	043fffc4 	movi	r16,-1
    e568:	18ffe004 	addi	r3,r3,-128
    e56c:	003b4006 	br	d270 <__alt_data_end+0xfffdc530>
    e570:	d9402303 	ldbu	r5,140(sp)
    e574:	d9401d85 	stb	r5,118(sp)
    e578:	003cae06 	br	d834 <__alt_data_end+0xfffdcaf4>
    e57c:	d8c02303 	ldbu	r3,140(sp)
    e580:	d8c01d85 	stb	r3,118(sp)
    e584:	003d1406 	br	d9d8 <__alt_data_end+0xfffdcc98>
    e588:	d8c02303 	ldbu	r3,140(sp)
    e58c:	d8c01d85 	stb	r3,118(sp)
    e590:	003cca06 	br	d8bc <__alt_data_end+0xfffdcb7c>
    e594:	8880004c 	andi	r2,r17,1
    e598:	002b883a 	mov	r21,zero
    e59c:	10000526 	beq	r2,zero,e5b4 <___vfiprintf_internal_r+0x14b8>
    e5a0:	00800c04 	movi	r2,48
    e5a4:	d88019c5 	stb	r2,103(sp)
    e5a8:	dd002817 	ldw	r20,160(sp)
    e5ac:	ddc019c4 	addi	r23,sp,103
    e5b0:	003bd506 	br	d508 <__alt_data_end+0xfffdc7c8>
    e5b4:	0029883a 	mov	r20,zero
    e5b8:	ddc01a04 	addi	r23,sp,104
    e5bc:	003bd206 	br	d508 <__alt_data_end+0xfffdc7c8>
    e5c0:	d9002303 	ldbu	r4,140(sp)
    e5c4:	d9001d85 	stb	r4,118(sp)
    e5c8:	003da606 	br	dc64 <__alt_data_end+0xfffdcf24>
    e5cc:	d8c02303 	ldbu	r3,140(sp)
    e5d0:	d8c01d85 	stb	r3,118(sp)
    e5d4:	003c7606 	br	d7b0 <__alt_data_end+0xfffdca70>
    e5d8:	d8c02303 	ldbu	r3,140(sp)
    e5dc:	d8c01d85 	stb	r3,118(sp)
    e5e0:	003c6506 	br	d778 <__alt_data_end+0xfffdca38>
    e5e4:	d9002303 	ldbu	r4,140(sp)
    e5e8:	d9001d85 	stb	r4,118(sp)
    e5ec:	003d3d06 	br	dae4 <__alt_data_end+0xfffdcda4>
    e5f0:	d8c02303 	ldbu	r3,140(sp)
    e5f4:	d8c01d85 	stb	r3,118(sp)
    e5f8:	003d1d06 	br	da70 <__alt_data_end+0xfffdcd30>
    e5fc:	d8c02303 	ldbu	r3,140(sp)
    e600:	d8c01d85 	stb	r3,118(sp)
    e604:	003d0306 	br	da14 <__alt_data_end+0xfffdccd4>

0000e608 <__vfiprintf_internal>:
    e608:	008000b4 	movhi	r2,2
    e60c:	10be1e04 	addi	r2,r2,-1928
    e610:	300f883a 	mov	r7,r6
    e614:	280d883a 	mov	r6,r5
    e618:	200b883a 	mov	r5,r4
    e61c:	11000017 	ldw	r4,0(r2)
    e620:	000d0fc1 	jmpi	d0fc <___vfiprintf_internal_r>

0000e624 <__sbprintf>:
    e624:	2880030b 	ldhu	r2,12(r5)
    e628:	2ac01917 	ldw	r11,100(r5)
    e62c:	2a80038b 	ldhu	r10,14(r5)
    e630:	2a400717 	ldw	r9,28(r5)
    e634:	2a000917 	ldw	r8,36(r5)
    e638:	defee204 	addi	sp,sp,-1144
    e63c:	00c10004 	movi	r3,1024
    e640:	dc011a15 	stw	r16,1128(sp)
    e644:	10bfff4c 	andi	r2,r2,65533
    e648:	2821883a 	mov	r16,r5
    e64c:	d8cb883a 	add	r5,sp,r3
    e650:	dc811c15 	stw	r18,1136(sp)
    e654:	dc411b15 	stw	r17,1132(sp)
    e658:	dfc11d15 	stw	ra,1140(sp)
    e65c:	2025883a 	mov	r18,r4
    e660:	d881030d 	sth	r2,1036(sp)
    e664:	dac11915 	stw	r11,1124(sp)
    e668:	da81038d 	sth	r10,1038(sp)
    e66c:	da410715 	stw	r9,1052(sp)
    e670:	da010915 	stw	r8,1060(sp)
    e674:	dec10015 	stw	sp,1024(sp)
    e678:	dec10415 	stw	sp,1040(sp)
    e67c:	d8c10215 	stw	r3,1032(sp)
    e680:	d8c10515 	stw	r3,1044(sp)
    e684:	d8010615 	stw	zero,1048(sp)
    e688:	000d0fc0 	call	d0fc <___vfiprintf_internal_r>
    e68c:	1023883a 	mov	r17,r2
    e690:	10000416 	blt	r2,zero,e6a4 <__sbprintf+0x80>
    e694:	d9410004 	addi	r5,sp,1024
    e698:	9009883a 	mov	r4,r18
    e69c:	000a41c0 	call	a41c <_fflush_r>
    e6a0:	10000d1e 	bne	r2,zero,e6d8 <__sbprintf+0xb4>
    e6a4:	d881030b 	ldhu	r2,1036(sp)
    e6a8:	1080100c 	andi	r2,r2,64
    e6ac:	10000326 	beq	r2,zero,e6bc <__sbprintf+0x98>
    e6b0:	8080030b 	ldhu	r2,12(r16)
    e6b4:	10801014 	ori	r2,r2,64
    e6b8:	8080030d 	sth	r2,12(r16)
    e6bc:	8805883a 	mov	r2,r17
    e6c0:	dfc11d17 	ldw	ra,1140(sp)
    e6c4:	dc811c17 	ldw	r18,1136(sp)
    e6c8:	dc411b17 	ldw	r17,1132(sp)
    e6cc:	dc011a17 	ldw	r16,1128(sp)
    e6d0:	dec11e04 	addi	sp,sp,1144
    e6d4:	f800283a 	ret
    e6d8:	047fffc4 	movi	r17,-1
    e6dc:	003ff106 	br	e6a4 <__alt_data_end+0xfffdd964>

0000e6e0 <_write_r>:
    e6e0:	defffd04 	addi	sp,sp,-12
    e6e4:	2805883a 	mov	r2,r5
    e6e8:	dc000015 	stw	r16,0(sp)
    e6ec:	040000b4 	movhi	r16,2
    e6f0:	dc400115 	stw	r17,4(sp)
    e6f4:	300b883a 	mov	r5,r6
    e6f8:	84054704 	addi	r16,r16,5404
    e6fc:	2023883a 	mov	r17,r4
    e700:	380d883a 	mov	r6,r7
    e704:	1009883a 	mov	r4,r2
    e708:	dfc00215 	stw	ra,8(sp)
    e70c:	80000015 	stw	zero,0(r16)
    e710:	00107b00 	call	107b0 <write>
    e714:	00ffffc4 	movi	r3,-1
    e718:	10c00526 	beq	r2,r3,e730 <_write_r+0x50>
    e71c:	dfc00217 	ldw	ra,8(sp)
    e720:	dc400117 	ldw	r17,4(sp)
    e724:	dc000017 	ldw	r16,0(sp)
    e728:	dec00304 	addi	sp,sp,12
    e72c:	f800283a 	ret
    e730:	80c00017 	ldw	r3,0(r16)
    e734:	183ff926 	beq	r3,zero,e71c <__alt_data_end+0xfffdd9dc>
    e738:	88c00015 	stw	r3,0(r17)
    e73c:	003ff706 	br	e71c <__alt_data_end+0xfffdd9dc>

0000e740 <_close_r>:
    e740:	defffd04 	addi	sp,sp,-12
    e744:	dc000015 	stw	r16,0(sp)
    e748:	040000b4 	movhi	r16,2
    e74c:	dc400115 	stw	r17,4(sp)
    e750:	84054704 	addi	r16,r16,5404
    e754:	2023883a 	mov	r17,r4
    e758:	2809883a 	mov	r4,r5
    e75c:	dfc00215 	stw	ra,8(sp)
    e760:	80000015 	stw	zero,0(r16)
    e764:	000fcd00 	call	fcd0 <close>
    e768:	00ffffc4 	movi	r3,-1
    e76c:	10c00526 	beq	r2,r3,e784 <_close_r+0x44>
    e770:	dfc00217 	ldw	ra,8(sp)
    e774:	dc400117 	ldw	r17,4(sp)
    e778:	dc000017 	ldw	r16,0(sp)
    e77c:	dec00304 	addi	sp,sp,12
    e780:	f800283a 	ret
    e784:	80c00017 	ldw	r3,0(r16)
    e788:	183ff926 	beq	r3,zero,e770 <__alt_data_end+0xfffdda30>
    e78c:	88c00015 	stw	r3,0(r17)
    e790:	003ff706 	br	e770 <__alt_data_end+0xfffdda30>

0000e794 <_calloc_r>:
    e794:	defffe04 	addi	sp,sp,-8
    e798:	2805883a 	mov	r2,r5
    e79c:	dc000015 	stw	r16,0(sp)
    e7a0:	300b883a 	mov	r5,r6
    e7a4:	2021883a 	mov	r16,r4
    e7a8:	1009883a 	mov	r4,r2
    e7ac:	dfc00115 	stw	ra,4(sp)
    e7b0:	0002f440 	call	2f44 <__mulsi3>
    e7b4:	100b883a 	mov	r5,r2
    e7b8:	8009883a 	mov	r4,r16
    e7bc:	00057a00 	call	57a0 <_malloc_r>
    e7c0:	10002926 	beq	r2,zero,e868 <_calloc_r+0xd4>
    e7c4:	11bfff17 	ldw	r6,-4(r2)
    e7c8:	1021883a 	mov	r16,r2
    e7cc:	00bfff04 	movi	r2,-4
    e7d0:	308c703a 	and	r6,r6,r2
    e7d4:	00c00904 	movi	r3,36
    e7d8:	308d883a 	add	r6,r6,r2
    e7dc:	19801636 	bltu	r3,r6,e838 <_calloc_r+0xa4>
    e7e0:	008004c4 	movi	r2,19
    e7e4:	11800b2e 	bgeu	r2,r6,e814 <_calloc_r+0x80>
    e7e8:	80000015 	stw	zero,0(r16)
    e7ec:	80000115 	stw	zero,4(r16)
    e7f0:	008006c4 	movi	r2,27
    e7f4:	11801a2e 	bgeu	r2,r6,e860 <_calloc_r+0xcc>
    e7f8:	80000215 	stw	zero,8(r16)
    e7fc:	80000315 	stw	zero,12(r16)
    e800:	30c0151e 	bne	r6,r3,e858 <_calloc_r+0xc4>
    e804:	80000415 	stw	zero,16(r16)
    e808:	80800604 	addi	r2,r16,24
    e80c:	80000515 	stw	zero,20(r16)
    e810:	00000106 	br	e818 <_calloc_r+0x84>
    e814:	8005883a 	mov	r2,r16
    e818:	10000015 	stw	zero,0(r2)
    e81c:	10000115 	stw	zero,4(r2)
    e820:	10000215 	stw	zero,8(r2)
    e824:	8005883a 	mov	r2,r16
    e828:	dfc00117 	ldw	ra,4(sp)
    e82c:	dc000017 	ldw	r16,0(sp)
    e830:	dec00204 	addi	sp,sp,8
    e834:	f800283a 	ret
    e838:	000b883a 	mov	r5,zero
    e83c:	8009883a 	mov	r4,r16
    e840:	00060f40 	call	60f4 <memset>
    e844:	8005883a 	mov	r2,r16
    e848:	dfc00117 	ldw	ra,4(sp)
    e84c:	dc000017 	ldw	r16,0(sp)
    e850:	dec00204 	addi	sp,sp,8
    e854:	f800283a 	ret
    e858:	80800404 	addi	r2,r16,16
    e85c:	003fee06 	br	e818 <__alt_data_end+0xfffddad8>
    e860:	80800204 	addi	r2,r16,8
    e864:	003fec06 	br	e818 <__alt_data_end+0xfffddad8>
    e868:	0005883a 	mov	r2,zero
    e86c:	003fee06 	br	e828 <__alt_data_end+0xfffddae8>

0000e870 <_fclose_r>:
    e870:	28003926 	beq	r5,zero,e958 <_fclose_r+0xe8>
    e874:	defffc04 	addi	sp,sp,-16
    e878:	dc400115 	stw	r17,4(sp)
    e87c:	dc000015 	stw	r16,0(sp)
    e880:	dfc00315 	stw	ra,12(sp)
    e884:	dc800215 	stw	r18,8(sp)
    e888:	2023883a 	mov	r17,r4
    e88c:	2821883a 	mov	r16,r5
    e890:	20000226 	beq	r4,zero,e89c <_fclose_r+0x2c>
    e894:	20800e17 	ldw	r2,56(r4)
    e898:	10002726 	beq	r2,zero,e938 <_fclose_r+0xc8>
    e89c:	8080030f 	ldh	r2,12(r16)
    e8a0:	1000071e 	bne	r2,zero,e8c0 <_fclose_r+0x50>
    e8a4:	0005883a 	mov	r2,zero
    e8a8:	dfc00317 	ldw	ra,12(sp)
    e8ac:	dc800217 	ldw	r18,8(sp)
    e8b0:	dc400117 	ldw	r17,4(sp)
    e8b4:	dc000017 	ldw	r16,0(sp)
    e8b8:	dec00404 	addi	sp,sp,16
    e8bc:	f800283a 	ret
    e8c0:	800b883a 	mov	r5,r16
    e8c4:	8809883a 	mov	r4,r17
    e8c8:	000a2000 	call	a200 <__sflush_r>
    e8cc:	1025883a 	mov	r18,r2
    e8d0:	80800b17 	ldw	r2,44(r16)
    e8d4:	10000426 	beq	r2,zero,e8e8 <_fclose_r+0x78>
    e8d8:	81400717 	ldw	r5,28(r16)
    e8dc:	8809883a 	mov	r4,r17
    e8e0:	103ee83a 	callr	r2
    e8e4:	10001616 	blt	r2,zero,e940 <_fclose_r+0xd0>
    e8e8:	8080030b 	ldhu	r2,12(r16)
    e8ec:	1080200c 	andi	r2,r2,128
    e8f0:	1000151e 	bne	r2,zero,e948 <_fclose_r+0xd8>
    e8f4:	81400c17 	ldw	r5,48(r16)
    e8f8:	28000526 	beq	r5,zero,e910 <_fclose_r+0xa0>
    e8fc:	80801004 	addi	r2,r16,64
    e900:	28800226 	beq	r5,r2,e90c <_fclose_r+0x9c>
    e904:	8809883a 	mov	r4,r17
    e908:	000a97c0 	call	a97c <_free_r>
    e90c:	80000c15 	stw	zero,48(r16)
    e910:	81401117 	ldw	r5,68(r16)
    e914:	28000326 	beq	r5,zero,e924 <_fclose_r+0xb4>
    e918:	8809883a 	mov	r4,r17
    e91c:	000a97c0 	call	a97c <_free_r>
    e920:	80001115 	stw	zero,68(r16)
    e924:	000a8180 	call	a818 <__sfp_lock_acquire>
    e928:	8000030d 	sth	zero,12(r16)
    e92c:	000a81c0 	call	a81c <__sfp_lock_release>
    e930:	9005883a 	mov	r2,r18
    e934:	003fdc06 	br	e8a8 <__alt_data_end+0xfffddb68>
    e938:	000a8080 	call	a808 <__sinit>
    e93c:	003fd706 	br	e89c <__alt_data_end+0xfffddb5c>
    e940:	04bfffc4 	movi	r18,-1
    e944:	003fe806 	br	e8e8 <__alt_data_end+0xfffddba8>
    e948:	81400417 	ldw	r5,16(r16)
    e94c:	8809883a 	mov	r4,r17
    e950:	000a97c0 	call	a97c <_free_r>
    e954:	003fe706 	br	e8f4 <__alt_data_end+0xfffddbb4>
    e958:	0005883a 	mov	r2,zero
    e95c:	f800283a 	ret

0000e960 <fclose>:
    e960:	008000b4 	movhi	r2,2
    e964:	10be1e04 	addi	r2,r2,-1928
    e968:	200b883a 	mov	r5,r4
    e96c:	11000017 	ldw	r4,0(r2)
    e970:	000e8701 	jmpi	e870 <_fclose_r>

0000e974 <__fputwc>:
    e974:	defff804 	addi	sp,sp,-32
    e978:	dcc00415 	stw	r19,16(sp)
    e97c:	dc800315 	stw	r18,12(sp)
    e980:	dc000115 	stw	r16,4(sp)
    e984:	dfc00715 	stw	ra,28(sp)
    e988:	dd400615 	stw	r21,24(sp)
    e98c:	dd000515 	stw	r20,20(sp)
    e990:	dc400215 	stw	r17,8(sp)
    e994:	2027883a 	mov	r19,r4
    e998:	2825883a 	mov	r18,r5
    e99c:	3021883a 	mov	r16,r6
    e9a0:	000b3640 	call	b364 <__locale_mb_cur_max>
    e9a4:	00c00044 	movi	r3,1
    e9a8:	10c03e26 	beq	r2,r3,eaa4 <__fputwc+0x130>
    e9ac:	81c01704 	addi	r7,r16,92
    e9b0:	900d883a 	mov	r6,r18
    e9b4:	d80b883a 	mov	r5,sp
    e9b8:	9809883a 	mov	r4,r19
    e9bc:	000ee440 	call	ee44 <_wcrtomb_r>
    e9c0:	1029883a 	mov	r20,r2
    e9c4:	00bfffc4 	movi	r2,-1
    e9c8:	a0802026 	beq	r20,r2,ea4c <__fputwc+0xd8>
    e9cc:	d9400003 	ldbu	r5,0(sp)
    e9d0:	a0001c26 	beq	r20,zero,ea44 <__fputwc+0xd0>
    e9d4:	0023883a 	mov	r17,zero
    e9d8:	05400284 	movi	r21,10
    e9dc:	00000906 	br	ea04 <__fputwc+0x90>
    e9e0:	80800017 	ldw	r2,0(r16)
    e9e4:	11400005 	stb	r5,0(r2)
    e9e8:	80c00017 	ldw	r3,0(r16)
    e9ec:	18c00044 	addi	r3,r3,1
    e9f0:	80c00015 	stw	r3,0(r16)
    e9f4:	8c400044 	addi	r17,r17,1
    e9f8:	dc45883a 	add	r2,sp,r17
    e9fc:	8d00112e 	bgeu	r17,r20,ea44 <__fputwc+0xd0>
    ea00:	11400003 	ldbu	r5,0(r2)
    ea04:	80c00217 	ldw	r3,8(r16)
    ea08:	18ffffc4 	addi	r3,r3,-1
    ea0c:	80c00215 	stw	r3,8(r16)
    ea10:	183ff30e 	bge	r3,zero,e9e0 <__alt_data_end+0xfffddca0>
    ea14:	80800617 	ldw	r2,24(r16)
    ea18:	18801916 	blt	r3,r2,ea80 <__fputwc+0x10c>
    ea1c:	80800017 	ldw	r2,0(r16)
    ea20:	11400005 	stb	r5,0(r2)
    ea24:	80800017 	ldw	r2,0(r16)
    ea28:	10c00003 	ldbu	r3,0(r2)
    ea2c:	10800044 	addi	r2,r2,1
    ea30:	1d402326 	beq	r3,r21,eac0 <__fputwc+0x14c>
    ea34:	80800015 	stw	r2,0(r16)
    ea38:	8c400044 	addi	r17,r17,1
    ea3c:	dc45883a 	add	r2,sp,r17
    ea40:	8d3fef36 	bltu	r17,r20,ea00 <__alt_data_end+0xfffddcc0>
    ea44:	9005883a 	mov	r2,r18
    ea48:	00000406 	br	ea5c <__fputwc+0xe8>
    ea4c:	80c0030b 	ldhu	r3,12(r16)
    ea50:	a005883a 	mov	r2,r20
    ea54:	18c01014 	ori	r3,r3,64
    ea58:	80c0030d 	sth	r3,12(r16)
    ea5c:	dfc00717 	ldw	ra,28(sp)
    ea60:	dd400617 	ldw	r21,24(sp)
    ea64:	dd000517 	ldw	r20,20(sp)
    ea68:	dcc00417 	ldw	r19,16(sp)
    ea6c:	dc800317 	ldw	r18,12(sp)
    ea70:	dc400217 	ldw	r17,8(sp)
    ea74:	dc000117 	ldw	r16,4(sp)
    ea78:	dec00804 	addi	sp,sp,32
    ea7c:	f800283a 	ret
    ea80:	800d883a 	mov	r6,r16
    ea84:	29403fcc 	andi	r5,r5,255
    ea88:	9809883a 	mov	r4,r19
    ea8c:	000ecec0 	call	ecec <__swbuf_r>
    ea90:	10bfffe0 	cmpeqi	r2,r2,-1
    ea94:	10803fcc 	andi	r2,r2,255
    ea98:	103fd626 	beq	r2,zero,e9f4 <__alt_data_end+0xfffddcb4>
    ea9c:	00bfffc4 	movi	r2,-1
    eaa0:	003fee06 	br	ea5c <__alt_data_end+0xfffddd1c>
    eaa4:	90ffffc4 	addi	r3,r18,-1
    eaa8:	01003f84 	movi	r4,254
    eaac:	20ffbf36 	bltu	r4,r3,e9ac <__alt_data_end+0xfffddc6c>
    eab0:	900b883a 	mov	r5,r18
    eab4:	dc800005 	stb	r18,0(sp)
    eab8:	1029883a 	mov	r20,r2
    eabc:	003fc506 	br	e9d4 <__alt_data_end+0xfffddc94>
    eac0:	800d883a 	mov	r6,r16
    eac4:	a80b883a 	mov	r5,r21
    eac8:	9809883a 	mov	r4,r19
    eacc:	000ecec0 	call	ecec <__swbuf_r>
    ead0:	10bfffe0 	cmpeqi	r2,r2,-1
    ead4:	003fef06 	br	ea94 <__alt_data_end+0xfffddd54>

0000ead8 <_fputwc_r>:
    ead8:	3080030b 	ldhu	r2,12(r6)
    eadc:	10c8000c 	andi	r3,r2,8192
    eae0:	1800051e 	bne	r3,zero,eaf8 <_fputwc_r+0x20>
    eae4:	30c01917 	ldw	r3,100(r6)
    eae8:	10880014 	ori	r2,r2,8192
    eaec:	3080030d 	sth	r2,12(r6)
    eaf0:	18880014 	ori	r2,r3,8192
    eaf4:	30801915 	stw	r2,100(r6)
    eaf8:	000e9741 	jmpi	e974 <__fputwc>

0000eafc <fputwc>:
    eafc:	008000b4 	movhi	r2,2
    eb00:	defffc04 	addi	sp,sp,-16
    eb04:	10be1e04 	addi	r2,r2,-1928
    eb08:	dc000115 	stw	r16,4(sp)
    eb0c:	14000017 	ldw	r16,0(r2)
    eb10:	dc400215 	stw	r17,8(sp)
    eb14:	dfc00315 	stw	ra,12(sp)
    eb18:	2023883a 	mov	r17,r4
    eb1c:	80000226 	beq	r16,zero,eb28 <fputwc+0x2c>
    eb20:	80800e17 	ldw	r2,56(r16)
    eb24:	10001026 	beq	r2,zero,eb68 <fputwc+0x6c>
    eb28:	2880030b 	ldhu	r2,12(r5)
    eb2c:	10c8000c 	andi	r3,r2,8192
    eb30:	1800051e 	bne	r3,zero,eb48 <fputwc+0x4c>
    eb34:	28c01917 	ldw	r3,100(r5)
    eb38:	10880014 	ori	r2,r2,8192
    eb3c:	2880030d 	sth	r2,12(r5)
    eb40:	18880014 	ori	r2,r3,8192
    eb44:	28801915 	stw	r2,100(r5)
    eb48:	280d883a 	mov	r6,r5
    eb4c:	8009883a 	mov	r4,r16
    eb50:	880b883a 	mov	r5,r17
    eb54:	dfc00317 	ldw	ra,12(sp)
    eb58:	dc400217 	ldw	r17,8(sp)
    eb5c:	dc000117 	ldw	r16,4(sp)
    eb60:	dec00404 	addi	sp,sp,16
    eb64:	000e9741 	jmpi	e974 <__fputwc>
    eb68:	8009883a 	mov	r4,r16
    eb6c:	d9400015 	stw	r5,0(sp)
    eb70:	000a8080 	call	a808 <__sinit>
    eb74:	d9400017 	ldw	r5,0(sp)
    eb78:	003feb06 	br	eb28 <__alt_data_end+0xfffddde8>

0000eb7c <_fstat_r>:
    eb7c:	defffd04 	addi	sp,sp,-12
    eb80:	2805883a 	mov	r2,r5
    eb84:	dc000015 	stw	r16,0(sp)
    eb88:	040000b4 	movhi	r16,2
    eb8c:	dc400115 	stw	r17,4(sp)
    eb90:	84054704 	addi	r16,r16,5404
    eb94:	2023883a 	mov	r17,r4
    eb98:	300b883a 	mov	r5,r6
    eb9c:	1009883a 	mov	r4,r2
    eba0:	dfc00215 	stw	ra,8(sp)
    eba4:	80000015 	stw	zero,0(r16)
    eba8:	000fe380 	call	fe38 <fstat>
    ebac:	00ffffc4 	movi	r3,-1
    ebb0:	10c00526 	beq	r2,r3,ebc8 <_fstat_r+0x4c>
    ebb4:	dfc00217 	ldw	ra,8(sp)
    ebb8:	dc400117 	ldw	r17,4(sp)
    ebbc:	dc000017 	ldw	r16,0(sp)
    ebc0:	dec00304 	addi	sp,sp,12
    ebc4:	f800283a 	ret
    ebc8:	80c00017 	ldw	r3,0(r16)
    ebcc:	183ff926 	beq	r3,zero,ebb4 <__alt_data_end+0xfffdde74>
    ebd0:	88c00015 	stw	r3,0(r17)
    ebd4:	003ff706 	br	ebb4 <__alt_data_end+0xfffdde74>

0000ebd8 <_isatty_r>:
    ebd8:	defffd04 	addi	sp,sp,-12
    ebdc:	dc000015 	stw	r16,0(sp)
    ebe0:	040000b4 	movhi	r16,2
    ebe4:	dc400115 	stw	r17,4(sp)
    ebe8:	84054704 	addi	r16,r16,5404
    ebec:	2023883a 	mov	r17,r4
    ebf0:	2809883a 	mov	r4,r5
    ebf4:	dfc00215 	stw	ra,8(sp)
    ebf8:	80000015 	stw	zero,0(r16)
    ebfc:	000ff2c0 	call	ff2c <isatty>
    ec00:	00ffffc4 	movi	r3,-1
    ec04:	10c00526 	beq	r2,r3,ec1c <_isatty_r+0x44>
    ec08:	dfc00217 	ldw	ra,8(sp)
    ec0c:	dc400117 	ldw	r17,4(sp)
    ec10:	dc000017 	ldw	r16,0(sp)
    ec14:	dec00304 	addi	sp,sp,12
    ec18:	f800283a 	ret
    ec1c:	80c00017 	ldw	r3,0(r16)
    ec20:	183ff926 	beq	r3,zero,ec08 <__alt_data_end+0xfffddec8>
    ec24:	88c00015 	stw	r3,0(r17)
    ec28:	003ff706 	br	ec08 <__alt_data_end+0xfffddec8>

0000ec2c <_lseek_r>:
    ec2c:	defffd04 	addi	sp,sp,-12
    ec30:	2805883a 	mov	r2,r5
    ec34:	dc000015 	stw	r16,0(sp)
    ec38:	040000b4 	movhi	r16,2
    ec3c:	dc400115 	stw	r17,4(sp)
    ec40:	300b883a 	mov	r5,r6
    ec44:	84054704 	addi	r16,r16,5404
    ec48:	2023883a 	mov	r17,r4
    ec4c:	380d883a 	mov	r6,r7
    ec50:	1009883a 	mov	r4,r2
    ec54:	dfc00215 	stw	ra,8(sp)
    ec58:	80000015 	stw	zero,0(r16)
    ec5c:	00101000 	call	10100 <lseek>
    ec60:	00ffffc4 	movi	r3,-1
    ec64:	10c00526 	beq	r2,r3,ec7c <_lseek_r+0x50>
    ec68:	dfc00217 	ldw	ra,8(sp)
    ec6c:	dc400117 	ldw	r17,4(sp)
    ec70:	dc000017 	ldw	r16,0(sp)
    ec74:	dec00304 	addi	sp,sp,12
    ec78:	f800283a 	ret
    ec7c:	80c00017 	ldw	r3,0(r16)
    ec80:	183ff926 	beq	r3,zero,ec68 <__alt_data_end+0xfffddf28>
    ec84:	88c00015 	stw	r3,0(r17)
    ec88:	003ff706 	br	ec68 <__alt_data_end+0xfffddf28>

0000ec8c <_read_r>:
    ec8c:	defffd04 	addi	sp,sp,-12
    ec90:	2805883a 	mov	r2,r5
    ec94:	dc000015 	stw	r16,0(sp)
    ec98:	040000b4 	movhi	r16,2
    ec9c:	dc400115 	stw	r17,4(sp)
    eca0:	300b883a 	mov	r5,r6
    eca4:	84054704 	addi	r16,r16,5404
    eca8:	2023883a 	mov	r17,r4
    ecac:	380d883a 	mov	r6,r7
    ecb0:	1009883a 	mov	r4,r2
    ecb4:	dfc00215 	stw	ra,8(sp)
    ecb8:	80000015 	stw	zero,0(r16)
    ecbc:	001053c0 	call	1053c <read>
    ecc0:	00ffffc4 	movi	r3,-1
    ecc4:	10c00526 	beq	r2,r3,ecdc <_read_r+0x50>
    ecc8:	dfc00217 	ldw	ra,8(sp)
    eccc:	dc400117 	ldw	r17,4(sp)
    ecd0:	dc000017 	ldw	r16,0(sp)
    ecd4:	dec00304 	addi	sp,sp,12
    ecd8:	f800283a 	ret
    ecdc:	80c00017 	ldw	r3,0(r16)
    ece0:	183ff926 	beq	r3,zero,ecc8 <__alt_data_end+0xfffddf88>
    ece4:	88c00015 	stw	r3,0(r17)
    ece8:	003ff706 	br	ecc8 <__alt_data_end+0xfffddf88>

0000ecec <__swbuf_r>:
    ecec:	defffb04 	addi	sp,sp,-20
    ecf0:	dcc00315 	stw	r19,12(sp)
    ecf4:	dc800215 	stw	r18,8(sp)
    ecf8:	dc000015 	stw	r16,0(sp)
    ecfc:	dfc00415 	stw	ra,16(sp)
    ed00:	dc400115 	stw	r17,4(sp)
    ed04:	2025883a 	mov	r18,r4
    ed08:	2827883a 	mov	r19,r5
    ed0c:	3021883a 	mov	r16,r6
    ed10:	20000226 	beq	r4,zero,ed1c <__swbuf_r+0x30>
    ed14:	20800e17 	ldw	r2,56(r4)
    ed18:	10004226 	beq	r2,zero,ee24 <__swbuf_r+0x138>
    ed1c:	80800617 	ldw	r2,24(r16)
    ed20:	8100030b 	ldhu	r4,12(r16)
    ed24:	80800215 	stw	r2,8(r16)
    ed28:	2080020c 	andi	r2,r4,8
    ed2c:	10003626 	beq	r2,zero,ee08 <__swbuf_r+0x11c>
    ed30:	80c00417 	ldw	r3,16(r16)
    ed34:	18003426 	beq	r3,zero,ee08 <__swbuf_r+0x11c>
    ed38:	2088000c 	andi	r2,r4,8192
    ed3c:	9c403fcc 	andi	r17,r19,255
    ed40:	10001a26 	beq	r2,zero,edac <__swbuf_r+0xc0>
    ed44:	80800017 	ldw	r2,0(r16)
    ed48:	81000517 	ldw	r4,20(r16)
    ed4c:	10c7c83a 	sub	r3,r2,r3
    ed50:	1900200e 	bge	r3,r4,edd4 <__swbuf_r+0xe8>
    ed54:	18c00044 	addi	r3,r3,1
    ed58:	81000217 	ldw	r4,8(r16)
    ed5c:	11400044 	addi	r5,r2,1
    ed60:	81400015 	stw	r5,0(r16)
    ed64:	213fffc4 	addi	r4,r4,-1
    ed68:	81000215 	stw	r4,8(r16)
    ed6c:	14c00005 	stb	r19,0(r2)
    ed70:	80800517 	ldw	r2,20(r16)
    ed74:	10c01e26 	beq	r2,r3,edf0 <__swbuf_r+0x104>
    ed78:	8080030b 	ldhu	r2,12(r16)
    ed7c:	1080004c 	andi	r2,r2,1
    ed80:	10000226 	beq	r2,zero,ed8c <__swbuf_r+0xa0>
    ed84:	00800284 	movi	r2,10
    ed88:	88801926 	beq	r17,r2,edf0 <__swbuf_r+0x104>
    ed8c:	8805883a 	mov	r2,r17
    ed90:	dfc00417 	ldw	ra,16(sp)
    ed94:	dcc00317 	ldw	r19,12(sp)
    ed98:	dc800217 	ldw	r18,8(sp)
    ed9c:	dc400117 	ldw	r17,4(sp)
    eda0:	dc000017 	ldw	r16,0(sp)
    eda4:	dec00504 	addi	sp,sp,20
    eda8:	f800283a 	ret
    edac:	81401917 	ldw	r5,100(r16)
    edb0:	00b7ffc4 	movi	r2,-8193
    edb4:	21080014 	ori	r4,r4,8192
    edb8:	2884703a 	and	r2,r5,r2
    edbc:	80801915 	stw	r2,100(r16)
    edc0:	80800017 	ldw	r2,0(r16)
    edc4:	8100030d 	sth	r4,12(r16)
    edc8:	81000517 	ldw	r4,20(r16)
    edcc:	10c7c83a 	sub	r3,r2,r3
    edd0:	193fe016 	blt	r3,r4,ed54 <__alt_data_end+0xfffde014>
    edd4:	800b883a 	mov	r5,r16
    edd8:	9009883a 	mov	r4,r18
    eddc:	000a41c0 	call	a41c <_fflush_r>
    ede0:	1000071e 	bne	r2,zero,ee00 <__swbuf_r+0x114>
    ede4:	80800017 	ldw	r2,0(r16)
    ede8:	00c00044 	movi	r3,1
    edec:	003fda06 	br	ed58 <__alt_data_end+0xfffde018>
    edf0:	800b883a 	mov	r5,r16
    edf4:	9009883a 	mov	r4,r18
    edf8:	000a41c0 	call	a41c <_fflush_r>
    edfc:	103fe326 	beq	r2,zero,ed8c <__alt_data_end+0xfffde04c>
    ee00:	00bfffc4 	movi	r2,-1
    ee04:	003fe206 	br	ed90 <__alt_data_end+0xfffde050>
    ee08:	800b883a 	mov	r5,r16
    ee0c:	9009883a 	mov	r4,r18
    ee10:	00087fc0 	call	87fc <__swsetup_r>
    ee14:	103ffa1e 	bne	r2,zero,ee00 <__alt_data_end+0xfffde0c0>
    ee18:	8100030b 	ldhu	r4,12(r16)
    ee1c:	80c00417 	ldw	r3,16(r16)
    ee20:	003fc506 	br	ed38 <__alt_data_end+0xfffddff8>
    ee24:	000a8080 	call	a808 <__sinit>
    ee28:	003fbc06 	br	ed1c <__alt_data_end+0xfffddfdc>

0000ee2c <__swbuf>:
    ee2c:	008000b4 	movhi	r2,2
    ee30:	10be1e04 	addi	r2,r2,-1928
    ee34:	280d883a 	mov	r6,r5
    ee38:	200b883a 	mov	r5,r4
    ee3c:	11000017 	ldw	r4,0(r2)
    ee40:	000ecec1 	jmpi	ecec <__swbuf_r>

0000ee44 <_wcrtomb_r>:
    ee44:	defff604 	addi	sp,sp,-40
    ee48:	008000b4 	movhi	r2,2
    ee4c:	dc800815 	stw	r18,32(sp)
    ee50:	dc400715 	stw	r17,28(sp)
    ee54:	dc000615 	stw	r16,24(sp)
    ee58:	10be2204 	addi	r2,r2,-1912
    ee5c:	dfc00915 	stw	ra,36(sp)
    ee60:	2021883a 	mov	r16,r4
    ee64:	3823883a 	mov	r17,r7
    ee68:	14800017 	ldw	r18,0(r2)
    ee6c:	28001426 	beq	r5,zero,eec0 <_wcrtomb_r+0x7c>
    ee70:	d9400415 	stw	r5,16(sp)
    ee74:	d9800515 	stw	r6,20(sp)
    ee78:	000b3580 	call	b358 <__locale_charset>
    ee7c:	d9800517 	ldw	r6,20(sp)
    ee80:	d9400417 	ldw	r5,16(sp)
    ee84:	100f883a 	mov	r7,r2
    ee88:	dc400015 	stw	r17,0(sp)
    ee8c:	8009883a 	mov	r4,r16
    ee90:	903ee83a 	callr	r18
    ee94:	00ffffc4 	movi	r3,-1
    ee98:	10c0031e 	bne	r2,r3,eea8 <_wcrtomb_r+0x64>
    ee9c:	88000015 	stw	zero,0(r17)
    eea0:	00c02284 	movi	r3,138
    eea4:	80c00015 	stw	r3,0(r16)
    eea8:	dfc00917 	ldw	ra,36(sp)
    eeac:	dc800817 	ldw	r18,32(sp)
    eeb0:	dc400717 	ldw	r17,28(sp)
    eeb4:	dc000617 	ldw	r16,24(sp)
    eeb8:	dec00a04 	addi	sp,sp,40
    eebc:	f800283a 	ret
    eec0:	000b3580 	call	b358 <__locale_charset>
    eec4:	100f883a 	mov	r7,r2
    eec8:	dc400015 	stw	r17,0(sp)
    eecc:	000d883a 	mov	r6,zero
    eed0:	d9400104 	addi	r5,sp,4
    eed4:	8009883a 	mov	r4,r16
    eed8:	903ee83a 	callr	r18
    eedc:	003fed06 	br	ee94 <__alt_data_end+0xfffde154>

0000eee0 <wcrtomb>:
    eee0:	defff604 	addi	sp,sp,-40
    eee4:	008000b4 	movhi	r2,2
    eee8:	dc800615 	stw	r18,24(sp)
    eeec:	dc400515 	stw	r17,20(sp)
    eef0:	10be1e04 	addi	r2,r2,-1928
    eef4:	dfc00915 	stw	ra,36(sp)
    eef8:	dd000815 	stw	r20,32(sp)
    eefc:	dcc00715 	stw	r19,28(sp)
    ef00:	dc000415 	stw	r16,16(sp)
    ef04:	3025883a 	mov	r18,r6
    ef08:	14400017 	ldw	r17,0(r2)
    ef0c:	20001926 	beq	r4,zero,ef74 <wcrtomb+0x94>
    ef10:	008000b4 	movhi	r2,2
    ef14:	10be2204 	addi	r2,r2,-1912
    ef18:	15000017 	ldw	r20,0(r2)
    ef1c:	2021883a 	mov	r16,r4
    ef20:	2827883a 	mov	r19,r5
    ef24:	000b3580 	call	b358 <__locale_charset>
    ef28:	100f883a 	mov	r7,r2
    ef2c:	dc800015 	stw	r18,0(sp)
    ef30:	980d883a 	mov	r6,r19
    ef34:	800b883a 	mov	r5,r16
    ef38:	8809883a 	mov	r4,r17
    ef3c:	a03ee83a 	callr	r20
    ef40:	00ffffc4 	movi	r3,-1
    ef44:	10c0031e 	bne	r2,r3,ef54 <wcrtomb+0x74>
    ef48:	90000015 	stw	zero,0(r18)
    ef4c:	00c02284 	movi	r3,138
    ef50:	88c00015 	stw	r3,0(r17)
    ef54:	dfc00917 	ldw	ra,36(sp)
    ef58:	dd000817 	ldw	r20,32(sp)
    ef5c:	dcc00717 	ldw	r19,28(sp)
    ef60:	dc800617 	ldw	r18,24(sp)
    ef64:	dc400517 	ldw	r17,20(sp)
    ef68:	dc000417 	ldw	r16,16(sp)
    ef6c:	dec00a04 	addi	sp,sp,40
    ef70:	f800283a 	ret
    ef74:	008000b4 	movhi	r2,2
    ef78:	10be2204 	addi	r2,r2,-1912
    ef7c:	14000017 	ldw	r16,0(r2)
    ef80:	000b3580 	call	b358 <__locale_charset>
    ef84:	100f883a 	mov	r7,r2
    ef88:	dc800015 	stw	r18,0(sp)
    ef8c:	000d883a 	mov	r6,zero
    ef90:	d9400104 	addi	r5,sp,4
    ef94:	8809883a 	mov	r4,r17
    ef98:	803ee83a 	callr	r16
    ef9c:	003fe806 	br	ef40 <__alt_data_end+0xfffde200>

0000efa0 <__ascii_wctomb>:
    efa0:	28000526 	beq	r5,zero,efb8 <__ascii_wctomb+0x18>
    efa4:	00803fc4 	movi	r2,255
    efa8:	11800536 	bltu	r2,r6,efc0 <__ascii_wctomb+0x20>
    efac:	29800005 	stb	r6,0(r5)
    efb0:	00800044 	movi	r2,1
    efb4:	f800283a 	ret
    efb8:	0005883a 	mov	r2,zero
    efbc:	f800283a 	ret
    efc0:	00802284 	movi	r2,138
    efc4:	20800015 	stw	r2,0(r4)
    efc8:	00bfffc4 	movi	r2,-1
    efcc:	f800283a 	ret

0000efd0 <_wctomb_r>:
    efd0:	008000b4 	movhi	r2,2
    efd4:	defff904 	addi	sp,sp,-28
    efd8:	10be2204 	addi	r2,r2,-1912
    efdc:	dfc00615 	stw	ra,24(sp)
    efe0:	dc400515 	stw	r17,20(sp)
    efe4:	dc000415 	stw	r16,16(sp)
    efe8:	3823883a 	mov	r17,r7
    efec:	14000017 	ldw	r16,0(r2)
    eff0:	d9000115 	stw	r4,4(sp)
    eff4:	d9400215 	stw	r5,8(sp)
    eff8:	d9800315 	stw	r6,12(sp)
    effc:	000b3580 	call	b358 <__locale_charset>
    f000:	d9800317 	ldw	r6,12(sp)
    f004:	d9400217 	ldw	r5,8(sp)
    f008:	d9000117 	ldw	r4,4(sp)
    f00c:	100f883a 	mov	r7,r2
    f010:	dc400015 	stw	r17,0(sp)
    f014:	803ee83a 	callr	r16
    f018:	dfc00617 	ldw	ra,24(sp)
    f01c:	dc400517 	ldw	r17,20(sp)
    f020:	dc000417 	ldw	r16,16(sp)
    f024:	dec00704 	addi	sp,sp,28
    f028:	f800283a 	ret

0000f02c <__udivdi3>:
    f02c:	defff404 	addi	sp,sp,-48
    f030:	dcc00515 	stw	r19,20(sp)
    f034:	dc000215 	stw	r16,8(sp)
    f038:	dfc00b15 	stw	ra,44(sp)
    f03c:	df000a15 	stw	fp,40(sp)
    f040:	ddc00915 	stw	r23,36(sp)
    f044:	dd800815 	stw	r22,32(sp)
    f048:	dd400715 	stw	r21,28(sp)
    f04c:	dd000615 	stw	r20,24(sp)
    f050:	dc800415 	stw	r18,16(sp)
    f054:	dc400315 	stw	r17,12(sp)
    f058:	2027883a 	mov	r19,r4
    f05c:	2821883a 	mov	r16,r5
    f060:	3800461e 	bne	r7,zero,f17c <__udivdi3+0x150>
    f064:	3023883a 	mov	r17,r6
    f068:	2025883a 	mov	r18,r4
    f06c:	2980572e 	bgeu	r5,r6,f1cc <__udivdi3+0x1a0>
    f070:	00bfffd4 	movui	r2,65535
    f074:	282d883a 	mov	r22,r5
    f078:	1180b236 	bltu	r2,r6,f344 <__udivdi3+0x318>
    f07c:	00803fc4 	movi	r2,255
    f080:	1185803a 	cmpltu	r2,r2,r6
    f084:	100490fa 	slli	r2,r2,3
    f088:	3086d83a 	srl	r3,r6,r2
    f08c:	010000b4 	movhi	r4,2
    f090:	21364404 	addi	r4,r4,-9968
    f094:	20c7883a 	add	r3,r4,r3
    f098:	18c00003 	ldbu	r3,0(r3)
    f09c:	1885883a 	add	r2,r3,r2
    f0a0:	00c00804 	movi	r3,32
    f0a4:	1887c83a 	sub	r3,r3,r2
    f0a8:	18000526 	beq	r3,zero,f0c0 <__udivdi3+0x94>
    f0ac:	80e0983a 	sll	r16,r16,r3
    f0b0:	9884d83a 	srl	r2,r19,r2
    f0b4:	30e2983a 	sll	r17,r6,r3
    f0b8:	98e4983a 	sll	r18,r19,r3
    f0bc:	142cb03a 	or	r22,r2,r16
    f0c0:	882ad43a 	srli	r21,r17,16
    f0c4:	b009883a 	mov	r4,r22
    f0c8:	8d3fffcc 	andi	r20,r17,65535
    f0cc:	a80b883a 	mov	r5,r21
    f0d0:	0002eec0 	call	2eec <__umodsi3>
    f0d4:	b009883a 	mov	r4,r22
    f0d8:	a80b883a 	mov	r5,r21
    f0dc:	1027883a 	mov	r19,r2
    f0e0:	0002e880 	call	2e88 <__udivsi3>
    f0e4:	100b883a 	mov	r5,r2
    f0e8:	a009883a 	mov	r4,r20
    f0ec:	102d883a 	mov	r22,r2
    f0f0:	0002f440 	call	2f44 <__mulsi3>
    f0f4:	9826943a 	slli	r19,r19,16
    f0f8:	9006d43a 	srli	r3,r18,16
    f0fc:	1cc6b03a 	or	r3,r3,r19
    f100:	1880052e 	bgeu	r3,r2,f118 <__udivdi3+0xec>
    f104:	1c47883a 	add	r3,r3,r17
    f108:	b13fffc4 	addi	r4,r22,-1
    f10c:	1c400136 	bltu	r3,r17,f114 <__udivdi3+0xe8>
    f110:	18814236 	bltu	r3,r2,f61c <__udivdi3+0x5f0>
    f114:	202d883a 	mov	r22,r4
    f118:	18a1c83a 	sub	r16,r3,r2
    f11c:	8009883a 	mov	r4,r16
    f120:	a80b883a 	mov	r5,r21
    f124:	0002eec0 	call	2eec <__umodsi3>
    f128:	1027883a 	mov	r19,r2
    f12c:	8009883a 	mov	r4,r16
    f130:	a80b883a 	mov	r5,r21
    f134:	9826943a 	slli	r19,r19,16
    f138:	0002e880 	call	2e88 <__udivsi3>
    f13c:	100b883a 	mov	r5,r2
    f140:	a009883a 	mov	r4,r20
    f144:	94bfffcc 	andi	r18,r18,65535
    f148:	1021883a 	mov	r16,r2
    f14c:	94e4b03a 	or	r18,r18,r19
    f150:	0002f440 	call	2f44 <__mulsi3>
    f154:	9080052e 	bgeu	r18,r2,f16c <__udivdi3+0x140>
    f158:	8ca5883a 	add	r18,r17,r18
    f15c:	80ffffc4 	addi	r3,r16,-1
    f160:	94410c36 	bltu	r18,r17,f594 <__udivdi3+0x568>
    f164:	90810b2e 	bgeu	r18,r2,f594 <__udivdi3+0x568>
    f168:	843fff84 	addi	r16,r16,-2
    f16c:	b004943a 	slli	r2,r22,16
    f170:	0007883a 	mov	r3,zero
    f174:	1404b03a 	or	r2,r2,r16
    f178:	00005e06 	br	f2f4 <__udivdi3+0x2c8>
    f17c:	29c05b36 	bltu	r5,r7,f2ec <__udivdi3+0x2c0>
    f180:	00bfffd4 	movui	r2,65535
    f184:	11c0672e 	bgeu	r2,r7,f324 <__udivdi3+0x2f8>
    f188:	00804034 	movhi	r2,256
    f18c:	10bfffc4 	addi	r2,r2,-1
    f190:	11c10a36 	bltu	r2,r7,f5bc <__udivdi3+0x590>
    f194:	00800404 	movi	r2,16
    f198:	3886d83a 	srl	r3,r7,r2
    f19c:	010000b4 	movhi	r4,2
    f1a0:	21364404 	addi	r4,r4,-9968
    f1a4:	20c7883a 	add	r3,r4,r3
    f1a8:	18c00003 	ldbu	r3,0(r3)
    f1ac:	05c00804 	movi	r23,32
    f1b0:	1885883a 	add	r2,r3,r2
    f1b4:	b8afc83a 	sub	r23,r23,r2
    f1b8:	b800671e 	bne	r23,zero,f358 <__udivdi3+0x32c>
    f1bc:	3c010536 	bltu	r7,r16,f5d4 <__udivdi3+0x5a8>
    f1c0:	9985403a 	cmpgeu	r2,r19,r6
    f1c4:	0007883a 	mov	r3,zero
    f1c8:	00004a06 	br	f2f4 <__udivdi3+0x2c8>
    f1cc:	3000041e 	bne	r6,zero,f1e0 <__udivdi3+0x1b4>
    f1d0:	000b883a 	mov	r5,zero
    f1d4:	01000044 	movi	r4,1
    f1d8:	0002e880 	call	2e88 <__udivsi3>
    f1dc:	1023883a 	mov	r17,r2
    f1e0:	00bfffd4 	movui	r2,65535
    f1e4:	1440532e 	bgeu	r2,r17,f334 <__udivdi3+0x308>
    f1e8:	00804034 	movhi	r2,256
    f1ec:	10bfffc4 	addi	r2,r2,-1
    f1f0:	1440f436 	bltu	r2,r17,f5c4 <__udivdi3+0x598>
    f1f4:	00800404 	movi	r2,16
    f1f8:	8886d83a 	srl	r3,r17,r2
    f1fc:	010000b4 	movhi	r4,2
    f200:	21364404 	addi	r4,r4,-9968
    f204:	20c7883a 	add	r3,r4,r3
    f208:	18c00003 	ldbu	r3,0(r3)
    f20c:	1885883a 	add	r2,r3,r2
    f210:	00c00804 	movi	r3,32
    f214:	1887c83a 	sub	r3,r3,r2
    f218:	1800a51e 	bne	r3,zero,f4b0 <__udivdi3+0x484>
    f21c:	882ad43a 	srli	r21,r17,16
    f220:	8461c83a 	sub	r16,r16,r17
    f224:	8d3fffcc 	andi	r20,r17,65535
    f228:	00c00044 	movi	r3,1
    f22c:	a80b883a 	mov	r5,r21
    f230:	8009883a 	mov	r4,r16
    f234:	d8c00115 	stw	r3,4(sp)
    f238:	0002eec0 	call	2eec <__umodsi3>
    f23c:	a80b883a 	mov	r5,r21
    f240:	8009883a 	mov	r4,r16
    f244:	1027883a 	mov	r19,r2
    f248:	0002e880 	call	2e88 <__udivsi3>
    f24c:	a00b883a 	mov	r5,r20
    f250:	1009883a 	mov	r4,r2
    f254:	102d883a 	mov	r22,r2
    f258:	0002f440 	call	2f44 <__mulsi3>
    f25c:	9826943a 	slli	r19,r19,16
    f260:	900ed43a 	srli	r7,r18,16
    f264:	d8c00117 	ldw	r3,4(sp)
    f268:	3cceb03a 	or	r7,r7,r19
    f26c:	3880052e 	bgeu	r7,r2,f284 <__udivdi3+0x258>
    f270:	3c4f883a 	add	r7,r7,r17
    f274:	b13fffc4 	addi	r4,r22,-1
    f278:	3c400136 	bltu	r7,r17,f280 <__udivdi3+0x254>
    f27c:	3880e436 	bltu	r7,r2,f610 <__udivdi3+0x5e4>
    f280:	202d883a 	mov	r22,r4
    f284:	38a1c83a 	sub	r16,r7,r2
    f288:	8009883a 	mov	r4,r16
    f28c:	a80b883a 	mov	r5,r21
    f290:	d8c00115 	stw	r3,4(sp)
    f294:	0002eec0 	call	2eec <__umodsi3>
    f298:	1027883a 	mov	r19,r2
    f29c:	8009883a 	mov	r4,r16
    f2a0:	a80b883a 	mov	r5,r21
    f2a4:	9826943a 	slli	r19,r19,16
    f2a8:	0002e880 	call	2e88 <__udivsi3>
    f2ac:	a00b883a 	mov	r5,r20
    f2b0:	1009883a 	mov	r4,r2
    f2b4:	94bfffcc 	andi	r18,r18,65535
    f2b8:	1021883a 	mov	r16,r2
    f2bc:	94e4b03a 	or	r18,r18,r19
    f2c0:	0002f440 	call	2f44 <__mulsi3>
    f2c4:	d8c00117 	ldw	r3,4(sp)
    f2c8:	9080052e 	bgeu	r18,r2,f2e0 <__udivdi3+0x2b4>
    f2cc:	8ca5883a 	add	r18,r17,r18
    f2d0:	813fffc4 	addi	r4,r16,-1
    f2d4:	9440ad36 	bltu	r18,r17,f58c <__udivdi3+0x560>
    f2d8:	9080ac2e 	bgeu	r18,r2,f58c <__udivdi3+0x560>
    f2dc:	843fff84 	addi	r16,r16,-2
    f2e0:	b004943a 	slli	r2,r22,16
    f2e4:	1404b03a 	or	r2,r2,r16
    f2e8:	00000206 	br	f2f4 <__udivdi3+0x2c8>
    f2ec:	0007883a 	mov	r3,zero
    f2f0:	0005883a 	mov	r2,zero
    f2f4:	dfc00b17 	ldw	ra,44(sp)
    f2f8:	df000a17 	ldw	fp,40(sp)
    f2fc:	ddc00917 	ldw	r23,36(sp)
    f300:	dd800817 	ldw	r22,32(sp)
    f304:	dd400717 	ldw	r21,28(sp)
    f308:	dd000617 	ldw	r20,24(sp)
    f30c:	dcc00517 	ldw	r19,20(sp)
    f310:	dc800417 	ldw	r18,16(sp)
    f314:	dc400317 	ldw	r17,12(sp)
    f318:	dc000217 	ldw	r16,8(sp)
    f31c:	dec00c04 	addi	sp,sp,48
    f320:	f800283a 	ret
    f324:	00803fc4 	movi	r2,255
    f328:	11c5803a 	cmpltu	r2,r2,r7
    f32c:	100490fa 	slli	r2,r2,3
    f330:	003f9906 	br	f198 <__alt_data_end+0xfffde458>
    f334:	00803fc4 	movi	r2,255
    f338:	1445803a 	cmpltu	r2,r2,r17
    f33c:	100490fa 	slli	r2,r2,3
    f340:	003fad06 	br	f1f8 <__alt_data_end+0xfffde4b8>
    f344:	00804034 	movhi	r2,256
    f348:	10bfffc4 	addi	r2,r2,-1
    f34c:	11809f36 	bltu	r2,r6,f5cc <__udivdi3+0x5a0>
    f350:	00800404 	movi	r2,16
    f354:	003f4c06 	br	f088 <__alt_data_end+0xfffde348>
    f358:	3dce983a 	sll	r7,r7,r23
    f35c:	30b8d83a 	srl	fp,r6,r2
    f360:	80a2d83a 	srl	r17,r16,r2
    f364:	35cc983a 	sll	r6,r6,r23
    f368:	3f38b03a 	or	fp,r7,fp
    f36c:	e024d43a 	srli	r18,fp,16
    f370:	9884d83a 	srl	r2,r19,r2
    f374:	85e0983a 	sll	r16,r16,r23
    f378:	8809883a 	mov	r4,r17
    f37c:	900b883a 	mov	r5,r18
    f380:	d9800015 	stw	r6,0(sp)
    f384:	1420b03a 	or	r16,r2,r16
    f388:	0002eec0 	call	2eec <__umodsi3>
    f38c:	900b883a 	mov	r5,r18
    f390:	8809883a 	mov	r4,r17
    f394:	1029883a 	mov	r20,r2
    f398:	e5bfffcc 	andi	r22,fp,65535
    f39c:	0002e880 	call	2e88 <__udivsi3>
    f3a0:	100b883a 	mov	r5,r2
    f3a4:	b009883a 	mov	r4,r22
    f3a8:	102b883a 	mov	r21,r2
    f3ac:	0002f440 	call	2f44 <__mulsi3>
    f3b0:	a028943a 	slli	r20,r20,16
    f3b4:	8006d43a 	srli	r3,r16,16
    f3b8:	1d06b03a 	or	r3,r3,r20
    f3bc:	1880042e 	bgeu	r3,r2,f3d0 <__udivdi3+0x3a4>
    f3c0:	1f07883a 	add	r3,r3,fp
    f3c4:	a93fffc4 	addi	r4,r21,-1
    f3c8:	1f00892e 	bgeu	r3,fp,f5f0 <__udivdi3+0x5c4>
    f3cc:	202b883a 	mov	r21,r4
    f3d0:	18a3c83a 	sub	r17,r3,r2
    f3d4:	8809883a 	mov	r4,r17
    f3d8:	900b883a 	mov	r5,r18
    f3dc:	0002eec0 	call	2eec <__umodsi3>
    f3e0:	1029883a 	mov	r20,r2
    f3e4:	8809883a 	mov	r4,r17
    f3e8:	900b883a 	mov	r5,r18
    f3ec:	a028943a 	slli	r20,r20,16
    f3f0:	0002e880 	call	2e88 <__udivsi3>
    f3f4:	100b883a 	mov	r5,r2
    f3f8:	b009883a 	mov	r4,r22
    f3fc:	843fffcc 	andi	r16,r16,65535
    f400:	1023883a 	mov	r17,r2
    f404:	8520b03a 	or	r16,r16,r20
    f408:	0002f440 	call	2f44 <__mulsi3>
    f40c:	8080042e 	bgeu	r16,r2,f420 <__udivdi3+0x3f4>
    f410:	8721883a 	add	r16,r16,fp
    f414:	88ffffc4 	addi	r3,r17,-1
    f418:	8700712e 	bgeu	r16,fp,f5e0 <__udivdi3+0x5b4>
    f41c:	1823883a 	mov	r17,r3
    f420:	a80e943a 	slli	r7,r21,16
    f424:	d8c00017 	ldw	r3,0(sp)
    f428:	80a1c83a 	sub	r16,r16,r2
    f42c:	3c64b03a 	or	r18,r7,r17
    f430:	1d3fffcc 	andi	r20,r3,65535
    f434:	9022d43a 	srli	r17,r18,16
    f438:	95bfffcc 	andi	r22,r18,65535
    f43c:	a00b883a 	mov	r5,r20
    f440:	b009883a 	mov	r4,r22
    f444:	182ad43a 	srli	r21,r3,16
    f448:	0002f440 	call	2f44 <__mulsi3>
    f44c:	a00b883a 	mov	r5,r20
    f450:	8809883a 	mov	r4,r17
    f454:	1039883a 	mov	fp,r2
    f458:	0002f440 	call	2f44 <__mulsi3>
    f45c:	8809883a 	mov	r4,r17
    f460:	a80b883a 	mov	r5,r21
    f464:	1029883a 	mov	r20,r2
    f468:	0002f440 	call	2f44 <__mulsi3>
    f46c:	a80b883a 	mov	r5,r21
    f470:	b009883a 	mov	r4,r22
    f474:	1023883a 	mov	r17,r2
    f478:	0002f440 	call	2f44 <__mulsi3>
    f47c:	e006d43a 	srli	r3,fp,16
    f480:	1505883a 	add	r2,r2,r20
    f484:	1887883a 	add	r3,r3,r2
    f488:	1d00022e 	bgeu	r3,r20,f494 <__udivdi3+0x468>
    f48c:	00800074 	movhi	r2,1
    f490:	88a3883a 	add	r17,r17,r2
    f494:	1804d43a 	srli	r2,r3,16
    f498:	1463883a 	add	r17,r2,r17
    f49c:	84404436 	bltu	r16,r17,f5b0 <__udivdi3+0x584>
    f4a0:	84403e26 	beq	r16,r17,f59c <__udivdi3+0x570>
    f4a4:	9005883a 	mov	r2,r18
    f4a8:	0007883a 	mov	r3,zero
    f4ac:	003f9106 	br	f2f4 <__alt_data_end+0xfffde5b4>
    f4b0:	88e2983a 	sll	r17,r17,r3
    f4b4:	80aed83a 	srl	r23,r16,r2
    f4b8:	80e0983a 	sll	r16,r16,r3
    f4bc:	882ad43a 	srli	r21,r17,16
    f4c0:	9884d83a 	srl	r2,r19,r2
    f4c4:	b809883a 	mov	r4,r23
    f4c8:	a80b883a 	mov	r5,r21
    f4cc:	98e4983a 	sll	r18,r19,r3
    f4d0:	142cb03a 	or	r22,r2,r16
    f4d4:	0002eec0 	call	2eec <__umodsi3>
    f4d8:	b809883a 	mov	r4,r23
    f4dc:	a80b883a 	mov	r5,r21
    f4e0:	1027883a 	mov	r19,r2
    f4e4:	8d3fffcc 	andi	r20,r17,65535
    f4e8:	0002e880 	call	2e88 <__udivsi3>
    f4ec:	a009883a 	mov	r4,r20
    f4f0:	100b883a 	mov	r5,r2
    f4f4:	102f883a 	mov	r23,r2
    f4f8:	0002f440 	call	2f44 <__mulsi3>
    f4fc:	9826943a 	slli	r19,r19,16
    f500:	b008d43a 	srli	r4,r22,16
    f504:	24c8b03a 	or	r4,r4,r19
    f508:	2080062e 	bgeu	r4,r2,f524 <__udivdi3+0x4f8>
    f50c:	2449883a 	add	r4,r4,r17
    f510:	b8ffffc4 	addi	r3,r23,-1
    f514:	24403c36 	bltu	r4,r17,f608 <__udivdi3+0x5dc>
    f518:	20803b2e 	bgeu	r4,r2,f608 <__udivdi3+0x5dc>
    f51c:	bdffff84 	addi	r23,r23,-2
    f520:	2449883a 	add	r4,r4,r17
    f524:	20a1c83a 	sub	r16,r4,r2
    f528:	a80b883a 	mov	r5,r21
    f52c:	8009883a 	mov	r4,r16
    f530:	0002eec0 	call	2eec <__umodsi3>
    f534:	a80b883a 	mov	r5,r21
    f538:	8009883a 	mov	r4,r16
    f53c:	1027883a 	mov	r19,r2
    f540:	0002e880 	call	2e88 <__udivsi3>
    f544:	a009883a 	mov	r4,r20
    f548:	100b883a 	mov	r5,r2
    f54c:	9826943a 	slli	r19,r19,16
    f550:	1039883a 	mov	fp,r2
    f554:	0002f440 	call	2f44 <__mulsi3>
    f558:	b13fffcc 	andi	r4,r22,65535
    f55c:	24c8b03a 	or	r4,r4,r19
    f560:	2080062e 	bgeu	r4,r2,f57c <__udivdi3+0x550>
    f564:	2449883a 	add	r4,r4,r17
    f568:	e0ffffc4 	addi	r3,fp,-1
    f56c:	24402436 	bltu	r4,r17,f600 <__udivdi3+0x5d4>
    f570:	2080232e 	bgeu	r4,r2,f600 <__udivdi3+0x5d4>
    f574:	e73fff84 	addi	fp,fp,-2
    f578:	2449883a 	add	r4,r4,r17
    f57c:	b82e943a 	slli	r23,r23,16
    f580:	20a1c83a 	sub	r16,r4,r2
    f584:	bf06b03a 	or	r3,r23,fp
    f588:	003f2806 	br	f22c <__alt_data_end+0xfffde4ec>
    f58c:	2021883a 	mov	r16,r4
    f590:	003f5306 	br	f2e0 <__alt_data_end+0xfffde5a0>
    f594:	1821883a 	mov	r16,r3
    f598:	003ef406 	br	f16c <__alt_data_end+0xfffde42c>
    f59c:	1806943a 	slli	r3,r3,16
    f5a0:	9de6983a 	sll	r19,r19,r23
    f5a4:	e73fffcc 	andi	fp,fp,65535
    f5a8:	1f07883a 	add	r3,r3,fp
    f5ac:	98ffbd2e 	bgeu	r19,r3,f4a4 <__alt_data_end+0xfffde764>
    f5b0:	90bfffc4 	addi	r2,r18,-1
    f5b4:	0007883a 	mov	r3,zero
    f5b8:	003f4e06 	br	f2f4 <__alt_data_end+0xfffde5b4>
    f5bc:	00800604 	movi	r2,24
    f5c0:	003ef506 	br	f198 <__alt_data_end+0xfffde458>
    f5c4:	00800604 	movi	r2,24
    f5c8:	003f0b06 	br	f1f8 <__alt_data_end+0xfffde4b8>
    f5cc:	00800604 	movi	r2,24
    f5d0:	003ead06 	br	f088 <__alt_data_end+0xfffde348>
    f5d4:	0007883a 	mov	r3,zero
    f5d8:	00800044 	movi	r2,1
    f5dc:	003f4506 	br	f2f4 <__alt_data_end+0xfffde5b4>
    f5e0:	80bf8e2e 	bgeu	r16,r2,f41c <__alt_data_end+0xfffde6dc>
    f5e4:	8c7fff84 	addi	r17,r17,-2
    f5e8:	8721883a 	add	r16,r16,fp
    f5ec:	003f8c06 	br	f420 <__alt_data_end+0xfffde6e0>
    f5f0:	18bf762e 	bgeu	r3,r2,f3cc <__alt_data_end+0xfffde68c>
    f5f4:	ad7fff84 	addi	r21,r21,-2
    f5f8:	1f07883a 	add	r3,r3,fp
    f5fc:	003f7406 	br	f3d0 <__alt_data_end+0xfffde690>
    f600:	1839883a 	mov	fp,r3
    f604:	003fdd06 	br	f57c <__alt_data_end+0xfffde83c>
    f608:	182f883a 	mov	r23,r3
    f60c:	003fc506 	br	f524 <__alt_data_end+0xfffde7e4>
    f610:	b5bfff84 	addi	r22,r22,-2
    f614:	3c4f883a 	add	r7,r7,r17
    f618:	003f1a06 	br	f284 <__alt_data_end+0xfffde544>
    f61c:	b5bfff84 	addi	r22,r22,-2
    f620:	1c47883a 	add	r3,r3,r17
    f624:	003ebc06 	br	f118 <__alt_data_end+0xfffde3d8>

0000f628 <__umoddi3>:
    f628:	defff304 	addi	sp,sp,-52
    f62c:	df000b15 	stw	fp,44(sp)
    f630:	dc400415 	stw	r17,16(sp)
    f634:	dc000315 	stw	r16,12(sp)
    f638:	dfc00c15 	stw	ra,48(sp)
    f63c:	ddc00a15 	stw	r23,40(sp)
    f640:	dd800915 	stw	r22,36(sp)
    f644:	dd400815 	stw	r21,32(sp)
    f648:	dd000715 	stw	r20,28(sp)
    f64c:	dcc00615 	stw	r19,24(sp)
    f650:	dc800515 	stw	r18,20(sp)
    f654:	2021883a 	mov	r16,r4
    f658:	2823883a 	mov	r17,r5
    f65c:	2839883a 	mov	fp,r5
    f660:	3800401e 	bne	r7,zero,f764 <__umoddi3+0x13c>
    f664:	3027883a 	mov	r19,r6
    f668:	2029883a 	mov	r20,r4
    f66c:	2980552e 	bgeu	r5,r6,f7c4 <__umoddi3+0x19c>
    f670:	00bfffd4 	movui	r2,65535
    f674:	1180a236 	bltu	r2,r6,f900 <__umoddi3+0x2d8>
    f678:	01003fc4 	movi	r4,255
    f67c:	2189803a 	cmpltu	r4,r4,r6
    f680:	200890fa 	slli	r4,r4,3
    f684:	3104d83a 	srl	r2,r6,r4
    f688:	00c000b4 	movhi	r3,2
    f68c:	18f64404 	addi	r3,r3,-9968
    f690:	1885883a 	add	r2,r3,r2
    f694:	10c00003 	ldbu	r3,0(r2)
    f698:	00800804 	movi	r2,32
    f69c:	1909883a 	add	r4,r3,r4
    f6a0:	1125c83a 	sub	r18,r2,r4
    f6a4:	90000526 	beq	r18,zero,f6bc <__umoddi3+0x94>
    f6a8:	8ca2983a 	sll	r17,r17,r18
    f6ac:	8108d83a 	srl	r4,r16,r4
    f6b0:	34a6983a 	sll	r19,r6,r18
    f6b4:	84a8983a 	sll	r20,r16,r18
    f6b8:	2478b03a 	or	fp,r4,r17
    f6bc:	982cd43a 	srli	r22,r19,16
    f6c0:	e009883a 	mov	r4,fp
    f6c4:	9dffffcc 	andi	r23,r19,65535
    f6c8:	b00b883a 	mov	r5,r22
    f6cc:	0002eec0 	call	2eec <__umodsi3>
    f6d0:	b00b883a 	mov	r5,r22
    f6d4:	e009883a 	mov	r4,fp
    f6d8:	102b883a 	mov	r21,r2
    f6dc:	0002e880 	call	2e88 <__udivsi3>
    f6e0:	100b883a 	mov	r5,r2
    f6e4:	b809883a 	mov	r4,r23
    f6e8:	0002f440 	call	2f44 <__mulsi3>
    f6ec:	a82a943a 	slli	r21,r21,16
    f6f0:	a006d43a 	srli	r3,r20,16
    f6f4:	1d46b03a 	or	r3,r3,r21
    f6f8:	1880032e 	bgeu	r3,r2,f708 <__umoddi3+0xe0>
    f6fc:	1cc7883a 	add	r3,r3,r19
    f700:	1cc00136 	bltu	r3,r19,f708 <__umoddi3+0xe0>
    f704:	18813136 	bltu	r3,r2,fbcc <__umoddi3+0x5a4>
    f708:	18a1c83a 	sub	r16,r3,r2
    f70c:	b00b883a 	mov	r5,r22
    f710:	8009883a 	mov	r4,r16
    f714:	0002eec0 	call	2eec <__umodsi3>
    f718:	b00b883a 	mov	r5,r22
    f71c:	8009883a 	mov	r4,r16
    f720:	1023883a 	mov	r17,r2
    f724:	0002e880 	call	2e88 <__udivsi3>
    f728:	100b883a 	mov	r5,r2
    f72c:	b809883a 	mov	r4,r23
    f730:	8822943a 	slli	r17,r17,16
    f734:	0002f440 	call	2f44 <__mulsi3>
    f738:	a0ffffcc 	andi	r3,r20,65535
    f73c:	1c46b03a 	or	r3,r3,r17
    f740:	1880042e 	bgeu	r3,r2,f754 <__umoddi3+0x12c>
    f744:	1cc7883a 	add	r3,r3,r19
    f748:	1cc00236 	bltu	r3,r19,f754 <__umoddi3+0x12c>
    f74c:	1880012e 	bgeu	r3,r2,f754 <__umoddi3+0x12c>
    f750:	1cc7883a 	add	r3,r3,r19
    f754:	1885c83a 	sub	r2,r3,r2
    f758:	1484d83a 	srl	r2,r2,r18
    f75c:	0007883a 	mov	r3,zero
    f760:	00005306 	br	f8b0 <__umoddi3+0x288>
    f764:	29c05036 	bltu	r5,r7,f8a8 <__umoddi3+0x280>
    f768:	00bfffd4 	movui	r2,65535
    f76c:	11c05c2e 	bgeu	r2,r7,f8e0 <__umoddi3+0x2b8>
    f770:	00804034 	movhi	r2,256
    f774:	10bfffc4 	addi	r2,r2,-1
    f778:	11c10636 	bltu	r2,r7,fb94 <__umoddi3+0x56c>
    f77c:	01000404 	movi	r4,16
    f780:	3904d83a 	srl	r2,r7,r4
    f784:	00c000b4 	movhi	r3,2
    f788:	18f64404 	addi	r3,r3,-9968
    f78c:	1885883a 	add	r2,r3,r2
    f790:	14c00003 	ldbu	r19,0(r2)
    f794:	00c00804 	movi	r3,32
    f798:	9927883a 	add	r19,r19,r4
    f79c:	1ce9c83a 	sub	r20,r3,r19
    f7a0:	a0005c1e 	bne	r20,zero,f914 <__umoddi3+0x2ec>
    f7a4:	3c400136 	bltu	r7,r17,f7ac <__umoddi3+0x184>
    f7a8:	81810a36 	bltu	r16,r6,fbd4 <__umoddi3+0x5ac>
    f7ac:	8185c83a 	sub	r2,r16,r6
    f7b0:	89e3c83a 	sub	r17,r17,r7
    f7b4:	8089803a 	cmpltu	r4,r16,r2
    f7b8:	8939c83a 	sub	fp,r17,r4
    f7bc:	e007883a 	mov	r3,fp
    f7c0:	00003b06 	br	f8b0 <__umoddi3+0x288>
    f7c4:	3000041e 	bne	r6,zero,f7d8 <__umoddi3+0x1b0>
    f7c8:	000b883a 	mov	r5,zero
    f7cc:	01000044 	movi	r4,1
    f7d0:	0002e880 	call	2e88 <__udivsi3>
    f7d4:	1027883a 	mov	r19,r2
    f7d8:	00bfffd4 	movui	r2,65535
    f7dc:	14c0442e 	bgeu	r2,r19,f8f0 <__umoddi3+0x2c8>
    f7e0:	00804034 	movhi	r2,256
    f7e4:	10bfffc4 	addi	r2,r2,-1
    f7e8:	14c0ec36 	bltu	r2,r19,fb9c <__umoddi3+0x574>
    f7ec:	00800404 	movi	r2,16
    f7f0:	9886d83a 	srl	r3,r19,r2
    f7f4:	010000b4 	movhi	r4,2
    f7f8:	21364404 	addi	r4,r4,-9968
    f7fc:	20c7883a 	add	r3,r4,r3
    f800:	18c00003 	ldbu	r3,0(r3)
    f804:	1887883a 	add	r3,r3,r2
    f808:	00800804 	movi	r2,32
    f80c:	10e5c83a 	sub	r18,r2,r3
    f810:	9000ab1e 	bne	r18,zero,fac0 <__umoddi3+0x498>
    f814:	982cd43a 	srli	r22,r19,16
    f818:	8ce3c83a 	sub	r17,r17,r19
    f81c:	9dffffcc 	andi	r23,r19,65535
    f820:	b00b883a 	mov	r5,r22
    f824:	8809883a 	mov	r4,r17
    f828:	0002eec0 	call	2eec <__umodsi3>
    f82c:	b00b883a 	mov	r5,r22
    f830:	8809883a 	mov	r4,r17
    f834:	102b883a 	mov	r21,r2
    f838:	0002e880 	call	2e88 <__udivsi3>
    f83c:	b80b883a 	mov	r5,r23
    f840:	1009883a 	mov	r4,r2
    f844:	0002f440 	call	2f44 <__mulsi3>
    f848:	a82a943a 	slli	r21,r21,16
    f84c:	a006d43a 	srli	r3,r20,16
    f850:	1d46b03a 	or	r3,r3,r21
    f854:	1880042e 	bgeu	r3,r2,f868 <__umoddi3+0x240>
    f858:	1cc7883a 	add	r3,r3,r19
    f85c:	1cc00236 	bltu	r3,r19,f868 <__umoddi3+0x240>
    f860:	1880012e 	bgeu	r3,r2,f868 <__umoddi3+0x240>
    f864:	1cc7883a 	add	r3,r3,r19
    f868:	18a1c83a 	sub	r16,r3,r2
    f86c:	b00b883a 	mov	r5,r22
    f870:	8009883a 	mov	r4,r16
    f874:	0002eec0 	call	2eec <__umodsi3>
    f878:	1023883a 	mov	r17,r2
    f87c:	b00b883a 	mov	r5,r22
    f880:	8009883a 	mov	r4,r16
    f884:	0002e880 	call	2e88 <__udivsi3>
    f888:	8822943a 	slli	r17,r17,16
    f88c:	b80b883a 	mov	r5,r23
    f890:	1009883a 	mov	r4,r2
    f894:	0002f440 	call	2f44 <__mulsi3>
    f898:	a53fffcc 	andi	r20,r20,65535
    f89c:	a446b03a 	or	r3,r20,r17
    f8a0:	18bfac2e 	bgeu	r3,r2,f754 <__alt_data_end+0xfffdea14>
    f8a4:	003fa706 	br	f744 <__alt_data_end+0xfffdea04>
    f8a8:	2005883a 	mov	r2,r4
    f8ac:	2807883a 	mov	r3,r5
    f8b0:	dfc00c17 	ldw	ra,48(sp)
    f8b4:	df000b17 	ldw	fp,44(sp)
    f8b8:	ddc00a17 	ldw	r23,40(sp)
    f8bc:	dd800917 	ldw	r22,36(sp)
    f8c0:	dd400817 	ldw	r21,32(sp)
    f8c4:	dd000717 	ldw	r20,28(sp)
    f8c8:	dcc00617 	ldw	r19,24(sp)
    f8cc:	dc800517 	ldw	r18,20(sp)
    f8d0:	dc400417 	ldw	r17,16(sp)
    f8d4:	dc000317 	ldw	r16,12(sp)
    f8d8:	dec00d04 	addi	sp,sp,52
    f8dc:	f800283a 	ret
    f8e0:	04c03fc4 	movi	r19,255
    f8e4:	99c9803a 	cmpltu	r4,r19,r7
    f8e8:	200890fa 	slli	r4,r4,3
    f8ec:	003fa406 	br	f780 <__alt_data_end+0xfffdea40>
    f8f0:	00803fc4 	movi	r2,255
    f8f4:	14c5803a 	cmpltu	r2,r2,r19
    f8f8:	100490fa 	slli	r2,r2,3
    f8fc:	003fbc06 	br	f7f0 <__alt_data_end+0xfffdeab0>
    f900:	00804034 	movhi	r2,256
    f904:	10bfffc4 	addi	r2,r2,-1
    f908:	1180a636 	bltu	r2,r6,fba4 <__umoddi3+0x57c>
    f90c:	01000404 	movi	r4,16
    f910:	003f5c06 	br	f684 <__alt_data_end+0xfffde944>
    f914:	3d0e983a 	sll	r7,r7,r20
    f918:	34ead83a 	srl	r21,r6,r19
    f91c:	8cc6d83a 	srl	r3,r17,r19
    f920:	8d10983a 	sll	r8,r17,r20
    f924:	3d6ab03a 	or	r21,r7,r21
    f928:	a82cd43a 	srli	r22,r21,16
    f92c:	84e2d83a 	srl	r17,r16,r19
    f930:	1809883a 	mov	r4,r3
    f934:	b00b883a 	mov	r5,r22
    f938:	8a22b03a 	or	r17,r17,r8
    f93c:	3524983a 	sll	r18,r6,r20
    f940:	dc400015 	stw	r17,0(sp)
    f944:	d8c00115 	stw	r3,4(sp)
    f948:	0002eec0 	call	2eec <__umodsi3>
    f94c:	d8c00117 	ldw	r3,4(sp)
    f950:	b00b883a 	mov	r5,r22
    f954:	1039883a 	mov	fp,r2
    f958:	1809883a 	mov	r4,r3
    f95c:	0002e880 	call	2e88 <__udivsi3>
    f960:	adffffcc 	andi	r23,r21,65535
    f964:	100b883a 	mov	r5,r2
    f968:	b809883a 	mov	r4,r23
    f96c:	1023883a 	mov	r17,r2
    f970:	0002f440 	call	2f44 <__mulsi3>
    f974:	d9400017 	ldw	r5,0(sp)
    f978:	e008943a 	slli	r4,fp,16
    f97c:	8520983a 	sll	r16,r16,r20
    f980:	2806d43a 	srli	r3,r5,16
    f984:	1906b03a 	or	r3,r3,r4
    f988:	1880042e 	bgeu	r3,r2,f99c <__umoddi3+0x374>
    f98c:	1d47883a 	add	r3,r3,r21
    f990:	893fffc4 	addi	r4,r17,-1
    f994:	1d40892e 	bgeu	r3,r21,fbbc <__umoddi3+0x594>
    f998:	2023883a 	mov	r17,r4
    f99c:	18b9c83a 	sub	fp,r3,r2
    f9a0:	b00b883a 	mov	r5,r22
    f9a4:	e009883a 	mov	r4,fp
    f9a8:	0002eec0 	call	2eec <__umodsi3>
    f9ac:	b00b883a 	mov	r5,r22
    f9b0:	e009883a 	mov	r4,fp
    f9b4:	d8800215 	stw	r2,8(sp)
    f9b8:	0002e880 	call	2e88 <__udivsi3>
    f9bc:	100b883a 	mov	r5,r2
    f9c0:	b809883a 	mov	r4,r23
    f9c4:	102d883a 	mov	r22,r2
    f9c8:	0002f440 	call	2f44 <__mulsi3>
    f9cc:	d9800217 	ldw	r6,8(sp)
    f9d0:	d8c00017 	ldw	r3,0(sp)
    f9d4:	300c943a 	slli	r6,r6,16
    f9d8:	1a3fffcc 	andi	r8,r3,65535
    f9dc:	4190b03a 	or	r8,r8,r6
    f9e0:	4080042e 	bgeu	r8,r2,f9f4 <__umoddi3+0x3cc>
    f9e4:	4551883a 	add	r8,r8,r21
    f9e8:	b0ffffc4 	addi	r3,r22,-1
    f9ec:	45406f2e 	bgeu	r8,r21,fbac <__umoddi3+0x584>
    f9f0:	182d883a 	mov	r22,r3
    f9f4:	880e943a 	slli	r7,r17,16
    f9f8:	9006d43a 	srli	r3,r18,16
    f9fc:	91bfffcc 	andi	r6,r18,65535
    fa00:	3dacb03a 	or	r22,r7,r22
    fa04:	b02ed43a 	srli	r23,r22,16
    fa08:	b5bfffcc 	andi	r22,r22,65535
    fa0c:	300b883a 	mov	r5,r6
    fa10:	b009883a 	mov	r4,r22
    fa14:	40a3c83a 	sub	r17,r8,r2
    fa18:	d8c00115 	stw	r3,4(sp)
    fa1c:	d9800215 	stw	r6,8(sp)
    fa20:	0002f440 	call	2f44 <__mulsi3>
    fa24:	d9800217 	ldw	r6,8(sp)
    fa28:	b809883a 	mov	r4,r23
    fa2c:	1039883a 	mov	fp,r2
    fa30:	300b883a 	mov	r5,r6
    fa34:	0002f440 	call	2f44 <__mulsi3>
    fa38:	d8c00117 	ldw	r3,4(sp)
    fa3c:	b809883a 	mov	r4,r23
    fa40:	d8800215 	stw	r2,8(sp)
    fa44:	180b883a 	mov	r5,r3
    fa48:	0002f440 	call	2f44 <__mulsi3>
    fa4c:	d8c00117 	ldw	r3,4(sp)
    fa50:	b009883a 	mov	r4,r22
    fa54:	102f883a 	mov	r23,r2
    fa58:	180b883a 	mov	r5,r3
    fa5c:	0002f440 	call	2f44 <__mulsi3>
    fa60:	d9800217 	ldw	r6,8(sp)
    fa64:	e006d43a 	srli	r3,fp,16
    fa68:	1185883a 	add	r2,r2,r6
    fa6c:	1885883a 	add	r2,r3,r2
    fa70:	1180022e 	bgeu	r2,r6,fa7c <__umoddi3+0x454>
    fa74:	00c00074 	movhi	r3,1
    fa78:	b8ef883a 	add	r23,r23,r3
    fa7c:	1006d43a 	srli	r3,r2,16
    fa80:	1004943a 	slli	r2,r2,16
    fa84:	e73fffcc 	andi	fp,fp,65535
    fa88:	1dc7883a 	add	r3,r3,r23
    fa8c:	1739883a 	add	fp,r2,fp
    fa90:	88c03a36 	bltu	r17,r3,fb7c <__umoddi3+0x554>
    fa94:	88c05126 	beq	r17,r3,fbdc <__umoddi3+0x5b4>
    fa98:	88c9c83a 	sub	r4,r17,r3
    fa9c:	e00f883a 	mov	r7,fp
    faa0:	81cfc83a 	sub	r7,r16,r7
    faa4:	81c7803a 	cmpltu	r3,r16,r7
    faa8:	20c7c83a 	sub	r3,r4,r3
    faac:	1cc4983a 	sll	r2,r3,r19
    fab0:	3d0ed83a 	srl	r7,r7,r20
    fab4:	1d06d83a 	srl	r3,r3,r20
    fab8:	11c4b03a 	or	r2,r2,r7
    fabc:	003f7c06 	br	f8b0 <__alt_data_end+0xfffdeb70>
    fac0:	9ca6983a 	sll	r19,r19,r18
    fac4:	88f8d83a 	srl	fp,r17,r3
    fac8:	80c4d83a 	srl	r2,r16,r3
    facc:	982cd43a 	srli	r22,r19,16
    fad0:	8ca2983a 	sll	r17,r17,r18
    fad4:	e009883a 	mov	r4,fp
    fad8:	b00b883a 	mov	r5,r22
    fadc:	146ab03a 	or	r21,r2,r17
    fae0:	0002eec0 	call	2eec <__umodsi3>
    fae4:	b00b883a 	mov	r5,r22
    fae8:	e009883a 	mov	r4,fp
    faec:	1029883a 	mov	r20,r2
    faf0:	9dffffcc 	andi	r23,r19,65535
    faf4:	0002e880 	call	2e88 <__udivsi3>
    faf8:	b809883a 	mov	r4,r23
    fafc:	100b883a 	mov	r5,r2
    fb00:	0002f440 	call	2f44 <__mulsi3>
    fb04:	a008943a 	slli	r4,r20,16
    fb08:	a806d43a 	srli	r3,r21,16
    fb0c:	84a8983a 	sll	r20,r16,r18
    fb10:	1906b03a 	or	r3,r3,r4
    fb14:	1880042e 	bgeu	r3,r2,fb28 <__umoddi3+0x500>
    fb18:	1cc7883a 	add	r3,r3,r19
    fb1c:	1cc00236 	bltu	r3,r19,fb28 <__umoddi3+0x500>
    fb20:	1880012e 	bgeu	r3,r2,fb28 <__umoddi3+0x500>
    fb24:	1cc7883a 	add	r3,r3,r19
    fb28:	18a3c83a 	sub	r17,r3,r2
    fb2c:	b00b883a 	mov	r5,r22
    fb30:	8809883a 	mov	r4,r17
    fb34:	0002eec0 	call	2eec <__umodsi3>
    fb38:	b00b883a 	mov	r5,r22
    fb3c:	8809883a 	mov	r4,r17
    fb40:	1021883a 	mov	r16,r2
    fb44:	0002e880 	call	2e88 <__udivsi3>
    fb48:	100b883a 	mov	r5,r2
    fb4c:	b809883a 	mov	r4,r23
    fb50:	8020943a 	slli	r16,r16,16
    fb54:	0002f440 	call	2f44 <__mulsi3>
    fb58:	a8ffffcc 	andi	r3,r21,65535
    fb5c:	1c06b03a 	or	r3,r3,r16
    fb60:	1880042e 	bgeu	r3,r2,fb74 <__umoddi3+0x54c>
    fb64:	1cc7883a 	add	r3,r3,r19
    fb68:	1cc00236 	bltu	r3,r19,fb74 <__umoddi3+0x54c>
    fb6c:	1880012e 	bgeu	r3,r2,fb74 <__umoddi3+0x54c>
    fb70:	1cc7883a 	add	r3,r3,r19
    fb74:	18a3c83a 	sub	r17,r3,r2
    fb78:	003f2906 	br	f820 <__alt_data_end+0xfffdeae0>
    fb7c:	e48fc83a 	sub	r7,fp,r18
    fb80:	1d49c83a 	sub	r4,r3,r21
    fb84:	e1f9803a 	cmpltu	fp,fp,r7
    fb88:	2739c83a 	sub	fp,r4,fp
    fb8c:	8f09c83a 	sub	r4,r17,fp
    fb90:	003fc306 	br	faa0 <__alt_data_end+0xfffded60>
    fb94:	01000604 	movi	r4,24
    fb98:	003ef906 	br	f780 <__alt_data_end+0xfffdea40>
    fb9c:	00800604 	movi	r2,24
    fba0:	003f1306 	br	f7f0 <__alt_data_end+0xfffdeab0>
    fba4:	01000604 	movi	r4,24
    fba8:	003eb606 	br	f684 <__alt_data_end+0xfffde944>
    fbac:	40bf902e 	bgeu	r8,r2,f9f0 <__alt_data_end+0xfffdecb0>
    fbb0:	b5bfff84 	addi	r22,r22,-2
    fbb4:	4551883a 	add	r8,r8,r21
    fbb8:	003f8e06 	br	f9f4 <__alt_data_end+0xfffdecb4>
    fbbc:	18bf762e 	bgeu	r3,r2,f998 <__alt_data_end+0xfffdec58>
    fbc0:	8c7fff84 	addi	r17,r17,-2
    fbc4:	1d47883a 	add	r3,r3,r21
    fbc8:	003f7406 	br	f99c <__alt_data_end+0xfffdec5c>
    fbcc:	1cc7883a 	add	r3,r3,r19
    fbd0:	003ecd06 	br	f708 <__alt_data_end+0xfffde9c8>
    fbd4:	8005883a 	mov	r2,r16
    fbd8:	003ef806 	br	f7bc <__alt_data_end+0xfffdea7c>
    fbdc:	873fe736 	bltu	r16,fp,fb7c <__alt_data_end+0xfffdee3c>
    fbe0:	e00f883a 	mov	r7,fp
    fbe4:	0009883a 	mov	r4,zero
    fbe8:	003fad06 	br	faa0 <__alt_data_end+0xfffded60>

0000fbec <__floatunsidf>:
    fbec:	defffe04 	addi	sp,sp,-8
    fbf0:	dc000015 	stw	r16,0(sp)
    fbf4:	dfc00115 	stw	ra,4(sp)
    fbf8:	2021883a 	mov	r16,r4
    fbfc:	20002226 	beq	r4,zero,fc88 <__floatunsidf+0x9c>
    fc00:	00057040 	call	5704 <__clzsi2>
    fc04:	01010784 	movi	r4,1054
    fc08:	2089c83a 	sub	r4,r4,r2
    fc0c:	01810cc4 	movi	r6,1075
    fc10:	310dc83a 	sub	r6,r6,r4
    fc14:	00c007c4 	movi	r3,31
    fc18:	1980120e 	bge	r3,r6,fc64 <__floatunsidf+0x78>
    fc1c:	00c104c4 	movi	r3,1043
    fc20:	1907c83a 	sub	r3,r3,r4
    fc24:	80ca983a 	sll	r5,r16,r3
    fc28:	00800434 	movhi	r2,16
    fc2c:	10bfffc4 	addi	r2,r2,-1
    fc30:	2101ffcc 	andi	r4,r4,2047
    fc34:	0021883a 	mov	r16,zero
    fc38:	288a703a 	and	r5,r5,r2
    fc3c:	2008953a 	slli	r4,r4,20
    fc40:	00c00434 	movhi	r3,16
    fc44:	18ffffc4 	addi	r3,r3,-1
    fc48:	28c6703a 	and	r3,r5,r3
    fc4c:	8005883a 	mov	r2,r16
    fc50:	1906b03a 	or	r3,r3,r4
    fc54:	dfc00117 	ldw	ra,4(sp)
    fc58:	dc000017 	ldw	r16,0(sp)
    fc5c:	dec00204 	addi	sp,sp,8
    fc60:	f800283a 	ret
    fc64:	00c002c4 	movi	r3,11
    fc68:	188bc83a 	sub	r5,r3,r2
    fc6c:	814ad83a 	srl	r5,r16,r5
    fc70:	00c00434 	movhi	r3,16
    fc74:	18ffffc4 	addi	r3,r3,-1
    fc78:	81a0983a 	sll	r16,r16,r6
    fc7c:	2101ffcc 	andi	r4,r4,2047
    fc80:	28ca703a 	and	r5,r5,r3
    fc84:	003fed06 	br	fc3c <__alt_data_end+0xfffdeefc>
    fc88:	0009883a 	mov	r4,zero
    fc8c:	000b883a 	mov	r5,zero
    fc90:	003fea06 	br	fc3c <__alt_data_end+0xfffdeefc>

0000fc94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc94:	defffe04 	addi	sp,sp,-8
    fc98:	dfc00115 	stw	ra,4(sp)
    fc9c:	df000015 	stw	fp,0(sp)
    fca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fca4:	d0a00c17 	ldw	r2,-32720(gp)
    fca8:	10000326 	beq	r2,zero,fcb8 <alt_get_errno+0x24>
    fcac:	d0a00c17 	ldw	r2,-32720(gp)
    fcb0:	103ee83a 	callr	r2
    fcb4:	00000106 	br	fcbc <alt_get_errno+0x28>
    fcb8:	d0a72b04 	addi	r2,gp,-25428
}
    fcbc:	e037883a 	mov	sp,fp
    fcc0:	dfc00117 	ldw	ra,4(sp)
    fcc4:	df000017 	ldw	fp,0(sp)
    fcc8:	dec00204 	addi	sp,sp,8
    fccc:	f800283a 	ret

0000fcd0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    fcd0:	defffb04 	addi	sp,sp,-20
    fcd4:	dfc00415 	stw	ra,16(sp)
    fcd8:	df000315 	stw	fp,12(sp)
    fcdc:	df000304 	addi	fp,sp,12
    fce0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    fce4:	e0bfff17 	ldw	r2,-4(fp)
    fce8:	10000816 	blt	r2,zero,fd0c <close+0x3c>
    fcec:	01400304 	movi	r5,12
    fcf0:	e13fff17 	ldw	r4,-4(fp)
    fcf4:	0002f440 	call	2f44 <__mulsi3>
    fcf8:	1007883a 	mov	r3,r2
    fcfc:	008000b4 	movhi	r2,2
    fd00:	10b98904 	addi	r2,r2,-6620
    fd04:	1885883a 	add	r2,r3,r2
    fd08:	00000106 	br	fd10 <close+0x40>
    fd0c:	0005883a 	mov	r2,zero
    fd10:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    fd14:	e0bffd17 	ldw	r2,-12(fp)
    fd18:	10001926 	beq	r2,zero,fd80 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    fd1c:	e0bffd17 	ldw	r2,-12(fp)
    fd20:	10800017 	ldw	r2,0(r2)
    fd24:	10800417 	ldw	r2,16(r2)
    fd28:	10000626 	beq	r2,zero,fd44 <close+0x74>
    fd2c:	e0bffd17 	ldw	r2,-12(fp)
    fd30:	10800017 	ldw	r2,0(r2)
    fd34:	10800417 	ldw	r2,16(r2)
    fd38:	e13ffd17 	ldw	r4,-12(fp)
    fd3c:	103ee83a 	callr	r2
    fd40:	00000106 	br	fd48 <close+0x78>
    fd44:	0005883a 	mov	r2,zero
    fd48:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    fd4c:	e13fff17 	ldw	r4,-4(fp)
    fd50:	00106400 	call	10640 <alt_release_fd>
    if (rval < 0)
    fd54:	e0bffe17 	ldw	r2,-8(fp)
    fd58:	1000070e 	bge	r2,zero,fd78 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    fd5c:	000fc940 	call	fc94 <alt_get_errno>
    fd60:	1007883a 	mov	r3,r2
    fd64:	e0bffe17 	ldw	r2,-8(fp)
    fd68:	0085c83a 	sub	r2,zero,r2
    fd6c:	18800015 	stw	r2,0(r3)
      return -1;
    fd70:	00bfffc4 	movi	r2,-1
    fd74:	00000706 	br	fd94 <close+0xc4>
    }
    return 0;
    fd78:	0005883a 	mov	r2,zero
    fd7c:	00000506 	br	fd94 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fd80:	000fc940 	call	fc94 <alt_get_errno>
    fd84:	1007883a 	mov	r3,r2
    fd88:	00801444 	movi	r2,81
    fd8c:	18800015 	stw	r2,0(r3)
    return -1;
    fd90:	00bfffc4 	movi	r2,-1
  }
}
    fd94:	e037883a 	mov	sp,fp
    fd98:	dfc00117 	ldw	ra,4(sp)
    fd9c:	df000017 	ldw	fp,0(sp)
    fda0:	dec00204 	addi	sp,sp,8
    fda4:	f800283a 	ret

0000fda8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
    fda8:	defffd04 	addi	sp,sp,-12
    fdac:	df000215 	stw	fp,8(sp)
    fdb0:	df000204 	addi	fp,sp,8
    fdb4:	e13ffe15 	stw	r4,-8(fp)
    fdb8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    fdbc:	0001883a 	nop
    fdc0:	e037883a 	mov	sp,fp
    fdc4:	df000017 	ldw	fp,0(sp)
    fdc8:	dec00104 	addi	sp,sp,4
    fdcc:	f800283a 	ret

0000fdd0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    fdd0:	defffc04 	addi	sp,sp,-16
    fdd4:	df000315 	stw	fp,12(sp)
    fdd8:	df000304 	addi	fp,sp,12
    fddc:	e13ffd15 	stw	r4,-12(fp)
    fde0:	e17ffe15 	stw	r5,-8(fp)
    fde4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    fde8:	e0bfff17 	ldw	r2,-4(fp)
}
    fdec:	e037883a 	mov	sp,fp
    fdf0:	df000017 	ldw	fp,0(sp)
    fdf4:	dec00104 	addi	sp,sp,4
    fdf8:	f800283a 	ret

0000fdfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fdfc:	defffe04 	addi	sp,sp,-8
    fe00:	dfc00115 	stw	ra,4(sp)
    fe04:	df000015 	stw	fp,0(sp)
    fe08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe0c:	d0a00c17 	ldw	r2,-32720(gp)
    fe10:	10000326 	beq	r2,zero,fe20 <alt_get_errno+0x24>
    fe14:	d0a00c17 	ldw	r2,-32720(gp)
    fe18:	103ee83a 	callr	r2
    fe1c:	00000106 	br	fe24 <alt_get_errno+0x28>
    fe20:	d0a72b04 	addi	r2,gp,-25428
}
    fe24:	e037883a 	mov	sp,fp
    fe28:	dfc00117 	ldw	ra,4(sp)
    fe2c:	df000017 	ldw	fp,0(sp)
    fe30:	dec00204 	addi	sp,sp,8
    fe34:	f800283a 	ret

0000fe38 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    fe38:	defffb04 	addi	sp,sp,-20
    fe3c:	dfc00415 	stw	ra,16(sp)
    fe40:	df000315 	stw	fp,12(sp)
    fe44:	df000304 	addi	fp,sp,12
    fe48:	e13ffe15 	stw	r4,-8(fp)
    fe4c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fe50:	e0bffe17 	ldw	r2,-8(fp)
    fe54:	10000816 	blt	r2,zero,fe78 <fstat+0x40>
    fe58:	01400304 	movi	r5,12
    fe5c:	e13ffe17 	ldw	r4,-8(fp)
    fe60:	0002f440 	call	2f44 <__mulsi3>
    fe64:	1007883a 	mov	r3,r2
    fe68:	008000b4 	movhi	r2,2
    fe6c:	10b98904 	addi	r2,r2,-6620
    fe70:	1885883a 	add	r2,r3,r2
    fe74:	00000106 	br	fe7c <fstat+0x44>
    fe78:	0005883a 	mov	r2,zero
    fe7c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    fe80:	e0bffd17 	ldw	r2,-12(fp)
    fe84:	10001026 	beq	r2,zero,fec8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    fe88:	e0bffd17 	ldw	r2,-12(fp)
    fe8c:	10800017 	ldw	r2,0(r2)
    fe90:	10800817 	ldw	r2,32(r2)
    fe94:	10000726 	beq	r2,zero,feb4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    fe98:	e0bffd17 	ldw	r2,-12(fp)
    fe9c:	10800017 	ldw	r2,0(r2)
    fea0:	10800817 	ldw	r2,32(r2)
    fea4:	e17fff17 	ldw	r5,-4(fp)
    fea8:	e13ffd17 	ldw	r4,-12(fp)
    feac:	103ee83a 	callr	r2
    feb0:	00000a06 	br	fedc <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    feb4:	e0bfff17 	ldw	r2,-4(fp)
    feb8:	00c80004 	movi	r3,8192
    febc:	10c00115 	stw	r3,4(r2)
      return 0;
    fec0:	0005883a 	mov	r2,zero
    fec4:	00000506 	br	fedc <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fec8:	000fdfc0 	call	fdfc <alt_get_errno>
    fecc:	1007883a 	mov	r3,r2
    fed0:	00801444 	movi	r2,81
    fed4:	18800015 	stw	r2,0(r3)
    return -1;
    fed8:	00bfffc4 	movi	r2,-1
  }
}
    fedc:	e037883a 	mov	sp,fp
    fee0:	dfc00117 	ldw	ra,4(sp)
    fee4:	df000017 	ldw	fp,0(sp)
    fee8:	dec00204 	addi	sp,sp,8
    feec:	f800283a 	ret

0000fef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fef0:	defffe04 	addi	sp,sp,-8
    fef4:	dfc00115 	stw	ra,4(sp)
    fef8:	df000015 	stw	fp,0(sp)
    fefc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ff00:	d0a00c17 	ldw	r2,-32720(gp)
    ff04:	10000326 	beq	r2,zero,ff14 <alt_get_errno+0x24>
    ff08:	d0a00c17 	ldw	r2,-32720(gp)
    ff0c:	103ee83a 	callr	r2
    ff10:	00000106 	br	ff18 <alt_get_errno+0x28>
    ff14:	d0a72b04 	addi	r2,gp,-25428
}
    ff18:	e037883a 	mov	sp,fp
    ff1c:	dfc00117 	ldw	ra,4(sp)
    ff20:	df000017 	ldw	fp,0(sp)
    ff24:	dec00204 	addi	sp,sp,8
    ff28:	f800283a 	ret

0000ff2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    ff2c:	deffed04 	addi	sp,sp,-76
    ff30:	dfc01215 	stw	ra,72(sp)
    ff34:	df001115 	stw	fp,68(sp)
    ff38:	df001104 	addi	fp,sp,68
    ff3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    ff40:	e0bfff17 	ldw	r2,-4(fp)
    ff44:	10000816 	blt	r2,zero,ff68 <isatty+0x3c>
    ff48:	01400304 	movi	r5,12
    ff4c:	e13fff17 	ldw	r4,-4(fp)
    ff50:	0002f440 	call	2f44 <__mulsi3>
    ff54:	1007883a 	mov	r3,r2
    ff58:	008000b4 	movhi	r2,2
    ff5c:	10b98904 	addi	r2,r2,-6620
    ff60:	1885883a 	add	r2,r3,r2
    ff64:	00000106 	br	ff6c <isatty+0x40>
    ff68:	0005883a 	mov	r2,zero
    ff6c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    ff70:	e0bfef17 	ldw	r2,-68(fp)
    ff74:	10000e26 	beq	r2,zero,ffb0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    ff78:	e0bfef17 	ldw	r2,-68(fp)
    ff7c:	10800017 	ldw	r2,0(r2)
    ff80:	10800817 	ldw	r2,32(r2)
    ff84:	1000021e 	bne	r2,zero,ff90 <isatty+0x64>
    {
      return 1;
    ff88:	00800044 	movi	r2,1
    ff8c:	00000d06 	br	ffc4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    ff90:	e0bff004 	addi	r2,fp,-64
    ff94:	100b883a 	mov	r5,r2
    ff98:	e13fff17 	ldw	r4,-4(fp)
    ff9c:	000fe380 	call	fe38 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    ffa0:	e0bff117 	ldw	r2,-60(fp)
    ffa4:	10880020 	cmpeqi	r2,r2,8192
    ffa8:	10803fcc 	andi	r2,r2,255
    ffac:	00000506 	br	ffc4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ffb0:	000fef00 	call	fef0 <alt_get_errno>
    ffb4:	1007883a 	mov	r3,r2
    ffb8:	00801444 	movi	r2,81
    ffbc:	18800015 	stw	r2,0(r3)
    return 0;
    ffc0:	0005883a 	mov	r2,zero
  }
}
    ffc4:	e037883a 	mov	sp,fp
    ffc8:	dfc00117 	ldw	ra,4(sp)
    ffcc:	df000017 	ldw	fp,0(sp)
    ffd0:	dec00204 	addi	sp,sp,8
    ffd4:	f800283a 	ret

0000ffd8 <alt_load_section>:
    ffd8:	defffc04 	addi	sp,sp,-16
    ffdc:	df000315 	stw	fp,12(sp)
    ffe0:	df000304 	addi	fp,sp,12
    ffe4:	e13ffd15 	stw	r4,-12(fp)
    ffe8:	e17ffe15 	stw	r5,-8(fp)
    ffec:	e1bfff15 	stw	r6,-4(fp)
    fff0:	e0fffe17 	ldw	r3,-8(fp)
    fff4:	e0bffd17 	ldw	r2,-12(fp)
    fff8:	18800c26 	beq	r3,r2,1002c <alt_load_section+0x54>
    fffc:	00000806 	br	10020 <alt_load_section+0x48>
   10000:	e0bffe17 	ldw	r2,-8(fp)
   10004:	10c00104 	addi	r3,r2,4
   10008:	e0fffe15 	stw	r3,-8(fp)
   1000c:	e0fffd17 	ldw	r3,-12(fp)
   10010:	19000104 	addi	r4,r3,4
   10014:	e13ffd15 	stw	r4,-12(fp)
   10018:	18c00017 	ldw	r3,0(r3)
   1001c:	10c00015 	stw	r3,0(r2)
   10020:	e0fffe17 	ldw	r3,-8(fp)
   10024:	e0bfff17 	ldw	r2,-4(fp)
   10028:	18bff51e 	bne	r3,r2,10000 <__alt_data_end+0xfffdf2c0>
   1002c:	0001883a 	nop
   10030:	e037883a 	mov	sp,fp
   10034:	df000017 	ldw	fp,0(sp)
   10038:	dec00104 	addi	sp,sp,4
   1003c:	f800283a 	ret

00010040 <alt_load>:
   10040:	defffe04 	addi	sp,sp,-8
   10044:	dfc00115 	stw	ra,4(sp)
   10048:	df000015 	stw	fp,0(sp)
   1004c:	d839883a 	mov	fp,sp
   10050:	018000b4 	movhi	r6,2
   10054:	31be4c04 	addi	r6,r6,-1744
   10058:	014000b4 	movhi	r5,2
   1005c:	29775604 	addi	r5,r5,-8872
   10060:	010000b4 	movhi	r4,2
   10064:	213e4c04 	addi	r4,r4,-1744
   10068:	000ffd80 	call	ffd8 <alt_load_section>
   1006c:	01800034 	movhi	r6,0
   10070:	31808d04 	addi	r6,r6,564
   10074:	01400034 	movhi	r5,0
   10078:	29400804 	addi	r5,r5,32
   1007c:	01000034 	movhi	r4,0
   10080:	21000804 	addi	r4,r4,32
   10084:	000ffd80 	call	ffd8 <alt_load_section>
   10088:	018000b4 	movhi	r6,2
   1008c:	31b75604 	addi	r6,r6,-8872
   10090:	014000b4 	movhi	r5,2
   10094:	296c0404 	addi	r5,r5,-20464
   10098:	010000b4 	movhi	r4,2
   1009c:	212c0404 	addi	r4,r4,-20464
   100a0:	000ffd80 	call	ffd8 <alt_load_section>
   100a4:	0019b880 	call	19b88 <alt_dcache_flush_all>
   100a8:	0019dd80 	call	19dd8 <alt_icache_flush_all>
   100ac:	0001883a 	nop
   100b0:	e037883a 	mov	sp,fp
   100b4:	dfc00117 	ldw	ra,4(sp)
   100b8:	df000017 	ldw	fp,0(sp)
   100bc:	dec00204 	addi	sp,sp,8
   100c0:	f800283a 	ret

000100c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   100c4:	defffe04 	addi	sp,sp,-8
   100c8:	dfc00115 	stw	ra,4(sp)
   100cc:	df000015 	stw	fp,0(sp)
   100d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   100d4:	d0a00c17 	ldw	r2,-32720(gp)
   100d8:	10000326 	beq	r2,zero,100e8 <alt_get_errno+0x24>
   100dc:	d0a00c17 	ldw	r2,-32720(gp)
   100e0:	103ee83a 	callr	r2
   100e4:	00000106 	br	100ec <alt_get_errno+0x28>
   100e8:	d0a72b04 	addi	r2,gp,-25428
}
   100ec:	e037883a 	mov	sp,fp
   100f0:	dfc00117 	ldw	ra,4(sp)
   100f4:	df000017 	ldw	fp,0(sp)
   100f8:	dec00204 	addi	sp,sp,8
   100fc:	f800283a 	ret

00010100 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10100:	defff904 	addi	sp,sp,-28
   10104:	dfc00615 	stw	ra,24(sp)
   10108:	df000515 	stw	fp,20(sp)
   1010c:	df000504 	addi	fp,sp,20
   10110:	e13ffd15 	stw	r4,-12(fp)
   10114:	e17ffe15 	stw	r5,-8(fp)
   10118:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1011c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10120:	e0bffd17 	ldw	r2,-12(fp)
   10124:	10000816 	blt	r2,zero,10148 <lseek+0x48>
   10128:	01400304 	movi	r5,12
   1012c:	e13ffd17 	ldw	r4,-12(fp)
   10130:	0002f440 	call	2f44 <__mulsi3>
   10134:	1007883a 	mov	r3,r2
   10138:	008000b4 	movhi	r2,2
   1013c:	10b98904 	addi	r2,r2,-6620
   10140:	1885883a 	add	r2,r3,r2
   10144:	00000106 	br	1014c <lseek+0x4c>
   10148:	0005883a 	mov	r2,zero
   1014c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   10150:	e0bffc17 	ldw	r2,-16(fp)
   10154:	10001026 	beq	r2,zero,10198 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   10158:	e0bffc17 	ldw	r2,-16(fp)
   1015c:	10800017 	ldw	r2,0(r2)
   10160:	10800717 	ldw	r2,28(r2)
   10164:	10000926 	beq	r2,zero,1018c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   10168:	e0bffc17 	ldw	r2,-16(fp)
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	10800717 	ldw	r2,28(r2)
   10174:	e1bfff17 	ldw	r6,-4(fp)
   10178:	e17ffe17 	ldw	r5,-8(fp)
   1017c:	e13ffc17 	ldw	r4,-16(fp)
   10180:	103ee83a 	callr	r2
   10184:	e0bffb15 	stw	r2,-20(fp)
   10188:	00000506 	br	101a0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1018c:	00bfde84 	movi	r2,-134
   10190:	e0bffb15 	stw	r2,-20(fp)
   10194:	00000206 	br	101a0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10198:	00bfebc4 	movi	r2,-81
   1019c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   101a0:	e0bffb17 	ldw	r2,-20(fp)
   101a4:	1000070e 	bge	r2,zero,101c4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   101a8:	00100c40 	call	100c4 <alt_get_errno>
   101ac:	1007883a 	mov	r3,r2
   101b0:	e0bffb17 	ldw	r2,-20(fp)
   101b4:	0085c83a 	sub	r2,zero,r2
   101b8:	18800015 	stw	r2,0(r3)
    rc = -1;
   101bc:	00bfffc4 	movi	r2,-1
   101c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   101c4:	e0bffb17 	ldw	r2,-20(fp)
}
   101c8:	e037883a 	mov	sp,fp
   101cc:	dfc00117 	ldw	ra,4(sp)
   101d0:	df000017 	ldw	fp,0(sp)
   101d4:	dec00204 	addi	sp,sp,8
   101d8:	f800283a 	ret

000101dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   101dc:	defff904 	addi	sp,sp,-28
   101e0:	dfc00615 	stw	ra,24(sp)
   101e4:	df000515 	stw	fp,20(sp)
   101e8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   101ec:	0009883a 	mov	r4,zero
   101f0:	00183ec0 	call	183ec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   101f4:	00114300 	call	11430 <OSInit>
   101f8:	01000044 	movi	r4,1
   101fc:	0015d8c0 	call	15d8c <OSSemCreate>
   10200:	d0a73415 	stw	r2,-25392(gp)
   10204:	01000044 	movi	r4,1
   10208:	0015d8c0 	call	15d8c <OSSemCreate>
   1020c:	d0a73615 	stw	r2,-25384(gp)
   10210:	d0a72f04 	addi	r2,gp,-25412
   10214:	e0bffc15 	stw	r2,-16(fp)
   10218:	00800044 	movi	r2,1
   1021c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   10220:	e0bffd0b 	ldhu	r2,-12(fp)
   10224:	1009883a 	mov	r4,r2
   10228:	0015d8c0 	call	15d8c <OSSemCreate>
   1022c:	1007883a 	mov	r3,r2
   10230:	e0bffc17 	ldw	r2,-16(fp)
   10234:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10238:	00184240 	call	18424 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1023c:	018000b4 	movhi	r6,2
   10240:	31b6fa04 	addi	r6,r6,-9240
   10244:	014000b4 	movhi	r5,2
   10248:	2976fa04 	addi	r5,r5,-9240
   1024c:	010000b4 	movhi	r4,2
   10250:	2136fa04 	addi	r4,r4,-9240
   10254:	0019edc0 	call	19edc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10258:	0019c880 	call	19c88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1025c:	010000b4 	movhi	r4,2
   10260:	21273a04 	addi	r4,r4,-25368
   10264:	001ab140 	call	1ab14 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10268:	d0a73017 	ldw	r2,-25408(gp)
   1026c:	d0e73117 	ldw	r3,-25404(gp)
   10270:	d1273217 	ldw	r4,-25400(gp)
   10274:	200d883a 	mov	r6,r4
   10278:	180b883a 	mov	r5,r3
   1027c:	1009883a 	mov	r4,r2
   10280:	00006340 	call	634 <main>
   10284:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   10288:	01000044 	movi	r4,1
   1028c:	000fcd00 	call	fcd0 <close>
  exit (result);
   10290:	e13ffb17 	ldw	r4,-20(fp)
   10294:	001ab280 	call	1ab28 <exit>

00010298 <alt_printf>:
   10298:	defff204 	addi	sp,sp,-56
   1029c:	dfc00a15 	stw	ra,40(sp)
   102a0:	df000915 	stw	fp,36(sp)
   102a4:	df000904 	addi	fp,sp,36
   102a8:	e13fff15 	stw	r4,-4(fp)
   102ac:	e1400215 	stw	r5,8(fp)
   102b0:	e1800315 	stw	r6,12(fp)
   102b4:	e1c00415 	stw	r7,16(fp)
   102b8:	e0800204 	addi	r2,fp,8
   102bc:	e0bffe15 	stw	r2,-8(fp)
   102c0:	e0bfff17 	ldw	r2,-4(fp)
   102c4:	e0bff715 	stw	r2,-36(fp)
   102c8:	00006f06 	br	10488 <alt_printf+0x1f0>
   102cc:	e0bff807 	ldb	r2,-32(fp)
   102d0:	10800960 	cmpeqi	r2,r2,37
   102d4:	1000041e 	bne	r2,zero,102e8 <alt_printf+0x50>
   102d8:	e0bff807 	ldb	r2,-32(fp)
   102dc:	1009883a 	mov	r4,r2
   102e0:	00104c40 	call	104c4 <alt_putchar>
   102e4:	00006806 	br	10488 <alt_printf+0x1f0>
   102e8:	e0bff717 	ldw	r2,-36(fp)
   102ec:	10c00044 	addi	r3,r2,1
   102f0:	e0fff715 	stw	r3,-36(fp)
   102f4:	10800003 	ldbu	r2,0(r2)
   102f8:	e0bff805 	stb	r2,-32(fp)
   102fc:	e0bff807 	ldb	r2,-32(fp)
   10300:	10006926 	beq	r2,zero,104a8 <alt_printf+0x210>
   10304:	e0bff807 	ldb	r2,-32(fp)
   10308:	10800958 	cmpnei	r2,r2,37
   1030c:	1000041e 	bne	r2,zero,10320 <alt_printf+0x88>
   10310:	e0bff807 	ldb	r2,-32(fp)
   10314:	1009883a 	mov	r4,r2
   10318:	00104c40 	call	104c4 <alt_putchar>
   1031c:	00005a06 	br	10488 <alt_printf+0x1f0>
   10320:	e0bff807 	ldb	r2,-32(fp)
   10324:	108018d8 	cmpnei	r2,r2,99
   10328:	1000081e 	bne	r2,zero,1034c <alt_printf+0xb4>
   1032c:	e0bffe17 	ldw	r2,-8(fp)
   10330:	10c00104 	addi	r3,r2,4
   10334:	e0fffe15 	stw	r3,-8(fp)
   10338:	10800017 	ldw	r2,0(r2)
   1033c:	e0bffd15 	stw	r2,-12(fp)
   10340:	e13ffd17 	ldw	r4,-12(fp)
   10344:	00104c40 	call	104c4 <alt_putchar>
   10348:	00004f06 	br	10488 <alt_printf+0x1f0>
   1034c:	e0bff807 	ldb	r2,-32(fp)
   10350:	10801e18 	cmpnei	r2,r2,120
   10354:	1000341e 	bne	r2,zero,10428 <alt_printf+0x190>
   10358:	e0bffe17 	ldw	r2,-8(fp)
   1035c:	10c00104 	addi	r3,r2,4
   10360:	e0fffe15 	stw	r3,-8(fp)
   10364:	10800017 	ldw	r2,0(r2)
   10368:	e0bffb15 	stw	r2,-20(fp)
   1036c:	e0bffb17 	ldw	r2,-20(fp)
   10370:	1000031e 	bne	r2,zero,10380 <alt_printf+0xe8>
   10374:	01000c04 	movi	r4,48
   10378:	00104c40 	call	104c4 <alt_putchar>
   1037c:	00004206 	br	10488 <alt_printf+0x1f0>
   10380:	00800704 	movi	r2,28
   10384:	e0bff915 	stw	r2,-28(fp)
   10388:	00000306 	br	10398 <alt_printf+0x100>
   1038c:	e0bff917 	ldw	r2,-28(fp)
   10390:	10bfff04 	addi	r2,r2,-4
   10394:	e0bff915 	stw	r2,-28(fp)
   10398:	00c003c4 	movi	r3,15
   1039c:	e0bff917 	ldw	r2,-28(fp)
   103a0:	1884983a 	sll	r2,r3,r2
   103a4:	1007883a 	mov	r3,r2
   103a8:	e0bffb17 	ldw	r2,-20(fp)
   103ac:	1884703a 	and	r2,r3,r2
   103b0:	103ff626 	beq	r2,zero,1038c <__alt_data_end+0xfffdf64c>
   103b4:	00001906 	br	1041c <alt_printf+0x184>
   103b8:	00c003c4 	movi	r3,15
   103bc:	e0bff917 	ldw	r2,-28(fp)
   103c0:	1884983a 	sll	r2,r3,r2
   103c4:	1007883a 	mov	r3,r2
   103c8:	e0bffb17 	ldw	r2,-20(fp)
   103cc:	1886703a 	and	r3,r3,r2
   103d0:	e0bff917 	ldw	r2,-28(fp)
   103d4:	1884d83a 	srl	r2,r3,r2
   103d8:	e0bffc15 	stw	r2,-16(fp)
   103dc:	e0bffc17 	ldw	r2,-16(fp)
   103e0:	108002a8 	cmpgeui	r2,r2,10
   103e4:	1000041e 	bne	r2,zero,103f8 <alt_printf+0x160>
   103e8:	e0bffc17 	ldw	r2,-16(fp)
   103ec:	10800c04 	addi	r2,r2,48
   103f0:	e0bff805 	stb	r2,-32(fp)
   103f4:	00000306 	br	10404 <alt_printf+0x16c>
   103f8:	e0bffc17 	ldw	r2,-16(fp)
   103fc:	108015c4 	addi	r2,r2,87
   10400:	e0bff805 	stb	r2,-32(fp)
   10404:	e0bff807 	ldb	r2,-32(fp)
   10408:	1009883a 	mov	r4,r2
   1040c:	00104c40 	call	104c4 <alt_putchar>
   10410:	e0bff917 	ldw	r2,-28(fp)
   10414:	10bfff04 	addi	r2,r2,-4
   10418:	e0bff915 	stw	r2,-28(fp)
   1041c:	e0bff917 	ldw	r2,-28(fp)
   10420:	103fe50e 	bge	r2,zero,103b8 <__alt_data_end+0xfffdf678>
   10424:	00001806 	br	10488 <alt_printf+0x1f0>
   10428:	e0bff807 	ldb	r2,-32(fp)
   1042c:	10801cd8 	cmpnei	r2,r2,115
   10430:	1000151e 	bne	r2,zero,10488 <alt_printf+0x1f0>
   10434:	e0bffe17 	ldw	r2,-8(fp)
   10438:	10c00104 	addi	r3,r2,4
   1043c:	e0fffe15 	stw	r3,-8(fp)
   10440:	10800017 	ldw	r2,0(r2)
   10444:	e0bffa15 	stw	r2,-24(fp)
   10448:	00000906 	br	10470 <alt_printf+0x1d8>
   1044c:	e0bffa17 	ldw	r2,-24(fp)
   10450:	10c00044 	addi	r3,r2,1
   10454:	e0fffa15 	stw	r3,-24(fp)
   10458:	10800003 	ldbu	r2,0(r2)
   1045c:	10803fcc 	andi	r2,r2,255
   10460:	1080201c 	xori	r2,r2,128
   10464:	10bfe004 	addi	r2,r2,-128
   10468:	1009883a 	mov	r4,r2
   1046c:	00104c40 	call	104c4 <alt_putchar>
   10470:	e0bffa17 	ldw	r2,-24(fp)
   10474:	10800003 	ldbu	r2,0(r2)
   10478:	10803fcc 	andi	r2,r2,255
   1047c:	1080201c 	xori	r2,r2,128
   10480:	10bfe004 	addi	r2,r2,-128
   10484:	103ff11e 	bne	r2,zero,1044c <__alt_data_end+0xfffdf70c>
   10488:	e0bff717 	ldw	r2,-36(fp)
   1048c:	10c00044 	addi	r3,r2,1
   10490:	e0fff715 	stw	r3,-36(fp)
   10494:	10800003 	ldbu	r2,0(r2)
   10498:	e0bff805 	stb	r2,-32(fp)
   1049c:	e0bff807 	ldb	r2,-32(fp)
   104a0:	103f8a1e 	bne	r2,zero,102cc <__alt_data_end+0xfffdf58c>
   104a4:	00000106 	br	104ac <alt_printf+0x214>
   104a8:	0001883a 	nop
   104ac:	0001883a 	nop
   104b0:	e037883a 	mov	sp,fp
   104b4:	dfc00117 	ldw	ra,4(sp)
   104b8:	df000017 	ldw	fp,0(sp)
   104bc:	dec00504 	addi	sp,sp,20
   104c0:	f800283a 	ret

000104c4 <alt_putchar>:
   104c4:	defffd04 	addi	sp,sp,-12
   104c8:	dfc00215 	stw	ra,8(sp)
   104cc:	df000115 	stw	fp,4(sp)
   104d0:	df000104 	addi	fp,sp,4
   104d4:	e13fff15 	stw	r4,-4(fp)
   104d8:	d0a00217 	ldw	r2,-32760(gp)
   104dc:	10800217 	ldw	r2,8(r2)
   104e0:	100b883a 	mov	r5,r2
   104e4:	e13fff17 	ldw	r4,-4(fp)
   104e8:	001ac7c0 	call	1ac7c <putc>
   104ec:	e037883a 	mov	sp,fp
   104f0:	dfc00117 	ldw	ra,4(sp)
   104f4:	df000017 	ldw	fp,0(sp)
   104f8:	dec00204 	addi	sp,sp,8
   104fc:	f800283a 	ret

00010500 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10500:	defffe04 	addi	sp,sp,-8
   10504:	dfc00115 	stw	ra,4(sp)
   10508:	df000015 	stw	fp,0(sp)
   1050c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10510:	d0a00c17 	ldw	r2,-32720(gp)
   10514:	10000326 	beq	r2,zero,10524 <alt_get_errno+0x24>
   10518:	d0a00c17 	ldw	r2,-32720(gp)
   1051c:	103ee83a 	callr	r2
   10520:	00000106 	br	10528 <alt_get_errno+0x28>
   10524:	d0a72b04 	addi	r2,gp,-25428
}
   10528:	e037883a 	mov	sp,fp
   1052c:	dfc00117 	ldw	ra,4(sp)
   10530:	df000017 	ldw	fp,0(sp)
   10534:	dec00204 	addi	sp,sp,8
   10538:	f800283a 	ret

0001053c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1053c:	defff904 	addi	sp,sp,-28
   10540:	dfc00615 	stw	ra,24(sp)
   10544:	df000515 	stw	fp,20(sp)
   10548:	df000504 	addi	fp,sp,20
   1054c:	e13ffd15 	stw	r4,-12(fp)
   10550:	e17ffe15 	stw	r5,-8(fp)
   10554:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10558:	e0bffd17 	ldw	r2,-12(fp)
   1055c:	10000816 	blt	r2,zero,10580 <read+0x44>
   10560:	01400304 	movi	r5,12
   10564:	e13ffd17 	ldw	r4,-12(fp)
   10568:	0002f440 	call	2f44 <__mulsi3>
   1056c:	1007883a 	mov	r3,r2
   10570:	008000b4 	movhi	r2,2
   10574:	10b98904 	addi	r2,r2,-6620
   10578:	1885883a 	add	r2,r3,r2
   1057c:	00000106 	br	10584 <read+0x48>
   10580:	0005883a 	mov	r2,zero
   10584:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10588:	e0bffb17 	ldw	r2,-20(fp)
   1058c:	10002226 	beq	r2,zero,10618 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10590:	e0bffb17 	ldw	r2,-20(fp)
   10594:	10800217 	ldw	r2,8(r2)
   10598:	108000cc 	andi	r2,r2,3
   1059c:	10800060 	cmpeqi	r2,r2,1
   105a0:	1000181e 	bne	r2,zero,10604 <read+0xc8>
        (fd->dev->read))
   105a4:	e0bffb17 	ldw	r2,-20(fp)
   105a8:	10800017 	ldw	r2,0(r2)
   105ac:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   105b0:	10001426 	beq	r2,zero,10604 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   105b4:	e0bffb17 	ldw	r2,-20(fp)
   105b8:	10800017 	ldw	r2,0(r2)
   105bc:	10800517 	ldw	r2,20(r2)
   105c0:	e0ffff17 	ldw	r3,-4(fp)
   105c4:	180d883a 	mov	r6,r3
   105c8:	e17ffe17 	ldw	r5,-8(fp)
   105cc:	e13ffb17 	ldw	r4,-20(fp)
   105d0:	103ee83a 	callr	r2
   105d4:	e0bffc15 	stw	r2,-16(fp)
   105d8:	e0bffc17 	ldw	r2,-16(fp)
   105dc:	1000070e 	bge	r2,zero,105fc <read+0xc0>
        {
          ALT_ERRNO = -rval;
   105e0:	00105000 	call	10500 <alt_get_errno>
   105e4:	1007883a 	mov	r3,r2
   105e8:	e0bffc17 	ldw	r2,-16(fp)
   105ec:	0085c83a 	sub	r2,zero,r2
   105f0:	18800015 	stw	r2,0(r3)
          return -1;
   105f4:	00bfffc4 	movi	r2,-1
   105f8:	00000c06 	br	1062c <read+0xf0>
        }
        return rval;
   105fc:	e0bffc17 	ldw	r2,-16(fp)
   10600:	00000a06 	br	1062c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10604:	00105000 	call	10500 <alt_get_errno>
   10608:	1007883a 	mov	r3,r2
   1060c:	00800344 	movi	r2,13
   10610:	18800015 	stw	r2,0(r3)
   10614:	00000406 	br	10628 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10618:	00105000 	call	10500 <alt_get_errno>
   1061c:	1007883a 	mov	r3,r2
   10620:	00801444 	movi	r2,81
   10624:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10628:	00bfffc4 	movi	r2,-1
}
   1062c:	e037883a 	mov	sp,fp
   10630:	dfc00117 	ldw	ra,4(sp)
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00204 	addi	sp,sp,8
   1063c:	f800283a 	ret

00010640 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10640:	defffc04 	addi	sp,sp,-16
   10644:	dfc00315 	stw	ra,12(sp)
   10648:	df000215 	stw	fp,8(sp)
   1064c:	dc000115 	stw	r16,4(sp)
   10650:	df000204 	addi	fp,sp,8
   10654:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   10658:	e0bffe17 	ldw	r2,-8(fp)
   1065c:	108000d0 	cmplti	r2,r2,3
   10660:	1000111e 	bne	r2,zero,106a8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   10664:	040000b4 	movhi	r16,2
   10668:	84398904 	addi	r16,r16,-6620
   1066c:	e0bffe17 	ldw	r2,-8(fp)
   10670:	01400304 	movi	r5,12
   10674:	1009883a 	mov	r4,r2
   10678:	0002f440 	call	2f44 <__mulsi3>
   1067c:	8085883a 	add	r2,r16,r2
   10680:	10800204 	addi	r2,r2,8
   10684:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10688:	040000b4 	movhi	r16,2
   1068c:	84398904 	addi	r16,r16,-6620
   10690:	e0bffe17 	ldw	r2,-8(fp)
   10694:	01400304 	movi	r5,12
   10698:	1009883a 	mov	r4,r2
   1069c:	0002f440 	call	2f44 <__mulsi3>
   106a0:	8085883a 	add	r2,r16,r2
   106a4:	10000015 	stw	zero,0(r2)
  }
}
   106a8:	0001883a 	nop
   106ac:	e6ffff04 	addi	sp,fp,-4
   106b0:	dfc00217 	ldw	ra,8(sp)
   106b4:	df000117 	ldw	fp,4(sp)
   106b8:	dc000017 	ldw	r16,0(sp)
   106bc:	dec00304 	addi	sp,sp,12
   106c0:	f800283a 	ret

000106c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   106c4:	defff904 	addi	sp,sp,-28
   106c8:	df000615 	stw	fp,24(sp)
   106cc:	df000604 	addi	fp,sp,24
   106d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   106d4:	0005303a 	rdctl	r2,status
   106d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   106dc:	e0fffe17 	ldw	r3,-8(fp)
   106e0:	00bfff84 	movi	r2,-2
   106e4:	1884703a 	and	r2,r3,r2
   106e8:	1001703a 	wrctl	status,r2
  
  return context;
   106ec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   106f0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   106f4:	d0a00d17 	ldw	r2,-32716(gp)
   106f8:	10c000c4 	addi	r3,r2,3
   106fc:	00bfff04 	movi	r2,-4
   10700:	1884703a 	and	r2,r3,r2
   10704:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10708:	d0e00d17 	ldw	r3,-32716(gp)
   1070c:	e0bfff17 	ldw	r2,-4(fp)
   10710:	1887883a 	add	r3,r3,r2
   10714:	008000f4 	movhi	r2,3
   10718:	10835004 	addi	r2,r2,3392
   1071c:	10c0062e 	bgeu	r2,r3,10738 <sbrk+0x74>
   10720:	e0bffb17 	ldw	r2,-20(fp)
   10724:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10728:	e0bffa17 	ldw	r2,-24(fp)
   1072c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10730:	00bfffc4 	movi	r2,-1
   10734:	00000b06 	br	10764 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   10738:	d0a00d17 	ldw	r2,-32716(gp)
   1073c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   10740:	d0e00d17 	ldw	r3,-32716(gp)
   10744:	e0bfff17 	ldw	r2,-4(fp)
   10748:	1885883a 	add	r2,r3,r2
   1074c:	d0a00d15 	stw	r2,-32716(gp)
   10750:	e0bffb17 	ldw	r2,-20(fp)
   10754:	e0bffc15 	stw	r2,-16(fp)
   10758:	e0bffc17 	ldw	r2,-16(fp)
   1075c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10760:	e0bffd17 	ldw	r2,-12(fp)
} 
   10764:	e037883a 	mov	sp,fp
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00104 	addi	sp,sp,4
   10770:	f800283a 	ret

00010774 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10774:	defffe04 	addi	sp,sp,-8
   10778:	dfc00115 	stw	ra,4(sp)
   1077c:	df000015 	stw	fp,0(sp)
   10780:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   10784:	d0a00c17 	ldw	r2,-32720(gp)
   10788:	10000326 	beq	r2,zero,10798 <alt_get_errno+0x24>
   1078c:	d0a00c17 	ldw	r2,-32720(gp)
   10790:	103ee83a 	callr	r2
   10794:	00000106 	br	1079c <alt_get_errno+0x28>
   10798:	d0a72b04 	addi	r2,gp,-25428
}
   1079c:	e037883a 	mov	sp,fp
   107a0:	dfc00117 	ldw	ra,4(sp)
   107a4:	df000017 	ldw	fp,0(sp)
   107a8:	dec00204 	addi	sp,sp,8
   107ac:	f800283a 	ret

000107b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   107b0:	defff904 	addi	sp,sp,-28
   107b4:	dfc00615 	stw	ra,24(sp)
   107b8:	df000515 	stw	fp,20(sp)
   107bc:	df000504 	addi	fp,sp,20
   107c0:	e13ffd15 	stw	r4,-12(fp)
   107c4:	e17ffe15 	stw	r5,-8(fp)
   107c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   107cc:	e0bffd17 	ldw	r2,-12(fp)
   107d0:	10000816 	blt	r2,zero,107f4 <write+0x44>
   107d4:	01400304 	movi	r5,12
   107d8:	e13ffd17 	ldw	r4,-12(fp)
   107dc:	0002f440 	call	2f44 <__mulsi3>
   107e0:	1007883a 	mov	r3,r2
   107e4:	008000b4 	movhi	r2,2
   107e8:	10b98904 	addi	r2,r2,-6620
   107ec:	1885883a 	add	r2,r3,r2
   107f0:	00000106 	br	107f8 <write+0x48>
   107f4:	0005883a 	mov	r2,zero
   107f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   107fc:	e0bffb17 	ldw	r2,-20(fp)
   10800:	10002126 	beq	r2,zero,10888 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10804:	e0bffb17 	ldw	r2,-20(fp)
   10808:	10800217 	ldw	r2,8(r2)
   1080c:	108000cc 	andi	r2,r2,3
   10810:	10001826 	beq	r2,zero,10874 <write+0xc4>
   10814:	e0bffb17 	ldw	r2,-20(fp)
   10818:	10800017 	ldw	r2,0(r2)
   1081c:	10800617 	ldw	r2,24(r2)
   10820:	10001426 	beq	r2,zero,10874 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10824:	e0bffb17 	ldw	r2,-20(fp)
   10828:	10800017 	ldw	r2,0(r2)
   1082c:	10800617 	ldw	r2,24(r2)
   10830:	e0ffff17 	ldw	r3,-4(fp)
   10834:	180d883a 	mov	r6,r3
   10838:	e17ffe17 	ldw	r5,-8(fp)
   1083c:	e13ffb17 	ldw	r4,-20(fp)
   10840:	103ee83a 	callr	r2
   10844:	e0bffc15 	stw	r2,-16(fp)
   10848:	e0bffc17 	ldw	r2,-16(fp)
   1084c:	1000070e 	bge	r2,zero,1086c <write+0xbc>
      {
        ALT_ERRNO = -rval;
   10850:	00107740 	call	10774 <alt_get_errno>
   10854:	1007883a 	mov	r3,r2
   10858:	e0bffc17 	ldw	r2,-16(fp)
   1085c:	0085c83a 	sub	r2,zero,r2
   10860:	18800015 	stw	r2,0(r3)
        return -1;
   10864:	00bfffc4 	movi	r2,-1
   10868:	00000c06 	br	1089c <write+0xec>
      }
      return rval;
   1086c:	e0bffc17 	ldw	r2,-16(fp)
   10870:	00000a06 	br	1089c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10874:	00107740 	call	10774 <alt_get_errno>
   10878:	1007883a 	mov	r3,r2
   1087c:	00800344 	movi	r2,13
   10880:	18800015 	stw	r2,0(r3)
   10884:	00000406 	br	10898 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10888:	00107740 	call	10774 <alt_get_errno>
   1088c:	1007883a 	mov	r3,r2
   10890:	00801444 	movi	r2,81
   10894:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10898:	00bfffc4 	movi	r2,-1
}
   1089c:	e037883a 	mov	sp,fp
   108a0:	dfc00117 	ldw	ra,4(sp)
   108a4:	df000017 	ldw	fp,0(sp)
   108a8:	dec00204 	addi	sp,sp,8
   108ac:	f800283a 	ret

000108b0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   108b0:	deffdf04 	addi	sp,sp,-132
   108b4:	dfc02015 	stw	ra,128(sp)
   108b8:	df001f15 	stw	fp,124(sp)
   108bc:	df001f04 	addi	fp,sp,124
   108c0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   108c4:	e0bfe204 	addi	r2,fp,-120
   108c8:	100b883a 	mov	r5,r2
   108cc:	01003fc4 	movi	r4,255
   108d0:	0017d140 	call	17d14 <OSTaskQuery>
   108d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   108d8:	e0bffe83 	ldbu	r2,-6(fp)
   108dc:	10803fcc 	andi	r2,r2,255
   108e0:	10001e1e 	bne	r2,zero,1095c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   108e4:	e0bfee83 	ldbu	r2,-70(fp)
   108e8:	10803fcc 	andi	r2,r2,255
   108ec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   108f0:	d0a73417 	ldw	r2,-25392(gp)
   108f4:	e0fffd04 	addi	r3,fp,-12
   108f8:	180b883a 	mov	r5,r3
   108fc:	1009883a 	mov	r4,r2
   10900:	001652c0 	call	1652c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   10904:	e0bffe43 	ldbu	r2,-7(fp)
   10908:	10803fcc 	andi	r2,r2,255
   1090c:	10000726 	beq	r2,zero,1092c <__env_lock+0x7c>
   10910:	d0a00e17 	ldw	r2,-32712(gp)
   10914:	e0ffe117 	ldw	r3,-124(fp)
   10918:	1880041e 	bne	r3,r2,1092c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   1091c:	d0a73317 	ldw	r2,-25396(gp)
   10920:	10800044 	addi	r2,r2,1
   10924:	d0a73315 	stw	r2,-25396(gp)
   10928:	00000a06 	br	10954 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   1092c:	d0a73417 	ldw	r2,-25392(gp)
   10930:	e0fffe84 	addi	r3,fp,-6
   10934:	180d883a 	mov	r6,r3
   10938:	000b883a 	mov	r5,zero
   1093c:	1009883a 	mov	r4,r2
   10940:	00160a40 	call	160a4 <OSSemPend>
    locks  = 1;
   10944:	00800044 	movi	r2,1
   10948:	d0a73315 	stw	r2,-25396(gp)
    lockid = id;
   1094c:	e0bfe117 	ldw	r2,-124(fp)
   10950:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10954:	0001883a 	nop
   10958:	00000106 	br	10960 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1095c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   10960:	e037883a 	mov	sp,fp
   10964:	dfc00117 	ldw	ra,4(sp)
   10968:	df000017 	ldw	fp,0(sp)
   1096c:	dec00204 	addi	sp,sp,8
   10970:	f800283a 	ret

00010974 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   10974:	defffd04 	addi	sp,sp,-12
   10978:	dfc00215 	stw	ra,8(sp)
   1097c:	df000115 	stw	fp,4(sp)
   10980:	df000104 	addi	fp,sp,4
   10984:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   10988:	d0a73317 	ldw	r2,-25396(gp)
   1098c:	10000b26 	beq	r2,zero,109bc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   10990:	d0a73317 	ldw	r2,-25396(gp)
   10994:	10bfffc4 	addi	r2,r2,-1
   10998:	d0a73315 	stw	r2,-25396(gp)
   1099c:	d0a73317 	ldw	r2,-25396(gp)
   109a0:	1000071e 	bne	r2,zero,109c0 <__env_unlock+0x4c>
  {
    lockid = -1;
   109a4:	00bfffc4 	movi	r2,-1
   109a8:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
   109ac:	d0a73417 	ldw	r2,-25392(gp)
   109b0:	1009883a 	mov	r4,r2
   109b4:	001641c0 	call	1641c <OSSemPost>
   109b8:	00000106 	br	109c0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   109bc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   109c0:	e037883a 	mov	sp,fp
   109c4:	dfc00117 	ldw	ra,4(sp)
   109c8:	df000017 	ldw	fp,0(sp)
   109cc:	dec00204 	addi	sp,sp,8
   109d0:	f800283a 	ret

000109d4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   109d4:	deffdb04 	addi	sp,sp,-148
   109d8:	dfc02415 	stw	ra,144(sp)
   109dc:	df002315 	stw	fp,140(sp)
   109e0:	df002304 	addi	fp,sp,140
   109e4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   109e8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   109ec:	d0a73743 	ldbu	r2,-25379(gp)
   109f0:	10803fcc 	andi	r2,r2,255
   109f4:	10800060 	cmpeqi	r2,r2,1
   109f8:	10003626 	beq	r2,zero,10ad4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   109fc:	e0bfe204 	addi	r2,fp,-120
   10a00:	100b883a 	mov	r5,r2
   10a04:	01003fc4 	movi	r4,255
   10a08:	0017d140 	call	17d14 <OSTaskQuery>
   10a0c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   10a10:	e0bffe83 	ldbu	r2,-6(fp)
   10a14:	10803fcc 	andi	r2,r2,255
   10a18:	1000301e 	bne	r2,zero,10adc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   10a1c:	e0bfee83 	ldbu	r2,-70(fp)
   10a20:	10803fcc 	andi	r2,r2,255
   10a24:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   10a28:	d0a73617 	ldw	r2,-25384(gp)
   10a2c:	e0fffd04 	addi	r3,fp,-12
   10a30:	180b883a 	mov	r5,r3
   10a34:	1009883a 	mov	r4,r2
   10a38:	001652c0 	call	1652c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10a3c:	0005303a 	rdctl	r2,status
   10a40:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10a44:	e0ffe117 	ldw	r3,-124(fp)
   10a48:	00bfff84 	movi	r2,-2
   10a4c:	1884703a 	and	r2,r3,r2
   10a50:	1001703a 	wrctl	status,r2
  
  return context;
   10a54:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   10a58:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   10a5c:	e0bffd0b 	ldhu	r2,-12(fp)
   10a60:	10bfffcc 	andi	r2,r2,65535
   10a64:	10000b1e 	bne	r2,zero,10a94 <__malloc_lock+0xc0>
   10a68:	d0a00f17 	ldw	r2,-32708(gp)
   10a6c:	e0ffde17 	ldw	r3,-136(fp)
   10a70:	1880081e 	bne	r3,r2,10a94 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   10a74:	d0a73517 	ldw	r2,-25388(gp)
   10a78:	10800044 	addi	r2,r2,1
   10a7c:	d0a73515 	stw	r2,-25388(gp)
   10a80:	e0bfdd17 	ldw	r2,-140(fp)
   10a84:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10a88:	e0bfdf17 	ldw	r2,-132(fp)
   10a8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   10a90:	00000e06 	br	10acc <__malloc_lock+0xf8>
   10a94:	e0bfdd17 	ldw	r2,-140(fp)
   10a98:	e0bfe015 	stw	r2,-128(fp)
   10a9c:	e0bfe017 	ldw	r2,-128(fp)
   10aa0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   10aa4:	d0a73617 	ldw	r2,-25384(gp)
   10aa8:	e0fffe84 	addi	r3,fp,-6
   10aac:	180d883a 	mov	r6,r3
   10ab0:	000b883a 	mov	r5,zero
   10ab4:	1009883a 	mov	r4,r2
   10ab8:	00160a40 	call	160a4 <OSSemPend>
    locks  = 1;
   10abc:	00800044 	movi	r2,1
   10ac0:	d0a73515 	stw	r2,-25388(gp)
    lockid = id;
   10ac4:	e0bfde17 	ldw	r2,-136(fp)
   10ac8:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   10acc:	0001883a 	nop
   10ad0:	00000306 	br	10ae0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   10ad4:	0001883a 	nop
   10ad8:	00000106 	br	10ae0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   10adc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   10ae0:	e037883a 	mov	sp,fp
   10ae4:	dfc00117 	ldw	ra,4(sp)
   10ae8:	df000017 	ldw	fp,0(sp)
   10aec:	dec00204 	addi	sp,sp,8
   10af0:	f800283a 	ret

00010af4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10af4:	defff804 	addi	sp,sp,-32
   10af8:	dfc00715 	stw	ra,28(sp)
   10afc:	df000615 	stw	fp,24(sp)
   10b00:	df000604 	addi	fp,sp,24
   10b04:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10b08:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   10b0c:	d0a73743 	ldbu	r2,-25379(gp)
   10b10:	10803fcc 	andi	r2,r2,255
   10b14:	10800060 	cmpeqi	r2,r2,1
   10b18:	10002326 	beq	r2,zero,10ba8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10b1c:	0005303a 	rdctl	r2,status
   10b20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10b24:	e0fffe17 	ldw	r3,-8(fp)
   10b28:	00bfff84 	movi	r2,-2
   10b2c:	1884703a 	and	r2,r3,r2
   10b30:	1001703a 	wrctl	status,r2
  
  return context;
   10b34:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   10b38:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   10b3c:	d0a73517 	ldw	r2,-25388(gp)
   10b40:	1000051e 	bne	r2,zero,10b58 <__malloc_unlock+0x64>
   10b44:	e0bffa17 	ldw	r2,-24(fp)
   10b48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10b4c:	e0bffb17 	ldw	r2,-20(fp)
   10b50:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   10b54:	00001506 	br	10bac <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   10b58:	d0a73517 	ldw	r2,-25388(gp)
   10b5c:	10bfffc4 	addi	r2,r2,-1
   10b60:	d0a73515 	stw	r2,-25388(gp)
   10b64:	d0a73517 	ldw	r2,-25388(gp)
   10b68:	10000a1e 	bne	r2,zero,10b94 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   10b6c:	00bfffc4 	movi	r2,-1
   10b70:	d0a00f15 	stw	r2,-32708(gp)
   10b74:	e0bffa17 	ldw	r2,-24(fp)
   10b78:	e0bffc15 	stw	r2,-16(fp)
   10b7c:	e0bffc17 	ldw	r2,-16(fp)
   10b80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   10b84:	d0a73617 	ldw	r2,-25384(gp)
   10b88:	1009883a 	mov	r4,r2
   10b8c:	001641c0 	call	1641c <OSSemPost>
   10b90:	00000606 	br	10bac <__malloc_unlock+0xb8>
   10b94:	e0bffa17 	ldw	r2,-24(fp)
   10b98:	e0bffd15 	stw	r2,-12(fp)
   10b9c:	e0bffd17 	ldw	r2,-12(fp)
   10ba0:	1001703a 	wrctl	status,r2
   10ba4:	00000106 	br	10bac <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   10ba8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   10bac:	e037883a 	mov	sp,fp
   10bb0:	dfc00117 	ldw	ra,4(sp)
   10bb4:	df000017 	ldw	fp,0(sp)
   10bb8:	dec00204 	addi	sp,sp,8
   10bbc:	f800283a 	ret

00010bc0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10bc0:	defff704 	addi	sp,sp,-36
   10bc4:	dfc00815 	stw	ra,32(sp)
   10bc8:	df000715 	stw	fp,28(sp)
   10bcc:	df000704 	addi	fp,sp,28
   10bd0:	e13ffd15 	stw	r4,-12(fp)
   10bd4:	e17ffe15 	stw	r5,-8(fp)
   10bd8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10bdc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10be0:	e0bfff17 	ldw	r2,-4(fp)
   10be4:	1000021e 	bne	r2,zero,10bf0 <OSEventNameGet+0x30>
        return (0);
   10be8:	0005883a 	mov	r2,zero
   10bec:	00003706 	br	10ccc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10bf0:	e0bffd17 	ldw	r2,-12(fp)
   10bf4:	1000051e 	bne	r2,zero,10c0c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   10bf8:	e0bfff17 	ldw	r2,-4(fp)
   10bfc:	00c00104 	movi	r3,4
   10c00:	10c00005 	stb	r3,0(r2)
        return (0);
   10c04:	0005883a 	mov	r2,zero
   10c08:	00003006 	br	10ccc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10c0c:	e0bffe17 	ldw	r2,-8(fp)
   10c10:	1000051e 	bne	r2,zero,10c28 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   10c14:	e0bfff17 	ldw	r2,-4(fp)
   10c18:	00c00304 	movi	r3,12
   10c1c:	10c00005 	stb	r3,0(r2)
        return (0);
   10c20:	0005883a 	mov	r2,zero
   10c24:	00002906 	br	10ccc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10c28:	d0a74503 	ldbu	r2,-25324(gp)
   10c2c:	10803fcc 	andi	r2,r2,255
   10c30:	10000526 	beq	r2,zero,10c48 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   10c34:	e0bfff17 	ldw	r2,-4(fp)
   10c38:	00c00444 	movi	r3,17
   10c3c:	10c00005 	stb	r3,0(r2)
        return (0);
   10c40:	0005883a 	mov	r2,zero
   10c44:	00002106 	br	10ccc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   10c48:	e0bffd17 	ldw	r2,-12(fp)
   10c4c:	10800003 	ldbu	r2,0(r2)
   10c50:	10803fcc 	andi	r2,r2,255
   10c54:	10bfffc4 	addi	r2,r2,-1
   10c58:	10800128 	cmpgeui	r2,r2,4
   10c5c:	10000526 	beq	r2,zero,10c74 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10c60:	e0bfff17 	ldw	r2,-4(fp)
   10c64:	00c00044 	movi	r3,1
   10c68:	10c00005 	stb	r3,0(r2)
             return (0);
   10c6c:	0005883a 	mov	r2,zero
   10c70:	00001606 	br	10ccc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10c74:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10c78:	0005303a 	rdctl	r2,status
   10c7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10c80:	e0fffb17 	ldw	r3,-20(fp)
   10c84:	00bfff84 	movi	r2,-2
   10c88:	1884703a 	and	r2,r3,r2
   10c8c:	1001703a 	wrctl	status,r2
  
  return context;
   10c90:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   10c94:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   10c98:	e0bffd17 	ldw	r2,-12(fp)
   10c9c:	10800384 	addi	r2,r2,14
   10ca0:	100b883a 	mov	r5,r2
   10ca4:	e13ffe17 	ldw	r4,-8(fp)
   10ca8:	00126440 	call	12644 <OS_StrCopy>
   10cac:	e0bffa05 	stb	r2,-24(fp)
   10cb0:	e0bff917 	ldw	r2,-28(fp)
   10cb4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10cb8:	e0bffc17 	ldw	r2,-16(fp)
   10cbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10cc0:	e0bfff17 	ldw	r2,-4(fp)
   10cc4:	10000005 	stb	zero,0(r2)
    return (len);
   10cc8:	e0bffa03 	ldbu	r2,-24(fp)
}
   10ccc:	e037883a 	mov	sp,fp
   10cd0:	dfc00117 	ldw	ra,4(sp)
   10cd4:	df000017 	ldw	fp,0(sp)
   10cd8:	dec00204 	addi	sp,sp,8
   10cdc:	f800283a 	ret

00010ce0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   10ce0:	defff604 	addi	sp,sp,-40
   10ce4:	dfc00915 	stw	ra,36(sp)
   10ce8:	df000815 	stw	fp,32(sp)
   10cec:	df000804 	addi	fp,sp,32
   10cf0:	e13ffd15 	stw	r4,-12(fp)
   10cf4:	e17ffe15 	stw	r5,-8(fp)
   10cf8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   10cfc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   10d00:	e0bfff17 	ldw	r2,-4(fp)
   10d04:	10004026 	beq	r2,zero,10e08 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   10d08:	e0bffd17 	ldw	r2,-12(fp)
   10d0c:	1000041e 	bne	r2,zero,10d20 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   10d10:	e0bfff17 	ldw	r2,-4(fp)
   10d14:	00c00104 	movi	r3,4
   10d18:	10c00005 	stb	r3,0(r2)
        return;
   10d1c:	00003b06 	br	10e0c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   10d20:	e0bffe17 	ldw	r2,-8(fp)
   10d24:	1000041e 	bne	r2,zero,10d38 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   10d28:	e0bfff17 	ldw	r2,-4(fp)
   10d2c:	00c00304 	movi	r3,12
   10d30:	10c00005 	stb	r3,0(r2)
        return;
   10d34:	00003506 	br	10e0c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   10d38:	d0a74503 	ldbu	r2,-25324(gp)
   10d3c:	10803fcc 	andi	r2,r2,255
   10d40:	10000426 	beq	r2,zero,10d54 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   10d44:	e0bfff17 	ldw	r2,-4(fp)
   10d48:	00c00484 	movi	r3,18
   10d4c:	10c00005 	stb	r3,0(r2)
        return;
   10d50:	00002e06 	br	10e0c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   10d54:	e0bffd17 	ldw	r2,-12(fp)
   10d58:	10800003 	ldbu	r2,0(r2)
   10d5c:	10803fcc 	andi	r2,r2,255
   10d60:	10bfffc4 	addi	r2,r2,-1
   10d64:	10800128 	cmpgeui	r2,r2,4
   10d68:	10000426 	beq	r2,zero,10d7c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   10d6c:	e0bfff17 	ldw	r2,-4(fp)
   10d70:	00c00044 	movi	r3,1
   10d74:	10c00005 	stb	r3,0(r2)
             return;
   10d78:	00002406 	br	10e0c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   10d7c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d80:	0005303a 	rdctl	r2,status
   10d84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d88:	e0fffc17 	ldw	r3,-16(fp)
   10d8c:	00bfff84 	movi	r2,-2
   10d90:	1884703a 	and	r2,r3,r2
   10d94:	1001703a 	wrctl	status,r2
  
  return context;
   10d98:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   10d9c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   10da0:	e13ffe17 	ldw	r4,-8(fp)
   10da4:	00126b80 	call	126b8 <OS_StrLen>
   10da8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   10dac:	e0bffa03 	ldbu	r2,-24(fp)
   10db0:	10800830 	cmpltui	r2,r2,32
   10db4:	1000081e 	bne	r2,zero,10dd8 <OSEventNameSet+0xf8>
   10db8:	e0bff817 	ldw	r2,-32(fp)
   10dbc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dc0:	e0bff917 	ldw	r2,-28(fp)
   10dc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   10dc8:	e0bfff17 	ldw	r2,-4(fp)
   10dcc:	00c002c4 	movi	r3,11
   10dd0:	10c00005 	stb	r3,0(r2)
        return;
   10dd4:	00000d06 	br	10e0c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   10dd8:	e0bffd17 	ldw	r2,-12(fp)
   10ddc:	10800384 	addi	r2,r2,14
   10de0:	e17ffe17 	ldw	r5,-8(fp)
   10de4:	1009883a 	mov	r4,r2
   10de8:	00126440 	call	12644 <OS_StrCopy>
   10dec:	e0bff817 	ldw	r2,-32(fp)
   10df0:	e0bffb15 	stw	r2,-20(fp)
   10df4:	e0bffb17 	ldw	r2,-20(fp)
   10df8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   10dfc:	e0bfff17 	ldw	r2,-4(fp)
   10e00:	10000005 	stb	zero,0(r2)
   10e04:	00000106 	br	10e0c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   10e08:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   10e0c:	e037883a 	mov	sp,fp
   10e10:	dfc00117 	ldw	ra,4(sp)
   10e14:	df000017 	ldw	fp,0(sp)
   10e18:	dec00204 	addi	sp,sp,8
   10e1c:	f800283a 	ret

00010e20 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   10e20:	deffed04 	addi	sp,sp,-76
   10e24:	dfc01215 	stw	ra,72(sp)
   10e28:	df001115 	stw	fp,68(sp)
   10e2c:	df001104 	addi	fp,sp,68
   10e30:	e13ffc15 	stw	r4,-16(fp)
   10e34:	e17ffd15 	stw	r5,-12(fp)
   10e38:	e1bffe15 	stw	r6,-8(fp)
   10e3c:	3805883a 	mov	r2,r7
   10e40:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   10e44:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   10e48:	e0800217 	ldw	r2,8(fp)
   10e4c:	1000021e 	bne	r2,zero,10e58 <OSEventPendMulti+0x38>
        return (0);
   10e50:	0005883a 	mov	r2,zero
   10e54:	00017106 	br	1141c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   10e58:	e0bffc17 	ldw	r2,-16(fp)
   10e5c:	1000051e 	bne	r2,zero,10e74 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   10e60:	e0800217 	ldw	r2,8(fp)
   10e64:	00c00104 	movi	r3,4
   10e68:	10c00005 	stb	r3,0(r2)
        return (0);
   10e6c:	0005883a 	mov	r2,zero
   10e70:	00016a06 	br	1141c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   10e74:	e0bffd17 	ldw	r2,-12(fp)
   10e78:	1000051e 	bne	r2,zero,10e90 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   10e7c:	e0800217 	ldw	r2,8(fp)
   10e80:	00c00104 	movi	r3,4
   10e84:	10c00005 	stb	r3,0(r2)
        return (0);
   10e88:	0005883a 	mov	r2,zero
   10e8c:	00016306 	br	1141c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   10e90:	e0bffe17 	ldw	r2,-8(fp)
   10e94:	1000051e 	bne	r2,zero,10eac <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   10e98:	e0800217 	ldw	r2,8(fp)
   10e9c:	00c00104 	movi	r3,4
   10ea0:	10c00005 	stb	r3,0(r2)
        return (0);
   10ea4:	0005883a 	mov	r2,zero
   10ea8:	00015c06 	br	1141c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   10eac:	e0bffd17 	ldw	r2,-12(fp)
   10eb0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   10eb4:	e0bffc17 	ldw	r2,-16(fp)
   10eb8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   10ebc:	e0bfef17 	ldw	r2,-68(fp)
   10ec0:	10800017 	ldw	r2,0(r2)
   10ec4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   10ec8:	00001906 	br	10f30 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   10ecc:	e0bff017 	ldw	r2,-64(fp)
   10ed0:	10800003 	ldbu	r2,0(r2)
   10ed4:	10803fcc 	andi	r2,r2,255
   10ed8:	10c000a0 	cmpeqi	r3,r2,2
   10edc:	1800091e 	bne	r3,zero,10f04 <OSEventPendMulti+0xe4>
   10ee0:	10c000e0 	cmpeqi	r3,r2,3
   10ee4:	1800091e 	bne	r3,zero,10f0c <OSEventPendMulti+0xec>
   10ee8:	10800060 	cmpeqi	r2,r2,1
   10eec:	1000091e 	bne	r2,zero,10f14 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   10ef0:	e0800217 	ldw	r2,8(fp)
   10ef4:	00c00044 	movi	r3,1
   10ef8:	10c00005 	stb	r3,0(r2)
                 return (0);
   10efc:	0005883a 	mov	r2,zero
   10f00:	00014606 	br	1141c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   10f04:	0001883a 	nop
   10f08:	00000306 	br	10f18 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   10f0c:	0001883a 	nop
   10f10:	00000106 	br	10f18 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   10f14:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   10f18:	e0bfef17 	ldw	r2,-68(fp)
   10f1c:	10800104 	addi	r2,r2,4
   10f20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   10f24:	e0bfef17 	ldw	r2,-68(fp)
   10f28:	10800017 	ldw	r2,0(r2)
   10f2c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   10f30:	e0bff017 	ldw	r2,-64(fp)
   10f34:	103fe51e 	bne	r2,zero,10ecc <__alt_data_end+0xfffe018c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   10f38:	d0a74503 	ldbu	r2,-25324(gp)
   10f3c:	10803fcc 	andi	r2,r2,255
   10f40:	10000526 	beq	r2,zero,10f58 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   10f44:	e0800217 	ldw	r2,8(fp)
   10f48:	00c00084 	movi	r3,2
   10f4c:	10c00005 	stb	r3,0(r2)
        return (0);
   10f50:	0005883a 	mov	r2,zero
   10f54:	00013106 	br	1141c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   10f58:	d0a73703 	ldbu	r2,-25380(gp)
   10f5c:	10803fcc 	andi	r2,r2,255
   10f60:	10000526 	beq	r2,zero,10f78 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   10f64:	e0800217 	ldw	r2,8(fp)
   10f68:	00c00344 	movi	r3,13
   10f6c:	10c00005 	stb	r3,0(r2)
        return (0);
   10f70:	0005883a 	mov	r2,zero
   10f74:	00012906 	br	1141c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10f78:	0005303a 	rdctl	r2,status
   10f7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10f80:	e0fffb17 	ldw	r3,-20(fp)
   10f84:	00bfff84 	movi	r2,-2
   10f88:	1884703a 	and	r2,r3,r2
   10f8c:	1001703a 	wrctl	status,r2
  
  return context;
   10f90:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   10f94:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   10f98:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   10f9c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   10fa0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   10fa4:	e0bffc17 	ldw	r2,-16(fp)
   10fa8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   10fac:	e0bfef17 	ldw	r2,-68(fp)
   10fb0:	10800017 	ldw	r2,0(r2)
   10fb4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   10fb8:	00008106 	br	111c0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   10fbc:	e0bff017 	ldw	r2,-64(fp)
   10fc0:	10800003 	ldbu	r2,0(r2)
   10fc4:	10803fcc 	andi	r2,r2,255
   10fc8:	10c000a0 	cmpeqi	r3,r2,2
   10fcc:	18003c1e 	bne	r3,zero,110c0 <OSEventPendMulti+0x2a0>
   10fd0:	10c000e0 	cmpeqi	r3,r2,3
   10fd4:	1800031e 	bne	r3,zero,10fe4 <OSEventPendMulti+0x1c4>
   10fd8:	10800060 	cmpeqi	r2,r2,1
   10fdc:	10001e1e 	bne	r2,zero,11058 <OSEventPendMulti+0x238>
   10fe0:	00006606 	br	1117c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   10fe4:	e0bff017 	ldw	r2,-64(fp)
   10fe8:	1080020b 	ldhu	r2,8(r2)
   10fec:	10bfffcc 	andi	r2,r2,65535
   10ff0:	10001526 	beq	r2,zero,11048 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   10ff4:	e0bff017 	ldw	r2,-64(fp)
   10ff8:	1080020b 	ldhu	r2,8(r2)
   10ffc:	10bfffc4 	addi	r2,r2,-1
   11000:	1007883a 	mov	r3,r2
   11004:	e0bff017 	ldw	r2,-64(fp)
   11008:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1100c:	e0bffd17 	ldw	r2,-12(fp)
   11010:	10c00104 	addi	r3,r2,4
   11014:	e0fffd15 	stw	r3,-12(fp)
   11018:	e0fff017 	ldw	r3,-64(fp)
   1101c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   11020:	00800044 	movi	r2,1
   11024:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   11028:	e0bffe17 	ldw	r2,-8(fp)
   1102c:	10c00104 	addi	r3,r2,4
   11030:	e0fffe15 	stw	r3,-8(fp)
   11034:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   11038:	e0bff18b 	ldhu	r2,-58(fp)
   1103c:	10800044 	addi	r2,r2,1
   11040:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   11044:	00005806 	br	111a8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   11048:	e0bff203 	ldbu	r2,-56(fp)
   1104c:	10800054 	ori	r2,r2,1
   11050:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11054:	00005406 	br	111a8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   11058:	e0bff017 	ldw	r2,-64(fp)
   1105c:	10800117 	ldw	r2,4(r2)
   11060:	10001326 	beq	r2,zero,110b0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   11064:	e0bffe17 	ldw	r2,-8(fp)
   11068:	10c00104 	addi	r3,r2,4
   1106c:	e0fffe15 	stw	r3,-8(fp)
   11070:	e0fff017 	ldw	r3,-64(fp)
   11074:	18c00117 	ldw	r3,4(r3)
   11078:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1107c:	e0bff017 	ldw	r2,-64(fp)
   11080:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   11084:	e0bffd17 	ldw	r2,-12(fp)
   11088:	10c00104 	addi	r3,r2,4
   1108c:	e0fffd15 	stw	r3,-12(fp)
   11090:	e0fff017 	ldw	r3,-64(fp)
   11094:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   11098:	00800044 	movi	r2,1
   1109c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   110a0:	e0bff18b 	ldhu	r2,-58(fp)
   110a4:	10800044 	addi	r2,r2,1
   110a8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   110ac:	00003e06 	br	111a8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   110b0:	e0bff203 	ldbu	r2,-56(fp)
   110b4:	10800094 	ori	r2,r2,2
   110b8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   110bc:	00003a06 	br	111a8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   110c0:	e0bff017 	ldw	r2,-64(fp)
   110c4:	10800117 	ldw	r2,4(r2)
   110c8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   110cc:	e0bff517 	ldw	r2,-44(fp)
   110d0:	1080058b 	ldhu	r2,22(r2)
   110d4:	10bfffcc 	andi	r2,r2,65535
   110d8:	10002426 	beq	r2,zero,1116c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   110dc:	e0bffe17 	ldw	r2,-8(fp)
   110e0:	10c00104 	addi	r3,r2,4
   110e4:	e0fffe15 	stw	r3,-8(fp)
   110e8:	e0fff517 	ldw	r3,-44(fp)
   110ec:	18c00417 	ldw	r3,16(r3)
   110f0:	19400104 	addi	r5,r3,4
   110f4:	e13ff517 	ldw	r4,-44(fp)
   110f8:	21400415 	stw	r5,16(r4)
   110fc:	18c00017 	ldw	r3,0(r3)
   11100:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   11104:	e0bff517 	ldw	r2,-44(fp)
   11108:	10c00417 	ldw	r3,16(r2)
   1110c:	e0bff517 	ldw	r2,-44(fp)
   11110:	10800217 	ldw	r2,8(r2)
   11114:	1880041e 	bne	r3,r2,11128 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   11118:	e0bff517 	ldw	r2,-44(fp)
   1111c:	10c00117 	ldw	r3,4(r2)
   11120:	e0bff517 	ldw	r2,-44(fp)
   11124:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   11128:	e0bff517 	ldw	r2,-44(fp)
   1112c:	1080058b 	ldhu	r2,22(r2)
   11130:	10bfffc4 	addi	r2,r2,-1
   11134:	1007883a 	mov	r3,r2
   11138:	e0bff517 	ldw	r2,-44(fp)
   1113c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   11140:	e0bffd17 	ldw	r2,-12(fp)
   11144:	10c00104 	addi	r3,r2,4
   11148:	e0fffd15 	stw	r3,-12(fp)
   1114c:	e0fff017 	ldw	r3,-64(fp)
   11150:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   11154:	00800044 	movi	r2,1
   11158:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1115c:	e0bff18b 	ldhu	r2,-58(fp)
   11160:	10800044 	addi	r2,r2,1
   11164:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   11168:	00000f06 	br	111a8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1116c:	e0bff203 	ldbu	r2,-56(fp)
   11170:	10800114 	ori	r2,r2,4
   11174:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   11178:	00000b06 	br	111a8 <OSEventPendMulti+0x388>
   1117c:	e0bff317 	ldw	r2,-52(fp)
   11180:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11184:	e0bff417 	ldw	r2,-48(fp)
   11188:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1118c:	e0bffd17 	ldw	r2,-12(fp)
   11190:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   11194:	e0800217 	ldw	r2,8(fp)
   11198:	00c00044 	movi	r3,1
   1119c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   111a0:	e0bff18b 	ldhu	r2,-58(fp)
   111a4:	00009d06 	br	1141c <OSEventPendMulti+0x5fc>
        }
        pevents++;
   111a8:	e0bfef17 	ldw	r2,-68(fp)
   111ac:	10800104 	addi	r2,r2,4
   111b0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   111b4:	e0bfef17 	ldw	r2,-68(fp)
   111b8:	10800017 	ldw	r2,0(r2)
   111bc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   111c0:	e0bff017 	ldw	r2,-64(fp)
   111c4:	103f7d1e 	bne	r2,zero,10fbc <__alt_data_end+0xfffe027c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   111c8:	e0bff103 	ldbu	r2,-60(fp)
   111cc:	10800058 	cmpnei	r2,r2,1
   111d0:	10000a1e 	bne	r2,zero,111fc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   111d4:	e0bffd17 	ldw	r2,-12(fp)
   111d8:	10000015 	stw	zero,0(r2)
   111dc:	e0bff317 	ldw	r2,-52(fp)
   111e0:	e0bff615 	stw	r2,-40(fp)
   111e4:	e0bff617 	ldw	r2,-40(fp)
   111e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   111ec:	e0800217 	ldw	r2,8(fp)
   111f0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   111f4:	e0bff18b 	ldhu	r2,-58(fp)
   111f8:	00008806 	br	1141c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   111fc:	d0a74617 	ldw	r2,-25320(gp)
   11200:	d0e74617 	ldw	r3,-25320(gp)
   11204:	19000c03 	ldbu	r4,48(r3)
   11208:	e0fff203 	ldbu	r3,-56(fp)
   1120c:	20c6b03a 	or	r3,r4,r3
   11210:	1809883a 	mov	r4,r3
   11214:	00ffe004 	movi	r3,-128
   11218:	20c6b03a 	or	r3,r4,r3
   1121c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   11220:	d0a74617 	ldw	r2,-25320(gp)
   11224:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   11228:	d0a74617 	ldw	r2,-25320(gp)
   1122c:	e0ffff0b 	ldhu	r3,-4(fp)
   11230:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   11234:	e13ffc17 	ldw	r4,-16(fp)
   11238:	0011d5c0 	call	11d5c <OS_EventTaskWaitMulti>
   1123c:	e0bff317 	ldw	r2,-52(fp)
   11240:	e0bff915 	stw	r2,-28(fp)
   11244:	e0bff917 	ldw	r2,-28(fp)
   11248:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1124c:	00125000 	call	12500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11250:	0005303a 	rdctl	r2,status
   11254:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11258:	e0fff717 	ldw	r3,-36(fp)
   1125c:	00bfff84 	movi	r2,-2
   11260:	1884703a 	and	r2,r3,r2
   11264:	1001703a 	wrctl	status,r2
  
  return context;
   11268:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1126c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   11270:	d0a74617 	ldw	r2,-25320(gp)
   11274:	10800c43 	ldbu	r2,49(r2)
   11278:	10803fcc 	andi	r2,r2,255
   1127c:	10000226 	beq	r2,zero,11288 <OSEventPendMulti+0x468>
   11280:	108000a0 	cmpeqi	r2,r2,2
   11284:	10001826 	beq	r2,zero,112e8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   11288:	d0a74617 	ldw	r2,-25320(gp)
   1128c:	10800717 	ldw	r2,28(r2)
   11290:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   11294:	e0bff017 	ldw	r2,-64(fp)
   11298:	10000b26 	beq	r2,zero,112c8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1129c:	e0bffd17 	ldw	r2,-12(fp)
   112a0:	10c00104 	addi	r3,r2,4
   112a4:	e0fffd15 	stw	r3,-12(fp)
   112a8:	e0fff017 	ldw	r3,-64(fp)
   112ac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   112b0:	e0bffd17 	ldw	r2,-12(fp)
   112b4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   112b8:	e0bff18b 	ldhu	r2,-58(fp)
   112bc:	10800044 	addi	r2,r2,1
   112c0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   112c4:	00000d06 	br	112fc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   112c8:	d0a74617 	ldw	r2,-25320(gp)
   112cc:	00c00044 	movi	r3,1
   112d0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   112d4:	d0a74617 	ldw	r2,-25320(gp)
   112d8:	e17ffc17 	ldw	r5,-16(fp)
   112dc:	1009883a 	mov	r4,r2
   112e0:	0011f640 	call	11f64 <OS_EventTaskRemoveMulti>
             }
			 break;
   112e4:	00000506 	br	112fc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   112e8:	d0a74617 	ldw	r2,-25320(gp)
   112ec:	e17ffc17 	ldw	r5,-16(fp)
   112f0:	1009883a 	mov	r4,r2
   112f4:	0011f640 	call	11f64 <OS_EventTaskRemoveMulti>
             break;
   112f8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   112fc:	d0a74617 	ldw	r2,-25320(gp)
   11300:	10800c43 	ldbu	r2,49(r2)
   11304:	10803fcc 	andi	r2,r2,255
   11308:	10000326 	beq	r2,zero,11318 <OSEventPendMulti+0x4f8>
   1130c:	108000a0 	cmpeqi	r2,r2,2
   11310:	1000231e 	bne	r2,zero,113a0 <OSEventPendMulti+0x580>
   11314:	00002a06 	br	113c0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   11318:	e0bff017 	ldw	r2,-64(fp)
   1131c:	10800003 	ldbu	r2,0(r2)
   11320:	10803fcc 	andi	r2,r2,255
   11324:	0080100e 	bge	zero,r2,11368 <OSEventPendMulti+0x548>
   11328:	10c000d0 	cmplti	r3,r2,3
   1132c:	1800071e 	bne	r3,zero,1134c <OSEventPendMulti+0x52c>
   11330:	108000e0 	cmpeqi	r2,r2,3
   11334:	10000c26 	beq	r2,zero,11368 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   11338:	e0bffe17 	ldw	r2,-8(fp)
   1133c:	10c00104 	addi	r3,r2,4
   11340:	e0fffe15 	stw	r3,-8(fp)
   11344:	10000015 	stw	zero,0(r2)
                      break;
   11348:	00001206 	br	11394 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1134c:	e0bffe17 	ldw	r2,-8(fp)
   11350:	10c00104 	addi	r3,r2,4
   11354:	e0fffe15 	stw	r3,-8(fp)
   11358:	d0e74617 	ldw	r3,-25320(gp)
   1135c:	18c00917 	ldw	r3,36(r3)
   11360:	10c00015 	stw	r3,0(r2)
                      break;
   11364:	00000b06 	br	11394 <OSEventPendMulti+0x574>
   11368:	e0bff317 	ldw	r2,-52(fp)
   1136c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11370:	e0bff817 	ldw	r2,-32(fp)
   11374:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   11378:	e0bffd17 	ldw	r2,-12(fp)
   1137c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   11380:	e0800217 	ldw	r2,8(fp)
   11384:	00c00044 	movi	r3,1
   11388:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1138c:	e0bff18b 	ldhu	r2,-58(fp)
   11390:	00002206 	br	1141c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   11394:	e0800217 	ldw	r2,8(fp)
   11398:	10000005 	stb	zero,0(r2)
             break;
   1139c:	00001006 	br	113e0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   113a0:	e0bffe17 	ldw	r2,-8(fp)
   113a4:	10c00104 	addi	r3,r2,4
   113a8:	e0fffe15 	stw	r3,-8(fp)
   113ac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   113b0:	e0800217 	ldw	r2,8(fp)
   113b4:	00c00384 	movi	r3,14
   113b8:	10c00005 	stb	r3,0(r2)
             break;
   113bc:	00000806 	br	113e0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   113c0:	e0bffe17 	ldw	r2,-8(fp)
   113c4:	10c00104 	addi	r3,r2,4
   113c8:	e0fffe15 	stw	r3,-8(fp)
   113cc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   113d0:	e0800217 	ldw	r2,8(fp)
   113d4:	00c00284 	movi	r3,10
   113d8:	10c00005 	stb	r3,0(r2)
             break;
   113dc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   113e0:	d0a74617 	ldw	r2,-25320(gp)
   113e4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   113e8:	d0a74617 	ldw	r2,-25320(gp)
   113ec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   113f0:	d0a74617 	ldw	r2,-25320(gp)
   113f4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   113f8:	d0a74617 	ldw	r2,-25320(gp)
   113fc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   11400:	d0a74617 	ldw	r2,-25320(gp)
   11404:	10000915 	stw	zero,36(r2)
   11408:	e0bff317 	ldw	r2,-52(fp)
   1140c:	e0bffa15 	stw	r2,-24(fp)
   11410:	e0bffa17 	ldw	r2,-24(fp)
   11414:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   11418:	e0bff18b 	ldhu	r2,-58(fp)
}
   1141c:	e037883a 	mov	sp,fp
   11420:	dfc00117 	ldw	ra,4(sp)
   11424:	df000017 	ldw	fp,0(sp)
   11428:	dec00204 	addi	sp,sp,8
   1142c:	f800283a 	ret

00011430 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   11430:	defffe04 	addi	sp,sp,-8
   11434:	dfc00115 	stw	ra,4(sp)
   11438:	df000015 	stw	fp,0(sp)
   1143c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   11440:	001a7f80 	call	1a7f8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   11444:	00121ac0 	call	121ac <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   11448:	00121f40 	call	121f4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1144c:	00123600 	call	12360 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   11450:	00120cc0 	call	120cc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   11454:	00142000 	call	14200 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   11458:	0014b000 	call	14b00 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1145c:	0015c340 	call	15c34 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   11460:	00122600 	call	12260 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   11464:	00122e00 	call	122e0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   11468:	001a8180 	call	1a818 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1146c:	0012bd40 	call	12bd4 <OSDebugInit>
#endif
}
   11470:	0001883a 	nop
   11474:	e037883a 	mov	sp,fp
   11478:	dfc00117 	ldw	ra,4(sp)
   1147c:	df000017 	ldw	fp,0(sp)
   11480:	dec00204 	addi	sp,sp,8
   11484:	f800283a 	ret

00011488 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   11488:	deffff04 	addi	sp,sp,-4
   1148c:	df000015 	stw	fp,0(sp)
   11490:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   11494:	d0a73743 	ldbu	r2,-25379(gp)
   11498:	10803fcc 	andi	r2,r2,255
   1149c:	10800058 	cmpnei	r2,r2,1
   114a0:	1000071e 	bne	r2,zero,114c0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   114a4:	d0a74503 	ldbu	r2,-25324(gp)
   114a8:	10803fcc 	andi	r2,r2,255
   114ac:	10803fe0 	cmpeqi	r2,r2,255
   114b0:	1000031e 	bne	r2,zero,114c0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   114b4:	d0a74503 	ldbu	r2,-25324(gp)
   114b8:	10800044 	addi	r2,r2,1
   114bc:	d0a74505 	stb	r2,-25324(gp)
        }
    }
}
   114c0:	0001883a 	nop
   114c4:	e037883a 	mov	sp,fp
   114c8:	df000017 	ldw	fp,0(sp)
   114cc:	dec00104 	addi	sp,sp,4
   114d0:	f800283a 	ret

000114d4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   114d4:	defffb04 	addi	sp,sp,-20
   114d8:	dfc00415 	stw	ra,16(sp)
   114dc:	df000315 	stw	fp,12(sp)
   114e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   114e4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   114e8:	d0a73743 	ldbu	r2,-25379(gp)
   114ec:	10803fcc 	andi	r2,r2,255
   114f0:	10800058 	cmpnei	r2,r2,1
   114f4:	10002f1e 	bne	r2,zero,115b4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   114f8:	0005303a 	rdctl	r2,status
   114fc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11500:	e0ffff17 	ldw	r3,-4(fp)
   11504:	00bfff84 	movi	r2,-2
   11508:	1884703a 	and	r2,r3,r2
   1150c:	1001703a 	wrctl	status,r2
  
  return context;
   11510:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   11514:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   11518:	d0a74503 	ldbu	r2,-25324(gp)
   1151c:	10803fcc 	andi	r2,r2,255
   11520:	10000326 	beq	r2,zero,11530 <OSIntExit+0x5c>
            OSIntNesting--;
   11524:	d0a74503 	ldbu	r2,-25324(gp)
   11528:	10bfffc4 	addi	r2,r2,-1
   1152c:	d0a74505 	stb	r2,-25324(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   11530:	d0a74503 	ldbu	r2,-25324(gp)
   11534:	10803fcc 	andi	r2,r2,255
   11538:	10001a1e 	bne	r2,zero,115a4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1153c:	d0a73703 	ldbu	r2,-25380(gp)
   11540:	10803fcc 	andi	r2,r2,255
   11544:	1000171e 	bne	r2,zero,115a4 <OSIntExit+0xd0>
                OS_SchedNew();
   11548:	00125d00 	call	125d0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1154c:	d0e73903 	ldbu	r3,-25372(gp)
   11550:	d0a73943 	ldbu	r2,-25371(gp)
   11554:	18c03fcc 	andi	r3,r3,255
   11558:	10803fcc 	andi	r2,r2,255
   1155c:	18801126 	beq	r3,r2,115a4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   11560:	d0a73903 	ldbu	r2,-25372(gp)
   11564:	10c03fcc 	andi	r3,r2,255
   11568:	008000f4 	movhi	r2,3
   1156c:	10b3e904 	addi	r2,r2,-12380
   11570:	18c7883a 	add	r3,r3,r3
   11574:	18c7883a 	add	r3,r3,r3
   11578:	10c5883a 	add	r2,r2,r3
   1157c:	10800017 	ldw	r2,0(r2)
   11580:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   11584:	d0a74117 	ldw	r2,-25340(gp)
   11588:	10c00e17 	ldw	r3,56(r2)
   1158c:	18c00044 	addi	r3,r3,1
   11590:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   11594:	d0a73c17 	ldw	r2,-25360(gp)
   11598:	10800044 	addi	r2,r2,1
   1159c:	d0a73c15 	stw	r2,-25360(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   115a0:	001a5240 	call	1a524 <OSCtxSw>
   115a4:	e0bffd17 	ldw	r2,-12(fp)
   115a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   115ac:	e0bffe17 	ldw	r2,-8(fp)
   115b0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   115b4:	0001883a 	nop
   115b8:	e037883a 	mov	sp,fp
   115bc:	dfc00117 	ldw	ra,4(sp)
   115c0:	df000017 	ldw	fp,0(sp)
   115c4:	dec00204 	addi	sp,sp,8
   115c8:	f800283a 	ret

000115cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   115cc:	defffc04 	addi	sp,sp,-16
   115d0:	df000315 	stw	fp,12(sp)
   115d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   115d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   115dc:	d0a73743 	ldbu	r2,-25379(gp)
   115e0:	10803fcc 	andi	r2,r2,255
   115e4:	10800058 	cmpnei	r2,r2,1
   115e8:	1000161e 	bne	r2,zero,11644 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   115ec:	0005303a 	rdctl	r2,status
   115f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   115f4:	e0ffff17 	ldw	r3,-4(fp)
   115f8:	00bfff84 	movi	r2,-2
   115fc:	1884703a 	and	r2,r3,r2
   11600:	1001703a 	wrctl	status,r2
  
  return context;
   11604:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   11608:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   1160c:	d0a74503 	ldbu	r2,-25324(gp)
   11610:	10803fcc 	andi	r2,r2,255
   11614:	1000071e 	bne	r2,zero,11634 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   11618:	d0a73703 	ldbu	r2,-25380(gp)
   1161c:	10803fcc 	andi	r2,r2,255
   11620:	10803fe0 	cmpeqi	r2,r2,255
   11624:	1000031e 	bne	r2,zero,11634 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   11628:	d0a73703 	ldbu	r2,-25380(gp)
   1162c:	10800044 	addi	r2,r2,1
   11630:	d0a73705 	stb	r2,-25380(gp)
   11634:	e0bffd17 	ldw	r2,-12(fp)
   11638:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1163c:	e0bffe17 	ldw	r2,-8(fp)
   11640:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   11644:	0001883a 	nop
   11648:	e037883a 	mov	sp,fp
   1164c:	df000017 	ldw	fp,0(sp)
   11650:	dec00104 	addi	sp,sp,4
   11654:	f800283a 	ret

00011658 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   11658:	defff804 	addi	sp,sp,-32
   1165c:	dfc00715 	stw	ra,28(sp)
   11660:	df000615 	stw	fp,24(sp)
   11664:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   11668:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1166c:	d0a73743 	ldbu	r2,-25379(gp)
   11670:	10803fcc 	andi	r2,r2,255
   11674:	10800058 	cmpnei	r2,r2,1
   11678:	1000281e 	bne	r2,zero,1171c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1167c:	0005303a 	rdctl	r2,status
   11680:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11684:	e0ffff17 	ldw	r3,-4(fp)
   11688:	00bfff84 	movi	r2,-2
   1168c:	1884703a 	and	r2,r3,r2
   11690:	1001703a 	wrctl	status,r2
  
  return context;
   11694:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   11698:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1169c:	d0a73703 	ldbu	r2,-25380(gp)
   116a0:	10803fcc 	andi	r2,r2,255
   116a4:	10001926 	beq	r2,zero,1170c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   116a8:	d0a73703 	ldbu	r2,-25380(gp)
   116ac:	10bfffc4 	addi	r2,r2,-1
   116b0:	d0a73705 	stb	r2,-25380(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   116b4:	d0a73703 	ldbu	r2,-25380(gp)
   116b8:	10803fcc 	andi	r2,r2,255
   116bc:	10000e1e 	bne	r2,zero,116f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   116c0:	d0a74503 	ldbu	r2,-25324(gp)
   116c4:	10803fcc 	andi	r2,r2,255
   116c8:	1000061e 	bne	r2,zero,116e4 <OSSchedUnlock+0x8c>
   116cc:	e0bffa17 	ldw	r2,-24(fp)
   116d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   116d4:	e0bffb17 	ldw	r2,-20(fp)
   116d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   116dc:	00125000 	call	12500 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   116e0:	00000e06 	br	1171c <OSSchedUnlock+0xc4>
   116e4:	e0bffa17 	ldw	r2,-24(fp)
   116e8:	e0bffc15 	stw	r2,-16(fp)
   116ec:	e0bffc17 	ldw	r2,-16(fp)
   116f0:	1001703a 	wrctl	status,r2
   116f4:	00000906 	br	1171c <OSSchedUnlock+0xc4>
   116f8:	e0bffa17 	ldw	r2,-24(fp)
   116fc:	e0bffd15 	stw	r2,-12(fp)
   11700:	e0bffd17 	ldw	r2,-12(fp)
   11704:	1001703a 	wrctl	status,r2
   11708:	00000406 	br	1171c <OSSchedUnlock+0xc4>
   1170c:	e0bffa17 	ldw	r2,-24(fp)
   11710:	e0bffe15 	stw	r2,-8(fp)
   11714:	e0bffe17 	ldw	r2,-8(fp)
   11718:	1001703a 	wrctl	status,r2
   1171c:	0001883a 	nop
   11720:	e037883a 	mov	sp,fp
   11724:	dfc00117 	ldw	ra,4(sp)
   11728:	df000017 	ldw	fp,0(sp)
   1172c:	dec00204 	addi	sp,sp,8
   11730:	f800283a 	ret

00011734 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   11734:	defffe04 	addi	sp,sp,-8
   11738:	dfc00115 	stw	ra,4(sp)
   1173c:	df000015 	stw	fp,0(sp)
   11740:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   11744:	d0a73743 	ldbu	r2,-25379(gp)
   11748:	10803fcc 	andi	r2,r2,255
   1174c:	10000f1e 	bne	r2,zero,1178c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   11750:	00125d00 	call	125d0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   11754:	d0a73903 	ldbu	r2,-25372(gp)
   11758:	d0a73945 	stb	r2,-25371(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1175c:	d0a73903 	ldbu	r2,-25372(gp)
   11760:	10c03fcc 	andi	r3,r2,255
   11764:	008000f4 	movhi	r2,3
   11768:	10b3e904 	addi	r2,r2,-12380
   1176c:	18c7883a 	add	r3,r3,r3
   11770:	18c7883a 	add	r3,r3,r3
   11774:	10c5883a 	add	r2,r2,r3
   11778:	10800017 	ldw	r2,0(r2)
   1177c:	d0a74115 	stw	r2,-25340(gp)
        OSTCBCur      = OSTCBHighRdy;
   11780:	d0a74117 	ldw	r2,-25340(gp)
   11784:	d0a74615 	stw	r2,-25320(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   11788:	001a5b00 	call	1a5b0 <OSStartHighRdy>
    }
}
   1178c:	0001883a 	nop
   11790:	e037883a 	mov	sp,fp
   11794:	dfc00117 	ldw	ra,4(sp)
   11798:	df000017 	ldw	fp,0(sp)
   1179c:	dec00204 	addi	sp,sp,8
   117a0:	f800283a 	ret

000117a4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   117a4:	defff904 	addi	sp,sp,-28
   117a8:	dfc00615 	stw	ra,24(sp)
   117ac:	df000515 	stw	fp,20(sp)
   117b0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   117b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   117b8:	01000084 	movi	r4,2
   117bc:	0017ea80 	call	17ea8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117c0:	0005303a 	rdctl	r2,status
   117c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   117c8:	e0fffc17 	ldw	r3,-16(fp)
   117cc:	00bfff84 	movi	r2,-2
   117d0:	1884703a 	and	r2,r3,r2
   117d4:	1001703a 	wrctl	status,r2
  
  return context;
   117d8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   117dc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   117e0:	d0273815 	stw	zero,-25376(gp)
   117e4:	e0bffb17 	ldw	r2,-20(fp)
   117e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   117ec:	e0bffd17 	ldw	r2,-12(fp)
   117f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   117f4:	01001904 	movi	r4,100
   117f8:	0017ea80 	call	17ea8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   117fc:	0005303a 	rdctl	r2,status
   11800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11804:	e0fffe17 	ldw	r3,-8(fp)
   11808:	00bfff84 	movi	r2,-2
   1180c:	1884703a 	and	r2,r3,r2
   11810:	1001703a 	wrctl	status,r2
  
  return context;
   11814:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   11818:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   1181c:	d0a73817 	ldw	r2,-25376(gp)
   11820:	d0a73d15 	stw	r2,-25356(gp)
    OSStatRdy    = OS_TRUE;
   11824:	00800044 	movi	r2,1
   11828:	d0a74905 	stb	r2,-25308(gp)
   1182c:	e0bffb17 	ldw	r2,-20(fp)
   11830:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11834:	e0bfff17 	ldw	r2,-4(fp)
   11838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1183c:	0001883a 	nop
   11840:	e037883a 	mov	sp,fp
   11844:	dfc00117 	ldw	ra,4(sp)
   11848:	df000017 	ldw	fp,0(sp)
   1184c:	dec00204 	addi	sp,sp,8
   11850:	f800283a 	ret

00011854 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   11854:	defff704 	addi	sp,sp,-36
   11858:	dfc00815 	stw	ra,32(sp)
   1185c:	df000715 	stw	fp,28(sp)
   11860:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   11864:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   11868:	001a7d80 	call	1a7d8 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1186c:	0005303a 	rdctl	r2,status
   11870:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11874:	e0fffd17 	ldw	r3,-12(fp)
   11878:	00bfff84 	movi	r2,-2
   1187c:	1884703a 	and	r2,r3,r2
   11880:	1001703a 	wrctl	status,r2
  
  return context;
   11884:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   11888:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1188c:	d0a74717 	ldw	r2,-25316(gp)
   11890:	10800044 	addi	r2,r2,1
   11894:	d0a74715 	stw	r2,-25316(gp)
   11898:	e0bffb17 	ldw	r2,-20(fp)
   1189c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   118a0:	e0bfff17 	ldw	r2,-4(fp)
   118a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   118a8:	d0a73743 	ldbu	r2,-25379(gp)
   118ac:	10803fcc 	andi	r2,r2,255
   118b0:	10800058 	cmpnei	r2,r2,1
   118b4:	10006a1e 	bne	r2,zero,11a60 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   118b8:	d0a73b03 	ldbu	r2,-25364(gp)
   118bc:	10803fcc 	andi	r2,r2,255
   118c0:	10c00060 	cmpeqi	r3,r2,1
   118c4:	1800061e 	bne	r3,zero,118e0 <OSTimeTick+0x8c>
   118c8:	10c000a0 	cmpeqi	r3,r2,2
   118cc:	1800061e 	bne	r3,zero,118e8 <OSTimeTick+0x94>
   118d0:	10000a1e 	bne	r2,zero,118fc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   118d4:	00800044 	movi	r2,1
   118d8:	e0bffa05 	stb	r2,-24(fp)
                 break;
   118dc:	00000b06 	br	1190c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   118e0:	e03ffa05 	stb	zero,-24(fp)
                 break;
   118e4:	00000906 	br	1190c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   118e8:	00800044 	movi	r2,1
   118ec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   118f0:	00800044 	movi	r2,1
   118f4:	d0a73b05 	stb	r2,-25364(gp)
                 break;
   118f8:	00000406 	br	1190c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   118fc:	00800044 	movi	r2,1
   11900:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   11904:	d0273b05 	stb	zero,-25364(gp)
                 break;
   11908:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1190c:	e0bffa03 	ldbu	r2,-24(fp)
   11910:	10005226 	beq	r2,zero,11a5c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   11914:	d0a73a17 	ldw	r2,-25368(gp)
   11918:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1191c:	00004906 	br	11a44 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11920:	0005303a 	rdctl	r2,status
   11924:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11928:	e0fffc17 	ldw	r3,-16(fp)
   1192c:	00bfff84 	movi	r2,-2
   11930:	1884703a 	and	r2,r3,r2
   11934:	1001703a 	wrctl	status,r2
  
  return context;
   11938:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   1193c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   11940:	e0bff917 	ldw	r2,-28(fp)
   11944:	10800b8b 	ldhu	r2,46(r2)
   11948:	10bfffcc 	andi	r2,r2,65535
   1194c:	10003626 	beq	r2,zero,11a28 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   11950:	e0bff917 	ldw	r2,-28(fp)
   11954:	10800b8b 	ldhu	r2,46(r2)
   11958:	10bfffc4 	addi	r2,r2,-1
   1195c:	1007883a 	mov	r3,r2
   11960:	e0bff917 	ldw	r2,-28(fp)
   11964:	10c00b8d 	sth	r3,46(r2)
   11968:	e0bff917 	ldw	r2,-28(fp)
   1196c:	10800b8b 	ldhu	r2,46(r2)
   11970:	10bfffcc 	andi	r2,r2,65535
   11974:	10002c1e 	bne	r2,zero,11a28 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   11978:	e0bff917 	ldw	r2,-28(fp)
   1197c:	10800c03 	ldbu	r2,48(r2)
   11980:	10803fcc 	andi	r2,r2,255
   11984:	10800dcc 	andi	r2,r2,55
   11988:	10000b26 	beq	r2,zero,119b8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   1198c:	e0bff917 	ldw	r2,-28(fp)
   11990:	10c00c03 	ldbu	r3,48(r2)
   11994:	00bff204 	movi	r2,-56
   11998:	1884703a 	and	r2,r3,r2
   1199c:	1007883a 	mov	r3,r2
   119a0:	e0bff917 	ldw	r2,-28(fp)
   119a4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   119a8:	e0bff917 	ldw	r2,-28(fp)
   119ac:	00c00044 	movi	r3,1
   119b0:	10c00c45 	stb	r3,49(r2)
   119b4:	00000206 	br	119c0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   119b8:	e0bff917 	ldw	r2,-28(fp)
   119bc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   119c0:	e0bff917 	ldw	r2,-28(fp)
   119c4:	10800c03 	ldbu	r2,48(r2)
   119c8:	10803fcc 	andi	r2,r2,255
   119cc:	1080020c 	andi	r2,r2,8
   119d0:	1000151e 	bne	r2,zero,11a28 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   119d4:	e0bff917 	ldw	r2,-28(fp)
   119d8:	10c00d83 	ldbu	r3,54(r2)
   119dc:	d0a74303 	ldbu	r2,-25332(gp)
   119e0:	1884b03a 	or	r2,r3,r2
   119e4:	d0a74305 	stb	r2,-25332(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   119e8:	e0bff917 	ldw	r2,-28(fp)
   119ec:	10800d03 	ldbu	r2,52(r2)
   119f0:	10c03fcc 	andi	r3,r2,255
   119f4:	e0bff917 	ldw	r2,-28(fp)
   119f8:	10800d03 	ldbu	r2,52(r2)
   119fc:	11003fcc 	andi	r4,r2,255
   11a00:	d0a74344 	addi	r2,gp,-25331
   11a04:	2085883a 	add	r2,r4,r2
   11a08:	11000003 	ldbu	r4,0(r2)
   11a0c:	e0bff917 	ldw	r2,-28(fp)
   11a10:	10800d43 	ldbu	r2,53(r2)
   11a14:	2084b03a 	or	r2,r4,r2
   11a18:	1009883a 	mov	r4,r2
   11a1c:	d0a74344 	addi	r2,gp,-25331
   11a20:	1885883a 	add	r2,r3,r2
   11a24:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   11a28:	e0bff917 	ldw	r2,-28(fp)
   11a2c:	10800517 	ldw	r2,20(r2)
   11a30:	e0bff915 	stw	r2,-28(fp)
   11a34:	e0bffb17 	ldw	r2,-20(fp)
   11a38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a3c:	e0bffe17 	ldw	r2,-8(fp)
   11a40:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   11a44:	e0bff917 	ldw	r2,-28(fp)
   11a48:	10800c83 	ldbu	r2,50(r2)
   11a4c:	10803fcc 	andi	r2,r2,255
   11a50:	10800518 	cmpnei	r2,r2,20
   11a54:	103fb21e 	bne	r2,zero,11920 <__alt_data_end+0xfffe0be0>
   11a58:	00000106 	br	11a60 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   11a5c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   11a60:	e037883a 	mov	sp,fp
   11a64:	dfc00117 	ldw	ra,4(sp)
   11a68:	df000017 	ldw	fp,0(sp)
   11a6c:	dec00204 	addi	sp,sp,8
   11a70:	f800283a 	ret

00011a74 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   11a74:	deffff04 	addi	sp,sp,-4
   11a78:	df000015 	stw	fp,0(sp)
   11a7c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   11a80:	00804784 	movi	r2,286
}
   11a84:	e037883a 	mov	sp,fp
   11a88:	df000017 	ldw	fp,0(sp)
   11a8c:	dec00104 	addi	sp,sp,4
   11a90:	f800283a 	ret

00011a94 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   11a94:	deffff04 	addi	sp,sp,-4
   11a98:	df000015 	stw	fp,0(sp)
   11a9c:	d839883a 	mov	fp,sp
}
   11aa0:	0001883a 	nop
   11aa4:	e037883a 	mov	sp,fp
   11aa8:	df000017 	ldw	fp,0(sp)
   11aac:	dec00104 	addi	sp,sp,4
   11ab0:	f800283a 	ret

00011ab4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   11ab4:	defff804 	addi	sp,sp,-32
   11ab8:	dfc00715 	stw	ra,28(sp)
   11abc:	df000615 	stw	fp,24(sp)
   11ac0:	df000604 	addi	fp,sp,24
   11ac4:	e13ffc15 	stw	r4,-16(fp)
   11ac8:	e17ffd15 	stw	r5,-12(fp)
   11acc:	3007883a 	mov	r3,r6
   11ad0:	3805883a 	mov	r2,r7
   11ad4:	e0fffe05 	stb	r3,-8(fp)
   11ad8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   11adc:	e0bffc17 	ldw	r2,-16(fp)
   11ae0:	10800283 	ldbu	r2,10(r2)
   11ae4:	10c03fcc 	andi	r3,r2,255
   11ae8:	008000b4 	movhi	r2,2
   11aec:	10b6ff04 	addi	r2,r2,-9220
   11af0:	10c5883a 	add	r2,r2,r3
   11af4:	10800003 	ldbu	r2,0(r2)
   11af8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   11afc:	e0bffa03 	ldbu	r2,-24(fp)
   11b00:	e0fffc17 	ldw	r3,-16(fp)
   11b04:	1885883a 	add	r2,r3,r2
   11b08:	108002c4 	addi	r2,r2,11
   11b0c:	10800003 	ldbu	r2,0(r2)
   11b10:	10c03fcc 	andi	r3,r2,255
   11b14:	008000b4 	movhi	r2,2
   11b18:	10b6ff04 	addi	r2,r2,-9220
   11b1c:	10c5883a 	add	r2,r2,r3
   11b20:	10800003 	ldbu	r2,0(r2)
   11b24:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   11b28:	e0bffa03 	ldbu	r2,-24(fp)
   11b2c:	100490fa 	slli	r2,r2,3
   11b30:	1007883a 	mov	r3,r2
   11b34:	e0bffa43 	ldbu	r2,-23(fp)
   11b38:	1885883a 	add	r2,r3,r2
   11b3c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   11b40:	e0fffa83 	ldbu	r3,-22(fp)
   11b44:	008000f4 	movhi	r2,3
   11b48:	10b3e904 	addi	r2,r2,-12380
   11b4c:	18c7883a 	add	r3,r3,r3
   11b50:	18c7883a 	add	r3,r3,r3
   11b54:	10c5883a 	add	r2,r2,r3
   11b58:	10800017 	ldw	r2,0(r2)
   11b5c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   11b60:	e0bffb17 	ldw	r2,-20(fp)
   11b64:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   11b68:	e0bffb17 	ldw	r2,-20(fp)
   11b6c:	e0fffd17 	ldw	r3,-12(fp)
   11b70:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   11b74:	e0bffb17 	ldw	r2,-20(fp)
   11b78:	10800c03 	ldbu	r2,48(r2)
   11b7c:	1007883a 	mov	r3,r2
   11b80:	e0bffe03 	ldbu	r2,-8(fp)
   11b84:	0084303a 	nor	r2,zero,r2
   11b88:	1884703a 	and	r2,r3,r2
   11b8c:	1007883a 	mov	r3,r2
   11b90:	e0bffb17 	ldw	r2,-20(fp)
   11b94:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   11b98:	e0bffb17 	ldw	r2,-20(fp)
   11b9c:	e0ffff03 	ldbu	r3,-4(fp)
   11ba0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   11ba4:	e0bffb17 	ldw	r2,-20(fp)
   11ba8:	10800c03 	ldbu	r2,48(r2)
   11bac:	10803fcc 	andi	r2,r2,255
   11bb0:	1080020c 	andi	r2,r2,8
   11bb4:	1000111e 	bne	r2,zero,11bfc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   11bb8:	e0bffb17 	ldw	r2,-20(fp)
   11bbc:	10c00d83 	ldbu	r3,54(r2)
   11bc0:	d0a74303 	ldbu	r2,-25332(gp)
   11bc4:	1884b03a 	or	r2,r3,r2
   11bc8:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   11bcc:	e0fffa03 	ldbu	r3,-24(fp)
   11bd0:	e13ffa03 	ldbu	r4,-24(fp)
   11bd4:	d0a74344 	addi	r2,gp,-25331
   11bd8:	2085883a 	add	r2,r4,r2
   11bdc:	11000003 	ldbu	r4,0(r2)
   11be0:	e0bffb17 	ldw	r2,-20(fp)
   11be4:	10800d43 	ldbu	r2,53(r2)
   11be8:	2084b03a 	or	r2,r4,r2
   11bec:	1009883a 	mov	r4,r2
   11bf0:	d0a74344 	addi	r2,gp,-25331
   11bf4:	1885883a 	add	r2,r3,r2
   11bf8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   11bfc:	e17ffc17 	ldw	r5,-16(fp)
   11c00:	e13ffb17 	ldw	r4,-20(fp)
   11c04:	0011eac0 	call	11eac <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   11c08:	e0bffb17 	ldw	r2,-20(fp)
   11c0c:	10800817 	ldw	r2,32(r2)
   11c10:	10000826 	beq	r2,zero,11c34 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   11c14:	e0bffb17 	ldw	r2,-20(fp)
   11c18:	10800817 	ldw	r2,32(r2)
   11c1c:	100b883a 	mov	r5,r2
   11c20:	e13ffb17 	ldw	r4,-20(fp)
   11c24:	0011f640 	call	11f64 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   11c28:	e0bffb17 	ldw	r2,-20(fp)
   11c2c:	e0fffc17 	ldw	r3,-16(fp)
   11c30:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   11c34:	e0bffa83 	ldbu	r2,-22(fp)
}
   11c38:	e037883a 	mov	sp,fp
   11c3c:	dfc00117 	ldw	ra,4(sp)
   11c40:	df000017 	ldw	fp,0(sp)
   11c44:	dec00204 	addi	sp,sp,8
   11c48:	f800283a 	ret

00011c4c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   11c4c:	defffd04 	addi	sp,sp,-12
   11c50:	df000215 	stw	fp,8(sp)
   11c54:	df000204 	addi	fp,sp,8
   11c58:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   11c5c:	d0a74617 	ldw	r2,-25320(gp)
   11c60:	e0ffff17 	ldw	r3,-4(fp)
   11c64:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   11c68:	d0a74617 	ldw	r2,-25320(gp)
   11c6c:	10800d03 	ldbu	r2,52(r2)
   11c70:	10803fcc 	andi	r2,r2,255
   11c74:	d0e74617 	ldw	r3,-25320(gp)
   11c78:	18c00d03 	ldbu	r3,52(r3)
   11c7c:	18c03fcc 	andi	r3,r3,255
   11c80:	e13fff17 	ldw	r4,-4(fp)
   11c84:	20c7883a 	add	r3,r4,r3
   11c88:	18c002c4 	addi	r3,r3,11
   11c8c:	19000003 	ldbu	r4,0(r3)
   11c90:	d0e74617 	ldw	r3,-25320(gp)
   11c94:	18c00d43 	ldbu	r3,53(r3)
   11c98:	20c6b03a 	or	r3,r4,r3
   11c9c:	1809883a 	mov	r4,r3
   11ca0:	e0ffff17 	ldw	r3,-4(fp)
   11ca4:	1885883a 	add	r2,r3,r2
   11ca8:	108002c4 	addi	r2,r2,11
   11cac:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11cb0:	e0bfff17 	ldw	r2,-4(fp)
   11cb4:	10c00283 	ldbu	r3,10(r2)
   11cb8:	d0a74617 	ldw	r2,-25320(gp)
   11cbc:	10800d83 	ldbu	r2,54(r2)
   11cc0:	1884b03a 	or	r2,r3,r2
   11cc4:	1007883a 	mov	r3,r2
   11cc8:	e0bfff17 	ldw	r2,-4(fp)
   11ccc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11cd0:	d0a74617 	ldw	r2,-25320(gp)
   11cd4:	10800d03 	ldbu	r2,52(r2)
   11cd8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11cdc:	e0fffe03 	ldbu	r3,-8(fp)
   11ce0:	e13ffe03 	ldbu	r4,-8(fp)
   11ce4:	d0a74344 	addi	r2,gp,-25331
   11ce8:	2085883a 	add	r2,r4,r2
   11cec:	10800003 	ldbu	r2,0(r2)
   11cf0:	1009883a 	mov	r4,r2
   11cf4:	d0a74617 	ldw	r2,-25320(gp)
   11cf8:	10800d43 	ldbu	r2,53(r2)
   11cfc:	0084303a 	nor	r2,zero,r2
   11d00:	2084703a 	and	r2,r4,r2
   11d04:	1009883a 	mov	r4,r2
   11d08:	d0a74344 	addi	r2,gp,-25331
   11d0c:	1885883a 	add	r2,r3,r2
   11d10:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11d14:	e0fffe03 	ldbu	r3,-8(fp)
   11d18:	d0a74344 	addi	r2,gp,-25331
   11d1c:	1885883a 	add	r2,r3,r2
   11d20:	10800003 	ldbu	r2,0(r2)
   11d24:	10803fcc 	andi	r2,r2,255
   11d28:	1000071e 	bne	r2,zero,11d48 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11d2c:	d0a74617 	ldw	r2,-25320(gp)
   11d30:	10800d83 	ldbu	r2,54(r2)
   11d34:	0084303a 	nor	r2,zero,r2
   11d38:	1007883a 	mov	r3,r2
   11d3c:	d0a74303 	ldbu	r2,-25332(gp)
   11d40:	1884703a 	and	r2,r3,r2
   11d44:	d0a74305 	stb	r2,-25332(gp)
    }
}
   11d48:	0001883a 	nop
   11d4c:	e037883a 	mov	sp,fp
   11d50:	df000017 	ldw	fp,0(sp)
   11d54:	dec00104 	addi	sp,sp,4
   11d58:	f800283a 	ret

00011d5c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   11d5c:	defffb04 	addi	sp,sp,-20
   11d60:	df000415 	stw	fp,16(sp)
   11d64:	df000404 	addi	fp,sp,16
   11d68:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   11d6c:	d0a74617 	ldw	r2,-25320(gp)
   11d70:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   11d74:	d0a74617 	ldw	r2,-25320(gp)
   11d78:	e0ffff17 	ldw	r3,-4(fp)
   11d7c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   11d80:	e0bfff17 	ldw	r2,-4(fp)
   11d84:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   11d88:	e0bffc17 	ldw	r2,-16(fp)
   11d8c:	10800017 	ldw	r2,0(r2)
   11d90:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11d94:	00002006 	br	11e18 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   11d98:	d0a74617 	ldw	r2,-25320(gp)
   11d9c:	10800d03 	ldbu	r2,52(r2)
   11da0:	10803fcc 	andi	r2,r2,255
   11da4:	d0e74617 	ldw	r3,-25320(gp)
   11da8:	18c00d03 	ldbu	r3,52(r3)
   11dac:	18c03fcc 	andi	r3,r3,255
   11db0:	e13ffd17 	ldw	r4,-12(fp)
   11db4:	20c7883a 	add	r3,r4,r3
   11db8:	18c002c4 	addi	r3,r3,11
   11dbc:	19000003 	ldbu	r4,0(r3)
   11dc0:	d0e74617 	ldw	r3,-25320(gp)
   11dc4:	18c00d43 	ldbu	r3,53(r3)
   11dc8:	20c6b03a 	or	r3,r4,r3
   11dcc:	1809883a 	mov	r4,r3
   11dd0:	e0fffd17 	ldw	r3,-12(fp)
   11dd4:	1885883a 	add	r2,r3,r2
   11dd8:	108002c4 	addi	r2,r2,11
   11ddc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   11de0:	e0bffd17 	ldw	r2,-12(fp)
   11de4:	10c00283 	ldbu	r3,10(r2)
   11de8:	d0a74617 	ldw	r2,-25320(gp)
   11dec:	10800d83 	ldbu	r2,54(r2)
   11df0:	1884b03a 	or	r2,r3,r2
   11df4:	1007883a 	mov	r3,r2
   11df8:	e0bffd17 	ldw	r2,-12(fp)
   11dfc:	10c00285 	stb	r3,10(r2)
        pevents++;
   11e00:	e0bffc17 	ldw	r2,-16(fp)
   11e04:	10800104 	addi	r2,r2,4
   11e08:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   11e0c:	e0bffc17 	ldw	r2,-16(fp)
   11e10:	10800017 	ldw	r2,0(r2)
   11e14:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   11e18:	e0bffd17 	ldw	r2,-12(fp)
   11e1c:	103fde1e 	bne	r2,zero,11d98 <__alt_data_end+0xfffe1058>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   11e20:	d0a74617 	ldw	r2,-25320(gp)
   11e24:	10800d03 	ldbu	r2,52(r2)
   11e28:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   11e2c:	e0fffe03 	ldbu	r3,-8(fp)
   11e30:	e13ffe03 	ldbu	r4,-8(fp)
   11e34:	d0a74344 	addi	r2,gp,-25331
   11e38:	2085883a 	add	r2,r4,r2
   11e3c:	10800003 	ldbu	r2,0(r2)
   11e40:	1009883a 	mov	r4,r2
   11e44:	d0a74617 	ldw	r2,-25320(gp)
   11e48:	10800d43 	ldbu	r2,53(r2)
   11e4c:	0084303a 	nor	r2,zero,r2
   11e50:	2084703a 	and	r2,r4,r2
   11e54:	1009883a 	mov	r4,r2
   11e58:	d0a74344 	addi	r2,gp,-25331
   11e5c:	1885883a 	add	r2,r3,r2
   11e60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   11e64:	e0fffe03 	ldbu	r3,-8(fp)
   11e68:	d0a74344 	addi	r2,gp,-25331
   11e6c:	1885883a 	add	r2,r3,r2
   11e70:	10800003 	ldbu	r2,0(r2)
   11e74:	10803fcc 	andi	r2,r2,255
   11e78:	1000071e 	bne	r2,zero,11e98 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   11e7c:	d0a74617 	ldw	r2,-25320(gp)
   11e80:	10800d83 	ldbu	r2,54(r2)
   11e84:	0084303a 	nor	r2,zero,r2
   11e88:	1007883a 	mov	r3,r2
   11e8c:	d0a74303 	ldbu	r2,-25332(gp)
   11e90:	1884703a 	and	r2,r3,r2
   11e94:	d0a74305 	stb	r2,-25332(gp)
    }
}
   11e98:	0001883a 	nop
   11e9c:	e037883a 	mov	sp,fp
   11ea0:	df000017 	ldw	fp,0(sp)
   11ea4:	dec00104 	addi	sp,sp,4
   11ea8:	f800283a 	ret

00011eac <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   11eac:	defffc04 	addi	sp,sp,-16
   11eb0:	df000315 	stw	fp,12(sp)
   11eb4:	df000304 	addi	fp,sp,12
   11eb8:	e13ffe15 	stw	r4,-8(fp)
   11ebc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   11ec0:	e0bffe17 	ldw	r2,-8(fp)
   11ec4:	10800d03 	ldbu	r2,52(r2)
   11ec8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   11ecc:	e0bffd03 	ldbu	r2,-12(fp)
   11ed0:	e0fffd03 	ldbu	r3,-12(fp)
   11ed4:	e13fff17 	ldw	r4,-4(fp)
   11ed8:	20c7883a 	add	r3,r4,r3
   11edc:	18c002c4 	addi	r3,r3,11
   11ee0:	18c00003 	ldbu	r3,0(r3)
   11ee4:	1809883a 	mov	r4,r3
   11ee8:	e0fffe17 	ldw	r3,-8(fp)
   11eec:	18c00d43 	ldbu	r3,53(r3)
   11ef0:	00c6303a 	nor	r3,zero,r3
   11ef4:	20c6703a 	and	r3,r4,r3
   11ef8:	1809883a 	mov	r4,r3
   11efc:	e0ffff17 	ldw	r3,-4(fp)
   11f00:	1885883a 	add	r2,r3,r2
   11f04:	108002c4 	addi	r2,r2,11
   11f08:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   11f0c:	e0bffd03 	ldbu	r2,-12(fp)
   11f10:	e0ffff17 	ldw	r3,-4(fp)
   11f14:	1885883a 	add	r2,r3,r2
   11f18:	108002c4 	addi	r2,r2,11
   11f1c:	10800003 	ldbu	r2,0(r2)
   11f20:	10803fcc 	andi	r2,r2,255
   11f24:	10000a1e 	bne	r2,zero,11f50 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   11f28:	e0bfff17 	ldw	r2,-4(fp)
   11f2c:	10800283 	ldbu	r2,10(r2)
   11f30:	1007883a 	mov	r3,r2
   11f34:	e0bffe17 	ldw	r2,-8(fp)
   11f38:	10800d83 	ldbu	r2,54(r2)
   11f3c:	0084303a 	nor	r2,zero,r2
   11f40:	1884703a 	and	r2,r3,r2
   11f44:	1007883a 	mov	r3,r2
   11f48:	e0bfff17 	ldw	r2,-4(fp)
   11f4c:	10c00285 	stb	r3,10(r2)
    }
}
   11f50:	0001883a 	nop
   11f54:	e037883a 	mov	sp,fp
   11f58:	df000017 	ldw	fp,0(sp)
   11f5c:	dec00104 	addi	sp,sp,4
   11f60:	f800283a 	ret

00011f64 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   11f64:	defffa04 	addi	sp,sp,-24
   11f68:	df000515 	stw	fp,20(sp)
   11f6c:	df000504 	addi	fp,sp,20
   11f70:	e13ffe15 	stw	r4,-8(fp)
   11f74:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   11f78:	e0bffe17 	ldw	r2,-8(fp)
   11f7c:	10800d03 	ldbu	r2,52(r2)
   11f80:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   11f84:	e0bffe17 	ldw	r2,-8(fp)
   11f88:	10800d83 	ldbu	r2,54(r2)
   11f8c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   11f90:	e0bffe17 	ldw	r2,-8(fp)
   11f94:	10800d43 	ldbu	r2,53(r2)
   11f98:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   11f9c:	e0bfff17 	ldw	r2,-4(fp)
   11fa0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   11fa4:	e0bffb17 	ldw	r2,-20(fp)
   11fa8:	10800017 	ldw	r2,0(r2)
   11fac:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   11fb0:	00002506 	br	12048 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   11fb4:	e0bffd03 	ldbu	r2,-12(fp)
   11fb8:	e0fffd03 	ldbu	r3,-12(fp)
   11fbc:	e13ffc17 	ldw	r4,-16(fp)
   11fc0:	20c7883a 	add	r3,r4,r3
   11fc4:	18c002c4 	addi	r3,r3,11
   11fc8:	18c00003 	ldbu	r3,0(r3)
   11fcc:	1809883a 	mov	r4,r3
   11fd0:	e0fffd83 	ldbu	r3,-10(fp)
   11fd4:	00c6303a 	nor	r3,zero,r3
   11fd8:	20c6703a 	and	r3,r4,r3
   11fdc:	1809883a 	mov	r4,r3
   11fe0:	e0fffc17 	ldw	r3,-16(fp)
   11fe4:	1885883a 	add	r2,r3,r2
   11fe8:	108002c4 	addi	r2,r2,11
   11fec:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   11ff0:	e0bffd03 	ldbu	r2,-12(fp)
   11ff4:	e0fffc17 	ldw	r3,-16(fp)
   11ff8:	1885883a 	add	r2,r3,r2
   11ffc:	108002c4 	addi	r2,r2,11
   12000:	10800003 	ldbu	r2,0(r2)
   12004:	10803fcc 	andi	r2,r2,255
   12008:	1000091e 	bne	r2,zero,12030 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1200c:	e0bffc17 	ldw	r2,-16(fp)
   12010:	10800283 	ldbu	r2,10(r2)
   12014:	1007883a 	mov	r3,r2
   12018:	e0bffd43 	ldbu	r2,-11(fp)
   1201c:	0084303a 	nor	r2,zero,r2
   12020:	1884703a 	and	r2,r3,r2
   12024:	1007883a 	mov	r3,r2
   12028:	e0bffc17 	ldw	r2,-16(fp)
   1202c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   12030:	e0bffb17 	ldw	r2,-20(fp)
   12034:	10800104 	addi	r2,r2,4
   12038:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1203c:	e0bffb17 	ldw	r2,-20(fp)
   12040:	10800017 	ldw	r2,0(r2)
   12044:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   12048:	e0bffc17 	ldw	r2,-16(fp)
   1204c:	103fd91e 	bne	r2,zero,11fb4 <__alt_data_end+0xfffe1274>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   12050:	0001883a 	nop
   12054:	e037883a 	mov	sp,fp
   12058:	df000017 	ldw	fp,0(sp)
   1205c:	dec00104 	addi	sp,sp,4
   12060:	f800283a 	ret

00012064 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   12064:	defffc04 	addi	sp,sp,-16
   12068:	df000315 	stw	fp,12(sp)
   1206c:	df000304 	addi	fp,sp,12
   12070:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   12074:	e0bfff17 	ldw	r2,-4(fp)
   12078:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1207c:	e0bfff17 	ldw	r2,-4(fp)
   12080:	108002c4 	addi	r2,r2,11
   12084:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   12088:	e03ffe05 	stb	zero,-8(fp)
   1208c:	00000706 	br	120ac <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   12090:	e0bffd17 	ldw	r2,-12(fp)
   12094:	10c00044 	addi	r3,r2,1
   12098:	e0fffd15 	stw	r3,-12(fp)
   1209c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   120a0:	e0bffe03 	ldbu	r2,-8(fp)
   120a4:	10800044 	addi	r2,r2,1
   120a8:	e0bffe05 	stb	r2,-8(fp)
   120ac:	e0bffe03 	ldbu	r2,-8(fp)
   120b0:	108000f0 	cmpltui	r2,r2,3
   120b4:	103ff61e 	bne	r2,zero,12090 <__alt_data_end+0xfffe1350>
        *ptbl++ = 0;
    }
}
   120b8:	0001883a 	nop
   120bc:	e037883a 	mov	sp,fp
   120c0:	df000017 	ldw	fp,0(sp)
   120c4:	dec00104 	addi	sp,sp,4
   120c8:	f800283a 	ret

000120cc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   120cc:	defffb04 	addi	sp,sp,-20
   120d0:	dfc00415 	stw	ra,16(sp)
   120d4:	df000315 	stw	fp,12(sp)
   120d8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   120dc:	0142d004 	movi	r5,2880
   120e0:	010000f4 	movhi	r4,3
   120e4:	212fd504 	addi	r4,r4,-16556
   120e8:	00124440 	call	12444 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   120ec:	008000f4 	movhi	r2,3
   120f0:	10afd504 	addi	r2,r2,-16556
   120f4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   120f8:	008000f4 	movhi	r2,3
   120fc:	10afe104 	addi	r2,r2,-16508
   12100:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   12104:	e03ffd0d 	sth	zero,-12(fp)
   12108:	00001306 	br	12158 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1210c:	e0bffe17 	ldw	r2,-8(fp)
   12110:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   12114:	e0bffe17 	ldw	r2,-8(fp)
   12118:	e0ffff17 	ldw	r3,-4(fp)
   1211c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   12120:	e0bffe17 	ldw	r2,-8(fp)
   12124:	00c00fc4 	movi	r3,63
   12128:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1212c:	e0bffe17 	ldw	r2,-8(fp)
   12130:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   12134:	e0bffe17 	ldw	r2,-8(fp)
   12138:	10800c04 	addi	r2,r2,48
   1213c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   12140:	e0bfff17 	ldw	r2,-4(fp)
   12144:	10800c04 	addi	r2,r2,48
   12148:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1214c:	e0bffd0b 	ldhu	r2,-12(fp)
   12150:	10800044 	addi	r2,r2,1
   12154:	e0bffd0d 	sth	r2,-12(fp)
   12158:	e0bffd0b 	ldhu	r2,-12(fp)
   1215c:	10800ef0 	cmpltui	r2,r2,59
   12160:	103fea1e 	bne	r2,zero,1210c <__alt_data_end+0xfffe13cc>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   12164:	e0bffe17 	ldw	r2,-8(fp)
   12168:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1216c:	e0bffe17 	ldw	r2,-8(fp)
   12170:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   12174:	e0bffe17 	ldw	r2,-8(fp)
   12178:	00c00fc4 	movi	r3,63
   1217c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   12180:	e0bffe17 	ldw	r2,-8(fp)
   12184:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   12188:	008000f4 	movhi	r2,3
   1218c:	10afd504 	addi	r2,r2,-16556
   12190:	d0a74415 	stw	r2,-25328(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   12194:	0001883a 	nop
   12198:	e037883a 	mov	sp,fp
   1219c:	dfc00117 	ldw	ra,4(sp)
   121a0:	df000017 	ldw	fp,0(sp)
   121a4:	dec00204 	addi	sp,sp,8
   121a8:	f800283a 	ret

000121ac <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   121ac:	deffff04 	addi	sp,sp,-4
   121b0:	df000015 	stw	fp,0(sp)
   121b4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   121b8:	d0274715 	stw	zero,-25316(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   121bc:	d0274505 	stb	zero,-25324(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   121c0:	d0273705 	stb	zero,-25380(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   121c4:	d0273f45 	stb	zero,-25347(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   121c8:	d0273745 	stb	zero,-25379(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   121cc:	d0273c15 	stw	zero,-25360(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   121d0:	d0273815 	stw	zero,-25376(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   121d4:	d0274a15 	stw	zero,-25304(gp)
    OSIdleCtrMax  = 0L;
   121d8:	d0273d15 	stw	zero,-25356(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   121dc:	d0274905 	stb	zero,-25308(gp)
#endif
}
   121e0:	0001883a 	nop
   121e4:	e037883a 	mov	sp,fp
   121e8:	df000017 	ldw	fp,0(sp)
   121ec:	dec00104 	addi	sp,sp,4
   121f0:	f800283a 	ret

000121f4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   121f4:	defffd04 	addi	sp,sp,-12
   121f8:	df000215 	stw	fp,8(sp)
   121fc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   12200:	d0274305 	stb	zero,-25332(gp)
    prdytbl       = &OSRdyTbl[0];
   12204:	d0a74344 	addi	r2,gp,-25331
   12208:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1220c:	e03ffe05 	stb	zero,-8(fp)
   12210:	00000706 	br	12230 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   12214:	e0bfff17 	ldw	r2,-4(fp)
   12218:	10c00044 	addi	r3,r2,1
   1221c:	e0ffff15 	stw	r3,-4(fp)
   12220:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   12224:	e0bffe03 	ldbu	r2,-8(fp)
   12228:	10800044 	addi	r2,r2,1
   1222c:	e0bffe05 	stb	r2,-8(fp)
   12230:	e0bffe03 	ldbu	r2,-8(fp)
   12234:	108000f0 	cmpltui	r2,r2,3
   12238:	103ff61e 	bne	r2,zero,12214 <__alt_data_end+0xfffe14d4>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1223c:	d0273945 	stb	zero,-25371(gp)
    OSPrioHighRdy = 0;
   12240:	d0273905 	stb	zero,-25372(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   12244:	d0274115 	stw	zero,-25340(gp)
    OSTCBCur      = (OS_TCB *)0;
   12248:	d0274615 	stw	zero,-25320(gp)
}
   1224c:	0001883a 	nop
   12250:	e037883a 	mov	sp,fp
   12254:	df000017 	ldw	fp,0(sp)
   12258:	dec00104 	addi	sp,sp,4
   1225c:	f800283a 	ret

00012260 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   12260:	defff804 	addi	sp,sp,-32
   12264:	dfc00715 	stw	ra,28(sp)
   12268:	df000615 	stw	fp,24(sp)
   1226c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   12270:	008000c4 	movi	r2,3
   12274:	d8800415 	stw	r2,16(sp)
   12278:	d8000315 	stw	zero,12(sp)
   1227c:	00808004 	movi	r2,512
   12280:	d8800215 	stw	r2,8(sp)
   12284:	008000f4 	movhi	r2,3
   12288:	10add504 	addi	r2,r2,-18604
   1228c:	d8800115 	stw	r2,4(sp)
   12290:	00bfffd4 	movui	r2,65535
   12294:	d8800015 	stw	r2,0(sp)
   12298:	01c00504 	movi	r7,20
   1229c:	018000f4 	movhi	r6,3
   122a0:	31afd404 	addi	r6,r6,-16560
   122a4:	000b883a 	mov	r5,zero
   122a8:	01000074 	movhi	r4,1
   122ac:	2109c304 	addi	r4,r4,9996
   122b0:	0016dd80 	call	16dd8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   122b4:	e1bfff04 	addi	r6,fp,-4
   122b8:	014000b4 	movhi	r5,2
   122bc:	29773f04 	addi	r5,r5,-8964
   122c0:	01000504 	movi	r4,20
   122c4:	00175e80 	call	175e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   122c8:	0001883a 	nop
   122cc:	e037883a 	mov	sp,fp
   122d0:	dfc00117 	ldw	ra,4(sp)
   122d4:	df000017 	ldw	fp,0(sp)
   122d8:	dec00204 	addi	sp,sp,8
   122dc:	f800283a 	ret

000122e0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   122e0:	defff804 	addi	sp,sp,-32
   122e4:	dfc00715 	stw	ra,28(sp)
   122e8:	df000615 	stw	fp,24(sp)
   122ec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   122f0:	008000c4 	movi	r2,3
   122f4:	d8800415 	stw	r2,16(sp)
   122f8:	d8000315 	stw	zero,12(sp)
   122fc:	00808004 	movi	r2,512
   12300:	d8800215 	stw	r2,8(sp)
   12304:	008000f4 	movhi	r2,3
   12308:	10ab5d04 	addi	r2,r2,-21132
   1230c:	d8800115 	stw	r2,4(sp)
   12310:	00bfff94 	movui	r2,65534
   12314:	d8800015 	stw	r2,0(sp)
   12318:	01c004c4 	movi	r7,19
   1231c:	018000f4 	movhi	r6,3
   12320:	31ad5c04 	addi	r6,r6,-19088
   12324:	000b883a 	mov	r5,zero
   12328:	01000074 	movhi	r4,1
   1232c:	2109da04 	addi	r4,r4,10088
   12330:	0016dd80 	call	16dd8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   12334:	e1bfff04 	addi	r6,fp,-4
   12338:	014000b4 	movhi	r5,2
   1233c:	29774304 	addi	r5,r5,-8948
   12340:	010004c4 	movi	r4,19
   12344:	00175e80 	call	175e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   12348:	0001883a 	nop
   1234c:	e037883a 	mov	sp,fp
   12350:	dfc00117 	ldw	ra,4(sp)
   12354:	df000017 	ldw	fp,0(sp)
   12358:	dec00204 	addi	sp,sp,8
   1235c:	f800283a 	ret

00012360 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   12360:	defffb04 	addi	sp,sp,-20
   12364:	dfc00415 	stw	ra,16(sp)
   12368:	df000315 	stw	fp,12(sp)
   1236c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   12370:	01414404 	movi	r5,1296
   12374:	010000f4 	movhi	r4,3
   12378:	2132a504 	addi	r4,r4,-13676
   1237c:	00124440 	call	12444 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   12380:	01401504 	movi	r5,84
   12384:	010000f4 	movhi	r4,3
   12388:	2133e904 	addi	r4,r4,-12380
   1238c:	00124440 	call	12444 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   12390:	008000f4 	movhi	r2,3
   12394:	10b2a504 	addi	r2,r2,-13676
   12398:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1239c:	008000f4 	movhi	r2,3
   123a0:	10b2c004 	addi	r2,r2,-13568
   123a4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   123a8:	e03ffd05 	stb	zero,-12(fp)
   123ac:	00001106 	br	123f4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   123b0:	e0bffe17 	ldw	r2,-8(fp)
   123b4:	e0ffff17 	ldw	r3,-4(fp)
   123b8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   123bc:	e0bffe17 	ldw	r2,-8(fp)
   123c0:	00c00fc4 	movi	r3,63
   123c4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   123c8:	e0bffe17 	ldw	r2,-8(fp)
   123cc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   123d0:	e0bffe17 	ldw	r2,-8(fp)
   123d4:	10801b04 	addi	r2,r2,108
   123d8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   123dc:	e0bfff17 	ldw	r2,-4(fp)
   123e0:	10801b04 	addi	r2,r2,108
   123e4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   123e8:	e0bffd03 	ldbu	r2,-12(fp)
   123ec:	10800044 	addi	r2,r2,1
   123f0:	e0bffd05 	stb	r2,-12(fp)
   123f4:	e0bffd03 	ldbu	r2,-12(fp)
   123f8:	108002f0 	cmpltui	r2,r2,11
   123fc:	103fec1e 	bne	r2,zero,123b0 <__alt_data_end+0xfffe1670>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   12400:	e0bffe17 	ldw	r2,-8(fp)
   12404:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   12408:	e0bffe17 	ldw	r2,-8(fp)
   1240c:	00c00fc4 	movi	r3,63
   12410:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   12414:	e0bffe17 	ldw	r2,-8(fp)
   12418:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1241c:	d0273a15 	stw	zero,-25368(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   12420:	008000f4 	movhi	r2,3
   12424:	10b2a504 	addi	r2,r2,-13676
   12428:	d0a73e15 	stw	r2,-25352(gp)
}
   1242c:	0001883a 	nop
   12430:	e037883a 	mov	sp,fp
   12434:	dfc00117 	ldw	ra,4(sp)
   12438:	df000017 	ldw	fp,0(sp)
   1243c:	dec00204 	addi	sp,sp,8
   12440:	f800283a 	ret

00012444 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   12444:	defffd04 	addi	sp,sp,-12
   12448:	df000215 	stw	fp,8(sp)
   1244c:	df000204 	addi	fp,sp,8
   12450:	e13ffe15 	stw	r4,-8(fp)
   12454:	2805883a 	mov	r2,r5
   12458:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1245c:	00000706 	br	1247c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   12460:	e0bffe17 	ldw	r2,-8(fp)
   12464:	10c00044 	addi	r3,r2,1
   12468:	e0fffe15 	stw	r3,-8(fp)
   1246c:	10000005 	stb	zero,0(r2)
        size--;
   12470:	e0bfff0b 	ldhu	r2,-4(fp)
   12474:	10bfffc4 	addi	r2,r2,-1
   12478:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1247c:	e0bfff0b 	ldhu	r2,-4(fp)
   12480:	103ff71e 	bne	r2,zero,12460 <__alt_data_end+0xfffe1720>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   12484:	0001883a 	nop
   12488:	e037883a 	mov	sp,fp
   1248c:	df000017 	ldw	fp,0(sp)
   12490:	dec00104 	addi	sp,sp,4
   12494:	f800283a 	ret

00012498 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   12498:	defffc04 	addi	sp,sp,-16
   1249c:	df000315 	stw	fp,12(sp)
   124a0:	df000304 	addi	fp,sp,12
   124a4:	e13ffd15 	stw	r4,-12(fp)
   124a8:	e17ffe15 	stw	r5,-8(fp)
   124ac:	3005883a 	mov	r2,r6
   124b0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   124b4:	00000b06 	br	124e4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   124b8:	e0bffd17 	ldw	r2,-12(fp)
   124bc:	10c00044 	addi	r3,r2,1
   124c0:	e0fffd15 	stw	r3,-12(fp)
   124c4:	e0fffe17 	ldw	r3,-8(fp)
   124c8:	19000044 	addi	r4,r3,1
   124cc:	e13ffe15 	stw	r4,-8(fp)
   124d0:	18c00003 	ldbu	r3,0(r3)
   124d4:	10c00005 	stb	r3,0(r2)
        size--;
   124d8:	e0bfff0b 	ldhu	r2,-4(fp)
   124dc:	10bfffc4 	addi	r2,r2,-1
   124e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   124e4:	e0bfff0b 	ldhu	r2,-4(fp)
   124e8:	103ff31e 	bne	r2,zero,124b8 <__alt_data_end+0xfffe1778>
        *pdest++ = *psrc++;
        size--;
    }
}
   124ec:	0001883a 	nop
   124f0:	e037883a 	mov	sp,fp
   124f4:	df000017 	ldw	fp,0(sp)
   124f8:	dec00104 	addi	sp,sp,4
   124fc:	f800283a 	ret

00012500 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   12500:	defffb04 	addi	sp,sp,-20
   12504:	dfc00415 	stw	ra,16(sp)
   12508:	df000315 	stw	fp,12(sp)
   1250c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   12510:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12514:	0005303a 	rdctl	r2,status
   12518:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1251c:	e0ffff17 	ldw	r3,-4(fp)
   12520:	00bfff84 	movi	r2,-2
   12524:	1884703a 	and	r2,r3,r2
   12528:	1001703a 	wrctl	status,r2
  
  return context;
   1252c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   12530:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   12534:	d0a74503 	ldbu	r2,-25324(gp)
   12538:	10803fcc 	andi	r2,r2,255
   1253c:	10001a1e 	bne	r2,zero,125a8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   12540:	d0a73703 	ldbu	r2,-25380(gp)
   12544:	10803fcc 	andi	r2,r2,255
   12548:	1000171e 	bne	r2,zero,125a8 <OS_Sched+0xa8>
            OS_SchedNew();
   1254c:	00125d00 	call	125d0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   12550:	d0e73903 	ldbu	r3,-25372(gp)
   12554:	d0a73943 	ldbu	r2,-25371(gp)
   12558:	18c03fcc 	andi	r3,r3,255
   1255c:	10803fcc 	andi	r2,r2,255
   12560:	18801126 	beq	r3,r2,125a8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   12564:	d0a73903 	ldbu	r2,-25372(gp)
   12568:	10c03fcc 	andi	r3,r2,255
   1256c:	008000f4 	movhi	r2,3
   12570:	10b3e904 	addi	r2,r2,-12380
   12574:	18c7883a 	add	r3,r3,r3
   12578:	18c7883a 	add	r3,r3,r3
   1257c:	10c5883a 	add	r2,r2,r3
   12580:	10800017 	ldw	r2,0(r2)
   12584:	d0a74115 	stw	r2,-25340(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   12588:	d0a74117 	ldw	r2,-25340(gp)
   1258c:	10c00e17 	ldw	r3,56(r2)
   12590:	18c00044 	addi	r3,r3,1
   12594:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   12598:	d0a73c17 	ldw	r2,-25360(gp)
   1259c:	10800044 	addi	r2,r2,1
   125a0:	d0a73c15 	stw	r2,-25360(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   125a4:	001a5240 	call	1a524 <OSCtxSw>
   125a8:	e0bffd17 	ldw	r2,-12(fp)
   125ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   125b0:	e0bffe17 	ldw	r2,-8(fp)
   125b4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   125b8:	0001883a 	nop
   125bc:	e037883a 	mov	sp,fp
   125c0:	dfc00117 	ldw	ra,4(sp)
   125c4:	df000017 	ldw	fp,0(sp)
   125c8:	dec00204 	addi	sp,sp,8
   125cc:	f800283a 	ret

000125d0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   125d0:	defffe04 	addi	sp,sp,-8
   125d4:	df000115 	stw	fp,4(sp)
   125d8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   125dc:	d0a74303 	ldbu	r2,-25332(gp)
   125e0:	10c03fcc 	andi	r3,r2,255
   125e4:	008000b4 	movhi	r2,2
   125e8:	10b6ff04 	addi	r2,r2,-9220
   125ec:	10c5883a 	add	r2,r2,r3
   125f0:	10800003 	ldbu	r2,0(r2)
   125f4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   125f8:	e0bfff03 	ldbu	r2,-4(fp)
   125fc:	100490fa 	slli	r2,r2,3
   12600:	1009883a 	mov	r4,r2
   12604:	e0ffff03 	ldbu	r3,-4(fp)
   12608:	d0a74344 	addi	r2,gp,-25331
   1260c:	1885883a 	add	r2,r3,r2
   12610:	10800003 	ldbu	r2,0(r2)
   12614:	10c03fcc 	andi	r3,r2,255
   12618:	008000b4 	movhi	r2,2
   1261c:	10b6ff04 	addi	r2,r2,-9220
   12620:	10c5883a 	add	r2,r2,r3
   12624:	10800003 	ldbu	r2,0(r2)
   12628:	2085883a 	add	r2,r4,r2
   1262c:	d0a73905 	stb	r2,-25372(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   12630:	0001883a 	nop
   12634:	e037883a 	mov	sp,fp
   12638:	df000017 	ldw	fp,0(sp)
   1263c:	dec00104 	addi	sp,sp,4
   12640:	f800283a 	ret

00012644 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   12644:	defffc04 	addi	sp,sp,-16
   12648:	df000315 	stw	fp,12(sp)
   1264c:	df000304 	addi	fp,sp,12
   12650:	e13ffe15 	stw	r4,-8(fp)
   12654:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   12658:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1265c:	00000b06 	br	1268c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   12660:	e0bffe17 	ldw	r2,-8(fp)
   12664:	10c00044 	addi	r3,r2,1
   12668:	e0fffe15 	stw	r3,-8(fp)
   1266c:	e0ffff17 	ldw	r3,-4(fp)
   12670:	19000044 	addi	r4,r3,1
   12674:	e13fff15 	stw	r4,-4(fp)
   12678:	18c00003 	ldbu	r3,0(r3)
   1267c:	10c00005 	stb	r3,0(r2)
        len++;
   12680:	e0bffd03 	ldbu	r2,-12(fp)
   12684:	10800044 	addi	r2,r2,1
   12688:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1268c:	e0bfff17 	ldw	r2,-4(fp)
   12690:	10800003 	ldbu	r2,0(r2)
   12694:	10803fcc 	andi	r2,r2,255
   12698:	103ff11e 	bne	r2,zero,12660 <__alt_data_end+0xfffe1920>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1269c:	e0bffe17 	ldw	r2,-8(fp)
   126a0:	10000005 	stb	zero,0(r2)
    return (len);
   126a4:	e0bffd03 	ldbu	r2,-12(fp)
}
   126a8:	e037883a 	mov	sp,fp
   126ac:	df000017 	ldw	fp,0(sp)
   126b0:	dec00104 	addi	sp,sp,4
   126b4:	f800283a 	ret

000126b8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   126b8:	defffd04 	addi	sp,sp,-12
   126bc:	df000215 	stw	fp,8(sp)
   126c0:	df000204 	addi	fp,sp,8
   126c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   126c8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   126cc:	00000606 	br	126e8 <OS_StrLen+0x30>
        psrc++;
   126d0:	e0bfff17 	ldw	r2,-4(fp)
   126d4:	10800044 	addi	r2,r2,1
   126d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
   126dc:	e0bffe03 	ldbu	r2,-8(fp)
   126e0:	10800044 	addi	r2,r2,1
   126e4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   126e8:	e0bfff17 	ldw	r2,-4(fp)
   126ec:	10800003 	ldbu	r2,0(r2)
   126f0:	10803fcc 	andi	r2,r2,255
   126f4:	103ff61e 	bne	r2,zero,126d0 <__alt_data_end+0xfffe1990>
        psrc++;
        len++;
    }
    return (len);
   126f8:	e0bffe03 	ldbu	r2,-8(fp)
}
   126fc:	e037883a 	mov	sp,fp
   12700:	df000017 	ldw	fp,0(sp)
   12704:	dec00104 	addi	sp,sp,4
   12708:	f800283a 	ret

0001270c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1270c:	defffa04 	addi	sp,sp,-24
   12710:	dfc00515 	stw	ra,20(sp)
   12714:	df000415 	stw	fp,16(sp)
   12718:	df000404 	addi	fp,sp,16
   1271c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   12720:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12724:	0005303a 	rdctl	r2,status
   12728:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1272c:	e0fffd17 	ldw	r3,-12(fp)
   12730:	00bfff84 	movi	r2,-2
   12734:	1884703a 	and	r2,r3,r2
   12738:	1001703a 	wrctl	status,r2
  
  return context;
   1273c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   12740:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   12744:	d0a73817 	ldw	r2,-25376(gp)
   12748:	10800044 	addi	r2,r2,1
   1274c:	d0a73815 	stw	r2,-25376(gp)
   12750:	e0bffc17 	ldw	r2,-16(fp)
   12754:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12758:	e0bffe17 	ldw	r2,-8(fp)
   1275c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   12760:	001a8380 	call	1a838 <OSTaskIdleHook>
    }
   12764:	003fef06 	br	12724 <__alt_data_end+0xfffe19e4>

00012768 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   12768:	defffa04 	addi	sp,sp,-24
   1276c:	dfc00515 	stw	ra,20(sp)
   12770:	df000415 	stw	fp,16(sp)
   12774:	df000404 	addi	fp,sp,16
   12778:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1277c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   12780:	00000206 	br	1278c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   12784:	01003204 	movi	r4,200
   12788:	0017ea80 	call	17ea8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1278c:	d0a74903 	ldbu	r2,-25308(gp)
   12790:	10803fcc 	andi	r2,r2,255
   12794:	103ffb26 	beq	r2,zero,12784 <__alt_data_end+0xfffe1a44>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   12798:	d0a73d17 	ldw	r2,-25356(gp)
   1279c:	01401904 	movi	r5,100
   127a0:	1009883a 	mov	r4,r2
   127a4:	0002e880 	call	2e88 <__udivsi3>
   127a8:	d0a73d15 	stw	r2,-25356(gp)
    if (OSIdleCtrMax == 0L) {
   127ac:	d0a73d17 	ldw	r2,-25356(gp)
   127b0:	1000031e 	bne	r2,zero,127c0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
   127b4:	d0273f05 	stb	zero,-25348(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   127b8:	01003fc4 	movi	r4,255
   127bc:	0017b300 	call	17b30 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   127c0:	0005303a 	rdctl	r2,status
   127c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   127c8:	e0fffd17 	ldw	r3,-12(fp)
   127cc:	00bfff84 	movi	r2,-2
   127d0:	1884703a 	and	r2,r3,r2
   127d4:	1001703a 	wrctl	status,r2
  
  return context;
   127d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   127dc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   127e0:	d0a73817 	ldw	r2,-25376(gp)
   127e4:	d0a74a15 	stw	r2,-25304(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   127e8:	d0273815 	stw	zero,-25376(gp)
   127ec:	e0bffc17 	ldw	r2,-16(fp)
   127f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   127f4:	e0bffe17 	ldw	r2,-8(fp)
   127f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   127fc:	d0a74a17 	ldw	r2,-25304(gp)
   12800:	d0e73d17 	ldw	r3,-25356(gp)
   12804:	180b883a 	mov	r5,r3
   12808:	1009883a 	mov	r4,r2
   1280c:	0002e880 	call	2e88 <__udivsi3>
   12810:	1007883a 	mov	r3,r2
   12814:	00801904 	movi	r2,100
   12818:	10c5c83a 	sub	r2,r2,r3
   1281c:	d0a73f05 	stb	r2,-25348(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   12820:	001a7b80 	call	1a7b8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   12824:	00128340 	call	12834 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   12828:	01001904 	movi	r4,100
   1282c:	0017ea80 	call	17ea8 <OSTimeDly>
    }
   12830:	003fe306 	br	127c0 <__alt_data_end+0xfffe1a80>

00012834 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   12834:	defffa04 	addi	sp,sp,-24
   12838:	dfc00515 	stw	ra,20(sp)
   1283c:	df000415 	stw	fp,16(sp)
   12840:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   12844:	e03ffc05 	stb	zero,-16(fp)
   12848:	00002406 	br	128dc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1284c:	e0bffc03 	ldbu	r2,-16(fp)
   12850:	e0fffe04 	addi	r3,fp,-8
   12854:	180b883a 	mov	r5,r3
   12858:	1009883a 	mov	r4,r2
   1285c:	00179700 	call	17970 <OSTaskStkChk>
   12860:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   12864:	e0bffc43 	ldbu	r2,-15(fp)
   12868:	1000191e 	bne	r2,zero,128d0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1286c:	e0fffc03 	ldbu	r3,-16(fp)
   12870:	008000f4 	movhi	r2,3
   12874:	10b3e904 	addi	r2,r2,-12380
   12878:	18c7883a 	add	r3,r3,r3
   1287c:	18c7883a 	add	r3,r3,r3
   12880:	10c5883a 	add	r2,r2,r3
   12884:	10800017 	ldw	r2,0(r2)
   12888:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1288c:	e0bffd17 	ldw	r2,-12(fp)
   12890:	10000f26 	beq	r2,zero,128d0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   12894:	e0bffd17 	ldw	r2,-12(fp)
   12898:	10800060 	cmpeqi	r2,r2,1
   1289c:	10000c1e 	bne	r2,zero,128d0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   128a0:	e0bffd17 	ldw	r2,-12(fp)
   128a4:	10c00217 	ldw	r3,8(r2)
   128a8:	e0bffd17 	ldw	r2,-12(fp)
   128ac:	10800317 	ldw	r2,12(r2)
   128b0:	1085883a 	add	r2,r2,r2
   128b4:	1085883a 	add	r2,r2,r2
   128b8:	1887883a 	add	r3,r3,r2
   128bc:	e0bffd17 	ldw	r2,-12(fp)
   128c0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   128c4:	e0ffff17 	ldw	r3,-4(fp)
   128c8:	e0bffd17 	ldw	r2,-12(fp)
   128cc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   128d0:	e0bffc03 	ldbu	r2,-16(fp)
   128d4:	10800044 	addi	r2,r2,1
   128d8:	e0bffc05 	stb	r2,-16(fp)
   128dc:	e0bffc03 	ldbu	r2,-16(fp)
   128e0:	10800570 	cmpltui	r2,r2,21
   128e4:	103fd91e 	bne	r2,zero,1284c <__alt_data_end+0xfffe1b0c>
#endif
                }
            }
        }
    }
}
   128e8:	0001883a 	nop
   128ec:	e037883a 	mov	sp,fp
   128f0:	dfc00117 	ldw	ra,4(sp)
   128f4:	df000017 	ldw	fp,0(sp)
   128f8:	dec00204 	addi	sp,sp,8
   128fc:	f800283a 	ret

00012900 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   12900:	defff204 	addi	sp,sp,-56
   12904:	dfc00d15 	stw	ra,52(sp)
   12908:	df000c15 	stw	fp,48(sp)
   1290c:	df000c04 	addi	fp,sp,48
   12910:	e17ffc15 	stw	r5,-16(fp)
   12914:	e1bffd15 	stw	r6,-12(fp)
   12918:	3807883a 	mov	r3,r7
   1291c:	e0800417 	ldw	r2,16(fp)
   12920:	e13ffb05 	stb	r4,-20(fp)
   12924:	e0fffe0d 	sth	r3,-8(fp)
   12928:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1292c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12930:	0005303a 	rdctl	r2,status
   12934:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12938:	e0fffa17 	ldw	r3,-24(fp)
   1293c:	00bfff84 	movi	r2,-2
   12940:	1884703a 	and	r2,r3,r2
   12944:	1001703a 	wrctl	status,r2
  
  return context;
   12948:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1294c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   12950:	d0a73e17 	ldw	r2,-25352(gp)
   12954:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   12958:	e0bff617 	ldw	r2,-40(fp)
   1295c:	10009326 	beq	r2,zero,12bac <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   12960:	e0bff617 	ldw	r2,-40(fp)
   12964:	10800517 	ldw	r2,20(r2)
   12968:	d0a73e15 	stw	r2,-25352(gp)
   1296c:	e0bff417 	ldw	r2,-48(fp)
   12970:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12974:	e0bff817 	ldw	r2,-32(fp)
   12978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1297c:	e0bff617 	ldw	r2,-40(fp)
   12980:	e0fffc17 	ldw	r3,-16(fp)
   12984:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   12988:	e0bff617 	ldw	r2,-40(fp)
   1298c:	e0fffb03 	ldbu	r3,-20(fp)
   12990:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   12994:	e0bff617 	ldw	r2,-40(fp)
   12998:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1299c:	e0bff617 	ldw	r2,-40(fp)
   129a0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   129a4:	e0bff617 	ldw	r2,-40(fp)
   129a8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   129ac:	e0bff617 	ldw	r2,-40(fp)
   129b0:	e0c00317 	ldw	r3,12(fp)
   129b4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   129b8:	e0bff617 	ldw	r2,-40(fp)
   129bc:	e0c00217 	ldw	r3,8(fp)
   129c0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   129c4:	e0bff617 	ldw	r2,-40(fp)
   129c8:	e0fffd17 	ldw	r3,-12(fp)
   129cc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   129d0:	e0bff617 	ldw	r2,-40(fp)
   129d4:	e0ffff0b 	ldhu	r3,-4(fp)
   129d8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   129dc:	e0bff617 	ldw	r2,-40(fp)
   129e0:	e0fffe0b 	ldhu	r3,-8(fp)
   129e4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   129e8:	e0bff617 	ldw	r2,-40(fp)
   129ec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   129f0:	e0bffb03 	ldbu	r2,-20(fp)
   129f4:	1004d0fa 	srli	r2,r2,3
   129f8:	1007883a 	mov	r3,r2
   129fc:	e0bff617 	ldw	r2,-40(fp)
   12a00:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   12a04:	e0bffb03 	ldbu	r2,-20(fp)
   12a08:	108001cc 	andi	r2,r2,7
   12a0c:	1007883a 	mov	r3,r2
   12a10:	e0bff617 	ldw	r2,-40(fp)
   12a14:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   12a18:	e0bff617 	ldw	r2,-40(fp)
   12a1c:	10800d03 	ldbu	r2,52(r2)
   12a20:	10803fcc 	andi	r2,r2,255
   12a24:	00c00044 	movi	r3,1
   12a28:	1884983a 	sll	r2,r3,r2
   12a2c:	1007883a 	mov	r3,r2
   12a30:	e0bff617 	ldw	r2,-40(fp)
   12a34:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   12a38:	e0bff617 	ldw	r2,-40(fp)
   12a3c:	10800cc3 	ldbu	r2,51(r2)
   12a40:	10803fcc 	andi	r2,r2,255
   12a44:	00c00044 	movi	r3,1
   12a48:	1884983a 	sll	r2,r3,r2
   12a4c:	1007883a 	mov	r3,r2
   12a50:	e0bff617 	ldw	r2,-40(fp)
   12a54:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   12a58:	e0bff617 	ldw	r2,-40(fp)
   12a5c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   12a60:	e0bff617 	ldw	r2,-40(fp)
   12a64:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   12a68:	e0bff617 	ldw	r2,-40(fp)
   12a6c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   12a70:	e0bff617 	ldw	r2,-40(fp)
   12a74:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   12a78:	e0bff617 	ldw	r2,-40(fp)
   12a7c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   12a80:	e0bff617 	ldw	r2,-40(fp)
   12a84:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   12a88:	e0bff617 	ldw	r2,-40(fp)
   12a8c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   12a90:	e0bff617 	ldw	r2,-40(fp)
   12a94:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   12a98:	e0bff617 	ldw	r2,-40(fp)
   12a9c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   12aa0:	e0bff617 	ldw	r2,-40(fp)
   12aa4:	00c00fc4 	movi	r3,63
   12aa8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   12aac:	e0bff617 	ldw	r2,-40(fp)
   12ab0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   12ab4:	e13ff617 	ldw	r4,-40(fp)
   12ab8:	001a8580 	call	1a858 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   12abc:	e13ff617 	ldw	r4,-40(fp)
   12ac0:	001a7500 	call	1a750 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12ac4:	0005303a 	rdctl	r2,status
   12ac8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12acc:	e0fff517 	ldw	r3,-44(fp)
   12ad0:	00bfff84 	movi	r2,-2
   12ad4:	1884703a 	and	r2,r3,r2
   12ad8:	1001703a 	wrctl	status,r2
  
  return context;
   12adc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   12ae0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   12ae4:	e0fffb03 	ldbu	r3,-20(fp)
   12ae8:	008000f4 	movhi	r2,3
   12aec:	10b3e904 	addi	r2,r2,-12380
   12af0:	18c7883a 	add	r3,r3,r3
   12af4:	18c7883a 	add	r3,r3,r3
   12af8:	10c5883a 	add	r2,r2,r3
   12afc:	e0fff617 	ldw	r3,-40(fp)
   12b00:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   12b04:	d0e73a17 	ldw	r3,-25368(gp)
   12b08:	e0bff617 	ldw	r2,-40(fp)
   12b0c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   12b10:	e0bff617 	ldw	r2,-40(fp)
   12b14:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   12b18:	d0a73a17 	ldw	r2,-25368(gp)
   12b1c:	10000326 	beq	r2,zero,12b2c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   12b20:	d0a73a17 	ldw	r2,-25368(gp)
   12b24:	e0fff617 	ldw	r3,-40(fp)
   12b28:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   12b2c:	e0bff617 	ldw	r2,-40(fp)
   12b30:	d0a73a15 	stw	r2,-25368(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   12b34:	e0bff617 	ldw	r2,-40(fp)
   12b38:	10c00d83 	ldbu	r3,54(r2)
   12b3c:	d0a74303 	ldbu	r2,-25332(gp)
   12b40:	1884b03a 	or	r2,r3,r2
   12b44:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   12b48:	e0bff617 	ldw	r2,-40(fp)
   12b4c:	10800d03 	ldbu	r2,52(r2)
   12b50:	10c03fcc 	andi	r3,r2,255
   12b54:	e0bff617 	ldw	r2,-40(fp)
   12b58:	10800d03 	ldbu	r2,52(r2)
   12b5c:	11003fcc 	andi	r4,r2,255
   12b60:	d0a74344 	addi	r2,gp,-25331
   12b64:	2085883a 	add	r2,r4,r2
   12b68:	11000003 	ldbu	r4,0(r2)
   12b6c:	e0bff617 	ldw	r2,-40(fp)
   12b70:	10800d43 	ldbu	r2,53(r2)
   12b74:	2084b03a 	or	r2,r4,r2
   12b78:	1009883a 	mov	r4,r2
   12b7c:	d0a74344 	addi	r2,gp,-25331
   12b80:	1885883a 	add	r2,r3,r2
   12b84:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   12b88:	d0a73f43 	ldbu	r2,-25347(gp)
   12b8c:	10800044 	addi	r2,r2,1
   12b90:	d0a73f45 	stb	r2,-25347(gp)
   12b94:	e0bff417 	ldw	r2,-48(fp)
   12b98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12b9c:	e0bff717 	ldw	r2,-36(fp)
   12ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   12ba4:	0005883a 	mov	r2,zero
   12ba8:	00000506 	br	12bc0 <OS_TCBInit+0x2c0>
   12bac:	e0bff417 	ldw	r2,-48(fp)
   12bb0:	e0bff915 	stw	r2,-28(fp)
   12bb4:	e0bff917 	ldw	r2,-28(fp)
   12bb8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   12bbc:	00801084 	movi	r2,66
}
   12bc0:	e037883a 	mov	sp,fp
   12bc4:	dfc00117 	ldw	ra,4(sp)
   12bc8:	df000017 	ldw	fp,0(sp)
   12bcc:	dec00204 	addi	sp,sp,8
   12bd0:	f800283a 	ret

00012bd4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   12bd4:	defffe04 	addi	sp,sp,-8
   12bd8:	df000115 	stw	fp,4(sp)
   12bdc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   12be0:	d0a01004 	addi	r2,gp,-32704
   12be4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   12be8:	d0a01104 	addi	r2,gp,-32700
   12bec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   12bf0:	d0a01284 	addi	r2,gp,-32694
   12bf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   12bf8:	d0a01304 	addi	r2,gp,-32692
   12bfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   12c00:	d0a01204 	addi	r2,gp,-32696
   12c04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   12c08:	d0a01384 	addi	r2,gp,-32690
   12c0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   12c10:	d0a01404 	addi	r2,gp,-32688
   12c14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   12c18:	d0a01484 	addi	r2,gp,-32686
   12c1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   12c20:	d0a01504 	addi	r2,gp,-32684
   12c24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   12c28:	d0a01584 	addi	r2,gp,-32682
   12c2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   12c30:	d0a01604 	addi	r2,gp,-32680
   12c34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   12c38:	d0a01684 	addi	r2,gp,-32678
   12c3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   12c40:	d0a01704 	addi	r2,gp,-32676
   12c44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   12c48:	d0a01784 	addi	r2,gp,-32674
   12c4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   12c50:	d0a01804 	addi	r2,gp,-32672
   12c54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   12c58:	d0a01884 	addi	r2,gp,-32670
   12c5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   12c60:	d0a01904 	addi	r2,gp,-32668
   12c64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   12c68:	d0a01984 	addi	r2,gp,-32666
   12c6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   12c70:	d0a01a04 	addi	r2,gp,-32664
   12c74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   12c78:	d0a01a84 	addi	r2,gp,-32662
   12c7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   12c80:	d0a01b04 	addi	r2,gp,-32660
   12c84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   12c88:	d0a01b84 	addi	r2,gp,-32658
   12c8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   12c90:	d0a01c04 	addi	r2,gp,-32656
   12c94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   12c98:	d0a01c84 	addi	r2,gp,-32654
   12c9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   12ca0:	d0a01d04 	addi	r2,gp,-32652
   12ca4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   12ca8:	d0a01d84 	addi	r2,gp,-32650
   12cac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   12cb0:	d0a01e04 	addi	r2,gp,-32648
   12cb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   12cb8:	d0a01e84 	addi	r2,gp,-32646
   12cbc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   12cc0:	d0a01f04 	addi	r2,gp,-32644
   12cc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   12cc8:	d0a01f84 	addi	r2,gp,-32642
   12ccc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   12cd0:	d0a02004 	addi	r2,gp,-32640
   12cd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   12cd8:	d0a02084 	addi	r2,gp,-32638
   12cdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   12ce0:	d0a02104 	addi	r2,gp,-32636
   12ce4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   12ce8:	d0a02184 	addi	r2,gp,-32634
   12cec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   12cf0:	d0a02204 	addi	r2,gp,-32632
   12cf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   12cf8:	d0a02284 	addi	r2,gp,-32630
   12cfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   12d00:	d0a02304 	addi	r2,gp,-32628
   12d04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   12d08:	d0a02384 	addi	r2,gp,-32626
   12d0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   12d10:	d0a02404 	addi	r2,gp,-32624
   12d14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   12d18:	d0a02484 	addi	r2,gp,-32622
   12d1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   12d20:	d0a02504 	addi	r2,gp,-32620
   12d24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   12d28:	d0a02584 	addi	r2,gp,-32618
   12d2c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   12d30:	d0a02604 	addi	r2,gp,-32616
   12d34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   12d38:	d0a02684 	addi	r2,gp,-32614
   12d3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   12d40:	d0a02704 	addi	r2,gp,-32612
   12d44:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   12d48:	d0a02c04 	addi	r2,gp,-32592
   12d4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   12d50:	0001883a 	nop
   12d54:	e037883a 	mov	sp,fp
   12d58:	df000017 	ldw	fp,0(sp)
   12d5c:	dec00104 	addi	sp,sp,4
   12d60:	f800283a 	ret

00012d64 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   12d64:	defff204 	addi	sp,sp,-56
   12d68:	df000d15 	stw	fp,52(sp)
   12d6c:	df000d04 	addi	fp,sp,52
   12d70:	e13ffc15 	stw	r4,-16(fp)
   12d74:	2807883a 	mov	r3,r5
   12d78:	3005883a 	mov	r2,r6
   12d7c:	e1ffff15 	stw	r7,-4(fp)
   12d80:	e0fffd0d 	sth	r3,-12(fp)
   12d84:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   12d88:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   12d8c:	e0bfff17 	ldw	r2,-4(fp)
   12d90:	1000021e 	bne	r2,zero,12d9c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   12d94:	0005883a 	mov	r2,zero
   12d98:	0000b006 	br	1305c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   12d9c:	e0bffc17 	ldw	r2,-16(fp)
   12da0:	1000051e 	bne	r2,zero,12db8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   12da4:	e0bfff17 	ldw	r2,-4(fp)
   12da8:	00c01b84 	movi	r3,110
   12dac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12db0:	0005883a 	mov	r2,zero
   12db4:	0000a906 	br	1305c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   12db8:	e0bffc17 	ldw	r2,-16(fp)
   12dbc:	10800003 	ldbu	r2,0(r2)
   12dc0:	10803fcc 	andi	r2,r2,255
   12dc4:	10800160 	cmpeqi	r2,r2,5
   12dc8:	1000051e 	bne	r2,zero,12de0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   12dcc:	e0bfff17 	ldw	r2,-4(fp)
   12dd0:	00c00044 	movi	r3,1
   12dd4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   12dd8:	0005883a 	mov	r2,zero
   12ddc:	00009f06 	br	1305c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   12de0:	e0fffe03 	ldbu	r3,-8(fp)
   12de4:	00bfe004 	movi	r2,-128
   12de8:	1884703a 	and	r2,r3,r2
   12dec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   12df0:	e0bff503 	ldbu	r2,-44(fp)
   12df4:	10000626 	beq	r2,zero,12e10 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   12df8:	e0bffe03 	ldbu	r2,-8(fp)
   12dfc:	10801fcc 	andi	r2,r2,127
   12e00:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   12e04:	00800044 	movi	r2,1
   12e08:	e0bff385 	stb	r2,-50(fp)
   12e0c:	00000106 	br	12e14 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   12e10:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   12e14:	e0bfff17 	ldw	r2,-4(fp)
   12e18:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e1c:	0005303a 	rdctl	r2,status
   12e20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e24:	e0fffb17 	ldw	r3,-20(fp)
   12e28:	00bfff84 	movi	r2,-2
   12e2c:	1884703a 	and	r2,r3,r2
   12e30:	1001703a 	wrctl	status,r2
  
  return context;
   12e34:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   12e38:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   12e3c:	e0bffe03 	ldbu	r2,-8(fp)
   12e40:	10c00060 	cmpeqi	r3,r2,1
   12e44:	18005f1e 	bne	r3,zero,12fc4 <OSFlagAccept+0x260>
   12e48:	10c00088 	cmpgei	r3,r2,2
   12e4c:	1800021e 	bne	r3,zero,12e58 <OSFlagAccept+0xf4>
   12e50:	10003f26 	beq	r2,zero,12f50 <OSFlagAccept+0x1ec>
   12e54:	00007706 	br	13034 <OSFlagAccept+0x2d0>
   12e58:	10c000a0 	cmpeqi	r3,r2,2
   12e5c:	1800031e 	bne	r3,zero,12e6c <OSFlagAccept+0x108>
   12e60:	108000e0 	cmpeqi	r2,r2,3
   12e64:	10001e1e 	bne	r2,zero,12ee0 <OSFlagAccept+0x17c>
   12e68:	00007206 	br	13034 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12e6c:	e0bffc17 	ldw	r2,-16(fp)
   12e70:	10c0020b 	ldhu	r3,8(r2)
   12e74:	e0bffd0b 	ldhu	r2,-12(fp)
   12e78:	1884703a 	and	r2,r3,r2
   12e7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12e80:	e0fff30b 	ldhu	r3,-52(fp)
   12e84:	e0bffd0b 	ldhu	r2,-12(fp)
   12e88:	18800d1e 	bne	r3,r2,12ec0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12e8c:	e0bff383 	ldbu	r2,-50(fp)
   12e90:	10800058 	cmpnei	r2,r2,1
   12e94:	10000d1e 	bne	r2,zero,12ecc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   12e98:	e0bffc17 	ldw	r2,-16(fp)
   12e9c:	1080020b 	ldhu	r2,8(r2)
   12ea0:	1007883a 	mov	r3,r2
   12ea4:	e0bff30b 	ldhu	r2,-52(fp)
   12ea8:	0084303a 	nor	r2,zero,r2
   12eac:	1884703a 	and	r2,r3,r2
   12eb0:	1007883a 	mov	r3,r2
   12eb4:	e0bffc17 	ldw	r2,-16(fp)
   12eb8:	10c0020d 	sth	r3,8(r2)
   12ebc:	00000306 	br	12ecc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12ec0:	e0bfff17 	ldw	r2,-4(fp)
   12ec4:	00c01c04 	movi	r3,112
   12ec8:	10c00005 	stb	r3,0(r2)
   12ecc:	e0bff417 	ldw	r2,-48(fp)
   12ed0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12ed4:	e0bff617 	ldw	r2,-40(fp)
   12ed8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12edc:	00005e06 	br	13058 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   12ee0:	e0bffc17 	ldw	r2,-16(fp)
   12ee4:	10c0020b 	ldhu	r3,8(r2)
   12ee8:	e0bffd0b 	ldhu	r2,-12(fp)
   12eec:	1884703a 	and	r2,r3,r2
   12ef0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   12ef4:	e0bff30b 	ldhu	r2,-52(fp)
   12ef8:	10000d26 	beq	r2,zero,12f30 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12efc:	e0bff383 	ldbu	r2,-50(fp)
   12f00:	10800058 	cmpnei	r2,r2,1
   12f04:	10000d1e 	bne	r2,zero,12f3c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   12f08:	e0bffc17 	ldw	r2,-16(fp)
   12f0c:	1080020b 	ldhu	r2,8(r2)
   12f10:	1007883a 	mov	r3,r2
   12f14:	e0bff30b 	ldhu	r2,-52(fp)
   12f18:	0084303a 	nor	r2,zero,r2
   12f1c:	1884703a 	and	r2,r3,r2
   12f20:	1007883a 	mov	r3,r2
   12f24:	e0bffc17 	ldw	r2,-16(fp)
   12f28:	10c0020d 	sth	r3,8(r2)
   12f2c:	00000306 	br	12f3c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12f30:	e0bfff17 	ldw	r2,-4(fp)
   12f34:	00c01c04 	movi	r3,112
   12f38:	10c00005 	stb	r3,0(r2)
   12f3c:	e0bff417 	ldw	r2,-48(fp)
   12f40:	e0bff715 	stw	r2,-36(fp)
   12f44:	e0bff717 	ldw	r2,-36(fp)
   12f48:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12f4c:	00004206 	br	13058 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   12f50:	e0bffc17 	ldw	r2,-16(fp)
   12f54:	1080020b 	ldhu	r2,8(r2)
   12f58:	0084303a 	nor	r2,zero,r2
   12f5c:	1007883a 	mov	r3,r2
   12f60:	e0bffd0b 	ldhu	r2,-12(fp)
   12f64:	1884703a 	and	r2,r3,r2
   12f68:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   12f6c:	e0fff30b 	ldhu	r3,-52(fp)
   12f70:	e0bffd0b 	ldhu	r2,-12(fp)
   12f74:	18800b1e 	bne	r3,r2,12fa4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12f78:	e0bff383 	ldbu	r2,-50(fp)
   12f7c:	10800058 	cmpnei	r2,r2,1
   12f80:	10000b1e 	bne	r2,zero,12fb0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   12f84:	e0bffc17 	ldw	r2,-16(fp)
   12f88:	10c0020b 	ldhu	r3,8(r2)
   12f8c:	e0bff30b 	ldhu	r2,-52(fp)
   12f90:	1884b03a 	or	r2,r3,r2
   12f94:	1007883a 	mov	r3,r2
   12f98:	e0bffc17 	ldw	r2,-16(fp)
   12f9c:	10c0020d 	sth	r3,8(r2)
   12fa0:	00000306 	br	12fb0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   12fa4:	e0bfff17 	ldw	r2,-4(fp)
   12fa8:	00c01c04 	movi	r3,112
   12fac:	10c00005 	stb	r3,0(r2)
   12fb0:	e0bff417 	ldw	r2,-48(fp)
   12fb4:	e0bff815 	stw	r2,-32(fp)
   12fb8:	e0bff817 	ldw	r2,-32(fp)
   12fbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   12fc0:	00002506 	br	13058 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   12fc4:	e0bffc17 	ldw	r2,-16(fp)
   12fc8:	1080020b 	ldhu	r2,8(r2)
   12fcc:	0084303a 	nor	r2,zero,r2
   12fd0:	1007883a 	mov	r3,r2
   12fd4:	e0bffd0b 	ldhu	r2,-12(fp)
   12fd8:	1884703a 	and	r2,r3,r2
   12fdc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   12fe0:	e0bff30b 	ldhu	r2,-52(fp)
   12fe4:	10000b26 	beq	r2,zero,13014 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   12fe8:	e0bff383 	ldbu	r2,-50(fp)
   12fec:	10800058 	cmpnei	r2,r2,1
   12ff0:	10000b1e 	bne	r2,zero,13020 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   12ff4:	e0bffc17 	ldw	r2,-16(fp)
   12ff8:	10c0020b 	ldhu	r3,8(r2)
   12ffc:	e0bff30b 	ldhu	r2,-52(fp)
   13000:	1884b03a 	or	r2,r3,r2
   13004:	1007883a 	mov	r3,r2
   13008:	e0bffc17 	ldw	r2,-16(fp)
   1300c:	10c0020d 	sth	r3,8(r2)
   13010:	00000306 	br	13020 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   13014:	e0bfff17 	ldw	r2,-4(fp)
   13018:	00c01c04 	movi	r3,112
   1301c:	10c00005 	stb	r3,0(r2)
   13020:	e0bff417 	ldw	r2,-48(fp)
   13024:	e0bff915 	stw	r2,-28(fp)
   13028:	e0bff917 	ldw	r2,-28(fp)
   1302c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   13030:	00000906 	br	13058 <OSFlagAccept+0x2f4>
   13034:	e0bff417 	ldw	r2,-48(fp)
   13038:	e0bffa15 	stw	r2,-24(fp)
   1303c:	e0bffa17 	ldw	r2,-24(fp)
   13040:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13044:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   13048:	e0bfff17 	ldw	r2,-4(fp)
   1304c:	00c01bc4 	movi	r3,111
   13050:	10c00005 	stb	r3,0(r2)
             break;
   13054:	0001883a 	nop
    }
    return (flags_rdy);
   13058:	e0bff30b 	ldhu	r2,-52(fp)
}
   1305c:	e037883a 	mov	sp,fp
   13060:	df000017 	ldw	fp,0(sp)
   13064:	dec00104 	addi	sp,sp,4
   13068:	f800283a 	ret

0001306c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1306c:	defff804 	addi	sp,sp,-32
   13070:	df000715 	stw	fp,28(sp)
   13074:	df000704 	addi	fp,sp,28
   13078:	2005883a 	mov	r2,r4
   1307c:	e17fff15 	stw	r5,-4(fp)
   13080:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   13084:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   13088:	e0bfff17 	ldw	r2,-4(fp)
   1308c:	1000021e 	bne	r2,zero,13098 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   13090:	0005883a 	mov	r2,zero
   13094:	00003306 	br	13164 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   13098:	d0a74503 	ldbu	r2,-25324(gp)
   1309c:	10803fcc 	andi	r2,r2,255
   130a0:	10000526 	beq	r2,zero,130b8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   130a4:	e0bfff17 	ldw	r2,-4(fp)
   130a8:	00c00404 	movi	r3,16
   130ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   130b0:	0005883a 	mov	r2,zero
   130b4:	00002b06 	br	13164 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   130b8:	0005303a 	rdctl	r2,status
   130bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   130c0:	e0fffd17 	ldw	r3,-12(fp)
   130c4:	00bfff84 	movi	r2,-2
   130c8:	1884703a 	and	r2,r3,r2
   130cc:	1001703a 	wrctl	status,r2
  
  return context;
   130d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   130d4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   130d8:	d0a74817 	ldw	r2,-25312(gp)
   130dc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   130e0:	e0bffb17 	ldw	r2,-20(fp)
   130e4:	10001726 	beq	r2,zero,13144 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   130e8:	d0a74817 	ldw	r2,-25312(gp)
   130ec:	10800117 	ldw	r2,4(r2)
   130f0:	d0a74815 	stw	r2,-25312(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   130f4:	e0bffb17 	ldw	r2,-20(fp)
   130f8:	00c00144 	movi	r3,5
   130fc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   13100:	e0bffb17 	ldw	r2,-20(fp)
   13104:	e0fffe0b 	ldhu	r3,-8(fp)
   13108:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1310c:	e0bffb17 	ldw	r2,-20(fp)
   13110:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   13114:	e0bffb17 	ldw	r2,-20(fp)
   13118:	00c00fc4 	movi	r3,63
   1311c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13120:	e0bffb17 	ldw	r2,-20(fp)
   13124:	100002c5 	stb	zero,11(r2)
   13128:	e0bff917 	ldw	r2,-28(fp)
   1312c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13130:	e0bffa17 	ldw	r2,-24(fp)
   13134:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   13138:	e0bfff17 	ldw	r2,-4(fp)
   1313c:	10000005 	stb	zero,0(r2)
   13140:	00000706 	br	13160 <OSFlagCreate+0xf4>
   13144:	e0bff917 	ldw	r2,-28(fp)
   13148:	e0bffc15 	stw	r2,-16(fp)
   1314c:	e0bffc17 	ldw	r2,-16(fp)
   13150:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   13154:	e0bfff17 	ldw	r2,-4(fp)
   13158:	00c01c84 	movi	r3,114
   1315c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   13160:	e0bffb17 	ldw	r2,-20(fp)
}
   13164:	e037883a 	mov	sp,fp
   13168:	df000017 	ldw	fp,0(sp)
   1316c:	dec00104 	addi	sp,sp,4
   13170:	f800283a 	ret

00013174 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   13174:	defff204 	addi	sp,sp,-56
   13178:	dfc00d15 	stw	ra,52(sp)
   1317c:	df000c15 	stw	fp,48(sp)
   13180:	df000c04 	addi	fp,sp,48
   13184:	e13ffd15 	stw	r4,-12(fp)
   13188:	2805883a 	mov	r2,r5
   1318c:	e1bfff15 	stw	r6,-4(fp)
   13190:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13194:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13198:	e0bfff17 	ldw	r2,-4(fp)
   1319c:	1000021e 	bne	r2,zero,131a8 <OSFlagDel+0x34>
        return (pgrp);
   131a0:	e0bffd17 	ldw	r2,-12(fp)
   131a4:	00008006 	br	133a8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   131a8:	e0bffd17 	ldw	r2,-12(fp)
   131ac:	1000051e 	bne	r2,zero,131c4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   131b0:	e0bfff17 	ldw	r2,-4(fp)
   131b4:	00c01b84 	movi	r3,110
   131b8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   131bc:	e0bffd17 	ldw	r2,-12(fp)
   131c0:	00007906 	br	133a8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   131c4:	d0a74503 	ldbu	r2,-25324(gp)
   131c8:	10803fcc 	andi	r2,r2,255
   131cc:	10000526 	beq	r2,zero,131e4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   131d0:	e0bfff17 	ldw	r2,-4(fp)
   131d4:	00c003c4 	movi	r3,15
   131d8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   131dc:	e0bffd17 	ldw	r2,-12(fp)
   131e0:	00007106 	br	133a8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   131e4:	e0bffd17 	ldw	r2,-12(fp)
   131e8:	10800003 	ldbu	r2,0(r2)
   131ec:	10803fcc 	andi	r2,r2,255
   131f0:	10800160 	cmpeqi	r2,r2,5
   131f4:	1000051e 	bne	r2,zero,1320c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   131f8:	e0bfff17 	ldw	r2,-4(fp)
   131fc:	00c00044 	movi	r3,1
   13200:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   13204:	e0bffd17 	ldw	r2,-12(fp)
   13208:	00006706 	br	133a8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1320c:	0005303a 	rdctl	r2,status
   13210:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13214:	e0fffc17 	ldw	r3,-16(fp)
   13218:	00bfff84 	movi	r2,-2
   1321c:	1884703a 	and	r2,r3,r2
   13220:	1001703a 	wrctl	status,r2
  
  return context;
   13224:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13228:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1322c:	e0bffd17 	ldw	r2,-12(fp)
   13230:	10800117 	ldw	r2,4(r2)
   13234:	10000326 	beq	r2,zero,13244 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   13238:	00800044 	movi	r2,1
   1323c:	e0bff405 	stb	r2,-48(fp)
   13240:	00000106 	br	13248 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   13244:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   13248:	e0bffe03 	ldbu	r2,-8(fp)
   1324c:	10000326 	beq	r2,zero,1325c <OSFlagDel+0xe8>
   13250:	10800060 	cmpeqi	r2,r2,1
   13254:	1000231e 	bne	r2,zero,132e4 <OSFlagDel+0x170>
   13258:	00004806 	br	1337c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1325c:	e0bff403 	ldbu	r2,-48(fp)
   13260:	1000161e 	bne	r2,zero,132bc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   13264:	e0bffd17 	ldw	r2,-12(fp)
   13268:	00c00fc4 	movi	r3,63
   1326c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13270:	e0bffd17 	ldw	r2,-12(fp)
   13274:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13278:	e0bffd17 	ldw	r2,-12(fp)
   1327c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   13280:	d0e74817 	ldw	r3,-25312(gp)
   13284:	e0bffd17 	ldw	r2,-12(fp)
   13288:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1328c:	e0bffd17 	ldw	r2,-12(fp)
   13290:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   13294:	e0bffd17 	ldw	r2,-12(fp)
   13298:	d0a74815 	stw	r2,-25312(gp)
   1329c:	e0bff717 	ldw	r2,-36(fp)
   132a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132a4:	e0bff817 	ldw	r2,-32(fp)
   132a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   132ac:	e0bfff17 	ldw	r2,-4(fp)
   132b0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   132b4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   132b8:	00003a06 	br	133a4 <OSFlagDel+0x230>
   132bc:	e0bff717 	ldw	r2,-36(fp)
   132c0:	e0bff915 	stw	r2,-28(fp)
   132c4:	e0bff917 	ldw	r2,-28(fp)
   132c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   132cc:	e0bfff17 	ldw	r2,-4(fp)
   132d0:	00c01244 	movi	r3,73
   132d4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   132d8:	e0bffd17 	ldw	r2,-12(fp)
   132dc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   132e0:	00003006 	br	133a4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   132e4:	e0bffd17 	ldw	r2,-12(fp)
   132e8:	10800117 	ldw	r2,4(r2)
   132ec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   132f0:	00000606 	br	1330c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   132f4:	000b883a 	mov	r5,zero
   132f8:	e13ff517 	ldw	r4,-44(fp)
   132fc:	00142e00 	call	142e0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   13300:	e0bff517 	ldw	r2,-44(fp)
   13304:	10800017 	ldw	r2,0(r2)
   13308:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1330c:	e0bff517 	ldw	r2,-44(fp)
   13310:	103ff81e 	bne	r2,zero,132f4 <__alt_data_end+0xfffe25b4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   13314:	e0bffd17 	ldw	r2,-12(fp)
   13318:	00c00fc4 	movi	r3,63
   1331c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   13320:	e0bffd17 	ldw	r2,-12(fp)
   13324:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   13328:	e0bffd17 	ldw	r2,-12(fp)
   1332c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   13330:	d0e74817 	ldw	r3,-25312(gp)
   13334:	e0bffd17 	ldw	r2,-12(fp)
   13338:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1333c:	e0bffd17 	ldw	r2,-12(fp)
   13340:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   13344:	e0bffd17 	ldw	r2,-12(fp)
   13348:	d0a74815 	stw	r2,-25312(gp)
   1334c:	e0bff717 	ldw	r2,-36(fp)
   13350:	e0bffa15 	stw	r2,-24(fp)
   13354:	e0bffa17 	ldw	r2,-24(fp)
   13358:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1335c:	e0bff403 	ldbu	r2,-48(fp)
   13360:	10800058 	cmpnei	r2,r2,1
   13364:	1000011e 	bne	r2,zero,1336c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   13368:	00125000 	call	12500 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1336c:	e0bfff17 	ldw	r2,-4(fp)
   13370:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   13374:	e03ff615 	stw	zero,-40(fp)
             break;
   13378:	00000a06 	br	133a4 <OSFlagDel+0x230>
   1337c:	e0bff717 	ldw	r2,-36(fp)
   13380:	e0bffb15 	stw	r2,-20(fp)
   13384:	e0bffb17 	ldw	r2,-20(fp)
   13388:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1338c:	e0bfff17 	ldw	r2,-4(fp)
   13390:	00c001c4 	movi	r3,7
   13394:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   13398:	e0bffd17 	ldw	r2,-12(fp)
   1339c:	e0bff615 	stw	r2,-40(fp)
             break;
   133a0:	0001883a 	nop
    }
    return (pgrp_return);
   133a4:	e0bff617 	ldw	r2,-40(fp)
}
   133a8:	e037883a 	mov	sp,fp
   133ac:	dfc00117 	ldw	ra,4(sp)
   133b0:	df000017 	ldw	fp,0(sp)
   133b4:	dec00204 	addi	sp,sp,8
   133b8:	f800283a 	ret

000133bc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   133bc:	defff604 	addi	sp,sp,-40
   133c0:	dfc00915 	stw	ra,36(sp)
   133c4:	df000815 	stw	fp,32(sp)
   133c8:	df000804 	addi	fp,sp,32
   133cc:	e13ffd15 	stw	r4,-12(fp)
   133d0:	e17ffe15 	stw	r5,-8(fp)
   133d4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   133d8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   133dc:	e0bfff17 	ldw	r2,-4(fp)
   133e0:	1000021e 	bne	r2,zero,133ec <OSFlagNameGet+0x30>
        return (0);
   133e4:	0005883a 	mov	r2,zero
   133e8:	00003906 	br	134d0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   133ec:	e0bffd17 	ldw	r2,-12(fp)
   133f0:	1000051e 	bne	r2,zero,13408 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   133f4:	e0bfff17 	ldw	r2,-4(fp)
   133f8:	00c01b84 	movi	r3,110
   133fc:	10c00005 	stb	r3,0(r2)
        return (0);
   13400:	0005883a 	mov	r2,zero
   13404:	00003206 	br	134d0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13408:	e0bffe17 	ldw	r2,-8(fp)
   1340c:	1000051e 	bne	r2,zero,13424 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13410:	e0bfff17 	ldw	r2,-4(fp)
   13414:	00c00304 	movi	r3,12
   13418:	10c00005 	stb	r3,0(r2)
        return (0);
   1341c:	0005883a 	mov	r2,zero
   13420:	00002b06 	br	134d0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13424:	d0a74503 	ldbu	r2,-25324(gp)
   13428:	10803fcc 	andi	r2,r2,255
   1342c:	10000526 	beq	r2,zero,13444 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   13430:	e0bfff17 	ldw	r2,-4(fp)
   13434:	00c00444 	movi	r3,17
   13438:	10c00005 	stb	r3,0(r2)
        return (0);
   1343c:	0005883a 	mov	r2,zero
   13440:	00002306 	br	134d0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13444:	0005303a 	rdctl	r2,status
   13448:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1344c:	e0fffc17 	ldw	r3,-16(fp)
   13450:	00bfff84 	movi	r2,-2
   13454:	1884703a 	and	r2,r3,r2
   13458:	1001703a 	wrctl	status,r2
  
  return context;
   1345c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13460:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13464:	e0bffd17 	ldw	r2,-12(fp)
   13468:	10800003 	ldbu	r2,0(r2)
   1346c:	10803fcc 	andi	r2,r2,255
   13470:	10800160 	cmpeqi	r2,r2,5
   13474:	1000091e 	bne	r2,zero,1349c <OSFlagNameGet+0xe0>
   13478:	e0bff817 	ldw	r2,-32(fp)
   1347c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13480:	e0bff917 	ldw	r2,-28(fp)
   13484:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   13488:	e0bfff17 	ldw	r2,-4(fp)
   1348c:	00c00044 	movi	r3,1
   13490:	10c00005 	stb	r3,0(r2)
        return (0);
   13494:	0005883a 	mov	r2,zero
   13498:	00000d06 	br	134d0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1349c:	e0bffd17 	ldw	r2,-12(fp)
   134a0:	10800284 	addi	r2,r2,10
   134a4:	100b883a 	mov	r5,r2
   134a8:	e13ffe17 	ldw	r4,-8(fp)
   134ac:	00126440 	call	12644 <OS_StrCopy>
   134b0:	e0bffb05 	stb	r2,-20(fp)
   134b4:	e0bff817 	ldw	r2,-32(fp)
   134b8:	e0bffa15 	stw	r2,-24(fp)
   134bc:	e0bffa17 	ldw	r2,-24(fp)
   134c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   134c4:	e0bfff17 	ldw	r2,-4(fp)
   134c8:	10000005 	stb	zero,0(r2)
    return (len);
   134cc:	e0bffb03 	ldbu	r2,-20(fp)
}
   134d0:	e037883a 	mov	sp,fp
   134d4:	dfc00117 	ldw	ra,4(sp)
   134d8:	df000017 	ldw	fp,0(sp)
   134dc:	dec00204 	addi	sp,sp,8
   134e0:	f800283a 	ret

000134e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   134e4:	defff504 	addi	sp,sp,-44
   134e8:	dfc00a15 	stw	ra,40(sp)
   134ec:	df000915 	stw	fp,36(sp)
   134f0:	df000904 	addi	fp,sp,36
   134f4:	e13ffd15 	stw	r4,-12(fp)
   134f8:	e17ffe15 	stw	r5,-8(fp)
   134fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13500:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13504:	e0bfff17 	ldw	r2,-4(fp)
   13508:	10004326 	beq	r2,zero,13618 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1350c:	e0bffd17 	ldw	r2,-12(fp)
   13510:	1000041e 	bne	r2,zero,13524 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13514:	e0bfff17 	ldw	r2,-4(fp)
   13518:	00c01b84 	movi	r3,110
   1351c:	10c00005 	stb	r3,0(r2)
        return;
   13520:	00003e06 	br	1361c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13524:	e0bffe17 	ldw	r2,-8(fp)
   13528:	1000041e 	bne	r2,zero,1353c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1352c:	e0bfff17 	ldw	r2,-4(fp)
   13530:	00c00304 	movi	r3,12
   13534:	10c00005 	stb	r3,0(r2)
        return;
   13538:	00003806 	br	1361c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1353c:	d0a74503 	ldbu	r2,-25324(gp)
   13540:	10803fcc 	andi	r2,r2,255
   13544:	10000426 	beq	r2,zero,13558 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13548:	e0bfff17 	ldw	r2,-4(fp)
   1354c:	00c00484 	movi	r3,18
   13550:	10c00005 	stb	r3,0(r2)
        return;
   13554:	00003106 	br	1361c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13558:	0005303a 	rdctl	r2,status
   1355c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13560:	e0fffc17 	ldw	r3,-16(fp)
   13564:	00bfff84 	movi	r2,-2
   13568:	1884703a 	and	r2,r3,r2
   1356c:	1001703a 	wrctl	status,r2
  
  return context;
   13570:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   13574:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   13578:	e0bffd17 	ldw	r2,-12(fp)
   1357c:	10800003 	ldbu	r2,0(r2)
   13580:	10803fcc 	andi	r2,r2,255
   13584:	10800160 	cmpeqi	r2,r2,5
   13588:	1000081e 	bne	r2,zero,135ac <OSFlagNameSet+0xc8>
   1358c:	e0bff717 	ldw	r2,-36(fp)
   13590:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13594:	e0bff817 	ldw	r2,-32(fp)
   13598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1359c:	e0bfff17 	ldw	r2,-4(fp)
   135a0:	00c00044 	movi	r3,1
   135a4:	10c00005 	stb	r3,0(r2)
        return;
   135a8:	00001c06 	br	1361c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   135ac:	e13ffe17 	ldw	r4,-8(fp)
   135b0:	00126b80 	call	126b8 <OS_StrLen>
   135b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   135b8:	e0bffa03 	ldbu	r2,-24(fp)
   135bc:	10800830 	cmpltui	r2,r2,32
   135c0:	1000081e 	bne	r2,zero,135e4 <OSFlagNameSet+0x100>
   135c4:	e0bff717 	ldw	r2,-36(fp)
   135c8:	e0bff915 	stw	r2,-28(fp)
   135cc:	e0bff917 	ldw	r2,-28(fp)
   135d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   135d4:	e0bfff17 	ldw	r2,-4(fp)
   135d8:	00c01cc4 	movi	r3,115
   135dc:	10c00005 	stb	r3,0(r2)
        return;
   135e0:	00000e06 	br	1361c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   135e4:	e0bffd17 	ldw	r2,-12(fp)
   135e8:	10800284 	addi	r2,r2,10
   135ec:	e17ffe17 	ldw	r5,-8(fp)
   135f0:	1009883a 	mov	r4,r2
   135f4:	00126440 	call	12644 <OS_StrCopy>
   135f8:	e0bff717 	ldw	r2,-36(fp)
   135fc:	e0bffb15 	stw	r2,-20(fp)
   13600:	e0bffb17 	ldw	r2,-20(fp)
   13604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13608:	e0bfff17 	ldw	r2,-4(fp)
   1360c:	10000005 	stb	zero,0(r2)
    return;
   13610:	0001883a 	nop
   13614:	00000106 	br	1361c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13618:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1361c:	e037883a 	mov	sp,fp
   13620:	dfc00117 	ldw	ra,4(sp)
   13624:	df000017 	ldw	fp,0(sp)
   13628:	dec00204 	addi	sp,sp,8
   1362c:	f800283a 	ret

00013630 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   13630:	deffe104 	addi	sp,sp,-124
   13634:	dfc01e15 	stw	ra,120(sp)
   13638:	df001d15 	stw	fp,116(sp)
   1363c:	df001d04 	addi	fp,sp,116
   13640:	e13ffc15 	stw	r4,-16(fp)
   13644:	2809883a 	mov	r4,r5
   13648:	3007883a 	mov	r3,r6
   1364c:	3805883a 	mov	r2,r7
   13650:	e13ffd0d 	sth	r4,-12(fp)
   13654:	e0fffe05 	stb	r3,-8(fp)
   13658:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1365c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   13660:	e0800217 	ldw	r2,8(fp)
   13664:	1000021e 	bne	r2,zero,13670 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   13668:	0005883a 	mov	r2,zero
   1366c:	00015906 	br	13bd4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   13670:	e0bffc17 	ldw	r2,-16(fp)
   13674:	1000051e 	bne	r2,zero,1368c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13678:	e0800217 	ldw	r2,8(fp)
   1367c:	00c01b84 	movi	r3,110
   13680:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13684:	0005883a 	mov	r2,zero
   13688:	00015206 	br	13bd4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1368c:	d0a74503 	ldbu	r2,-25324(gp)
   13690:	10803fcc 	andi	r2,r2,255
   13694:	10000526 	beq	r2,zero,136ac <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   13698:	e0800217 	ldw	r2,8(fp)
   1369c:	00c00084 	movi	r3,2
   136a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136a4:	0005883a 	mov	r2,zero
   136a8:	00014a06 	br	13bd4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   136ac:	d0a73703 	ldbu	r2,-25380(gp)
   136b0:	10803fcc 	andi	r2,r2,255
   136b4:	10000526 	beq	r2,zero,136cc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   136b8:	e0800217 	ldw	r2,8(fp)
   136bc:	00c00344 	movi	r3,13
   136c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136c4:	0005883a 	mov	r2,zero
   136c8:	00014206 	br	13bd4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   136cc:	e0bffc17 	ldw	r2,-16(fp)
   136d0:	10800003 	ldbu	r2,0(r2)
   136d4:	10803fcc 	andi	r2,r2,255
   136d8:	10800160 	cmpeqi	r2,r2,5
   136dc:	1000051e 	bne	r2,zero,136f4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   136e0:	e0800217 	ldw	r2,8(fp)
   136e4:	00c00044 	movi	r3,1
   136e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   136ec:	0005883a 	mov	r2,zero
   136f0:	00013806 	br	13bd4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   136f4:	e0fffe03 	ldbu	r3,-8(fp)
   136f8:	00bfe004 	movi	r2,-128
   136fc:	1884703a 	and	r2,r3,r2
   13700:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   13704:	e0bfe603 	ldbu	r2,-104(fp)
   13708:	10000626 	beq	r2,zero,13724 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1370c:	e0bffe03 	ldbu	r2,-8(fp)
   13710:	10801fcc 	andi	r2,r2,127
   13714:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   13718:	00800044 	movi	r2,1
   1371c:	e0bfe405 	stb	r2,-112(fp)
   13720:	00000106 	br	13728 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   13724:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13728:	0005303a 	rdctl	r2,status
   1372c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13730:	e0fff617 	ldw	r3,-40(fp)
   13734:	00bfff84 	movi	r2,-2
   13738:	1884703a 	and	r2,r3,r2
   1373c:	1001703a 	wrctl	status,r2
  
  return context;
   13740:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13744:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   13748:	e0bffe03 	ldbu	r2,-8(fp)
   1374c:	10c00060 	cmpeqi	r3,r2,1
   13750:	1800921e 	bne	r3,zero,1399c <OSFlagPend+0x36c>
   13754:	10c00088 	cmpgei	r3,r2,2
   13758:	1800021e 	bne	r3,zero,13764 <OSFlagPend+0x134>
   1375c:	10006126 	beq	r2,zero,138e4 <OSFlagPend+0x2b4>
   13760:	0000bb06 	br	13a50 <OSFlagPend+0x420>
   13764:	10c000a0 	cmpeqi	r3,r2,2
   13768:	1800031e 	bne	r3,zero,13778 <OSFlagPend+0x148>
   1376c:	108000e0 	cmpeqi	r2,r2,3
   13770:	10002f1e 	bne	r2,zero,13830 <OSFlagPend+0x200>
   13774:	0000b606 	br	13a50 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   13778:	e0bffc17 	ldw	r2,-16(fp)
   1377c:	10c0020b 	ldhu	r3,8(r2)
   13780:	e0bffd0b 	ldhu	r2,-12(fp)
   13784:	1884703a 	and	r2,r3,r2
   13788:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1378c:	e0ffe80b 	ldhu	r3,-96(fp)
   13790:	e0bffd0b 	ldhu	r2,-12(fp)
   13794:	1880171e 	bne	r3,r2,137f4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   13798:	e0bfe403 	ldbu	r2,-112(fp)
   1379c:	10800058 	cmpnei	r2,r2,1
   137a0:	1000091e 	bne	r2,zero,137c8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   137a4:	e0bffc17 	ldw	r2,-16(fp)
   137a8:	1080020b 	ldhu	r2,8(r2)
   137ac:	1007883a 	mov	r3,r2
   137b0:	e0bfe80b 	ldhu	r2,-96(fp)
   137b4:	0084303a 	nor	r2,zero,r2
   137b8:	1884703a 	and	r2,r3,r2
   137bc:	1007883a 	mov	r3,r2
   137c0:	e0bffc17 	ldw	r2,-16(fp)
   137c4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   137c8:	d0a74617 	ldw	r2,-25320(gp)
   137cc:	e0ffe80b 	ldhu	r3,-96(fp)
   137d0:	10c00b0d 	sth	r3,44(r2)
   137d4:	e0bfe517 	ldw	r2,-108(fp)
   137d8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   137dc:	e0bfe717 	ldw	r2,-100(fp)
   137e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   137e4:	e0800217 	ldw	r2,8(fp)
   137e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   137ec:	e0bfe80b 	ldhu	r2,-96(fp)
   137f0:	0000f806 	br	13bd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   137f4:	e13ffd0b 	ldhu	r4,-12(fp)
   137f8:	e17ffe03 	ldbu	r5,-8(fp)
   137fc:	e0bfff0b 	ldhu	r2,-4(fp)
   13800:	e0fff704 	addi	r3,fp,-36
   13804:	d8800015 	stw	r2,0(sp)
   13808:	280f883a 	mov	r7,r5
   1380c:	200d883a 	mov	r6,r4
   13810:	180b883a 	mov	r5,r3
   13814:	e13ffc17 	ldw	r4,-16(fp)
   13818:	00140a00 	call	140a0 <OS_FlagBlock>
   1381c:	e0bfe517 	ldw	r2,-108(fp)
   13820:	e0bfe915 	stw	r2,-92(fp)
   13824:	e0bfe917 	ldw	r2,-92(fp)
   13828:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1382c:	00009206 	br	13a78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   13830:	e0bffc17 	ldw	r2,-16(fp)
   13834:	10c0020b 	ldhu	r3,8(r2)
   13838:	e0bffd0b 	ldhu	r2,-12(fp)
   1383c:	1884703a 	and	r2,r3,r2
   13840:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   13844:	e0bfe80b 	ldhu	r2,-96(fp)
   13848:	10001726 	beq	r2,zero,138a8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1384c:	e0bfe403 	ldbu	r2,-112(fp)
   13850:	10800058 	cmpnei	r2,r2,1
   13854:	1000091e 	bne	r2,zero,1387c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   13858:	e0bffc17 	ldw	r2,-16(fp)
   1385c:	1080020b 	ldhu	r2,8(r2)
   13860:	1007883a 	mov	r3,r2
   13864:	e0bfe80b 	ldhu	r2,-96(fp)
   13868:	0084303a 	nor	r2,zero,r2
   1386c:	1884703a 	and	r2,r3,r2
   13870:	1007883a 	mov	r3,r2
   13874:	e0bffc17 	ldw	r2,-16(fp)
   13878:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1387c:	d0a74617 	ldw	r2,-25320(gp)
   13880:	e0ffe80b 	ldhu	r3,-96(fp)
   13884:	10c00b0d 	sth	r3,44(r2)
   13888:	e0bfe517 	ldw	r2,-108(fp)
   1388c:	e0bfea15 	stw	r2,-88(fp)
   13890:	e0bfea17 	ldw	r2,-88(fp)
   13894:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13898:	e0800217 	ldw	r2,8(fp)
   1389c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   138a0:	e0bfe80b 	ldhu	r2,-96(fp)
   138a4:	0000cb06 	br	13bd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   138a8:	e13ffd0b 	ldhu	r4,-12(fp)
   138ac:	e17ffe03 	ldbu	r5,-8(fp)
   138b0:	e0bfff0b 	ldhu	r2,-4(fp)
   138b4:	e0fff704 	addi	r3,fp,-36
   138b8:	d8800015 	stw	r2,0(sp)
   138bc:	280f883a 	mov	r7,r5
   138c0:	200d883a 	mov	r6,r4
   138c4:	180b883a 	mov	r5,r3
   138c8:	e13ffc17 	ldw	r4,-16(fp)
   138cc:	00140a00 	call	140a0 <OS_FlagBlock>
   138d0:	e0bfe517 	ldw	r2,-108(fp)
   138d4:	e0bfeb15 	stw	r2,-84(fp)
   138d8:	e0bfeb17 	ldw	r2,-84(fp)
   138dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   138e0:	00006506 	br	13a78 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   138e4:	e0bffc17 	ldw	r2,-16(fp)
   138e8:	1080020b 	ldhu	r2,8(r2)
   138ec:	0084303a 	nor	r2,zero,r2
   138f0:	1007883a 	mov	r3,r2
   138f4:	e0bffd0b 	ldhu	r2,-12(fp)
   138f8:	1884703a 	and	r2,r3,r2
   138fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   13900:	e0ffe80b 	ldhu	r3,-96(fp)
   13904:	e0bffd0b 	ldhu	r2,-12(fp)
   13908:	1880151e 	bne	r3,r2,13960 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1390c:	e0bfe403 	ldbu	r2,-112(fp)
   13910:	10800058 	cmpnei	r2,r2,1
   13914:	1000071e 	bne	r2,zero,13934 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   13918:	e0bffc17 	ldw	r2,-16(fp)
   1391c:	10c0020b 	ldhu	r3,8(r2)
   13920:	e0bfe80b 	ldhu	r2,-96(fp)
   13924:	1884b03a 	or	r2,r3,r2
   13928:	1007883a 	mov	r3,r2
   1392c:	e0bffc17 	ldw	r2,-16(fp)
   13930:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   13934:	d0a74617 	ldw	r2,-25320(gp)
   13938:	e0ffe80b 	ldhu	r3,-96(fp)
   1393c:	10c00b0d 	sth	r3,44(r2)
   13940:	e0bfe517 	ldw	r2,-108(fp)
   13944:	e0bfec15 	stw	r2,-80(fp)
   13948:	e0bfec17 	ldw	r2,-80(fp)
   1394c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13950:	e0800217 	ldw	r2,8(fp)
   13954:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13958:	e0bfe80b 	ldhu	r2,-96(fp)
   1395c:	00009d06 	br	13bd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13960:	e13ffd0b 	ldhu	r4,-12(fp)
   13964:	e17ffe03 	ldbu	r5,-8(fp)
   13968:	e0bfff0b 	ldhu	r2,-4(fp)
   1396c:	e0fff704 	addi	r3,fp,-36
   13970:	d8800015 	stw	r2,0(sp)
   13974:	280f883a 	mov	r7,r5
   13978:	200d883a 	mov	r6,r4
   1397c:	180b883a 	mov	r5,r3
   13980:	e13ffc17 	ldw	r4,-16(fp)
   13984:	00140a00 	call	140a0 <OS_FlagBlock>
   13988:	e0bfe517 	ldw	r2,-108(fp)
   1398c:	e0bfed15 	stw	r2,-76(fp)
   13990:	e0bfed17 	ldw	r2,-76(fp)
   13994:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13998:	00003706 	br	13a78 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1399c:	e0bffc17 	ldw	r2,-16(fp)
   139a0:	1080020b 	ldhu	r2,8(r2)
   139a4:	0084303a 	nor	r2,zero,r2
   139a8:	1007883a 	mov	r3,r2
   139ac:	e0bffd0b 	ldhu	r2,-12(fp)
   139b0:	1884703a 	and	r2,r3,r2
   139b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   139b8:	e0bfe80b 	ldhu	r2,-96(fp)
   139bc:	10001526 	beq	r2,zero,13a14 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   139c0:	e0bfe403 	ldbu	r2,-112(fp)
   139c4:	10800058 	cmpnei	r2,r2,1
   139c8:	1000071e 	bne	r2,zero,139e8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   139cc:	e0bffc17 	ldw	r2,-16(fp)
   139d0:	10c0020b 	ldhu	r3,8(r2)
   139d4:	e0bfe80b 	ldhu	r2,-96(fp)
   139d8:	1884b03a 	or	r2,r3,r2
   139dc:	1007883a 	mov	r3,r2
   139e0:	e0bffc17 	ldw	r2,-16(fp)
   139e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   139e8:	d0a74617 	ldw	r2,-25320(gp)
   139ec:	e0ffe80b 	ldhu	r3,-96(fp)
   139f0:	10c00b0d 	sth	r3,44(r2)
   139f4:	e0bfe517 	ldw	r2,-108(fp)
   139f8:	e0bfee15 	stw	r2,-72(fp)
   139fc:	e0bfee17 	ldw	r2,-72(fp)
   13a00:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   13a04:	e0800217 	ldw	r2,8(fp)
   13a08:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   13a0c:	e0bfe80b 	ldhu	r2,-96(fp)
   13a10:	00007006 	br	13bd4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   13a14:	e13ffd0b 	ldhu	r4,-12(fp)
   13a18:	e17ffe03 	ldbu	r5,-8(fp)
   13a1c:	e0bfff0b 	ldhu	r2,-4(fp)
   13a20:	e0fff704 	addi	r3,fp,-36
   13a24:	d8800015 	stw	r2,0(sp)
   13a28:	280f883a 	mov	r7,r5
   13a2c:	200d883a 	mov	r6,r4
   13a30:	180b883a 	mov	r5,r3
   13a34:	e13ffc17 	ldw	r4,-16(fp)
   13a38:	00140a00 	call	140a0 <OS_FlagBlock>
   13a3c:	e0bfe517 	ldw	r2,-108(fp)
   13a40:	e0bfef15 	stw	r2,-68(fp)
   13a44:	e0bfef17 	ldw	r2,-68(fp)
   13a48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   13a4c:	00000a06 	br	13a78 <OSFlagPend+0x448>
   13a50:	e0bfe517 	ldw	r2,-108(fp)
   13a54:	e0bff015 	stw	r2,-64(fp)
   13a58:	e0bff017 	ldw	r2,-64(fp)
   13a5c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   13a60:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   13a64:	e0800217 	ldw	r2,8(fp)
   13a68:	00c01bc4 	movi	r3,111
   13a6c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   13a70:	e0bfe80b 	ldhu	r2,-96(fp)
   13a74:	00005706 	br	13bd4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   13a78:	00125000 	call	12500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a7c:	0005303a 	rdctl	r2,status
   13a80:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a84:	e0fff117 	ldw	r3,-60(fp)
   13a88:	00bfff84 	movi	r2,-2
   13a8c:	1884703a 	and	r2,r3,r2
   13a90:	1001703a 	wrctl	status,r2
  
  return context;
   13a94:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   13a98:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   13a9c:	d0a74617 	ldw	r2,-25320(gp)
   13aa0:	10800c43 	ldbu	r2,49(r2)
   13aa4:	10803fcc 	andi	r2,r2,255
   13aa8:	10001c26 	beq	r2,zero,13b1c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   13aac:	d0a74617 	ldw	r2,-25320(gp)
   13ab0:	10800c43 	ldbu	r2,49(r2)
   13ab4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   13ab8:	d0a74617 	ldw	r2,-25320(gp)
   13abc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   13ac0:	e0bff704 	addi	r2,fp,-36
   13ac4:	1009883a 	mov	r4,r2
   13ac8:	00143d40 	call	143d4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   13acc:	d0a74617 	ldw	r2,-25320(gp)
   13ad0:	10000c05 	stb	zero,48(r2)
   13ad4:	e0bfe517 	ldw	r2,-108(fp)
   13ad8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13adc:	e0bff217 	ldw	r2,-56(fp)
   13ae0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   13ae4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   13ae8:	e0bff303 	ldbu	r2,-52(fp)
   13aec:	108000a0 	cmpeqi	r2,r2,2
   13af0:	10000426 	beq	r2,zero,13b04 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   13af4:	e0800217 	ldw	r2,8(fp)
   13af8:	00c00384 	movi	r3,14
   13afc:	10c00005 	stb	r3,0(r2)
                 break;
   13b00:	00000406 	br	13b14 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   13b04:	e0800217 	ldw	r2,8(fp)
   13b08:	00c00284 	movi	r3,10
   13b0c:	10c00005 	stb	r3,0(r2)
                 break;
   13b10:	0001883a 	nop
        }
        return (flags_rdy);
   13b14:	e0bfe80b 	ldhu	r2,-96(fp)
   13b18:	00002e06 	br	13bd4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   13b1c:	d0a74617 	ldw	r2,-25320(gp)
   13b20:	10800b0b 	ldhu	r2,44(r2)
   13b24:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   13b28:	e0bfe403 	ldbu	r2,-112(fp)
   13b2c:	10800058 	cmpnei	r2,r2,1
   13b30:	1000211e 	bne	r2,zero,13bb8 <OSFlagPend+0x588>
        switch (wait_type) {
   13b34:	e0bffe03 	ldbu	r2,-8(fp)
   13b38:	10001616 	blt	r2,zero,13b94 <OSFlagPend+0x564>
   13b3c:	10c00090 	cmplti	r3,r2,2
   13b40:	18000c1e 	bne	r3,zero,13b74 <OSFlagPend+0x544>
   13b44:	10800108 	cmpgei	r2,r2,4
   13b48:	1000121e 	bne	r2,zero,13b94 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   13b4c:	e0bffc17 	ldw	r2,-16(fp)
   13b50:	1080020b 	ldhu	r2,8(r2)
   13b54:	1007883a 	mov	r3,r2
   13b58:	e0bfe80b 	ldhu	r2,-96(fp)
   13b5c:	0084303a 	nor	r2,zero,r2
   13b60:	1884703a 	and	r2,r3,r2
   13b64:	1007883a 	mov	r3,r2
   13b68:	e0bffc17 	ldw	r2,-16(fp)
   13b6c:	10c0020d 	sth	r3,8(r2)
                 break;
   13b70:	00001106 	br	13bb8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   13b74:	e0bffc17 	ldw	r2,-16(fp)
   13b78:	10c0020b 	ldhu	r3,8(r2)
   13b7c:	e0bfe80b 	ldhu	r2,-96(fp)
   13b80:	1884b03a 	or	r2,r3,r2
   13b84:	1007883a 	mov	r3,r2
   13b88:	e0bffc17 	ldw	r2,-16(fp)
   13b8c:	10c0020d 	sth	r3,8(r2)
                 break;
   13b90:	00000906 	br	13bb8 <OSFlagPend+0x588>
   13b94:	e0bfe517 	ldw	r2,-108(fp)
   13b98:	e0bff415 	stw	r2,-48(fp)
   13b9c:	e0bff417 	ldw	r2,-48(fp)
   13ba0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13ba4:	e0800217 	ldw	r2,8(fp)
   13ba8:	00c01bc4 	movi	r3,111
   13bac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13bb0:	0005883a 	mov	r2,zero
   13bb4:	00000706 	br	13bd4 <OSFlagPend+0x5a4>
   13bb8:	e0bfe517 	ldw	r2,-108(fp)
   13bbc:	e0bff515 	stw	r2,-44(fp)
   13bc0:	e0bff517 	ldw	r2,-44(fp)
   13bc4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   13bc8:	e0800217 	ldw	r2,8(fp)
   13bcc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   13bd0:	e0bfe80b 	ldhu	r2,-96(fp)
}
   13bd4:	e037883a 	mov	sp,fp
   13bd8:	dfc00117 	ldw	ra,4(sp)
   13bdc:	df000017 	ldw	fp,0(sp)
   13be0:	dec00204 	addi	sp,sp,8
   13be4:	f800283a 	ret

00013be8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   13be8:	defffb04 	addi	sp,sp,-20
   13bec:	df000415 	stw	fp,16(sp)
   13bf0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   13bf4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bf8:	0005303a 	rdctl	r2,status
   13bfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13c00:	e0fffe17 	ldw	r3,-8(fp)
   13c04:	00bfff84 	movi	r2,-2
   13c08:	1884703a 	and	r2,r3,r2
   13c0c:	1001703a 	wrctl	status,r2
  
  return context;
   13c10:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   13c14:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   13c18:	d0a74617 	ldw	r2,-25320(gp)
   13c1c:	10800b0b 	ldhu	r2,44(r2)
   13c20:	e0bffd0d 	sth	r2,-12(fp)
   13c24:	e0bffc17 	ldw	r2,-16(fp)
   13c28:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c2c:	e0bfff17 	ldw	r2,-4(fp)
   13c30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   13c34:	e0bffd0b 	ldhu	r2,-12(fp)
}
   13c38:	e037883a 	mov	sp,fp
   13c3c:	df000017 	ldw	fp,0(sp)
   13c40:	dec00104 	addi	sp,sp,4
   13c44:	f800283a 	ret

00013c48 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   13c48:	deffef04 	addi	sp,sp,-68
   13c4c:	dfc01015 	stw	ra,64(sp)
   13c50:	df000f15 	stw	fp,60(sp)
   13c54:	df000f04 	addi	fp,sp,60
   13c58:	e13ffc15 	stw	r4,-16(fp)
   13c5c:	2807883a 	mov	r3,r5
   13c60:	3005883a 	mov	r2,r6
   13c64:	e1ffff15 	stw	r7,-4(fp)
   13c68:	e0fffd0d 	sth	r3,-12(fp)
   13c6c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   13c70:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   13c74:	e0bfff17 	ldw	r2,-4(fp)
   13c78:	1000021e 	bne	r2,zero,13c84 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   13c7c:	0005883a 	mov	r2,zero
   13c80:	0000d106 	br	13fc8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   13c84:	e0bffc17 	ldw	r2,-16(fp)
   13c88:	1000051e 	bne	r2,zero,13ca0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   13c8c:	e0bfff17 	ldw	r2,-4(fp)
   13c90:	00c01b84 	movi	r3,110
   13c94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13c98:	0005883a 	mov	r2,zero
   13c9c:	0000ca06 	br	13fc8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   13ca0:	e0bffc17 	ldw	r2,-16(fp)
   13ca4:	10800003 	ldbu	r2,0(r2)
   13ca8:	10803fcc 	andi	r2,r2,255
   13cac:	10800160 	cmpeqi	r2,r2,5
   13cb0:	1000051e 	bne	r2,zero,13cc8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   13cb4:	e0bfff17 	ldw	r2,-4(fp)
   13cb8:	00c00044 	movi	r3,1
   13cbc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   13cc0:	0005883a 	mov	r2,zero
   13cc4:	0000c006 	br	13fc8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cc8:	0005303a 	rdctl	r2,status
   13ccc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13cd0:	e0fffb17 	ldw	r3,-20(fp)
   13cd4:	00bfff84 	movi	r2,-2
   13cd8:	1884703a 	and	r2,r3,r2
   13cdc:	1001703a 	wrctl	status,r2
  
  return context;
   13ce0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   13ce4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   13ce8:	e0bffe03 	ldbu	r2,-8(fp)
   13cec:	10000326 	beq	r2,zero,13cfc <OSFlagPost+0xb4>
   13cf0:	10800060 	cmpeqi	r2,r2,1
   13cf4:	10000b1e 	bne	r2,zero,13d24 <OSFlagPost+0xdc>
   13cf8:	00001206 	br	13d44 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   13cfc:	e0bffc17 	ldw	r2,-16(fp)
   13d00:	1080020b 	ldhu	r2,8(r2)
   13d04:	1007883a 	mov	r3,r2
   13d08:	e0bffd0b 	ldhu	r2,-12(fp)
   13d0c:	0084303a 	nor	r2,zero,r2
   13d10:	1884703a 	and	r2,r3,r2
   13d14:	1007883a 	mov	r3,r2
   13d18:	e0bffc17 	ldw	r2,-16(fp)
   13d1c:	10c0020d 	sth	r3,8(r2)
             break;
   13d20:	00001106 	br	13d68 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   13d24:	e0bffc17 	ldw	r2,-16(fp)
   13d28:	10c0020b 	ldhu	r3,8(r2)
   13d2c:	e0bffd0b 	ldhu	r2,-12(fp)
   13d30:	1884b03a 	or	r2,r3,r2
   13d34:	1007883a 	mov	r3,r2
   13d38:	e0bffc17 	ldw	r2,-16(fp)
   13d3c:	10c0020d 	sth	r3,8(r2)
             break;
   13d40:	00000906 	br	13d68 <OSFlagPost+0x120>
   13d44:	e0bff317 	ldw	r2,-52(fp)
   13d48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d4c:	e0bff417 	ldw	r2,-48(fp)
   13d50:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   13d54:	e0bfff17 	ldw	r2,-4(fp)
   13d58:	00c01c44 	movi	r3,113
   13d5c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   13d60:	0005883a 	mov	r2,zero
   13d64:	00009806 	br	13fc8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   13d68:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   13d6c:	e0bffc17 	ldw	r2,-16(fp)
   13d70:	10800117 	ldw	r2,4(r2)
   13d74:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13d78:	00007706 	br	13f58 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   13d7c:	e0bff117 	ldw	r2,-60(fp)
   13d80:	10800483 	ldbu	r2,18(r2)
   13d84:	10803fcc 	andi	r2,r2,255
   13d88:	10c00060 	cmpeqi	r3,r2,1
   13d8c:	18004a1e 	bne	r3,zero,13eb8 <OSFlagPost+0x270>
   13d90:	10c00088 	cmpgei	r3,r2,2
   13d94:	1800021e 	bne	r3,zero,13da0 <OSFlagPost+0x158>
   13d98:	10002f26 	beq	r2,zero,13e58 <OSFlagPost+0x210>
   13d9c:	00005b06 	br	13f0c <OSFlagPost+0x2c4>
   13da0:	10c000a0 	cmpeqi	r3,r2,2
   13da4:	1800031e 	bne	r3,zero,13db4 <OSFlagPost+0x16c>
   13da8:	108000e0 	cmpeqi	r2,r2,3
   13dac:	1000171e 	bne	r2,zero,13e0c <OSFlagPost+0x1c4>
   13db0:	00005606 	br	13f0c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13db4:	e0bffc17 	ldw	r2,-16(fp)
   13db8:	10c0020b 	ldhu	r3,8(r2)
   13dbc:	e0bff117 	ldw	r2,-60(fp)
   13dc0:	1080040b 	ldhu	r2,16(r2)
   13dc4:	1884703a 	and	r2,r3,r2
   13dc8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13dcc:	e0bff117 	ldw	r2,-60(fp)
   13dd0:	1080040b 	ldhu	r2,16(r2)
   13dd4:	10ffffcc 	andi	r3,r2,65535
   13dd8:	e0bff60b 	ldhu	r2,-40(fp)
   13ddc:	1880541e 	bne	r3,r2,13f30 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13de0:	e0bff60b 	ldhu	r2,-40(fp)
   13de4:	100b883a 	mov	r5,r2
   13de8:	e13ff117 	ldw	r4,-60(fp)
   13dec:	00142e00 	call	142e0 <OS_FlagTaskRdy>
   13df0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13df4:	e0bff683 	ldbu	r2,-38(fp)
   13df8:	10800058 	cmpnei	r2,r2,1
   13dfc:	10004c1e 	bne	r2,zero,13f30 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e00:	00800044 	movi	r2,1
   13e04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e08:	00004906 	br	13f30 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e0c:	e0bffc17 	ldw	r2,-16(fp)
   13e10:	10c0020b 	ldhu	r3,8(r2)
   13e14:	e0bff117 	ldw	r2,-60(fp)
   13e18:	1080040b 	ldhu	r2,16(r2)
   13e1c:	1884703a 	and	r2,r3,r2
   13e20:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13e24:	e0bff60b 	ldhu	r2,-40(fp)
   13e28:	10004326 	beq	r2,zero,13f38 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e2c:	e0bff60b 	ldhu	r2,-40(fp)
   13e30:	100b883a 	mov	r5,r2
   13e34:	e13ff117 	ldw	r4,-60(fp)
   13e38:	00142e00 	call	142e0 <OS_FlagTaskRdy>
   13e3c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13e40:	e0bff683 	ldbu	r2,-38(fp)
   13e44:	10800058 	cmpnei	r2,r2,1
   13e48:	10003b1e 	bne	r2,zero,13f38 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13e4c:	00800044 	movi	r2,1
   13e50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13e54:	00003806 	br	13f38 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13e58:	e0bffc17 	ldw	r2,-16(fp)
   13e5c:	1080020b 	ldhu	r2,8(r2)
   13e60:	0084303a 	nor	r2,zero,r2
   13e64:	1007883a 	mov	r3,r2
   13e68:	e0bff117 	ldw	r2,-60(fp)
   13e6c:	1080040b 	ldhu	r2,16(r2)
   13e70:	1884703a 	and	r2,r3,r2
   13e74:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   13e78:	e0bff117 	ldw	r2,-60(fp)
   13e7c:	1080040b 	ldhu	r2,16(r2)
   13e80:	10ffffcc 	andi	r3,r2,65535
   13e84:	e0bff60b 	ldhu	r2,-40(fp)
   13e88:	18802d1e 	bne	r3,r2,13f40 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13e8c:	e0bff60b 	ldhu	r2,-40(fp)
   13e90:	100b883a 	mov	r5,r2
   13e94:	e13ff117 	ldw	r4,-60(fp)
   13e98:	00142e00 	call	142e0 <OS_FlagTaskRdy>
   13e9c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13ea0:	e0bff683 	ldbu	r2,-38(fp)
   13ea4:	10800058 	cmpnei	r2,r2,1
   13ea8:	1000251e 	bne	r2,zero,13f40 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13eac:	00800044 	movi	r2,1
   13eb0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13eb4:	00002206 	br	13f40 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   13eb8:	e0bffc17 	ldw	r2,-16(fp)
   13ebc:	1080020b 	ldhu	r2,8(r2)
   13ec0:	0084303a 	nor	r2,zero,r2
   13ec4:	1007883a 	mov	r3,r2
   13ec8:	e0bff117 	ldw	r2,-60(fp)
   13ecc:	1080040b 	ldhu	r2,16(r2)
   13ed0:	1884703a 	and	r2,r3,r2
   13ed4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   13ed8:	e0bff60b 	ldhu	r2,-40(fp)
   13edc:	10001a26 	beq	r2,zero,13f48 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   13ee0:	e0bff60b 	ldhu	r2,-40(fp)
   13ee4:	100b883a 	mov	r5,r2
   13ee8:	e13ff117 	ldw	r4,-60(fp)
   13eec:	00142e00 	call	142e0 <OS_FlagTaskRdy>
   13ef0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   13ef4:	e0bff683 	ldbu	r2,-38(fp)
   13ef8:	10800058 	cmpnei	r2,r2,1
   13efc:	1000121e 	bne	r2,zero,13f48 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   13f00:	00800044 	movi	r2,1
   13f04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   13f08:	00000f06 	br	13f48 <OSFlagPost+0x300>
   13f0c:	e0bff317 	ldw	r2,-52(fp)
   13f10:	e0bff515 	stw	r2,-44(fp)
   13f14:	e0bff517 	ldw	r2,-44(fp)
   13f18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   13f1c:	e0bfff17 	ldw	r2,-4(fp)
   13f20:	00c01bc4 	movi	r3,111
   13f24:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   13f28:	0005883a 	mov	r2,zero
   13f2c:	00002606 	br	13fc8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13f30:	0001883a 	nop
   13f34:	00000506 	br	13f4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13f38:	0001883a 	nop
   13f3c:	00000306 	br	13f4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13f40:	0001883a 	nop
   13f44:	00000106 	br	13f4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   13f48:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   13f4c:	e0bff117 	ldw	r2,-60(fp)
   13f50:	10800017 	ldw	r2,0(r2)
   13f54:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   13f58:	e0bff117 	ldw	r2,-60(fp)
   13f5c:	103f871e 	bne	r2,zero,13d7c <__alt_data_end+0xfffe303c>
   13f60:	e0bff317 	ldw	r2,-52(fp)
   13f64:	e0bff715 	stw	r2,-36(fp)
   13f68:	e0bff717 	ldw	r2,-36(fp)
   13f6c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   13f70:	e0bff203 	ldbu	r2,-56(fp)
   13f74:	10800058 	cmpnei	r2,r2,1
   13f78:	1000011e 	bne	r2,zero,13f80 <OSFlagPost+0x338>
        OS_Sched();
   13f7c:	00125000 	call	12500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13f80:	0005303a 	rdctl	r2,status
   13f84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13f88:	e0fffa17 	ldw	r3,-24(fp)
   13f8c:	00bfff84 	movi	r2,-2
   13f90:	1884703a 	and	r2,r3,r2
   13f94:	1001703a 	wrctl	status,r2
  
  return context;
   13f98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   13f9c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   13fa0:	e0bffc17 	ldw	r2,-16(fp)
   13fa4:	1080020b 	ldhu	r2,8(r2)
   13fa8:	e0bff90d 	sth	r2,-28(fp)
   13fac:	e0bff317 	ldw	r2,-52(fp)
   13fb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13fb4:	e0bff817 	ldw	r2,-32(fp)
   13fb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   13fbc:	e0bfff17 	ldw	r2,-4(fp)
   13fc0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   13fc4:	e0bff90b 	ldhu	r2,-28(fp)
}
   13fc8:	e037883a 	mov	sp,fp
   13fcc:	dfc00117 	ldw	ra,4(sp)
   13fd0:	df000017 	ldw	fp,0(sp)
   13fd4:	dec00204 	addi	sp,sp,8
   13fd8:	f800283a 	ret

00013fdc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   13fdc:	defff904 	addi	sp,sp,-28
   13fe0:	df000615 	stw	fp,24(sp)
   13fe4:	df000604 	addi	fp,sp,24
   13fe8:	e13ffe15 	stw	r4,-8(fp)
   13fec:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   13ff0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   13ff4:	e0bfff17 	ldw	r2,-4(fp)
   13ff8:	1000021e 	bne	r2,zero,14004 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   13ffc:	0005883a 	mov	r2,zero
   14000:	00002306 	br	14090 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   14004:	e0bffe17 	ldw	r2,-8(fp)
   14008:	1000051e 	bne	r2,zero,14020 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1400c:	e0bfff17 	ldw	r2,-4(fp)
   14010:	00c01b84 	movi	r3,110
   14014:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14018:	0005883a 	mov	r2,zero
   1401c:	00001c06 	br	14090 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   14020:	e0bffe17 	ldw	r2,-8(fp)
   14024:	10800003 	ldbu	r2,0(r2)
   14028:	10803fcc 	andi	r2,r2,255
   1402c:	10800160 	cmpeqi	r2,r2,5
   14030:	1000051e 	bne	r2,zero,14048 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14034:	e0bfff17 	ldw	r2,-4(fp)
   14038:	00c00044 	movi	r3,1
   1403c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   14040:	0005883a 	mov	r2,zero
   14044:	00001206 	br	14090 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14048:	0005303a 	rdctl	r2,status
   1404c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14050:	e0fffc17 	ldw	r3,-16(fp)
   14054:	00bfff84 	movi	r2,-2
   14058:	1884703a 	and	r2,r3,r2
   1405c:	1001703a 	wrctl	status,r2
  
  return context;
   14060:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14064:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   14068:	e0bffe17 	ldw	r2,-8(fp)
   1406c:	1080020b 	ldhu	r2,8(r2)
   14070:	e0bffb0d 	sth	r2,-20(fp)
   14074:	e0bffa17 	ldw	r2,-24(fp)
   14078:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   14084:	e0bfff17 	ldw	r2,-4(fp)
   14088:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1408c:	e0bffb0b 	ldhu	r2,-20(fp)
}
   14090:	e037883a 	mov	sp,fp
   14094:	df000017 	ldw	fp,0(sp)
   14098:	dec00104 	addi	sp,sp,4
   1409c:	f800283a 	ret

000140a0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   140a0:	defff804 	addi	sp,sp,-32
   140a4:	df000715 	stw	fp,28(sp)
   140a8:	df000704 	addi	fp,sp,28
   140ac:	e13ffb15 	stw	r4,-20(fp)
   140b0:	e17ffc15 	stw	r5,-16(fp)
   140b4:	3009883a 	mov	r4,r6
   140b8:	3807883a 	mov	r3,r7
   140bc:	e0800117 	ldw	r2,4(fp)
   140c0:	e13ffd0d 	sth	r4,-12(fp)
   140c4:	e0fffe05 	stb	r3,-8(fp)
   140c8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   140cc:	d0a74617 	ldw	r2,-25320(gp)
   140d0:	d0e74617 	ldw	r3,-25320(gp)
   140d4:	18c00c03 	ldbu	r3,48(r3)
   140d8:	18c00814 	ori	r3,r3,32
   140dc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   140e0:	d0a74617 	ldw	r2,-25320(gp)
   140e4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   140e8:	d0a74617 	ldw	r2,-25320(gp)
   140ec:	e0ffff0b 	ldhu	r3,-4(fp)
   140f0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   140f4:	d0a74617 	ldw	r2,-25320(gp)
   140f8:	e0fffc17 	ldw	r3,-16(fp)
   140fc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   14100:	e0bffc17 	ldw	r2,-16(fp)
   14104:	e0fffd0b 	ldhu	r3,-12(fp)
   14108:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1410c:	e0bffc17 	ldw	r2,-16(fp)
   14110:	e0fffe03 	ldbu	r3,-8(fp)
   14114:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   14118:	d0e74617 	ldw	r3,-25320(gp)
   1411c:	e0bffc17 	ldw	r2,-16(fp)
   14120:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   14124:	e0bffb17 	ldw	r2,-20(fp)
   14128:	10c00117 	ldw	r3,4(r2)
   1412c:	e0bffc17 	ldw	r2,-16(fp)
   14130:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   14134:	e0bffc17 	ldw	r2,-16(fp)
   14138:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1413c:	e0bffc17 	ldw	r2,-16(fp)
   14140:	e0fffb17 	ldw	r3,-20(fp)
   14144:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   14148:	e0bffb17 	ldw	r2,-20(fp)
   1414c:	10800117 	ldw	r2,4(r2)
   14150:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   14154:	e0bff917 	ldw	r2,-28(fp)
   14158:	10000326 	beq	r2,zero,14168 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1415c:	e0bff917 	ldw	r2,-28(fp)
   14160:	e0fffc17 	ldw	r3,-16(fp)
   14164:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   14168:	e0bffb17 	ldw	r2,-20(fp)
   1416c:	e0fffc17 	ldw	r3,-16(fp)
   14170:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   14174:	d0a74617 	ldw	r2,-25320(gp)
   14178:	10800d03 	ldbu	r2,52(r2)
   1417c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   14180:	e0fffa03 	ldbu	r3,-24(fp)
   14184:	e13ffa03 	ldbu	r4,-24(fp)
   14188:	d0a74344 	addi	r2,gp,-25331
   1418c:	2085883a 	add	r2,r4,r2
   14190:	10800003 	ldbu	r2,0(r2)
   14194:	1009883a 	mov	r4,r2
   14198:	d0a74617 	ldw	r2,-25320(gp)
   1419c:	10800d43 	ldbu	r2,53(r2)
   141a0:	0084303a 	nor	r2,zero,r2
   141a4:	2084703a 	and	r2,r4,r2
   141a8:	1009883a 	mov	r4,r2
   141ac:	d0a74344 	addi	r2,gp,-25331
   141b0:	1885883a 	add	r2,r3,r2
   141b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   141b8:	e0fffa03 	ldbu	r3,-24(fp)
   141bc:	d0a74344 	addi	r2,gp,-25331
   141c0:	1885883a 	add	r2,r3,r2
   141c4:	10800003 	ldbu	r2,0(r2)
   141c8:	10803fcc 	andi	r2,r2,255
   141cc:	1000071e 	bne	r2,zero,141ec <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   141d0:	d0a74617 	ldw	r2,-25320(gp)
   141d4:	10800d83 	ldbu	r2,54(r2)
   141d8:	0084303a 	nor	r2,zero,r2
   141dc:	1007883a 	mov	r3,r2
   141e0:	d0a74303 	ldbu	r2,-25332(gp)
   141e4:	1884703a 	and	r2,r3,r2
   141e8:	d0a74305 	stb	r2,-25332(gp)
    }
}
   141ec:	0001883a 	nop
   141f0:	e037883a 	mov	sp,fp
   141f4:	df000017 	ldw	fp,0(sp)
   141f8:	dec00104 	addi	sp,sp,4
   141fc:	f800283a 	ret

00014200 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   14200:	defffb04 	addi	sp,sp,-20
   14204:	dfc00415 	stw	ra,16(sp)
   14208:	df000315 	stw	fp,12(sp)
   1420c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   14210:	0140dc04 	movi	r5,880
   14214:	010000f4 	movhi	r4,3
   14218:	21277504 	addi	r4,r4,-25132
   1421c:	00124440 	call	12444 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   14220:	008000f4 	movhi	r2,3
   14224:	10a77504 	addi	r2,r2,-25132
   14228:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1422c:	008000f4 	movhi	r2,3
   14230:	10a78004 	addi	r2,r2,-25088
   14234:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14238:	e03ffd0d 	sth	zero,-12(fp)
   1423c:	00001306 	br	1428c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14240:	e0bffe17 	ldw	r2,-8(fp)
   14244:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   14248:	e0bffe17 	ldw	r2,-8(fp)
   1424c:	e0ffff17 	ldw	r3,-4(fp)
   14250:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   14254:	e0bffe17 	ldw	r2,-8(fp)
   14258:	00c00fc4 	movi	r3,63
   1425c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   14260:	e0bffe17 	ldw	r2,-8(fp)
   14264:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   14268:	e0bffe17 	ldw	r2,-8(fp)
   1426c:	10800b04 	addi	r2,r2,44
   14270:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   14274:	e0bfff17 	ldw	r2,-4(fp)
   14278:	10800b04 	addi	r2,r2,44
   1427c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   14280:	e0bffd0b 	ldhu	r2,-12(fp)
   14284:	10800044 	addi	r2,r2,1
   14288:	e0bffd0d 	sth	r2,-12(fp)
   1428c:	e0bffd0b 	ldhu	r2,-12(fp)
   14290:	108004f0 	cmpltui	r2,r2,19
   14294:	103fea1e 	bne	r2,zero,14240 <__alt_data_end+0xfffe3500>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   14298:	e0bffe17 	ldw	r2,-8(fp)
   1429c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   142a0:	e0bffe17 	ldw	r2,-8(fp)
   142a4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   142a8:	e0bffe17 	ldw	r2,-8(fp)
   142ac:	00c00fc4 	movi	r3,63
   142b0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   142b4:	e0bffe17 	ldw	r2,-8(fp)
   142b8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   142bc:	008000f4 	movhi	r2,3
   142c0:	10a77504 	addi	r2,r2,-25132
   142c4:	d0a74815 	stw	r2,-25312(gp)
#endif
}
   142c8:	0001883a 	nop
   142cc:	e037883a 	mov	sp,fp
   142d0:	dfc00117 	ldw	ra,4(sp)
   142d4:	df000017 	ldw	fp,0(sp)
   142d8:	dec00204 	addi	sp,sp,8
   142dc:	f800283a 	ret

000142e0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   142e0:	defffa04 	addi	sp,sp,-24
   142e4:	dfc00515 	stw	ra,20(sp)
   142e8:	df000415 	stw	fp,16(sp)
   142ec:	df000404 	addi	fp,sp,16
   142f0:	e13ffe15 	stw	r4,-8(fp)
   142f4:	2805883a 	mov	r2,r5
   142f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   142fc:	e0bffe17 	ldw	r2,-8(fp)
   14300:	10800217 	ldw	r2,8(r2)
   14304:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   14308:	e0bffd17 	ldw	r2,-12(fp)
   1430c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   14310:	e0bffd17 	ldw	r2,-12(fp)
   14314:	e0ffff0b 	ldhu	r3,-4(fp)
   14318:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1431c:	e0bffd17 	ldw	r2,-12(fp)
   14320:	10c00c03 	ldbu	r3,48(r2)
   14324:	00bff7c4 	movi	r2,-33
   14328:	1884703a 	and	r2,r3,r2
   1432c:	1007883a 	mov	r3,r2
   14330:	e0bffd17 	ldw	r2,-12(fp)
   14334:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   14338:	e0bffd17 	ldw	r2,-12(fp)
   1433c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   14340:	e0bffd17 	ldw	r2,-12(fp)
   14344:	10800c03 	ldbu	r2,48(r2)
   14348:	10803fcc 	andi	r2,r2,255
   1434c:	1000181e 	bne	r2,zero,143b0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   14350:	e0bffd17 	ldw	r2,-12(fp)
   14354:	10c00d83 	ldbu	r3,54(r2)
   14358:	d0a74303 	ldbu	r2,-25332(gp)
   1435c:	1884b03a 	or	r2,r3,r2
   14360:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14364:	e0bffd17 	ldw	r2,-12(fp)
   14368:	10800d03 	ldbu	r2,52(r2)
   1436c:	10c03fcc 	andi	r3,r2,255
   14370:	e0bffd17 	ldw	r2,-12(fp)
   14374:	10800d03 	ldbu	r2,52(r2)
   14378:	11003fcc 	andi	r4,r2,255
   1437c:	d0a74344 	addi	r2,gp,-25331
   14380:	2085883a 	add	r2,r4,r2
   14384:	11000003 	ldbu	r4,0(r2)
   14388:	e0bffd17 	ldw	r2,-12(fp)
   1438c:	10800d43 	ldbu	r2,53(r2)
   14390:	2084b03a 	or	r2,r4,r2
   14394:	1009883a 	mov	r4,r2
   14398:	d0a74344 	addi	r2,gp,-25331
   1439c:	1885883a 	add	r2,r3,r2
   143a0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   143a4:	00800044 	movi	r2,1
   143a8:	e0bffc05 	stb	r2,-16(fp)
   143ac:	00000106 	br	143b4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   143b0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   143b4:	e13ffe17 	ldw	r4,-8(fp)
   143b8:	00143d40 	call	143d4 <OS_FlagUnlink>
    return (sched);
   143bc:	e0bffc03 	ldbu	r2,-16(fp)
}
   143c0:	e037883a 	mov	sp,fp
   143c4:	dfc00117 	ldw	ra,4(sp)
   143c8:	df000017 	ldw	fp,0(sp)
   143cc:	dec00204 	addi	sp,sp,8
   143d0:	f800283a 	ret

000143d4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   143d4:	defffa04 	addi	sp,sp,-24
   143d8:	df000515 	stw	fp,20(sp)
   143dc:	df000504 	addi	fp,sp,20
   143e0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   143e4:	e0bfff17 	ldw	r2,-4(fp)
   143e8:	10800117 	ldw	r2,4(r2)
   143ec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   143f0:	e0bfff17 	ldw	r2,-4(fp)
   143f4:	10800017 	ldw	r2,0(r2)
   143f8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   143fc:	e0bffb17 	ldw	r2,-20(fp)
   14400:	10000b1e 	bne	r2,zero,14430 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   14404:	e0bfff17 	ldw	r2,-4(fp)
   14408:	10800317 	ldw	r2,12(r2)
   1440c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   14410:	e0bffd17 	ldw	r2,-12(fp)
   14414:	e0fffc17 	ldw	r3,-16(fp)
   14418:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1441c:	e0bffc17 	ldw	r2,-16(fp)
   14420:	10000b26 	beq	r2,zero,14450 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   14424:	e0bffc17 	ldw	r2,-16(fp)
   14428:	10000115 	stw	zero,4(r2)
   1442c:	00000806 	br	14450 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   14430:	e0bffb17 	ldw	r2,-20(fp)
   14434:	e0fffc17 	ldw	r3,-16(fp)
   14438:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1443c:	e0bffc17 	ldw	r2,-16(fp)
   14440:	10000326 	beq	r2,zero,14450 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   14444:	e0bffc17 	ldw	r2,-16(fp)
   14448:	e0fffb17 	ldw	r3,-20(fp)
   1444c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   14450:	e0bfff17 	ldw	r2,-4(fp)
   14454:	10800217 	ldw	r2,8(r2)
   14458:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1445c:	e0bffe17 	ldw	r2,-8(fp)
   14460:	10000a15 	stw	zero,40(r2)
#endif
}
   14464:	0001883a 	nop
   14468:	e037883a 	mov	sp,fp
   1446c:	df000017 	ldw	fp,0(sp)
   14470:	dec00104 	addi	sp,sp,4
   14474:	f800283a 	ret

00014478 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   14478:	defff404 	addi	sp,sp,-48
   1447c:	df000b15 	stw	fp,44(sp)
   14480:	df000b04 	addi	fp,sp,44
   14484:	e13ffc15 	stw	r4,-16(fp)
   14488:	e17ffd15 	stw	r5,-12(fp)
   1448c:	e1bffe15 	stw	r6,-8(fp)
   14490:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14494:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14498:	e0bfff17 	ldw	r2,-4(fp)
   1449c:	1000021e 	bne	r2,zero,144a8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   144a0:	0005883a 	mov	r2,zero
   144a4:	00006506 	br	1463c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   144a8:	e0bffc17 	ldw	r2,-16(fp)
   144ac:	1000051e 	bne	r2,zero,144c4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   144b0:	e0bfff17 	ldw	r2,-4(fp)
   144b4:	00c01884 	movi	r3,98
   144b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   144bc:	0005883a 	mov	r2,zero
   144c0:	00005e06 	br	1463c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   144c4:	e0bffc17 	ldw	r2,-16(fp)
   144c8:	108000cc 	andi	r2,r2,3
   144cc:	10000526 	beq	r2,zero,144e4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   144d0:	e0bfff17 	ldw	r2,-4(fp)
   144d4:	00c01884 	movi	r3,98
   144d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   144dc:	0005883a 	mov	r2,zero
   144e0:	00005606 	br	1463c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   144e4:	e0bffd17 	ldw	r2,-12(fp)
   144e8:	108000a8 	cmpgeui	r2,r2,2
   144ec:	1000051e 	bne	r2,zero,14504 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   144f0:	e0bfff17 	ldw	r2,-4(fp)
   144f4:	00c016c4 	movi	r3,91
   144f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   144fc:	0005883a 	mov	r2,zero
   14500:	00004e06 	br	1463c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   14504:	e0bffe17 	ldw	r2,-8(fp)
   14508:	10800128 	cmpgeui	r2,r2,4
   1450c:	1000051e 	bne	r2,zero,14524 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   14510:	e0bfff17 	ldw	r2,-4(fp)
   14514:	00c01704 	movi	r3,92
   14518:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1451c:	0005883a 	mov	r2,zero
   14520:	00004606 	br	1463c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14524:	0005303a 	rdctl	r2,status
   14528:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1452c:	e0fffb17 	ldw	r3,-20(fp)
   14530:	00bfff84 	movi	r2,-2
   14534:	1884703a 	and	r2,r3,r2
   14538:	1001703a 	wrctl	status,r2
  
  return context;
   1453c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14540:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   14544:	d0a74017 	ldw	r2,-25344(gp)
   14548:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1454c:	d0a74017 	ldw	r2,-25344(gp)
   14550:	10000326 	beq	r2,zero,14560 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   14554:	d0a74017 	ldw	r2,-25344(gp)
   14558:	10800117 	ldw	r2,4(r2)
   1455c:	d0a74015 	stw	r2,-25344(gp)
   14560:	e0bff817 	ldw	r2,-32(fp)
   14564:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14568:	e0bff917 	ldw	r2,-28(fp)
   1456c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   14570:	e0bffa17 	ldw	r2,-24(fp)
   14574:	1000051e 	bne	r2,zero,1458c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   14578:	e0bfff17 	ldw	r2,-4(fp)
   1457c:	00c01684 	movi	r3,90
   14580:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   14584:	0005883a 	mov	r2,zero
   14588:	00002c06 	br	1463c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1458c:	e0bffc17 	ldw	r2,-16(fp)
   14590:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   14594:	e0fffc17 	ldw	r3,-16(fp)
   14598:	e0bffe17 	ldw	r2,-8(fp)
   1459c:	1885883a 	add	r2,r3,r2
   145a0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   145a4:	e03ff715 	stw	zero,-36(fp)
   145a8:	00000c06 	br	145dc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   145ac:	e0bff617 	ldw	r2,-40(fp)
   145b0:	e0fff517 	ldw	r3,-44(fp)
   145b4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   145b8:	e0bff517 	ldw	r2,-44(fp)
   145bc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   145c0:	e0fff517 	ldw	r3,-44(fp)
   145c4:	e0bffe17 	ldw	r2,-8(fp)
   145c8:	1885883a 	add	r2,r3,r2
   145cc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   145d0:	e0bff717 	ldw	r2,-36(fp)
   145d4:	10800044 	addi	r2,r2,1
   145d8:	e0bff715 	stw	r2,-36(fp)
   145dc:	e0bffd17 	ldw	r2,-12(fp)
   145e0:	10bfffc4 	addi	r2,r2,-1
   145e4:	e0fff717 	ldw	r3,-36(fp)
   145e8:	18bff036 	bltu	r3,r2,145ac <__alt_data_end+0xfffe386c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   145ec:	e0bff617 	ldw	r2,-40(fp)
   145f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   145f4:	e0bffa17 	ldw	r2,-24(fp)
   145f8:	e0fffc17 	ldw	r3,-16(fp)
   145fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   14600:	e0bffa17 	ldw	r2,-24(fp)
   14604:	e0fffc17 	ldw	r3,-16(fp)
   14608:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1460c:	e0bffa17 	ldw	r2,-24(fp)
   14610:	e0fffd17 	ldw	r3,-12(fp)
   14614:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   14618:	e0bffa17 	ldw	r2,-24(fp)
   1461c:	e0fffd17 	ldw	r3,-12(fp)
   14620:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   14624:	e0bffa17 	ldw	r2,-24(fp)
   14628:	e0fffe17 	ldw	r3,-8(fp)
   1462c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   14630:	e0bfff17 	ldw	r2,-4(fp)
   14634:	10000005 	stb	zero,0(r2)
    return (pmem);
   14638:	e0bffa17 	ldw	r2,-24(fp)
}
   1463c:	e037883a 	mov	sp,fp
   14640:	df000017 	ldw	fp,0(sp)
   14644:	dec00104 	addi	sp,sp,4
   14648:	f800283a 	ret

0001464c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1464c:	defff804 	addi	sp,sp,-32
   14650:	df000715 	stw	fp,28(sp)
   14654:	df000704 	addi	fp,sp,28
   14658:	e13ffe15 	stw	r4,-8(fp)
   1465c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   14660:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   14664:	e0bfff17 	ldw	r2,-4(fp)
   14668:	1000021e 	bne	r2,zero,14674 <OSMemGet+0x28>
        return ((void *)0);
   1466c:	0005883a 	mov	r2,zero
   14670:	00002e06 	br	1472c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   14674:	e0bffe17 	ldw	r2,-8(fp)
   14678:	1000051e 	bne	r2,zero,14690 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1467c:	e0bfff17 	ldw	r2,-4(fp)
   14680:	00c01804 	movi	r3,96
   14684:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14688:	0005883a 	mov	r2,zero
   1468c:	00002706 	br	1472c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14690:	0005303a 	rdctl	r2,status
   14694:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14698:	e0fffd17 	ldw	r3,-12(fp)
   1469c:	00bfff84 	movi	r2,-2
   146a0:	1884703a 	and	r2,r3,r2
   146a4:	1001703a 	wrctl	status,r2
  
  return context;
   146a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   146ac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   146b0:	e0bffe17 	ldw	r2,-8(fp)
   146b4:	10800417 	ldw	r2,16(r2)
   146b8:	10001426 	beq	r2,zero,1470c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   146bc:	e0bffe17 	ldw	r2,-8(fp)
   146c0:	10800117 	ldw	r2,4(r2)
   146c4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   146c8:	e0bffb17 	ldw	r2,-20(fp)
   146cc:	10c00017 	ldw	r3,0(r2)
   146d0:	e0bffe17 	ldw	r2,-8(fp)
   146d4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   146d8:	e0bffe17 	ldw	r2,-8(fp)
   146dc:	10800417 	ldw	r2,16(r2)
   146e0:	10ffffc4 	addi	r3,r2,-1
   146e4:	e0bffe17 	ldw	r2,-8(fp)
   146e8:	10c00415 	stw	r3,16(r2)
   146ec:	e0bff917 	ldw	r2,-28(fp)
   146f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   146f4:	e0bffa17 	ldw	r2,-24(fp)
   146f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   146fc:	e0bfff17 	ldw	r2,-4(fp)
   14700:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   14704:	e0bffb17 	ldw	r2,-20(fp)
   14708:	00000806 	br	1472c <OSMemGet+0xe0>
   1470c:	e0bff917 	ldw	r2,-28(fp)
   14710:	e0bffc15 	stw	r2,-16(fp)
   14714:	e0bffc17 	ldw	r2,-16(fp)
   14718:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1471c:	e0bfff17 	ldw	r2,-4(fp)
   14720:	00c01744 	movi	r3,93
   14724:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   14728:	0005883a 	mov	r2,zero
}
   1472c:	e037883a 	mov	sp,fp
   14730:	df000017 	ldw	fp,0(sp)
   14734:	dec00104 	addi	sp,sp,4
   14738:	f800283a 	ret

0001473c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1473c:	defff704 	addi	sp,sp,-36
   14740:	dfc00815 	stw	ra,32(sp)
   14744:	df000715 	stw	fp,28(sp)
   14748:	df000704 	addi	fp,sp,28
   1474c:	e13ffd15 	stw	r4,-12(fp)
   14750:	e17ffe15 	stw	r5,-8(fp)
   14754:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14758:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1475c:	e0bfff17 	ldw	r2,-4(fp)
   14760:	1000021e 	bne	r2,zero,1476c <OSMemNameGet+0x30>
        return (0);
   14764:	0005883a 	mov	r2,zero
   14768:	00002b06 	br	14818 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1476c:	e0bffd17 	ldw	r2,-12(fp)
   14770:	1000051e 	bne	r2,zero,14788 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   14774:	e0bfff17 	ldw	r2,-4(fp)
   14778:	00c01804 	movi	r3,96
   1477c:	10c00005 	stb	r3,0(r2)
        return (0);
   14780:	0005883a 	mov	r2,zero
   14784:	00002406 	br	14818 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   14788:	e0bffe17 	ldw	r2,-8(fp)
   1478c:	1000051e 	bne	r2,zero,147a4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   14790:	e0bfff17 	ldw	r2,-4(fp)
   14794:	00c00304 	movi	r3,12
   14798:	10c00005 	stb	r3,0(r2)
        return (0);
   1479c:	0005883a 	mov	r2,zero
   147a0:	00001d06 	br	14818 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   147a4:	d0a74503 	ldbu	r2,-25324(gp)
   147a8:	10803fcc 	andi	r2,r2,255
   147ac:	10000526 	beq	r2,zero,147c4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   147b0:	e0bfff17 	ldw	r2,-4(fp)
   147b4:	00c00444 	movi	r3,17
   147b8:	10c00005 	stb	r3,0(r2)
        return (0);
   147bc:	0005883a 	mov	r2,zero
   147c0:	00001506 	br	14818 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147c4:	0005303a 	rdctl	r2,status
   147c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147cc:	e0fffb17 	ldw	r3,-20(fp)
   147d0:	00bfff84 	movi	r2,-2
   147d4:	1884703a 	and	r2,r3,r2
   147d8:	1001703a 	wrctl	status,r2
  
  return context;
   147dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   147e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   147e4:	e0bffd17 	ldw	r2,-12(fp)
   147e8:	10800504 	addi	r2,r2,20
   147ec:	100b883a 	mov	r5,r2
   147f0:	e13ffe17 	ldw	r4,-8(fp)
   147f4:	00126440 	call	12644 <OS_StrCopy>
   147f8:	e0bffa05 	stb	r2,-24(fp)
   147fc:	e0bff917 	ldw	r2,-28(fp)
   14800:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14804:	e0bffc17 	ldw	r2,-16(fp)
   14808:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1480c:	e0bfff17 	ldw	r2,-4(fp)
   14810:	10000005 	stb	zero,0(r2)
    return (len);
   14814:	e0bffa03 	ldbu	r2,-24(fp)
}
   14818:	e037883a 	mov	sp,fp
   1481c:	dfc00117 	ldw	ra,4(sp)
   14820:	df000017 	ldw	fp,0(sp)
   14824:	dec00204 	addi	sp,sp,8
   14828:	f800283a 	ret

0001482c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1482c:	defff604 	addi	sp,sp,-40
   14830:	dfc00915 	stw	ra,36(sp)
   14834:	df000815 	stw	fp,32(sp)
   14838:	df000804 	addi	fp,sp,32
   1483c:	e13ffd15 	stw	r4,-12(fp)
   14840:	e17ffe15 	stw	r5,-8(fp)
   14844:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14848:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1484c:	e0bfff17 	ldw	r2,-4(fp)
   14850:	10003526 	beq	r2,zero,14928 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   14854:	e0bffd17 	ldw	r2,-12(fp)
   14858:	1000041e 	bne	r2,zero,1486c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1485c:	e0bfff17 	ldw	r2,-4(fp)
   14860:	00c01804 	movi	r3,96
   14864:	10c00005 	stb	r3,0(r2)
        return;
   14868:	00003006 	br	1492c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1486c:	e0bffe17 	ldw	r2,-8(fp)
   14870:	1000041e 	bne	r2,zero,14884 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   14874:	e0bfff17 	ldw	r2,-4(fp)
   14878:	00c00304 	movi	r3,12
   1487c:	10c00005 	stb	r3,0(r2)
        return;
   14880:	00002a06 	br	1492c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   14884:	d0a74503 	ldbu	r2,-25324(gp)
   14888:	10803fcc 	andi	r2,r2,255
   1488c:	10000426 	beq	r2,zero,148a0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   14890:	e0bfff17 	ldw	r2,-4(fp)
   14894:	00c00484 	movi	r3,18
   14898:	10c00005 	stb	r3,0(r2)
        return;
   1489c:	00002306 	br	1492c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   148a0:	0005303a 	rdctl	r2,status
   148a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   148a8:	e0fffc17 	ldw	r3,-16(fp)
   148ac:	00bfff84 	movi	r2,-2
   148b0:	1884703a 	and	r2,r3,r2
   148b4:	1001703a 	wrctl	status,r2
  
  return context;
   148b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   148bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   148c0:	e13ffe17 	ldw	r4,-8(fp)
   148c4:	00126b80 	call	126b8 <OS_StrLen>
   148c8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   148cc:	e0bffa03 	ldbu	r2,-24(fp)
   148d0:	10800830 	cmpltui	r2,r2,32
   148d4:	1000081e 	bne	r2,zero,148f8 <OSMemNameSet+0xcc>
   148d8:	e0bff817 	ldw	r2,-32(fp)
   148dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   148e0:	e0bff917 	ldw	r2,-28(fp)
   148e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   148e8:	e0bfff17 	ldw	r2,-4(fp)
   148ec:	00c018c4 	movi	r3,99
   148f0:	10c00005 	stb	r3,0(r2)
        return;
   148f4:	00000d06 	br	1492c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   148f8:	e0bffd17 	ldw	r2,-12(fp)
   148fc:	10800504 	addi	r2,r2,20
   14900:	e17ffe17 	ldw	r5,-8(fp)
   14904:	1009883a 	mov	r4,r2
   14908:	00126440 	call	12644 <OS_StrCopy>
   1490c:	e0bff817 	ldw	r2,-32(fp)
   14910:	e0bffb15 	stw	r2,-20(fp)
   14914:	e0bffb17 	ldw	r2,-20(fp)
   14918:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1491c:	e0bfff17 	ldw	r2,-4(fp)
   14920:	10000005 	stb	zero,0(r2)
   14924:	00000106 	br	1492c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   14928:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1492c:	e037883a 	mov	sp,fp
   14930:	dfc00117 	ldw	ra,4(sp)
   14934:	df000017 	ldw	fp,0(sp)
   14938:	dec00204 	addi	sp,sp,8
   1493c:	f800283a 	ret

00014940 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   14940:	defff904 	addi	sp,sp,-28
   14944:	df000615 	stw	fp,24(sp)
   14948:	df000604 	addi	fp,sp,24
   1494c:	e13ffe15 	stw	r4,-8(fp)
   14950:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14954:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14958:	e0bffe17 	ldw	r2,-8(fp)
   1495c:	1000021e 	bne	r2,zero,14968 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14960:	00801804 	movi	r2,96
   14964:	00002806 	br	14a08 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   14968:	e0bfff17 	ldw	r2,-4(fp)
   1496c:	1000021e 	bne	r2,zero,14978 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   14970:	008017c4 	movi	r2,95
   14974:	00002406 	br	14a08 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14978:	0005303a 	rdctl	r2,status
   1497c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14980:	e0fffd17 	ldw	r3,-12(fp)
   14984:	00bfff84 	movi	r2,-2
   14988:	1884703a 	and	r2,r3,r2
   1498c:	1001703a 	wrctl	status,r2
  
  return context;
   14990:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14994:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   14998:	e0bffe17 	ldw	r2,-8(fp)
   1499c:	10c00417 	ldw	r3,16(r2)
   149a0:	e0bffe17 	ldw	r2,-8(fp)
   149a4:	10800317 	ldw	r2,12(r2)
   149a8:	18800636 	bltu	r3,r2,149c4 <OSMemPut+0x84>
   149ac:	e0bffa17 	ldw	r2,-24(fp)
   149b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   149b4:	e0bffb17 	ldw	r2,-20(fp)
   149b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   149bc:	00801784 	movi	r2,94
   149c0:	00001106 	br	14a08 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   149c4:	e0bffe17 	ldw	r2,-8(fp)
   149c8:	10c00117 	ldw	r3,4(r2)
   149cc:	e0bfff17 	ldw	r2,-4(fp)
   149d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   149d4:	e0bffe17 	ldw	r2,-8(fp)
   149d8:	e0ffff17 	ldw	r3,-4(fp)
   149dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   149e0:	e0bffe17 	ldw	r2,-8(fp)
   149e4:	10800417 	ldw	r2,16(r2)
   149e8:	10c00044 	addi	r3,r2,1
   149ec:	e0bffe17 	ldw	r2,-8(fp)
   149f0:	10c00415 	stw	r3,16(r2)
   149f4:	e0bffa17 	ldw	r2,-24(fp)
   149f8:	e0bffc15 	stw	r2,-16(fp)
   149fc:	e0bffc17 	ldw	r2,-16(fp)
   14a00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   14a04:	0005883a 	mov	r2,zero
}
   14a08:	e037883a 	mov	sp,fp
   14a0c:	df000017 	ldw	fp,0(sp)
   14a10:	dec00104 	addi	sp,sp,4
   14a14:	f800283a 	ret

00014a18 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   14a18:	defffa04 	addi	sp,sp,-24
   14a1c:	df000515 	stw	fp,20(sp)
   14a20:	df000504 	addi	fp,sp,20
   14a24:	e13ffe15 	stw	r4,-8(fp)
   14a28:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14a2c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   14a30:	e0bffe17 	ldw	r2,-8(fp)
   14a34:	1000021e 	bne	r2,zero,14a40 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   14a38:	00801804 	movi	r2,96
   14a3c:	00002c06 	br	14af0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   14a40:	e0bfff17 	ldw	r2,-4(fp)
   14a44:	1000021e 	bne	r2,zero,14a50 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   14a48:	00801844 	movi	r2,97
   14a4c:	00002806 	br	14af0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14a50:	0005303a 	rdctl	r2,status
   14a54:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14a58:	e0fffc17 	ldw	r3,-16(fp)
   14a5c:	00bfff84 	movi	r2,-2
   14a60:	1884703a 	and	r2,r3,r2
   14a64:	1001703a 	wrctl	status,r2
  
  return context;
   14a68:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   14a6c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   14a70:	e0bffe17 	ldw	r2,-8(fp)
   14a74:	10c00017 	ldw	r3,0(r2)
   14a78:	e0bfff17 	ldw	r2,-4(fp)
   14a7c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   14a80:	e0bffe17 	ldw	r2,-8(fp)
   14a84:	10c00117 	ldw	r3,4(r2)
   14a88:	e0bfff17 	ldw	r2,-4(fp)
   14a8c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   14a90:	e0bffe17 	ldw	r2,-8(fp)
   14a94:	10c00217 	ldw	r3,8(r2)
   14a98:	e0bfff17 	ldw	r2,-4(fp)
   14a9c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   14aa0:	e0bffe17 	ldw	r2,-8(fp)
   14aa4:	10c00317 	ldw	r3,12(r2)
   14aa8:	e0bfff17 	ldw	r2,-4(fp)
   14aac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   14ab0:	e0bffe17 	ldw	r2,-8(fp)
   14ab4:	10c00417 	ldw	r3,16(r2)
   14ab8:	e0bfff17 	ldw	r2,-4(fp)
   14abc:	10c00415 	stw	r3,16(r2)
   14ac0:	e0bffb17 	ldw	r2,-20(fp)
   14ac4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ac8:	e0bffd17 	ldw	r2,-12(fp)
   14acc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   14ad0:	e0bfff17 	ldw	r2,-4(fp)
   14ad4:	10c00317 	ldw	r3,12(r2)
   14ad8:	e0bfff17 	ldw	r2,-4(fp)
   14adc:	10800417 	ldw	r2,16(r2)
   14ae0:	1887c83a 	sub	r3,r3,r2
   14ae4:	e0bfff17 	ldw	r2,-4(fp)
   14ae8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   14aec:	0005883a 	mov	r2,zero
}
   14af0:	e037883a 	mov	sp,fp
   14af4:	df000017 	ldw	fp,0(sp)
   14af8:	dec00104 	addi	sp,sp,4
   14afc:	f800283a 	ret

00014b00 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   14b00:	defffc04 	addi	sp,sp,-16
   14b04:	dfc00315 	stw	ra,12(sp)
   14b08:	df000215 	stw	fp,8(sp)
   14b0c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   14b10:	01430c04 	movi	r5,3120
   14b14:	010000f4 	movhi	r4,3
   14b18:	21285104 	addi	r4,r4,-24252
   14b1c:	00124440 	call	12444 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   14b20:	008000f4 	movhi	r2,3
   14b24:	10a85104 	addi	r2,r2,-24252
   14b28:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14b2c:	e03fff0d 	sth	zero,-4(fp)
   14b30:	00001606 	br	14b8c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   14b34:	e0bfff0b 	ldhu	r2,-4(fp)
   14b38:	10800044 	addi	r2,r2,1
   14b3c:	01400d04 	movi	r5,52
   14b40:	1009883a 	mov	r4,r2
   14b44:	0002f440 	call	2f44 <__mulsi3>
   14b48:	1007883a 	mov	r3,r2
   14b4c:	008000f4 	movhi	r2,3
   14b50:	10a85104 	addi	r2,r2,-24252
   14b54:	1887883a 	add	r3,r3,r2
   14b58:	e0bffe17 	ldw	r2,-8(fp)
   14b5c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   14b60:	e0bffe17 	ldw	r2,-8(fp)
   14b64:	00c00fc4 	movi	r3,63
   14b68:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   14b6c:	e0bffe17 	ldw	r2,-8(fp)
   14b70:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   14b74:	e0bffe17 	ldw	r2,-8(fp)
   14b78:	10800d04 	addi	r2,r2,52
   14b7c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   14b80:	e0bfff0b 	ldhu	r2,-4(fp)
   14b84:	10800044 	addi	r2,r2,1
   14b88:	e0bfff0d 	sth	r2,-4(fp)
   14b8c:	e0bfff0b 	ldhu	r2,-4(fp)
   14b90:	10800ef0 	cmpltui	r2,r2,59
   14b94:	103fe71e 	bne	r2,zero,14b34 <__alt_data_end+0xfffe3df4>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   14b98:	e0bffe17 	ldw	r2,-8(fp)
   14b9c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   14ba0:	e0bffe17 	ldw	r2,-8(fp)
   14ba4:	00c00fc4 	movi	r3,63
   14ba8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   14bac:	e0bffe17 	ldw	r2,-8(fp)
   14bb0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   14bb4:	008000f4 	movhi	r2,3
   14bb8:	10a85104 	addi	r2,r2,-24252
   14bbc:	d0a74015 	stw	r2,-25344(gp)
#endif
}
   14bc0:	0001883a 	nop
   14bc4:	e037883a 	mov	sp,fp
   14bc8:	dfc00117 	ldw	ra,4(sp)
   14bcc:	df000017 	ldw	fp,0(sp)
   14bd0:	dec00204 	addi	sp,sp,8
   14bd4:	f800283a 	ret

00014bd8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   14bd8:	defff804 	addi	sp,sp,-32
   14bdc:	df000715 	stw	fp,28(sp)
   14be0:	df000704 	addi	fp,sp,28
   14be4:	e13ffe15 	stw	r4,-8(fp)
   14be8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14bec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   14bf0:	e0bfff17 	ldw	r2,-4(fp)
   14bf4:	1000021e 	bne	r2,zero,14c00 <OSQAccept+0x28>
        return ((void *)0);
   14bf8:	0005883a 	mov	r2,zero
   14bfc:	00004206 	br	14d08 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   14c00:	e0bffe17 	ldw	r2,-8(fp)
   14c04:	1000051e 	bne	r2,zero,14c1c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   14c08:	e0bfff17 	ldw	r2,-4(fp)
   14c0c:	00c00104 	movi	r3,4
   14c10:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14c14:	0005883a 	mov	r2,zero
   14c18:	00003b06 	br	14d08 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   14c1c:	e0bffe17 	ldw	r2,-8(fp)
   14c20:	10800003 	ldbu	r2,0(r2)
   14c24:	10803fcc 	andi	r2,r2,255
   14c28:	108000a0 	cmpeqi	r2,r2,2
   14c2c:	1000051e 	bne	r2,zero,14c44 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   14c30:	e0bfff17 	ldw	r2,-4(fp)
   14c34:	00c00044 	movi	r3,1
   14c38:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   14c3c:	0005883a 	mov	r2,zero
   14c40:	00003106 	br	14d08 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14c44:	0005303a 	rdctl	r2,status
   14c48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14c4c:	e0fffd17 	ldw	r3,-12(fp)
   14c50:	00bfff84 	movi	r2,-2
   14c54:	1884703a 	and	r2,r3,r2
   14c58:	1001703a 	wrctl	status,r2
  
  return context;
   14c5c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14c60:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   14c64:	e0bffe17 	ldw	r2,-8(fp)
   14c68:	10800117 	ldw	r2,4(r2)
   14c6c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   14c70:	e0bffc17 	ldw	r2,-16(fp)
   14c74:	1080058b 	ldhu	r2,22(r2)
   14c78:	10bfffcc 	andi	r2,r2,65535
   14c7c:	10001926 	beq	r2,zero,14ce4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   14c80:	e0bffc17 	ldw	r2,-16(fp)
   14c84:	10800417 	ldw	r2,16(r2)
   14c88:	11000104 	addi	r4,r2,4
   14c8c:	e0fffc17 	ldw	r3,-16(fp)
   14c90:	19000415 	stw	r4,16(r3)
   14c94:	10800017 	ldw	r2,0(r2)
   14c98:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   14c9c:	e0bffc17 	ldw	r2,-16(fp)
   14ca0:	1080058b 	ldhu	r2,22(r2)
   14ca4:	10bfffc4 	addi	r2,r2,-1
   14ca8:	1007883a 	mov	r3,r2
   14cac:	e0bffc17 	ldw	r2,-16(fp)
   14cb0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   14cb4:	e0bffc17 	ldw	r2,-16(fp)
   14cb8:	10c00417 	ldw	r3,16(r2)
   14cbc:	e0bffc17 	ldw	r2,-16(fp)
   14cc0:	10800217 	ldw	r2,8(r2)
   14cc4:	1880041e 	bne	r3,r2,14cd8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   14cc8:	e0bffc17 	ldw	r2,-16(fp)
   14ccc:	10c00117 	ldw	r3,4(r2)
   14cd0:	e0bffc17 	ldw	r2,-16(fp)
   14cd4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   14cd8:	e0bfff17 	ldw	r2,-4(fp)
   14cdc:	10000005 	stb	zero,0(r2)
   14ce0:	00000406 	br	14cf4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   14ce4:	e0bfff17 	ldw	r2,-4(fp)
   14ce8:	00c007c4 	movi	r3,31
   14cec:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   14cf0:	e03ff915 	stw	zero,-28(fp)
   14cf4:	e0bffa17 	ldw	r2,-24(fp)
   14cf8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14cfc:	e0bffb17 	ldw	r2,-20(fp)
   14d00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   14d04:	e0bff917 	ldw	r2,-28(fp)
}
   14d08:	e037883a 	mov	sp,fp
   14d0c:	df000017 	ldw	fp,0(sp)
   14d10:	dec00104 	addi	sp,sp,4
   14d14:	f800283a 	ret

00014d18 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   14d18:	defff404 	addi	sp,sp,-48
   14d1c:	dfc00b15 	stw	ra,44(sp)
   14d20:	df000a15 	stw	fp,40(sp)
   14d24:	df000a04 	addi	fp,sp,40
   14d28:	e13ffe15 	stw	r4,-8(fp)
   14d2c:	2805883a 	mov	r2,r5
   14d30:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14d34:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   14d38:	d0a74503 	ldbu	r2,-25324(gp)
   14d3c:	10803fcc 	andi	r2,r2,255
   14d40:	10000226 	beq	r2,zero,14d4c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   14d44:	0005883a 	mov	r2,zero
   14d48:	00005906 	br	14eb0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14d4c:	0005303a 	rdctl	r2,status
   14d50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14d54:	e0fffd17 	ldw	r3,-12(fp)
   14d58:	00bfff84 	movi	r2,-2
   14d5c:	1884703a 	and	r2,r3,r2
   14d60:	1001703a 	wrctl	status,r2
  
  return context;
   14d64:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   14d68:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   14d6c:	d0a74417 	ldw	r2,-25328(gp)
   14d70:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   14d74:	d0a74417 	ldw	r2,-25328(gp)
   14d78:	10000326 	beq	r2,zero,14d88 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   14d7c:	d0a74417 	ldw	r2,-25328(gp)
   14d80:	10800117 	ldw	r2,4(r2)
   14d84:	d0a74415 	stw	r2,-25328(gp)
   14d88:	e0bff717 	ldw	r2,-36(fp)
   14d8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d90:	e0bff817 	ldw	r2,-32(fp)
   14d94:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   14d98:	e0bff617 	ldw	r2,-40(fp)
   14d9c:	10004326 	beq	r2,zero,14eac <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14da0:	0005303a 	rdctl	r2,status
   14da4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14da8:	e0fff917 	ldw	r3,-28(fp)
   14dac:	00bfff84 	movi	r2,-2
   14db0:	1884703a 	and	r2,r3,r2
   14db4:	1001703a 	wrctl	status,r2
  
  return context;
   14db8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   14dbc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   14dc0:	d0a74217 	ldw	r2,-25336(gp)
   14dc4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   14dc8:	e0bffb17 	ldw	r2,-20(fp)
   14dcc:	10002d26 	beq	r2,zero,14e84 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   14dd0:	d0a74217 	ldw	r2,-25336(gp)
   14dd4:	10800017 	ldw	r2,0(r2)
   14dd8:	d0a74215 	stw	r2,-25336(gp)
   14ddc:	e0bff717 	ldw	r2,-36(fp)
   14de0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14de4:	e0bffa17 	ldw	r2,-24(fp)
   14de8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   14dec:	e0bffb17 	ldw	r2,-20(fp)
   14df0:	e0fffe17 	ldw	r3,-8(fp)
   14df4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   14df8:	e0bfff0b 	ldhu	r2,-4(fp)
   14dfc:	1085883a 	add	r2,r2,r2
   14e00:	1085883a 	add	r2,r2,r2
   14e04:	1007883a 	mov	r3,r2
   14e08:	e0bffe17 	ldw	r2,-8(fp)
   14e0c:	10c7883a 	add	r3,r2,r3
   14e10:	e0bffb17 	ldw	r2,-20(fp)
   14e14:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   14e18:	e0bffb17 	ldw	r2,-20(fp)
   14e1c:	e0fffe17 	ldw	r3,-8(fp)
   14e20:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   14e24:	e0bffb17 	ldw	r2,-20(fp)
   14e28:	e0fffe17 	ldw	r3,-8(fp)
   14e2c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   14e30:	e0bffb17 	ldw	r2,-20(fp)
   14e34:	e0ffff0b 	ldhu	r3,-4(fp)
   14e38:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   14e3c:	e0bffb17 	ldw	r2,-20(fp)
   14e40:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   14e44:	e0bff617 	ldw	r2,-40(fp)
   14e48:	00c00084 	movi	r3,2
   14e4c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   14e50:	e0bff617 	ldw	r2,-40(fp)
   14e54:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   14e58:	e0bff617 	ldw	r2,-40(fp)
   14e5c:	e0fffb17 	ldw	r3,-20(fp)
   14e60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   14e64:	e0bff617 	ldw	r2,-40(fp)
   14e68:	00c00fc4 	movi	r3,63
   14e6c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   14e70:	e0bff617 	ldw	r2,-40(fp)
   14e74:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   14e78:	e13ff617 	ldw	r4,-40(fp)
   14e7c:	00120640 	call	12064 <OS_EventWaitListInit>
   14e80:	00000a06 	br	14eac <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   14e84:	d0e74417 	ldw	r3,-25328(gp)
   14e88:	e0bff617 	ldw	r2,-40(fp)
   14e8c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   14e90:	e0bff617 	ldw	r2,-40(fp)
   14e94:	d0a74415 	stw	r2,-25328(gp)
   14e98:	e0bff717 	ldw	r2,-36(fp)
   14e9c:	e0bffc15 	stw	r2,-16(fp)
   14ea0:	e0bffc17 	ldw	r2,-16(fp)
   14ea4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   14ea8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   14eac:	e0bff617 	ldw	r2,-40(fp)
}
   14eb0:	e037883a 	mov	sp,fp
   14eb4:	dfc00117 	ldw	ra,4(sp)
   14eb8:	df000017 	ldw	fp,0(sp)
   14ebc:	dec00204 	addi	sp,sp,8
   14ec0:	f800283a 	ret

00014ec4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   14ec4:	defff204 	addi	sp,sp,-56
   14ec8:	dfc00d15 	stw	ra,52(sp)
   14ecc:	df000c15 	stw	fp,48(sp)
   14ed0:	df000c04 	addi	fp,sp,48
   14ed4:	e13ffd15 	stw	r4,-12(fp)
   14ed8:	2805883a 	mov	r2,r5
   14edc:	e1bfff15 	stw	r6,-4(fp)
   14ee0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14ee4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   14ee8:	e0bfff17 	ldw	r2,-4(fp)
   14eec:	1000021e 	bne	r2,zero,14ef8 <OSQDel+0x34>
        return (pevent);
   14ef0:	e0bffd17 	ldw	r2,-12(fp)
   14ef4:	00008e06 	br	15130 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   14ef8:	e0bffd17 	ldw	r2,-12(fp)
   14efc:	1000051e 	bne	r2,zero,14f14 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   14f00:	e0bfff17 	ldw	r2,-4(fp)
   14f04:	00c00104 	movi	r3,4
   14f08:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14f0c:	e0bffd17 	ldw	r2,-12(fp)
   14f10:	00008706 	br	15130 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   14f14:	e0bffd17 	ldw	r2,-12(fp)
   14f18:	10800003 	ldbu	r2,0(r2)
   14f1c:	10803fcc 	andi	r2,r2,255
   14f20:	108000a0 	cmpeqi	r2,r2,2
   14f24:	1000051e 	bne	r2,zero,14f3c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   14f28:	e0bfff17 	ldw	r2,-4(fp)
   14f2c:	00c00044 	movi	r3,1
   14f30:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14f34:	e0bffd17 	ldw	r2,-12(fp)
   14f38:	00007d06 	br	15130 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   14f3c:	d0a74503 	ldbu	r2,-25324(gp)
   14f40:	10803fcc 	andi	r2,r2,255
   14f44:	10000526 	beq	r2,zero,14f5c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   14f48:	e0bfff17 	ldw	r2,-4(fp)
   14f4c:	00c003c4 	movi	r3,15
   14f50:	10c00005 	stb	r3,0(r2)
        return (pevent);
   14f54:	e0bffd17 	ldw	r2,-12(fp)
   14f58:	00007506 	br	15130 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14f5c:	0005303a 	rdctl	r2,status
   14f60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14f64:	e0fffc17 	ldw	r3,-16(fp)
   14f68:	00bfff84 	movi	r2,-2
   14f6c:	1884703a 	and	r2,r3,r2
   14f70:	1001703a 	wrctl	status,r2
  
  return context;
   14f74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   14f78:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   14f7c:	e0bffd17 	ldw	r2,-12(fp)
   14f80:	10800283 	ldbu	r2,10(r2)
   14f84:	10803fcc 	andi	r2,r2,255
   14f88:	10000326 	beq	r2,zero,14f98 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   14f8c:	00800044 	movi	r2,1
   14f90:	e0bff405 	stb	r2,-48(fp)
   14f94:	00000106 	br	14f9c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   14f98:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   14f9c:	e0bffe03 	ldbu	r2,-8(fp)
   14fa0:	10000326 	beq	r2,zero,14fb0 <OSQDel+0xec>
   14fa4:	10800060 	cmpeqi	r2,r2,1
   14fa8:	1000301e 	bne	r2,zero,1506c <OSQDel+0x1a8>
   14fac:	00005506 	br	15104 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   14fb0:	e0bff403 	ldbu	r2,-48(fp)
   14fb4:	10001e1e 	bne	r2,zero,15030 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   14fb8:	e0bffd17 	ldw	r2,-12(fp)
   14fbc:	00c00fc4 	movi	r3,63
   14fc0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   14fc4:	e0bffd17 	ldw	r2,-12(fp)
   14fc8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   14fcc:	e0bffd17 	ldw	r2,-12(fp)
   14fd0:	10800117 	ldw	r2,4(r2)
   14fd4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   14fd8:	d0e74217 	ldw	r3,-25336(gp)
   14fdc:	e0bff817 	ldw	r2,-32(fp)
   14fe0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   14fe4:	e0bff817 	ldw	r2,-32(fp)
   14fe8:	d0a74215 	stw	r2,-25336(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   14ff4:	d0e74417 	ldw	r3,-25328(gp)
   14ff8:	e0bffd17 	ldw	r2,-12(fp)
   14ffc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15000:	e0bffd17 	ldw	r2,-12(fp)
   15004:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15008:	e0bffd17 	ldw	r2,-12(fp)
   1500c:	d0a74415 	stw	r2,-25328(gp)
   15010:	e0bff617 	ldw	r2,-40(fp)
   15014:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15018:	e0bff717 	ldw	r2,-36(fp)
   1501c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15020:	e0bfff17 	ldw	r2,-4(fp)
   15024:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   15028:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1502c:	00003f06 	br	1512c <OSQDel+0x268>
   15030:	e0bff617 	ldw	r2,-40(fp)
   15034:	e0bff915 	stw	r2,-28(fp)
   15038:	e0bff917 	ldw	r2,-28(fp)
   1503c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15040:	e0bfff17 	ldw	r2,-4(fp)
   15044:	00c01244 	movi	r3,73
   15048:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1504c:	e0bffd17 	ldw	r2,-12(fp)
   15050:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   15054:	00003506 	br	1512c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   15058:	000f883a 	mov	r7,zero
   1505c:	01800104 	movi	r6,4
   15060:	000b883a 	mov	r5,zero
   15064:	e13ffd17 	ldw	r4,-12(fp)
   15068:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1506c:	e0bffd17 	ldw	r2,-12(fp)
   15070:	10800283 	ldbu	r2,10(r2)
   15074:	10803fcc 	andi	r2,r2,255
   15078:	103ff71e 	bne	r2,zero,15058 <__alt_data_end+0xfffe4318>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1507c:	e0bffd17 	ldw	r2,-12(fp)
   15080:	00c00fc4 	movi	r3,63
   15084:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   15088:	e0bffd17 	ldw	r2,-12(fp)
   1508c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   15090:	e0bffd17 	ldw	r2,-12(fp)
   15094:	10800117 	ldw	r2,4(r2)
   15098:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1509c:	d0e74217 	ldw	r3,-25336(gp)
   150a0:	e0bff817 	ldw	r2,-32(fp)
   150a4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   150a8:	e0bff817 	ldw	r2,-32(fp)
   150ac:	d0a74215 	stw	r2,-25336(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   150b0:	e0bffd17 	ldw	r2,-12(fp)
   150b4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   150b8:	d0e74417 	ldw	r3,-25328(gp)
   150bc:	e0bffd17 	ldw	r2,-12(fp)
   150c0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   150c4:	e0bffd17 	ldw	r2,-12(fp)
   150c8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   150cc:	e0bffd17 	ldw	r2,-12(fp)
   150d0:	d0a74415 	stw	r2,-25328(gp)
   150d4:	e0bff617 	ldw	r2,-40(fp)
   150d8:	e0bffa15 	stw	r2,-24(fp)
   150dc:	e0bffa17 	ldw	r2,-24(fp)
   150e0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   150e4:	e0bff403 	ldbu	r2,-48(fp)
   150e8:	10800058 	cmpnei	r2,r2,1
   150ec:	1000011e 	bne	r2,zero,150f4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   150f0:	00125000 	call	12500 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   150f4:	e0bfff17 	ldw	r2,-4(fp)
   150f8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   150fc:	e03ff515 	stw	zero,-44(fp)
             break;
   15100:	00000a06 	br	1512c <OSQDel+0x268>
   15104:	e0bff617 	ldw	r2,-40(fp)
   15108:	e0bffb15 	stw	r2,-20(fp)
   1510c:	e0bffb17 	ldw	r2,-20(fp)
   15110:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   15114:	e0bfff17 	ldw	r2,-4(fp)
   15118:	00c001c4 	movi	r3,7
   1511c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   15120:	e0bffd17 	ldw	r2,-12(fp)
   15124:	e0bff515 	stw	r2,-44(fp)
             break;
   15128:	0001883a 	nop
    }
    return (pevent_return);
   1512c:	e0bff517 	ldw	r2,-44(fp)
}
   15130:	e037883a 	mov	sp,fp
   15134:	dfc00117 	ldw	ra,4(sp)
   15138:	df000017 	ldw	fp,0(sp)
   1513c:	dec00204 	addi	sp,sp,8
   15140:	f800283a 	ret

00015144 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   15144:	defffa04 	addi	sp,sp,-24
   15148:	df000515 	stw	fp,20(sp)
   1514c:	df000504 	addi	fp,sp,20
   15150:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15154:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15158:	e0bfff17 	ldw	r2,-4(fp)
   1515c:	1000021e 	bne	r2,zero,15168 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   15160:	00800104 	movi	r2,4
   15164:	00002106 	br	151ec <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15168:	e0bfff17 	ldw	r2,-4(fp)
   1516c:	10800003 	ldbu	r2,0(r2)
   15170:	10803fcc 	andi	r2,r2,255
   15174:	108000a0 	cmpeqi	r2,r2,2
   15178:	1000021e 	bne	r2,zero,15184 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1517c:	00800044 	movi	r2,1
   15180:	00001a06 	br	151ec <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15184:	0005303a 	rdctl	r2,status
   15188:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1518c:	e0fffd17 	ldw	r3,-12(fp)
   15190:	00bfff84 	movi	r2,-2
   15194:	1884703a 	and	r2,r3,r2
   15198:	1001703a 	wrctl	status,r2
  
  return context;
   1519c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   151a0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   151a4:	e0bfff17 	ldw	r2,-4(fp)
   151a8:	10800117 	ldw	r2,4(r2)
   151ac:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   151b0:	e0bffc17 	ldw	r2,-16(fp)
   151b4:	10c00117 	ldw	r3,4(r2)
   151b8:	e0bffc17 	ldw	r2,-16(fp)
   151bc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   151c0:	e0bffc17 	ldw	r2,-16(fp)
   151c4:	10c00117 	ldw	r3,4(r2)
   151c8:	e0bffc17 	ldw	r2,-16(fp)
   151cc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   151d0:	e0bffc17 	ldw	r2,-16(fp)
   151d4:	1000058d 	sth	zero,22(r2)
   151d8:	e0bffb17 	ldw	r2,-20(fp)
   151dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151e0:	e0bffe17 	ldw	r2,-8(fp)
   151e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   151e8:	0005883a 	mov	r2,zero
}
   151ec:	e037883a 	mov	sp,fp
   151f0:	df000017 	ldw	fp,0(sp)
   151f4:	dec00104 	addi	sp,sp,4
   151f8:	f800283a 	ret

000151fc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   151fc:	defff304 	addi	sp,sp,-52
   15200:	dfc00c15 	stw	ra,48(sp)
   15204:	df000b15 	stw	fp,44(sp)
   15208:	df000b04 	addi	fp,sp,44
   1520c:	e13ffd15 	stw	r4,-12(fp)
   15210:	2805883a 	mov	r2,r5
   15214:	e1bfff15 	stw	r6,-4(fp)
   15218:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1521c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   15220:	e0bfff17 	ldw	r2,-4(fp)
   15224:	1000021e 	bne	r2,zero,15230 <OSQPend+0x34>
        return ((void *)0);
   15228:	0005883a 	mov	r2,zero
   1522c:	00009106 	br	15474 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   15230:	e0bffd17 	ldw	r2,-12(fp)
   15234:	1000051e 	bne	r2,zero,1524c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15238:	e0bfff17 	ldw	r2,-4(fp)
   1523c:	00c00104 	movi	r3,4
   15240:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   15244:	0005883a 	mov	r2,zero
   15248:	00008a06 	br	15474 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1524c:	e0bffd17 	ldw	r2,-12(fp)
   15250:	10800003 	ldbu	r2,0(r2)
   15254:	10803fcc 	andi	r2,r2,255
   15258:	108000a0 	cmpeqi	r2,r2,2
   1525c:	1000051e 	bne	r2,zero,15274 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15260:	e0bfff17 	ldw	r2,-4(fp)
   15264:	00c00044 	movi	r3,1
   15268:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1526c:	0005883a 	mov	r2,zero
   15270:	00008006 	br	15474 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   15274:	d0a74503 	ldbu	r2,-25324(gp)
   15278:	10803fcc 	andi	r2,r2,255
   1527c:	10000526 	beq	r2,zero,15294 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   15280:	e0bfff17 	ldw	r2,-4(fp)
   15284:	00c00084 	movi	r3,2
   15288:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1528c:	0005883a 	mov	r2,zero
   15290:	00007806 	br	15474 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   15294:	d0a73703 	ldbu	r2,-25380(gp)
   15298:	10803fcc 	andi	r2,r2,255
   1529c:	10000526 	beq	r2,zero,152b4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   152a0:	e0bfff17 	ldw	r2,-4(fp)
   152a4:	00c00344 	movi	r3,13
   152a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   152ac:	0005883a 	mov	r2,zero
   152b0:	00007006 	br	15474 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   152b4:	0005303a 	rdctl	r2,status
   152b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   152bc:	e0fffc17 	ldw	r3,-16(fp)
   152c0:	00bfff84 	movi	r2,-2
   152c4:	1884703a 	and	r2,r3,r2
   152c8:	1001703a 	wrctl	status,r2
  
  return context;
   152cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   152d0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   152d4:	e0bffd17 	ldw	r2,-12(fp)
   152d8:	10800117 	ldw	r2,4(r2)
   152dc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   152e0:	e0bff817 	ldw	r2,-32(fp)
   152e4:	1080058b 	ldhu	r2,22(r2)
   152e8:	10bfffcc 	andi	r2,r2,65535
   152ec:	10001e26 	beq	r2,zero,15368 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   152f0:	e0bff817 	ldw	r2,-32(fp)
   152f4:	10800417 	ldw	r2,16(r2)
   152f8:	11000104 	addi	r4,r2,4
   152fc:	e0fff817 	ldw	r3,-32(fp)
   15300:	19000415 	stw	r4,16(r3)
   15304:	10800017 	ldw	r2,0(r2)
   15308:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1530c:	e0bff817 	ldw	r2,-32(fp)
   15310:	1080058b 	ldhu	r2,22(r2)
   15314:	10bfffc4 	addi	r2,r2,-1
   15318:	1007883a 	mov	r3,r2
   1531c:	e0bff817 	ldw	r2,-32(fp)
   15320:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   15324:	e0bff817 	ldw	r2,-32(fp)
   15328:	10c00417 	ldw	r3,16(r2)
   1532c:	e0bff817 	ldw	r2,-32(fp)
   15330:	10800217 	ldw	r2,8(r2)
   15334:	1880041e 	bne	r3,r2,15348 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   15338:	e0bff817 	ldw	r2,-32(fp)
   1533c:	10c00117 	ldw	r3,4(r2)
   15340:	e0bff817 	ldw	r2,-32(fp)
   15344:	10c00415 	stw	r3,16(r2)
   15348:	e0bff617 	ldw	r2,-40(fp)
   1534c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15350:	e0bff717 	ldw	r2,-36(fp)
   15354:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   15358:	e0bfff17 	ldw	r2,-4(fp)
   1535c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   15360:	e0bff517 	ldw	r2,-44(fp)
   15364:	00004306 	br	15474 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   15368:	d0a74617 	ldw	r2,-25320(gp)
   1536c:	d0e74617 	ldw	r3,-25320(gp)
   15370:	18c00c03 	ldbu	r3,48(r3)
   15374:	18c00114 	ori	r3,r3,4
   15378:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1537c:	d0a74617 	ldw	r2,-25320(gp)
   15380:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   15384:	d0a74617 	ldw	r2,-25320(gp)
   15388:	e0fffe0b 	ldhu	r3,-8(fp)
   1538c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   15390:	e13ffd17 	ldw	r4,-12(fp)
   15394:	0011c4c0 	call	11c4c <OS_EventTaskWait>
   15398:	e0bff617 	ldw	r2,-40(fp)
   1539c:	e0bffb15 	stw	r2,-20(fp)
   153a0:	e0bffb17 	ldw	r2,-20(fp)
   153a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   153a8:	00125000 	call	12500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   153ac:	0005303a 	rdctl	r2,status
   153b0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   153b4:	e0fff917 	ldw	r3,-28(fp)
   153b8:	00bfff84 	movi	r2,-2
   153bc:	1884703a 	and	r2,r3,r2
   153c0:	1001703a 	wrctl	status,r2
  
  return context;
   153c4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   153c8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   153cc:	d0a74617 	ldw	r2,-25320(gp)
   153d0:	10800c43 	ldbu	r2,49(r2)
   153d4:	10803fcc 	andi	r2,r2,255
   153d8:	10000326 	beq	r2,zero,153e8 <OSQPend+0x1ec>
   153dc:	108000a0 	cmpeqi	r2,r2,2
   153e0:	1000071e 	bne	r2,zero,15400 <OSQPend+0x204>
   153e4:	00000b06 	br	15414 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   153e8:	d0a74617 	ldw	r2,-25320(gp)
   153ec:	10800917 	ldw	r2,36(r2)
   153f0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   153f4:	e0bfff17 	ldw	r2,-4(fp)
   153f8:	10000005 	stb	zero,0(r2)
             break;
   153fc:	00000e06 	br	15438 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   15400:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   15404:	e0bfff17 	ldw	r2,-4(fp)
   15408:	00c00384 	movi	r3,14
   1540c:	10c00005 	stb	r3,0(r2)
             break;
   15410:	00000906 	br	15438 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   15414:	d0a74617 	ldw	r2,-25320(gp)
   15418:	e17ffd17 	ldw	r5,-12(fp)
   1541c:	1009883a 	mov	r4,r2
   15420:	0011eac0 	call	11eac <OS_EventTaskRemove>
             pmsg = (void *)0;
   15424:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   15428:	e0bfff17 	ldw	r2,-4(fp)
   1542c:	00c00284 	movi	r3,10
   15430:	10c00005 	stb	r3,0(r2)
             break;
   15434:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   15438:	d0a74617 	ldw	r2,-25320(gp)
   1543c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   15440:	d0a74617 	ldw	r2,-25320(gp)
   15444:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   15448:	d0a74617 	ldw	r2,-25320(gp)
   1544c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   15450:	d0a74617 	ldw	r2,-25320(gp)
   15454:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   15458:	d0a74617 	ldw	r2,-25320(gp)
   1545c:	10000915 	stw	zero,36(r2)
   15460:	e0bff617 	ldw	r2,-40(fp)
   15464:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15468:	e0bffa17 	ldw	r2,-24(fp)
   1546c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   15470:	e0bff517 	ldw	r2,-44(fp)
}
   15474:	e037883a 	mov	sp,fp
   15478:	dfc00117 	ldw	ra,4(sp)
   1547c:	df000017 	ldw	fp,0(sp)
   15480:	dec00204 	addi	sp,sp,8
   15484:	f800283a 	ret

00015488 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15488:	defff604 	addi	sp,sp,-40
   1548c:	dfc00915 	stw	ra,36(sp)
   15490:	df000815 	stw	fp,32(sp)
   15494:	df000804 	addi	fp,sp,32
   15498:	e13ffd15 	stw	r4,-12(fp)
   1549c:	2805883a 	mov	r2,r5
   154a0:	e1bfff15 	stw	r6,-4(fp)
   154a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   154a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   154ac:	e0bfff17 	ldw	r2,-4(fp)
   154b0:	1000021e 	bne	r2,zero,154bc <OSQPendAbort+0x34>
        return (0);
   154b4:	0005883a 	mov	r2,zero
   154b8:	00004906 	br	155e0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   154bc:	e0bffd17 	ldw	r2,-12(fp)
   154c0:	1000051e 	bne	r2,zero,154d8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   154c4:	e0bfff17 	ldw	r2,-4(fp)
   154c8:	00c00104 	movi	r3,4
   154cc:	10c00005 	stb	r3,0(r2)
        return (0);
   154d0:	0005883a 	mov	r2,zero
   154d4:	00004206 	br	155e0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   154d8:	e0bffd17 	ldw	r2,-12(fp)
   154dc:	10800003 	ldbu	r2,0(r2)
   154e0:	10803fcc 	andi	r2,r2,255
   154e4:	108000a0 	cmpeqi	r2,r2,2
   154e8:	1000051e 	bne	r2,zero,15500 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   154ec:	e0bfff17 	ldw	r2,-4(fp)
   154f0:	00c00044 	movi	r3,1
   154f4:	10c00005 	stb	r3,0(r2)
        return (0);
   154f8:	0005883a 	mov	r2,zero
   154fc:	00003806 	br	155e0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15500:	0005303a 	rdctl	r2,status
   15504:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15508:	e0fffc17 	ldw	r3,-16(fp)
   1550c:	00bfff84 	movi	r2,-2
   15510:	1884703a 	and	r2,r3,r2
   15514:	1001703a 	wrctl	status,r2
  
  return context;
   15518:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1551c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   15520:	e0bffd17 	ldw	r2,-12(fp)
   15524:	10800283 	ldbu	r2,10(r2)
   15528:	10803fcc 	andi	r2,r2,255
   1552c:	10002526 	beq	r2,zero,155c4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   15530:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   15534:	e0bffe03 	ldbu	r2,-8(fp)
   15538:	10800060 	cmpeqi	r2,r2,1
   1553c:	10000e26 	beq	r2,zero,15578 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15540:	00000806 	br	15564 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15544:	01c00084 	movi	r7,2
   15548:	01800104 	movi	r6,4
   1554c:	000b883a 	mov	r5,zero
   15550:	e13ffd17 	ldw	r4,-12(fp)
   15554:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                     nbr_tasks++;
   15558:	e0bff803 	ldbu	r2,-32(fp)
   1555c:	10800044 	addi	r2,r2,1
   15560:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   15564:	e0bffd17 	ldw	r2,-12(fp)
   15568:	10800283 	ldbu	r2,10(r2)
   1556c:	10803fcc 	andi	r2,r2,255
   15570:	103ff41e 	bne	r2,zero,15544 <__alt_data_end+0xfffe4804>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   15574:	00000906 	br	1559c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   15578:	01c00084 	movi	r7,2
   1557c:	01800104 	movi	r6,4
   15580:	000b883a 	mov	r5,zero
   15584:	e13ffd17 	ldw	r4,-12(fp)
   15588:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 nbr_tasks++;
   1558c:	e0bff803 	ldbu	r2,-32(fp)
   15590:	10800044 	addi	r2,r2,1
   15594:	e0bff805 	stb	r2,-32(fp)
                 break;
   15598:	0001883a 	nop
   1559c:	e0bff917 	ldw	r2,-28(fp)
   155a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   155a4:	e0bffa17 	ldw	r2,-24(fp)
   155a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   155ac:	00125000 	call	12500 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   155b0:	e0bfff17 	ldw	r2,-4(fp)
   155b4:	00c00384 	movi	r3,14
   155b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   155bc:	e0bff803 	ldbu	r2,-32(fp)
   155c0:	00000706 	br	155e0 <OSQPendAbort+0x158>
   155c4:	e0bff917 	ldw	r2,-28(fp)
   155c8:	e0bffb15 	stw	r2,-20(fp)
   155cc:	e0bffb17 	ldw	r2,-20(fp)
   155d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   155d4:	e0bfff17 	ldw	r2,-4(fp)
   155d8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   155dc:	0005883a 	mov	r2,zero
}
   155e0:	e037883a 	mov	sp,fp
   155e4:	dfc00117 	ldw	ra,4(sp)
   155e8:	df000017 	ldw	fp,0(sp)
   155ec:	dec00204 	addi	sp,sp,8
   155f0:	f800283a 	ret

000155f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   155f4:	defff604 	addi	sp,sp,-40
   155f8:	dfc00915 	stw	ra,36(sp)
   155fc:	df000815 	stw	fp,32(sp)
   15600:	df000804 	addi	fp,sp,32
   15604:	e13ffe15 	stw	r4,-8(fp)
   15608:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1560c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15610:	e0bffe17 	ldw	r2,-8(fp)
   15614:	1000021e 	bne	r2,zero,15620 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15618:	00800104 	movi	r2,4
   1561c:	00004a06 	br	15748 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15620:	e0bffe17 	ldw	r2,-8(fp)
   15624:	10800003 	ldbu	r2,0(r2)
   15628:	10803fcc 	andi	r2,r2,255
   1562c:	108000a0 	cmpeqi	r2,r2,2
   15630:	1000021e 	bne	r2,zero,1563c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   15634:	00800044 	movi	r2,1
   15638:	00004306 	br	15748 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1563c:	0005303a 	rdctl	r2,status
   15640:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15644:	e0fffd17 	ldw	r3,-12(fp)
   15648:	00bfff84 	movi	r2,-2
   1564c:	1884703a 	and	r2,r3,r2
   15650:	1001703a 	wrctl	status,r2
  
  return context;
   15654:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15658:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1565c:	e0bffe17 	ldw	r2,-8(fp)
   15660:	10800283 	ldbu	r2,10(r2)
   15664:	10803fcc 	andi	r2,r2,255
   15668:	10000c26 	beq	r2,zero,1569c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1566c:	000f883a 	mov	r7,zero
   15670:	01800104 	movi	r6,4
   15674:	e17fff17 	ldw	r5,-4(fp)
   15678:	e13ffe17 	ldw	r4,-8(fp)
   1567c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   15680:	e0bff817 	ldw	r2,-32(fp)
   15684:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15688:	e0bff917 	ldw	r2,-28(fp)
   1568c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   15690:	00125000 	call	12500 <OS_Sched>
        return (OS_ERR_NONE);
   15694:	0005883a 	mov	r2,zero
   15698:	00002b06 	br	15748 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1569c:	e0bffe17 	ldw	r2,-8(fp)
   156a0:	10800117 	ldw	r2,4(r2)
   156a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   156a8:	e0bffb17 	ldw	r2,-20(fp)
   156ac:	10c0058b 	ldhu	r3,22(r2)
   156b0:	e0bffb17 	ldw	r2,-20(fp)
   156b4:	1080050b 	ldhu	r2,20(r2)
   156b8:	18ffffcc 	andi	r3,r3,65535
   156bc:	10bfffcc 	andi	r2,r2,65535
   156c0:	18800636 	bltu	r3,r2,156dc <OSQPost+0xe8>
   156c4:	e0bff817 	ldw	r2,-32(fp)
   156c8:	e0bffa15 	stw	r2,-24(fp)
   156cc:	e0bffa17 	ldw	r2,-24(fp)
   156d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   156d4:	00800784 	movi	r2,30
   156d8:	00001b06 	br	15748 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   156dc:	e0bffb17 	ldw	r2,-20(fp)
   156e0:	10800317 	ldw	r2,12(r2)
   156e4:	11000104 	addi	r4,r2,4
   156e8:	e0fffb17 	ldw	r3,-20(fp)
   156ec:	19000315 	stw	r4,12(r3)
   156f0:	e0ffff17 	ldw	r3,-4(fp)
   156f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   156f8:	e0bffb17 	ldw	r2,-20(fp)
   156fc:	1080058b 	ldhu	r2,22(r2)
   15700:	10800044 	addi	r2,r2,1
   15704:	1007883a 	mov	r3,r2
   15708:	e0bffb17 	ldw	r2,-20(fp)
   1570c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   15710:	e0bffb17 	ldw	r2,-20(fp)
   15714:	10c00317 	ldw	r3,12(r2)
   15718:	e0bffb17 	ldw	r2,-20(fp)
   1571c:	10800217 	ldw	r2,8(r2)
   15720:	1880041e 	bne	r3,r2,15734 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   15724:	e0bffb17 	ldw	r2,-20(fp)
   15728:	10c00117 	ldw	r3,4(r2)
   1572c:	e0bffb17 	ldw	r2,-20(fp)
   15730:	10c00315 	stw	r3,12(r2)
   15734:	e0bff817 	ldw	r2,-32(fp)
   15738:	e0bffc15 	stw	r2,-16(fp)
   1573c:	e0bffc17 	ldw	r2,-16(fp)
   15740:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15744:	0005883a 	mov	r2,zero
}
   15748:	e037883a 	mov	sp,fp
   1574c:	dfc00117 	ldw	ra,4(sp)
   15750:	df000017 	ldw	fp,0(sp)
   15754:	dec00204 	addi	sp,sp,8
   15758:	f800283a 	ret

0001575c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1575c:	defff604 	addi	sp,sp,-40
   15760:	dfc00915 	stw	ra,36(sp)
   15764:	df000815 	stw	fp,32(sp)
   15768:	df000804 	addi	fp,sp,32
   1576c:	e13ffe15 	stw	r4,-8(fp)
   15770:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15774:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15778:	e0bffe17 	ldw	r2,-8(fp)
   1577c:	1000021e 	bne	r2,zero,15788 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   15780:	00800104 	movi	r2,4
   15784:	00004c06 	br	158b8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15788:	e0bffe17 	ldw	r2,-8(fp)
   1578c:	10800003 	ldbu	r2,0(r2)
   15790:	10803fcc 	andi	r2,r2,255
   15794:	108000a0 	cmpeqi	r2,r2,2
   15798:	1000021e 	bne	r2,zero,157a4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1579c:	00800044 	movi	r2,1
   157a0:	00004506 	br	158b8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   157a4:	0005303a 	rdctl	r2,status
   157a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   157ac:	e0fffd17 	ldw	r3,-12(fp)
   157b0:	00bfff84 	movi	r2,-2
   157b4:	1884703a 	and	r2,r3,r2
   157b8:	1001703a 	wrctl	status,r2
  
  return context;
   157bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   157c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   157c4:	e0bffe17 	ldw	r2,-8(fp)
   157c8:	10800283 	ldbu	r2,10(r2)
   157cc:	10803fcc 	andi	r2,r2,255
   157d0:	10000c26 	beq	r2,zero,15804 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   157d4:	000f883a 	mov	r7,zero
   157d8:	01800104 	movi	r6,4
   157dc:	e17fff17 	ldw	r5,-4(fp)
   157e0:	e13ffe17 	ldw	r4,-8(fp)
   157e4:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   157e8:	e0bff817 	ldw	r2,-32(fp)
   157ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   157f0:	e0bff917 	ldw	r2,-28(fp)
   157f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   157f8:	00125000 	call	12500 <OS_Sched>
        return (OS_ERR_NONE);
   157fc:	0005883a 	mov	r2,zero
   15800:	00002d06 	br	158b8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   15804:	e0bffe17 	ldw	r2,-8(fp)
   15808:	10800117 	ldw	r2,4(r2)
   1580c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   15810:	e0bffb17 	ldw	r2,-20(fp)
   15814:	10c0058b 	ldhu	r3,22(r2)
   15818:	e0bffb17 	ldw	r2,-20(fp)
   1581c:	1080050b 	ldhu	r2,20(r2)
   15820:	18ffffcc 	andi	r3,r3,65535
   15824:	10bfffcc 	andi	r2,r2,65535
   15828:	18800636 	bltu	r3,r2,15844 <OSQPostFront+0xe8>
   1582c:	e0bff817 	ldw	r2,-32(fp)
   15830:	e0bffa15 	stw	r2,-24(fp)
   15834:	e0bffa17 	ldw	r2,-24(fp)
   15838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1583c:	00800784 	movi	r2,30
   15840:	00001d06 	br	158b8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   15844:	e0bffb17 	ldw	r2,-20(fp)
   15848:	10c00417 	ldw	r3,16(r2)
   1584c:	e0bffb17 	ldw	r2,-20(fp)
   15850:	10800117 	ldw	r2,4(r2)
   15854:	1880041e 	bne	r3,r2,15868 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   15858:	e0bffb17 	ldw	r2,-20(fp)
   1585c:	10c00217 	ldw	r3,8(r2)
   15860:	e0bffb17 	ldw	r2,-20(fp)
   15864:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   15868:	e0bffb17 	ldw	r2,-20(fp)
   1586c:	10800417 	ldw	r2,16(r2)
   15870:	10ffff04 	addi	r3,r2,-4
   15874:	e0bffb17 	ldw	r2,-20(fp)
   15878:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1587c:	e0bffb17 	ldw	r2,-20(fp)
   15880:	10800417 	ldw	r2,16(r2)
   15884:	e0ffff17 	ldw	r3,-4(fp)
   15888:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1588c:	e0bffb17 	ldw	r2,-20(fp)
   15890:	1080058b 	ldhu	r2,22(r2)
   15894:	10800044 	addi	r2,r2,1
   15898:	1007883a 	mov	r3,r2
   1589c:	e0bffb17 	ldw	r2,-20(fp)
   158a0:	10c0058d 	sth	r3,22(r2)
   158a4:	e0bff817 	ldw	r2,-32(fp)
   158a8:	e0bffc15 	stw	r2,-16(fp)
   158ac:	e0bffc17 	ldw	r2,-16(fp)
   158b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   158b4:	0005883a 	mov	r2,zero
}
   158b8:	e037883a 	mov	sp,fp
   158bc:	dfc00117 	ldw	ra,4(sp)
   158c0:	df000017 	ldw	fp,0(sp)
   158c4:	dec00204 	addi	sp,sp,8
   158c8:	f800283a 	ret

000158cc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   158cc:	defff504 	addi	sp,sp,-44
   158d0:	dfc00a15 	stw	ra,40(sp)
   158d4:	df000915 	stw	fp,36(sp)
   158d8:	df000904 	addi	fp,sp,36
   158dc:	e13ffd15 	stw	r4,-12(fp)
   158e0:	e17ffe15 	stw	r5,-8(fp)
   158e4:	3005883a 	mov	r2,r6
   158e8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   158ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   158f0:	e0bffd17 	ldw	r2,-12(fp)
   158f4:	1000021e 	bne	r2,zero,15900 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   158f8:	00800104 	movi	r2,4
   158fc:	00007106 	br	15ac4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   15900:	e0bffd17 	ldw	r2,-12(fp)
   15904:	10800003 	ldbu	r2,0(r2)
   15908:	10803fcc 	andi	r2,r2,255
   1590c:	108000a0 	cmpeqi	r2,r2,2
   15910:	1000021e 	bne	r2,zero,1591c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   15914:	00800044 	movi	r2,1
   15918:	00006a06 	br	15ac4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1591c:	0005303a 	rdctl	r2,status
   15920:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15924:	e0fffc17 	ldw	r3,-16(fp)
   15928:	00bfff84 	movi	r2,-2
   1592c:	1884703a 	and	r2,r3,r2
   15930:	1001703a 	wrctl	status,r2
  
  return context;
   15934:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15938:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1593c:	e0bffd17 	ldw	r2,-12(fp)
   15940:	10800283 	ldbu	r2,10(r2)
   15944:	10803fcc 	andi	r2,r2,255
   15948:	10001d26 	beq	r2,zero,159c0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1594c:	e0bfff03 	ldbu	r2,-4(fp)
   15950:	1080004c 	andi	r2,r2,1
   15954:	10000b26 	beq	r2,zero,15984 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15958:	00000506 	br	15970 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1595c:	000f883a 	mov	r7,zero
   15960:	01800104 	movi	r6,4
   15964:	e17ffe17 	ldw	r5,-8(fp)
   15968:	e13ffd17 	ldw	r4,-12(fp)
   1596c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   15970:	e0bffd17 	ldw	r2,-12(fp)
   15974:	10800283 	ldbu	r2,10(r2)
   15978:	10803fcc 	andi	r2,r2,255
   1597c:	103ff71e 	bne	r2,zero,1595c <__alt_data_end+0xfffe4c1c>
   15980:	00000506 	br	15998 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   15984:	000f883a 	mov	r7,zero
   15988:	01800104 	movi	r6,4
   1598c:	e17ffe17 	ldw	r5,-8(fp)
   15990:	e13ffd17 	ldw	r4,-12(fp)
   15994:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   15998:	e0bff717 	ldw	r2,-36(fp)
   1599c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   159a0:	e0bff817 	ldw	r2,-32(fp)
   159a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   159a8:	e0bfff03 	ldbu	r2,-4(fp)
   159ac:	1080010c 	andi	r2,r2,4
   159b0:	1000011e 	bne	r2,zero,159b8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   159b4:	00125000 	call	12500 <OS_Sched>
        }
        return (OS_ERR_NONE);
   159b8:	0005883a 	mov	r2,zero
   159bc:	00004106 	br	15ac4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   159c0:	e0bffd17 	ldw	r2,-12(fp)
   159c4:	10800117 	ldw	r2,4(r2)
   159c8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   159cc:	e0bffa17 	ldw	r2,-24(fp)
   159d0:	10c0058b 	ldhu	r3,22(r2)
   159d4:	e0bffa17 	ldw	r2,-24(fp)
   159d8:	1080050b 	ldhu	r2,20(r2)
   159dc:	18ffffcc 	andi	r3,r3,65535
   159e0:	10bfffcc 	andi	r2,r2,65535
   159e4:	18800636 	bltu	r3,r2,15a00 <OSQPostOpt+0x134>
   159e8:	e0bff717 	ldw	r2,-36(fp)
   159ec:	e0bff915 	stw	r2,-28(fp)
   159f0:	e0bff917 	ldw	r2,-28(fp)
   159f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   159f8:	00800784 	movi	r2,30
   159fc:	00003106 	br	15ac4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   15a00:	e0bfff03 	ldbu	r2,-4(fp)
   15a04:	1080008c 	andi	r2,r2,2
   15a08:	10001326 	beq	r2,zero,15a58 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   15a0c:	e0bffa17 	ldw	r2,-24(fp)
   15a10:	10c00417 	ldw	r3,16(r2)
   15a14:	e0bffa17 	ldw	r2,-24(fp)
   15a18:	10800117 	ldw	r2,4(r2)
   15a1c:	1880041e 	bne	r3,r2,15a30 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   15a20:	e0bffa17 	ldw	r2,-24(fp)
   15a24:	10c00217 	ldw	r3,8(r2)
   15a28:	e0bffa17 	ldw	r2,-24(fp)
   15a2c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   15a30:	e0bffa17 	ldw	r2,-24(fp)
   15a34:	10800417 	ldw	r2,16(r2)
   15a38:	10ffff04 	addi	r3,r2,-4
   15a3c:	e0bffa17 	ldw	r2,-24(fp)
   15a40:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   15a44:	e0bffa17 	ldw	r2,-24(fp)
   15a48:	10800417 	ldw	r2,16(r2)
   15a4c:	e0fffe17 	ldw	r3,-8(fp)
   15a50:	10c00015 	stw	r3,0(r2)
   15a54:	00001006 	br	15a98 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   15a58:	e0bffa17 	ldw	r2,-24(fp)
   15a5c:	10800317 	ldw	r2,12(r2)
   15a60:	11000104 	addi	r4,r2,4
   15a64:	e0fffa17 	ldw	r3,-24(fp)
   15a68:	19000315 	stw	r4,12(r3)
   15a6c:	e0fffe17 	ldw	r3,-8(fp)
   15a70:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   15a74:	e0bffa17 	ldw	r2,-24(fp)
   15a78:	10c00317 	ldw	r3,12(r2)
   15a7c:	e0bffa17 	ldw	r2,-24(fp)
   15a80:	10800217 	ldw	r2,8(r2)
   15a84:	1880041e 	bne	r3,r2,15a98 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   15a88:	e0bffa17 	ldw	r2,-24(fp)
   15a8c:	10c00117 	ldw	r3,4(r2)
   15a90:	e0bffa17 	ldw	r2,-24(fp)
   15a94:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   15a98:	e0bffa17 	ldw	r2,-24(fp)
   15a9c:	1080058b 	ldhu	r2,22(r2)
   15aa0:	10800044 	addi	r2,r2,1
   15aa4:	1007883a 	mov	r3,r2
   15aa8:	e0bffa17 	ldw	r2,-24(fp)
   15aac:	10c0058d 	sth	r3,22(r2)
   15ab0:	e0bff717 	ldw	r2,-36(fp)
   15ab4:	e0bffb15 	stw	r2,-20(fp)
   15ab8:	e0bffb17 	ldw	r2,-20(fp)
   15abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15ac0:	0005883a 	mov	r2,zero
}
   15ac4:	e037883a 	mov	sp,fp
   15ac8:	dfc00117 	ldw	ra,4(sp)
   15acc:	df000017 	ldw	fp,0(sp)
   15ad0:	dec00204 	addi	sp,sp,8
   15ad4:	f800283a 	ret

00015ad8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   15ad8:	defff604 	addi	sp,sp,-40
   15adc:	df000915 	stw	fp,36(sp)
   15ae0:	df000904 	addi	fp,sp,36
   15ae4:	e13ffe15 	stw	r4,-8(fp)
   15ae8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   15aec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   15af0:	e0bffe17 	ldw	r2,-8(fp)
   15af4:	1000021e 	bne	r2,zero,15b00 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   15af8:	00800104 	movi	r2,4
   15afc:	00004906 	br	15c24 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   15b00:	e0bfff17 	ldw	r2,-4(fp)
   15b04:	1000021e 	bne	r2,zero,15b10 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   15b08:	00800244 	movi	r2,9
   15b0c:	00004506 	br	15c24 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   15b10:	e0bffe17 	ldw	r2,-8(fp)
   15b14:	10800003 	ldbu	r2,0(r2)
   15b18:	10803fcc 	andi	r2,r2,255
   15b1c:	108000a0 	cmpeqi	r2,r2,2
   15b20:	1000021e 	bne	r2,zero,15b2c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   15b24:	00800044 	movi	r2,1
   15b28:	00003e06 	br	15c24 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15b2c:	0005303a 	rdctl	r2,status
   15b30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15b34:	e0fffd17 	ldw	r3,-12(fp)
   15b38:	00bfff84 	movi	r2,-2
   15b3c:	1884703a 	and	r2,r3,r2
   15b40:	1001703a 	wrctl	status,r2
  
  return context;
   15b44:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   15b48:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   15b4c:	e0bffe17 	ldw	r2,-8(fp)
   15b50:	10c00283 	ldbu	r3,10(r2)
   15b54:	e0bfff17 	ldw	r2,-4(fp)
   15b58:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   15b5c:	e0bffe17 	ldw	r2,-8(fp)
   15b60:	108002c4 	addi	r2,r2,11
   15b64:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   15b68:	e0bfff17 	ldw	r2,-4(fp)
   15b6c:	10800204 	addi	r2,r2,8
   15b70:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15b74:	e03ff705 	stb	zero,-36(fp)
   15b78:	00000b06 	br	15ba8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   15b7c:	e0bff917 	ldw	r2,-28(fp)
   15b80:	10c00044 	addi	r3,r2,1
   15b84:	e0fff915 	stw	r3,-28(fp)
   15b88:	e0fff817 	ldw	r3,-32(fp)
   15b8c:	19000044 	addi	r4,r3,1
   15b90:	e13ff815 	stw	r4,-32(fp)
   15b94:	18c00003 	ldbu	r3,0(r3)
   15b98:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   15b9c:	e0bff703 	ldbu	r2,-36(fp)
   15ba0:	10800044 	addi	r2,r2,1
   15ba4:	e0bff705 	stb	r2,-36(fp)
   15ba8:	e0bff703 	ldbu	r2,-36(fp)
   15bac:	108000f0 	cmpltui	r2,r2,3
   15bb0:	103ff21e 	bne	r2,zero,15b7c <__alt_data_end+0xfffe4e3c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   15bb4:	e0bffe17 	ldw	r2,-8(fp)
   15bb8:	10800117 	ldw	r2,4(r2)
   15bbc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   15bc0:	e0bffc17 	ldw	r2,-16(fp)
   15bc4:	1080058b 	ldhu	r2,22(r2)
   15bc8:	10bfffcc 	andi	r2,r2,65535
   15bcc:	10000626 	beq	r2,zero,15be8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   15bd0:	e0bffc17 	ldw	r2,-16(fp)
   15bd4:	10800417 	ldw	r2,16(r2)
   15bd8:	10c00017 	ldw	r3,0(r2)
   15bdc:	e0bfff17 	ldw	r2,-4(fp)
   15be0:	10c00015 	stw	r3,0(r2)
   15be4:	00000206 	br	15bf0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   15be8:	e0bfff17 	ldw	r2,-4(fp)
   15bec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   15bf0:	e0bffc17 	ldw	r2,-16(fp)
   15bf4:	10c0058b 	ldhu	r3,22(r2)
   15bf8:	e0bfff17 	ldw	r2,-4(fp)
   15bfc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   15c00:	e0bffc17 	ldw	r2,-16(fp)
   15c04:	10c0050b 	ldhu	r3,20(r2)
   15c08:	e0bfff17 	ldw	r2,-4(fp)
   15c0c:	10c0018d 	sth	r3,6(r2)
   15c10:	e0bffa17 	ldw	r2,-24(fp)
   15c14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15c18:	e0bffb17 	ldw	r2,-20(fp)
   15c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   15c20:	0005883a 	mov	r2,zero
}
   15c24:	e037883a 	mov	sp,fp
   15c28:	df000017 	ldw	fp,0(sp)
   15c2c:	dec00104 	addi	sp,sp,4
   15c30:	f800283a 	ret

00015c34 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   15c34:	defffb04 	addi	sp,sp,-20
   15c38:	dfc00415 	stw	ra,16(sp)
   15c3c:	df000315 	stw	fp,12(sp)
   15c40:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   15c44:	01407804 	movi	r5,480
   15c48:	010000f4 	movhi	r4,3
   15c4c:	212d5d04 	addi	r4,r4,-19084
   15c50:	00124440 	call	12444 <OS_MemClr>
    pq1 = &OSQTbl[0];
   15c54:	008000f4 	movhi	r2,3
   15c58:	10ad5d04 	addi	r2,r2,-19084
   15c5c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   15c60:	008000f4 	movhi	r2,3
   15c64:	10ad6304 	addi	r2,r2,-19060
   15c68:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15c6c:	e03ffd0d 	sth	zero,-12(fp)
   15c70:	00000c06 	br	15ca4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   15c74:	e0bffe17 	ldw	r2,-8(fp)
   15c78:	e0ffff17 	ldw	r3,-4(fp)
   15c7c:	10c00015 	stw	r3,0(r2)
        pq1++;
   15c80:	e0bffe17 	ldw	r2,-8(fp)
   15c84:	10800604 	addi	r2,r2,24
   15c88:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   15c8c:	e0bfff17 	ldw	r2,-4(fp)
   15c90:	10800604 	addi	r2,r2,24
   15c94:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   15c98:	e0bffd0b 	ldhu	r2,-12(fp)
   15c9c:	10800044 	addi	r2,r2,1
   15ca0:	e0bffd0d 	sth	r2,-12(fp)
   15ca4:	e0bffd0b 	ldhu	r2,-12(fp)
   15ca8:	108004f0 	cmpltui	r2,r2,19
   15cac:	103ff11e 	bne	r2,zero,15c74 <__alt_data_end+0xfffe4f34>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   15cb0:	e0bffe17 	ldw	r2,-8(fp)
   15cb4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   15cb8:	008000f4 	movhi	r2,3
   15cbc:	10ad5d04 	addi	r2,r2,-19084
   15cc0:	d0a74215 	stw	r2,-25336(gp)
#endif
}
   15cc4:	0001883a 	nop
   15cc8:	e037883a 	mov	sp,fp
   15ccc:	dfc00117 	ldw	ra,4(sp)
   15cd0:	df000017 	ldw	fp,0(sp)
   15cd4:	dec00204 	addi	sp,sp,8
   15cd8:	f800283a 	ret

00015cdc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   15cdc:	defffa04 	addi	sp,sp,-24
   15ce0:	df000515 	stw	fp,20(sp)
   15ce4:	df000504 	addi	fp,sp,20
   15ce8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   15cec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   15cf0:	e0bfff17 	ldw	r2,-4(fp)
   15cf4:	1000021e 	bne	r2,zero,15d00 <OSSemAccept+0x24>
        return (0);
   15cf8:	0005883a 	mov	r2,zero
   15cfc:	00001f06 	br	15d7c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   15d00:	e0bfff17 	ldw	r2,-4(fp)
   15d04:	10800003 	ldbu	r2,0(r2)
   15d08:	10803fcc 	andi	r2,r2,255
   15d0c:	108000e0 	cmpeqi	r2,r2,3
   15d10:	1000021e 	bne	r2,zero,15d1c <OSSemAccept+0x40>
        return (0);
   15d14:	0005883a 	mov	r2,zero
   15d18:	00001806 	br	15d7c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d1c:	0005303a 	rdctl	r2,status
   15d20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d24:	e0fffe17 	ldw	r3,-8(fp)
   15d28:	00bfff84 	movi	r2,-2
   15d2c:	1884703a 	and	r2,r3,r2
   15d30:	1001703a 	wrctl	status,r2
  
  return context;
   15d34:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15d38:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   15d3c:	e0bfff17 	ldw	r2,-4(fp)
   15d40:	1080020b 	ldhu	r2,8(r2)
   15d44:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   15d48:	e0bffd0b 	ldhu	r2,-12(fp)
   15d4c:	10000626 	beq	r2,zero,15d68 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   15d50:	e0bfff17 	ldw	r2,-4(fp)
   15d54:	1080020b 	ldhu	r2,8(r2)
   15d58:	10bfffc4 	addi	r2,r2,-1
   15d5c:	1007883a 	mov	r3,r2
   15d60:	e0bfff17 	ldw	r2,-4(fp)
   15d64:	10c0020d 	sth	r3,8(r2)
   15d68:	e0bffb17 	ldw	r2,-20(fp)
   15d6c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15d70:	e0bffc17 	ldw	r2,-16(fp)
   15d74:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   15d78:	e0bffd0b 	ldhu	r2,-12(fp)
}
   15d7c:	e037883a 	mov	sp,fp
   15d80:	df000017 	ldw	fp,0(sp)
   15d84:	dec00104 	addi	sp,sp,4
   15d88:	f800283a 	ret

00015d8c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   15d8c:	defff904 	addi	sp,sp,-28
   15d90:	dfc00615 	stw	ra,24(sp)
   15d94:	df000515 	stw	fp,20(sp)
   15d98:	df000504 	addi	fp,sp,20
   15d9c:	2005883a 	mov	r2,r4
   15da0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15da4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15da8:	d0a74503 	ldbu	r2,-25324(gp)
   15dac:	10803fcc 	andi	r2,r2,255
   15db0:	10000226 	beq	r2,zero,15dbc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   15db4:	0005883a 	mov	r2,zero
   15db8:	00002506 	br	15e50 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15dbc:	0005303a 	rdctl	r2,status
   15dc0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15dc4:	e0fffe17 	ldw	r3,-8(fp)
   15dc8:	00bfff84 	movi	r2,-2
   15dcc:	1884703a 	and	r2,r3,r2
   15dd0:	1001703a 	wrctl	status,r2
  
  return context;
   15dd4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   15dd8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   15ddc:	d0a74417 	ldw	r2,-25328(gp)
   15de0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   15de4:	d0a74417 	ldw	r2,-25328(gp)
   15de8:	10000326 	beq	r2,zero,15df8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   15dec:	d0a74417 	ldw	r2,-25328(gp)
   15df0:	10800117 	ldw	r2,4(r2)
   15df4:	d0a74415 	stw	r2,-25328(gp)
   15df8:	e0bffb17 	ldw	r2,-20(fp)
   15dfc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e00:	e0bffc17 	ldw	r2,-16(fp)
   15e04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   15e08:	e0bffd17 	ldw	r2,-12(fp)
   15e0c:	10000f26 	beq	r2,zero,15e4c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   15e10:	e0bffd17 	ldw	r2,-12(fp)
   15e14:	00c000c4 	movi	r3,3
   15e18:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   15e1c:	e0bffd17 	ldw	r2,-12(fp)
   15e20:	e0ffff0b 	ldhu	r3,-4(fp)
   15e24:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   15e28:	e0bffd17 	ldw	r2,-12(fp)
   15e2c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   15e30:	e0bffd17 	ldw	r2,-12(fp)
   15e34:	00c00fc4 	movi	r3,63
   15e38:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   15e3c:	e0bffd17 	ldw	r2,-12(fp)
   15e40:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   15e44:	e13ffd17 	ldw	r4,-12(fp)
   15e48:	00120640 	call	12064 <OS_EventWaitListInit>
    }
    return (pevent);
   15e4c:	e0bffd17 	ldw	r2,-12(fp)
}
   15e50:	e037883a 	mov	sp,fp
   15e54:	dfc00117 	ldw	ra,4(sp)
   15e58:	df000017 	ldw	fp,0(sp)
   15e5c:	dec00204 	addi	sp,sp,8
   15e60:	f800283a 	ret

00015e64 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   15e64:	defff304 	addi	sp,sp,-52
   15e68:	dfc00c15 	stw	ra,48(sp)
   15e6c:	df000b15 	stw	fp,44(sp)
   15e70:	df000b04 	addi	fp,sp,44
   15e74:	e13ffd15 	stw	r4,-12(fp)
   15e78:	2805883a 	mov	r2,r5
   15e7c:	e1bfff15 	stw	r6,-4(fp)
   15e80:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15e84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15e88:	e0bfff17 	ldw	r2,-4(fp)
   15e8c:	1000021e 	bne	r2,zero,15e98 <OSSemDel+0x34>
        return (pevent);
   15e90:	e0bffd17 	ldw	r2,-12(fp)
   15e94:	00007e06 	br	16090 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   15e98:	e0bffd17 	ldw	r2,-12(fp)
   15e9c:	1000051e 	bne	r2,zero,15eb4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   15ea0:	e0bfff17 	ldw	r2,-4(fp)
   15ea4:	00c00104 	movi	r3,4
   15ea8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15eac:	e0bffd17 	ldw	r2,-12(fp)
   15eb0:	00007706 	br	16090 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   15eb4:	e0bffd17 	ldw	r2,-12(fp)
   15eb8:	10800003 	ldbu	r2,0(r2)
   15ebc:	10803fcc 	andi	r2,r2,255
   15ec0:	108000e0 	cmpeqi	r2,r2,3
   15ec4:	1000051e 	bne	r2,zero,15edc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   15ec8:	e0bfff17 	ldw	r2,-4(fp)
   15ecc:	00c00044 	movi	r3,1
   15ed0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15ed4:	e0bffd17 	ldw	r2,-12(fp)
   15ed8:	00006d06 	br	16090 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   15edc:	d0a74503 	ldbu	r2,-25324(gp)
   15ee0:	10803fcc 	andi	r2,r2,255
   15ee4:	10000526 	beq	r2,zero,15efc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   15ee8:	e0bfff17 	ldw	r2,-4(fp)
   15eec:	00c003c4 	movi	r3,15
   15ef0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   15ef4:	e0bffd17 	ldw	r2,-12(fp)
   15ef8:	00006506 	br	16090 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15efc:	0005303a 	rdctl	r2,status
   15f00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15f04:	e0fffc17 	ldw	r3,-16(fp)
   15f08:	00bfff84 	movi	r2,-2
   15f0c:	1884703a 	and	r2,r3,r2
   15f10:	1001703a 	wrctl	status,r2
  
  return context;
   15f14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   15f18:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   15f1c:	e0bffd17 	ldw	r2,-12(fp)
   15f20:	10800283 	ldbu	r2,10(r2)
   15f24:	10803fcc 	andi	r2,r2,255
   15f28:	10000326 	beq	r2,zero,15f38 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   15f2c:	00800044 	movi	r2,1
   15f30:	e0bff505 	stb	r2,-44(fp)
   15f34:	00000106 	br	15f3c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   15f38:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   15f3c:	e0bffe03 	ldbu	r2,-8(fp)
   15f40:	10000326 	beq	r2,zero,15f50 <OSSemDel+0xec>
   15f44:	10800060 	cmpeqi	r2,r2,1
   15f48:	1000281e 	bne	r2,zero,15fec <OSSemDel+0x188>
   15f4c:	00004506 	br	16064 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   15f50:	e0bff503 	ldbu	r2,-44(fp)
   15f54:	1000161e 	bne	r2,zero,15fb0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   15f58:	e0bffd17 	ldw	r2,-12(fp)
   15f5c:	00c00fc4 	movi	r3,63
   15f60:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   15f64:	e0bffd17 	ldw	r2,-12(fp)
   15f68:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15f6c:	e0bffd17 	ldw	r2,-12(fp)
   15f70:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   15f74:	d0e74417 	ldw	r3,-25328(gp)
   15f78:	e0bffd17 	ldw	r2,-12(fp)
   15f7c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   15f80:	e0bffd17 	ldw	r2,-12(fp)
   15f84:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   15f88:	e0bffd17 	ldw	r2,-12(fp)
   15f8c:	d0a74415 	stw	r2,-25328(gp)
   15f90:	e0bff717 	ldw	r2,-36(fp)
   15f94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15f98:	e0bff817 	ldw	r2,-32(fp)
   15f9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   15fa0:	e0bfff17 	ldw	r2,-4(fp)
   15fa4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   15fa8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   15fac:	00003706 	br	1608c <OSSemDel+0x228>
   15fb0:	e0bff717 	ldw	r2,-36(fp)
   15fb4:	e0bff915 	stw	r2,-28(fp)
   15fb8:	e0bff917 	ldw	r2,-28(fp)
   15fbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   15fc0:	e0bfff17 	ldw	r2,-4(fp)
   15fc4:	00c01244 	movi	r3,73
   15fc8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   15fcc:	e0bffd17 	ldw	r2,-12(fp)
   15fd0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   15fd4:	00002d06 	br	1608c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   15fd8:	000f883a 	mov	r7,zero
   15fdc:	01800044 	movi	r6,1
   15fe0:	000b883a 	mov	r5,zero
   15fe4:	e13ffd17 	ldw	r4,-12(fp)
   15fe8:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   15fec:	e0bffd17 	ldw	r2,-12(fp)
   15ff0:	10800283 	ldbu	r2,10(r2)
   15ff4:	10803fcc 	andi	r2,r2,255
   15ff8:	103ff71e 	bne	r2,zero,15fd8 <__alt_data_end+0xfffe5298>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   15ffc:	e0bffd17 	ldw	r2,-12(fp)
   16000:	00c00fc4 	movi	r3,63
   16004:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   16008:	e0bffd17 	ldw	r2,-12(fp)
   1600c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   16010:	e0bffd17 	ldw	r2,-12(fp)
   16014:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   16018:	d0e74417 	ldw	r3,-25328(gp)
   1601c:	e0bffd17 	ldw	r2,-12(fp)
   16020:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   16024:	e0bffd17 	ldw	r2,-12(fp)
   16028:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1602c:	e0bffd17 	ldw	r2,-12(fp)
   16030:	d0a74415 	stw	r2,-25328(gp)
   16034:	e0bff717 	ldw	r2,-36(fp)
   16038:	e0bffa15 	stw	r2,-24(fp)
   1603c:	e0bffa17 	ldw	r2,-24(fp)
   16040:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   16044:	e0bff503 	ldbu	r2,-44(fp)
   16048:	10800058 	cmpnei	r2,r2,1
   1604c:	1000011e 	bne	r2,zero,16054 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   16050:	00125000 	call	12500 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   16054:	e0bfff17 	ldw	r2,-4(fp)
   16058:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1605c:	e03ff615 	stw	zero,-40(fp)
             break;
   16060:	00000a06 	br	1608c <OSSemDel+0x228>
   16064:	e0bff717 	ldw	r2,-36(fp)
   16068:	e0bffb15 	stw	r2,-20(fp)
   1606c:	e0bffb17 	ldw	r2,-20(fp)
   16070:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   16074:	e0bfff17 	ldw	r2,-4(fp)
   16078:	00c001c4 	movi	r3,7
   1607c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   16080:	e0bffd17 	ldw	r2,-12(fp)
   16084:	e0bff615 	stw	r2,-40(fp)
             break;
   16088:	0001883a 	nop
    }
    return (pevent_return);
   1608c:	e0bff617 	ldw	r2,-40(fp)
}
   16090:	e037883a 	mov	sp,fp
   16094:	dfc00117 	ldw	ra,4(sp)
   16098:	df000017 	ldw	fp,0(sp)
   1609c:	dec00204 	addi	sp,sp,8
   160a0:	f800283a 	ret

000160a4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   160a4:	defff504 	addi	sp,sp,-44
   160a8:	dfc00a15 	stw	ra,40(sp)
   160ac:	df000915 	stw	fp,36(sp)
   160b0:	df000904 	addi	fp,sp,36
   160b4:	e13ffd15 	stw	r4,-12(fp)
   160b8:	2805883a 	mov	r2,r5
   160bc:	e1bfff15 	stw	r6,-4(fp)
   160c0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   160c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   160c8:	e0bfff17 	ldw	r2,-4(fp)
   160cc:	10007226 	beq	r2,zero,16298 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   160d0:	e0bffd17 	ldw	r2,-12(fp)
   160d4:	1000041e 	bne	r2,zero,160e8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   160d8:	e0bfff17 	ldw	r2,-4(fp)
   160dc:	00c00104 	movi	r3,4
   160e0:	10c00005 	stb	r3,0(r2)
        return;
   160e4:	00006d06 	br	1629c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   160e8:	e0bffd17 	ldw	r2,-12(fp)
   160ec:	10800003 	ldbu	r2,0(r2)
   160f0:	10803fcc 	andi	r2,r2,255
   160f4:	108000e0 	cmpeqi	r2,r2,3
   160f8:	1000041e 	bne	r2,zero,1610c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   160fc:	e0bfff17 	ldw	r2,-4(fp)
   16100:	00c00044 	movi	r3,1
   16104:	10c00005 	stb	r3,0(r2)
        return;
   16108:	00006406 	br	1629c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1610c:	d0a74503 	ldbu	r2,-25324(gp)
   16110:	10803fcc 	andi	r2,r2,255
   16114:	10000426 	beq	r2,zero,16128 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   16118:	e0bfff17 	ldw	r2,-4(fp)
   1611c:	00c00084 	movi	r3,2
   16120:	10c00005 	stb	r3,0(r2)
        return;
   16124:	00005d06 	br	1629c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   16128:	d0a73703 	ldbu	r2,-25380(gp)
   1612c:	10803fcc 	andi	r2,r2,255
   16130:	10000426 	beq	r2,zero,16144 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   16134:	e0bfff17 	ldw	r2,-4(fp)
   16138:	00c00344 	movi	r3,13
   1613c:	10c00005 	stb	r3,0(r2)
        return;
   16140:	00005606 	br	1629c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16144:	0005303a 	rdctl	r2,status
   16148:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1614c:	e0fffc17 	ldw	r3,-16(fp)
   16150:	00bfff84 	movi	r2,-2
   16154:	1884703a 	and	r2,r3,r2
   16158:	1001703a 	wrctl	status,r2
  
  return context;
   1615c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16160:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   16164:	e0bffd17 	ldw	r2,-12(fp)
   16168:	1080020b 	ldhu	r2,8(r2)
   1616c:	10bfffcc 	andi	r2,r2,65535
   16170:	10000d26 	beq	r2,zero,161a8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   16174:	e0bffd17 	ldw	r2,-12(fp)
   16178:	1080020b 	ldhu	r2,8(r2)
   1617c:	10bfffc4 	addi	r2,r2,-1
   16180:	1007883a 	mov	r3,r2
   16184:	e0bffd17 	ldw	r2,-12(fp)
   16188:	10c0020d 	sth	r3,8(r2)
   1618c:	e0bff717 	ldw	r2,-36(fp)
   16190:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16194:	e0bff817 	ldw	r2,-32(fp)
   16198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1619c:	e0bfff17 	ldw	r2,-4(fp)
   161a0:	10000005 	stb	zero,0(r2)
        return;
   161a4:	00003d06 	br	1629c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   161a8:	d0a74617 	ldw	r2,-25320(gp)
   161ac:	d0e74617 	ldw	r3,-25320(gp)
   161b0:	18c00c03 	ldbu	r3,48(r3)
   161b4:	18c00054 	ori	r3,r3,1
   161b8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   161bc:	d0a74617 	ldw	r2,-25320(gp)
   161c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   161c4:	d0a74617 	ldw	r2,-25320(gp)
   161c8:	e0fffe0b 	ldhu	r3,-8(fp)
   161cc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   161d0:	e13ffd17 	ldw	r4,-12(fp)
   161d4:	0011c4c0 	call	11c4c <OS_EventTaskWait>
   161d8:	e0bff717 	ldw	r2,-36(fp)
   161dc:	e0bffb15 	stw	r2,-20(fp)
   161e0:	e0bffb17 	ldw	r2,-20(fp)
   161e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   161e8:	00125000 	call	12500 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   161ec:	0005303a 	rdctl	r2,status
   161f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   161f4:	e0fff917 	ldw	r3,-28(fp)
   161f8:	00bfff84 	movi	r2,-2
   161fc:	1884703a 	and	r2,r3,r2
   16200:	1001703a 	wrctl	status,r2
  
  return context;
   16204:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   16208:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1620c:	d0a74617 	ldw	r2,-25320(gp)
   16210:	10800c43 	ldbu	r2,49(r2)
   16214:	10803fcc 	andi	r2,r2,255
   16218:	10000326 	beq	r2,zero,16228 <OSSemPend+0x184>
   1621c:	108000a0 	cmpeqi	r2,r2,2
   16220:	1000041e 	bne	r2,zero,16234 <OSSemPend+0x190>
   16224:	00000706 	br	16244 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   16228:	e0bfff17 	ldw	r2,-4(fp)
   1622c:	10000005 	stb	zero,0(r2)
             break;
   16230:	00000c06 	br	16264 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   16234:	e0bfff17 	ldw	r2,-4(fp)
   16238:	00c00384 	movi	r3,14
   1623c:	10c00005 	stb	r3,0(r2)
             break;
   16240:	00000806 	br	16264 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   16244:	d0a74617 	ldw	r2,-25320(gp)
   16248:	e17ffd17 	ldw	r5,-12(fp)
   1624c:	1009883a 	mov	r4,r2
   16250:	0011eac0 	call	11eac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   16254:	e0bfff17 	ldw	r2,-4(fp)
   16258:	00c00284 	movi	r3,10
   1625c:	10c00005 	stb	r3,0(r2)
             break;
   16260:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   16264:	d0a74617 	ldw	r2,-25320(gp)
   16268:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1626c:	d0a74617 	ldw	r2,-25320(gp)
   16270:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   16274:	d0a74617 	ldw	r2,-25320(gp)
   16278:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1627c:	d0a74617 	ldw	r2,-25320(gp)
   16280:	10000815 	stw	zero,32(r2)
   16284:	e0bff717 	ldw	r2,-36(fp)
   16288:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1628c:	e0bffa17 	ldw	r2,-24(fp)
   16290:	1001703a 	wrctl	status,r2
   16294:	00000106 	br	1629c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   16298:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   1629c:	e037883a 	mov	sp,fp
   162a0:	dfc00117 	ldw	ra,4(sp)
   162a4:	df000017 	ldw	fp,0(sp)
   162a8:	dec00204 	addi	sp,sp,8
   162ac:	f800283a 	ret

000162b0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   162b0:	defff604 	addi	sp,sp,-40
   162b4:	dfc00915 	stw	ra,36(sp)
   162b8:	df000815 	stw	fp,32(sp)
   162bc:	df000804 	addi	fp,sp,32
   162c0:	e13ffd15 	stw	r4,-12(fp)
   162c4:	2805883a 	mov	r2,r5
   162c8:	e1bfff15 	stw	r6,-4(fp)
   162cc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   162d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   162d4:	e0bfff17 	ldw	r2,-4(fp)
   162d8:	1000021e 	bne	r2,zero,162e4 <OSSemPendAbort+0x34>
        return (0);
   162dc:	0005883a 	mov	r2,zero
   162e0:	00004906 	br	16408 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   162e4:	e0bffd17 	ldw	r2,-12(fp)
   162e8:	1000051e 	bne	r2,zero,16300 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   162ec:	e0bfff17 	ldw	r2,-4(fp)
   162f0:	00c00104 	movi	r3,4
   162f4:	10c00005 	stb	r3,0(r2)
        return (0);
   162f8:	0005883a 	mov	r2,zero
   162fc:	00004206 	br	16408 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16300:	e0bffd17 	ldw	r2,-12(fp)
   16304:	10800003 	ldbu	r2,0(r2)
   16308:	10803fcc 	andi	r2,r2,255
   1630c:	108000e0 	cmpeqi	r2,r2,3
   16310:	1000051e 	bne	r2,zero,16328 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   16314:	e0bfff17 	ldw	r2,-4(fp)
   16318:	00c00044 	movi	r3,1
   1631c:	10c00005 	stb	r3,0(r2)
        return (0);
   16320:	0005883a 	mov	r2,zero
   16324:	00003806 	br	16408 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16328:	0005303a 	rdctl	r2,status
   1632c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16330:	e0fffc17 	ldw	r3,-16(fp)
   16334:	00bfff84 	movi	r2,-2
   16338:	1884703a 	and	r2,r3,r2
   1633c:	1001703a 	wrctl	status,r2
  
  return context;
   16340:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16344:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   16348:	e0bffd17 	ldw	r2,-12(fp)
   1634c:	10800283 	ldbu	r2,10(r2)
   16350:	10803fcc 	andi	r2,r2,255
   16354:	10002526 	beq	r2,zero,163ec <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   16358:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1635c:	e0bffe03 	ldbu	r2,-8(fp)
   16360:	10800060 	cmpeqi	r2,r2,1
   16364:	10000e26 	beq	r2,zero,163a0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   16368:	00000806 	br	1638c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1636c:	01c00084 	movi	r7,2
   16370:	01800044 	movi	r6,1
   16374:	000b883a 	mov	r5,zero
   16378:	e13ffd17 	ldw	r4,-12(fp)
   1637c:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                     nbr_tasks++;
   16380:	e0bff803 	ldbu	r2,-32(fp)
   16384:	10800044 	addi	r2,r2,1
   16388:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1638c:	e0bffd17 	ldw	r2,-12(fp)
   16390:	10800283 	ldbu	r2,10(r2)
   16394:	10803fcc 	andi	r2,r2,255
   16398:	103ff41e 	bne	r2,zero,1636c <__alt_data_end+0xfffe562c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1639c:	00000906 	br	163c4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   163a0:	01c00084 	movi	r7,2
   163a4:	01800044 	movi	r6,1
   163a8:	000b883a 	mov	r5,zero
   163ac:	e13ffd17 	ldw	r4,-12(fp)
   163b0:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
                 nbr_tasks++;
   163b4:	e0bff803 	ldbu	r2,-32(fp)
   163b8:	10800044 	addi	r2,r2,1
   163bc:	e0bff805 	stb	r2,-32(fp)
                 break;
   163c0:	0001883a 	nop
   163c4:	e0bff917 	ldw	r2,-28(fp)
   163c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163cc:	e0bffa17 	ldw	r2,-24(fp)
   163d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   163d4:	00125000 	call	12500 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   163d8:	e0bfff17 	ldw	r2,-4(fp)
   163dc:	00c00384 	movi	r3,14
   163e0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   163e4:	e0bff803 	ldbu	r2,-32(fp)
   163e8:	00000706 	br	16408 <OSSemPendAbort+0x158>
   163ec:	e0bff917 	ldw	r2,-28(fp)
   163f0:	e0bffb15 	stw	r2,-20(fp)
   163f4:	e0bffb17 	ldw	r2,-20(fp)
   163f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   163fc:	e0bfff17 	ldw	r2,-4(fp)
   16400:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   16404:	0005883a 	mov	r2,zero
}
   16408:	e037883a 	mov	sp,fp
   1640c:	dfc00117 	ldw	ra,4(sp)
   16410:	df000017 	ldw	fp,0(sp)
   16414:	dec00204 	addi	sp,sp,8
   16418:	f800283a 	ret

0001641c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1641c:	defff804 	addi	sp,sp,-32
   16420:	dfc00715 	stw	ra,28(sp)
   16424:	df000615 	stw	fp,24(sp)
   16428:	df000604 	addi	fp,sp,24
   1642c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16430:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16434:	e0bfff17 	ldw	r2,-4(fp)
   16438:	1000021e 	bne	r2,zero,16444 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1643c:	00800104 	movi	r2,4
   16440:	00003506 	br	16518 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   16444:	e0bfff17 	ldw	r2,-4(fp)
   16448:	10800003 	ldbu	r2,0(r2)
   1644c:	10803fcc 	andi	r2,r2,255
   16450:	108000e0 	cmpeqi	r2,r2,3
   16454:	1000021e 	bne	r2,zero,16460 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   16458:	00800044 	movi	r2,1
   1645c:	00002e06 	br	16518 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16460:	0005303a 	rdctl	r2,status
   16464:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16468:	e0fffe17 	ldw	r3,-8(fp)
   1646c:	00bfff84 	movi	r2,-2
   16470:	1884703a 	and	r2,r3,r2
   16474:	1001703a 	wrctl	status,r2
  
  return context;
   16478:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1647c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   16480:	e0bfff17 	ldw	r2,-4(fp)
   16484:	10800283 	ldbu	r2,10(r2)
   16488:	10803fcc 	andi	r2,r2,255
   1648c:	10000c26 	beq	r2,zero,164c0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   16490:	000f883a 	mov	r7,zero
   16494:	01800044 	movi	r6,1
   16498:	000b883a 	mov	r5,zero
   1649c:	e13fff17 	ldw	r4,-4(fp)
   164a0:	0011ab40 	call	11ab4 <OS_EventTaskRdy>
   164a4:	e0bffa17 	ldw	r2,-24(fp)
   164a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   164ac:	e0bffb17 	ldw	r2,-20(fp)
   164b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   164b4:	00125000 	call	12500 <OS_Sched>
        return (OS_ERR_NONE);
   164b8:	0005883a 	mov	r2,zero
   164bc:	00001606 	br	16518 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   164c0:	e0bfff17 	ldw	r2,-4(fp)
   164c4:	1080020b 	ldhu	r2,8(r2)
   164c8:	10ffffcc 	andi	r3,r2,65535
   164cc:	00bfffd4 	movui	r2,65535
   164d0:	18800c26 	beq	r3,r2,16504 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   164d4:	e0bfff17 	ldw	r2,-4(fp)
   164d8:	1080020b 	ldhu	r2,8(r2)
   164dc:	10800044 	addi	r2,r2,1
   164e0:	1007883a 	mov	r3,r2
   164e4:	e0bfff17 	ldw	r2,-4(fp)
   164e8:	10c0020d 	sth	r3,8(r2)
   164ec:	e0bffa17 	ldw	r2,-24(fp)
   164f0:	e0bffc15 	stw	r2,-16(fp)
   164f4:	e0bffc17 	ldw	r2,-16(fp)
   164f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   164fc:	0005883a 	mov	r2,zero
   16500:	00000506 	br	16518 <OSSemPost+0xfc>
   16504:	e0bffa17 	ldw	r2,-24(fp)
   16508:	e0bffd15 	stw	r2,-12(fp)
   1650c:	e0bffd17 	ldw	r2,-12(fp)
   16510:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   16514:	00800c84 	movi	r2,50
}
   16518:	e037883a 	mov	sp,fp
   1651c:	dfc00117 	ldw	ra,4(sp)
   16520:	df000017 	ldw	fp,0(sp)
   16524:	dec00204 	addi	sp,sp,8
   16528:	f800283a 	ret

0001652c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1652c:	defff704 	addi	sp,sp,-36
   16530:	df000815 	stw	fp,32(sp)
   16534:	df000804 	addi	fp,sp,32
   16538:	e13ffe15 	stw	r4,-8(fp)
   1653c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   16540:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   16544:	e0bffe17 	ldw	r2,-8(fp)
   16548:	1000021e 	bne	r2,zero,16554 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1654c:	00800104 	movi	r2,4
   16550:	00003606 	br	1662c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   16554:	e0bfff17 	ldw	r2,-4(fp)
   16558:	1000021e 	bne	r2,zero,16564 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1655c:	00800244 	movi	r2,9
   16560:	00003206 	br	1662c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   16564:	e0bffe17 	ldw	r2,-8(fp)
   16568:	10800003 	ldbu	r2,0(r2)
   1656c:	10803fcc 	andi	r2,r2,255
   16570:	108000e0 	cmpeqi	r2,r2,3
   16574:	1000021e 	bne	r2,zero,16580 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   16578:	00800044 	movi	r2,1
   1657c:	00002b06 	br	1662c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16580:	0005303a 	rdctl	r2,status
   16584:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16588:	e0fffd17 	ldw	r3,-12(fp)
   1658c:	00bfff84 	movi	r2,-2
   16590:	1884703a 	and	r2,r3,r2
   16594:	1001703a 	wrctl	status,r2
  
  return context;
   16598:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1659c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   165a0:	e0bffe17 	ldw	r2,-8(fp)
   165a4:	10c00283 	ldbu	r3,10(r2)
   165a8:	e0bfff17 	ldw	r2,-4(fp)
   165ac:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   165b0:	e0bffe17 	ldw	r2,-8(fp)
   165b4:	108002c4 	addi	r2,r2,11
   165b8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   165bc:	e0bfff17 	ldw	r2,-4(fp)
   165c0:	10800084 	addi	r2,r2,2
   165c4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   165c8:	e03ffa05 	stb	zero,-24(fp)
   165cc:	00000b06 	br	165fc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   165d0:	e0bff917 	ldw	r2,-28(fp)
   165d4:	10c00044 	addi	r3,r2,1
   165d8:	e0fff915 	stw	r3,-28(fp)
   165dc:	e0fff817 	ldw	r3,-32(fp)
   165e0:	19000044 	addi	r4,r3,1
   165e4:	e13ff815 	stw	r4,-32(fp)
   165e8:	18c00003 	ldbu	r3,0(r3)
   165ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   165f0:	e0bffa03 	ldbu	r2,-24(fp)
   165f4:	10800044 	addi	r2,r2,1
   165f8:	e0bffa05 	stb	r2,-24(fp)
   165fc:	e0bffa03 	ldbu	r2,-24(fp)
   16600:	108000f0 	cmpltui	r2,r2,3
   16604:	103ff21e 	bne	r2,zero,165d0 <__alt_data_end+0xfffe5890>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   16608:	e0bffe17 	ldw	r2,-8(fp)
   1660c:	10c0020b 	ldhu	r3,8(r2)
   16610:	e0bfff17 	ldw	r2,-4(fp)
   16614:	10c0000d 	sth	r3,0(r2)
   16618:	e0bffb17 	ldw	r2,-20(fp)
   1661c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16620:	e0bffc17 	ldw	r2,-16(fp)
   16624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   16628:	0005883a 	mov	r2,zero
}
   1662c:	e037883a 	mov	sp,fp
   16630:	df000017 	ldw	fp,0(sp)
   16634:	dec00104 	addi	sp,sp,4
   16638:	f800283a 	ret

0001663c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1663c:	defff904 	addi	sp,sp,-28
   16640:	df000615 	stw	fp,24(sp)
   16644:	df000604 	addi	fp,sp,24
   16648:	e13ffd15 	stw	r4,-12(fp)
   1664c:	2805883a 	mov	r2,r5
   16650:	e1bfff15 	stw	r6,-4(fp)
   16654:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   16658:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1665c:	e0bfff17 	ldw	r2,-4(fp)
   16660:	10003126 	beq	r2,zero,16728 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   16664:	e0bffd17 	ldw	r2,-12(fp)
   16668:	1000041e 	bne	r2,zero,1667c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1666c:	e0bfff17 	ldw	r2,-4(fp)
   16670:	00c00104 	movi	r3,4
   16674:	10c00005 	stb	r3,0(r2)
        return;
   16678:	00002c06 	br	1672c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1667c:	e0bffd17 	ldw	r2,-12(fp)
   16680:	10800003 	ldbu	r2,0(r2)
   16684:	10803fcc 	andi	r2,r2,255
   16688:	108000e0 	cmpeqi	r2,r2,3
   1668c:	1000041e 	bne	r2,zero,166a0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   16690:	e0bfff17 	ldw	r2,-4(fp)
   16694:	00c00044 	movi	r3,1
   16698:	10c00005 	stb	r3,0(r2)
        return;
   1669c:	00002306 	br	1672c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   166a0:	0005303a 	rdctl	r2,status
   166a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   166a8:	e0fffc17 	ldw	r3,-16(fp)
   166ac:	00bfff84 	movi	r2,-2
   166b0:	1884703a 	and	r2,r3,r2
   166b4:	1001703a 	wrctl	status,r2
  
  return context;
   166b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   166bc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   166c0:	e0bfff17 	ldw	r2,-4(fp)
   166c4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   166c8:	e0bffd17 	ldw	r2,-12(fp)
   166cc:	1080020b 	ldhu	r2,8(r2)
   166d0:	10bfffcc 	andi	r2,r2,65535
   166d4:	10000426 	beq	r2,zero,166e8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   166d8:	e0bffd17 	ldw	r2,-12(fp)
   166dc:	e0fffe0b 	ldhu	r3,-8(fp)
   166e0:	10c0020d 	sth	r3,8(r2)
   166e4:	00000b06 	br	16714 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   166e8:	e0bffd17 	ldw	r2,-12(fp)
   166ec:	10800283 	ldbu	r2,10(r2)
   166f0:	10803fcc 	andi	r2,r2,255
   166f4:	1000041e 	bne	r2,zero,16708 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   166f8:	e0bffd17 	ldw	r2,-12(fp)
   166fc:	e0fffe0b 	ldhu	r3,-8(fp)
   16700:	10c0020d 	sth	r3,8(r2)
   16704:	00000306 	br	16714 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   16708:	e0bfff17 	ldw	r2,-4(fp)
   1670c:	00c01244 	movi	r3,73
   16710:	10c00005 	stb	r3,0(r2)
   16714:	e0bffa17 	ldw	r2,-24(fp)
   16718:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1671c:	e0bffb17 	ldw	r2,-20(fp)
   16720:	1001703a 	wrctl	status,r2
   16724:	00000106 	br	1672c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   16728:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1672c:	e037883a 	mov	sp,fp
   16730:	df000017 	ldw	fp,0(sp)
   16734:	dec00104 	addi	sp,sp,4
   16738:	f800283a 	ret

0001673c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1673c:	defff104 	addi	sp,sp,-60
   16740:	dfc00e15 	stw	ra,56(sp)
   16744:	df000d15 	stw	fp,52(sp)
   16748:	df000d04 	addi	fp,sp,52
   1674c:	2007883a 	mov	r3,r4
   16750:	2805883a 	mov	r2,r5
   16754:	e0fffe05 	stb	r3,-8(fp)
   16758:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1675c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   16760:	e0bffe03 	ldbu	r2,-8(fp)
   16764:	10800530 	cmpltui	r2,r2,20
   16768:	1000051e 	bne	r2,zero,16780 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1676c:	e0bffe03 	ldbu	r2,-8(fp)
   16770:	10803fe0 	cmpeqi	r2,r2,255
   16774:	1000021e 	bne	r2,zero,16780 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   16778:	00800a84 	movi	r2,42
   1677c:	00012606 	br	16c18 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   16780:	e0bfff03 	ldbu	r2,-4(fp)
   16784:	10800530 	cmpltui	r2,r2,20
   16788:	1000021e 	bne	r2,zero,16794 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1678c:	00800a84 	movi	r2,42
   16790:	00012106 	br	16c18 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16794:	0005303a 	rdctl	r2,status
   16798:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1679c:	e0fffd17 	ldw	r3,-12(fp)
   167a0:	00bfff84 	movi	r2,-2
   167a4:	1884703a 	and	r2,r3,r2
   167a8:	1001703a 	wrctl	status,r2
  
  return context;
   167ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   167b0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   167b4:	e0ffff03 	ldbu	r3,-4(fp)
   167b8:	008000f4 	movhi	r2,3
   167bc:	10b3e904 	addi	r2,r2,-12380
   167c0:	18c7883a 	add	r3,r3,r3
   167c4:	18c7883a 	add	r3,r3,r3
   167c8:	10c5883a 	add	r2,r2,r3
   167cc:	10800017 	ldw	r2,0(r2)
   167d0:	10000626 	beq	r2,zero,167ec <OSTaskChangePrio+0xb0>
   167d4:	e0bff517 	ldw	r2,-44(fp)
   167d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   167dc:	e0bff617 	ldw	r2,-40(fp)
   167e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   167e4:	00800a04 	movi	r2,40
   167e8:	00010b06 	br	16c18 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   167ec:	e0bffe03 	ldbu	r2,-8(fp)
   167f0:	10803fd8 	cmpnei	r2,r2,255
   167f4:	1000031e 	bne	r2,zero,16804 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   167f8:	d0a74617 	ldw	r2,-25320(gp)
   167fc:	10800c83 	ldbu	r2,50(r2)
   16800:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   16804:	e0fffe03 	ldbu	r3,-8(fp)
   16808:	008000f4 	movhi	r2,3
   1680c:	10b3e904 	addi	r2,r2,-12380
   16810:	18c7883a 	add	r3,r3,r3
   16814:	18c7883a 	add	r3,r3,r3
   16818:	10c5883a 	add	r2,r2,r3
   1681c:	10800017 	ldw	r2,0(r2)
   16820:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   16824:	e0bff817 	ldw	r2,-32(fp)
   16828:	1000061e 	bne	r2,zero,16844 <OSTaskChangePrio+0x108>
   1682c:	e0bff517 	ldw	r2,-44(fp)
   16830:	e0bff715 	stw	r2,-36(fp)
   16834:	e0bff717 	ldw	r2,-36(fp)
   16838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1683c:	00800a44 	movi	r2,41
   16840:	0000f506 	br	16c18 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   16844:	e0bff817 	ldw	r2,-32(fp)
   16848:	10800058 	cmpnei	r2,r2,1
   1684c:	1000061e 	bne	r2,zero,16868 <OSTaskChangePrio+0x12c>
   16850:	e0bff517 	ldw	r2,-44(fp)
   16854:	e0bff915 	stw	r2,-28(fp)
   16858:	e0bff917 	ldw	r2,-28(fp)
   1685c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   16860:	008010c4 	movi	r2,67
   16864:	0000ec06 	br	16c18 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   16868:	e0bfff03 	ldbu	r2,-4(fp)
   1686c:	1004d0fa 	srli	r2,r2,3
   16870:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   16874:	e0bfff03 	ldbu	r2,-4(fp)
   16878:	108001cc 	andi	r2,r2,7
   1687c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   16880:	e0bffb03 	ldbu	r2,-20(fp)
   16884:	00c00044 	movi	r3,1
   16888:	1884983a 	sll	r2,r3,r2
   1688c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   16890:	e0bffb43 	ldbu	r2,-19(fp)
   16894:	00c00044 	movi	r3,1
   16898:	1884983a 	sll	r2,r3,r2
   1689c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   168a0:	e0fffe03 	ldbu	r3,-8(fp)
   168a4:	008000f4 	movhi	r2,3
   168a8:	10b3e904 	addi	r2,r2,-12380
   168ac:	18c7883a 	add	r3,r3,r3
   168b0:	18c7883a 	add	r3,r3,r3
   168b4:	10c5883a 	add	r2,r2,r3
   168b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   168bc:	e0ffff03 	ldbu	r3,-4(fp)
   168c0:	008000f4 	movhi	r2,3
   168c4:	10b3e904 	addi	r2,r2,-12380
   168c8:	18c7883a 	add	r3,r3,r3
   168cc:	18c7883a 	add	r3,r3,r3
   168d0:	10c5883a 	add	r2,r2,r3
   168d4:	e0fff817 	ldw	r3,-32(fp)
   168d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   168dc:	e0bff817 	ldw	r2,-32(fp)
   168e0:	10800d03 	ldbu	r2,52(r2)
   168e4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   168e8:	e0bff817 	ldw	r2,-32(fp)
   168ec:	10800d83 	ldbu	r2,54(r2)
   168f0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   168f4:	e0bff817 	ldw	r2,-32(fp)
   168f8:	10800d43 	ldbu	r2,53(r2)
   168fc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   16900:	e0fffc03 	ldbu	r3,-16(fp)
   16904:	d0a74344 	addi	r2,gp,-25331
   16908:	1885883a 	add	r2,r3,r2
   1690c:	10c00003 	ldbu	r3,0(r2)
   16910:	e0bffc83 	ldbu	r2,-14(fp)
   16914:	1884703a 	and	r2,r3,r2
   16918:	10803fcc 	andi	r2,r2,255
   1691c:	10002826 	beq	r2,zero,169c0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   16920:	e0fffc03 	ldbu	r3,-16(fp)
   16924:	e13ffc03 	ldbu	r4,-16(fp)
   16928:	d0a74344 	addi	r2,gp,-25331
   1692c:	2085883a 	add	r2,r4,r2
   16930:	10800003 	ldbu	r2,0(r2)
   16934:	1009883a 	mov	r4,r2
   16938:	e0bffc83 	ldbu	r2,-14(fp)
   1693c:	0084303a 	nor	r2,zero,r2
   16940:	2084703a 	and	r2,r4,r2
   16944:	1009883a 	mov	r4,r2
   16948:	d0a74344 	addi	r2,gp,-25331
   1694c:	1885883a 	add	r2,r3,r2
   16950:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   16954:	e0fffc03 	ldbu	r3,-16(fp)
   16958:	d0a74344 	addi	r2,gp,-25331
   1695c:	1885883a 	add	r2,r3,r2
   16960:	10800003 	ldbu	r2,0(r2)
   16964:	10803fcc 	andi	r2,r2,255
   16968:	1000061e 	bne	r2,zero,16984 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1696c:	e0bffc43 	ldbu	r2,-15(fp)
   16970:	0084303a 	nor	r2,zero,r2
   16974:	1007883a 	mov	r3,r2
   16978:	d0a74303 	ldbu	r2,-25332(gp)
   1697c:	1884703a 	and	r2,r3,r2
   16980:	d0a74305 	stb	r2,-25332(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   16984:	d0e74303 	ldbu	r3,-25332(gp)
   16988:	e0bffb83 	ldbu	r2,-18(fp)
   1698c:	1884b03a 	or	r2,r3,r2
   16990:	d0a74305 	stb	r2,-25332(gp)
         OSRdyTbl[y_new] |= bitx_new;
   16994:	e0fffb03 	ldbu	r3,-20(fp)
   16998:	e13ffb03 	ldbu	r4,-20(fp)
   1699c:	d0a74344 	addi	r2,gp,-25331
   169a0:	2085883a 	add	r2,r4,r2
   169a4:	11000003 	ldbu	r4,0(r2)
   169a8:	e0bffbc3 	ldbu	r2,-17(fp)
   169ac:	2084b03a 	or	r2,r4,r2
   169b0:	1009883a 	mov	r4,r2
   169b4:	d0a74344 	addi	r2,gp,-25331
   169b8:	1885883a 	add	r2,r3,r2
   169bc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   169c0:	e0bff817 	ldw	r2,-32(fp)
   169c4:	10800717 	ldw	r2,28(r2)
   169c8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   169cc:	e0bff317 	ldw	r2,-52(fp)
   169d0:	10003326 	beq	r2,zero,16aa0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   169d4:	e0bffc03 	ldbu	r2,-16(fp)
   169d8:	e0fffc03 	ldbu	r3,-16(fp)
   169dc:	e13ff317 	ldw	r4,-52(fp)
   169e0:	20c7883a 	add	r3,r4,r3
   169e4:	18c002c4 	addi	r3,r3,11
   169e8:	18c00003 	ldbu	r3,0(r3)
   169ec:	1809883a 	mov	r4,r3
   169f0:	e0fffc83 	ldbu	r3,-14(fp)
   169f4:	00c6303a 	nor	r3,zero,r3
   169f8:	20c6703a 	and	r3,r4,r3
   169fc:	1809883a 	mov	r4,r3
   16a00:	e0fff317 	ldw	r3,-52(fp)
   16a04:	1885883a 	add	r2,r3,r2
   16a08:	108002c4 	addi	r2,r2,11
   16a0c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   16a10:	e0bffc03 	ldbu	r2,-16(fp)
   16a14:	e0fff317 	ldw	r3,-52(fp)
   16a18:	1885883a 	add	r2,r3,r2
   16a1c:	108002c4 	addi	r2,r2,11
   16a20:	10800003 	ldbu	r2,0(r2)
   16a24:	10803fcc 	andi	r2,r2,255
   16a28:	1000091e 	bne	r2,zero,16a50 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   16a2c:	e0bff317 	ldw	r2,-52(fp)
   16a30:	10800283 	ldbu	r2,10(r2)
   16a34:	1007883a 	mov	r3,r2
   16a38:	e0bffc43 	ldbu	r2,-15(fp)
   16a3c:	0084303a 	nor	r2,zero,r2
   16a40:	1884703a 	and	r2,r3,r2
   16a44:	1007883a 	mov	r3,r2
   16a48:	e0bff317 	ldw	r2,-52(fp)
   16a4c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   16a50:	e0bff317 	ldw	r2,-52(fp)
   16a54:	10c00283 	ldbu	r3,10(r2)
   16a58:	e0bffb83 	ldbu	r2,-18(fp)
   16a5c:	1884b03a 	or	r2,r3,r2
   16a60:	1007883a 	mov	r3,r2
   16a64:	e0bff317 	ldw	r2,-52(fp)
   16a68:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   16a6c:	e0bffb03 	ldbu	r2,-20(fp)
   16a70:	e0fffb03 	ldbu	r3,-20(fp)
   16a74:	e13ff317 	ldw	r4,-52(fp)
   16a78:	20c7883a 	add	r3,r4,r3
   16a7c:	18c002c4 	addi	r3,r3,11
   16a80:	19000003 	ldbu	r4,0(r3)
   16a84:	e0fffbc3 	ldbu	r3,-17(fp)
   16a88:	20c6b03a 	or	r3,r4,r3
   16a8c:	1809883a 	mov	r4,r3
   16a90:	e0fff317 	ldw	r3,-52(fp)
   16a94:	1885883a 	add	r2,r3,r2
   16a98:	108002c4 	addi	r2,r2,11
   16a9c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   16aa0:	e0bff817 	ldw	r2,-32(fp)
   16aa4:	10800817 	ldw	r2,32(r2)
   16aa8:	10004226 	beq	r2,zero,16bb4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   16aac:	e0bff817 	ldw	r2,-32(fp)
   16ab0:	10800817 	ldw	r2,32(r2)
   16ab4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   16ab8:	e0bff417 	ldw	r2,-48(fp)
   16abc:	10800017 	ldw	r2,0(r2)
   16ac0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   16ac4:	00003906 	br	16bac <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   16ac8:	e0bffc03 	ldbu	r2,-16(fp)
   16acc:	e0fffc03 	ldbu	r3,-16(fp)
   16ad0:	e13ff317 	ldw	r4,-52(fp)
   16ad4:	20c7883a 	add	r3,r4,r3
   16ad8:	18c002c4 	addi	r3,r3,11
   16adc:	18c00003 	ldbu	r3,0(r3)
   16ae0:	1809883a 	mov	r4,r3
   16ae4:	e0fffc83 	ldbu	r3,-14(fp)
   16ae8:	00c6303a 	nor	r3,zero,r3
   16aec:	20c6703a 	and	r3,r4,r3
   16af0:	1809883a 	mov	r4,r3
   16af4:	e0fff317 	ldw	r3,-52(fp)
   16af8:	1885883a 	add	r2,r3,r2
   16afc:	108002c4 	addi	r2,r2,11
   16b00:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   16b04:	e0bffc03 	ldbu	r2,-16(fp)
   16b08:	e0fff317 	ldw	r3,-52(fp)
   16b0c:	1885883a 	add	r2,r3,r2
   16b10:	108002c4 	addi	r2,r2,11
   16b14:	10800003 	ldbu	r2,0(r2)
   16b18:	10803fcc 	andi	r2,r2,255
   16b1c:	1000091e 	bne	r2,zero,16b44 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   16b20:	e0bff317 	ldw	r2,-52(fp)
   16b24:	10800283 	ldbu	r2,10(r2)
   16b28:	1007883a 	mov	r3,r2
   16b2c:	e0bffc43 	ldbu	r2,-15(fp)
   16b30:	0084303a 	nor	r2,zero,r2
   16b34:	1884703a 	and	r2,r3,r2
   16b38:	1007883a 	mov	r3,r2
   16b3c:	e0bff317 	ldw	r2,-52(fp)
   16b40:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   16b44:	e0bff317 	ldw	r2,-52(fp)
   16b48:	10c00283 	ldbu	r3,10(r2)
   16b4c:	e0bffb83 	ldbu	r2,-18(fp)
   16b50:	1884b03a 	or	r2,r3,r2
   16b54:	1007883a 	mov	r3,r2
   16b58:	e0bff317 	ldw	r2,-52(fp)
   16b5c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   16b60:	e0bffb03 	ldbu	r2,-20(fp)
   16b64:	e0fffb03 	ldbu	r3,-20(fp)
   16b68:	e13ff317 	ldw	r4,-52(fp)
   16b6c:	20c7883a 	add	r3,r4,r3
   16b70:	18c002c4 	addi	r3,r3,11
   16b74:	19000003 	ldbu	r4,0(r3)
   16b78:	e0fffbc3 	ldbu	r3,-17(fp)
   16b7c:	20c6b03a 	or	r3,r4,r3
   16b80:	1809883a 	mov	r4,r3
   16b84:	e0fff317 	ldw	r3,-52(fp)
   16b88:	1885883a 	add	r2,r3,r2
   16b8c:	108002c4 	addi	r2,r2,11
   16b90:	11000005 	stb	r4,0(r2)
            pevents++;
   16b94:	e0bff417 	ldw	r2,-48(fp)
   16b98:	10800104 	addi	r2,r2,4
   16b9c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   16ba0:	e0bff417 	ldw	r2,-48(fp)
   16ba4:	10800017 	ldw	r2,0(r2)
   16ba8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   16bac:	e0bff317 	ldw	r2,-52(fp)
   16bb0:	103fc51e 	bne	r2,zero,16ac8 <__alt_data_end+0xfffe5d88>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   16bb4:	e0bff817 	ldw	r2,-32(fp)
   16bb8:	e0ffff03 	ldbu	r3,-4(fp)
   16bbc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   16bc0:	e0bff817 	ldw	r2,-32(fp)
   16bc4:	e0fffb03 	ldbu	r3,-20(fp)
   16bc8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   16bcc:	e0bff817 	ldw	r2,-32(fp)
   16bd0:	e0fffb43 	ldbu	r3,-19(fp)
   16bd4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   16bd8:	e0bff817 	ldw	r2,-32(fp)
   16bdc:	e0fffb83 	ldbu	r3,-18(fp)
   16be0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   16be4:	e0bff817 	ldw	r2,-32(fp)
   16be8:	e0fffbc3 	ldbu	r3,-17(fp)
   16bec:	10c00d45 	stb	r3,53(r2)
   16bf0:	e0bff517 	ldw	r2,-44(fp)
   16bf4:	e0bffa15 	stw	r2,-24(fp)
   16bf8:	e0bffa17 	ldw	r2,-24(fp)
   16bfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   16c00:	d0a73743 	ldbu	r2,-25379(gp)
   16c04:	10803fcc 	andi	r2,r2,255
   16c08:	10800058 	cmpnei	r2,r2,1
   16c0c:	1000011e 	bne	r2,zero,16c14 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   16c10:	00125000 	call	12500 <OS_Sched>
    }
    return (OS_ERR_NONE);
   16c14:	0005883a 	mov	r2,zero
}
   16c18:	e037883a 	mov	sp,fp
   16c1c:	dfc00117 	ldw	ra,4(sp)
   16c20:	df000017 	ldw	fp,0(sp)
   16c24:	dec00204 	addi	sp,sp,8
   16c28:	f800283a 	ret

00016c2c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   16c2c:	deffee04 	addi	sp,sp,-72
   16c30:	dfc01115 	stw	ra,68(sp)
   16c34:	df001015 	stw	fp,64(sp)
   16c38:	df001004 	addi	fp,sp,64
   16c3c:	e13ffc15 	stw	r4,-16(fp)
   16c40:	e17ffd15 	stw	r5,-12(fp)
   16c44:	e1bffe15 	stw	r6,-8(fp)
   16c48:	3805883a 	mov	r2,r7
   16c4c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16c50:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16c54:	e0bfff03 	ldbu	r2,-4(fp)
   16c58:	10800570 	cmpltui	r2,r2,21
   16c5c:	1000021e 	bne	r2,zero,16c68 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   16c60:	00800a84 	movi	r2,42
   16c64:	00005706 	br	16dc4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c68:	0005303a 	rdctl	r2,status
   16c6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c70:	e0fffb17 	ldw	r3,-20(fp)
   16c74:	00bfff84 	movi	r2,-2
   16c78:	1884703a 	and	r2,r3,r2
   16c7c:	1001703a 	wrctl	status,r2
  
  return context;
   16c80:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16c84:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16c88:	d0a74503 	ldbu	r2,-25324(gp)
   16c8c:	10803fcc 	andi	r2,r2,255
   16c90:	10000626 	beq	r2,zero,16cac <OSTaskCreate+0x80>
   16c94:	e0bff317 	ldw	r2,-52(fp)
   16c98:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16c9c:	e0bff417 	ldw	r2,-48(fp)
   16ca0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16ca4:	00800f04 	movi	r2,60
   16ca8:	00004606 	br	16dc4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16cac:	e0ffff03 	ldbu	r3,-4(fp)
   16cb0:	008000f4 	movhi	r2,3
   16cb4:	10b3e904 	addi	r2,r2,-12380
   16cb8:	18c7883a 	add	r3,r3,r3
   16cbc:	18c7883a 	add	r3,r3,r3
   16cc0:	10c5883a 	add	r2,r2,r3
   16cc4:	10800017 	ldw	r2,0(r2)
   16cc8:	1000391e 	bne	r2,zero,16db0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16ccc:	e0ffff03 	ldbu	r3,-4(fp)
   16cd0:	008000f4 	movhi	r2,3
   16cd4:	10b3e904 	addi	r2,r2,-12380
   16cd8:	18c7883a 	add	r3,r3,r3
   16cdc:	18c7883a 	add	r3,r3,r3
   16ce0:	10c5883a 	add	r2,r2,r3
   16ce4:	00c00044 	movi	r3,1
   16ce8:	10c00015 	stw	r3,0(r2)
   16cec:	e0bff317 	ldw	r2,-52(fp)
   16cf0:	e0bff515 	stw	r2,-44(fp)
   16cf4:	e0bff517 	ldw	r2,-44(fp)
   16cf8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   16cfc:	000f883a 	mov	r7,zero
   16d00:	e1bffe17 	ldw	r6,-8(fp)
   16d04:	e17ffd17 	ldw	r5,-12(fp)
   16d08:	e13ffc17 	ldw	r4,-16(fp)
   16d0c:	001a5f40 	call	1a5f4 <OSTaskStkInit>
   16d10:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   16d14:	e0bfff03 	ldbu	r2,-4(fp)
   16d18:	d8000215 	stw	zero,8(sp)
   16d1c:	d8000115 	stw	zero,4(sp)
   16d20:	d8000015 	stw	zero,0(sp)
   16d24:	000f883a 	mov	r7,zero
   16d28:	000d883a 	mov	r6,zero
   16d2c:	e17ff717 	ldw	r5,-36(fp)
   16d30:	1009883a 	mov	r4,r2
   16d34:	00129000 	call	12900 <OS_TCBInit>
   16d38:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   16d3c:	e0bff803 	ldbu	r2,-32(fp)
   16d40:	1000061e 	bne	r2,zero,16d5c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   16d44:	d0a73743 	ldbu	r2,-25379(gp)
   16d48:	10803fcc 	andi	r2,r2,255
   16d4c:	10800058 	cmpnei	r2,r2,1
   16d50:	1000151e 	bne	r2,zero,16da8 <OSTaskCreate+0x17c>
                OS_Sched();
   16d54:	00125000 	call	12500 <OS_Sched>
   16d58:	00001306 	br	16da8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16d5c:	0005303a 	rdctl	r2,status
   16d60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16d64:	e0fffa17 	ldw	r3,-24(fp)
   16d68:	00bfff84 	movi	r2,-2
   16d6c:	1884703a 	and	r2,r3,r2
   16d70:	1001703a 	wrctl	status,r2
  
  return context;
   16d74:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16d78:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   16d7c:	e0ffff03 	ldbu	r3,-4(fp)
   16d80:	008000f4 	movhi	r2,3
   16d84:	10b3e904 	addi	r2,r2,-12380
   16d88:	18c7883a 	add	r3,r3,r3
   16d8c:	18c7883a 	add	r3,r3,r3
   16d90:	10c5883a 	add	r2,r2,r3
   16d94:	10000015 	stw	zero,0(r2)
   16d98:	e0bff317 	ldw	r2,-52(fp)
   16d9c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16da0:	e0bff617 	ldw	r2,-40(fp)
   16da4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16da8:	e0bff803 	ldbu	r2,-32(fp)
   16dac:	00000506 	br	16dc4 <OSTaskCreate+0x198>
   16db0:	e0bff317 	ldw	r2,-52(fp)
   16db4:	e0bff915 	stw	r2,-28(fp)
   16db8:	e0bff917 	ldw	r2,-28(fp)
   16dbc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16dc0:	00800a04 	movi	r2,40
}
   16dc4:	e037883a 	mov	sp,fp
   16dc8:	dfc00117 	ldw	ra,4(sp)
   16dcc:	df000017 	ldw	fp,0(sp)
   16dd0:	dec00204 	addi	sp,sp,8
   16dd4:	f800283a 	ret

00016dd8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   16dd8:	deffec04 	addi	sp,sp,-80
   16ddc:	dfc01315 	stw	ra,76(sp)
   16de0:	df001215 	stw	fp,72(sp)
   16de4:	df001204 	addi	fp,sp,72
   16de8:	e13ffa15 	stw	r4,-24(fp)
   16dec:	e17ffb15 	stw	r5,-20(fp)
   16df0:	e1bffc15 	stw	r6,-16(fp)
   16df4:	3809883a 	mov	r4,r7
   16df8:	e0c00217 	ldw	r3,8(fp)
   16dfc:	e0800617 	ldw	r2,24(fp)
   16e00:	e13ffd05 	stb	r4,-12(fp)
   16e04:	e0fffe0d 	sth	r3,-8(fp)
   16e08:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   16e0c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   16e10:	e0bffd03 	ldbu	r2,-12(fp)
   16e14:	10800570 	cmpltui	r2,r2,21
   16e18:	1000021e 	bne	r2,zero,16e24 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   16e1c:	00800a84 	movi	r2,42
   16e20:	00006106 	br	16fa8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16e24:	0005303a 	rdctl	r2,status
   16e28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16e2c:	e0fff917 	ldw	r3,-28(fp)
   16e30:	00bfff84 	movi	r2,-2
   16e34:	1884703a 	and	r2,r3,r2
   16e38:	1001703a 	wrctl	status,r2
  
  return context;
   16e3c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   16e40:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   16e44:	d0a74503 	ldbu	r2,-25324(gp)
   16e48:	10803fcc 	andi	r2,r2,255
   16e4c:	10000626 	beq	r2,zero,16e68 <OSTaskCreateExt+0x90>
   16e50:	e0bff117 	ldw	r2,-60(fp)
   16e54:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16e58:	e0bff217 	ldw	r2,-56(fp)
   16e5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   16e60:	00800f04 	movi	r2,60
   16e64:	00005006 	br	16fa8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   16e68:	e0fffd03 	ldbu	r3,-12(fp)
   16e6c:	008000f4 	movhi	r2,3
   16e70:	10b3e904 	addi	r2,r2,-12380
   16e74:	18c7883a 	add	r3,r3,r3
   16e78:	18c7883a 	add	r3,r3,r3
   16e7c:	10c5883a 	add	r2,r2,r3
   16e80:	10800017 	ldw	r2,0(r2)
   16e84:	1000431e 	bne	r2,zero,16f94 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   16e88:	e0fffd03 	ldbu	r3,-12(fp)
   16e8c:	008000f4 	movhi	r2,3
   16e90:	10b3e904 	addi	r2,r2,-12380
   16e94:	18c7883a 	add	r3,r3,r3
   16e98:	18c7883a 	add	r3,r3,r3
   16e9c:	10c5883a 	add	r2,r2,r3
   16ea0:	00c00044 	movi	r3,1
   16ea4:	10c00015 	stw	r3,0(r2)
   16ea8:	e0bff117 	ldw	r2,-60(fp)
   16eac:	e0bff315 	stw	r2,-52(fp)
   16eb0:	e0bff317 	ldw	r2,-52(fp)
   16eb4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   16eb8:	e0bfff0b 	ldhu	r2,-4(fp)
   16ebc:	100d883a 	mov	r6,r2
   16ec0:	e1400417 	ldw	r5,16(fp)
   16ec4:	e1000317 	ldw	r4,12(fp)
   16ec8:	0017e380 	call	17e38 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   16ecc:	e0bfff0b 	ldhu	r2,-4(fp)
   16ed0:	100f883a 	mov	r7,r2
   16ed4:	e1bffc17 	ldw	r6,-16(fp)
   16ed8:	e17ffb17 	ldw	r5,-20(fp)
   16edc:	e13ffa17 	ldw	r4,-24(fp)
   16ee0:	001a5f40 	call	1a5f4 <OSTaskStkInit>
   16ee4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   16ee8:	e0fffd03 	ldbu	r3,-12(fp)
   16eec:	e13ffe0b 	ldhu	r4,-8(fp)
   16ef0:	e0bfff0b 	ldhu	r2,-4(fp)
   16ef4:	d8800215 	stw	r2,8(sp)
   16ef8:	e0800517 	ldw	r2,20(fp)
   16efc:	d8800115 	stw	r2,4(sp)
   16f00:	e0800417 	ldw	r2,16(fp)
   16f04:	d8800015 	stw	r2,0(sp)
   16f08:	200f883a 	mov	r7,r4
   16f0c:	e1800317 	ldw	r6,12(fp)
   16f10:	e17ff517 	ldw	r5,-44(fp)
   16f14:	1809883a 	mov	r4,r3
   16f18:	00129000 	call	12900 <OS_TCBInit>
   16f1c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   16f20:	e0bff603 	ldbu	r2,-40(fp)
   16f24:	1000061e 	bne	r2,zero,16f40 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   16f28:	d0a73743 	ldbu	r2,-25379(gp)
   16f2c:	10803fcc 	andi	r2,r2,255
   16f30:	10800058 	cmpnei	r2,r2,1
   16f34:	1000151e 	bne	r2,zero,16f8c <OSTaskCreateExt+0x1b4>
                OS_Sched();
   16f38:	00125000 	call	12500 <OS_Sched>
   16f3c:	00001306 	br	16f8c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16f40:	0005303a 	rdctl	r2,status
   16f44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16f48:	e0fff817 	ldw	r3,-32(fp)
   16f4c:	00bfff84 	movi	r2,-2
   16f50:	1884703a 	and	r2,r3,r2
   16f54:	1001703a 	wrctl	status,r2
  
  return context;
   16f58:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   16f5c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   16f60:	e0fffd03 	ldbu	r3,-12(fp)
   16f64:	008000f4 	movhi	r2,3
   16f68:	10b3e904 	addi	r2,r2,-12380
   16f6c:	18c7883a 	add	r3,r3,r3
   16f70:	18c7883a 	add	r3,r3,r3
   16f74:	10c5883a 	add	r2,r2,r3
   16f78:	10000015 	stw	zero,0(r2)
   16f7c:	e0bff117 	ldw	r2,-60(fp)
   16f80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f84:	e0bff417 	ldw	r2,-48(fp)
   16f88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   16f8c:	e0bff603 	ldbu	r2,-40(fp)
   16f90:	00000506 	br	16fa8 <OSTaskCreateExt+0x1d0>
   16f94:	e0bff117 	ldw	r2,-60(fp)
   16f98:	e0bff715 	stw	r2,-36(fp)
   16f9c:	e0bff717 	ldw	r2,-36(fp)
   16fa0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   16fa4:	00800a04 	movi	r2,40
}
   16fa8:	e037883a 	mov	sp,fp
   16fac:	dfc00117 	ldw	ra,4(sp)
   16fb0:	df000017 	ldw	fp,0(sp)
   16fb4:	dec00204 	addi	sp,sp,8
   16fb8:	f800283a 	ret

00016fbc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   16fbc:	defff404 	addi	sp,sp,-48
   16fc0:	dfc00b15 	stw	ra,44(sp)
   16fc4:	df000a15 	stw	fp,40(sp)
   16fc8:	df000a04 	addi	fp,sp,40
   16fcc:	2005883a 	mov	r2,r4
   16fd0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   16fd4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   16fd8:	d0a74503 	ldbu	r2,-25324(gp)
   16fdc:	10803fcc 	andi	r2,r2,255
   16fe0:	10000226 	beq	r2,zero,16fec <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   16fe4:	00801004 	movi	r2,64
   16fe8:	0000c006 	br	172ec <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   16fec:	e0bfff03 	ldbu	r2,-4(fp)
   16ff0:	10800518 	cmpnei	r2,r2,20
   16ff4:	1000021e 	bne	r2,zero,17000 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   16ff8:	00800f84 	movi	r2,62
   16ffc:	0000bb06 	br	172ec <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   17000:	e0bfff03 	ldbu	r2,-4(fp)
   17004:	10800530 	cmpltui	r2,r2,20
   17008:	1000051e 	bne	r2,zero,17020 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1700c:	e0bfff03 	ldbu	r2,-4(fp)
   17010:	10803fe0 	cmpeqi	r2,r2,255
   17014:	1000021e 	bne	r2,zero,17020 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   17018:	00800a84 	movi	r2,42
   1701c:	0000b306 	br	172ec <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17020:	0005303a 	rdctl	r2,status
   17024:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17028:	e0fffe17 	ldw	r3,-8(fp)
   1702c:	00bfff84 	movi	r2,-2
   17030:	1884703a 	and	r2,r3,r2
   17034:	1001703a 	wrctl	status,r2
  
  return context;
   17038:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1703c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   17040:	e0bfff03 	ldbu	r2,-4(fp)
   17044:	10803fd8 	cmpnei	r2,r2,255
   17048:	1000031e 	bne	r2,zero,17058 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1704c:	d0a74617 	ldw	r2,-25320(gp)
   17050:	10800c83 	ldbu	r2,50(r2)
   17054:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17058:	e0ffff03 	ldbu	r3,-4(fp)
   1705c:	008000f4 	movhi	r2,3
   17060:	10b3e904 	addi	r2,r2,-12380
   17064:	18c7883a 	add	r3,r3,r3
   17068:	18c7883a 	add	r3,r3,r3
   1706c:	10c5883a 	add	r2,r2,r3
   17070:	10800017 	ldw	r2,0(r2)
   17074:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   17078:	e0bff817 	ldw	r2,-32(fp)
   1707c:	1000061e 	bne	r2,zero,17098 <OSTaskDel+0xdc>
   17080:	e0bff617 	ldw	r2,-40(fp)
   17084:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17088:	e0bff717 	ldw	r2,-36(fp)
   1708c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17090:	008010c4 	movi	r2,67
   17094:	00009506 	br	172ec <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   17098:	e0bff817 	ldw	r2,-32(fp)
   1709c:	10800058 	cmpnei	r2,r2,1
   170a0:	1000061e 	bne	r2,zero,170bc <OSTaskDel+0x100>
   170a4:	e0bff617 	ldw	r2,-40(fp)
   170a8:	e0bff915 	stw	r2,-28(fp)
   170ac:	e0bff917 	ldw	r2,-28(fp)
   170b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   170b4:	00800f44 	movi	r2,61
   170b8:	00008c06 	br	172ec <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   170bc:	e0bff817 	ldw	r2,-32(fp)
   170c0:	10800d03 	ldbu	r2,52(r2)
   170c4:	10c03fcc 	andi	r3,r2,255
   170c8:	e0bff817 	ldw	r2,-32(fp)
   170cc:	10800d03 	ldbu	r2,52(r2)
   170d0:	11003fcc 	andi	r4,r2,255
   170d4:	d0a74344 	addi	r2,gp,-25331
   170d8:	2085883a 	add	r2,r4,r2
   170dc:	10800003 	ldbu	r2,0(r2)
   170e0:	1009883a 	mov	r4,r2
   170e4:	e0bff817 	ldw	r2,-32(fp)
   170e8:	10800d43 	ldbu	r2,53(r2)
   170ec:	0084303a 	nor	r2,zero,r2
   170f0:	2084703a 	and	r2,r4,r2
   170f4:	1009883a 	mov	r4,r2
   170f8:	d0a74344 	addi	r2,gp,-25331
   170fc:	1885883a 	add	r2,r3,r2
   17100:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   17104:	e0bff817 	ldw	r2,-32(fp)
   17108:	10800d03 	ldbu	r2,52(r2)
   1710c:	10c03fcc 	andi	r3,r2,255
   17110:	d0a74344 	addi	r2,gp,-25331
   17114:	1885883a 	add	r2,r3,r2
   17118:	10800003 	ldbu	r2,0(r2)
   1711c:	10803fcc 	andi	r2,r2,255
   17120:	1000071e 	bne	r2,zero,17140 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   17124:	e0bff817 	ldw	r2,-32(fp)
   17128:	10800d83 	ldbu	r2,54(r2)
   1712c:	0084303a 	nor	r2,zero,r2
   17130:	1007883a 	mov	r3,r2
   17134:	d0a74303 	ldbu	r2,-25332(gp)
   17138:	1884703a 	and	r2,r3,r2
   1713c:	d0a74305 	stb	r2,-25332(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   17140:	e0bff817 	ldw	r2,-32(fp)
   17144:	10800717 	ldw	r2,28(r2)
   17148:	10000526 	beq	r2,zero,17160 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1714c:	e0bff817 	ldw	r2,-32(fp)
   17150:	10800717 	ldw	r2,28(r2)
   17154:	100b883a 	mov	r5,r2
   17158:	e13ff817 	ldw	r4,-32(fp)
   1715c:	0011eac0 	call	11eac <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   17160:	e0bff817 	ldw	r2,-32(fp)
   17164:	10800817 	ldw	r2,32(r2)
   17168:	10000526 	beq	r2,zero,17180 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1716c:	e0bff817 	ldw	r2,-32(fp)
   17170:	10800817 	ldw	r2,32(r2)
   17174:	100b883a 	mov	r5,r2
   17178:	e13ff817 	ldw	r4,-32(fp)
   1717c:	0011f640 	call	11f64 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   17180:	e0bff817 	ldw	r2,-32(fp)
   17184:	10800a17 	ldw	r2,40(r2)
   17188:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1718c:	e0bffb17 	ldw	r2,-20(fp)
   17190:	10000226 	beq	r2,zero,1719c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   17194:	e13ffb17 	ldw	r4,-20(fp)
   17198:	00143d40 	call	143d4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1719c:	e0bff817 	ldw	r2,-32(fp)
   171a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   171a4:	e0bff817 	ldw	r2,-32(fp)
   171a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   171ac:	e0bff817 	ldw	r2,-32(fp)
   171b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   171b4:	d0a73703 	ldbu	r2,-25380(gp)
   171b8:	10803fcc 	andi	r2,r2,255
   171bc:	10803fe0 	cmpeqi	r2,r2,255
   171c0:	1000031e 	bne	r2,zero,171d0 <OSTaskDel+0x214>
        OSLockNesting++;
   171c4:	d0a73703 	ldbu	r2,-25380(gp)
   171c8:	10800044 	addi	r2,r2,1
   171cc:	d0a73705 	stb	r2,-25380(gp)
   171d0:	e0bff617 	ldw	r2,-40(fp)
   171d4:	e0bffd15 	stw	r2,-12(fp)
   171d8:	e0bffd17 	ldw	r2,-12(fp)
   171dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   171e0:	0011a940 	call	11a94 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   171e4:	0005303a 	rdctl	r2,status
   171e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   171ec:	e0fffa17 	ldw	r3,-24(fp)
   171f0:	00bfff84 	movi	r2,-2
   171f4:	1884703a 	and	r2,r3,r2
   171f8:	1001703a 	wrctl	status,r2
  
  return context;
   171fc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   17200:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   17204:	d0a73703 	ldbu	r2,-25380(gp)
   17208:	10803fcc 	andi	r2,r2,255
   1720c:	10000326 	beq	r2,zero,1721c <OSTaskDel+0x260>
        OSLockNesting--;
   17210:	d0a73703 	ldbu	r2,-25380(gp)
   17214:	10bfffc4 	addi	r2,r2,-1
   17218:	d0a73705 	stb	r2,-25380(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1721c:	e13ff817 	ldw	r4,-32(fp)
   17220:	001a7740 	call	1a774 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   17224:	d0a73f43 	ldbu	r2,-25347(gp)
   17228:	10bfffc4 	addi	r2,r2,-1
   1722c:	d0a73f45 	stb	r2,-25347(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   17230:	e0ffff03 	ldbu	r3,-4(fp)
   17234:	008000f4 	movhi	r2,3
   17238:	10b3e904 	addi	r2,r2,-12380
   1723c:	18c7883a 	add	r3,r3,r3
   17240:	18c7883a 	add	r3,r3,r3
   17244:	10c5883a 	add	r2,r2,r3
   17248:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1724c:	e0bff817 	ldw	r2,-32(fp)
   17250:	10800617 	ldw	r2,24(r2)
   17254:	1000071e 	bne	r2,zero,17274 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   17258:	e0bff817 	ldw	r2,-32(fp)
   1725c:	10800517 	ldw	r2,20(r2)
   17260:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   17264:	e0bff817 	ldw	r2,-32(fp)
   17268:	10800517 	ldw	r2,20(r2)
   1726c:	d0a73a15 	stw	r2,-25368(gp)
   17270:	00000a06 	br	1729c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   17274:	e0bff817 	ldw	r2,-32(fp)
   17278:	10800617 	ldw	r2,24(r2)
   1727c:	e0fff817 	ldw	r3,-32(fp)
   17280:	18c00517 	ldw	r3,20(r3)
   17284:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   17288:	e0bff817 	ldw	r2,-32(fp)
   1728c:	10800517 	ldw	r2,20(r2)
   17290:	e0fff817 	ldw	r3,-32(fp)
   17294:	18c00617 	ldw	r3,24(r3)
   17298:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1729c:	d0e73e17 	ldw	r3,-25352(gp)
   172a0:	e0bff817 	ldw	r2,-32(fp)
   172a4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   172a8:	e0bff817 	ldw	r2,-32(fp)
   172ac:	d0a73e15 	stw	r2,-25352(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   172b0:	e0bff817 	ldw	r2,-32(fp)
   172b4:	00c00fc4 	movi	r3,63
   172b8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   172bc:	e0bff817 	ldw	r2,-32(fp)
   172c0:	10001345 	stb	zero,77(r2)
   172c4:	e0bff617 	ldw	r2,-40(fp)
   172c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   172cc:	e0bffc17 	ldw	r2,-16(fp)
   172d0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   172d4:	d0a73743 	ldbu	r2,-25379(gp)
   172d8:	10803fcc 	andi	r2,r2,255
   172dc:	10800058 	cmpnei	r2,r2,1
   172e0:	1000011e 	bne	r2,zero,172e8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   172e4:	00125000 	call	12500 <OS_Sched>
    }
    return (OS_ERR_NONE);
   172e8:	0005883a 	mov	r2,zero
}
   172ec:	e037883a 	mov	sp,fp
   172f0:	dfc00117 	ldw	ra,4(sp)
   172f4:	df000017 	ldw	fp,0(sp)
   172f8:	dec00204 	addi	sp,sp,8
   172fc:	f800283a 	ret

00017300 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   17300:	defff504 	addi	sp,sp,-44
   17304:	df000a15 	stw	fp,40(sp)
   17308:	df000a04 	addi	fp,sp,40
   1730c:	2005883a 	mov	r2,r4
   17310:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17314:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   17318:	e0bfff03 	ldbu	r2,-4(fp)
   1731c:	10800518 	cmpnei	r2,r2,20
   17320:	1000021e 	bne	r2,zero,1732c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   17324:	00800f84 	movi	r2,62
   17328:	00004506 	br	17440 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1732c:	e0bfff03 	ldbu	r2,-4(fp)
   17330:	10800530 	cmpltui	r2,r2,20
   17334:	1000051e 	bne	r2,zero,1734c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   17338:	e0bfff03 	ldbu	r2,-4(fp)
   1733c:	10803fe0 	cmpeqi	r2,r2,255
   17340:	1000021e 	bne	r2,zero,1734c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   17344:	00800a84 	movi	r2,42
   17348:	00003d06 	br	17440 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1734c:	e0bfff03 	ldbu	r2,-4(fp)
   17350:	10803fd8 	cmpnei	r2,r2,255
   17354:	1000111e 	bne	r2,zero,1739c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17358:	0005303a 	rdctl	r2,status
   1735c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17360:	e0fff917 	ldw	r3,-28(fp)
   17364:	00bfff84 	movi	r2,-2
   17368:	1884703a 	and	r2,r3,r2
   1736c:	1001703a 	wrctl	status,r2
  
  return context;
   17370:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   17374:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   17378:	d0a74617 	ldw	r2,-25320(gp)
   1737c:	10800dc3 	ldbu	r2,55(r2)
   17380:	e0bff805 	stb	r2,-32(fp)
   17384:	e0bff617 	ldw	r2,-40(fp)
   17388:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1738c:	e0bffe17 	ldw	r2,-8(fp)
   17390:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   17394:	e0bff803 	ldbu	r2,-32(fp)
   17398:	00002906 	br	17440 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1739c:	0005303a 	rdctl	r2,status
   173a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   173a4:	e0fff717 	ldw	r3,-36(fp)
   173a8:	00bfff84 	movi	r2,-2
   173ac:	1884703a 	and	r2,r3,r2
   173b0:	1001703a 	wrctl	status,r2
  
  return context;
   173b4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   173b8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   173bc:	e0ffff03 	ldbu	r3,-4(fp)
   173c0:	008000f4 	movhi	r2,3
   173c4:	10b3e904 	addi	r2,r2,-12380
   173c8:	18c7883a 	add	r3,r3,r3
   173cc:	18c7883a 	add	r3,r3,r3
   173d0:	10c5883a 	add	r2,r2,r3
   173d4:	10800017 	ldw	r2,0(r2)
   173d8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   173dc:	e0bffb17 	ldw	r2,-20(fp)
   173e0:	1000061e 	bne	r2,zero,173fc <OSTaskDelReq+0xfc>
   173e4:	e0bff617 	ldw	r2,-40(fp)
   173e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   173ec:	e0bffa17 	ldw	r2,-24(fp)
   173f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   173f4:	008010c4 	movi	r2,67
   173f8:	00001106 	br	17440 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   173fc:	e0bffb17 	ldw	r2,-20(fp)
   17400:	10800058 	cmpnei	r2,r2,1
   17404:	1000061e 	bne	r2,zero,17420 <OSTaskDelReq+0x120>
   17408:	e0bff617 	ldw	r2,-40(fp)
   1740c:	e0bffc15 	stw	r2,-16(fp)
   17410:	e0bffc17 	ldw	r2,-16(fp)
   17414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   17418:	00800f44 	movi	r2,61
   1741c:	00000806 	br	17440 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   17420:	e0bffb17 	ldw	r2,-20(fp)
   17424:	00c00fc4 	movi	r3,63
   17428:	10c00dc5 	stb	r3,55(r2)
   1742c:	e0bff617 	ldw	r2,-40(fp)
   17430:	e0bffd15 	stw	r2,-12(fp)
   17434:	e0bffd17 	ldw	r2,-12(fp)
   17438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1743c:	0005883a 	mov	r2,zero
}
   17440:	e037883a 	mov	sp,fp
   17444:	df000017 	ldw	fp,0(sp)
   17448:	dec00104 	addi	sp,sp,4
   1744c:	f800283a 	ret

00017450 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   17450:	defff404 	addi	sp,sp,-48
   17454:	dfc00b15 	stw	ra,44(sp)
   17458:	df000a15 	stw	fp,40(sp)
   1745c:	df000a04 	addi	fp,sp,40
   17460:	2005883a 	mov	r2,r4
   17464:	e17ffe15 	stw	r5,-8(fp)
   17468:	e1bfff15 	stw	r6,-4(fp)
   1746c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   17470:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   17474:	e0bfff17 	ldw	r2,-4(fp)
   17478:	1000021e 	bne	r2,zero,17484 <OSTaskNameGet+0x34>
        return (0);
   1747c:	0005883a 	mov	r2,zero
   17480:	00005406 	br	175d4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   17484:	e0bffd03 	ldbu	r2,-12(fp)
   17488:	10800570 	cmpltui	r2,r2,21
   1748c:	1000081e 	bne	r2,zero,174b0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   17490:	e0bffd03 	ldbu	r2,-12(fp)
   17494:	10803fe0 	cmpeqi	r2,r2,255
   17498:	1000051e 	bne	r2,zero,174b0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1749c:	e0bfff17 	ldw	r2,-4(fp)
   174a0:	00c00a84 	movi	r3,42
   174a4:	10c00005 	stb	r3,0(r2)
            return (0);
   174a8:	0005883a 	mov	r2,zero
   174ac:	00004906 	br	175d4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   174b0:	e0bffe17 	ldw	r2,-8(fp)
   174b4:	1000051e 	bne	r2,zero,174cc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   174b8:	e0bfff17 	ldw	r2,-4(fp)
   174bc:	00c00304 	movi	r3,12
   174c0:	10c00005 	stb	r3,0(r2)
        return (0);
   174c4:	0005883a 	mov	r2,zero
   174c8:	00004206 	br	175d4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   174cc:	d0a74503 	ldbu	r2,-25324(gp)
   174d0:	10803fcc 	andi	r2,r2,255
   174d4:	10000526 	beq	r2,zero,174ec <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   174d8:	e0bfff17 	ldw	r2,-4(fp)
   174dc:	00c00444 	movi	r3,17
   174e0:	10c00005 	stb	r3,0(r2)
        return (0);
   174e4:	0005883a 	mov	r2,zero
   174e8:	00003a06 	br	175d4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   174ec:	0005303a 	rdctl	r2,status
   174f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   174f4:	e0fffc17 	ldw	r3,-16(fp)
   174f8:	00bfff84 	movi	r2,-2
   174fc:	1884703a 	and	r2,r3,r2
   17500:	1001703a 	wrctl	status,r2
  
  return context;
   17504:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17508:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1750c:	e0bffd03 	ldbu	r2,-12(fp)
   17510:	10803fd8 	cmpnei	r2,r2,255
   17514:	1000031e 	bne	r2,zero,17524 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   17518:	d0a74617 	ldw	r2,-25320(gp)
   1751c:	10800c83 	ldbu	r2,50(r2)
   17520:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17524:	e0fffd03 	ldbu	r3,-12(fp)
   17528:	008000f4 	movhi	r2,3
   1752c:	10b3e904 	addi	r2,r2,-12380
   17530:	18c7883a 	add	r3,r3,r3
   17534:	18c7883a 	add	r3,r3,r3
   17538:	10c5883a 	add	r2,r2,r3
   1753c:	10800017 	ldw	r2,0(r2)
   17540:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   17544:	e0bff817 	ldw	r2,-32(fp)
   17548:	1000091e 	bne	r2,zero,17570 <OSTaskNameGet+0x120>
   1754c:	e0bff617 	ldw	r2,-40(fp)
   17550:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17554:	e0bff717 	ldw	r2,-36(fp)
   17558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1755c:	e0bfff17 	ldw	r2,-4(fp)
   17560:	00c010c4 	movi	r3,67
   17564:	10c00005 	stb	r3,0(r2)
        return (0);
   17568:	0005883a 	mov	r2,zero
   1756c:	00001906 	br	175d4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   17570:	e0bff817 	ldw	r2,-32(fp)
   17574:	10800058 	cmpnei	r2,r2,1
   17578:	1000091e 	bne	r2,zero,175a0 <OSTaskNameGet+0x150>
   1757c:	e0bff617 	ldw	r2,-40(fp)
   17580:	e0bff915 	stw	r2,-28(fp)
   17584:	e0bff917 	ldw	r2,-28(fp)
   17588:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1758c:	e0bfff17 	ldw	r2,-4(fp)
   17590:	00c010c4 	movi	r3,67
   17594:	10c00005 	stb	r3,0(r2)
        return (0);
   17598:	0005883a 	mov	r2,zero
   1759c:	00000d06 	br	175d4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   175a0:	e0bff817 	ldw	r2,-32(fp)
   175a4:	10801304 	addi	r2,r2,76
   175a8:	100b883a 	mov	r5,r2
   175ac:	e13ffe17 	ldw	r4,-8(fp)
   175b0:	00126440 	call	12644 <OS_StrCopy>
   175b4:	e0bffb05 	stb	r2,-20(fp)
   175b8:	e0bff617 	ldw	r2,-40(fp)
   175bc:	e0bffa15 	stw	r2,-24(fp)
   175c0:	e0bffa17 	ldw	r2,-24(fp)
   175c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   175c8:	e0bfff17 	ldw	r2,-4(fp)
   175cc:	10000005 	stb	zero,0(r2)
    return (len);
   175d0:	e0bffb03 	ldbu	r2,-20(fp)
}
   175d4:	e037883a 	mov	sp,fp
   175d8:	dfc00117 	ldw	ra,4(sp)
   175dc:	df000017 	ldw	fp,0(sp)
   175e0:	dec00204 	addi	sp,sp,8
   175e4:	f800283a 	ret

000175e8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   175e8:	defff304 	addi	sp,sp,-52
   175ec:	dfc00c15 	stw	ra,48(sp)
   175f0:	df000b15 	stw	fp,44(sp)
   175f4:	df000b04 	addi	fp,sp,44
   175f8:	2005883a 	mov	r2,r4
   175fc:	e17ffe15 	stw	r5,-8(fp)
   17600:	e1bfff15 	stw	r6,-4(fp)
   17604:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   17608:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1760c:	e0bfff17 	ldw	r2,-4(fp)
   17610:	10005c26 	beq	r2,zero,17784 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   17614:	e0bffd03 	ldbu	r2,-12(fp)
   17618:	10800570 	cmpltui	r2,r2,21
   1761c:	1000071e 	bne	r2,zero,1763c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   17620:	e0bffd03 	ldbu	r2,-12(fp)
   17624:	10803fe0 	cmpeqi	r2,r2,255
   17628:	1000041e 	bne	r2,zero,1763c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1762c:	e0bfff17 	ldw	r2,-4(fp)
   17630:	00c00a84 	movi	r3,42
   17634:	10c00005 	stb	r3,0(r2)
            return;
   17638:	00005306 	br	17788 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1763c:	e0bffe17 	ldw	r2,-8(fp)
   17640:	1000041e 	bne	r2,zero,17654 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   17644:	e0bfff17 	ldw	r2,-4(fp)
   17648:	00c00304 	movi	r3,12
   1764c:	10c00005 	stb	r3,0(r2)
        return;
   17650:	00004d06 	br	17788 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   17654:	d0a74503 	ldbu	r2,-25324(gp)
   17658:	10803fcc 	andi	r2,r2,255
   1765c:	10000426 	beq	r2,zero,17670 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   17660:	e0bfff17 	ldw	r2,-4(fp)
   17664:	00c00484 	movi	r3,18
   17668:	10c00005 	stb	r3,0(r2)
        return;
   1766c:	00004606 	br	17788 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17670:	0005303a 	rdctl	r2,status
   17674:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17678:	e0fffc17 	ldw	r3,-16(fp)
   1767c:	00bfff84 	movi	r2,-2
   17680:	1884703a 	and	r2,r3,r2
   17684:	1001703a 	wrctl	status,r2
  
  return context;
   17688:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1768c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   17690:	e0bffd03 	ldbu	r2,-12(fp)
   17694:	10803fd8 	cmpnei	r2,r2,255
   17698:	1000031e 	bne	r2,zero,176a8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1769c:	d0a74617 	ldw	r2,-25320(gp)
   176a0:	10800c83 	ldbu	r2,50(r2)
   176a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   176a8:	e0fffd03 	ldbu	r3,-12(fp)
   176ac:	008000f4 	movhi	r2,3
   176b0:	10b3e904 	addi	r2,r2,-12380
   176b4:	18c7883a 	add	r3,r3,r3
   176b8:	18c7883a 	add	r3,r3,r3
   176bc:	10c5883a 	add	r2,r2,r3
   176c0:	10800017 	ldw	r2,0(r2)
   176c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   176c8:	e0bff717 	ldw	r2,-36(fp)
   176cc:	1000081e 	bne	r2,zero,176f0 <OSTaskNameSet+0x108>
   176d0:	e0bff517 	ldw	r2,-44(fp)
   176d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   176d8:	e0bff617 	ldw	r2,-40(fp)
   176dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   176e0:	e0bfff17 	ldw	r2,-4(fp)
   176e4:	00c010c4 	movi	r3,67
   176e8:	10c00005 	stb	r3,0(r2)
        return;
   176ec:	00002606 	br	17788 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   176f0:	e0bff717 	ldw	r2,-36(fp)
   176f4:	10800058 	cmpnei	r2,r2,1
   176f8:	1000081e 	bne	r2,zero,1771c <OSTaskNameSet+0x134>
   176fc:	e0bff517 	ldw	r2,-44(fp)
   17700:	e0bff815 	stw	r2,-32(fp)
   17704:	e0bff817 	ldw	r2,-32(fp)
   17708:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1770c:	e0bfff17 	ldw	r2,-4(fp)
   17710:	00c010c4 	movi	r3,67
   17714:	10c00005 	stb	r3,0(r2)
        return;
   17718:	00001b06 	br	17788 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1771c:	e13ffe17 	ldw	r4,-8(fp)
   17720:	00126b80 	call	126b8 <OS_StrLen>
   17724:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   17728:	e0bffa03 	ldbu	r2,-24(fp)
   1772c:	10800830 	cmpltui	r2,r2,32
   17730:	1000081e 	bne	r2,zero,17754 <OSTaskNameSet+0x16c>
   17734:	e0bff517 	ldw	r2,-44(fp)
   17738:	e0bff915 	stw	r2,-28(fp)
   1773c:	e0bff917 	ldw	r2,-28(fp)
   17740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   17744:	e0bfff17 	ldw	r2,-4(fp)
   17748:	00c01044 	movi	r3,65
   1774c:	10c00005 	stb	r3,0(r2)
        return;
   17750:	00000d06 	br	17788 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   17754:	e0bff717 	ldw	r2,-36(fp)
   17758:	10801304 	addi	r2,r2,76
   1775c:	e17ffe17 	ldw	r5,-8(fp)
   17760:	1009883a 	mov	r4,r2
   17764:	00126440 	call	12644 <OS_StrCopy>
   17768:	e0bff517 	ldw	r2,-44(fp)
   1776c:	e0bffb15 	stw	r2,-20(fp)
   17770:	e0bffb17 	ldw	r2,-20(fp)
   17774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17778:	e0bfff17 	ldw	r2,-4(fp)
   1777c:	10000005 	stb	zero,0(r2)
   17780:	00000106 	br	17788 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   17784:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   17788:	e037883a 	mov	sp,fp
   1778c:	dfc00117 	ldw	ra,4(sp)
   17790:	df000017 	ldw	fp,0(sp)
   17794:	dec00204 	addi	sp,sp,8
   17798:	f800283a 	ret

0001779c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1779c:	defff404 	addi	sp,sp,-48
   177a0:	dfc00b15 	stw	ra,44(sp)
   177a4:	df000a15 	stw	fp,40(sp)
   177a8:	df000a04 	addi	fp,sp,40
   177ac:	2005883a 	mov	r2,r4
   177b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   177b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   177b8:	e0bfff03 	ldbu	r2,-4(fp)
   177bc:	10800530 	cmpltui	r2,r2,20
   177c0:	1000021e 	bne	r2,zero,177cc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   177c4:	00800a84 	movi	r2,42
   177c8:	00006406 	br	1795c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   177cc:	0005303a 	rdctl	r2,status
   177d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   177d4:	e0fffe17 	ldw	r3,-8(fp)
   177d8:	00bfff84 	movi	r2,-2
   177dc:	1884703a 	and	r2,r3,r2
   177e0:	1001703a 	wrctl	status,r2
  
  return context;
   177e4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   177e8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   177ec:	e0ffff03 	ldbu	r3,-4(fp)
   177f0:	008000f4 	movhi	r2,3
   177f4:	10b3e904 	addi	r2,r2,-12380
   177f8:	18c7883a 	add	r3,r3,r3
   177fc:	18c7883a 	add	r3,r3,r3
   17800:	10c5883a 	add	r2,r2,r3
   17804:	10800017 	ldw	r2,0(r2)
   17808:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1780c:	e0bff817 	ldw	r2,-32(fp)
   17810:	1000061e 	bne	r2,zero,1782c <OSTaskResume+0x90>
   17814:	e0bff617 	ldw	r2,-40(fp)
   17818:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1781c:	e0bff717 	ldw	r2,-36(fp)
   17820:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   17824:	00801184 	movi	r2,70
   17828:	00004c06 	br	1795c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1782c:	e0bff817 	ldw	r2,-32(fp)
   17830:	10800058 	cmpnei	r2,r2,1
   17834:	1000061e 	bne	r2,zero,17850 <OSTaskResume+0xb4>
   17838:	e0bff617 	ldw	r2,-40(fp)
   1783c:	e0bff915 	stw	r2,-28(fp)
   17840:	e0bff917 	ldw	r2,-28(fp)
   17844:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17848:	008010c4 	movi	r2,67
   1784c:	00004306 	br	1795c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   17850:	e0bff817 	ldw	r2,-32(fp)
   17854:	10800c03 	ldbu	r2,48(r2)
   17858:	10803fcc 	andi	r2,r2,255
   1785c:	1080020c 	andi	r2,r2,8
   17860:	10003926 	beq	r2,zero,17948 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   17864:	e0bff817 	ldw	r2,-32(fp)
   17868:	10c00c03 	ldbu	r3,48(r2)
   1786c:	00bffdc4 	movi	r2,-9
   17870:	1884703a 	and	r2,r3,r2
   17874:	1007883a 	mov	r3,r2
   17878:	e0bff817 	ldw	r2,-32(fp)
   1787c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   17880:	e0bff817 	ldw	r2,-32(fp)
   17884:	10800c03 	ldbu	r2,48(r2)
   17888:	10803fcc 	andi	r2,r2,255
   1788c:	1000281e 	bne	r2,zero,17930 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   17890:	e0bff817 	ldw	r2,-32(fp)
   17894:	10800b8b 	ldhu	r2,46(r2)
   17898:	10bfffcc 	andi	r2,r2,65535
   1789c:	10001f1e 	bne	r2,zero,1791c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   178a0:	e0bff817 	ldw	r2,-32(fp)
   178a4:	10c00d83 	ldbu	r3,54(r2)
   178a8:	d0a74303 	ldbu	r2,-25332(gp)
   178ac:	1884b03a 	or	r2,r3,r2
   178b0:	d0a74305 	stb	r2,-25332(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   178b4:	e0bff817 	ldw	r2,-32(fp)
   178b8:	10800d03 	ldbu	r2,52(r2)
   178bc:	10c03fcc 	andi	r3,r2,255
   178c0:	e0bff817 	ldw	r2,-32(fp)
   178c4:	10800d03 	ldbu	r2,52(r2)
   178c8:	11003fcc 	andi	r4,r2,255
   178cc:	d0a74344 	addi	r2,gp,-25331
   178d0:	2085883a 	add	r2,r4,r2
   178d4:	11000003 	ldbu	r4,0(r2)
   178d8:	e0bff817 	ldw	r2,-32(fp)
   178dc:	10800d43 	ldbu	r2,53(r2)
   178e0:	2084b03a 	or	r2,r4,r2
   178e4:	1009883a 	mov	r4,r2
   178e8:	d0a74344 	addi	r2,gp,-25331
   178ec:	1885883a 	add	r2,r3,r2
   178f0:	11000005 	stb	r4,0(r2)
   178f4:	e0bff617 	ldw	r2,-40(fp)
   178f8:	e0bffa15 	stw	r2,-24(fp)
   178fc:	e0bffa17 	ldw	r2,-24(fp)
   17900:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   17904:	d0a73743 	ldbu	r2,-25379(gp)
   17908:	10803fcc 	andi	r2,r2,255
   1790c:	10800058 	cmpnei	r2,r2,1
   17910:	10000b1e 	bne	r2,zero,17940 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   17914:	00125000 	call	12500 <OS_Sched>
   17918:	00000906 	br	17940 <OSTaskResume+0x1a4>
   1791c:	e0bff617 	ldw	r2,-40(fp)
   17920:	e0bffb15 	stw	r2,-20(fp)
   17924:	e0bffb17 	ldw	r2,-20(fp)
   17928:	1001703a 	wrctl	status,r2
   1792c:	00000406 	br	17940 <OSTaskResume+0x1a4>
   17930:	e0bff617 	ldw	r2,-40(fp)
   17934:	e0bffc15 	stw	r2,-16(fp)
   17938:	e0bffc17 	ldw	r2,-16(fp)
   1793c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   17940:	0005883a 	mov	r2,zero
   17944:	00000506 	br	1795c <OSTaskResume+0x1c0>
   17948:	e0bff617 	ldw	r2,-40(fp)
   1794c:	e0bffd15 	stw	r2,-12(fp)
   17950:	e0bffd17 	ldw	r2,-12(fp)
   17954:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   17958:	00801104 	movi	r2,68
}
   1795c:	e037883a 	mov	sp,fp
   17960:	dfc00117 	ldw	ra,4(sp)
   17964:	df000017 	ldw	fp,0(sp)
   17968:	dec00204 	addi	sp,sp,8
   1796c:	f800283a 	ret

00017970 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   17970:	defff304 	addi	sp,sp,-52
   17974:	df000c15 	stw	fp,48(sp)
   17978:	df000c04 	addi	fp,sp,48
   1797c:	2005883a 	mov	r2,r4
   17980:	e17fff15 	stw	r5,-4(fp)
   17984:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   17988:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1798c:	e0bffe03 	ldbu	r2,-8(fp)
   17990:	10800570 	cmpltui	r2,r2,21
   17994:	1000051e 	bne	r2,zero,179ac <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   17998:	e0bffe03 	ldbu	r2,-8(fp)
   1799c:	10803fe0 	cmpeqi	r2,r2,255
   179a0:	1000021e 	bne	r2,zero,179ac <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   179a4:	00800a84 	movi	r2,42
   179a8:	00005d06 	br	17b20 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   179ac:	e0bfff17 	ldw	r2,-4(fp)
   179b0:	1000021e 	bne	r2,zero,179bc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   179b4:	00800244 	movi	r2,9
   179b8:	00005906 	br	17b20 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   179bc:	e0bfff17 	ldw	r2,-4(fp)
   179c0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   179c4:	e0bfff17 	ldw	r2,-4(fp)
   179c8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179cc:	0005303a 	rdctl	r2,status
   179d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179d4:	e0fffd17 	ldw	r3,-12(fp)
   179d8:	00bfff84 	movi	r2,-2
   179dc:	1884703a 	and	r2,r3,r2
   179e0:	1001703a 	wrctl	status,r2
  
  return context;
   179e4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   179e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   179ec:	e0bffe03 	ldbu	r2,-8(fp)
   179f0:	10803fd8 	cmpnei	r2,r2,255
   179f4:	1000031e 	bne	r2,zero,17a04 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   179f8:	d0a74617 	ldw	r2,-25320(gp)
   179fc:	10800c83 	ldbu	r2,50(r2)
   17a00:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17a04:	e0fffe03 	ldbu	r3,-8(fp)
   17a08:	008000f4 	movhi	r2,3
   17a0c:	10b3e904 	addi	r2,r2,-12380
   17a10:	18c7883a 	add	r3,r3,r3
   17a14:	18c7883a 	add	r3,r3,r3
   17a18:	10c5883a 	add	r2,r2,r3
   17a1c:	10800017 	ldw	r2,0(r2)
   17a20:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   17a24:	e0bff817 	ldw	r2,-32(fp)
   17a28:	1000061e 	bne	r2,zero,17a44 <OSTaskStkChk+0xd4>
   17a2c:	e0bff617 	ldw	r2,-40(fp)
   17a30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a34:	e0bff717 	ldw	r2,-36(fp)
   17a38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17a3c:	008010c4 	movi	r2,67
   17a40:	00003706 	br	17b20 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   17a44:	e0bff817 	ldw	r2,-32(fp)
   17a48:	10800058 	cmpnei	r2,r2,1
   17a4c:	1000061e 	bne	r2,zero,17a68 <OSTaskStkChk+0xf8>
   17a50:	e0bff617 	ldw	r2,-40(fp)
   17a54:	e0bff915 	stw	r2,-28(fp)
   17a58:	e0bff917 	ldw	r2,-28(fp)
   17a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17a60:	008010c4 	movi	r2,67
   17a64:	00002e06 	br	17b20 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   17a68:	e0bff817 	ldw	r2,-32(fp)
   17a6c:	1080040b 	ldhu	r2,16(r2)
   17a70:	10bfffcc 	andi	r2,r2,65535
   17a74:	1080004c 	andi	r2,r2,1
   17a78:	1000061e 	bne	r2,zero,17a94 <OSTaskStkChk+0x124>
   17a7c:	e0bff617 	ldw	r2,-40(fp)
   17a80:	e0bffa15 	stw	r2,-24(fp)
   17a84:	e0bffa17 	ldw	r2,-24(fp)
   17a88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   17a8c:	00801144 	movi	r2,69
   17a90:	00002306 	br	17b20 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   17a94:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   17a98:	e0bff817 	ldw	r2,-32(fp)
   17a9c:	10800317 	ldw	r2,12(r2)
   17aa0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   17aa4:	e0bff817 	ldw	r2,-32(fp)
   17aa8:	10800217 	ldw	r2,8(r2)
   17aac:	e0bff415 	stw	r2,-48(fp)
   17ab0:	e0bff617 	ldw	r2,-40(fp)
   17ab4:	e0bffb15 	stw	r2,-20(fp)
   17ab8:	e0bffb17 	ldw	r2,-20(fp)
   17abc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17ac0:	00000306 	br	17ad0 <OSTaskStkChk+0x160>
        nfree++;
   17ac4:	e0bff517 	ldw	r2,-44(fp)
   17ac8:	10800044 	addi	r2,r2,1
   17acc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   17ad0:	e0bff417 	ldw	r2,-48(fp)
   17ad4:	10c00104 	addi	r3,r2,4
   17ad8:	e0fff415 	stw	r3,-48(fp)
   17adc:	10800017 	ldw	r2,0(r2)
   17ae0:	103ff826 	beq	r2,zero,17ac4 <__alt_data_end+0xfffe6d84>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   17ae4:	e0bff517 	ldw	r2,-44(fp)
   17ae8:	1085883a 	add	r2,r2,r2
   17aec:	1085883a 	add	r2,r2,r2
   17af0:	1007883a 	mov	r3,r2
   17af4:	e0bfff17 	ldw	r2,-4(fp)
   17af8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   17afc:	e0fffc17 	ldw	r3,-16(fp)
   17b00:	e0bff517 	ldw	r2,-44(fp)
   17b04:	1885c83a 	sub	r2,r3,r2
   17b08:	1085883a 	add	r2,r2,r2
   17b0c:	1085883a 	add	r2,r2,r2
   17b10:	1007883a 	mov	r3,r2
   17b14:	e0bfff17 	ldw	r2,-4(fp)
   17b18:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   17b1c:	0005883a 	mov	r2,zero
}
   17b20:	e037883a 	mov	sp,fp
   17b24:	df000017 	ldw	fp,0(sp)
   17b28:	dec00104 	addi	sp,sp,4
   17b2c:	f800283a 	ret

00017b30 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   17b30:	defff504 	addi	sp,sp,-44
   17b34:	dfc00a15 	stw	ra,40(sp)
   17b38:	df000915 	stw	fp,36(sp)
   17b3c:	df000904 	addi	fp,sp,36
   17b40:	2005883a 	mov	r2,r4
   17b44:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17b48:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   17b4c:	e0bfff03 	ldbu	r2,-4(fp)
   17b50:	10800518 	cmpnei	r2,r2,20
   17b54:	1000021e 	bne	r2,zero,17b60 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   17b58:	008011c4 	movi	r2,71
   17b5c:	00006806 	br	17d00 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   17b60:	e0bfff03 	ldbu	r2,-4(fp)
   17b64:	10800530 	cmpltui	r2,r2,20
   17b68:	1000051e 	bne	r2,zero,17b80 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   17b6c:	e0bfff03 	ldbu	r2,-4(fp)
   17b70:	10803fe0 	cmpeqi	r2,r2,255
   17b74:	1000021e 	bne	r2,zero,17b80 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   17b78:	00800a84 	movi	r2,42
   17b7c:	00006006 	br	17d00 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17b80:	0005303a 	rdctl	r2,status
   17b84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17b88:	e0fffe17 	ldw	r3,-8(fp)
   17b8c:	00bfff84 	movi	r2,-2
   17b90:	1884703a 	and	r2,r3,r2
   17b94:	1001703a 	wrctl	status,r2
  
  return context;
   17b98:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   17b9c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   17ba0:	e0bfff03 	ldbu	r2,-4(fp)
   17ba4:	10803fd8 	cmpnei	r2,r2,255
   17ba8:	1000061e 	bne	r2,zero,17bc4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   17bac:	d0a74617 	ldw	r2,-25320(gp)
   17bb0:	10800c83 	ldbu	r2,50(r2)
   17bb4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   17bb8:	00800044 	movi	r2,1
   17bbc:	e0bff705 	stb	r2,-36(fp)
   17bc0:	00000906 	br	17be8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   17bc4:	d0a74617 	ldw	r2,-25320(gp)
   17bc8:	10800c83 	ldbu	r2,50(r2)
   17bcc:	10c03fcc 	andi	r3,r2,255
   17bd0:	e0bfff03 	ldbu	r2,-4(fp)
   17bd4:	1880031e 	bne	r3,r2,17be4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   17bd8:	00800044 	movi	r2,1
   17bdc:	e0bff705 	stb	r2,-36(fp)
   17be0:	00000106 	br	17be8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   17be4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17be8:	e0ffff03 	ldbu	r3,-4(fp)
   17bec:	008000f4 	movhi	r2,3
   17bf0:	10b3e904 	addi	r2,r2,-12380
   17bf4:	18c7883a 	add	r3,r3,r3
   17bf8:	18c7883a 	add	r3,r3,r3
   17bfc:	10c5883a 	add	r2,r2,r3
   17c00:	10800017 	ldw	r2,0(r2)
   17c04:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   17c08:	e0bffa17 	ldw	r2,-24(fp)
   17c0c:	1000061e 	bne	r2,zero,17c28 <OSTaskSuspend+0xf8>
   17c10:	e0bff817 	ldw	r2,-32(fp)
   17c14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c18:	e0bff917 	ldw	r2,-28(fp)
   17c1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   17c20:	00801204 	movi	r2,72
   17c24:	00003606 	br	17d00 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   17c28:	e0bffa17 	ldw	r2,-24(fp)
   17c2c:	10800058 	cmpnei	r2,r2,1
   17c30:	1000061e 	bne	r2,zero,17c4c <OSTaskSuspend+0x11c>
   17c34:	e0bff817 	ldw	r2,-32(fp)
   17c38:	e0bffb15 	stw	r2,-20(fp)
   17c3c:	e0bffb17 	ldw	r2,-20(fp)
   17c40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17c44:	008010c4 	movi	r2,67
   17c48:	00002d06 	br	17d00 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   17c4c:	e0bffa17 	ldw	r2,-24(fp)
   17c50:	10800d03 	ldbu	r2,52(r2)
   17c54:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   17c58:	e0fffd03 	ldbu	r3,-12(fp)
   17c5c:	e13ffd03 	ldbu	r4,-12(fp)
   17c60:	d0a74344 	addi	r2,gp,-25331
   17c64:	2085883a 	add	r2,r4,r2
   17c68:	10800003 	ldbu	r2,0(r2)
   17c6c:	1009883a 	mov	r4,r2
   17c70:	e0bffa17 	ldw	r2,-24(fp)
   17c74:	10800d43 	ldbu	r2,53(r2)
   17c78:	0084303a 	nor	r2,zero,r2
   17c7c:	2084703a 	and	r2,r4,r2
   17c80:	1009883a 	mov	r4,r2
   17c84:	d0a74344 	addi	r2,gp,-25331
   17c88:	1885883a 	add	r2,r3,r2
   17c8c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   17c90:	e0fffd03 	ldbu	r3,-12(fp)
   17c94:	d0a74344 	addi	r2,gp,-25331
   17c98:	1885883a 	add	r2,r3,r2
   17c9c:	10800003 	ldbu	r2,0(r2)
   17ca0:	10803fcc 	andi	r2,r2,255
   17ca4:	1000071e 	bne	r2,zero,17cc4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   17ca8:	e0bffa17 	ldw	r2,-24(fp)
   17cac:	10800d83 	ldbu	r2,54(r2)
   17cb0:	0084303a 	nor	r2,zero,r2
   17cb4:	1007883a 	mov	r3,r2
   17cb8:	d0a74303 	ldbu	r2,-25332(gp)
   17cbc:	1884703a 	and	r2,r3,r2
   17cc0:	d0a74305 	stb	r2,-25332(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   17cc4:	e0bffa17 	ldw	r2,-24(fp)
   17cc8:	10800c03 	ldbu	r2,48(r2)
   17ccc:	10800214 	ori	r2,r2,8
   17cd0:	1007883a 	mov	r3,r2
   17cd4:	e0bffa17 	ldw	r2,-24(fp)
   17cd8:	10c00c05 	stb	r3,48(r2)
   17cdc:	e0bff817 	ldw	r2,-32(fp)
   17ce0:	e0bffc15 	stw	r2,-16(fp)
   17ce4:	e0bffc17 	ldw	r2,-16(fp)
   17ce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   17cec:	e0bff703 	ldbu	r2,-36(fp)
   17cf0:	10800058 	cmpnei	r2,r2,1
   17cf4:	1000011e 	bne	r2,zero,17cfc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   17cf8:	00125000 	call	12500 <OS_Sched>
    }
    return (OS_ERR_NONE);
   17cfc:	0005883a 	mov	r2,zero
}
   17d00:	e037883a 	mov	sp,fp
   17d04:	dfc00117 	ldw	ra,4(sp)
   17d08:	df000017 	ldw	fp,0(sp)
   17d0c:	dec00204 	addi	sp,sp,8
   17d10:	f800283a 	ret

00017d14 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   17d14:	defff604 	addi	sp,sp,-40
   17d18:	dfc00915 	stw	ra,36(sp)
   17d1c:	df000815 	stw	fp,32(sp)
   17d20:	df000804 	addi	fp,sp,32
   17d24:	2005883a 	mov	r2,r4
   17d28:	e17fff15 	stw	r5,-4(fp)
   17d2c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17d30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   17d34:	e0bffe03 	ldbu	r2,-8(fp)
   17d38:	10800570 	cmpltui	r2,r2,21
   17d3c:	1000051e 	bne	r2,zero,17d54 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   17d40:	e0bffe03 	ldbu	r2,-8(fp)
   17d44:	10803fe0 	cmpeqi	r2,r2,255
   17d48:	1000021e 	bne	r2,zero,17d54 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   17d4c:	00800a84 	movi	r2,42
   17d50:	00003406 	br	17e24 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   17d54:	e0bfff17 	ldw	r2,-4(fp)
   17d58:	1000021e 	bne	r2,zero,17d64 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   17d5c:	00800244 	movi	r2,9
   17d60:	00003006 	br	17e24 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d64:	0005303a 	rdctl	r2,status
   17d68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d6c:	e0fffd17 	ldw	r3,-12(fp)
   17d70:	00bfff84 	movi	r2,-2
   17d74:	1884703a 	and	r2,r3,r2
   17d78:	1001703a 	wrctl	status,r2
  
  return context;
   17d7c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17d80:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   17d84:	e0bffe03 	ldbu	r2,-8(fp)
   17d88:	10803fd8 	cmpnei	r2,r2,255
   17d8c:	1000031e 	bne	r2,zero,17d9c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   17d90:	d0a74617 	ldw	r2,-25320(gp)
   17d94:	10800c83 	ldbu	r2,50(r2)
   17d98:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   17d9c:	e0fffe03 	ldbu	r3,-8(fp)
   17da0:	008000f4 	movhi	r2,3
   17da4:	10b3e904 	addi	r2,r2,-12380
   17da8:	18c7883a 	add	r3,r3,r3
   17dac:	18c7883a 	add	r3,r3,r3
   17db0:	10c5883a 	add	r2,r2,r3
   17db4:	10800017 	ldw	r2,0(r2)
   17db8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   17dbc:	e0bffa17 	ldw	r2,-24(fp)
   17dc0:	1000061e 	bne	r2,zero,17ddc <OSTaskQuery+0xc8>
   17dc4:	e0bff817 	ldw	r2,-32(fp)
   17dc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17dcc:	e0bff917 	ldw	r2,-28(fp)
   17dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   17dd4:	00800a44 	movi	r2,41
   17dd8:	00001206 	br	17e24 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   17ddc:	e0bffa17 	ldw	r2,-24(fp)
   17de0:	10800058 	cmpnei	r2,r2,1
   17de4:	1000061e 	bne	r2,zero,17e00 <OSTaskQuery+0xec>
   17de8:	e0bff817 	ldw	r2,-32(fp)
   17dec:	e0bffb15 	stw	r2,-20(fp)
   17df0:	e0bffb17 	ldw	r2,-20(fp)
   17df4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   17df8:	008010c4 	movi	r2,67
   17dfc:	00000906 	br	17e24 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   17e00:	01801b04 	movi	r6,108
   17e04:	e17ffa17 	ldw	r5,-24(fp)
   17e08:	e13fff17 	ldw	r4,-4(fp)
   17e0c:	00124980 	call	12498 <OS_MemCopy>
   17e10:	e0bff817 	ldw	r2,-32(fp)
   17e14:	e0bffc15 	stw	r2,-16(fp)
   17e18:	e0bffc17 	ldw	r2,-16(fp)
   17e1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   17e20:	0005883a 	mov	r2,zero
}
   17e24:	e037883a 	mov	sp,fp
   17e28:	dfc00117 	ldw	ra,4(sp)
   17e2c:	df000017 	ldw	fp,0(sp)
   17e30:	dec00204 	addi	sp,sp,8
   17e34:	f800283a 	ret

00017e38 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   17e38:	defffc04 	addi	sp,sp,-16
   17e3c:	df000315 	stw	fp,12(sp)
   17e40:	df000304 	addi	fp,sp,12
   17e44:	e13ffd15 	stw	r4,-12(fp)
   17e48:	e17ffe15 	stw	r5,-8(fp)
   17e4c:	3005883a 	mov	r2,r6
   17e50:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   17e54:	e0bfff0b 	ldhu	r2,-4(fp)
   17e58:	1080004c 	andi	r2,r2,1
   17e5c:	10000d26 	beq	r2,zero,17e94 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   17e60:	e0bfff0b 	ldhu	r2,-4(fp)
   17e64:	1080008c 	andi	r2,r2,2
   17e68:	10000a26 	beq	r2,zero,17e94 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17e6c:	00000706 	br	17e8c <OS_TaskStkClr+0x54>
                size--;
   17e70:	e0bffe17 	ldw	r2,-8(fp)
   17e74:	10bfffc4 	addi	r2,r2,-1
   17e78:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   17e7c:	e0bffd17 	ldw	r2,-12(fp)
   17e80:	10c00104 	addi	r3,r2,4
   17e84:	e0fffd15 	stw	r3,-12(fp)
   17e88:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   17e8c:	e0bffe17 	ldw	r2,-8(fp)
   17e90:	103ff71e 	bne	r2,zero,17e70 <__alt_data_end+0xfffe7130>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   17e94:	0001883a 	nop
   17e98:	e037883a 	mov	sp,fp
   17e9c:	df000017 	ldw	fp,0(sp)
   17ea0:	dec00104 	addi	sp,sp,4
   17ea4:	f800283a 	ret

00017ea8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   17ea8:	defff904 	addi	sp,sp,-28
   17eac:	dfc00615 	stw	ra,24(sp)
   17eb0:	df000515 	stw	fp,20(sp)
   17eb4:	df000504 	addi	fp,sp,20
   17eb8:	2005883a 	mov	r2,r4
   17ebc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17ec0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17ec4:	d0a74503 	ldbu	r2,-25324(gp)
   17ec8:	10803fcc 	andi	r2,r2,255
   17ecc:	1000311e 	bne	r2,zero,17f94 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   17ed0:	e0bfff0b 	ldhu	r2,-4(fp)
   17ed4:	10003026 	beq	r2,zero,17f98 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ed8:	0005303a 	rdctl	r2,status
   17edc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ee0:	e0fffe17 	ldw	r3,-8(fp)
   17ee4:	00bfff84 	movi	r2,-2
   17ee8:	1884703a 	and	r2,r3,r2
   17eec:	1001703a 	wrctl	status,r2
  
  return context;
   17ef0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   17ef4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   17ef8:	d0a74617 	ldw	r2,-25320(gp)
   17efc:	10800d03 	ldbu	r2,52(r2)
   17f00:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   17f04:	e0fffd03 	ldbu	r3,-12(fp)
   17f08:	e13ffd03 	ldbu	r4,-12(fp)
   17f0c:	d0a74344 	addi	r2,gp,-25331
   17f10:	2085883a 	add	r2,r4,r2
   17f14:	10800003 	ldbu	r2,0(r2)
   17f18:	1009883a 	mov	r4,r2
   17f1c:	d0a74617 	ldw	r2,-25320(gp)
   17f20:	10800d43 	ldbu	r2,53(r2)
   17f24:	0084303a 	nor	r2,zero,r2
   17f28:	2084703a 	and	r2,r4,r2
   17f2c:	1009883a 	mov	r4,r2
   17f30:	d0a74344 	addi	r2,gp,-25331
   17f34:	1885883a 	add	r2,r3,r2
   17f38:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   17f3c:	e0fffd03 	ldbu	r3,-12(fp)
   17f40:	d0a74344 	addi	r2,gp,-25331
   17f44:	1885883a 	add	r2,r3,r2
   17f48:	10800003 	ldbu	r2,0(r2)
   17f4c:	10803fcc 	andi	r2,r2,255
   17f50:	1000071e 	bne	r2,zero,17f70 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   17f54:	d0a74617 	ldw	r2,-25320(gp)
   17f58:	10800d83 	ldbu	r2,54(r2)
   17f5c:	0084303a 	nor	r2,zero,r2
   17f60:	1007883a 	mov	r3,r2
   17f64:	d0a74303 	ldbu	r2,-25332(gp)
   17f68:	1884703a 	and	r2,r3,r2
   17f6c:	d0a74305 	stb	r2,-25332(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   17f70:	d0a74617 	ldw	r2,-25320(gp)
   17f74:	e0ffff0b 	ldhu	r3,-4(fp)
   17f78:	10c00b8d 	sth	r3,46(r2)
   17f7c:	e0bffb17 	ldw	r2,-20(fp)
   17f80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f84:	e0bffc17 	ldw	r2,-16(fp)
   17f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   17f8c:	00125000 	call	12500 <OS_Sched>
   17f90:	00000106 	br	17f98 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   17f94:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   17f98:	e037883a 	mov	sp,fp
   17f9c:	dfc00117 	ldw	ra,4(sp)
   17fa0:	df000017 	ldw	fp,0(sp)
   17fa4:	dec00204 	addi	sp,sp,8
   17fa8:	f800283a 	ret

00017fac <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   17fac:	defff704 	addi	sp,sp,-36
   17fb0:	dfc00815 	stw	ra,32(sp)
   17fb4:	df000715 	stw	fp,28(sp)
   17fb8:	dc000615 	stw	r16,24(sp)
   17fbc:	df000704 	addi	fp,sp,28
   17fc0:	2011883a 	mov	r8,r4
   17fc4:	2809883a 	mov	r4,r5
   17fc8:	3007883a 	mov	r3,r6
   17fcc:	3805883a 	mov	r2,r7
   17fd0:	e23ffb05 	stb	r8,-20(fp)
   17fd4:	e13ffc05 	stb	r4,-16(fp)
   17fd8:	e0fffd05 	stb	r3,-12(fp)
   17fdc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17fe0:	d0a74503 	ldbu	r2,-25324(gp)
   17fe4:	10803fcc 	andi	r2,r2,255
   17fe8:	10000226 	beq	r2,zero,17ff4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
   17fec:	00801544 	movi	r2,85
   17ff0:	00004706 	br	18110 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   17ff4:	e0bffb03 	ldbu	r2,-20(fp)
   17ff8:	1000081e 	bne	r2,zero,1801c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
   17ffc:	e0bffc03 	ldbu	r2,-16(fp)
   18000:	1000061e 	bne	r2,zero,1801c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
   18004:	e0bffd03 	ldbu	r2,-12(fp)
   18008:	1000041e 	bne	r2,zero,1801c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
   1800c:	e0bffe0b 	ldhu	r2,-8(fp)
   18010:	1000021e 	bne	r2,zero,1801c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
   18014:	00801504 	movi	r2,84
   18018:	00003d06 	br	18110 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
   1801c:	e0bffc03 	ldbu	r2,-16(fp)
   18020:	10800f30 	cmpltui	r2,r2,60
   18024:	1000021e 	bne	r2,zero,18030 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   18028:	00801444 	movi	r2,81
   1802c:	00003806 	br	18110 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
   18030:	e0bffd03 	ldbu	r2,-12(fp)
   18034:	10800f30 	cmpltui	r2,r2,60
   18038:	1000021e 	bne	r2,zero,18044 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1803c:	00801484 	movi	r2,82
   18040:	00003306 	br	18110 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
   18044:	e0bffe0b 	ldhu	r2,-8(fp)
   18048:	1080fa30 	cmpltui	r2,r2,1000
   1804c:	1000021e 	bne	r2,zero,18058 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
   18050:	008014c4 	movi	r2,83
   18054:	00002e06 	br	18110 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   18058:	e0bffb03 	ldbu	r2,-20(fp)
   1805c:	01438404 	movi	r5,3600
   18060:	1009883a 	mov	r4,r2
   18064:	0002f440 	call	2f44 <__mulsi3>
   18068:	1021883a 	mov	r16,r2
   1806c:	e0bffc03 	ldbu	r2,-16(fp)
   18070:	01400f04 	movi	r5,60
   18074:	1009883a 	mov	r4,r2
   18078:	0002f440 	call	2f44 <__mulsi3>
   1807c:	8087883a 	add	r3,r16,r2
   18080:	e0bffd03 	ldbu	r2,-12(fp)
   18084:	1885883a 	add	r2,r3,r2
   18088:	0140fa04 	movi	r5,1000
   1808c:	1009883a 	mov	r4,r2
   18090:	0002f440 	call	2f44 <__mulsi3>
   18094:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   18098:	e0bffe0b 	ldhu	r2,-8(fp)
   1809c:	0140fa04 	movi	r5,1000
   180a0:	1009883a 	mov	r4,r2
   180a4:	0002f440 	call	2f44 <__mulsi3>
   180a8:	0140fa04 	movi	r5,1000
   180ac:	1009883a 	mov	r4,r2
   180b0:	0002e880 	call	2e88 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   180b4:	8085883a 	add	r2,r16,r2
   180b8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   180bc:	e0bffa17 	ldw	r2,-24(fp)
   180c0:	1004d43a 	srli	r2,r2,16
   180c4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   180c8:	e0bffa17 	ldw	r2,-24(fp)
   180cc:	10bfffcc 	andi	r2,r2,65535
   180d0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
   180d4:	e0bffa17 	ldw	r2,-24(fp)
   180d8:	10bfffcc 	andi	r2,r2,65535
   180dc:	1009883a 	mov	r4,r2
   180e0:	0017ea80 	call	17ea8 <OSTimeDly>
    while (loops > 0) {
   180e4:	00000706 	br	18104 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
   180e8:	01200014 	movui	r4,32768
   180ec:	0017ea80 	call	17ea8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   180f0:	01200014 	movui	r4,32768
   180f4:	0017ea80 	call	17ea8 <OSTimeDly>
        loops--;
   180f8:	e0bff90b 	ldhu	r2,-28(fp)
   180fc:	10bfffc4 	addi	r2,r2,-1
   18100:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   18104:	e0bff90b 	ldhu	r2,-28(fp)
   18108:	103ff71e 	bne	r2,zero,180e8 <__alt_data_end+0xfffe73a8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1810c:	0005883a 	mov	r2,zero
}
   18110:	e6ffff04 	addi	sp,fp,-4
   18114:	dfc00217 	ldw	ra,8(sp)
   18118:	df000117 	ldw	fp,4(sp)
   1811c:	dc000017 	ldw	r16,0(sp)
   18120:	dec00304 	addi	sp,sp,12
   18124:	f800283a 	ret

00018128 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   18128:	defff504 	addi	sp,sp,-44
   1812c:	dfc00a15 	stw	ra,40(sp)
   18130:	df000915 	stw	fp,36(sp)
   18134:	df000904 	addi	fp,sp,36
   18138:	2005883a 	mov	r2,r4
   1813c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18140:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   18144:	e0bfff03 	ldbu	r2,-4(fp)
   18148:	10800530 	cmpltui	r2,r2,20
   1814c:	1000021e 	bne	r2,zero,18158 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   18150:	00800a84 	movi	r2,42
   18154:	00006406 	br	182e8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18158:	0005303a 	rdctl	r2,status
   1815c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18160:	e0fffe17 	ldw	r3,-8(fp)
   18164:	00bfff84 	movi	r2,-2
   18168:	1884703a 	and	r2,r3,r2
   1816c:	1001703a 	wrctl	status,r2
  
  return context;
   18170:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18174:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   18178:	e0ffff03 	ldbu	r3,-4(fp)
   1817c:	008000f4 	movhi	r2,3
   18180:	10b3e904 	addi	r2,r2,-12380
   18184:	18c7883a 	add	r3,r3,r3
   18188:	18c7883a 	add	r3,r3,r3
   1818c:	10c5883a 	add	r2,r2,r3
   18190:	10800017 	ldw	r2,0(r2)
   18194:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   18198:	e0bff917 	ldw	r2,-28(fp)
   1819c:	1000061e 	bne	r2,zero,181b8 <OSTimeDlyResume+0x90>
   181a0:	e0bff717 	ldw	r2,-36(fp)
   181a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   181a8:	e0bff817 	ldw	r2,-32(fp)
   181ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   181b0:	008010c4 	movi	r2,67
   181b4:	00004c06 	br	182e8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   181b8:	e0bff917 	ldw	r2,-28(fp)
   181bc:	10800058 	cmpnei	r2,r2,1
   181c0:	1000061e 	bne	r2,zero,181dc <OSTimeDlyResume+0xb4>
   181c4:	e0bff717 	ldw	r2,-36(fp)
   181c8:	e0bffa15 	stw	r2,-24(fp)
   181cc:	e0bffa17 	ldw	r2,-24(fp)
   181d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   181d4:	008010c4 	movi	r2,67
   181d8:	00004306 	br	182e8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   181dc:	e0bff917 	ldw	r2,-28(fp)
   181e0:	10800b8b 	ldhu	r2,46(r2)
   181e4:	10bfffcc 	andi	r2,r2,65535
   181e8:	1000061e 	bne	r2,zero,18204 <OSTimeDlyResume+0xdc>
   181ec:	e0bff717 	ldw	r2,-36(fp)
   181f0:	e0bffb15 	stw	r2,-20(fp)
   181f4:	e0bffb17 	ldw	r2,-20(fp)
   181f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   181fc:	00801404 	movi	r2,80
   18200:	00003906 	br	182e8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   18204:	e0bff917 	ldw	r2,-28(fp)
   18208:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1820c:	e0bff917 	ldw	r2,-28(fp)
   18210:	10800c03 	ldbu	r2,48(r2)
   18214:	10803fcc 	andi	r2,r2,255
   18218:	10800dcc 	andi	r2,r2,55
   1821c:	10000b26 	beq	r2,zero,1824c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   18220:	e0bff917 	ldw	r2,-28(fp)
   18224:	10c00c03 	ldbu	r3,48(r2)
   18228:	00bff204 	movi	r2,-56
   1822c:	1884703a 	and	r2,r3,r2
   18230:	1007883a 	mov	r3,r2
   18234:	e0bff917 	ldw	r2,-28(fp)
   18238:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1823c:	e0bff917 	ldw	r2,-28(fp)
   18240:	00c00044 	movi	r3,1
   18244:	10c00c45 	stb	r3,49(r2)
   18248:	00000206 	br	18254 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1824c:	e0bff917 	ldw	r2,-28(fp)
   18250:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   18254:	e0bff917 	ldw	r2,-28(fp)
   18258:	10800c03 	ldbu	r2,48(r2)
   1825c:	10803fcc 	andi	r2,r2,255
   18260:	1080020c 	andi	r2,r2,8
   18264:	10001b1e 	bne	r2,zero,182d4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   18268:	e0bff917 	ldw	r2,-28(fp)
   1826c:	10c00d83 	ldbu	r3,54(r2)
   18270:	d0a74303 	ldbu	r2,-25332(gp)
   18274:	1884b03a 	or	r2,r3,r2
   18278:	d0a74305 	stb	r2,-25332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1827c:	e0bff917 	ldw	r2,-28(fp)
   18280:	10800d03 	ldbu	r2,52(r2)
   18284:	10c03fcc 	andi	r3,r2,255
   18288:	e0bff917 	ldw	r2,-28(fp)
   1828c:	10800d03 	ldbu	r2,52(r2)
   18290:	11003fcc 	andi	r4,r2,255
   18294:	d0a74344 	addi	r2,gp,-25331
   18298:	2085883a 	add	r2,r4,r2
   1829c:	11000003 	ldbu	r4,0(r2)
   182a0:	e0bff917 	ldw	r2,-28(fp)
   182a4:	10800d43 	ldbu	r2,53(r2)
   182a8:	2084b03a 	or	r2,r4,r2
   182ac:	1009883a 	mov	r4,r2
   182b0:	d0a74344 	addi	r2,gp,-25331
   182b4:	1885883a 	add	r2,r3,r2
   182b8:	11000005 	stb	r4,0(r2)
   182bc:	e0bff717 	ldw	r2,-36(fp)
   182c0:	e0bffc15 	stw	r2,-16(fp)
   182c4:	e0bffc17 	ldw	r2,-16(fp)
   182c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   182cc:	00125000 	call	12500 <OS_Sched>
   182d0:	00000406 	br	182e4 <OSTimeDlyResume+0x1bc>
   182d4:	e0bff717 	ldw	r2,-36(fp)
   182d8:	e0bffd15 	stw	r2,-12(fp)
   182dc:	e0bffd17 	ldw	r2,-12(fp)
   182e0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   182e4:	0005883a 	mov	r2,zero
}
   182e8:	e037883a 	mov	sp,fp
   182ec:	dfc00117 	ldw	ra,4(sp)
   182f0:	df000017 	ldw	fp,0(sp)
   182f4:	dec00204 	addi	sp,sp,8
   182f8:	f800283a 	ret

000182fc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   182fc:	defffb04 	addi	sp,sp,-20
   18300:	df000415 	stw	fp,16(sp)
   18304:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18308:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1830c:	0005303a 	rdctl	r2,status
   18310:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18314:	e0fffe17 	ldw	r3,-8(fp)
   18318:	00bfff84 	movi	r2,-2
   1831c:	1884703a 	and	r2,r3,r2
   18320:	1001703a 	wrctl	status,r2
  
  return context;
   18324:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   18328:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1832c:	d0a74717 	ldw	r2,-25316(gp)
   18330:	e0bffd15 	stw	r2,-12(fp)
   18334:	e0bffc17 	ldw	r2,-16(fp)
   18338:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1833c:	e0bfff17 	ldw	r2,-4(fp)
   18340:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   18344:	e0bffd17 	ldw	r2,-12(fp)
}
   18348:	e037883a 	mov	sp,fp
   1834c:	df000017 	ldw	fp,0(sp)
   18350:	dec00104 	addi	sp,sp,4
   18354:	f800283a 	ret

00018358 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   18358:	defffb04 	addi	sp,sp,-20
   1835c:	df000415 	stw	fp,16(sp)
   18360:	df000404 	addi	fp,sp,16
   18364:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18368:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1836c:	0005303a 	rdctl	r2,status
   18370:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18374:	e0fffd17 	ldw	r3,-12(fp)
   18378:	00bfff84 	movi	r2,-2
   1837c:	1884703a 	and	r2,r3,r2
   18380:	1001703a 	wrctl	status,r2
  
  return context;
   18384:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   18388:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1838c:	e0bfff17 	ldw	r2,-4(fp)
   18390:	d0a74715 	stw	r2,-25316(gp)
   18394:	e0bffc17 	ldw	r2,-16(fp)
   18398:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1839c:	e0bffe17 	ldw	r2,-8(fp)
   183a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   183a4:	0001883a 	nop
   183a8:	e037883a 	mov	sp,fp
   183ac:	df000017 	ldw	fp,0(sp)
   183b0:	dec00104 	addi	sp,sp,4
   183b4:	f800283a 	ret

000183b8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   183b8:	defffd04 	addi	sp,sp,-12
   183bc:	dfc00215 	stw	ra,8(sp)
   183c0:	df000115 	stw	fp,4(sp)
   183c4:	df000104 	addi	fp,sp,4
   183c8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   183cc:	d1600904 	addi	r5,gp,-32732
   183d0:	e13fff17 	ldw	r4,-4(fp)
   183d4:	0019be40 	call	19be4 <alt_dev_llist_insert>
}
   183d8:	e037883a 	mov	sp,fp
   183dc:	dfc00117 	ldw	ra,4(sp)
   183e0:	df000017 	ldw	fp,0(sp)
   183e4:	dec00204 	addi	sp,sp,8
   183e8:	f800283a 	ret

000183ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   183ec:	defffd04 	addi	sp,sp,-12
   183f0:	dfc00215 	stw	ra,8(sp)
   183f4:	df000115 	stw	fp,4(sp)
   183f8:	df000104 	addi	fp,sp,4
   183fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   18400:	001a5000 	call	1a500 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   18404:	00800044 	movi	r2,1
   18408:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1840c:	0001883a 	nop
   18410:	e037883a 	mov	sp,fp
   18414:	dfc00117 	ldw	ra,4(sp)
   18418:	df000017 	ldw	fp,0(sp)
   1841c:	dec00204 	addi	sp,sp,8
   18420:	f800283a 	ret

00018424 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   18424:	defffe04 	addi	sp,sp,-8
   18428:	dfc00115 	stw	ra,4(sp)
   1842c:	df000015 	stw	fp,0(sp)
   18430:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   18434:	01c0fa04 	movi	r7,1000
   18438:	01800284 	movi	r6,10
   1843c:	000b883a 	mov	r5,zero
   18440:	01000134 	movhi	r4,4
   18444:	21080804 	addi	r4,r4,8224
   18448:	00192400 	call	19240 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   1844c:	01800204 	movi	r6,8
   18450:	000b883a 	mov	r5,zero
   18454:	010000b4 	movhi	r4,2
   18458:	2139f304 	addi	r4,r4,-6196
   1845c:	00186040 	call	18604 <altera_avalon_jtag_uart_init>
   18460:	010000b4 	movhi	r4,2
   18464:	2139e904 	addi	r4,r4,-6236
   18468:	00183b80 	call	183b8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   1846c:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_VIDEO_CONFIG, audio_video_config);
   18470:	010000b4 	movhi	r4,2
   18474:	213e0404 	addi	r4,r4,-2032
   18478:	00183b80 	call	183b8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
   1847c:	010000b4 	movhi	r4,2
   18480:	213e1004 	addi	r4,r4,-1984
   18484:	00183b80 	call	183b8 <alt_dev_reg>
}
   18488:	0001883a 	nop
   1848c:	e037883a 	mov	sp,fp
   18490:	dfc00117 	ldw	ra,4(sp)
   18494:	df000017 	ldw	fp,0(sp)
   18498:	dec00204 	addi	sp,sp,8
   1849c:	f800283a 	ret

000184a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   184a0:	defffa04 	addi	sp,sp,-24
   184a4:	dfc00515 	stw	ra,20(sp)
   184a8:	df000415 	stw	fp,16(sp)
   184ac:	df000404 	addi	fp,sp,16
   184b0:	e13ffd15 	stw	r4,-12(fp)
   184b4:	e17ffe15 	stw	r5,-8(fp)
   184b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   184bc:	e0bffd17 	ldw	r2,-12(fp)
   184c0:	10800017 	ldw	r2,0(r2)
   184c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   184c8:	e0bffc17 	ldw	r2,-16(fp)
   184cc:	10c00a04 	addi	r3,r2,40
   184d0:	e0bffd17 	ldw	r2,-12(fp)
   184d4:	10800217 	ldw	r2,8(r2)
   184d8:	100f883a 	mov	r7,r2
   184dc:	e1bfff17 	ldw	r6,-4(fp)
   184e0:	e17ffe17 	ldw	r5,-8(fp)
   184e4:	1809883a 	mov	r4,r3
   184e8:	0018c440 	call	18c44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   184ec:	e037883a 	mov	sp,fp
   184f0:	dfc00117 	ldw	ra,4(sp)
   184f4:	df000017 	ldw	fp,0(sp)
   184f8:	dec00204 	addi	sp,sp,8
   184fc:	f800283a 	ret

00018500 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   18500:	defffa04 	addi	sp,sp,-24
   18504:	dfc00515 	stw	ra,20(sp)
   18508:	df000415 	stw	fp,16(sp)
   1850c:	df000404 	addi	fp,sp,16
   18510:	e13ffd15 	stw	r4,-12(fp)
   18514:	e17ffe15 	stw	r5,-8(fp)
   18518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1851c:	e0bffd17 	ldw	r2,-12(fp)
   18520:	10800017 	ldw	r2,0(r2)
   18524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   18528:	e0bffc17 	ldw	r2,-16(fp)
   1852c:	10c00a04 	addi	r3,r2,40
   18530:	e0bffd17 	ldw	r2,-12(fp)
   18534:	10800217 	ldw	r2,8(r2)
   18538:	100f883a 	mov	r7,r2
   1853c:	e1bfff17 	ldw	r6,-4(fp)
   18540:	e17ffe17 	ldw	r5,-8(fp)
   18544:	1809883a 	mov	r4,r3
   18548:	0018f000 	call	18f00 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1854c:	e037883a 	mov	sp,fp
   18550:	dfc00117 	ldw	ra,4(sp)
   18554:	df000017 	ldw	fp,0(sp)
   18558:	dec00204 	addi	sp,sp,8
   1855c:	f800283a 	ret

00018560 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   18560:	defffc04 	addi	sp,sp,-16
   18564:	dfc00315 	stw	ra,12(sp)
   18568:	df000215 	stw	fp,8(sp)
   1856c:	df000204 	addi	fp,sp,8
   18570:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   18574:	e0bfff17 	ldw	r2,-4(fp)
   18578:	10800017 	ldw	r2,0(r2)
   1857c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   18580:	e0bffe17 	ldw	r2,-8(fp)
   18584:	10c00a04 	addi	r3,r2,40
   18588:	e0bfff17 	ldw	r2,-4(fp)
   1858c:	10800217 	ldw	r2,8(r2)
   18590:	100b883a 	mov	r5,r2
   18594:	1809883a 	mov	r4,r3
   18598:	0018aec0 	call	18aec <altera_avalon_jtag_uart_close>
}
   1859c:	e037883a 	mov	sp,fp
   185a0:	dfc00117 	ldw	ra,4(sp)
   185a4:	df000017 	ldw	fp,0(sp)
   185a8:	dec00204 	addi	sp,sp,8
   185ac:	f800283a 	ret

000185b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   185b0:	defffa04 	addi	sp,sp,-24
   185b4:	dfc00515 	stw	ra,20(sp)
   185b8:	df000415 	stw	fp,16(sp)
   185bc:	df000404 	addi	fp,sp,16
   185c0:	e13ffd15 	stw	r4,-12(fp)
   185c4:	e17ffe15 	stw	r5,-8(fp)
   185c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   185cc:	e0bffd17 	ldw	r2,-12(fp)
   185d0:	10800017 	ldw	r2,0(r2)
   185d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   185d8:	e0bffc17 	ldw	r2,-16(fp)
   185dc:	10800a04 	addi	r2,r2,40
   185e0:	e1bfff17 	ldw	r6,-4(fp)
   185e4:	e17ffe17 	ldw	r5,-8(fp)
   185e8:	1009883a 	mov	r4,r2
   185ec:	0018b540 	call	18b54 <altera_avalon_jtag_uart_ioctl>
}
   185f0:	e037883a 	mov	sp,fp
   185f4:	dfc00117 	ldw	ra,4(sp)
   185f8:	df000017 	ldw	fp,0(sp)
   185fc:	dec00204 	addi	sp,sp,8
   18600:	f800283a 	ret

00018604 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   18604:	defff204 	addi	sp,sp,-56
   18608:	dfc00d15 	stw	ra,52(sp)
   1860c:	df000c15 	stw	fp,48(sp)
   18610:	df000c04 	addi	fp,sp,48
   18614:	e13ff915 	stw	r4,-28(fp)
   18618:	e17ffa15 	stw	r5,-24(fp)
   1861c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   18620:	e0bff917 	ldw	r2,-28(fp)
   18624:	10800c04 	addi	r2,r2,48
   18628:	e0bff415 	stw	r2,-48(fp)
   1862c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   18630:	e0bff80b 	ldhu	r2,-32(fp)
   18634:	e0fff884 	addi	r3,fp,-30
   18638:	180b883a 	mov	r5,r3
   1863c:	1009883a 	mov	r4,r2
   18640:	001306c0 	call	1306c <OSFlagCreate>
   18644:	1007883a 	mov	r3,r2
   18648:	e0bff417 	ldw	r2,-48(fp)
   1864c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   18650:	e0bff917 	ldw	r2,-28(fp)
   18654:	10800a04 	addi	r2,r2,40
   18658:	e0bff515 	stw	r2,-44(fp)
   1865c:	00800044 	movi	r2,1
   18660:	e0bff78d 	sth	r2,-34(fp)
   18664:	e0bff78b 	ldhu	r2,-34(fp)
   18668:	1009883a 	mov	r4,r2
   1866c:	0015d8c0 	call	15d8c <OSSemCreate>
   18670:	1007883a 	mov	r3,r2
   18674:	e0bff517 	ldw	r2,-44(fp)
   18678:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1867c:	e0bff917 	ldw	r2,-28(fp)
   18680:	10800b04 	addi	r2,r2,44
   18684:	e0bff615 	stw	r2,-40(fp)
   18688:	00800044 	movi	r2,1
   1868c:	e0bff70d 	sth	r2,-36(fp)
   18690:	e0bff70b 	ldhu	r2,-36(fp)
   18694:	1009883a 	mov	r4,r2
   18698:	0015d8c0 	call	15d8c <OSSemCreate>
   1869c:	1007883a 	mov	r3,r2
   186a0:	e0bff617 	ldw	r2,-40(fp)
   186a4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   186a8:	e0bff917 	ldw	r2,-28(fp)
   186ac:	00c00044 	movi	r3,1
   186b0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   186b4:	e0bff917 	ldw	r2,-28(fp)
   186b8:	10800017 	ldw	r2,0(r2)
   186bc:	10800104 	addi	r2,r2,4
   186c0:	1007883a 	mov	r3,r2
   186c4:	e0bff917 	ldw	r2,-28(fp)
   186c8:	10800817 	ldw	r2,32(r2)
   186cc:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   186d0:	e0bffb17 	ldw	r2,-20(fp)
   186d4:	018000b4 	movhi	r6,2
   186d8:	31a1d004 	addi	r6,r6,-30912
   186dc:	e17ff917 	ldw	r5,-28(fp)
   186e0:	1009883a 	mov	r4,r2
   186e4:	0019f580 	call	19f58 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   186e8:	e0bff917 	ldw	r2,-28(fp)
   186ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   186f0:	e0bff917 	ldw	r2,-28(fp)
   186f4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   186f8:	d0e74c17 	ldw	r3,-25296(gp)
   186fc:	e1fff917 	ldw	r7,-28(fp)
   18700:	018000b4 	movhi	r6,2
   18704:	31a27a04 	addi	r6,r6,-30232
   18708:	180b883a 	mov	r5,r3
   1870c:	1009883a 	mov	r4,r2
   18710:	0019a5c0 	call	19a5c <alt_alarm_start>
   18714:	1000040e 	bge	r2,zero,18728 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   18718:	e0fff917 	ldw	r3,-28(fp)
   1871c:	00a00034 	movhi	r2,32768
   18720:	10bfffc4 	addi	r2,r2,-1
   18724:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   18728:	0001883a 	nop
   1872c:	e037883a 	mov	sp,fp
   18730:	dfc00117 	ldw	ra,4(sp)
   18734:	df000017 	ldw	fp,0(sp)
   18738:	dec00204 	addi	sp,sp,8
   1873c:	f800283a 	ret

00018740 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   18740:	defff104 	addi	sp,sp,-60
   18744:	dfc00e15 	stw	ra,56(sp)
   18748:	df000d15 	stw	fp,52(sp)
   1874c:	df000d04 	addi	fp,sp,52
   18750:	e13ffe15 	stw	r4,-8(fp)
   18754:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   18758:	e0bffe17 	ldw	r2,-8(fp)
   1875c:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   18760:	e0bff517 	ldw	r2,-44(fp)
   18764:	10800017 	ldw	r2,0(r2)
   18768:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1876c:	e0bff617 	ldw	r2,-40(fp)
   18770:	10800104 	addi	r2,r2,4
   18774:	10800037 	ldwio	r2,0(r2)
   18778:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1877c:	e0bff717 	ldw	r2,-36(fp)
   18780:	1080c00c 	andi	r2,r2,768
   18784:	10009126 	beq	r2,zero,189cc <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   18788:	e0bff717 	ldw	r2,-36(fp)
   1878c:	1080400c 	andi	r2,r2,256
   18790:	10004726 	beq	r2,zero,188b0 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   18794:	00800074 	movhi	r2,1
   18798:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1879c:	e0bff517 	ldw	r2,-44(fp)
   187a0:	10800d17 	ldw	r2,52(r2)
   187a4:	10800044 	addi	r2,r2,1
   187a8:	1081ffcc 	andi	r2,r2,2047
   187ac:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   187b0:	e0bff517 	ldw	r2,-44(fp)
   187b4:	10c00e17 	ldw	r3,56(r2)
   187b8:	e0bff817 	ldw	r2,-32(fp)
   187bc:	18802726 	beq	r3,r2,1885c <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   187c0:	e0bff617 	ldw	r2,-40(fp)
   187c4:	10800037 	ldwio	r2,0(r2)
   187c8:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   187cc:	e0bff317 	ldw	r2,-52(fp)
   187d0:	10a0000c 	andi	r2,r2,32768
   187d4:	10002326 	beq	r2,zero,18864 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   187d8:	e0bff517 	ldw	r2,-44(fp)
   187dc:	10800d17 	ldw	r2,52(r2)
   187e0:	e0fff317 	ldw	r3,-52(fp)
   187e4:	1809883a 	mov	r4,r3
   187e8:	e0fff517 	ldw	r3,-44(fp)
   187ec:	1885883a 	add	r2,r3,r2
   187f0:	10801104 	addi	r2,r2,68
   187f4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   187f8:	e0bff517 	ldw	r2,-44(fp)
   187fc:	10800d17 	ldw	r2,52(r2)
   18800:	10800044 	addi	r2,r2,1
   18804:	10c1ffcc 	andi	r3,r2,2047
   18808:	e0bff517 	ldw	r2,-44(fp)
   1880c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   18810:	e0bff517 	ldw	r2,-44(fp)
   18814:	10800c17 	ldw	r2,48(r2)
   18818:	e0bffa15 	stw	r2,-24(fp)
   1881c:	00800044 	movi	r2,1
   18820:	e0bffb0d 	sth	r2,-20(fp)
   18824:	00800044 	movi	r2,1
   18828:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1882c:	d0a73743 	ldbu	r2,-25379(gp)
   18830:	10803fcc 	andi	r2,r2,255
   18834:	103fd926 	beq	r2,zero,1879c <__alt_data_end+0xfffe7a5c>
  {
    OSFlagPost (group, flags, opt, &err);
   18838:	e0bffb0b 	ldhu	r2,-20(fp)
   1883c:	e0fffb83 	ldbu	r3,-18(fp)
   18840:	e13ffcc4 	addi	r4,fp,-13
   18844:	200f883a 	mov	r7,r4
   18848:	180d883a 	mov	r6,r3
   1884c:	100b883a 	mov	r5,r2
   18850:	e13ffa17 	ldw	r4,-24(fp)
   18854:	0013c480 	call	13c48 <OSFlagPost>
      }
   18858:	003fd006 	br	1879c <__alt_data_end+0xfffe7a5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1885c:	0001883a 	nop
   18860:	00000106 	br	18868 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   18864:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   18868:	e0bff317 	ldw	r2,-52(fp)
   1886c:	10bfffec 	andhi	r2,r2,65535
   18870:	10000f26 	beq	r2,zero,188b0 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18874:	e0bff517 	ldw	r2,-44(fp)
   18878:	10c00817 	ldw	r3,32(r2)
   1887c:	00bfff84 	movi	r2,-2
   18880:	1886703a 	and	r3,r3,r2
   18884:	e0bff517 	ldw	r2,-44(fp)
   18888:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1888c:	e0bff617 	ldw	r2,-40(fp)
   18890:	10800104 	addi	r2,r2,4
   18894:	1007883a 	mov	r3,r2
   18898:	e0bff517 	ldw	r2,-44(fp)
   1889c:	10800817 	ldw	r2,32(r2)
   188a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   188a4:	e0bff617 	ldw	r2,-40(fp)
   188a8:	10800104 	addi	r2,r2,4
   188ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   188b0:	e0bff717 	ldw	r2,-36(fp)
   188b4:	1080800c 	andi	r2,r2,512
   188b8:	103fac26 	beq	r2,zero,1876c <__alt_data_end+0xfffe7a2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   188bc:	e0bff717 	ldw	r2,-36(fp)
   188c0:	1004d43a 	srli	r2,r2,16
   188c4:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   188c8:	00002606 	br	18964 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   188cc:	e0bff617 	ldw	r2,-40(fp)
   188d0:	e0fff517 	ldw	r3,-44(fp)
   188d4:	18c01017 	ldw	r3,64(r3)
   188d8:	e13ff517 	ldw	r4,-44(fp)
   188dc:	20c7883a 	add	r3,r4,r3
   188e0:	18c21104 	addi	r3,r3,2116
   188e4:	18c00003 	ldbu	r3,0(r3)
   188e8:	18c03fcc 	andi	r3,r3,255
   188ec:	18c0201c 	xori	r3,r3,128
   188f0:	18ffe004 	addi	r3,r3,-128
   188f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   188f8:	e0bff517 	ldw	r2,-44(fp)
   188fc:	10801017 	ldw	r2,64(r2)
   18900:	10800044 	addi	r2,r2,1
   18904:	10c1ffcc 	andi	r3,r2,2047
   18908:	e0bff517 	ldw	r2,-44(fp)
   1890c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   18910:	e0bff517 	ldw	r2,-44(fp)
   18914:	10800c17 	ldw	r2,48(r2)
   18918:	e0bff915 	stw	r2,-28(fp)
   1891c:	00800084 	movi	r2,2
   18920:	e0bffc0d 	sth	r2,-16(fp)
   18924:	00800044 	movi	r2,1
   18928:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1892c:	d0a73743 	ldbu	r2,-25379(gp)
   18930:	10803fcc 	andi	r2,r2,255
   18934:	10000826 	beq	r2,zero,18958 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   18938:	e0bffc0b 	ldhu	r2,-16(fp)
   1893c:	e0fffc83 	ldbu	r3,-14(fp)
   18940:	e13ffd04 	addi	r4,fp,-12
   18944:	200f883a 	mov	r7,r4
   18948:	180d883a 	mov	r6,r3
   1894c:	100b883a 	mov	r5,r2
   18950:	e13ff917 	ldw	r4,-28(fp)
   18954:	0013c480 	call	13c48 <OSFlagPost>

        space--;
   18958:	e0bff417 	ldw	r2,-48(fp)
   1895c:	10bfffc4 	addi	r2,r2,-1
   18960:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   18964:	e0bff417 	ldw	r2,-48(fp)
   18968:	10000526 	beq	r2,zero,18980 <altera_avalon_jtag_uart_irq+0x240>
   1896c:	e0bff517 	ldw	r2,-44(fp)
   18970:	10c01017 	ldw	r3,64(r2)
   18974:	e0bff517 	ldw	r2,-44(fp)
   18978:	10800f17 	ldw	r2,60(r2)
   1897c:	18bfd31e 	bne	r3,r2,188cc <__alt_data_end+0xfffe7b8c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   18980:	e0bff417 	ldw	r2,-48(fp)
   18984:	103f7926 	beq	r2,zero,1876c <__alt_data_end+0xfffe7a2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   18988:	e0bff517 	ldw	r2,-44(fp)
   1898c:	10c00817 	ldw	r3,32(r2)
   18990:	00bfff44 	movi	r2,-3
   18994:	1886703a 	and	r3,r3,r2
   18998:	e0bff517 	ldw	r2,-44(fp)
   1899c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   189a0:	e0bff517 	ldw	r2,-44(fp)
   189a4:	10800017 	ldw	r2,0(r2)
   189a8:	10800104 	addi	r2,r2,4
   189ac:	1007883a 	mov	r3,r2
   189b0:	e0bff517 	ldw	r2,-44(fp)
   189b4:	10800817 	ldw	r2,32(r2)
   189b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   189bc:	e0bff617 	ldw	r2,-40(fp)
   189c0:	10800104 	addi	r2,r2,4
   189c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   189c8:	003f6806 	br	1876c <__alt_data_end+0xfffe7a2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   189cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   189d0:	0001883a 	nop
   189d4:	e037883a 	mov	sp,fp
   189d8:	dfc00117 	ldw	ra,4(sp)
   189dc:	df000017 	ldw	fp,0(sp)
   189e0:	dec00204 	addi	sp,sp,8
   189e4:	f800283a 	ret

000189e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   189e8:	defff904 	addi	sp,sp,-28
   189ec:	dfc00615 	stw	ra,24(sp)
   189f0:	df000515 	stw	fp,20(sp)
   189f4:	df000504 	addi	fp,sp,20
   189f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   189fc:	e0bfff17 	ldw	r2,-4(fp)
   18a00:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   18a04:	e0bffb17 	ldw	r2,-20(fp)
   18a08:	10800017 	ldw	r2,0(r2)
   18a0c:	10800104 	addi	r2,r2,4
   18a10:	10800037 	ldwio	r2,0(r2)
   18a14:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   18a18:	e0bffc17 	ldw	r2,-16(fp)
   18a1c:	1081000c 	andi	r2,r2,1024
   18a20:	10000b26 	beq	r2,zero,18a50 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   18a24:	e0bffb17 	ldw	r2,-20(fp)
   18a28:	10800017 	ldw	r2,0(r2)
   18a2c:	10800104 	addi	r2,r2,4
   18a30:	1007883a 	mov	r3,r2
   18a34:	e0bffb17 	ldw	r2,-20(fp)
   18a38:	10800817 	ldw	r2,32(r2)
   18a3c:	10810014 	ori	r2,r2,1024
   18a40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   18a44:	e0bffb17 	ldw	r2,-20(fp)
   18a48:	10000915 	stw	zero,36(r2)
   18a4c:	00002106 	br	18ad4 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   18a50:	e0bffb17 	ldw	r2,-20(fp)
   18a54:	10c00917 	ldw	r3,36(r2)
   18a58:	00a00034 	movhi	r2,32768
   18a5c:	10bfff04 	addi	r2,r2,-4
   18a60:	10c01c36 	bltu	r2,r3,18ad4 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   18a64:	e0bffb17 	ldw	r2,-20(fp)
   18a68:	10800917 	ldw	r2,36(r2)
   18a6c:	10c00044 	addi	r3,r2,1
   18a70:	e0bffb17 	ldw	r2,-20(fp)
   18a74:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   18a78:	e0bffb17 	ldw	r2,-20(fp)
   18a7c:	10c00917 	ldw	r3,36(r2)
   18a80:	e0bffb17 	ldw	r2,-20(fp)
   18a84:	10800117 	ldw	r2,4(r2)
   18a88:	18801236 	bltu	r3,r2,18ad4 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   18a8c:	e0bffb17 	ldw	r2,-20(fp)
   18a90:	10800c17 	ldw	r2,48(r2)
   18a94:	e0bffd15 	stw	r2,-12(fp)
   18a98:	00800104 	movi	r2,4
   18a9c:	e0bffe0d 	sth	r2,-8(fp)
   18aa0:	00800044 	movi	r2,1
   18aa4:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   18aa8:	d0a73743 	ldbu	r2,-25379(gp)
   18aac:	10803fcc 	andi	r2,r2,255
   18ab0:	10000826 	beq	r2,zero,18ad4 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   18ab4:	e0bffe0b 	ldhu	r2,-8(fp)
   18ab8:	e0fffe83 	ldbu	r3,-6(fp)
   18abc:	e13ffec4 	addi	r4,fp,-5
   18ac0:	200f883a 	mov	r7,r4
   18ac4:	180d883a 	mov	r6,r3
   18ac8:	100b883a 	mov	r5,r2
   18acc:	e13ffd17 	ldw	r4,-12(fp)
   18ad0:	0013c480 	call	13c48 <OSFlagPost>
   18ad4:	d0a74c17 	ldw	r2,-25296(gp)
    }
  }

  return alt_ticks_per_second();
}
   18ad8:	e037883a 	mov	sp,fp
   18adc:	dfc00117 	ldw	ra,4(sp)
   18ae0:	df000017 	ldw	fp,0(sp)
   18ae4:	dec00204 	addi	sp,sp,8
   18ae8:	f800283a 	ret

00018aec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   18aec:	defffd04 	addi	sp,sp,-12
   18af0:	df000215 	stw	fp,8(sp)
   18af4:	df000204 	addi	fp,sp,8
   18af8:	e13ffe15 	stw	r4,-8(fp)
   18afc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   18b00:	00000506 	br	18b18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   18b04:	e0bfff17 	ldw	r2,-4(fp)
   18b08:	1090000c 	andi	r2,r2,16384
   18b0c:	10000226 	beq	r2,zero,18b18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   18b10:	00bffd44 	movi	r2,-11
   18b14:	00000b06 	br	18b44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   18b18:	e0bffe17 	ldw	r2,-8(fp)
   18b1c:	10c01017 	ldw	r3,64(r2)
   18b20:	e0bffe17 	ldw	r2,-8(fp)
   18b24:	10800f17 	ldw	r2,60(r2)
   18b28:	18800526 	beq	r3,r2,18b40 <altera_avalon_jtag_uart_close+0x54>
   18b2c:	e0bffe17 	ldw	r2,-8(fp)
   18b30:	10c00917 	ldw	r3,36(r2)
   18b34:	e0bffe17 	ldw	r2,-8(fp)
   18b38:	10800117 	ldw	r2,4(r2)
   18b3c:	18bff136 	bltu	r3,r2,18b04 <__alt_data_end+0xfffe7dc4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   18b40:	0005883a 	mov	r2,zero
}
   18b44:	e037883a 	mov	sp,fp
   18b48:	df000017 	ldw	fp,0(sp)
   18b4c:	dec00104 	addi	sp,sp,4
   18b50:	f800283a 	ret

00018b54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   18b54:	defffa04 	addi	sp,sp,-24
   18b58:	df000515 	stw	fp,20(sp)
   18b5c:	df000504 	addi	fp,sp,20
   18b60:	e13ffd15 	stw	r4,-12(fp)
   18b64:	e17ffe15 	stw	r5,-8(fp)
   18b68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   18b6c:	00bff9c4 	movi	r2,-25
   18b70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   18b74:	e0bffe17 	ldw	r2,-8(fp)
   18b78:	10da8060 	cmpeqi	r3,r2,27137
   18b7c:	1800031e 	bne	r3,zero,18b8c <altera_avalon_jtag_uart_ioctl+0x38>
   18b80:	109a80a0 	cmpeqi	r2,r2,27138
   18b84:	1000181e 	bne	r2,zero,18be8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   18b88:	00002906 	br	18c30 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   18b8c:	e0bffd17 	ldw	r2,-12(fp)
   18b90:	10c00117 	ldw	r3,4(r2)
   18b94:	00a00034 	movhi	r2,32768
   18b98:	10bfffc4 	addi	r2,r2,-1
   18b9c:	18802126 	beq	r3,r2,18c24 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   18ba0:	e0bfff17 	ldw	r2,-4(fp)
   18ba4:	10800017 	ldw	r2,0(r2)
   18ba8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   18bac:	e0bffc17 	ldw	r2,-16(fp)
   18bb0:	10800090 	cmplti	r2,r2,2
   18bb4:	1000061e 	bne	r2,zero,18bd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   18bb8:	e0fffc17 	ldw	r3,-16(fp)
   18bbc:	00a00034 	movhi	r2,32768
   18bc0:	10bfffc4 	addi	r2,r2,-1
   18bc4:	18800226 	beq	r3,r2,18bd0 <altera_avalon_jtag_uart_ioctl+0x7c>
   18bc8:	e0bffc17 	ldw	r2,-16(fp)
   18bcc:	00000206 	br	18bd8 <altera_avalon_jtag_uart_ioctl+0x84>
   18bd0:	00a00034 	movhi	r2,32768
   18bd4:	10bfff84 	addi	r2,r2,-2
   18bd8:	e0fffd17 	ldw	r3,-12(fp)
   18bdc:	18800115 	stw	r2,4(r3)
      rc = 0;
   18be0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   18be4:	00000f06 	br	18c24 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   18be8:	e0bffd17 	ldw	r2,-12(fp)
   18bec:	10c00117 	ldw	r3,4(r2)
   18bf0:	00a00034 	movhi	r2,32768
   18bf4:	10bfffc4 	addi	r2,r2,-1
   18bf8:	18800c26 	beq	r3,r2,18c2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   18bfc:	e0bffd17 	ldw	r2,-12(fp)
   18c00:	10c00917 	ldw	r3,36(r2)
   18c04:	e0bffd17 	ldw	r2,-12(fp)
   18c08:	10800117 	ldw	r2,4(r2)
   18c0c:	1885803a 	cmpltu	r2,r3,r2
   18c10:	10c03fcc 	andi	r3,r2,255
   18c14:	e0bfff17 	ldw	r2,-4(fp)
   18c18:	10c00015 	stw	r3,0(r2)
      rc = 0;
   18c1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   18c20:	00000206 	br	18c2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   18c24:	0001883a 	nop
   18c28:	00000106 	br	18c30 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   18c2c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   18c30:	e0bffb17 	ldw	r2,-20(fp)
}
   18c34:	e037883a 	mov	sp,fp
   18c38:	df000017 	ldw	fp,0(sp)
   18c3c:	dec00104 	addi	sp,sp,4
   18c40:	f800283a 	ret

00018c44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   18c44:	deffed04 	addi	sp,sp,-76
   18c48:	dfc01215 	stw	ra,72(sp)
   18c4c:	df001115 	stw	fp,68(sp)
   18c50:	df001104 	addi	fp,sp,68
   18c54:	e13ffc15 	stw	r4,-16(fp)
   18c58:	e17ffd15 	stw	r5,-12(fp)
   18c5c:	e1bffe15 	stw	r6,-8(fp)
   18c60:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   18c64:	e0bffd17 	ldw	r2,-12(fp)
   18c68:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   18c6c:	e0bffc17 	ldw	r2,-16(fp)
   18c70:	10800a17 	ldw	r2,40(r2)
   18c74:	e0bff815 	stw	r2,-32(fp)
   18c78:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   18c7c:	e0bff90b 	ldhu	r2,-28(fp)
   18c80:	e0fffb04 	addi	r3,fp,-20
   18c84:	180d883a 	mov	r6,r3
   18c88:	100b883a 	mov	r5,r2
   18c8c:	e13ff817 	ldw	r4,-32(fp)
   18c90:	00160a40 	call	160a4 <OSSemPend>

  while (space > 0)
   18c94:	00006106 	br	18e1c <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   18c98:	e0bffc17 	ldw	r2,-16(fp)
   18c9c:	10800d17 	ldw	r2,52(r2)
   18ca0:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   18ca4:	e0bffc17 	ldw	r2,-16(fp)
   18ca8:	10800e17 	ldw	r2,56(r2)
   18cac:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   18cb0:	e0fff317 	ldw	r3,-52(fp)
   18cb4:	e0bff417 	ldw	r2,-48(fp)
   18cb8:	18800536 	bltu	r3,r2,18cd0 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   18cbc:	e0fff317 	ldw	r3,-52(fp)
   18cc0:	e0bff417 	ldw	r2,-48(fp)
   18cc4:	1885c83a 	sub	r2,r3,r2
   18cc8:	e0bff115 	stw	r2,-60(fp)
   18ccc:	00000406 	br	18ce0 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   18cd0:	00c20004 	movi	r3,2048
   18cd4:	e0bff417 	ldw	r2,-48(fp)
   18cd8:	1885c83a 	sub	r2,r3,r2
   18cdc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18ce0:	e0bff117 	ldw	r2,-60(fp)
   18ce4:	10001e26 	beq	r2,zero,18d60 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   18ce8:	e0fffe17 	ldw	r3,-8(fp)
   18cec:	e0bff117 	ldw	r2,-60(fp)
   18cf0:	1880022e 	bgeu	r3,r2,18cfc <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   18cf4:	e0bffe17 	ldw	r2,-8(fp)
   18cf8:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   18cfc:	e0bffc17 	ldw	r2,-16(fp)
   18d00:	10c01104 	addi	r3,r2,68
   18d04:	e0bff417 	ldw	r2,-48(fp)
   18d08:	1885883a 	add	r2,r3,r2
   18d0c:	e1bff117 	ldw	r6,-60(fp)
   18d10:	100b883a 	mov	r5,r2
   18d14:	e13ff017 	ldw	r4,-64(fp)
   18d18:	0005fac0 	call	5fac <memcpy>
      ptr   += n;
   18d1c:	e0fff017 	ldw	r3,-64(fp)
   18d20:	e0bff117 	ldw	r2,-60(fp)
   18d24:	1885883a 	add	r2,r3,r2
   18d28:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   18d2c:	e0fffe17 	ldw	r3,-8(fp)
   18d30:	e0bff117 	ldw	r2,-60(fp)
   18d34:	1885c83a 	sub	r2,r3,r2
   18d38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   18d3c:	e0fff417 	ldw	r3,-48(fp)
   18d40:	e0bff117 	ldw	r2,-60(fp)
   18d44:	1885883a 	add	r2,r3,r2
   18d48:	10c1ffcc 	andi	r3,r2,2047
   18d4c:	e0bffc17 	ldw	r2,-16(fp)
   18d50:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   18d54:	e0bffe17 	ldw	r2,-8(fp)
   18d58:	00bfcf16 	blt	zero,r2,18c98 <__alt_data_end+0xfffe7f58>
   18d5c:	00000106 	br	18d64 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   18d60:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   18d64:	e0fff017 	ldw	r3,-64(fp)
   18d68:	e0bffd17 	ldw	r2,-12(fp)
   18d6c:	18802e1e 	bne	r3,r2,18e28 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   18d70:	e0bfff17 	ldw	r2,-4(fp)
   18d74:	1090000c 	andi	r2,r2,16384
   18d78:	10002d1e 	bne	r2,zero,18e30 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   18d7c:	d0a73743 	ldbu	r2,-25379(gp)
   18d80:	10803fcc 	andi	r2,r2,255
   18d84:	10800058 	cmpnei	r2,r2,1
   18d88:	1000161e 	bne	r2,zero,18de4 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   18d8c:	e0bffc17 	ldw	r2,-16(fp)
   18d90:	10800c17 	ldw	r2,48(r2)
   18d94:	e0bff215 	stw	r2,-56(fp)
   18d98:	00800144 	movi	r2,5
   18d9c:	e0bff98d 	sth	r2,-26(fp)
   18da0:	00bfe0c4 	movi	r2,-125
   18da4:	e0bffa05 	stb	r2,-24(fp)
   18da8:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   18dac:	d0a73743 	ldbu	r2,-25379(gp)
   18db0:	10803fcc 	andi	r2,r2,255
   18db4:	10001526 	beq	r2,zero,18e0c <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   18db8:	e0fff98b 	ldhu	r3,-26(fp)
   18dbc:	e13ffa03 	ldbu	r4,-24(fp)
   18dc0:	e17ffa8b 	ldhu	r5,-22(fp)
   18dc4:	e0bffb44 	addi	r2,fp,-19
   18dc8:	d8800015 	stw	r2,0(sp)
   18dcc:	280f883a 	mov	r7,r5
   18dd0:	200d883a 	mov	r6,r4
   18dd4:	180b883a 	mov	r5,r3
   18dd8:	e13ff217 	ldw	r4,-56(fp)
   18ddc:	00136300 	call	13630 <OSFlagPend>
   18de0:	00000a06 	br	18e0c <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   18de4:	0001883a 	nop
   18de8:	e0bffc17 	ldw	r2,-16(fp)
   18dec:	10c00d17 	ldw	r3,52(r2)
   18df0:	e0bff317 	ldw	r2,-52(fp)
   18df4:	1880051e 	bne	r3,r2,18e0c <altera_avalon_jtag_uart_read+0x1c8>
   18df8:	e0bffc17 	ldw	r2,-16(fp)
   18dfc:	10c00917 	ldw	r3,36(r2)
   18e00:	e0bffc17 	ldw	r2,-16(fp)
   18e04:	10800117 	ldw	r2,4(r2)
   18e08:	18bff736 	bltu	r3,r2,18de8 <__alt_data_end+0xfffe80a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   18e0c:	e0bffc17 	ldw	r2,-16(fp)
   18e10:	10c00d17 	ldw	r3,52(r2)
   18e14:	e0bff317 	ldw	r2,-52(fp)
   18e18:	18800726 	beq	r3,r2,18e38 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   18e1c:	e0bffe17 	ldw	r2,-8(fp)
   18e20:	00bf9d16 	blt	zero,r2,18c98 <__alt_data_end+0xfffe7f58>
   18e24:	00000506 	br	18e3c <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   18e28:	0001883a 	nop
   18e2c:	00000306 	br	18e3c <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   18e30:	0001883a 	nop
   18e34:	00000106 	br	18e3c <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   18e38:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   18e3c:	e0bffc17 	ldw	r2,-16(fp)
   18e40:	10800a17 	ldw	r2,40(r2)
   18e44:	1009883a 	mov	r4,r2
   18e48:	001641c0 	call	1641c <OSSemPost>

  if (ptr != buffer)
   18e4c:	e0fff017 	ldw	r3,-64(fp)
   18e50:	e0bffd17 	ldw	r2,-12(fp)
   18e54:	18801826 	beq	r3,r2,18eb8 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e58:	0005303a 	rdctl	r2,status
   18e5c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e60:	e0fff717 	ldw	r3,-36(fp)
   18e64:	00bfff84 	movi	r2,-2
   18e68:	1884703a 	and	r2,r3,r2
   18e6c:	1001703a 	wrctl	status,r2
  
  return context;
   18e70:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   18e74:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   18e78:	e0bffc17 	ldw	r2,-16(fp)
   18e7c:	10800817 	ldw	r2,32(r2)
   18e80:	10c00054 	ori	r3,r2,1
   18e84:	e0bffc17 	ldw	r2,-16(fp)
   18e88:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   18e8c:	e0bffc17 	ldw	r2,-16(fp)
   18e90:	10800017 	ldw	r2,0(r2)
   18e94:	10800104 	addi	r2,r2,4
   18e98:	1007883a 	mov	r3,r2
   18e9c:	e0bffc17 	ldw	r2,-16(fp)
   18ea0:	10800817 	ldw	r2,32(r2)
   18ea4:	18800035 	stwio	r2,0(r3)
   18ea8:	e0bff617 	ldw	r2,-40(fp)
   18eac:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18eb0:	e0bff517 	ldw	r2,-44(fp)
   18eb4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   18eb8:	e0fff017 	ldw	r3,-64(fp)
   18ebc:	e0bffd17 	ldw	r2,-12(fp)
   18ec0:	18800426 	beq	r3,r2,18ed4 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   18ec4:	e0fff017 	ldw	r3,-64(fp)
   18ec8:	e0bffd17 	ldw	r2,-12(fp)
   18ecc:	1885c83a 	sub	r2,r3,r2
   18ed0:	00000606 	br	18eec <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   18ed4:	e0bfff17 	ldw	r2,-4(fp)
   18ed8:	1090000c 	andi	r2,r2,16384
   18edc:	10000226 	beq	r2,zero,18ee8 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   18ee0:	00bffd44 	movi	r2,-11
   18ee4:	00000106 	br	18eec <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   18ee8:	00bffec4 	movi	r2,-5
}
   18eec:	e037883a 	mov	sp,fp
   18ef0:	dfc00117 	ldw	ra,4(sp)
   18ef4:	df000017 	ldw	fp,0(sp)
   18ef8:	dec00204 	addi	sp,sp,8
   18efc:	f800283a 	ret

00018f00 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   18f00:	deffed04 	addi	sp,sp,-76
   18f04:	dfc01215 	stw	ra,72(sp)
   18f08:	df001115 	stw	fp,68(sp)
   18f0c:	df001104 	addi	fp,sp,68
   18f10:	e13ffc15 	stw	r4,-16(fp)
   18f14:	e17ffd15 	stw	r5,-12(fp)
   18f18:	e1bffe15 	stw	r6,-8(fp)
   18f1c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   18f20:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   18f24:	e0bffd17 	ldw	r2,-12(fp)
   18f28:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   18f2c:	e0bffc17 	ldw	r2,-16(fp)
   18f30:	10800b17 	ldw	r2,44(r2)
   18f34:	e0bff815 	stw	r2,-32(fp)
   18f38:	e03ff90d 	sth	zero,-28(fp)
   18f3c:	e0bff90b 	ldhu	r2,-28(fp)
   18f40:	e0fffb44 	addi	r3,fp,-19
   18f44:	180d883a 	mov	r6,r3
   18f48:	100b883a 	mov	r5,r2
   18f4c:	e13ff817 	ldw	r4,-32(fp)
   18f50:	00160a40 	call	160a4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   18f54:	00003706 	br	19034 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   18f58:	e0bffc17 	ldw	r2,-16(fp)
   18f5c:	10800f17 	ldw	r2,60(r2)
   18f60:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   18f64:	e0bffc17 	ldw	r2,-16(fp)
   18f68:	10801017 	ldw	r2,64(r2)
   18f6c:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   18f70:	e0fff417 	ldw	r3,-48(fp)
   18f74:	e0bff017 	ldw	r2,-64(fp)
   18f78:	1880062e 	bgeu	r3,r2,18f94 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   18f7c:	e0fff017 	ldw	r3,-64(fp)
   18f80:	e0bff417 	ldw	r2,-48(fp)
   18f84:	1885c83a 	sub	r2,r3,r2
   18f88:	10bfffc4 	addi	r2,r2,-1
   18f8c:	e0bff115 	stw	r2,-60(fp)
   18f90:	00000b06 	br	18fc0 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   18f94:	e0bff017 	ldw	r2,-64(fp)
   18f98:	10000526 	beq	r2,zero,18fb0 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   18f9c:	00c20004 	movi	r3,2048
   18fa0:	e0bff417 	ldw	r2,-48(fp)
   18fa4:	1885c83a 	sub	r2,r3,r2
   18fa8:	e0bff115 	stw	r2,-60(fp)
   18fac:	00000406 	br	18fc0 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   18fb0:	00c1ffc4 	movi	r3,2047
   18fb4:	e0bff417 	ldw	r2,-48(fp)
   18fb8:	1885c83a 	sub	r2,r3,r2
   18fbc:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   18fc0:	e0bff117 	ldw	r2,-60(fp)
   18fc4:	10001e26 	beq	r2,zero,19040 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   18fc8:	e0fffe17 	ldw	r3,-8(fp)
   18fcc:	e0bff117 	ldw	r2,-60(fp)
   18fd0:	1880022e 	bgeu	r3,r2,18fdc <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   18fd4:	e0bffe17 	ldw	r2,-8(fp)
   18fd8:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   18fdc:	e0bffc17 	ldw	r2,-16(fp)
   18fe0:	10c21104 	addi	r3,r2,2116
   18fe4:	e0bff417 	ldw	r2,-48(fp)
   18fe8:	1885883a 	add	r2,r3,r2
   18fec:	e1bff117 	ldw	r6,-60(fp)
   18ff0:	e17ffd17 	ldw	r5,-12(fp)
   18ff4:	1009883a 	mov	r4,r2
   18ff8:	0005fac0 	call	5fac <memcpy>
      ptr   += n;
   18ffc:	e0fffd17 	ldw	r3,-12(fp)
   19000:	e0bff117 	ldw	r2,-60(fp)
   19004:	1885883a 	add	r2,r3,r2
   19008:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1900c:	e0fffe17 	ldw	r3,-8(fp)
   19010:	e0bff117 	ldw	r2,-60(fp)
   19014:	1885c83a 	sub	r2,r3,r2
   19018:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1901c:	e0fff417 	ldw	r3,-48(fp)
   19020:	e0bff117 	ldw	r2,-60(fp)
   19024:	1885883a 	add	r2,r3,r2
   19028:	10c1ffcc 	andi	r3,r2,2047
   1902c:	e0bffc17 	ldw	r2,-16(fp)
   19030:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   19034:	e0bffe17 	ldw	r2,-8(fp)
   19038:	00bfc716 	blt	zero,r2,18f58 <__alt_data_end+0xfffe8218>
   1903c:	00000106 	br	19044 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   19040:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19044:	0005303a 	rdctl	r2,status
   19048:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1904c:	e0fff717 	ldw	r3,-36(fp)
   19050:	00bfff84 	movi	r2,-2
   19054:	1884703a 	and	r2,r3,r2
   19058:	1001703a 	wrctl	status,r2
  
  return context;
   1905c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   19060:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   19064:	e0bffc17 	ldw	r2,-16(fp)
   19068:	10800817 	ldw	r2,32(r2)
   1906c:	10c00094 	ori	r3,r2,2
   19070:	e0bffc17 	ldw	r2,-16(fp)
   19074:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   19078:	e0bffc17 	ldw	r2,-16(fp)
   1907c:	10800017 	ldw	r2,0(r2)
   19080:	10800104 	addi	r2,r2,4
   19084:	1007883a 	mov	r3,r2
   19088:	e0bffc17 	ldw	r2,-16(fp)
   1908c:	10800817 	ldw	r2,32(r2)
   19090:	18800035 	stwio	r2,0(r3)
   19094:	e0bff617 	ldw	r2,-40(fp)
   19098:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1909c:	e0bff317 	ldw	r2,-52(fp)
   190a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   190a4:	e0bffe17 	ldw	r2,-8(fp)
   190a8:	00802a0e 	bge	zero,r2,19154 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   190ac:	e0bfff17 	ldw	r2,-4(fp)
   190b0:	1090000c 	andi	r2,r2,16384
   190b4:	10002a1e 	bne	r2,zero,19160 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   190b8:	d0a73743 	ldbu	r2,-25379(gp)
   190bc:	10803fcc 	andi	r2,r2,255
   190c0:	10800058 	cmpnei	r2,r2,1
   190c4:	1000161e 	bne	r2,zero,19120 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   190c8:	e0bffc17 	ldw	r2,-16(fp)
   190cc:	10800c17 	ldw	r2,48(r2)
   190d0:	e0bff515 	stw	r2,-44(fp)
   190d4:	00800184 	movi	r2,6
   190d8:	e0bff98d 	sth	r2,-26(fp)
   190dc:	00bfe0c4 	movi	r2,-125
   190e0:	e0bffa05 	stb	r2,-24(fp)
   190e4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   190e8:	d0a73743 	ldbu	r2,-25379(gp)
   190ec:	10803fcc 	andi	r2,r2,255
   190f0:	10001526 	beq	r2,zero,19148 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   190f4:	e0fff98b 	ldhu	r3,-26(fp)
   190f8:	e13ffa03 	ldbu	r4,-24(fp)
   190fc:	e17ffa8b 	ldhu	r5,-22(fp)
   19100:	e0bffb04 	addi	r2,fp,-20
   19104:	d8800015 	stw	r2,0(sp)
   19108:	280f883a 	mov	r7,r5
   1910c:	200d883a 	mov	r6,r4
   19110:	180b883a 	mov	r5,r3
   19114:	e13ff517 	ldw	r4,-44(fp)
   19118:	00136300 	call	13630 <OSFlagPend>
   1911c:	00000a06 	br	19148 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   19120:	0001883a 	nop
   19124:	e0bffc17 	ldw	r2,-16(fp)
   19128:	10c01017 	ldw	r3,64(r2)
   1912c:	e0bff017 	ldw	r2,-64(fp)
   19130:	1880051e 	bne	r3,r2,19148 <altera_avalon_jtag_uart_write+0x248>
   19134:	e0bffc17 	ldw	r2,-16(fp)
   19138:	10c00917 	ldw	r3,36(r2)
   1913c:	e0bffc17 	ldw	r2,-16(fp)
   19140:	10800117 	ldw	r2,4(r2)
   19144:	18bff736 	bltu	r3,r2,19124 <__alt_data_end+0xfffe83e4>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   19148:	e0bffc17 	ldw	r2,-16(fp)
   1914c:	10800917 	ldw	r2,36(r2)
   19150:	1000051e 	bne	r2,zero,19168 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   19154:	e0bffe17 	ldw	r2,-8(fp)
   19158:	00bfb616 	blt	zero,r2,19034 <__alt_data_end+0xfffe82f4>
   1915c:	00000306 	br	1916c <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   19160:	0001883a 	nop
   19164:	00000106 	br	1916c <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   19168:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1916c:	e0bffc17 	ldw	r2,-16(fp)
   19170:	10800b17 	ldw	r2,44(r2)
   19174:	1009883a 	mov	r4,r2
   19178:	001641c0 	call	1641c <OSSemPost>

  if (ptr != start)
   1917c:	e0fffd17 	ldw	r3,-12(fp)
   19180:	e0bff217 	ldw	r2,-56(fp)
   19184:	18800426 	beq	r3,r2,19198 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   19188:	e0fffd17 	ldw	r3,-12(fp)
   1918c:	e0bff217 	ldw	r2,-56(fp)
   19190:	1885c83a 	sub	r2,r3,r2
   19194:	00000606 	br	191b0 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   19198:	e0bfff17 	ldw	r2,-4(fp)
   1919c:	1090000c 	andi	r2,r2,16384
   191a0:	10000226 	beq	r2,zero,191ac <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   191a4:	00bffd44 	movi	r2,-11
   191a8:	00000106 	br	191b0 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   191ac:	00bffec4 	movi	r2,-5
}
   191b0:	e037883a 	mov	sp,fp
   191b4:	dfc00117 	ldw	ra,4(sp)
   191b8:	df000017 	ldw	fp,0(sp)
   191bc:	dec00204 	addi	sp,sp,8
   191c0:	f800283a 	ret

000191c4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   191c4:	defff904 	addi	sp,sp,-28
   191c8:	dfc00615 	stw	ra,24(sp)
   191cc:	df000515 	stw	fp,20(sp)
   191d0:	df000504 	addi	fp,sp,20
   191d4:	e13ffe15 	stw	r4,-8(fp)
   191d8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   191dc:	0007883a 	mov	r3,zero
   191e0:	e0bffe17 	ldw	r2,-8(fp)
   191e4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   191e8:	e0bffe17 	ldw	r2,-8(fp)
   191ec:	10800104 	addi	r2,r2,4
   191f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   191f4:	0005303a 	rdctl	r2,status
   191f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   191fc:	e0fffc17 	ldw	r3,-16(fp)
   19200:	00bfff84 	movi	r2,-2
   19204:	1884703a 	and	r2,r3,r2
   19208:	1001703a 	wrctl	status,r2
  
  return context;
   1920c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   19210:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   19214:	001a3f80 	call	1a3f8 <alt_tick>
   19218:	e0bffb17 	ldw	r2,-20(fp)
   1921c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19220:	e0bffd17 	ldw	r2,-12(fp)
   19224:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   19228:	0001883a 	nop
   1922c:	e037883a 	mov	sp,fp
   19230:	dfc00117 	ldw	ra,4(sp)
   19234:	df000017 	ldw	fp,0(sp)
   19238:	dec00204 	addi	sp,sp,8
   1923c:	f800283a 	ret

00019240 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   19240:	defff904 	addi	sp,sp,-28
   19244:	dfc00615 	stw	ra,24(sp)
   19248:	df000515 	stw	fp,20(sp)
   1924c:	df000504 	addi	fp,sp,20
   19250:	e13ffc15 	stw	r4,-16(fp)
   19254:	e17ffd15 	stw	r5,-12(fp)
   19258:	e1bffe15 	stw	r6,-8(fp)
   1925c:	e1ffff15 	stw	r7,-4(fp)
   19260:	e0bfff17 	ldw	r2,-4(fp)
   19264:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   19268:	d0a74c17 	ldw	r2,-25296(gp)
   1926c:	1000021e 	bne	r2,zero,19278 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   19270:	e0bffb17 	ldw	r2,-20(fp)
   19274:	d0a74c15 	stw	r2,-25296(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   19278:	e0bffc17 	ldw	r2,-16(fp)
   1927c:	10800104 	addi	r2,r2,4
   19280:	00c001c4 	movi	r3,7
   19284:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   19288:	018000b4 	movhi	r6,2
   1928c:	31a47104 	addi	r6,r6,-28220
   19290:	e17ffc17 	ldw	r5,-16(fp)
   19294:	e13ffe17 	ldw	r4,-8(fp)
   19298:	0019f580 	call	19f58 <alt_irq_register>
#endif  
}
   1929c:	0001883a 	nop
   192a0:	e037883a 	mov	sp,fp
   192a4:	dfc00117 	ldw	ra,4(sp)
   192a8:	df000017 	ldw	fp,0(sp)
   192ac:	dec00204 	addi	sp,sp,8
   192b0:	f800283a 	ret

000192b4 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   192b4:	defffc04 	addi	sp,sp,-16
   192b8:	dfc00315 	stw	ra,12(sp)
   192bc:	df000215 	stw	fp,8(sp)
   192c0:	df000204 	addi	fp,sp,8
   192c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   192c8:	d1600904 	addi	r5,gp,-32732
   192cc:	e13fff17 	ldw	r4,-4(fp)
   192d0:	0019d480 	call	19d48 <alt_find_dev>
   192d4:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   192d8:	e0bffe17 	ldw	r2,-8(fp)
}
   192dc:	e037883a 	mov	sp,fp
   192e0:	dfc00117 	ldw	ra,4(sp)
   192e4:	df000017 	ldw	fp,0(sp)
   192e8:	dec00204 	addi	sp,sp,8
   192ec:	f800283a 	ret

000192f0 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   192f0:	defffd04 	addi	sp,sp,-12
   192f4:	df000215 	stw	fp,8(sp)
   192f8:	df000204 	addi	fp,sp,8
   192fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   19300:	e0bfff17 	ldw	r2,-4(fp)
   19304:	10800a17 	ldw	r2,40(r2)
   19308:	10800037 	ldwio	r2,0(r2)
   1930c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   19310:	e0bffe17 	ldw	r2,-8(fp)
   19314:	10800054 	ori	r2,r2,1
   19318:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   1931c:	e0bfff17 	ldw	r2,-4(fp)
   19320:	10800a17 	ldw	r2,40(r2)
   19324:	1007883a 	mov	r3,r2
   19328:	e0bffe17 	ldw	r2,-8(fp)
   1932c:	18800035 	stwio	r2,0(r3)
}
   19330:	0001883a 	nop
   19334:	e037883a 	mov	sp,fp
   19338:	df000017 	ldw	fp,0(sp)
   1933c:	dec00104 	addi	sp,sp,4
   19340:	f800283a 	ret

00019344 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   19344:	defffd04 	addi	sp,sp,-12
   19348:	df000215 	stw	fp,8(sp)
   1934c:	df000204 	addi	fp,sp,8
   19350:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   19354:	e0bfff17 	ldw	r2,-4(fp)
   19358:	10800a17 	ldw	r2,40(r2)
   1935c:	10800037 	ldwio	r2,0(r2)
   19360:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   19364:	e0fffe17 	ldw	r3,-8(fp)
   19368:	00bfff84 	movi	r2,-2
   1936c:	1884703a 	and	r2,r3,r2
   19370:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   19374:	e0bfff17 	ldw	r2,-4(fp)
   19378:	10800a17 	ldw	r2,40(r2)
   1937c:	1007883a 	mov	r3,r2
   19380:	e0bffe17 	ldw	r2,-8(fp)
   19384:	18800035 	stwio	r2,0(r3)
}
   19388:	0001883a 	nop
   1938c:	e037883a 	mov	sp,fp
   19390:	df000017 	ldw	fp,0(sp)
   19394:	dec00104 	addi	sp,sp,4
   19398:	f800283a 	ret

0001939c <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   1939c:	defffd04 	addi	sp,sp,-12
   193a0:	df000215 	stw	fp,8(sp)
   193a4:	df000204 	addi	fp,sp,8
   193a8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   193ac:	e0bfff17 	ldw	r2,-4(fp)
   193b0:	10800a17 	ldw	r2,40(r2)
   193b4:	10800037 	ldwio	r2,0(r2)
   193b8:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   193bc:	e0bffe17 	ldw	r2,-8(fp)
   193c0:	10800094 	ori	r2,r2,2
   193c4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   193c8:	e0bfff17 	ldw	r2,-4(fp)
   193cc:	10800a17 	ldw	r2,40(r2)
   193d0:	1007883a 	mov	r3,r2
   193d4:	e0bffe17 	ldw	r2,-8(fp)
   193d8:	18800035 	stwio	r2,0(r3)
}
   193dc:	0001883a 	nop
   193e0:	e037883a 	mov	sp,fp
   193e4:	df000017 	ldw	fp,0(sp)
   193e8:	dec00104 	addi	sp,sp,4
   193ec:	f800283a 	ret

000193f0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   193f0:	defffd04 	addi	sp,sp,-12
   193f4:	df000215 	stw	fp,8(sp)
   193f8:	df000204 	addi	fp,sp,8
   193fc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   19400:	e0bfff17 	ldw	r2,-4(fp)
   19404:	10800a17 	ldw	r2,40(r2)
   19408:	10800037 	ldwio	r2,0(r2)
   1940c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   19410:	e0fffe17 	ldw	r3,-8(fp)
   19414:	00bfff44 	movi	r2,-3
   19418:	1884703a 	and	r2,r3,r2
   1941c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   19420:	e0bfff17 	ldw	r2,-4(fp)
   19424:	10800a17 	ldw	r2,40(r2)
   19428:	1007883a 	mov	r3,r2
   1942c:	e0bffe17 	ldw	r2,-8(fp)
   19430:	18800035 	stwio	r2,0(r3)
}
   19434:	0001883a 	nop
   19438:	e037883a 	mov	sp,fp
   1943c:	df000017 	ldw	fp,0(sp)
   19440:	dec00104 	addi	sp,sp,4
   19444:	f800283a 	ret

00019448 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   19448:	defffd04 	addi	sp,sp,-12
   1944c:	df000215 	stw	fp,8(sp)
   19450:	df000204 	addi	fp,sp,8
   19454:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   19458:	e0bfff17 	ldw	r2,-4(fp)
   1945c:	10800a17 	ldw	r2,40(r2)
   19460:	10800037 	ldwio	r2,0(r2)
   19464:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   19468:	e0bffe17 	ldw	r2,-8(fp)
   1946c:	1080400c 	andi	r2,r2,256
   19470:	1004c03a 	cmpne	r2,r2,zero
   19474:	10803fcc 	andi	r2,r2,255
}
   19478:	e037883a 	mov	sp,fp
   1947c:	df000017 	ldw	fp,0(sp)
   19480:	dec00104 	addi	sp,sp,4
   19484:	f800283a 	ret

00019488 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   19488:	defffd04 	addi	sp,sp,-12
   1948c:	df000215 	stw	fp,8(sp)
   19490:	df000204 	addi	fp,sp,8
   19494:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   19498:	e0bfff17 	ldw	r2,-4(fp)
   1949c:	10800a17 	ldw	r2,40(r2)
   194a0:	10800037 	ldwio	r2,0(r2)
   194a4:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   194a8:	e0bffe17 	ldw	r2,-8(fp)
   194ac:	1080800c 	andi	r2,r2,512
   194b0:	1004c03a 	cmpne	r2,r2,zero
   194b4:	10803fcc 	andi	r2,r2,255
}
   194b8:	e037883a 	mov	sp,fp
   194bc:	df000017 	ldw	fp,0(sp)
   194c0:	dec00104 	addi	sp,sp,4
   194c4:	f800283a 	ret

000194c8 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   194c8:	defffd04 	addi	sp,sp,-12
   194cc:	df000215 	stw	fp,8(sp)
   194d0:	df000204 	addi	fp,sp,8
   194d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   194d8:	e0bfff17 	ldw	r2,-4(fp)
   194dc:	10800a17 	ldw	r2,40(r2)
   194e0:	10800037 	ldwio	r2,0(r2)
   194e4:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   194e8:	e0bffe17 	ldw	r2,-8(fp)
   194ec:	10800114 	ori	r2,r2,4
   194f0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   194f4:	e0bffe17 	ldw	r2,-8(fp)
   194f8:	10800214 	ori	r2,r2,8
   194fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   19500:	e0bfff17 	ldw	r2,-4(fp)
   19504:	10800a17 	ldw	r2,40(r2)
   19508:	1007883a 	mov	r3,r2
   1950c:	e0bffe17 	ldw	r2,-8(fp)
   19510:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   19514:	e0fffe17 	ldw	r3,-8(fp)
   19518:	00bffec4 	movi	r2,-5
   1951c:	1884703a 	and	r2,r3,r2
   19520:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   19524:	e0fffe17 	ldw	r3,-8(fp)
   19528:	00bffdc4 	movi	r2,-9
   1952c:	1884703a 	and	r2,r3,r2
   19530:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   19534:	e0bfff17 	ldw	r2,-4(fp)
   19538:	10800a17 	ldw	r2,40(r2)
   1953c:	1007883a 	mov	r3,r2
   19540:	e0bffe17 	ldw	r2,-8(fp)
   19544:	18800035 	stwio	r2,0(r3)
}
   19548:	0001883a 	nop
   1954c:	e037883a 	mov	sp,fp
   19550:	df000017 	ldw	fp,0(sp)
   19554:	dec00104 	addi	sp,sp,4
   19558:	f800283a 	ret

0001955c <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   1955c:	defffc04 	addi	sp,sp,-16
   19560:	df000315 	stw	fp,12(sp)
   19564:	df000304 	addi	fp,sp,12
   19568:	e13ffe15 	stw	r4,-8(fp)
   1956c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   19570:	e0bffe17 	ldw	r2,-8(fp)
   19574:	10800a17 	ldw	r2,40(r2)
   19578:	10800104 	addi	r2,r2,4
   1957c:	10800037 	ldwio	r2,0(r2)
   19580:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   19584:	e0bfff17 	ldw	r2,-4(fp)
   19588:	1000041e 	bne	r2,zero,1959c <alt_up_audio_read_fifo_avail+0x40>
   1958c:	e0bffd17 	ldw	r2,-12(fp)
   19590:	10bfc00c 	andi	r2,r2,65280
   19594:	1004d23a 	srli	r2,r2,8
   19598:	00000206 	br	195a4 <alt_up_audio_read_fifo_avail+0x48>
   1959c:	e0bffd17 	ldw	r2,-12(fp)
   195a0:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   195a4:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   195a8:	e0bffd17 	ldw	r2,-12(fp)
}
   195ac:	e037883a 	mov	sp,fp
   195b0:	df000017 	ldw	fp,0(sp)
   195b4:	dec00104 	addi	sp,sp,4
   195b8:	f800283a 	ret

000195bc <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   195bc:	defffa04 	addi	sp,sp,-24
   195c0:	dfc00515 	stw	ra,20(sp)
   195c4:	df000415 	stw	fp,16(sp)
   195c8:	df000404 	addi	fp,sp,16
   195cc:	e13ffd15 	stw	r4,-12(fp)
   195d0:	e17ffe15 	stw	r5,-8(fp)
   195d4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   195d8:	01400044 	movi	r5,1
   195dc:	e13ffd17 	ldw	r4,-12(fp)
   195e0:	001955c0 	call	1955c <alt_up_audio_read_fifo_avail>
   195e4:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   195e8:	e0bffc17 	ldw	r2,-16(fp)
   195ec:	10801868 	cmpgeui	r2,r2,97
   195f0:	1000021e 	bne	r2,zero,195fc <alt_up_audio_record_r+0x40>
		return 0;
   195f4:	0005883a 	mov	r2,zero
   195f8:	00000506 	br	19610 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   195fc:	01c00044 	movi	r7,1
   19600:	e1bfff17 	ldw	r6,-4(fp)
   19604:	e17ffe17 	ldw	r5,-8(fp)
   19608:	e13ffd17 	ldw	r4,-12(fp)
   1960c:	00197bc0 	call	197bc <alt_up_audio_read_fifo>
}
   19610:	e037883a 	mov	sp,fp
   19614:	dfc00117 	ldw	ra,4(sp)
   19618:	df000017 	ldw	fp,0(sp)
   1961c:	dec00204 	addi	sp,sp,8
   19620:	f800283a 	ret

00019624 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   19624:	defffa04 	addi	sp,sp,-24
   19628:	dfc00515 	stw	ra,20(sp)
   1962c:	df000415 	stw	fp,16(sp)
   19630:	df000404 	addi	fp,sp,16
   19634:	e13ffd15 	stw	r4,-12(fp)
   19638:	e17ffe15 	stw	r5,-8(fp)
   1963c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   19640:	000b883a 	mov	r5,zero
   19644:	e13ffd17 	ldw	r4,-12(fp)
   19648:	001955c0 	call	1955c <alt_up_audio_read_fifo_avail>
   1964c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   19650:	e0bffc17 	ldw	r2,-16(fp)
   19654:	10801868 	cmpgeui	r2,r2,97
   19658:	1000021e 	bne	r2,zero,19664 <alt_up_audio_record_l+0x40>
		return 0;
   1965c:	0005883a 	mov	r2,zero
   19660:	00000506 	br	19678 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   19664:	000f883a 	mov	r7,zero
   19668:	e1bfff17 	ldw	r6,-4(fp)
   1966c:	e17ffe17 	ldw	r5,-8(fp)
   19670:	e13ffd17 	ldw	r4,-12(fp)
   19674:	00197bc0 	call	197bc <alt_up_audio_read_fifo>
}
   19678:	e037883a 	mov	sp,fp
   1967c:	dfc00117 	ldw	ra,4(sp)
   19680:	df000017 	ldw	fp,0(sp)
   19684:	dec00204 	addi	sp,sp,8
   19688:	f800283a 	ret

0001968c <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   1968c:	defffc04 	addi	sp,sp,-16
   19690:	df000315 	stw	fp,12(sp)
   19694:	df000304 	addi	fp,sp,12
   19698:	e13ffe15 	stw	r4,-8(fp)
   1969c:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   196a0:	e0bffe17 	ldw	r2,-8(fp)
   196a4:	10800a17 	ldw	r2,40(r2)
   196a8:	10800104 	addi	r2,r2,4
   196ac:	10800037 	ldwio	r2,0(r2)
   196b0:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   196b4:	e0bfff17 	ldw	r2,-4(fp)
   196b8:	1000031e 	bne	r2,zero,196c8 <alt_up_audio_write_fifo_space+0x3c>
   196bc:	e0bffd17 	ldw	r2,-12(fp)
   196c0:	1004d63a 	srli	r2,r2,24
   196c4:	00000306 	br	196d4 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   196c8:	e0bffd17 	ldw	r2,-12(fp)
   196cc:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   196d0:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   196d4:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   196d8:	e0bffd17 	ldw	r2,-12(fp)
}
   196dc:	e037883a 	mov	sp,fp
   196e0:	df000017 	ldw	fp,0(sp)
   196e4:	dec00104 	addi	sp,sp,4
   196e8:	f800283a 	ret

000196ec <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   196ec:	defffa04 	addi	sp,sp,-24
   196f0:	dfc00515 	stw	ra,20(sp)
   196f4:	df000415 	stw	fp,16(sp)
   196f8:	df000404 	addi	fp,sp,16
   196fc:	e13ffd15 	stw	r4,-12(fp)
   19700:	e17ffe15 	stw	r5,-8(fp)
   19704:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   19708:	01400044 	movi	r5,1
   1970c:	e13ffd17 	ldw	r4,-12(fp)
   19710:	001968c0 	call	1968c <alt_up_audio_write_fifo_space>
   19714:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   19718:	e0bffc17 	ldw	r2,-16(fp)
   1971c:	10801868 	cmpgeui	r2,r2,97
   19720:	1000021e 	bne	r2,zero,1972c <alt_up_audio_play_r+0x40>
		return 0;
   19724:	0005883a 	mov	r2,zero
   19728:	00000506 	br	19740 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   1972c:	01c00044 	movi	r7,1
   19730:	e1bfff17 	ldw	r6,-4(fp)
   19734:	e17ffe17 	ldw	r5,-8(fp)
   19738:	e13ffd17 	ldw	r4,-12(fp)
   1973c:	001989c0 	call	1989c <alt_up_audio_write_fifo>
}
   19740:	e037883a 	mov	sp,fp
   19744:	dfc00117 	ldw	ra,4(sp)
   19748:	df000017 	ldw	fp,0(sp)
   1974c:	dec00204 	addi	sp,sp,8
   19750:	f800283a 	ret

00019754 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   19754:	defffa04 	addi	sp,sp,-24
   19758:	dfc00515 	stw	ra,20(sp)
   1975c:	df000415 	stw	fp,16(sp)
   19760:	df000404 	addi	fp,sp,16
   19764:	e13ffd15 	stw	r4,-12(fp)
   19768:	e17ffe15 	stw	r5,-8(fp)
   1976c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   19770:	000b883a 	mov	r5,zero
   19774:	e13ffd17 	ldw	r4,-12(fp)
   19778:	001968c0 	call	1968c <alt_up_audio_write_fifo_space>
   1977c:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   19780:	e0bffc17 	ldw	r2,-16(fp)
   19784:	10801868 	cmpgeui	r2,r2,97
   19788:	1000021e 	bne	r2,zero,19794 <alt_up_audio_play_l+0x40>
		return 0;
   1978c:	0005883a 	mov	r2,zero
   19790:	00000506 	br	197a8 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   19794:	000f883a 	mov	r7,zero
   19798:	e1bfff17 	ldw	r6,-4(fp)
   1979c:	e17ffe17 	ldw	r5,-8(fp)
   197a0:	e13ffd17 	ldw	r4,-12(fp)
   197a4:	001989c0 	call	1989c <alt_up_audio_write_fifo>
}
   197a8:	e037883a 	mov	sp,fp
   197ac:	dfc00117 	ldw	ra,4(sp)
   197b0:	df000017 	ldw	fp,0(sp)
   197b4:	dec00204 	addi	sp,sp,8
   197b8:	f800283a 	ret

000197bc <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   197bc:	defff904 	addi	sp,sp,-28
   197c0:	df000615 	stw	fp,24(sp)
   197c4:	df000604 	addi	fp,sp,24
   197c8:	e13ffc15 	stw	r4,-16(fp)
   197cc:	e17ffd15 	stw	r5,-12(fp)
   197d0:	e1bffe15 	stw	r6,-8(fp)
   197d4:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   197d8:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   197dc:	00002506 	br	19874 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   197e0:	e0bffc17 	ldw	r2,-16(fp)
   197e4:	10800a17 	ldw	r2,40(r2)
   197e8:	10800104 	addi	r2,r2,4
   197ec:	10800037 	ldwio	r2,0(r2)
   197f0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   197f4:	e0bfff17 	ldw	r2,-4(fp)
   197f8:	1000041e 	bne	r2,zero,1980c <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   197fc:	e0bffb17 	ldw	r2,-20(fp)
   19800:	10bfc00c 	andi	r2,r2,65280
			:
   19804:	1004d23a 	srli	r2,r2,8
   19808:	00000206 	br	19814 <alt_up_audio_read_fifo+0x58>
   1980c:	e0bffb17 	ldw	r2,-20(fp)
   19810:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   19814:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   19818:	e0bffb17 	ldw	r2,-20(fp)
   1981c:	10001926 	beq	r2,zero,19884 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   19820:	e0bffa17 	ldw	r2,-24(fp)
   19824:	1085883a 	add	r2,r2,r2
   19828:	1085883a 	add	r2,r2,r2
   1982c:	1007883a 	mov	r3,r2
   19830:	e0bffd17 	ldw	r2,-12(fp)
   19834:	10c5883a 	add	r2,r2,r3
   19838:	e0ffff17 	ldw	r3,-4(fp)
   1983c:	1800051e 	bne	r3,zero,19854 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   19840:	e0fffc17 	ldw	r3,-16(fp)
   19844:	18c00a17 	ldw	r3,40(r3)
   19848:	18c00204 	addi	r3,r3,8
   1984c:	18c00037 	ldwio	r3,0(r3)
   19850:	00000406 	br	19864 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   19854:	e0fffc17 	ldw	r3,-16(fp)
   19858:	18c00a17 	ldw	r3,40(r3)
   1985c:	18c00304 	addi	r3,r3,12
   19860:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   19864:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   19868:	e0bffa17 	ldw	r2,-24(fp)
   1986c:	10800044 	addi	r2,r2,1
   19870:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   19874:	e0fffa17 	ldw	r3,-24(fp)
   19878:	e0bffe17 	ldw	r2,-8(fp)
   1987c:	18bfd816 	blt	r3,r2,197e0 <__alt_data_end+0xfffe8aa0>
   19880:	00000106 	br	19888 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
   19884:	0001883a 	nop
		}
	}
	return count;
   19888:	e0bffa17 	ldw	r2,-24(fp)
}
   1988c:	e037883a 	mov	sp,fp
   19890:	df000017 	ldw	fp,0(sp)
   19894:	dec00104 	addi	sp,sp,4
   19898:	f800283a 	ret

0001989c <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   1989c:	defff904 	addi	sp,sp,-28
   198a0:	df000615 	stw	fp,24(sp)
   198a4:	df000604 	addi	fp,sp,24
   198a8:	e13ffc15 	stw	r4,-16(fp)
   198ac:	e17ffd15 	stw	r5,-12(fp)
   198b0:	e1bffe15 	stw	r6,-8(fp)
   198b4:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   198b8:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   198bc:	00002f06 	br	1997c <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   198c0:	e0bffc17 	ldw	r2,-16(fp)
   198c4:	10800a17 	ldw	r2,40(r2)
   198c8:	10800104 	addi	r2,r2,4
   198cc:	10800037 	ldwio	r2,0(r2)
   198d0:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   198d4:	e0bfff17 	ldw	r2,-4(fp)
   198d8:	1000031e 	bne	r2,zero,198e8 <alt_up_audio_write_fifo+0x4c>
   198dc:	e0bffb17 	ldw	r2,-20(fp)
   198e0:	1004d63a 	srli	r2,r2,24
   198e4:	00000306 	br	198f4 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   198e8:	e0bffb17 	ldw	r2,-20(fp)
   198ec:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   198f0:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   198f4:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   198f8:	e0bffb17 	ldw	r2,-20(fp)
   198fc:	10002326 	beq	r2,zero,1998c <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   19900:	e0bfff17 	ldw	r2,-4(fp)
   19904:	10000f1e 	bne	r2,zero,19944 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   19908:	e0bffc17 	ldw	r2,-16(fp)
   1990c:	10800a17 	ldw	r2,40(r2)
   19910:	10800204 	addi	r2,r2,8
   19914:	1009883a 	mov	r4,r2
   19918:	e0bffa17 	ldw	r2,-24(fp)
   1991c:	10c00044 	addi	r3,r2,1
   19920:	e0fffa15 	stw	r3,-24(fp)
   19924:	1085883a 	add	r2,r2,r2
   19928:	1085883a 	add	r2,r2,r2
   1992c:	1007883a 	mov	r3,r2
   19930:	e0bffd17 	ldw	r2,-12(fp)
   19934:	10c5883a 	add	r2,r2,r3
   19938:	10800017 	ldw	r2,0(r2)
   1993c:	20800035 	stwio	r2,0(r4)
   19940:	00000e06 	br	1997c <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   19944:	e0bffc17 	ldw	r2,-16(fp)
   19948:	10800a17 	ldw	r2,40(r2)
   1994c:	10800304 	addi	r2,r2,12
   19950:	1009883a 	mov	r4,r2
   19954:	e0bffa17 	ldw	r2,-24(fp)
   19958:	10c00044 	addi	r3,r2,1
   1995c:	e0fffa15 	stw	r3,-24(fp)
   19960:	1085883a 	add	r2,r2,r2
   19964:	1085883a 	add	r2,r2,r2
   19968:	1007883a 	mov	r3,r2
   1996c:	e0bffd17 	ldw	r2,-12(fp)
   19970:	10c5883a 	add	r2,r2,r3
   19974:	10800017 	ldw	r2,0(r2)
   19978:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   1997c:	e0fffa17 	ldw	r3,-24(fp)
   19980:	e0bffe17 	ldw	r2,-8(fp)
   19984:	18bfce16 	blt	r3,r2,198c0 <__alt_data_end+0xfffe8b80>
   19988:	00000106 	br	19990 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
   1998c:	0001883a 	nop
		}
	}
	return count;
   19990:	e0bffa17 	ldw	r2,-24(fp)
}
   19994:	e037883a 	mov	sp,fp
   19998:	df000017 	ldw	fp,0(sp)
   1999c:	dec00104 	addi	sp,sp,4
   199a0:	f800283a 	ret

000199a4 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   199a4:	defffd04 	addi	sp,sp,-12
   199a8:	df000215 	stw	fp,8(sp)
   199ac:	df000204 	addi	fp,sp,8
   199b0:	e13ffe15 	stw	r4,-8(fp)
   199b4:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   199b8:	e0bfff17 	ldw	r2,-4(fp)
   199bc:	1000051e 	bne	r2,zero,199d4 <alt_up_audio_read_fifo_head+0x30>
   199c0:	e0bffe17 	ldw	r2,-8(fp)
   199c4:	10800a17 	ldw	r2,40(r2)
   199c8:	10800204 	addi	r2,r2,8
   199cc:	10800037 	ldwio	r2,0(r2)
   199d0:	00000406 	br	199e4 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   199d4:	e0bffe17 	ldw	r2,-8(fp)
   199d8:	10800a17 	ldw	r2,40(r2)
   199dc:	10800304 	addi	r2,r2,12
   199e0:	10800037 	ldwio	r2,0(r2)
}
   199e4:	e037883a 	mov	sp,fp
   199e8:	df000017 	ldw	fp,0(sp)
   199ec:	dec00104 	addi	sp,sp,4
   199f0:	f800283a 	ret

000199f4 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   199f4:	defffc04 	addi	sp,sp,-16
   199f8:	df000315 	stw	fp,12(sp)
   199fc:	df000304 	addi	fp,sp,12
   19a00:	e13ffd15 	stw	r4,-12(fp)
   19a04:	e17ffe15 	stw	r5,-8(fp)
   19a08:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   19a0c:	e0bfff17 	ldw	r2,-4(fp)
   19a10:	1000071e 	bne	r2,zero,19a30 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   19a14:	e0bffd17 	ldw	r2,-12(fp)
   19a18:	10800a17 	ldw	r2,40(r2)
   19a1c:	10800204 	addi	r2,r2,8
   19a20:	1007883a 	mov	r3,r2
   19a24:	e0bffe17 	ldw	r2,-8(fp)
   19a28:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
   19a2c:	00000606 	br	19a48 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   19a30:	e0bffd17 	ldw	r2,-12(fp)
   19a34:	10800a17 	ldw	r2,40(r2)
   19a38:	10800304 	addi	r2,r2,12
   19a3c:	1007883a 	mov	r3,r2
   19a40:	e0bffe17 	ldw	r2,-8(fp)
   19a44:	18800035 	stwio	r2,0(r3)
}
   19a48:	0001883a 	nop
   19a4c:	e037883a 	mov	sp,fp
   19a50:	df000017 	ldw	fp,0(sp)
   19a54:	dec00104 	addi	sp,sp,4
   19a58:	f800283a 	ret

00019a5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   19a5c:	defff504 	addi	sp,sp,-44
   19a60:	df000a15 	stw	fp,40(sp)
   19a64:	df000a04 	addi	fp,sp,40
   19a68:	e13ffc15 	stw	r4,-16(fp)
   19a6c:	e17ffd15 	stw	r5,-12(fp)
   19a70:	e1bffe15 	stw	r6,-8(fp)
   19a74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   19a78:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   19a7c:	d0a74c17 	ldw	r2,-25296(gp)
  
  if (alt_ticks_per_second ())
   19a80:	10003c26 	beq	r2,zero,19b74 <alt_alarm_start+0x118>
  {
    if (alarm)
   19a84:	e0bffc17 	ldw	r2,-16(fp)
   19a88:	10003826 	beq	r2,zero,19b6c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   19a8c:	e0bffc17 	ldw	r2,-16(fp)
   19a90:	e0fffe17 	ldw	r3,-8(fp)
   19a94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   19a98:	e0bffc17 	ldw	r2,-16(fp)
   19a9c:	e0ffff17 	ldw	r3,-4(fp)
   19aa0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19aa4:	0005303a 	rdctl	r2,status
   19aa8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19aac:	e0fff917 	ldw	r3,-28(fp)
   19ab0:	00bfff84 	movi	r2,-2
   19ab4:	1884703a 	and	r2,r3,r2
   19ab8:	1001703a 	wrctl	status,r2
  
  return context;
   19abc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   19ac0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   19ac4:	d0a74d17 	ldw	r2,-25292(gp)
      
      current_nticks = alt_nticks();
   19ac8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   19acc:	e0fffd17 	ldw	r3,-12(fp)
   19ad0:	e0bff617 	ldw	r2,-40(fp)
   19ad4:	1885883a 	add	r2,r3,r2
   19ad8:	10c00044 	addi	r3,r2,1
   19adc:	e0bffc17 	ldw	r2,-16(fp)
   19ae0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   19ae4:	e0bffc17 	ldw	r2,-16(fp)
   19ae8:	10c00217 	ldw	r3,8(r2)
   19aec:	e0bff617 	ldw	r2,-40(fp)
   19af0:	1880042e 	bgeu	r3,r2,19b04 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   19af4:	e0bffc17 	ldw	r2,-16(fp)
   19af8:	00c00044 	movi	r3,1
   19afc:	10c00405 	stb	r3,16(r2)
   19b00:	00000206 	br	19b0c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   19b04:	e0bffc17 	ldw	r2,-16(fp)
   19b08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   19b0c:	e0bffc17 	ldw	r2,-16(fp)
   19b10:	d0e02e04 	addi	r3,gp,-32584
   19b14:	e0fffa15 	stw	r3,-24(fp)
   19b18:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   19b1c:	e0bffb17 	ldw	r2,-20(fp)
   19b20:	e0fffa17 	ldw	r3,-24(fp)
   19b24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   19b28:	e0bffa17 	ldw	r2,-24(fp)
   19b2c:	10c00017 	ldw	r3,0(r2)
   19b30:	e0bffb17 	ldw	r2,-20(fp)
   19b34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   19b38:	e0bffa17 	ldw	r2,-24(fp)
   19b3c:	10800017 	ldw	r2,0(r2)
   19b40:	e0fffb17 	ldw	r3,-20(fp)
   19b44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   19b48:	e0bffa17 	ldw	r2,-24(fp)
   19b4c:	e0fffb17 	ldw	r3,-20(fp)
   19b50:	10c00015 	stw	r3,0(r2)
   19b54:	e0bff817 	ldw	r2,-32(fp)
   19b58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b5c:	e0bff717 	ldw	r2,-36(fp)
   19b60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   19b64:	0005883a 	mov	r2,zero
   19b68:	00000306 	br	19b78 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   19b6c:	00bffa84 	movi	r2,-22
   19b70:	00000106 	br	19b78 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   19b74:	00bfde84 	movi	r2,-134
  }
}
   19b78:	e037883a 	mov	sp,fp
   19b7c:	df000017 	ldw	fp,0(sp)
   19b80:	dec00104 	addi	sp,sp,4
   19b84:	f800283a 	ret

00019b88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   19b88:	deffff04 	addi	sp,sp,-4
   19b8c:	df000015 	stw	fp,0(sp)
   19b90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   19b94:	0001883a 	nop
   19b98:	e037883a 	mov	sp,fp
   19b9c:	df000017 	ldw	fp,0(sp)
   19ba0:	dec00104 	addi	sp,sp,4
   19ba4:	f800283a 	ret

00019ba8 <alt_get_errno>:
   19ba8:	defffe04 	addi	sp,sp,-8
   19bac:	dfc00115 	stw	ra,4(sp)
   19bb0:	df000015 	stw	fp,0(sp)
   19bb4:	d839883a 	mov	fp,sp
   19bb8:	d0a00c17 	ldw	r2,-32720(gp)
   19bbc:	10000326 	beq	r2,zero,19bcc <alt_get_errno+0x24>
   19bc0:	d0a00c17 	ldw	r2,-32720(gp)
   19bc4:	103ee83a 	callr	r2
   19bc8:	00000106 	br	19bd0 <alt_get_errno+0x28>
   19bcc:	d0a72b04 	addi	r2,gp,-25428
   19bd0:	e037883a 	mov	sp,fp
   19bd4:	dfc00117 	ldw	ra,4(sp)
   19bd8:	df000017 	ldw	fp,0(sp)
   19bdc:	dec00204 	addi	sp,sp,8
   19be0:	f800283a 	ret

00019be4 <alt_dev_llist_insert>:
   19be4:	defffa04 	addi	sp,sp,-24
   19be8:	dfc00515 	stw	ra,20(sp)
   19bec:	df000415 	stw	fp,16(sp)
   19bf0:	df000404 	addi	fp,sp,16
   19bf4:	e13ffe15 	stw	r4,-8(fp)
   19bf8:	e17fff15 	stw	r5,-4(fp)
   19bfc:	e0bffe17 	ldw	r2,-8(fp)
   19c00:	10000326 	beq	r2,zero,19c10 <alt_dev_llist_insert+0x2c>
   19c04:	e0bffe17 	ldw	r2,-8(fp)
   19c08:	10800217 	ldw	r2,8(r2)
   19c0c:	1000061e 	bne	r2,zero,19c28 <alt_dev_llist_insert+0x44>
   19c10:	0019ba80 	call	19ba8 <alt_get_errno>
   19c14:	1007883a 	mov	r3,r2
   19c18:	00800584 	movi	r2,22
   19c1c:	18800015 	stw	r2,0(r3)
   19c20:	00bffa84 	movi	r2,-22
   19c24:	00001306 	br	19c74 <alt_dev_llist_insert+0x90>
   19c28:	e0bffe17 	ldw	r2,-8(fp)
   19c2c:	e0ffff17 	ldw	r3,-4(fp)
   19c30:	e0fffc15 	stw	r3,-16(fp)
   19c34:	e0bffd15 	stw	r2,-12(fp)
   19c38:	e0bffd17 	ldw	r2,-12(fp)
   19c3c:	e0fffc17 	ldw	r3,-16(fp)
   19c40:	10c00115 	stw	r3,4(r2)
   19c44:	e0bffc17 	ldw	r2,-16(fp)
   19c48:	10c00017 	ldw	r3,0(r2)
   19c4c:	e0bffd17 	ldw	r2,-12(fp)
   19c50:	10c00015 	stw	r3,0(r2)
   19c54:	e0bffc17 	ldw	r2,-16(fp)
   19c58:	10800017 	ldw	r2,0(r2)
   19c5c:	e0fffd17 	ldw	r3,-12(fp)
   19c60:	10c00115 	stw	r3,4(r2)
   19c64:	e0bffc17 	ldw	r2,-16(fp)
   19c68:	e0fffd17 	ldw	r3,-12(fp)
   19c6c:	10c00015 	stw	r3,0(r2)
   19c70:	0005883a 	mov	r2,zero
   19c74:	e037883a 	mov	sp,fp
   19c78:	dfc00117 	ldw	ra,4(sp)
   19c7c:	df000017 	ldw	fp,0(sp)
   19c80:	dec00204 	addi	sp,sp,8
   19c84:	f800283a 	ret

00019c88 <_do_ctors>:
   19c88:	defffd04 	addi	sp,sp,-12
   19c8c:	dfc00215 	stw	ra,8(sp)
   19c90:	df000115 	stw	fp,4(sp)
   19c94:	df000104 	addi	fp,sp,4
   19c98:	008000b4 	movhi	r2,2
   19c9c:	10ac0304 	addi	r2,r2,-20468
   19ca0:	e0bfff15 	stw	r2,-4(fp)
   19ca4:	00000606 	br	19cc0 <_do_ctors+0x38>
   19ca8:	e0bfff17 	ldw	r2,-4(fp)
   19cac:	10800017 	ldw	r2,0(r2)
   19cb0:	103ee83a 	callr	r2
   19cb4:	e0bfff17 	ldw	r2,-4(fp)
   19cb8:	10bfff04 	addi	r2,r2,-4
   19cbc:	e0bfff15 	stw	r2,-4(fp)
   19cc0:	e0ffff17 	ldw	r3,-4(fp)
   19cc4:	008000b4 	movhi	r2,2
   19cc8:	10ac0404 	addi	r2,r2,-20464
   19ccc:	18bff62e 	bgeu	r3,r2,19ca8 <__alt_data_end+0xfffe8f68>
   19cd0:	0001883a 	nop
   19cd4:	e037883a 	mov	sp,fp
   19cd8:	dfc00117 	ldw	ra,4(sp)
   19cdc:	df000017 	ldw	fp,0(sp)
   19ce0:	dec00204 	addi	sp,sp,8
   19ce4:	f800283a 	ret

00019ce8 <_do_dtors>:
   19ce8:	defffd04 	addi	sp,sp,-12
   19cec:	dfc00215 	stw	ra,8(sp)
   19cf0:	df000115 	stw	fp,4(sp)
   19cf4:	df000104 	addi	fp,sp,4
   19cf8:	008000b4 	movhi	r2,2
   19cfc:	10ac0304 	addi	r2,r2,-20468
   19d00:	e0bfff15 	stw	r2,-4(fp)
   19d04:	00000606 	br	19d20 <_do_dtors+0x38>
   19d08:	e0bfff17 	ldw	r2,-4(fp)
   19d0c:	10800017 	ldw	r2,0(r2)
   19d10:	103ee83a 	callr	r2
   19d14:	e0bfff17 	ldw	r2,-4(fp)
   19d18:	10bfff04 	addi	r2,r2,-4
   19d1c:	e0bfff15 	stw	r2,-4(fp)
   19d20:	e0ffff17 	ldw	r3,-4(fp)
   19d24:	008000b4 	movhi	r2,2
   19d28:	10ac0404 	addi	r2,r2,-20464
   19d2c:	18bff62e 	bgeu	r3,r2,19d08 <__alt_data_end+0xfffe8fc8>
   19d30:	0001883a 	nop
   19d34:	e037883a 	mov	sp,fp
   19d38:	dfc00117 	ldw	ra,4(sp)
   19d3c:	df000017 	ldw	fp,0(sp)
   19d40:	dec00204 	addi	sp,sp,8
   19d44:	f800283a 	ret

00019d48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   19d48:	defffa04 	addi	sp,sp,-24
   19d4c:	dfc00515 	stw	ra,20(sp)
   19d50:	df000415 	stw	fp,16(sp)
   19d54:	df000404 	addi	fp,sp,16
   19d58:	e13ffe15 	stw	r4,-8(fp)
   19d5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   19d60:	e0bfff17 	ldw	r2,-4(fp)
   19d64:	10800017 	ldw	r2,0(r2)
   19d68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   19d6c:	e13ffe17 	ldw	r4,-8(fp)
   19d70:	00063b00 	call	63b0 <strlen>
   19d74:	10800044 	addi	r2,r2,1
   19d78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   19d7c:	00000d06 	br	19db4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   19d80:	e0bffc17 	ldw	r2,-16(fp)
   19d84:	10800217 	ldw	r2,8(r2)
   19d88:	e0fffd17 	ldw	r3,-12(fp)
   19d8c:	180d883a 	mov	r6,r3
   19d90:	e17ffe17 	ldw	r5,-8(fp)
   19d94:	1009883a 	mov	r4,r2
   19d98:	001ab600 	call	1ab60 <memcmp>
   19d9c:	1000021e 	bne	r2,zero,19da8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   19da0:	e0bffc17 	ldw	r2,-16(fp)
   19da4:	00000706 	br	19dc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   19da8:	e0bffc17 	ldw	r2,-16(fp)
   19dac:	10800017 	ldw	r2,0(r2)
   19db0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   19db4:	e0fffc17 	ldw	r3,-16(fp)
   19db8:	e0bfff17 	ldw	r2,-4(fp)
   19dbc:	18bff01e 	bne	r3,r2,19d80 <__alt_data_end+0xfffe9040>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   19dc0:	0005883a 	mov	r2,zero
}
   19dc4:	e037883a 	mov	sp,fp
   19dc8:	dfc00117 	ldw	ra,4(sp)
   19dcc:	df000017 	ldw	fp,0(sp)
   19dd0:	dec00204 	addi	sp,sp,8
   19dd4:	f800283a 	ret

00019dd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   19dd8:	deffff04 	addi	sp,sp,-4
   19ddc:	df000015 	stw	fp,0(sp)
   19de0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   19de4:	0001883a 	nop
   19de8:	e037883a 	mov	sp,fp
   19dec:	df000017 	ldw	fp,0(sp)
   19df0:	dec00104 	addi	sp,sp,4
   19df4:	f800283a 	ret

00019df8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   19df8:	defff804 	addi	sp,sp,-32
   19dfc:	dfc00715 	stw	ra,28(sp)
   19e00:	df000615 	stw	fp,24(sp)
   19e04:	dc000515 	stw	r16,20(sp)
   19e08:	df000604 	addi	fp,sp,24
   19e0c:	e13ffb15 	stw	r4,-20(fp)
   19e10:	e17ffc15 	stw	r5,-16(fp)
   19e14:	e1bffd15 	stw	r6,-12(fp)
   19e18:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   19e1c:	e1bffe17 	ldw	r6,-8(fp)
   19e20:	e17ffd17 	ldw	r5,-12(fp)
   19e24:	e13ffc17 	ldw	r4,-16(fp)
   19e28:	001a2000 	call	1a200 <open>
   19e2c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   19e30:	e0bffa17 	ldw	r2,-24(fp)
   19e34:	10002216 	blt	r2,zero,19ec0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   19e38:	040000b4 	movhi	r16,2
   19e3c:	84398904 	addi	r16,r16,-6620
   19e40:	e0bffa17 	ldw	r2,-24(fp)
   19e44:	01400304 	movi	r5,12
   19e48:	1009883a 	mov	r4,r2
   19e4c:	0002f440 	call	2f44 <__mulsi3>
   19e50:	8085883a 	add	r2,r16,r2
   19e54:	10c00017 	ldw	r3,0(r2)
   19e58:	e0bffb17 	ldw	r2,-20(fp)
   19e5c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   19e60:	040000b4 	movhi	r16,2
   19e64:	84398904 	addi	r16,r16,-6620
   19e68:	e0bffa17 	ldw	r2,-24(fp)
   19e6c:	01400304 	movi	r5,12
   19e70:	1009883a 	mov	r4,r2
   19e74:	0002f440 	call	2f44 <__mulsi3>
   19e78:	8085883a 	add	r2,r16,r2
   19e7c:	10800104 	addi	r2,r2,4
   19e80:	10c00017 	ldw	r3,0(r2)
   19e84:	e0bffb17 	ldw	r2,-20(fp)
   19e88:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   19e8c:	040000b4 	movhi	r16,2
   19e90:	84398904 	addi	r16,r16,-6620
   19e94:	e0bffa17 	ldw	r2,-24(fp)
   19e98:	01400304 	movi	r5,12
   19e9c:	1009883a 	mov	r4,r2
   19ea0:	0002f440 	call	2f44 <__mulsi3>
   19ea4:	8085883a 	add	r2,r16,r2
   19ea8:	10800204 	addi	r2,r2,8
   19eac:	10c00017 	ldw	r3,0(r2)
   19eb0:	e0bffb17 	ldw	r2,-20(fp)
   19eb4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   19eb8:	e13ffa17 	ldw	r4,-24(fp)
   19ebc:	00106400 	call	10640 <alt_release_fd>
  }
} 
   19ec0:	0001883a 	nop
   19ec4:	e6ffff04 	addi	sp,fp,-4
   19ec8:	dfc00217 	ldw	ra,8(sp)
   19ecc:	df000117 	ldw	fp,4(sp)
   19ed0:	dc000017 	ldw	r16,0(sp)
   19ed4:	dec00304 	addi	sp,sp,12
   19ed8:	f800283a 	ret

00019edc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   19edc:	defffb04 	addi	sp,sp,-20
   19ee0:	dfc00415 	stw	ra,16(sp)
   19ee4:	df000315 	stw	fp,12(sp)
   19ee8:	df000304 	addi	fp,sp,12
   19eec:	e13ffd15 	stw	r4,-12(fp)
   19ef0:	e17ffe15 	stw	r5,-8(fp)
   19ef4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   19ef8:	01c07fc4 	movi	r7,511
   19efc:	01800044 	movi	r6,1
   19f00:	e17ffd17 	ldw	r5,-12(fp)
   19f04:	010000b4 	movhi	r4,2
   19f08:	21398c04 	addi	r4,r4,-6608
   19f0c:	0019df80 	call	19df8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   19f10:	01c07fc4 	movi	r7,511
   19f14:	000d883a 	mov	r6,zero
   19f18:	e17ffe17 	ldw	r5,-8(fp)
   19f1c:	010000b4 	movhi	r4,2
   19f20:	21398904 	addi	r4,r4,-6620
   19f24:	0019df80 	call	19df8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   19f28:	01c07fc4 	movi	r7,511
   19f2c:	01800044 	movi	r6,1
   19f30:	e17fff17 	ldw	r5,-4(fp)
   19f34:	010000b4 	movhi	r4,2
   19f38:	21398f04 	addi	r4,r4,-6596
   19f3c:	0019df80 	call	19df8 <alt_open_fd>
}  
   19f40:	0001883a 	nop
   19f44:	e037883a 	mov	sp,fp
   19f48:	dfc00117 	ldw	ra,4(sp)
   19f4c:	df000017 	ldw	fp,0(sp)
   19f50:	dec00204 	addi	sp,sp,8
   19f54:	f800283a 	ret

00019f58 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   19f58:	defff004 	addi	sp,sp,-64
   19f5c:	df000f15 	stw	fp,60(sp)
   19f60:	df000f04 	addi	fp,sp,60
   19f64:	e13ffd15 	stw	r4,-12(fp)
   19f68:	e17ffe15 	stw	r5,-8(fp)
   19f6c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   19f70:	00bffa84 	movi	r2,-22
   19f74:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   19f78:	e0bffd17 	ldw	r2,-12(fp)
   19f7c:	10800828 	cmpgeui	r2,r2,32
   19f80:	1000501e 	bne	r2,zero,1a0c4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f84:	0005303a 	rdctl	r2,status
   19f88:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f8c:	e0fff617 	ldw	r3,-40(fp)
   19f90:	00bfff84 	movi	r2,-2
   19f94:	1884703a 	and	r2,r3,r2
   19f98:	1001703a 	wrctl	status,r2
  
  return context;
   19f9c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   19fa0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   19fa4:	008000f4 	movhi	r2,3
   19fa8:	10b3fe04 	addi	r2,r2,-12296
   19fac:	e0fffd17 	ldw	r3,-12(fp)
   19fb0:	180690fa 	slli	r3,r3,3
   19fb4:	10c5883a 	add	r2,r2,r3
   19fb8:	e0ffff17 	ldw	r3,-4(fp)
   19fbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   19fc0:	008000f4 	movhi	r2,3
   19fc4:	10b3fe04 	addi	r2,r2,-12296
   19fc8:	e0fffd17 	ldw	r3,-12(fp)
   19fcc:	180690fa 	slli	r3,r3,3
   19fd0:	10c5883a 	add	r2,r2,r3
   19fd4:	10800104 	addi	r2,r2,4
   19fd8:	e0fffe17 	ldw	r3,-8(fp)
   19fdc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   19fe0:	e0bfff17 	ldw	r2,-4(fp)
   19fe4:	10001926 	beq	r2,zero,1a04c <alt_irq_register+0xf4>
   19fe8:	e0bffd17 	ldw	r2,-12(fp)
   19fec:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ff0:	0005303a 	rdctl	r2,status
   19ff4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ff8:	e0fff717 	ldw	r3,-36(fp)
   19ffc:	00bfff84 	movi	r2,-2
   1a000:	1884703a 	and	r2,r3,r2
   1a004:	1001703a 	wrctl	status,r2
  
  return context;
   1a008:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a00c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1a010:	00c00044 	movi	r3,1
   1a014:	e0bff217 	ldw	r2,-56(fp)
   1a018:	1884983a 	sll	r2,r3,r2
   1a01c:	1007883a 	mov	r3,r2
   1a020:	d0a74b17 	ldw	r2,-25300(gp)
   1a024:	1884b03a 	or	r2,r3,r2
   1a028:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a02c:	d0a74b17 	ldw	r2,-25300(gp)
   1a030:	100170fa 	wrctl	ienable,r2
   1a034:	e0bff817 	ldw	r2,-32(fp)
   1a038:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a03c:	e0bff917 	ldw	r2,-28(fp)
   1a040:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a044:	0005883a 	mov	r2,zero
   1a048:	00001906 	br	1a0b0 <alt_irq_register+0x158>
   1a04c:	e0bffd17 	ldw	r2,-12(fp)
   1a050:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a054:	0005303a 	rdctl	r2,status
   1a058:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a05c:	e0fffa17 	ldw	r3,-24(fp)
   1a060:	00bfff84 	movi	r2,-2
   1a064:	1884703a 	and	r2,r3,r2
   1a068:	1001703a 	wrctl	status,r2
  
  return context;
   1a06c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1a070:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1a074:	00c00044 	movi	r3,1
   1a078:	e0bff417 	ldw	r2,-48(fp)
   1a07c:	1884983a 	sll	r2,r3,r2
   1a080:	0084303a 	nor	r2,zero,r2
   1a084:	1007883a 	mov	r3,r2
   1a088:	d0a74b17 	ldw	r2,-25300(gp)
   1a08c:	1884703a 	and	r2,r3,r2
   1a090:	d0a74b15 	stw	r2,-25300(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1a094:	d0a74b17 	ldw	r2,-25300(gp)
   1a098:	100170fa 	wrctl	ienable,r2
   1a09c:	e0bffb17 	ldw	r2,-20(fp)
   1a0a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a0a4:	e0bffc17 	ldw	r2,-16(fp)
   1a0a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1a0ac:	0005883a 	mov	r2,zero
   1a0b0:	e0bff115 	stw	r2,-60(fp)
   1a0b4:	e0bff317 	ldw	r2,-52(fp)
   1a0b8:	e0bff515 	stw	r2,-44(fp)
   1a0bc:	e0bff517 	ldw	r2,-44(fp)
   1a0c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1a0c4:	e0bff117 	ldw	r2,-60(fp)
}
   1a0c8:	e037883a 	mov	sp,fp
   1a0cc:	df000017 	ldw	fp,0(sp)
   1a0d0:	dec00104 	addi	sp,sp,4
   1a0d4:	f800283a 	ret

0001a0d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a0d8:	defffe04 	addi	sp,sp,-8
   1a0dc:	dfc00115 	stw	ra,4(sp)
   1a0e0:	df000015 	stw	fp,0(sp)
   1a0e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a0e8:	d0a00c17 	ldw	r2,-32720(gp)
   1a0ec:	10000326 	beq	r2,zero,1a0fc <alt_get_errno+0x24>
   1a0f0:	d0a00c17 	ldw	r2,-32720(gp)
   1a0f4:	103ee83a 	callr	r2
   1a0f8:	00000106 	br	1a100 <alt_get_errno+0x28>
   1a0fc:	d0a72b04 	addi	r2,gp,-25428
}
   1a100:	e037883a 	mov	sp,fp
   1a104:	dfc00117 	ldw	ra,4(sp)
   1a108:	df000017 	ldw	fp,0(sp)
   1a10c:	dec00204 	addi	sp,sp,8
   1a110:	f800283a 	ret

0001a114 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1a114:	defffb04 	addi	sp,sp,-20
   1a118:	dfc00415 	stw	ra,16(sp)
   1a11c:	df000315 	stw	fp,12(sp)
   1a120:	dc000215 	stw	r16,8(sp)
   1a124:	df000304 	addi	fp,sp,12
   1a128:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1a12c:	e0bffe17 	ldw	r2,-8(fp)
   1a130:	10800217 	ldw	r2,8(r2)
   1a134:	10d00034 	orhi	r3,r2,16384
   1a138:	e0bffe17 	ldw	r2,-8(fp)
   1a13c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a140:	e03ffd15 	stw	zero,-12(fp)
   1a144:	00002306 	br	1a1d4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a148:	040000b4 	movhi	r16,2
   1a14c:	84398904 	addi	r16,r16,-6620
   1a150:	e0bffd17 	ldw	r2,-12(fp)
   1a154:	01400304 	movi	r5,12
   1a158:	1009883a 	mov	r4,r2
   1a15c:	0002f440 	call	2f44 <__mulsi3>
   1a160:	8085883a 	add	r2,r16,r2
   1a164:	10c00017 	ldw	r3,0(r2)
   1a168:	e0bffe17 	ldw	r2,-8(fp)
   1a16c:	10800017 	ldw	r2,0(r2)
   1a170:	1880151e 	bne	r3,r2,1a1c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a174:	040000b4 	movhi	r16,2
   1a178:	84398904 	addi	r16,r16,-6620
   1a17c:	e0bffd17 	ldw	r2,-12(fp)
   1a180:	01400304 	movi	r5,12
   1a184:	1009883a 	mov	r4,r2
   1a188:	0002f440 	call	2f44 <__mulsi3>
   1a18c:	8085883a 	add	r2,r16,r2
   1a190:	10800204 	addi	r2,r2,8
   1a194:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1a198:	10000b0e 	bge	r2,zero,1a1c8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1a19c:	01400304 	movi	r5,12
   1a1a0:	e13ffd17 	ldw	r4,-12(fp)
   1a1a4:	0002f440 	call	2f44 <__mulsi3>
   1a1a8:	1007883a 	mov	r3,r2
   1a1ac:	008000b4 	movhi	r2,2
   1a1b0:	10b98904 	addi	r2,r2,-6620
   1a1b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1a1b8:	e0bffe17 	ldw	r2,-8(fp)
   1a1bc:	18800226 	beq	r3,r2,1a1c8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1a1c0:	00bffcc4 	movi	r2,-13
   1a1c4:	00000806 	br	1a1e8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1a1c8:	e0bffd17 	ldw	r2,-12(fp)
   1a1cc:	10800044 	addi	r2,r2,1
   1a1d0:	e0bffd15 	stw	r2,-12(fp)
   1a1d4:	d0a00b17 	ldw	r2,-32724(gp)
   1a1d8:	1007883a 	mov	r3,r2
   1a1dc:	e0bffd17 	ldw	r2,-12(fp)
   1a1e0:	18bfd92e 	bgeu	r3,r2,1a148 <__alt_data_end+0xfffe9408>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1a1e4:	0005883a 	mov	r2,zero
}
   1a1e8:	e6ffff04 	addi	sp,fp,-4
   1a1ec:	dfc00217 	ldw	ra,8(sp)
   1a1f0:	df000117 	ldw	fp,4(sp)
   1a1f4:	dc000017 	ldw	r16,0(sp)
   1a1f8:	dec00304 	addi	sp,sp,12
   1a1fc:	f800283a 	ret

0001a200 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1a200:	defff604 	addi	sp,sp,-40
   1a204:	dfc00915 	stw	ra,36(sp)
   1a208:	df000815 	stw	fp,32(sp)
   1a20c:	df000804 	addi	fp,sp,32
   1a210:	e13ffd15 	stw	r4,-12(fp)
   1a214:	e17ffe15 	stw	r5,-8(fp)
   1a218:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1a21c:	00bfffc4 	movi	r2,-1
   1a220:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1a224:	00bffb44 	movi	r2,-19
   1a228:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1a22c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1a230:	d1600904 	addi	r5,gp,-32732
   1a234:	e13ffd17 	ldw	r4,-12(fp)
   1a238:	0019d480 	call	19d48 <alt_find_dev>
   1a23c:	e0bff815 	stw	r2,-32(fp)
   1a240:	e0bff817 	ldw	r2,-32(fp)
   1a244:	1000051e 	bne	r2,zero,1a25c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1a248:	e13ffd17 	ldw	r4,-12(fp)
   1a24c:	001a87c0 	call	1a87c <alt_find_file>
   1a250:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1a254:	00800044 	movi	r2,1
   1a258:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1a25c:	e0bff817 	ldw	r2,-32(fp)
   1a260:	10002b26 	beq	r2,zero,1a310 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1a264:	e13ff817 	ldw	r4,-32(fp)
   1a268:	001a9840 	call	1a984 <alt_get_fd>
   1a26c:	e0bff915 	stw	r2,-28(fp)
   1a270:	e0bff917 	ldw	r2,-28(fp)
   1a274:	1000030e 	bge	r2,zero,1a284 <open+0x84>
    {
      status = index;
   1a278:	e0bff917 	ldw	r2,-28(fp)
   1a27c:	e0bffa15 	stw	r2,-24(fp)
   1a280:	00002506 	br	1a318 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   1a284:	01400304 	movi	r5,12
   1a288:	e13ff917 	ldw	r4,-28(fp)
   1a28c:	0002f440 	call	2f44 <__mulsi3>
   1a290:	1007883a 	mov	r3,r2
   1a294:	008000b4 	movhi	r2,2
   1a298:	10b98904 	addi	r2,r2,-6620
   1a29c:	1885883a 	add	r2,r3,r2
   1a2a0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1a2a4:	e0fffe17 	ldw	r3,-8(fp)
   1a2a8:	00900034 	movhi	r2,16384
   1a2ac:	10bfffc4 	addi	r2,r2,-1
   1a2b0:	1886703a 	and	r3,r3,r2
   1a2b4:	e0bffc17 	ldw	r2,-16(fp)
   1a2b8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1a2bc:	e0bffb17 	ldw	r2,-20(fp)
   1a2c0:	1000051e 	bne	r2,zero,1a2d8 <open+0xd8>
   1a2c4:	e13ffc17 	ldw	r4,-16(fp)
   1a2c8:	001a1140 	call	1a114 <alt_file_locked>
   1a2cc:	e0bffa15 	stw	r2,-24(fp)
   1a2d0:	e0bffa17 	ldw	r2,-24(fp)
   1a2d4:	10001016 	blt	r2,zero,1a318 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1a2d8:	e0bff817 	ldw	r2,-32(fp)
   1a2dc:	10800317 	ldw	r2,12(r2)
   1a2e0:	10000826 	beq	r2,zero,1a304 <open+0x104>
   1a2e4:	e0bff817 	ldw	r2,-32(fp)
   1a2e8:	10800317 	ldw	r2,12(r2)
   1a2ec:	e1ffff17 	ldw	r7,-4(fp)
   1a2f0:	e1bffe17 	ldw	r6,-8(fp)
   1a2f4:	e17ffd17 	ldw	r5,-12(fp)
   1a2f8:	e13ffc17 	ldw	r4,-16(fp)
   1a2fc:	103ee83a 	callr	r2
   1a300:	00000106 	br	1a308 <open+0x108>
   1a304:	0005883a 	mov	r2,zero
   1a308:	e0bffa15 	stw	r2,-24(fp)
   1a30c:	00000206 	br	1a318 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1a310:	00bffb44 	movi	r2,-19
   1a314:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1a318:	e0bffa17 	ldw	r2,-24(fp)
   1a31c:	1000090e 	bge	r2,zero,1a344 <open+0x144>
  {
    alt_release_fd (index);  
   1a320:	e13ff917 	ldw	r4,-28(fp)
   1a324:	00106400 	call	10640 <alt_release_fd>
    ALT_ERRNO = -status;
   1a328:	001a0d80 	call	1a0d8 <alt_get_errno>
   1a32c:	1007883a 	mov	r3,r2
   1a330:	e0bffa17 	ldw	r2,-24(fp)
   1a334:	0085c83a 	sub	r2,zero,r2
   1a338:	18800015 	stw	r2,0(r3)
    return -1;
   1a33c:	00bfffc4 	movi	r2,-1
   1a340:	00000106 	br	1a348 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   1a344:	e0bff917 	ldw	r2,-28(fp)
}
   1a348:	e037883a 	mov	sp,fp
   1a34c:	dfc00117 	ldw	ra,4(sp)
   1a350:	df000017 	ldw	fp,0(sp)
   1a354:	dec00204 	addi	sp,sp,8
   1a358:	f800283a 	ret

0001a35c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1a35c:	defffa04 	addi	sp,sp,-24
   1a360:	df000515 	stw	fp,20(sp)
   1a364:	df000504 	addi	fp,sp,20
   1a368:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a36c:	0005303a 	rdctl	r2,status
   1a370:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a374:	e0fffc17 	ldw	r3,-16(fp)
   1a378:	00bfff84 	movi	r2,-2
   1a37c:	1884703a 	and	r2,r3,r2
   1a380:	1001703a 	wrctl	status,r2
  
  return context;
   1a384:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1a388:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1a38c:	e0bfff17 	ldw	r2,-4(fp)
   1a390:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1a394:	e0bffd17 	ldw	r2,-12(fp)
   1a398:	10800017 	ldw	r2,0(r2)
   1a39c:	e0fffd17 	ldw	r3,-12(fp)
   1a3a0:	18c00117 	ldw	r3,4(r3)
   1a3a4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1a3a8:	e0bffd17 	ldw	r2,-12(fp)
   1a3ac:	10800117 	ldw	r2,4(r2)
   1a3b0:	e0fffd17 	ldw	r3,-12(fp)
   1a3b4:	18c00017 	ldw	r3,0(r3)
   1a3b8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1a3bc:	e0bffd17 	ldw	r2,-12(fp)
   1a3c0:	e0fffd17 	ldw	r3,-12(fp)
   1a3c4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1a3c8:	e0bffd17 	ldw	r2,-12(fp)
   1a3cc:	e0fffd17 	ldw	r3,-12(fp)
   1a3d0:	10c00015 	stw	r3,0(r2)
   1a3d4:	e0bffb17 	ldw	r2,-20(fp)
   1a3d8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a3dc:	e0bffe17 	ldw	r2,-8(fp)
   1a3e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1a3e4:	0001883a 	nop
   1a3e8:	e037883a 	mov	sp,fp
   1a3ec:	df000017 	ldw	fp,0(sp)
   1a3f0:	dec00104 	addi	sp,sp,4
   1a3f4:	f800283a 	ret

0001a3f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1a3f8:	defffb04 	addi	sp,sp,-20
   1a3fc:	dfc00415 	stw	ra,16(sp)
   1a400:	df000315 	stw	fp,12(sp)
   1a404:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1a408:	d0a02e17 	ldw	r2,-32584(gp)
   1a40c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1a410:	d0a74d17 	ldw	r2,-25292(gp)
   1a414:	10800044 	addi	r2,r2,1
   1a418:	d0a74d15 	stw	r2,-25292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1a41c:	00002e06 	br	1a4d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1a420:	e0bffd17 	ldw	r2,-12(fp)
   1a424:	10800017 	ldw	r2,0(r2)
   1a428:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1a42c:	e0bffd17 	ldw	r2,-12(fp)
   1a430:	10800403 	ldbu	r2,16(r2)
   1a434:	10803fcc 	andi	r2,r2,255
   1a438:	10000426 	beq	r2,zero,1a44c <alt_tick+0x54>
   1a43c:	d0a74d17 	ldw	r2,-25292(gp)
   1a440:	1000021e 	bne	r2,zero,1a44c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1a444:	e0bffd17 	ldw	r2,-12(fp)
   1a448:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1a44c:	e0bffd17 	ldw	r2,-12(fp)
   1a450:	10800217 	ldw	r2,8(r2)
   1a454:	d0e74d17 	ldw	r3,-25292(gp)
   1a458:	18801d36 	bltu	r3,r2,1a4d0 <alt_tick+0xd8>
   1a45c:	e0bffd17 	ldw	r2,-12(fp)
   1a460:	10800403 	ldbu	r2,16(r2)
   1a464:	10803fcc 	andi	r2,r2,255
   1a468:	1000191e 	bne	r2,zero,1a4d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1a46c:	e0bffd17 	ldw	r2,-12(fp)
   1a470:	10800317 	ldw	r2,12(r2)
   1a474:	e0fffd17 	ldw	r3,-12(fp)
   1a478:	18c00517 	ldw	r3,20(r3)
   1a47c:	1809883a 	mov	r4,r3
   1a480:	103ee83a 	callr	r2
   1a484:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1a488:	e0bfff17 	ldw	r2,-4(fp)
   1a48c:	1000031e 	bne	r2,zero,1a49c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1a490:	e13ffd17 	ldw	r4,-12(fp)
   1a494:	001a35c0 	call	1a35c <alt_alarm_stop>
   1a498:	00000d06 	br	1a4d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1a49c:	e0bffd17 	ldw	r2,-12(fp)
   1a4a0:	10c00217 	ldw	r3,8(r2)
   1a4a4:	e0bfff17 	ldw	r2,-4(fp)
   1a4a8:	1887883a 	add	r3,r3,r2
   1a4ac:	e0bffd17 	ldw	r2,-12(fp)
   1a4b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1a4b4:	e0bffd17 	ldw	r2,-12(fp)
   1a4b8:	10c00217 	ldw	r3,8(r2)
   1a4bc:	d0a74d17 	ldw	r2,-25292(gp)
   1a4c0:	1880032e 	bgeu	r3,r2,1a4d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1a4c4:	e0bffd17 	ldw	r2,-12(fp)
   1a4c8:	00c00044 	movi	r3,1
   1a4cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1a4d0:	e0bffe17 	ldw	r2,-8(fp)
   1a4d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1a4d8:	e0fffd17 	ldw	r3,-12(fp)
   1a4dc:	d0a02e04 	addi	r2,gp,-32584
   1a4e0:	18bfcf1e 	bne	r3,r2,1a420 <__alt_data_end+0xfffe96e0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1a4e4:	00118540 	call	11854 <OSTimeTick>
}
   1a4e8:	0001883a 	nop
   1a4ec:	e037883a 	mov	sp,fp
   1a4f0:	dfc00117 	ldw	ra,4(sp)
   1a4f4:	df000017 	ldw	fp,0(sp)
   1a4f8:	dec00204 	addi	sp,sp,8
   1a4fc:	f800283a 	ret

0001a500 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1a500:	deffff04 	addi	sp,sp,-4
   1a504:	df000015 	stw	fp,0(sp)
   1a508:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1a50c:	000170fa 	wrctl	ienable,zero
}
   1a510:	0001883a 	nop
   1a514:	e037883a 	mov	sp,fp
   1a518:	df000017 	ldw	fp,0(sp)
   1a51c:	dec00104 	addi	sp,sp,4
   1a520:	f800283a 	ret

0001a524 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1a524:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1a528:	d0e00217 	ldw	r3,-32760(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1a52c:	d1274617 	ldw	r4,-25320(gp)

      stw ra,  0(sp)
   1a530:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1a534:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1a538:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1a53c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1a540:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1a544:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1a548:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1a54c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1a550:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1a554:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1a558:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1a55c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1a560:	001a7980 	call	1a798 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1a564:	d1274117 	ldw	r4,-25340(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1a568:	d1673907 	ldb	r5,-25372(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1a56c:	d1274615 	stw	r4,-25320(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1a570:	d1673945 	stb	r5,-25371(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1a574:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1a578:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1a57c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1a580:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1a584:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1a588:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1a58c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1a590:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1a594:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1a598:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1a59c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1a5a0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1a5a4:	d0e00215 	stw	r3,-32760(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1a5a8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1a5ac:	f800283a 	ret

0001a5b0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1a5b0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1a5b4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1a5b8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1a5bc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1a5c0:	001a7980 	call	1a798 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1a5c4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1a5c8:	d4a73745 	stb	r18,-25379(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1a5cc:	003fe506 	br	1a564 <__alt_data_end+0xfffe9824>

0001a5d0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1a5d0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1a5d4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1a5d8:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1a5dc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1a5e0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1a5e4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1a5e8:	dec00204 	addi	sp,sp,8

      callr r2
   1a5ec:	103ee83a 	callr	r2

      nop
   1a5f0:	0001883a 	nop

0001a5f4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1a5f4:	defff704 	addi	sp,sp,-36
   1a5f8:	dfc00815 	stw	ra,32(sp)
   1a5fc:	df000715 	stw	fp,28(sp)
   1a600:	df000704 	addi	fp,sp,28
   1a604:	e13ffc15 	stw	r4,-16(fp)
   1a608:	e17ffd15 	stw	r5,-12(fp)
   1a60c:	e1bffe15 	stw	r6,-8(fp)
   1a610:	3805883a 	mov	r2,r7
   1a614:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1a618:	e0fffe17 	ldw	r3,-8(fp)
   1a61c:	00bfff04 	movi	r2,-4
   1a620:	1884703a 	and	r2,r3,r2
   1a624:	10bef704 	addi	r2,r2,-1060
   1a628:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1a62c:	01810904 	movi	r6,1060
   1a630:	000b883a 	mov	r5,zero
   1a634:	e13ff917 	ldw	r4,-28(fp)
   1a638:	00060f40 	call	60f4 <memset>
   1a63c:	e0bff917 	ldw	r2,-28(fp)
   1a640:	10c0bb04 	addi	r3,r2,748
   1a644:	e0bff917 	ldw	r2,-28(fp)
   1a648:	10c00115 	stw	r3,4(r2)
   1a64c:	e0bff917 	ldw	r2,-28(fp)
   1a650:	10c0d504 	addi	r3,r2,852
   1a654:	e0bff917 	ldw	r2,-28(fp)
   1a658:	10c00215 	stw	r3,8(r2)
   1a65c:	e0bff917 	ldw	r2,-28(fp)
   1a660:	10c0ef04 	addi	r3,r2,956
   1a664:	e0bff917 	ldw	r2,-28(fp)
   1a668:	10c00315 	stw	r3,12(r2)
   1a66c:	e0fff917 	ldw	r3,-28(fp)
   1a670:	008000b4 	movhi	r2,2
   1a674:	10b75504 	addi	r2,r2,-8876
   1a678:	18800d15 	stw	r2,52(r3)
   1a67c:	e0bff917 	ldw	r2,-28(fp)
   1a680:	00c00044 	movi	r3,1
   1a684:	10c02915 	stw	r3,164(r2)
   1a688:	10002a15 	stw	zero,168(r2)
   1a68c:	e0bff917 	ldw	r2,-28(fp)
   1a690:	00ccc384 	movi	r3,13070
   1a694:	10c02b0d 	sth	r3,172(r2)
   1a698:	e0bff917 	ldw	r2,-28(fp)
   1a69c:	00eaf344 	movi	r3,-21555
   1a6a0:	10c02b8d 	sth	r3,174(r2)
   1a6a4:	e0bff917 	ldw	r2,-28(fp)
   1a6a8:	00c48d04 	movi	r3,4660
   1a6ac:	10c02c0d 	sth	r3,176(r2)
   1a6b0:	e0bff917 	ldw	r2,-28(fp)
   1a6b4:	00f99b44 	movi	r3,-6547
   1a6b8:	10c02c8d 	sth	r3,178(r2)
   1a6bc:	e0bff917 	ldw	r2,-28(fp)
   1a6c0:	00f7bb04 	movi	r3,-8468
   1a6c4:	10c02d0d 	sth	r3,180(r2)
   1a6c8:	e0bff917 	ldw	r2,-28(fp)
   1a6cc:	00c00144 	movi	r3,5
   1a6d0:	10c02d8d 	sth	r3,182(r2)
   1a6d4:	e0bff917 	ldw	r2,-28(fp)
   1a6d8:	00c002c4 	movi	r3,11
   1a6dc:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1a6e0:	e0bff917 	ldw	r2,-28(fp)
   1a6e4:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1a6e8:	e0bffa17 	ldw	r2,-24(fp)
   1a6ec:	10bff304 	addi	r2,r2,-52
   1a6f0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1a6f4:	e0bffb17 	ldw	r2,-20(fp)
   1a6f8:	10800c04 	addi	r2,r2,48
   1a6fc:	e0fffc17 	ldw	r3,-16(fp)
   1a700:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1a704:	e0bffb17 	ldw	r2,-20(fp)
   1a708:	10800b04 	addi	r2,r2,44
   1a70c:	e0fffd17 	ldw	r3,-12(fp)
   1a710:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1a714:	e0bffb17 	ldw	r2,-20(fp)
   1a718:	10800a04 	addi	r2,r2,40
   1a71c:	e0fff917 	ldw	r3,-28(fp)
   1a720:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1a724:	008000b4 	movhi	r2,2
   1a728:	10a97404 	addi	r2,r2,-23088
   1a72c:	10c00104 	addi	r3,r2,4
   1a730:	e0bffb17 	ldw	r2,-20(fp)
   1a734:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1a738:	e0bffb17 	ldw	r2,-20(fp)
}
   1a73c:	e037883a 	mov	sp,fp
   1a740:	dfc00117 	ldw	ra,4(sp)
   1a744:	df000017 	ldw	fp,0(sp)
   1a748:	dec00204 	addi	sp,sp,8
   1a74c:	f800283a 	ret

0001a750 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1a750:	defffe04 	addi	sp,sp,-8
   1a754:	df000115 	stw	fp,4(sp)
   1a758:	df000104 	addi	fp,sp,4
   1a75c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1a760:	0001883a 	nop
   1a764:	e037883a 	mov	sp,fp
   1a768:	df000017 	ldw	fp,0(sp)
   1a76c:	dec00104 	addi	sp,sp,4
   1a770:	f800283a 	ret

0001a774 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1a774:	defffe04 	addi	sp,sp,-8
   1a778:	df000115 	stw	fp,4(sp)
   1a77c:	df000104 	addi	fp,sp,4
   1a780:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1a784:	0001883a 	nop
   1a788:	e037883a 	mov	sp,fp
   1a78c:	df000017 	ldw	fp,0(sp)
   1a790:	dec00104 	addi	sp,sp,4
   1a794:	f800283a 	ret

0001a798 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1a798:	deffff04 	addi	sp,sp,-4
   1a79c:	df000015 	stw	fp,0(sp)
   1a7a0:	d839883a 	mov	fp,sp
}
   1a7a4:	0001883a 	nop
   1a7a8:	e037883a 	mov	sp,fp
   1a7ac:	df000017 	ldw	fp,0(sp)
   1a7b0:	dec00104 	addi	sp,sp,4
   1a7b4:	f800283a 	ret

0001a7b8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1a7b8:	deffff04 	addi	sp,sp,-4
   1a7bc:	df000015 	stw	fp,0(sp)
   1a7c0:	d839883a 	mov	fp,sp
}
   1a7c4:	0001883a 	nop
   1a7c8:	e037883a 	mov	sp,fp
   1a7cc:	df000017 	ldw	fp,0(sp)
   1a7d0:	dec00104 	addi	sp,sp,4
   1a7d4:	f800283a 	ret

0001a7d8 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1a7d8:	deffff04 	addi	sp,sp,-4
   1a7dc:	df000015 	stw	fp,0(sp)
   1a7e0:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1a7e4:	0001883a 	nop
   1a7e8:	e037883a 	mov	sp,fp
   1a7ec:	df000017 	ldw	fp,0(sp)
   1a7f0:	dec00104 	addi	sp,sp,4
   1a7f4:	f800283a 	ret

0001a7f8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1a7f8:	deffff04 	addi	sp,sp,-4
   1a7fc:	df000015 	stw	fp,0(sp)
   1a800:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1a804:	0001883a 	nop
   1a808:	e037883a 	mov	sp,fp
   1a80c:	df000017 	ldw	fp,0(sp)
   1a810:	dec00104 	addi	sp,sp,4
   1a814:	f800283a 	ret

0001a818 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1a818:	deffff04 	addi	sp,sp,-4
   1a81c:	df000015 	stw	fp,0(sp)
   1a820:	d839883a 	mov	fp,sp
}
   1a824:	0001883a 	nop
   1a828:	e037883a 	mov	sp,fp
   1a82c:	df000017 	ldw	fp,0(sp)
   1a830:	dec00104 	addi	sp,sp,4
   1a834:	f800283a 	ret

0001a838 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1a838:	deffff04 	addi	sp,sp,-4
   1a83c:	df000015 	stw	fp,0(sp)
   1a840:	d839883a 	mov	fp,sp
}
   1a844:	0001883a 	nop
   1a848:	e037883a 	mov	sp,fp
   1a84c:	df000017 	ldw	fp,0(sp)
   1a850:	dec00104 	addi	sp,sp,4
   1a854:	f800283a 	ret

0001a858 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1a858:	defffe04 	addi	sp,sp,-8
   1a85c:	df000115 	stw	fp,4(sp)
   1a860:	df000104 	addi	fp,sp,4
   1a864:	e13fff15 	stw	r4,-4(fp)
}
   1a868:	0001883a 	nop
   1a86c:	e037883a 	mov	sp,fp
   1a870:	df000017 	ldw	fp,0(sp)
   1a874:	dec00104 	addi	sp,sp,4
   1a878:	f800283a 	ret

0001a87c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1a87c:	defffb04 	addi	sp,sp,-20
   1a880:	dfc00415 	stw	ra,16(sp)
   1a884:	df000315 	stw	fp,12(sp)
   1a888:	df000304 	addi	fp,sp,12
   1a88c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1a890:	d0a00717 	ldw	r2,-32740(gp)
   1a894:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a898:	00003106 	br	1a960 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1a89c:	e0bffd17 	ldw	r2,-12(fp)
   1a8a0:	10800217 	ldw	r2,8(r2)
   1a8a4:	1009883a 	mov	r4,r2
   1a8a8:	00063b00 	call	63b0 <strlen>
   1a8ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1a8b0:	e0bffd17 	ldw	r2,-12(fp)
   1a8b4:	10c00217 	ldw	r3,8(r2)
   1a8b8:	e0bffe17 	ldw	r2,-8(fp)
   1a8bc:	10bfffc4 	addi	r2,r2,-1
   1a8c0:	1885883a 	add	r2,r3,r2
   1a8c4:	10800003 	ldbu	r2,0(r2)
   1a8c8:	10803fcc 	andi	r2,r2,255
   1a8cc:	1080201c 	xori	r2,r2,128
   1a8d0:	10bfe004 	addi	r2,r2,-128
   1a8d4:	10800bd8 	cmpnei	r2,r2,47
   1a8d8:	1000031e 	bne	r2,zero,1a8e8 <alt_find_file+0x6c>
    {
      len -= 1;
   1a8dc:	e0bffe17 	ldw	r2,-8(fp)
   1a8e0:	10bfffc4 	addi	r2,r2,-1
   1a8e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a8e8:	e0bffe17 	ldw	r2,-8(fp)
   1a8ec:	e0ffff17 	ldw	r3,-4(fp)
   1a8f0:	1885883a 	add	r2,r3,r2
   1a8f4:	10800003 	ldbu	r2,0(r2)
   1a8f8:	10803fcc 	andi	r2,r2,255
   1a8fc:	1080201c 	xori	r2,r2,128
   1a900:	10bfe004 	addi	r2,r2,-128
   1a904:	10800be0 	cmpeqi	r2,r2,47
   1a908:	1000081e 	bne	r2,zero,1a92c <alt_find_file+0xb0>
   1a90c:	e0bffe17 	ldw	r2,-8(fp)
   1a910:	e0ffff17 	ldw	r3,-4(fp)
   1a914:	1885883a 	add	r2,r3,r2
   1a918:	10800003 	ldbu	r2,0(r2)
   1a91c:	10803fcc 	andi	r2,r2,255
   1a920:	1080201c 	xori	r2,r2,128
   1a924:	10bfe004 	addi	r2,r2,-128
   1a928:	10000a1e 	bne	r2,zero,1a954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1a92c:	e0bffd17 	ldw	r2,-12(fp)
   1a930:	10800217 	ldw	r2,8(r2)
   1a934:	e0fffe17 	ldw	r3,-8(fp)
   1a938:	180d883a 	mov	r6,r3
   1a93c:	e17fff17 	ldw	r5,-4(fp)
   1a940:	1009883a 	mov	r4,r2
   1a944:	001ab600 	call	1ab60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1a948:	1000021e 	bne	r2,zero,1a954 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1a94c:	e0bffd17 	ldw	r2,-12(fp)
   1a950:	00000706 	br	1a970 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1a954:	e0bffd17 	ldw	r2,-12(fp)
   1a958:	10800017 	ldw	r2,0(r2)
   1a95c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1a960:	e0fffd17 	ldw	r3,-12(fp)
   1a964:	d0a00704 	addi	r2,gp,-32740
   1a968:	18bfcc1e 	bne	r3,r2,1a89c <__alt_data_end+0xfffe9b5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1a96c:	0005883a 	mov	r2,zero
}
   1a970:	e037883a 	mov	sp,fp
   1a974:	dfc00117 	ldw	ra,4(sp)
   1a978:	df000017 	ldw	fp,0(sp)
   1a97c:	dec00204 	addi	sp,sp,8
   1a980:	f800283a 	ret

0001a984 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1a984:	defff804 	addi	sp,sp,-32
   1a988:	dfc00715 	stw	ra,28(sp)
   1a98c:	df000615 	stw	fp,24(sp)
   1a990:	dc000515 	stw	r16,20(sp)
   1a994:	df000604 	addi	fp,sp,24
   1a998:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   1a99c:	00bffa04 	movi	r2,-24
   1a9a0:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1a9a4:	d0a72f17 	ldw	r2,-25412(gp)
   1a9a8:	e0bffc15 	stw	r2,-16(fp)
   1a9ac:	e03ffd0d 	sth	zero,-12(fp)
   1a9b0:	e0bffd0b 	ldhu	r2,-12(fp)
   1a9b4:	e0fffd84 	addi	r3,fp,-10
   1a9b8:	180d883a 	mov	r6,r3
   1a9bc:	100b883a 	mov	r5,r2
   1a9c0:	e13ffc17 	ldw	r4,-16(fp)
   1a9c4:	00160a40 	call	160a4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1a9c8:	e03ffa15 	stw	zero,-24(fp)
   1a9cc:	00001d06 	br	1aa44 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
   1a9d0:	040000b4 	movhi	r16,2
   1a9d4:	84398904 	addi	r16,r16,-6620
   1a9d8:	e0bffa17 	ldw	r2,-24(fp)
   1a9dc:	01400304 	movi	r5,12
   1a9e0:	1009883a 	mov	r4,r2
   1a9e4:	0002f440 	call	2f44 <__mulsi3>
   1a9e8:	8085883a 	add	r2,r16,r2
   1a9ec:	10800017 	ldw	r2,0(r2)
   1a9f0:	1000111e 	bne	r2,zero,1aa38 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
   1a9f4:	040000b4 	movhi	r16,2
   1a9f8:	84398904 	addi	r16,r16,-6620
   1a9fc:	e0bffa17 	ldw	r2,-24(fp)
   1aa00:	01400304 	movi	r5,12
   1aa04:	1009883a 	mov	r4,r2
   1aa08:	0002f440 	call	2f44 <__mulsi3>
   1aa0c:	8085883a 	add	r2,r16,r2
   1aa10:	e0fffe17 	ldw	r3,-8(fp)
   1aa14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1aa18:	d0e00b17 	ldw	r3,-32724(gp)
   1aa1c:	e0bffa17 	ldw	r2,-24(fp)
   1aa20:	1880020e 	bge	r3,r2,1aa2c <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
   1aa24:	e0bffa17 	ldw	r2,-24(fp)
   1aa28:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
   1aa2c:	e0bffa17 	ldw	r2,-24(fp)
   1aa30:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
   1aa34:	00000606 	br	1aa50 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1aa38:	e0bffa17 	ldw	r2,-24(fp)
   1aa3c:	10800044 	addi	r2,r2,1
   1aa40:	e0bffa15 	stw	r2,-24(fp)
   1aa44:	e0bffa17 	ldw	r2,-24(fp)
   1aa48:	10800810 	cmplti	r2,r2,32
   1aa4c:	103fe01e 	bne	r2,zero,1a9d0 <__alt_data_end+0xfffe9c90>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1aa50:	d0a72f17 	ldw	r2,-25412(gp)
   1aa54:	1009883a 	mov	r4,r2
   1aa58:	001641c0 	call	1641c <OSSemPost>

  return rc;
   1aa5c:	e0bffb17 	ldw	r2,-20(fp)
}
   1aa60:	e6ffff04 	addi	sp,fp,-4
   1aa64:	dfc00217 	ldw	ra,8(sp)
   1aa68:	df000117 	ldw	fp,4(sp)
   1aa6c:	dc000017 	ldw	r16,0(sp)
   1aa70:	dec00304 	addi	sp,sp,12
   1aa74:	f800283a 	ret

0001aa78 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1aa78:	defffe04 	addi	sp,sp,-8
   1aa7c:	df000115 	stw	fp,4(sp)
   1aa80:	df000104 	addi	fp,sp,4
   1aa84:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1aa88:	e0bfff17 	ldw	r2,-4(fp)
   1aa8c:	10bffe84 	addi	r2,r2,-6
   1aa90:	10c00428 	cmpgeui	r3,r2,16
   1aa94:	18001a1e 	bne	r3,zero,1ab00 <alt_exception_cause_generated_bad_addr+0x88>
   1aa98:	100690ba 	slli	r3,r2,2
   1aa9c:	008000b4 	movhi	r2,2
   1aaa0:	10aaac04 	addi	r2,r2,-21840
   1aaa4:	1885883a 	add	r2,r3,r2
   1aaa8:	10800017 	ldw	r2,0(r2)
   1aaac:	1000683a 	jmp	r2
   1aab0:	0001aaf0 	cmpltui	zero,zero,1707
   1aab4:	0001aaf0 	cmpltui	zero,zero,1707
   1aab8:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aabc:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aac0:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aac4:	0001aaf0 	cmpltui	zero,zero,1707
   1aac8:	0001aaf8 	rdprs	zero,zero,1707
   1aacc:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aad0:	0001aaf0 	cmpltui	zero,zero,1707
   1aad4:	0001aaf0 	cmpltui	zero,zero,1707
   1aad8:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aadc:	0001aaf0 	cmpltui	zero,zero,1707
   1aae0:	0001aaf8 	rdprs	zero,zero,1707
   1aae4:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aae8:	0001ab00 	call	1ab0 <__ieee754_pow+0x4a8>
   1aaec:	0001aaf0 	cmpltui	zero,zero,1707
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1aaf0:	00800044 	movi	r2,1
   1aaf4:	00000306 	br	1ab04 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1aaf8:	0005883a 	mov	r2,zero
   1aafc:	00000106 	br	1ab04 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1ab00:	0005883a 	mov	r2,zero
  }
}
   1ab04:	e037883a 	mov	sp,fp
   1ab08:	df000017 	ldw	fp,0(sp)
   1ab0c:	dec00104 	addi	sp,sp,4
   1ab10:	f800283a 	ret

0001ab14 <atexit>:
   1ab14:	200b883a 	mov	r5,r4
   1ab18:	000f883a 	mov	r7,zero
   1ab1c:	000d883a 	mov	r6,zero
   1ab20:	0009883a 	mov	r4,zero
   1ab24:	001ad441 	jmpi	1ad44 <__register_exitproc>

0001ab28 <exit>:
   1ab28:	defffe04 	addi	sp,sp,-8
   1ab2c:	000b883a 	mov	r5,zero
   1ab30:	dc000015 	stw	r16,0(sp)
   1ab34:	dfc00115 	stw	ra,4(sp)
   1ab38:	2021883a 	mov	r16,r4
   1ab3c:	001ae5c0 	call	1ae5c <__call_exitprocs>
   1ab40:	008000b4 	movhi	r2,2
   1ab44:	10be1d04 	addi	r2,r2,-1932
   1ab48:	11000017 	ldw	r4,0(r2)
   1ab4c:	20800f17 	ldw	r2,60(r4)
   1ab50:	10000126 	beq	r2,zero,1ab58 <exit+0x30>
   1ab54:	103ee83a 	callr	r2
   1ab58:	8009883a 	mov	r4,r16
   1ab5c:	001afdc0 	call	1afdc <_exit>

0001ab60 <memcmp>:
   1ab60:	01c000c4 	movi	r7,3
   1ab64:	3980192e 	bgeu	r7,r6,1abcc <memcmp+0x6c>
   1ab68:	2144b03a 	or	r2,r4,r5
   1ab6c:	11c4703a 	and	r2,r2,r7
   1ab70:	10000f26 	beq	r2,zero,1abb0 <memcmp+0x50>
   1ab74:	20800003 	ldbu	r2,0(r4)
   1ab78:	28c00003 	ldbu	r3,0(r5)
   1ab7c:	10c0151e 	bne	r2,r3,1abd4 <memcmp+0x74>
   1ab80:	31bfff84 	addi	r6,r6,-2
   1ab84:	01ffffc4 	movi	r7,-1
   1ab88:	00000406 	br	1ab9c <memcmp+0x3c>
   1ab8c:	20800003 	ldbu	r2,0(r4)
   1ab90:	28c00003 	ldbu	r3,0(r5)
   1ab94:	31bfffc4 	addi	r6,r6,-1
   1ab98:	10c00e1e 	bne	r2,r3,1abd4 <memcmp+0x74>
   1ab9c:	21000044 	addi	r4,r4,1
   1aba0:	29400044 	addi	r5,r5,1
   1aba4:	31fff91e 	bne	r6,r7,1ab8c <__alt_data_end+0xfffe9e4c>
   1aba8:	0005883a 	mov	r2,zero
   1abac:	f800283a 	ret
   1abb0:	20c00017 	ldw	r3,0(r4)
   1abb4:	28800017 	ldw	r2,0(r5)
   1abb8:	18bfee1e 	bne	r3,r2,1ab74 <__alt_data_end+0xfffe9e34>
   1abbc:	31bfff04 	addi	r6,r6,-4
   1abc0:	21000104 	addi	r4,r4,4
   1abc4:	29400104 	addi	r5,r5,4
   1abc8:	39bff936 	bltu	r7,r6,1abb0 <__alt_data_end+0xfffe9e70>
   1abcc:	303fe91e 	bne	r6,zero,1ab74 <__alt_data_end+0xfffe9e34>
   1abd0:	003ff506 	br	1aba8 <__alt_data_end+0xfffe9e68>
   1abd4:	10c5c83a 	sub	r2,r2,r3
   1abd8:	f800283a 	ret

0001abdc <_putc_r>:
   1abdc:	defffc04 	addi	sp,sp,-16
   1abe0:	dc000215 	stw	r16,8(sp)
   1abe4:	dfc00315 	stw	ra,12(sp)
   1abe8:	2021883a 	mov	r16,r4
   1abec:	20000226 	beq	r4,zero,1abf8 <_putc_r+0x1c>
   1abf0:	20800e17 	ldw	r2,56(r4)
   1abf4:	10001b26 	beq	r2,zero,1ac64 <_putc_r+0x88>
   1abf8:	30800217 	ldw	r2,8(r6)
   1abfc:	10bfffc4 	addi	r2,r2,-1
   1ac00:	30800215 	stw	r2,8(r6)
   1ac04:	10000a16 	blt	r2,zero,1ac30 <_putc_r+0x54>
   1ac08:	30800017 	ldw	r2,0(r6)
   1ac0c:	11400005 	stb	r5,0(r2)
   1ac10:	30800017 	ldw	r2,0(r6)
   1ac14:	10c00044 	addi	r3,r2,1
   1ac18:	30c00015 	stw	r3,0(r6)
   1ac1c:	10800003 	ldbu	r2,0(r2)
   1ac20:	dfc00317 	ldw	ra,12(sp)
   1ac24:	dc000217 	ldw	r16,8(sp)
   1ac28:	dec00404 	addi	sp,sp,16
   1ac2c:	f800283a 	ret
   1ac30:	30c00617 	ldw	r3,24(r6)
   1ac34:	10c00616 	blt	r2,r3,1ac50 <_putc_r+0x74>
   1ac38:	30800017 	ldw	r2,0(r6)
   1ac3c:	00c00284 	movi	r3,10
   1ac40:	11400005 	stb	r5,0(r2)
   1ac44:	30800017 	ldw	r2,0(r6)
   1ac48:	11400003 	ldbu	r5,0(r2)
   1ac4c:	28fff11e 	bne	r5,r3,1ac14 <__alt_data_end+0xfffe9ed4>
   1ac50:	8009883a 	mov	r4,r16
   1ac54:	dfc00317 	ldw	ra,12(sp)
   1ac58:	dc000217 	ldw	r16,8(sp)
   1ac5c:	dec00404 	addi	sp,sp,16
   1ac60:	000ecec1 	jmpi	ecec <__swbuf_r>
   1ac64:	d9400015 	stw	r5,0(sp)
   1ac68:	d9800115 	stw	r6,4(sp)
   1ac6c:	000a8080 	call	a808 <__sinit>
   1ac70:	d9800117 	ldw	r6,4(sp)
   1ac74:	d9400017 	ldw	r5,0(sp)
   1ac78:	003fdf06 	br	1abf8 <__alt_data_end+0xfffe9eb8>

0001ac7c <putc>:
   1ac7c:	008000b4 	movhi	r2,2
   1ac80:	defffc04 	addi	sp,sp,-16
   1ac84:	10be1e04 	addi	r2,r2,-1928
   1ac88:	dc000115 	stw	r16,4(sp)
   1ac8c:	14000017 	ldw	r16,0(r2)
   1ac90:	dc400215 	stw	r17,8(sp)
   1ac94:	dfc00315 	stw	ra,12(sp)
   1ac98:	2023883a 	mov	r17,r4
   1ac9c:	80000226 	beq	r16,zero,1aca8 <putc+0x2c>
   1aca0:	80800e17 	ldw	r2,56(r16)
   1aca4:	10001a26 	beq	r2,zero,1ad10 <putc+0x94>
   1aca8:	28800217 	ldw	r2,8(r5)
   1acac:	10bfffc4 	addi	r2,r2,-1
   1acb0:	28800215 	stw	r2,8(r5)
   1acb4:	10000b16 	blt	r2,zero,1ace4 <putc+0x68>
   1acb8:	28800017 	ldw	r2,0(r5)
   1acbc:	14400005 	stb	r17,0(r2)
   1acc0:	28800017 	ldw	r2,0(r5)
   1acc4:	10c00044 	addi	r3,r2,1
   1acc8:	28c00015 	stw	r3,0(r5)
   1accc:	10800003 	ldbu	r2,0(r2)
   1acd0:	dfc00317 	ldw	ra,12(sp)
   1acd4:	dc400217 	ldw	r17,8(sp)
   1acd8:	dc000117 	ldw	r16,4(sp)
   1acdc:	dec00404 	addi	sp,sp,16
   1ace0:	f800283a 	ret
   1ace4:	28c00617 	ldw	r3,24(r5)
   1ace8:	10c00e16 	blt	r2,r3,1ad24 <putc+0xa8>
   1acec:	28800017 	ldw	r2,0(r5)
   1acf0:	01000284 	movi	r4,10
   1acf4:	14400005 	stb	r17,0(r2)
   1acf8:	28800017 	ldw	r2,0(r5)
   1acfc:	10c00003 	ldbu	r3,0(r2)
   1ad00:	193ff01e 	bne	r3,r4,1acc4 <__alt_data_end+0xfffe9f84>
   1ad04:	280d883a 	mov	r6,r5
   1ad08:	180b883a 	mov	r5,r3
   1ad0c:	00000706 	br	1ad2c <putc+0xb0>
   1ad10:	8009883a 	mov	r4,r16
   1ad14:	d9400015 	stw	r5,0(sp)
   1ad18:	000a8080 	call	a808 <__sinit>
   1ad1c:	d9400017 	ldw	r5,0(sp)
   1ad20:	003fe106 	br	1aca8 <__alt_data_end+0xfffe9f68>
   1ad24:	280d883a 	mov	r6,r5
   1ad28:	880b883a 	mov	r5,r17
   1ad2c:	8009883a 	mov	r4,r16
   1ad30:	dfc00317 	ldw	ra,12(sp)
   1ad34:	dc400217 	ldw	r17,8(sp)
   1ad38:	dc000117 	ldw	r16,4(sp)
   1ad3c:	dec00404 	addi	sp,sp,16
   1ad40:	000ecec1 	jmpi	ecec <__swbuf_r>

0001ad44 <__register_exitproc>:
   1ad44:	defffa04 	addi	sp,sp,-24
   1ad48:	dc000315 	stw	r16,12(sp)
   1ad4c:	040000b4 	movhi	r16,2
   1ad50:	843e1d04 	addi	r16,r16,-1932
   1ad54:	80c00017 	ldw	r3,0(r16)
   1ad58:	dc400415 	stw	r17,16(sp)
   1ad5c:	dfc00515 	stw	ra,20(sp)
   1ad60:	18805217 	ldw	r2,328(r3)
   1ad64:	2023883a 	mov	r17,r4
   1ad68:	10003726 	beq	r2,zero,1ae48 <__register_exitproc+0x104>
   1ad6c:	10c00117 	ldw	r3,4(r2)
   1ad70:	010007c4 	movi	r4,31
   1ad74:	20c00e16 	blt	r4,r3,1adb0 <__register_exitproc+0x6c>
   1ad78:	1a000044 	addi	r8,r3,1
   1ad7c:	8800221e 	bne	r17,zero,1ae08 <__register_exitproc+0xc4>
   1ad80:	18c00084 	addi	r3,r3,2
   1ad84:	18c7883a 	add	r3,r3,r3
   1ad88:	18c7883a 	add	r3,r3,r3
   1ad8c:	12000115 	stw	r8,4(r2)
   1ad90:	10c7883a 	add	r3,r2,r3
   1ad94:	19400015 	stw	r5,0(r3)
   1ad98:	0005883a 	mov	r2,zero
   1ad9c:	dfc00517 	ldw	ra,20(sp)
   1ada0:	dc400417 	ldw	r17,16(sp)
   1ada4:	dc000317 	ldw	r16,12(sp)
   1ada8:	dec00604 	addi	sp,sp,24
   1adac:	f800283a 	ret
   1adb0:	00800034 	movhi	r2,0
   1adb4:	1095de04 	addi	r2,r2,22392
   1adb8:	10002626 	beq	r2,zero,1ae54 <__register_exitproc+0x110>
   1adbc:	01006404 	movi	r4,400
   1adc0:	d9400015 	stw	r5,0(sp)
   1adc4:	d9800115 	stw	r6,4(sp)
   1adc8:	d9c00215 	stw	r7,8(sp)
   1adcc:	00057780 	call	5778 <malloc>
   1add0:	d9400017 	ldw	r5,0(sp)
   1add4:	d9800117 	ldw	r6,4(sp)
   1add8:	d9c00217 	ldw	r7,8(sp)
   1addc:	10001d26 	beq	r2,zero,1ae54 <__register_exitproc+0x110>
   1ade0:	81000017 	ldw	r4,0(r16)
   1ade4:	10000115 	stw	zero,4(r2)
   1ade8:	02000044 	movi	r8,1
   1adec:	22405217 	ldw	r9,328(r4)
   1adf0:	0007883a 	mov	r3,zero
   1adf4:	12400015 	stw	r9,0(r2)
   1adf8:	20805215 	stw	r2,328(r4)
   1adfc:	10006215 	stw	zero,392(r2)
   1ae00:	10006315 	stw	zero,396(r2)
   1ae04:	883fde26 	beq	r17,zero,1ad80 <__alt_data_end+0xfffea040>
   1ae08:	18c9883a 	add	r4,r3,r3
   1ae0c:	2109883a 	add	r4,r4,r4
   1ae10:	1109883a 	add	r4,r2,r4
   1ae14:	21802215 	stw	r6,136(r4)
   1ae18:	01800044 	movi	r6,1
   1ae1c:	12406217 	ldw	r9,392(r2)
   1ae20:	30cc983a 	sll	r6,r6,r3
   1ae24:	4992b03a 	or	r9,r9,r6
   1ae28:	12406215 	stw	r9,392(r2)
   1ae2c:	21c04215 	stw	r7,264(r4)
   1ae30:	01000084 	movi	r4,2
   1ae34:	893fd21e 	bne	r17,r4,1ad80 <__alt_data_end+0xfffea040>
   1ae38:	11006317 	ldw	r4,396(r2)
   1ae3c:	218cb03a 	or	r6,r4,r6
   1ae40:	11806315 	stw	r6,396(r2)
   1ae44:	003fce06 	br	1ad80 <__alt_data_end+0xfffea040>
   1ae48:	18805304 	addi	r2,r3,332
   1ae4c:	18805215 	stw	r2,328(r3)
   1ae50:	003fc606 	br	1ad6c <__alt_data_end+0xfffea02c>
   1ae54:	00bfffc4 	movi	r2,-1
   1ae58:	003fd006 	br	1ad9c <__alt_data_end+0xfffea05c>

0001ae5c <__call_exitprocs>:
   1ae5c:	defff504 	addi	sp,sp,-44
   1ae60:	df000915 	stw	fp,36(sp)
   1ae64:	dd400615 	stw	r21,24(sp)
   1ae68:	dc800315 	stw	r18,12(sp)
   1ae6c:	dfc00a15 	stw	ra,40(sp)
   1ae70:	ddc00815 	stw	r23,32(sp)
   1ae74:	dd800715 	stw	r22,28(sp)
   1ae78:	dd000515 	stw	r20,20(sp)
   1ae7c:	dcc00415 	stw	r19,16(sp)
   1ae80:	dc400215 	stw	r17,8(sp)
   1ae84:	dc000115 	stw	r16,4(sp)
   1ae88:	d9000015 	stw	r4,0(sp)
   1ae8c:	2839883a 	mov	fp,r5
   1ae90:	04800044 	movi	r18,1
   1ae94:	057fffc4 	movi	r21,-1
   1ae98:	008000b4 	movhi	r2,2
   1ae9c:	10be1d04 	addi	r2,r2,-1932
   1aea0:	12000017 	ldw	r8,0(r2)
   1aea4:	45005217 	ldw	r20,328(r8)
   1aea8:	44c05204 	addi	r19,r8,328
   1aeac:	a0001c26 	beq	r20,zero,1af20 <__call_exitprocs+0xc4>
   1aeb0:	a0800117 	ldw	r2,4(r20)
   1aeb4:	15ffffc4 	addi	r23,r2,-1
   1aeb8:	b8000d16 	blt	r23,zero,1aef0 <__call_exitprocs+0x94>
   1aebc:	14000044 	addi	r16,r2,1
   1aec0:	8421883a 	add	r16,r16,r16
   1aec4:	8421883a 	add	r16,r16,r16
   1aec8:	84402004 	addi	r17,r16,128
   1aecc:	a463883a 	add	r17,r20,r17
   1aed0:	a421883a 	add	r16,r20,r16
   1aed4:	e0001e26 	beq	fp,zero,1af50 <__call_exitprocs+0xf4>
   1aed8:	80804017 	ldw	r2,256(r16)
   1aedc:	e0801c26 	beq	fp,r2,1af50 <__call_exitprocs+0xf4>
   1aee0:	bdffffc4 	addi	r23,r23,-1
   1aee4:	843fff04 	addi	r16,r16,-4
   1aee8:	8c7fff04 	addi	r17,r17,-4
   1aeec:	bd7ff91e 	bne	r23,r21,1aed4 <__alt_data_end+0xfffea194>
   1aef0:	00800034 	movhi	r2,0
   1aef4:	1095e304 	addi	r2,r2,22412
   1aef8:	10000926 	beq	r2,zero,1af20 <__call_exitprocs+0xc4>
   1aefc:	a0800117 	ldw	r2,4(r20)
   1af00:	1000301e 	bne	r2,zero,1afc4 <__call_exitprocs+0x168>
   1af04:	a0800017 	ldw	r2,0(r20)
   1af08:	10003226 	beq	r2,zero,1afd4 <__call_exitprocs+0x178>
   1af0c:	a009883a 	mov	r4,r20
   1af10:	98800015 	stw	r2,0(r19)
   1af14:	000578c0 	call	578c <free>
   1af18:	9d000017 	ldw	r20,0(r19)
   1af1c:	a03fe41e 	bne	r20,zero,1aeb0 <__alt_data_end+0xfffea170>
   1af20:	dfc00a17 	ldw	ra,40(sp)
   1af24:	df000917 	ldw	fp,36(sp)
   1af28:	ddc00817 	ldw	r23,32(sp)
   1af2c:	dd800717 	ldw	r22,28(sp)
   1af30:	dd400617 	ldw	r21,24(sp)
   1af34:	dd000517 	ldw	r20,20(sp)
   1af38:	dcc00417 	ldw	r19,16(sp)
   1af3c:	dc800317 	ldw	r18,12(sp)
   1af40:	dc400217 	ldw	r17,8(sp)
   1af44:	dc000117 	ldw	r16,4(sp)
   1af48:	dec00b04 	addi	sp,sp,44
   1af4c:	f800283a 	ret
   1af50:	a0800117 	ldw	r2,4(r20)
   1af54:	80c00017 	ldw	r3,0(r16)
   1af58:	10bfffc4 	addi	r2,r2,-1
   1af5c:	15c01426 	beq	r2,r23,1afb0 <__call_exitprocs+0x154>
   1af60:	80000015 	stw	zero,0(r16)
   1af64:	183fde26 	beq	r3,zero,1aee0 <__alt_data_end+0xfffea1a0>
   1af68:	95c8983a 	sll	r4,r18,r23
   1af6c:	a0806217 	ldw	r2,392(r20)
   1af70:	a5800117 	ldw	r22,4(r20)
   1af74:	2084703a 	and	r2,r4,r2
   1af78:	10000b26 	beq	r2,zero,1afa8 <__call_exitprocs+0x14c>
   1af7c:	a0806317 	ldw	r2,396(r20)
   1af80:	2088703a 	and	r4,r4,r2
   1af84:	20000c1e 	bne	r4,zero,1afb8 <__call_exitprocs+0x15c>
   1af88:	89400017 	ldw	r5,0(r17)
   1af8c:	d9000017 	ldw	r4,0(sp)
   1af90:	183ee83a 	callr	r3
   1af94:	a0800117 	ldw	r2,4(r20)
   1af98:	15bfbf1e 	bne	r2,r22,1ae98 <__alt_data_end+0xfffea158>
   1af9c:	98800017 	ldw	r2,0(r19)
   1afa0:	153fcf26 	beq	r2,r20,1aee0 <__alt_data_end+0xfffea1a0>
   1afa4:	003fbc06 	br	1ae98 <__alt_data_end+0xfffea158>
   1afa8:	183ee83a 	callr	r3
   1afac:	003ff906 	br	1af94 <__alt_data_end+0xfffea254>
   1afb0:	a5c00115 	stw	r23,4(r20)
   1afb4:	003feb06 	br	1af64 <__alt_data_end+0xfffea224>
   1afb8:	89000017 	ldw	r4,0(r17)
   1afbc:	183ee83a 	callr	r3
   1afc0:	003ff406 	br	1af94 <__alt_data_end+0xfffea254>
   1afc4:	a0800017 	ldw	r2,0(r20)
   1afc8:	a027883a 	mov	r19,r20
   1afcc:	1029883a 	mov	r20,r2
   1afd0:	003fb606 	br	1aeac <__alt_data_end+0xfffea16c>
   1afd4:	0005883a 	mov	r2,zero
   1afd8:	003ffb06 	br	1afc8 <__alt_data_end+0xfffea288>

0001afdc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1afdc:	defffd04 	addi	sp,sp,-12
   1afe0:	df000215 	stw	fp,8(sp)
   1afe4:	df000204 	addi	fp,sp,8
   1afe8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1afec:	d0273745 	stb	zero,-25379(gp)
   1aff0:	e0bfff17 	ldw	r2,-4(fp)
   1aff4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1aff8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1affc:	10000226 	beq	r2,zero,1b008 <_exit+0x2c>
    ALT_SIM_FAIL();
   1b000:	002af070 	cmpltui	zero,zero,43969
   1b004:	00000106 	br	1b00c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1b008:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1b00c:	003fff06 	br	1b00c <__alt_data_end+0xfffea2cc>
