
nios_ii.elf:     file format elf32-littlenios2
nios_ii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d244 memsz 0x0000d244 flags r-x
    LOAD off    0x0000e264 vaddr 0x0000d264 paddr 0x0000ed84 align 2**12
         filesz 0x00001b20 memsz 0x00001b20 flags rw-
    LOAD off    0x000108a4 vaddr 0x000108a4 paddr 0x000108a4 align 2**12
         filesz 0x00000000 memsz 0x000073e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cecc  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000168  0000d0fc  0000d0fc  0000e0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b20  0000d264  0000ed84  0000e264  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073e0  000108a4  000108a4  000108a4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00017c84  00017c84  0000fd84  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000fd84  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000b60  00000000  00000000  0000fda8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001f632  00000000  00000000  00010908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007a42  00000000  00000000  0002ff3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008abf  00000000  00000000  0003797c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025ac  00000000  00000000  0004043c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000038d1  00000000  00000000  000429e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000035c6  00000000  00000000  000462b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00049880  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000548  00000000  00000000  00049890  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0004db6e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004db74  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004db80  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004db81  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004db82  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004db8d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004db98  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0004dba3  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  0004dbb1  2**0
                  CONTENTS, READONLY
 26 .jdi          000045ae  00000000  00000000  0004dbdb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00040480  00000000  00000000  00052189  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000d0fc l    d  .rodata	00000000 .rodata
0000d264 l    d  .rwdata	00000000 .rwdata
000108a4 l    d  .bss	00000000 .bss
00017c84 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ii_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 impure.c
0000d264 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000c5c l     F .text	00000008 __fp_unlock
00000c70 l     F .text	0000019c __sinit.part.1
00000e0c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00002470 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00002584 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000025b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000026a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000278c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00002878 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00002a4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000ecf8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00002cc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000ecfc l     O .rwdata	00000004 lockid
000108c8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000ed00 l     O .rwdata	00000004 lockid
000108d0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
000046f8 l     F .text	00000048 OS_InitMisc
00004740 l     F .text	0000006c OS_InitRdyList
000048ac l     F .text	000000e4 OS_InitTCBList
00004618 l     F .text	000000e0 OS_InitEventList
000047ac l     F .text	00000080 OS_InitTaskIdle
0000482c l     F .text	00000080 OS_InitTaskStat
00004b1c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0000682c l     F .text	000000f4 OS_FlagTaskRdy
000065ec l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000a904 l     F .text	00000034 alt_dev_reg
0000dc38 l     O .rwdata	0000106c jtag_uart_0
0000eca4 l     O .rwdata	0000002c adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000ac88 l     F .text	000002a4 altera_avalon_jtag_uart_irq
0000af2c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b708 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000b948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000bda8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000bf08 l     F .text	0000003c alt_get_errno
0000bf44 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_exit.c
00010934 g     O .bss	00000004 alt_instruction_exception_handler
00000588 g     F .text	00000018 putchar
0000ed4e g     O .rwdata	00000002 OSTaskNameSize
00002334 g     F .text	00000054 _isatty_r
00002990 g     F .text	000000bc alt_main
00017b84 g     O .bss	00000100 alt_irq
00002388 g     F .text	00000060 _lseek_r
0000704c g     F .text	000000d8 OS_MemInit
0000ed84 g       *ABS*	00000000 __flash_rwdata_start
0000a8a4 g     F .text	00000060 OSTimeSet
0000336c g     F .text	00000610 OSEventPendMulti
00017c84 g       *ABS*	00000000 __alt_heap_start
0000c580 g     F .text	00000024 OSTaskCreateHook
0000ed26 g     O .rwdata	00000002 OSMboxEn
00010960 g     O .bss	00002000 TaskADCToFFTStack
000039d4 g     F .text	0000004c OSIntEnter
000020bc g     F .text	0000005c __sseek
00000fbc g     F .text	00000010 __sinit
00000708 g     F .text	00000140 __swbuf_r
0000ed36 g     O .rwdata	00000002 OSQEn
00000e14 g     F .text	00000078 __sfmoreglue
00003040 g     F .text	000000cc __malloc_unlock
0000c5e8 g     F .text	00000020 OSTaskStatHook
000108d8 g     O .bss	00000001 OSLockNesting
00000328 g     F .text	00000130 Bel_FFT_Init
0000ed74 g     O .rwdata	00000002 OSDataSize
000108d9 g     O .bss	00000001 OSRunning
0000c628 g     F .text	00000020 OSInitHookBegin
0000ed6c g     O .rwdata	00000002 OSTmrSize
00000fa4 g     F .text	00000018 _cleanup
000108dc g     O .bss	00000004 OSIdleCtr
0000c330 g     F .text	00000024 altera_nios2_gen2_irq_init
0000c400 g       .text	00000000 OSStartTsk
00004e4c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
0000ed72 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000ed12 g     O .rwdata	00000002 OSEventSize
000108e0 g     O .bss	00000001 OSPrioHighRdy
000022d8 g     F .text	0000005c _fstat_r
0000c5a4 g     F .text	00000024 OSTaskDelHook
000108b4 g     O .bss	00000004 errno
00002038 g     F .text	00000008 __seofread
0000c3e0 g       .text	00000000 OSStartHighRdy
00009324 g     F .text	000001e4 OSTaskCreateExt
00006134 g     F .text	00000060 OSFlagPendGetFlagsRdy
0000ed52 g     O .rwdata	00000002 OSTaskStatStkSize
000052b0 g     F .text	00000308 OSFlagAccept
00007690 g     F .text	000000b8 OSQFlush
00007124 g     F .text	00000140 OSQAccept
000108c0 g     O .bss	00000004 alt_argv
00016cd0 g       *ABS*	00000000 _gp
00009178 g     F .text	000001ac OSTaskCreate
00008c88 g     F .text	000004f0 OSTaskChangePrio
000108d4 g     O .bss	00000004 alt_heapsem
00005120 g     F .text	00000190 OSDebugInit
00009508 g     F .text	00000344 OSTaskDel
0000dab8 g     O .rwdata	00000180 alt_fd_list
00014960 g     O .bss	00000370 OSFlagTbl
00000580 g     F .text	00000008 _putchar_r
000043f8 g     F .text	000000b8 OS_EventTaskRemove
0000c6ac g     F .text	00000090 alt_find_dev
0000ca9c g     F .text	00000148 memcpy
0000ed3c g     O .rwdata	00000002 OSRdyTblSize
00000c64 g     F .text	0000000c _cleanup_r
0000be8c g     F .text	0000007c alt_io_redirect
0000d0fc g       *ABS*	00000000 __DTOR_END__
0000c938 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000310c g     F .text	00000120 OSEventNameGet
0000ed20 g     O .rwdata	00000002 OSFlagMax
00003a20 g     F .text	000000f8 OSIntExit
0000ed5a g     O .rwdata	00000002 OSTCBSize
000108e1 g     O .bss	00000001 OSPrioCur
0000b188 g     F .text	000002bc altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000d00c g     F .text	00000064 .hidden __udivsi3
000026e0 g     F .text	000000ac isatty
0000ed40 g     O .rwdata	00000002 OSStkWidth
0000ed34 g     O .rwdata	00000002 OSPtrSize
0000ed14 g     O .rwdata	00000002 OSEventTblSize
0000c354 g       .text	00000000 OSCtxSw
000108b0 g     O .bss	00000004 __malloc_top_pad
000108e4 g     O .bss	00000004 OSTCBList
000108b8 g     O .bss	00000004 alt_fd_list_lock
000002f4 g     F .text	00000034 TaskADCToFFT
00014cd0 g     O .bss	00000c30 OSMemTbl
000108e8 g     O .bss	00000001 OSTickStepState
00001f90 g     F .text	00000054 _sbrk_r
0000ed38 g     O .rwdata	00000002 OSQMax
00015900 g     O .bss	00000800 OSTaskStatStk
00006c88 g     F .text	000000f0 OSMemNameGet
0000ed18 g     O .rwdata	00000002 OSFlagEn
000023e8 g     F .text	00000060 _read_r
0000ed5e g     O .rwdata	00000002 OSTimeTickHookEn
00007b40 g     F .text	00000168 OSQPost
00006920 g     F .text	000000a4 OS_FlagUnlink
0000ecf0 g     O .rwdata	00000004 alt_max_fd
000049e4 g     F .text	00000068 OS_MemCopy
00004a4c g     F .text	000000d0 OS_Sched
000021d4 g     F .text	000000f0 _fclose_r
00006b98 g     F .text	000000f0 OSMemGet
00009b34 g     F .text	000001b4 OSTaskNameSet
00000c2c g     F .text	00000030 fflush
000108ac g     O .bss	00000004 __malloc_max_sbrked_mem
000108ec g     O .bss	00000004 OSCtxSwCtr
0000c608 g     F .text	00000020 OSTimeTickHook
0000ed22 g     O .rwdata	00000002 OSFlagNameSize
000044b0 g     F .text	00000100 OS_EventTaskRemoveMulti
000042a8 g     F .text	00000150 OS_EventTaskWaitMulti
0000ed3a g     O .rwdata	00000002 OSQSize
000028b4 g     F .text	000000dc lseek
000085f0 g     F .text	0000020c OSSemPend
0000ecd0 g     O .rwdata	00000004 _global_impure_ptr
0000ed24 g     O .rwdata	00000002 OSLowestPrio
00017c84 g       *ABS*	00000000 __bss_end
0000bcb8 g     F .text	000000f0 alt_iic_isr_register
0000c688 g     F .text	00000024 OSTCBInitHook
0000ed6a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0000c228 g     F .text	00000108 alt_tick
0000ed0c g     O .rwdata	00000002 OSEventEn
0000ed66 g     O .rwdata	00000002 OSTmrCfgNameSize
00000fdc g     F .text	00000018 __fp_lock_all
0000bc6c g     F .text	0000004c alt_ic_irq_enabled
0000674c g     F .text	000000e0 OS_FlagInit
0000c18c g     F .text	0000009c alt_alarm_stop
0000ed48 g     O .rwdata	00000002 OSTaskIdleStkSize
00010928 g     O .bss	00000004 alt_irq_active
00008228 g     F .text	000000b0 OSSemAccept
00006e8c g     F .text	000000d8 OSMemPut
000108a4 g     O .bss	00000004 ADC_value
000069c4 g     F .text	000001d4 OSMemCreate
000108f0 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000da90 g     O .rwdata	00000028 alt_dev_null
0000ed5c g     O .rwdata	00000002 OSTicksPerSec
0000c354 g       .text	00000000 OSIntCtxSw
0000b928 g     F .text	00000020 alt_dcache_flush_all
000108f4 g     O .bss	00000004 OSTCBFreeList
0000ed84 g       *ABS*	00000000 __ram_rwdata_end
000087fc g     F .text	0000016c OSSemPendAbort
0000ece8 g     O .rwdata	00000008 alt_dev_list
00002cfc g     F .text	00000100 write
000005a0 g     F .text	000000a0 _putc_r
0000ed60 g     O .rwdata	00000002 OSVersionNbr
00012960 g     O .bss	00002000 TaskStartStack
0000d264 g       *ABS*	00000000 __ram_rodata_end
000025ec g     F .text	000000b8 fstat
0000ed08 g     O .rwdata	00000004 OSEndiannessTest
0000d070 g     F .text	00000058 .hidden __umodsi3
0000ed1a g     O .rwdata	00000002 OSFlagGrpSize
00017c84 g       *ABS*	00000000 end
0000ab40 g     F .text	00000148 altera_avalon_jtag_uart_init
00004cb4 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000d0fc g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
0000b780 g     F .text	0000007c alt_avalon_timer_sc_init
0000b444 g     F .text	000002c4 altera_avalon_jtag_uart_write
00000fcc g     F .text	00000004 __sfp_lock_acquire
00004990 g     F .text	00000054 OS_MemClr
0000c424 g     F .text	0000015c OSTaskStkInit
00001130 g     F .text	00000310 _free_r
00004000 g     F .text	00000198 OS_EventTaskRdy
0000cd94 g     F .text	00000180 __call_exitprocs
000108f8 g     O .bss	00000001 OSCPUUsage
0000ecd8 g     O .rwdata	00000004 __malloc_sbrk_base
00000230 g     F .text	0000003c _start
0001092c g     O .bss	00000004 _alt_tick_rate
00007748 g     F .text	0000028c OSQPend
0000a3f4 g     F .text	00000104 OSTimeDly
00010930 g     O .bss	00000004 _alt_nticks
00002a88 g     F .text	00000104 read
0000a970 g     F .text	0000006c alt_sys_init
0000cc7c g     F .text	00000118 __register_exitproc
000108f9 g     O .bss	00000001 OSTaskCtr
0000a4f8 g     F .text	0000017c OSTimeDlyHMSM
0000b030 g     F .text	00000068 altera_avalon_jtag_uart_close
00002448 g     F .text	00000028 .hidden __mulsi3
0000d264 g       *ABS*	00000000 __ram_rwdata_start
0000d0fc g       *ABS*	00000000 __ram_rodata_start
00010938 g     O .bss	00000028 __malloc_current_mallinfo
0000ed0e g     O .rwdata	00000002 OSEventMax
00008968 g     F .text	00000110 OSSemPost
00003ba4 g     F .text	000000dc OSSchedUnlock
0000a9dc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000c844 g     F .text	000000f4 alt_get_fd
000108fc g     O .bss	00000004 OSMemFreeList
00003cf0 g     F .text	000000b0 OSStatInit
00006528 g     F .text	000000c4 OSFlagQuery
0000ed44 g     O .rwdata	00000002 OSTaskCreateExtEn
00002180 g     F .text	00000054 _close_r
0000ca20 g     F .text	0000007c memcmp
00003fe0 g     F .text	00000020 OS_Dummy
0000aa9c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00017c84 g       *ABS*	00000000 __alt_stack_base
0000aaec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00000860 g     F .text	00000154 __swsetup_r
00016100 g     O .bss	000001e0 OSQTbl
00000e8c g     F .text	00000118 __sfp
0000d688 g     O .rwdata	00000408 __malloc_av_
00000fd8 g     F .text	00000004 __sinit_lock_release
00010900 g     O .bss	00000004 OSTCBHighRdy
00001fe4 g     F .text	00000054 __sread
00010904 g     O .bss	00000004 OSQFreeList
0000c73c g     F .text	00000108 alt_find_file
0000b984 g     F .text	000000a4 alt_dev_llist_insert
00002f20 g     F .text	00000120 __malloc_lock
00002c10 g     F .text	000000b0 sbrk
0000322c g     F .text	00000140 OSEventNameSet
00000bd0 g     F .text	0000005c _fflush_r
00010908 g     O .bss	00000001 OSRdyGrp
000108a4 g       *ABS*	00000000 __bss_start
00000458 g     F .text	00000128 memset
0000026c g     F .text	0000004c main
000108c4 g     O .bss	00000004 alt_envp
000108a8 g     O .bss	00000004 __malloc_max_total_mem
0000aa3c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00000848 g     F .text	00000018 __swbuf
0000d120 g     O .rodata	00000100 OSUnMapTbl
0000ed3e g     O .rwdata	00000002 OSSemEn
00006194 g     F .text	00000394 OSFlagPost
00002118 g     F .text	00000008 __sclose
000186a0 g       *ABS*	00000000 __alt_heap_limit
000022c4 g     F .text	00000014 fclose
00004198 g     F .text	00000110 OS_EventTaskWait
00004d80 g     F .text	000000cc OS_TaskStatStkChk
0000984c g     F .text	00000150 OSTaskDelReq
00001784 g     F .text	0000080c _malloc_r
0000ecf4 g     O .rwdata	00000004 alt_errno
00003c80 g     F .text	00000070 OSStart
00002ec0 g     F .text	00000060 __env_unlock
00001440 g     F .text	000000c4 _fwalk
00009ce8 g     F .text	000001d4 OSTaskResume
00006f64 g     F .text	000000e8 OSMemQuery
0000ed50 g     O .rwdata	00000002 OSTaskStatEn
0000ed2a g     O .rwdata	00000002 OSMemMax
00007ca8 g     F .text	00000170 OSQPostFront
00000640 g     F .text	000000c8 putc
0000cf14 g     F .text	00000084 .hidden __divsi3
00010909 g     O .bss	00000003 OSRdyTbl
0000ed04 g     O .rwdata	00000002 OSDebugEn
0000100c g     F .text	00000124 _malloc_trim_r
0000d0fc g       *ABS*	00000000 __CTOR_END__
0000ed1c g     O .rwdata	00000002 OSFlagNodeSize
0000ed64 g     O .rwdata	00000002 OSTmrCfgMax
00007264 g     F .text	000001ac OSQCreate
0000999c g     F .text	00000198 OSTaskNameGet
0000d0fc g       *ABS*	00000000 __flash_rodata_start
00007e18 g     F .text	0000020c OSQPostOpt
00003da0 g     F .text	00000220 OSTimeTick
0000ed4c g     O .rwdata	00000002 OSTaskMax
0000d0fc g       *ABS*	00000000 __DTOR_LIST__
000082d8 g     F .text	000000d8 OSSemCreate
0000ed70 g     O .rwdata	00000002 OSTmrWheelSize
0000ed46 g     O .rwdata	00000002 OSTaskDelEn
00008a78 g     F .text	00000110 OSSemQuery
00007410 g     F .text	00000280 OSQDel
000079d4 g     F .text	0000016c OSQPendAbort
0000a938 g     F .text	00000038 alt_irq_init
00002b8c g     F .text	00000084 alt_release_fd
0000c9d4 g     F .text	00000014 atexit
00002120 g     F .text	00000060 _write_r
00003b18 g     F .text	0000008c OSSchedLock
000055b8 g     F .text	00000108 OSFlagCreate
0000ecd4 g     O .rwdata	00000004 _impure_ptr
000108bc g     O .bss	00000004 alt_argc
000009b4 g     F .text	0000021c __sflush_r
0000ba88 g     F .text	00000060 _do_dtors
0000ed16 g     O .rwdata	00000002 OSEventMultiEn
000056c0 g     F .text	00000248 OSFlagDel
0001090c g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00005b7c g     F .text	000005b8 OSFlagPend
0000ed62 g     O .rwdata	00000002 OSTmrEn
00000ff4 g     F .text	00000018 __fp_unlock_all
0000ece0 g     O .rwdata	00000008 alt_fs_list
00004b90 g     F .text	00000074 OS_StrCopy
0000ed2c g     O .rwdata	00000002 OSMemNameSize
0000c648 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000ed58 g     O .rwdata	00000002 OSTCBPrioTblMax
0000ed54 g     O .rwdata	00000002 OSTaskStatStkChkEn
0000bb08 g     F .text	00000050 alt_ic_isr_register
0000ed28 g     O .rwdata	00000002 OSMemEn
0000ed32 g     O .rwdata	00000002 OSMutexEn
0000ed84 g       *ABS*	00000000 _edata
00017c84 g       *ABS*	00000000 _end
00010910 g     O .bss	00000001 OSIntNesting
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000b098 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000a674 g     F .text	000001d4 OSTimeDlyResume
00005a30 g     F .text	0000014c OSFlagNameSet
00009ebc g     F .text	000001c0 OSTaskStkChk
0000bbe0 g     F .text	0000008c alt_ic_irq_disable
0000ed2e g     O .rwdata	00000002 OSMemSize
00002040 g     F .text	0000007c __swrite
0000ecdc g     O .rwdata	00000004 __malloc_trim_threshold
00010914 g     O .bss	00000004 OSTCBCur
0000c9e8 g     F .text	00000038 exit
0000ed30 g     O .rwdata	00000002 OSMemTblSize
00001504 g     F .text	000000c4 _fwalk_reent
0000cf98 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000fd0 g     F .text	00000004 __sfp_lock_release
0000397c g     F .text	00000058 OSInit
0000a260 g     F .text	00000124 OSTaskQuery
00008180 g     F .text	000000a8 OS_QInit
000002b8 g     F .text	0000003c TaskStart
00004c04 g     F .text	00000054 OS_StrLen
00006d78 g     F .text	00000114 OSMemNameSet
0000ed4a g     O .rwdata	00000002 OSTaskProfileEn
00010918 g     O .bss	00000004 OSTime
000162e0 g     O .bss	00000800 OSTaskIdleStk
0000d0c8 g     F .text	00000034 _exit
0000b7fc g     F .text	0000012c alt_alarm_start
00005908 g     F .text	00000128 OSFlagNameGet
0000a848 g     F .text	0000005c OSTimeGet
000015c8 g     F .text	000001bc __smakebuf_r
0000cbe4 g     F .text	00000098 strlen
0000c5c8 g     F .text	00000020 OSTaskSwHook
0000c030 g     F .text	0000015c open
00016ae0 g     O .bss	00000b40 OSEventTbl
00017620 g     O .bss	00000510 OSTCBTbl
00008b88 g     F .text	00000100 OSSemSet
0000bae8 g     F .text	00000020 alt_icache_flush_all
0000ed78 g     O .rwdata	00000004 alt_priority_mask
000083b0 g     F .text	00000240 OSSemDel
0001091c g     O .bss	00000004 OSFlagFreeList
0000bb58 g     F .text	00000088 alt_ic_irq_enable
0000ed10 g     O .rwdata	00000002 OSEventNameSize
00010920 g     O .bss	00000001 OSStatRdy
00017b30 g     O .bss	00000054 OSTCBPrioTbl
00002dfc g     F .text	000000c4 __env_lock
0000ed56 g     O .rwdata	00000002 OSTaskSwHookEn
0000ed7c g     O .rwdata	00000008 alt_alarm_list
0000ed1e g     O .rwdata	00000002 OSFlagWidth
0000ba28 g     F .text	00000060 _do_ctors
000024ac g     F .text	000000d8 close
000108cc g     O .bss	00000004 alt_envsem
00010924 g     O .bss	00000004 OSIdleCtrRun
00003fc0 g     F .text	00000020 OSVersion
0000ed68 g     O .rwdata	00000002 OSTmrCfgWheelSize
000027f4 g     F .text	00000084 alt_load
0000a384 g     F .text	00000070 OS_TaskStkClr
0000ed42 g     O .rwdata	00000002 OSTaskCreateEn
000045b0 g     F .text	00000068 OS_EventWaitListInit
0000c668 g     F .text	00000020 OSTaskIdleHook
00000fd4 g     F .text	00000004 __sinit_lock_acquire
0000a07c g     F .text	000001e4 OSTaskSuspend
00004c58 g     F .text	0000005c OS_TaskIdle
0000ed6e g     O .rwdata	00000002 OSTmrTblSize
00008024 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00039d40 	call	39d4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	109ee104 	addi	r2,r2,31620
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	109ee104 	addi	r2,r2,31620
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0003a200 	call	3a20 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a71917 	ldw	r2,-25500(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a71917 	ldw	r2,-25500(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d69b3414 	ori	gp,gp,27856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     244:	10822914 	ori	r2,r2,2212

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18df2114 	ori	r3,r3,31876

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00027f40 	call	27f4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00029900 	call	2990 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe7bc8>

0000026c <main>:
};
//
// =========================================================================================
//

int main(void) {
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
//	Bel_FFT_Init();

	OSInit(); // initialize ucos-ii
     27c:	000397c0 	call	397c <OSInit>
	OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
     280:	01c00144 	movi	r7,5
     284:	01800074 	movhi	r6,1
     288:	31925704 	addi	r6,r6,18780
     28c:	000b883a 	mov	r5,zero
     290:	01000034 	movhi	r4,0
     294:	2100ae04 	addi	r4,r4,696
     298:	00091780 	call	9178 <OSTaskCreate>
	OSStart(); // start multitasking
     29c:	0003c800 	call	3c80 <OSStart>
	return 0; // never executed
     2a0:	0005883a 	mov	r2,zero
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <TaskStart>:

void TaskStart(void *pdata) {
     2b8:	defffd04 	addi	sp,sp,-12
     2bc:	dfc00215 	stw	ra,8(sp)
     2c0:	df000115 	stw	fp,4(sp)
     2c4:	df000104 	addi	fp,sp,4
     2c8:	e13fff15 	stw	r4,-4(fp)
    OSTaskCreate(TaskADCToFFT, (void *) 0, &TaskADCToFFTStack[TASK_STACKSIZE - 1], 6); // create new task
     2cc:	01c00184 	movi	r7,6
     2d0:	01800074 	movhi	r6,1
     2d4:	318a5704 	addi	r6,r6,10588
     2d8:	000b883a 	mov	r5,zero
     2dc:	01000034 	movhi	r4,0
     2e0:	2100bd04 	addi	r4,r4,756
     2e4:	00091780 	call	9178 <OSTaskCreate>

    while (1) {
        OSTimeDly(10000);
     2e8:	0109c404 	movi	r4,10000
     2ec:	000a3f40 	call	a3f4 <OSTimeDly>
    }
     2f0:	003ffd06 	br	2e8 <__alt_data_end+0xfffe7c48>

000002f4 <TaskADCToFFT>:
}

void TaskADCToFFT(void* pdata) {
     2f4:	defffd04 	addi	sp,sp,-12
     2f8:	dfc00215 	stw	ra,8(sp)
     2fc:	df000115 	stw	fp,4(sp)
     300:	df000104 	addi	fp,sp,4
     304:	e13fff15 	stw	r4,-4(fp)
	while (1) {
		//ADC_value = *ADC;
		//*BEL_FFT_PROJECT = ADC_value;
		OSTimeDlyHMSM(0,0,1,0);
     308:	000f883a 	mov	r7,zero
     30c:	01800044 	movi	r6,1
     310:	000b883a 	mov	r5,zero
     314:	0009883a 	mov	r4,zero
     318:	000a4f80 	call	a4f8 <OSTimeDlyHMSM>
		printf("y");
     31c:	01001e44 	movi	r4,121
     320:	00005880 	call	588 <putchar>
	}
     324:	003ff806 	br	308 <__alt_data_end+0xfffe7c68>

00000328 <Bel_FFT_Init>:
}

int Bel_FFT_Init(void) {
     328:	defbfb04 	addi	sp,sp,-4116
     32c:	dfc40415 	stw	ra,4112(sp)
     330:	df040315 	stw	fp,4108(sp)
     334:	df040304 	addi	fp,sp,4108
	// FFT_BASE is the base address of the FFT co-processor. Set bit 31 to bypass the cache on the NIOSII.
	volatile struct bel_fft * belFftPtr = (struct bel_fft *) (FFT_BASE + 0x80000000);
     338:	008000b4 	movhi	r2,2
     33c:	e0bbff15 	stw	r2,-4100(fp)

	int fin[FFT_LEN * 2] = {
     340:	e0bc0004 	addi	r2,fp,-4096
     344:	00c20004 	movi	r3,2048
     348:	180d883a 	mov	r6,r3
     34c:	000b883a 	mov	r5,zero
     350:	1009883a 	mov	r4,r2
     354:	00004580 	call	458 <memset>
     358:	008af444 	movi	r2,11217
     35c:	e0bc0215 	stw	r2,-4088(fp)
     360:	00903a04 	movi	r2,16616
     364:	e0bc0415 	stw	r2,-4080(fp)
     368:	008d7384 	movi	r2,13774
     36c:	e0bc0615 	stw	r2,-4072(fp)
		0x000040E8, 0x00000000, 0x000035CE, 0x00000000 // ...
	};

	int fout[FFT_LEN * 2];

	belFftPtr->Finadr = fin;
     370:	e0bbff17 	ldw	r2,-4100(fp)
     374:	e0fc0004 	addi	r3,fp,-4096
     378:	10c00315 	stw	r3,12(r2)

	belFftPtr->Foutadr = fout;
     37c:	e0bbff17 	ldw	r2,-4100(fp)
     380:	e0fe0004 	addi	r3,fp,-2048
     384:	10c00415 	stw	r3,16(r2)

	belFftPtr->Factors[0].M = 64;
     388:	e0bbff17 	ldw	r2,-4100(fp)
     38c:	00c01004 	movi	r3,64
     390:	10c0050d 	sth	r3,20(r2)
	belFftPtr->Factors[0].P = 4;
     394:	e0bbff17 	ldw	r2,-4100(fp)
     398:	00c00104 	movi	r3,4
     39c:	10c0058d 	sth	r3,22(r2)
	belFftPtr->Factors[1].M = 16;
     3a0:	e0bbff17 	ldw	r2,-4100(fp)
     3a4:	00c00404 	movi	r3,16
     3a8:	10c0060d 	sth	r3,24(r2)
	belFftPtr->Factors[1].P = 4;
     3ac:	e0bbff17 	ldw	r2,-4100(fp)
     3b0:	00c00104 	movi	r3,4
     3b4:	10c0068d 	sth	r3,26(r2)
	belFftPtr->Factors[2].M = 4;
     3b8:	e0bbff17 	ldw	r2,-4100(fp)
     3bc:	00c00104 	movi	r3,4
     3c0:	10c0070d 	sth	r3,28(r2)
	belFftPtr->Factors[2].P = 4;
     3c4:	e0bbff17 	ldw	r2,-4100(fp)
     3c8:	00c00104 	movi	r3,4
     3cc:	10c0078d 	sth	r3,30(r2)
	belFftPtr->Factors[3].M = 1;
     3d0:	e0bbff17 	ldw	r2,-4100(fp)
     3d4:	00c00044 	movi	r3,1
     3d8:	10c0080d 	sth	r3,32(r2)
	belFftPtr->Factors[3].P = 4;
     3dc:	e0bbff17 	ldw	r2,-4100(fp)
     3e0:	00c00104 	movi	r3,4
     3e4:	10c0088d 	sth	r3,34(r2)

	belFftPtr->Control.Start = 1;
     3e8:	e0bbff17 	ldw	r2,-4100(fp)
     3ec:	10c00017 	ldw	r3,0(r2)
     3f0:	18c00054 	ori	r3,r3,1
     3f4:	10c00015 	stw	r3,0(r2)
#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     3f8:	00800044 	movi	r2,1
     3fc:	e0bbfd15 	stw	r2,-4108(fp)
     400:	00000c06 	br	434 <Bel_FFT_Init+0x10c>
		for (int d=1; d<=32767; d++) {}
     404:	00800044 	movi	r2,1
     408:	e0bbfe15 	stw	r2,-4104(fp)
     40c:	00000306 	br	41c <Bel_FFT_Init+0xf4>
     410:	e0bbfe17 	ldw	r2,-4104(fp)
     414:	10800044 	addi	r2,r2,1
     418:	e0bbfe15 	stw	r2,-4104(fp)
     41c:	e0bbfe17 	ldw	r2,-4104(fp)
     420:	00dfffc4 	movi	r3,32767
     424:	18bffa0e 	bge	r3,r2,410 <__alt_data_end+0xfffe7d70>

	belFftPtr->Control.Start = 1;
#if 0
	while (! cfg->belFftPtr->Status.Int) {} // wacht totdat FFT is gestart?
#else
	for (int c=1; c<=32767; c++) // korte delay
     428:	e0bbfd17 	ldw	r2,-4108(fp)
     42c:	10800044 	addi	r2,r2,1
     430:	e0bbfd15 	stw	r2,-4108(fp)
     434:	e0bbfd17 	ldw	r2,-4108(fp)
     438:	00dfffc4 	movi	r3,32767
     43c:	18bff10e 	bge	r3,r2,404 <__alt_data_end+0xfffe7d64>
		for (int d=1; d<=32767; d++) {}
#endif

	return 0;
     440:	0005883a 	mov	r2,zero
}
     444:	e037883a 	mov	sp,fp
     448:	dfc00117 	ldw	ra,4(sp)
     44c:	df000017 	ldw	fp,0(sp)
     450:	dec00204 	addi	sp,sp,8
     454:	f800283a 	ret

00000458 <memset>:
     458:	20c000cc 	andi	r3,r4,3
     45c:	2005883a 	mov	r2,r4
     460:	18004426 	beq	r3,zero,574 <memset+0x11c>
     464:	31ffffc4 	addi	r7,r6,-1
     468:	30004026 	beq	r6,zero,56c <memset+0x114>
     46c:	2813883a 	mov	r9,r5
     470:	200d883a 	mov	r6,r4
     474:	2007883a 	mov	r3,r4
     478:	00000406 	br	48c <memset+0x34>
     47c:	3a3fffc4 	addi	r8,r7,-1
     480:	31800044 	addi	r6,r6,1
     484:	38003926 	beq	r7,zero,56c <memset+0x114>
     488:	400f883a 	mov	r7,r8
     48c:	18c00044 	addi	r3,r3,1
     490:	32400005 	stb	r9,0(r6)
     494:	1a0000cc 	andi	r8,r3,3
     498:	403ff81e 	bne	r8,zero,47c <__alt_data_end+0xfffe7ddc>
     49c:	010000c4 	movi	r4,3
     4a0:	21c02d2e 	bgeu	r4,r7,558 <memset+0x100>
     4a4:	29003fcc 	andi	r4,r5,255
     4a8:	200c923a 	slli	r6,r4,8
     4ac:	3108b03a 	or	r4,r6,r4
     4b0:	200c943a 	slli	r6,r4,16
     4b4:	218cb03a 	or	r6,r4,r6
     4b8:	010003c4 	movi	r4,15
     4bc:	21c0182e 	bgeu	r4,r7,520 <memset+0xc8>
     4c0:	3b3ffc04 	addi	r12,r7,-16
     4c4:	6018d13a 	srli	r12,r12,4
     4c8:	1a000104 	addi	r8,r3,4
     4cc:	1ac00204 	addi	r11,r3,8
     4d0:	6008913a 	slli	r4,r12,4
     4d4:	1a800304 	addi	r10,r3,12
     4d8:	1813883a 	mov	r9,r3
     4dc:	21000504 	addi	r4,r4,20
     4e0:	1909883a 	add	r4,r3,r4
     4e4:	49800015 	stw	r6,0(r9)
     4e8:	41800015 	stw	r6,0(r8)
     4ec:	59800015 	stw	r6,0(r11)
     4f0:	51800015 	stw	r6,0(r10)
     4f4:	42000404 	addi	r8,r8,16
     4f8:	4a400404 	addi	r9,r9,16
     4fc:	5ac00404 	addi	r11,r11,16
     500:	52800404 	addi	r10,r10,16
     504:	413ff71e 	bne	r8,r4,4e4 <__alt_data_end+0xfffe7e44>
     508:	63000044 	addi	r12,r12,1
     50c:	6018913a 	slli	r12,r12,4
     510:	39c003cc 	andi	r7,r7,15
     514:	010000c4 	movi	r4,3
     518:	1b07883a 	add	r3,r3,r12
     51c:	21c00e2e 	bgeu	r4,r7,558 <memset+0x100>
     520:	1813883a 	mov	r9,r3
     524:	3811883a 	mov	r8,r7
     528:	010000c4 	movi	r4,3
     52c:	49800015 	stw	r6,0(r9)
     530:	423fff04 	addi	r8,r8,-4
     534:	4a400104 	addi	r9,r9,4
     538:	223ffc36 	bltu	r4,r8,52c <__alt_data_end+0xfffe7e8c>
     53c:	393fff04 	addi	r4,r7,-4
     540:	2008d0ba 	srli	r4,r4,2
     544:	39c000cc 	andi	r7,r7,3
     548:	21000044 	addi	r4,r4,1
     54c:	2109883a 	add	r4,r4,r4
     550:	2109883a 	add	r4,r4,r4
     554:	1907883a 	add	r3,r3,r4
     558:	38000526 	beq	r7,zero,570 <memset+0x118>
     55c:	19cf883a 	add	r7,r3,r7
     560:	19400005 	stb	r5,0(r3)
     564:	18c00044 	addi	r3,r3,1
     568:	38fffd1e 	bne	r7,r3,560 <__alt_data_end+0xfffe7ec0>
     56c:	f800283a 	ret
     570:	f800283a 	ret
     574:	2007883a 	mov	r3,r4
     578:	300f883a 	mov	r7,r6
     57c:	003fc706 	br	49c <__alt_data_end+0xfffe7dfc>

00000580 <_putchar_r>:
     580:	21800217 	ldw	r6,8(r4)
     584:	00005a01 	jmpi	5a0 <_putc_r>

00000588 <putchar>:
     588:	00800074 	movhi	r2,1
     58c:	10bb3504 	addi	r2,r2,-4908
     590:	200b883a 	mov	r5,r4
     594:	11000017 	ldw	r4,0(r2)
     598:	21800217 	ldw	r6,8(r4)
     59c:	00005a01 	jmpi	5a0 <_putc_r>

000005a0 <_putc_r>:
     5a0:	defffc04 	addi	sp,sp,-16
     5a4:	dc000215 	stw	r16,8(sp)
     5a8:	dfc00315 	stw	ra,12(sp)
     5ac:	2021883a 	mov	r16,r4
     5b0:	20000226 	beq	r4,zero,5bc <_putc_r+0x1c>
     5b4:	20800e17 	ldw	r2,56(r4)
     5b8:	10001b26 	beq	r2,zero,628 <_putc_r+0x88>
     5bc:	30800217 	ldw	r2,8(r6)
     5c0:	10bfffc4 	addi	r2,r2,-1
     5c4:	30800215 	stw	r2,8(r6)
     5c8:	10000a16 	blt	r2,zero,5f4 <_putc_r+0x54>
     5cc:	30800017 	ldw	r2,0(r6)
     5d0:	11400005 	stb	r5,0(r2)
     5d4:	30800017 	ldw	r2,0(r6)
     5d8:	10c00044 	addi	r3,r2,1
     5dc:	30c00015 	stw	r3,0(r6)
     5e0:	10800003 	ldbu	r2,0(r2)
     5e4:	dfc00317 	ldw	ra,12(sp)
     5e8:	dc000217 	ldw	r16,8(sp)
     5ec:	dec00404 	addi	sp,sp,16
     5f0:	f800283a 	ret
     5f4:	30c00617 	ldw	r3,24(r6)
     5f8:	10c00616 	blt	r2,r3,614 <_putc_r+0x74>
     5fc:	30800017 	ldw	r2,0(r6)
     600:	00c00284 	movi	r3,10
     604:	11400005 	stb	r5,0(r2)
     608:	30800017 	ldw	r2,0(r6)
     60c:	11400003 	ldbu	r5,0(r2)
     610:	28fff11e 	bne	r5,r3,5d8 <__alt_data_end+0xfffe7f38>
     614:	8009883a 	mov	r4,r16
     618:	dfc00317 	ldw	ra,12(sp)
     61c:	dc000217 	ldw	r16,8(sp)
     620:	dec00404 	addi	sp,sp,16
     624:	00007081 	jmpi	708 <__swbuf_r>
     628:	d9400015 	stw	r5,0(sp)
     62c:	d9800115 	stw	r6,4(sp)
     630:	0000fbc0 	call	fbc <__sinit>
     634:	d9800117 	ldw	r6,4(sp)
     638:	d9400017 	ldw	r5,0(sp)
     63c:	003fdf06 	br	5bc <__alt_data_end+0xfffe7f1c>

00000640 <putc>:
     640:	00800074 	movhi	r2,1
     644:	defffc04 	addi	sp,sp,-16
     648:	10bb3504 	addi	r2,r2,-4908
     64c:	dc000115 	stw	r16,4(sp)
     650:	14000017 	ldw	r16,0(r2)
     654:	dc400215 	stw	r17,8(sp)
     658:	dfc00315 	stw	ra,12(sp)
     65c:	2023883a 	mov	r17,r4
     660:	80000226 	beq	r16,zero,66c <putc+0x2c>
     664:	80800e17 	ldw	r2,56(r16)
     668:	10001a26 	beq	r2,zero,6d4 <putc+0x94>
     66c:	28800217 	ldw	r2,8(r5)
     670:	10bfffc4 	addi	r2,r2,-1
     674:	28800215 	stw	r2,8(r5)
     678:	10000b16 	blt	r2,zero,6a8 <putc+0x68>
     67c:	28800017 	ldw	r2,0(r5)
     680:	14400005 	stb	r17,0(r2)
     684:	28800017 	ldw	r2,0(r5)
     688:	10c00044 	addi	r3,r2,1
     68c:	28c00015 	stw	r3,0(r5)
     690:	10800003 	ldbu	r2,0(r2)
     694:	dfc00317 	ldw	ra,12(sp)
     698:	dc400217 	ldw	r17,8(sp)
     69c:	dc000117 	ldw	r16,4(sp)
     6a0:	dec00404 	addi	sp,sp,16
     6a4:	f800283a 	ret
     6a8:	28c00617 	ldw	r3,24(r5)
     6ac:	10c00e16 	blt	r2,r3,6e8 <putc+0xa8>
     6b0:	28800017 	ldw	r2,0(r5)
     6b4:	01000284 	movi	r4,10
     6b8:	14400005 	stb	r17,0(r2)
     6bc:	28800017 	ldw	r2,0(r5)
     6c0:	10c00003 	ldbu	r3,0(r2)
     6c4:	193ff01e 	bne	r3,r4,688 <__alt_data_end+0xfffe7fe8>
     6c8:	280d883a 	mov	r6,r5
     6cc:	180b883a 	mov	r5,r3
     6d0:	00000706 	br	6f0 <putc+0xb0>
     6d4:	8009883a 	mov	r4,r16
     6d8:	d9400015 	stw	r5,0(sp)
     6dc:	0000fbc0 	call	fbc <__sinit>
     6e0:	d9400017 	ldw	r5,0(sp)
     6e4:	003fe106 	br	66c <__alt_data_end+0xfffe7fcc>
     6e8:	280d883a 	mov	r6,r5
     6ec:	880b883a 	mov	r5,r17
     6f0:	8009883a 	mov	r4,r16
     6f4:	dfc00317 	ldw	ra,12(sp)
     6f8:	dc400217 	ldw	r17,8(sp)
     6fc:	dc000117 	ldw	r16,4(sp)
     700:	dec00404 	addi	sp,sp,16
     704:	00007081 	jmpi	708 <__swbuf_r>

00000708 <__swbuf_r>:
     708:	defffb04 	addi	sp,sp,-20
     70c:	dcc00315 	stw	r19,12(sp)
     710:	dc800215 	stw	r18,8(sp)
     714:	dc000015 	stw	r16,0(sp)
     718:	dfc00415 	stw	ra,16(sp)
     71c:	dc400115 	stw	r17,4(sp)
     720:	2025883a 	mov	r18,r4
     724:	2827883a 	mov	r19,r5
     728:	3021883a 	mov	r16,r6
     72c:	20000226 	beq	r4,zero,738 <__swbuf_r+0x30>
     730:	20800e17 	ldw	r2,56(r4)
     734:	10004226 	beq	r2,zero,840 <__swbuf_r+0x138>
     738:	80800617 	ldw	r2,24(r16)
     73c:	8100030b 	ldhu	r4,12(r16)
     740:	80800215 	stw	r2,8(r16)
     744:	2080020c 	andi	r2,r4,8
     748:	10003626 	beq	r2,zero,824 <__swbuf_r+0x11c>
     74c:	80c00417 	ldw	r3,16(r16)
     750:	18003426 	beq	r3,zero,824 <__swbuf_r+0x11c>
     754:	2088000c 	andi	r2,r4,8192
     758:	9c403fcc 	andi	r17,r19,255
     75c:	10001a26 	beq	r2,zero,7c8 <__swbuf_r+0xc0>
     760:	80800017 	ldw	r2,0(r16)
     764:	81000517 	ldw	r4,20(r16)
     768:	10c7c83a 	sub	r3,r2,r3
     76c:	1900200e 	bge	r3,r4,7f0 <__swbuf_r+0xe8>
     770:	18c00044 	addi	r3,r3,1
     774:	81000217 	ldw	r4,8(r16)
     778:	11400044 	addi	r5,r2,1
     77c:	81400015 	stw	r5,0(r16)
     780:	213fffc4 	addi	r4,r4,-1
     784:	81000215 	stw	r4,8(r16)
     788:	14c00005 	stb	r19,0(r2)
     78c:	80800517 	ldw	r2,20(r16)
     790:	10c01e26 	beq	r2,r3,80c <__swbuf_r+0x104>
     794:	8080030b 	ldhu	r2,12(r16)
     798:	1080004c 	andi	r2,r2,1
     79c:	10000226 	beq	r2,zero,7a8 <__swbuf_r+0xa0>
     7a0:	00800284 	movi	r2,10
     7a4:	88801926 	beq	r17,r2,80c <__swbuf_r+0x104>
     7a8:	8805883a 	mov	r2,r17
     7ac:	dfc00417 	ldw	ra,16(sp)
     7b0:	dcc00317 	ldw	r19,12(sp)
     7b4:	dc800217 	ldw	r18,8(sp)
     7b8:	dc400117 	ldw	r17,4(sp)
     7bc:	dc000017 	ldw	r16,0(sp)
     7c0:	dec00504 	addi	sp,sp,20
     7c4:	f800283a 	ret
     7c8:	81401917 	ldw	r5,100(r16)
     7cc:	00b7ffc4 	movi	r2,-8193
     7d0:	21080014 	ori	r4,r4,8192
     7d4:	2884703a 	and	r2,r5,r2
     7d8:	80801915 	stw	r2,100(r16)
     7dc:	80800017 	ldw	r2,0(r16)
     7e0:	8100030d 	sth	r4,12(r16)
     7e4:	81000517 	ldw	r4,20(r16)
     7e8:	10c7c83a 	sub	r3,r2,r3
     7ec:	193fe016 	blt	r3,r4,770 <__alt_data_end+0xfffe80d0>
     7f0:	800b883a 	mov	r5,r16
     7f4:	9009883a 	mov	r4,r18
     7f8:	0000bd00 	call	bd0 <_fflush_r>
     7fc:	1000071e 	bne	r2,zero,81c <__swbuf_r+0x114>
     800:	80800017 	ldw	r2,0(r16)
     804:	00c00044 	movi	r3,1
     808:	003fda06 	br	774 <__alt_data_end+0xfffe80d4>
     80c:	800b883a 	mov	r5,r16
     810:	9009883a 	mov	r4,r18
     814:	0000bd00 	call	bd0 <_fflush_r>
     818:	103fe326 	beq	r2,zero,7a8 <__alt_data_end+0xfffe8108>
     81c:	00bfffc4 	movi	r2,-1
     820:	003fe206 	br	7ac <__alt_data_end+0xfffe810c>
     824:	800b883a 	mov	r5,r16
     828:	9009883a 	mov	r4,r18
     82c:	00008600 	call	860 <__swsetup_r>
     830:	103ffa1e 	bne	r2,zero,81c <__alt_data_end+0xfffe817c>
     834:	8100030b 	ldhu	r4,12(r16)
     838:	80c00417 	ldw	r3,16(r16)
     83c:	003fc506 	br	754 <__alt_data_end+0xfffe80b4>
     840:	0000fbc0 	call	fbc <__sinit>
     844:	003fbc06 	br	738 <__alt_data_end+0xfffe8098>

00000848 <__swbuf>:
     848:	00800074 	movhi	r2,1
     84c:	10bb3504 	addi	r2,r2,-4908
     850:	280d883a 	mov	r6,r5
     854:	200b883a 	mov	r5,r4
     858:	11000017 	ldw	r4,0(r2)
     85c:	00007081 	jmpi	708 <__swbuf_r>

00000860 <__swsetup_r>:
     860:	00800074 	movhi	r2,1
     864:	defffd04 	addi	sp,sp,-12
     868:	10bb3504 	addi	r2,r2,-4908
     86c:	dc400115 	stw	r17,4(sp)
     870:	2023883a 	mov	r17,r4
     874:	11000017 	ldw	r4,0(r2)
     878:	dc000015 	stw	r16,0(sp)
     87c:	dfc00215 	stw	ra,8(sp)
     880:	2821883a 	mov	r16,r5
     884:	20000226 	beq	r4,zero,890 <__swsetup_r+0x30>
     888:	20800e17 	ldw	r2,56(r4)
     88c:	10003126 	beq	r2,zero,954 <__swsetup_r+0xf4>
     890:	8080030b 	ldhu	r2,12(r16)
     894:	10c0020c 	andi	r3,r2,8
     898:	1009883a 	mov	r4,r2
     89c:	18000f26 	beq	r3,zero,8dc <__swsetup_r+0x7c>
     8a0:	80c00417 	ldw	r3,16(r16)
     8a4:	18001526 	beq	r3,zero,8fc <__swsetup_r+0x9c>
     8a8:	1100004c 	andi	r4,r2,1
     8ac:	20001c1e 	bne	r4,zero,920 <__swsetup_r+0xc0>
     8b0:	1080008c 	andi	r2,r2,2
     8b4:	1000291e 	bne	r2,zero,95c <__swsetup_r+0xfc>
     8b8:	80800517 	ldw	r2,20(r16)
     8bc:	80800215 	stw	r2,8(r16)
     8c0:	18001c26 	beq	r3,zero,934 <__swsetup_r+0xd4>
     8c4:	0005883a 	mov	r2,zero
     8c8:	dfc00217 	ldw	ra,8(sp)
     8cc:	dc400117 	ldw	r17,4(sp)
     8d0:	dc000017 	ldw	r16,0(sp)
     8d4:	dec00304 	addi	sp,sp,12
     8d8:	f800283a 	ret
     8dc:	2080040c 	andi	r2,r4,16
     8e0:	10002e26 	beq	r2,zero,99c <__swsetup_r+0x13c>
     8e4:	2080010c 	andi	r2,r4,4
     8e8:	10001e1e 	bne	r2,zero,964 <__swsetup_r+0x104>
     8ec:	80c00417 	ldw	r3,16(r16)
     8f0:	20800214 	ori	r2,r4,8
     8f4:	8080030d 	sth	r2,12(r16)
     8f8:	183feb1e 	bne	r3,zero,8a8 <__alt_data_end+0xfffe8208>
     8fc:	1100a00c 	andi	r4,r2,640
     900:	01408004 	movi	r5,512
     904:	217fe826 	beq	r4,r5,8a8 <__alt_data_end+0xfffe8208>
     908:	800b883a 	mov	r5,r16
     90c:	8809883a 	mov	r4,r17
     910:	00015c80 	call	15c8 <__smakebuf_r>
     914:	8080030b 	ldhu	r2,12(r16)
     918:	80c00417 	ldw	r3,16(r16)
     91c:	003fe206 	br	8a8 <__alt_data_end+0xfffe8208>
     920:	80800517 	ldw	r2,20(r16)
     924:	80000215 	stw	zero,8(r16)
     928:	0085c83a 	sub	r2,zero,r2
     92c:	80800615 	stw	r2,24(r16)
     930:	183fe41e 	bne	r3,zero,8c4 <__alt_data_end+0xfffe8224>
     934:	80c0030b 	ldhu	r3,12(r16)
     938:	0005883a 	mov	r2,zero
     93c:	1900200c 	andi	r4,r3,128
     940:	203fe126 	beq	r4,zero,8c8 <__alt_data_end+0xfffe8228>
     944:	18c01014 	ori	r3,r3,64
     948:	80c0030d 	sth	r3,12(r16)
     94c:	00bfffc4 	movi	r2,-1
     950:	003fdd06 	br	8c8 <__alt_data_end+0xfffe8228>
     954:	0000fbc0 	call	fbc <__sinit>
     958:	003fcd06 	br	890 <__alt_data_end+0xfffe81f0>
     95c:	0005883a 	mov	r2,zero
     960:	003fd606 	br	8bc <__alt_data_end+0xfffe821c>
     964:	81400c17 	ldw	r5,48(r16)
     968:	28000626 	beq	r5,zero,984 <__swsetup_r+0x124>
     96c:	80801004 	addi	r2,r16,64
     970:	28800326 	beq	r5,r2,980 <__swsetup_r+0x120>
     974:	8809883a 	mov	r4,r17
     978:	00011300 	call	1130 <_free_r>
     97c:	8100030b 	ldhu	r4,12(r16)
     980:	80000c15 	stw	zero,48(r16)
     984:	80c00417 	ldw	r3,16(r16)
     988:	00bff6c4 	movi	r2,-37
     98c:	1108703a 	and	r4,r2,r4
     990:	80000115 	stw	zero,4(r16)
     994:	80c00015 	stw	r3,0(r16)
     998:	003fd506 	br	8f0 <__alt_data_end+0xfffe8250>
     99c:	00800244 	movi	r2,9
     9a0:	88800015 	stw	r2,0(r17)
     9a4:	20801014 	ori	r2,r4,64
     9a8:	8080030d 	sth	r2,12(r16)
     9ac:	00bfffc4 	movi	r2,-1
     9b0:	003fc506 	br	8c8 <__alt_data_end+0xfffe8228>

000009b4 <__sflush_r>:
     9b4:	2880030b 	ldhu	r2,12(r5)
     9b8:	defffb04 	addi	sp,sp,-20
     9bc:	dcc00315 	stw	r19,12(sp)
     9c0:	dc400115 	stw	r17,4(sp)
     9c4:	dfc00415 	stw	ra,16(sp)
     9c8:	dc800215 	stw	r18,8(sp)
     9cc:	dc000015 	stw	r16,0(sp)
     9d0:	10c0020c 	andi	r3,r2,8
     9d4:	2823883a 	mov	r17,r5
     9d8:	2027883a 	mov	r19,r4
     9dc:	1800311e 	bne	r3,zero,aa4 <__sflush_r+0xf0>
     9e0:	28c00117 	ldw	r3,4(r5)
     9e4:	10820014 	ori	r2,r2,2048
     9e8:	2880030d 	sth	r2,12(r5)
     9ec:	00c04b0e 	bge	zero,r3,b1c <__sflush_r+0x168>
     9f0:	8a000a17 	ldw	r8,40(r17)
     9f4:	40002326 	beq	r8,zero,a84 <__sflush_r+0xd0>
     9f8:	9c000017 	ldw	r16,0(r19)
     9fc:	10c4000c 	andi	r3,r2,4096
     a00:	98000015 	stw	zero,0(r19)
     a04:	18004826 	beq	r3,zero,b28 <__sflush_r+0x174>
     a08:	89801417 	ldw	r6,80(r17)
     a0c:	10c0010c 	andi	r3,r2,4
     a10:	18000626 	beq	r3,zero,a2c <__sflush_r+0x78>
     a14:	88c00117 	ldw	r3,4(r17)
     a18:	88800c17 	ldw	r2,48(r17)
     a1c:	30cdc83a 	sub	r6,r6,r3
     a20:	10000226 	beq	r2,zero,a2c <__sflush_r+0x78>
     a24:	88800f17 	ldw	r2,60(r17)
     a28:	308dc83a 	sub	r6,r6,r2
     a2c:	89400717 	ldw	r5,28(r17)
     a30:	000f883a 	mov	r7,zero
     a34:	9809883a 	mov	r4,r19
     a38:	403ee83a 	callr	r8
     a3c:	00ffffc4 	movi	r3,-1
     a40:	10c04426 	beq	r2,r3,b54 <__sflush_r+0x1a0>
     a44:	88c0030b 	ldhu	r3,12(r17)
     a48:	89000417 	ldw	r4,16(r17)
     a4c:	88000115 	stw	zero,4(r17)
     a50:	197dffcc 	andi	r5,r3,63487
     a54:	8940030d 	sth	r5,12(r17)
     a58:	89000015 	stw	r4,0(r17)
     a5c:	18c4000c 	andi	r3,r3,4096
     a60:	18002c1e 	bne	r3,zero,b14 <__sflush_r+0x160>
     a64:	89400c17 	ldw	r5,48(r17)
     a68:	9c000015 	stw	r16,0(r19)
     a6c:	28000526 	beq	r5,zero,a84 <__sflush_r+0xd0>
     a70:	88801004 	addi	r2,r17,64
     a74:	28800226 	beq	r5,r2,a80 <__sflush_r+0xcc>
     a78:	9809883a 	mov	r4,r19
     a7c:	00011300 	call	1130 <_free_r>
     a80:	88000c15 	stw	zero,48(r17)
     a84:	0005883a 	mov	r2,zero
     a88:	dfc00417 	ldw	ra,16(sp)
     a8c:	dcc00317 	ldw	r19,12(sp)
     a90:	dc800217 	ldw	r18,8(sp)
     a94:	dc400117 	ldw	r17,4(sp)
     a98:	dc000017 	ldw	r16,0(sp)
     a9c:	dec00504 	addi	sp,sp,20
     aa0:	f800283a 	ret
     aa4:	2c800417 	ldw	r18,16(r5)
     aa8:	903ff626 	beq	r18,zero,a84 <__alt_data_end+0xfffe83e4>
     aac:	2c000017 	ldw	r16,0(r5)
     ab0:	108000cc 	andi	r2,r2,3
     ab4:	2c800015 	stw	r18,0(r5)
     ab8:	84a1c83a 	sub	r16,r16,r18
     abc:	1000131e 	bne	r2,zero,b0c <__sflush_r+0x158>
     ac0:	28800517 	ldw	r2,20(r5)
     ac4:	88800215 	stw	r2,8(r17)
     ac8:	04000316 	blt	zero,r16,ad8 <__sflush_r+0x124>
     acc:	003fed06 	br	a84 <__alt_data_end+0xfffe83e4>
     ad0:	90a5883a 	add	r18,r18,r2
     ad4:	043feb0e 	bge	zero,r16,a84 <__alt_data_end+0xfffe83e4>
     ad8:	88800917 	ldw	r2,36(r17)
     adc:	89400717 	ldw	r5,28(r17)
     ae0:	800f883a 	mov	r7,r16
     ae4:	900d883a 	mov	r6,r18
     ae8:	9809883a 	mov	r4,r19
     aec:	103ee83a 	callr	r2
     af0:	80a1c83a 	sub	r16,r16,r2
     af4:	00bff616 	blt	zero,r2,ad0 <__alt_data_end+0xfffe8430>
     af8:	88c0030b 	ldhu	r3,12(r17)
     afc:	00bfffc4 	movi	r2,-1
     b00:	18c01014 	ori	r3,r3,64
     b04:	88c0030d 	sth	r3,12(r17)
     b08:	003fdf06 	br	a88 <__alt_data_end+0xfffe83e8>
     b0c:	0005883a 	mov	r2,zero
     b10:	003fec06 	br	ac4 <__alt_data_end+0xfffe8424>
     b14:	88801415 	stw	r2,80(r17)
     b18:	003fd206 	br	a64 <__alt_data_end+0xfffe83c4>
     b1c:	28c00f17 	ldw	r3,60(r5)
     b20:	00ffb316 	blt	zero,r3,9f0 <__alt_data_end+0xfffe8350>
     b24:	003fd706 	br	a84 <__alt_data_end+0xfffe83e4>
     b28:	89400717 	ldw	r5,28(r17)
     b2c:	000d883a 	mov	r6,zero
     b30:	01c00044 	movi	r7,1
     b34:	9809883a 	mov	r4,r19
     b38:	403ee83a 	callr	r8
     b3c:	100d883a 	mov	r6,r2
     b40:	00bfffc4 	movi	r2,-1
     b44:	30801426 	beq	r6,r2,b98 <__sflush_r+0x1e4>
     b48:	8880030b 	ldhu	r2,12(r17)
     b4c:	8a000a17 	ldw	r8,40(r17)
     b50:	003fae06 	br	a0c <__alt_data_end+0xfffe836c>
     b54:	98c00017 	ldw	r3,0(r19)
     b58:	183fba26 	beq	r3,zero,a44 <__alt_data_end+0xfffe83a4>
     b5c:	01000744 	movi	r4,29
     b60:	19000626 	beq	r3,r4,b7c <__sflush_r+0x1c8>
     b64:	01000584 	movi	r4,22
     b68:	19000426 	beq	r3,r4,b7c <__sflush_r+0x1c8>
     b6c:	88c0030b 	ldhu	r3,12(r17)
     b70:	18c01014 	ori	r3,r3,64
     b74:	88c0030d 	sth	r3,12(r17)
     b78:	003fc306 	br	a88 <__alt_data_end+0xfffe83e8>
     b7c:	8880030b 	ldhu	r2,12(r17)
     b80:	88c00417 	ldw	r3,16(r17)
     b84:	88000115 	stw	zero,4(r17)
     b88:	10bdffcc 	andi	r2,r2,63487
     b8c:	8880030d 	sth	r2,12(r17)
     b90:	88c00015 	stw	r3,0(r17)
     b94:	003fb306 	br	a64 <__alt_data_end+0xfffe83c4>
     b98:	98800017 	ldw	r2,0(r19)
     b9c:	103fea26 	beq	r2,zero,b48 <__alt_data_end+0xfffe84a8>
     ba0:	00c00744 	movi	r3,29
     ba4:	10c00226 	beq	r2,r3,bb0 <__sflush_r+0x1fc>
     ba8:	00c00584 	movi	r3,22
     bac:	10c0031e 	bne	r2,r3,bbc <__sflush_r+0x208>
     bb0:	9c000015 	stw	r16,0(r19)
     bb4:	0005883a 	mov	r2,zero
     bb8:	003fb306 	br	a88 <__alt_data_end+0xfffe83e8>
     bbc:	88c0030b 	ldhu	r3,12(r17)
     bc0:	3005883a 	mov	r2,r6
     bc4:	18c01014 	ori	r3,r3,64
     bc8:	88c0030d 	sth	r3,12(r17)
     bcc:	003fae06 	br	a88 <__alt_data_end+0xfffe83e8>

00000bd0 <_fflush_r>:
     bd0:	defffd04 	addi	sp,sp,-12
     bd4:	dc000115 	stw	r16,4(sp)
     bd8:	dfc00215 	stw	ra,8(sp)
     bdc:	2021883a 	mov	r16,r4
     be0:	20000226 	beq	r4,zero,bec <_fflush_r+0x1c>
     be4:	20800e17 	ldw	r2,56(r4)
     be8:	10000c26 	beq	r2,zero,c1c <_fflush_r+0x4c>
     bec:	2880030f 	ldh	r2,12(r5)
     bf0:	1000051e 	bne	r2,zero,c08 <_fflush_r+0x38>
     bf4:	0005883a 	mov	r2,zero
     bf8:	dfc00217 	ldw	ra,8(sp)
     bfc:	dc000117 	ldw	r16,4(sp)
     c00:	dec00304 	addi	sp,sp,12
     c04:	f800283a 	ret
     c08:	8009883a 	mov	r4,r16
     c0c:	dfc00217 	ldw	ra,8(sp)
     c10:	dc000117 	ldw	r16,4(sp)
     c14:	dec00304 	addi	sp,sp,12
     c18:	00009b41 	jmpi	9b4 <__sflush_r>
     c1c:	d9400015 	stw	r5,0(sp)
     c20:	0000fbc0 	call	fbc <__sinit>
     c24:	d9400017 	ldw	r5,0(sp)
     c28:	003ff006 	br	bec <__alt_data_end+0xfffe854c>

00000c2c <fflush>:
     c2c:	20000526 	beq	r4,zero,c44 <fflush+0x18>
     c30:	00800074 	movhi	r2,1
     c34:	10bb3504 	addi	r2,r2,-4908
     c38:	200b883a 	mov	r5,r4
     c3c:	11000017 	ldw	r4,0(r2)
     c40:	0000bd01 	jmpi	bd0 <_fflush_r>
     c44:	00800074 	movhi	r2,1
     c48:	10bb3404 	addi	r2,r2,-4912
     c4c:	11000017 	ldw	r4,0(r2)
     c50:	01400034 	movhi	r5,0
     c54:	2942f404 	addi	r5,r5,3024
     c58:	00015041 	jmpi	1504 <_fwalk_reent>

00000c5c <__fp_unlock>:
     c5c:	0005883a 	mov	r2,zero
     c60:	f800283a 	ret

00000c64 <_cleanup_r>:
     c64:	01400034 	movhi	r5,0
     c68:	29487504 	addi	r5,r5,8660
     c6c:	00015041 	jmpi	1504 <_fwalk_reent>

00000c70 <__sinit.part.1>:
     c70:	defff704 	addi	sp,sp,-36
     c74:	00c00034 	movhi	r3,0
     c78:	dfc00815 	stw	ra,32(sp)
     c7c:	ddc00715 	stw	r23,28(sp)
     c80:	dd800615 	stw	r22,24(sp)
     c84:	dd400515 	stw	r21,20(sp)
     c88:	dd000415 	stw	r20,16(sp)
     c8c:	dcc00315 	stw	r19,12(sp)
     c90:	dc800215 	stw	r18,8(sp)
     c94:	dc400115 	stw	r17,4(sp)
     c98:	dc000015 	stw	r16,0(sp)
     c9c:	18c31904 	addi	r3,r3,3172
     ca0:	24000117 	ldw	r16,4(r4)
     ca4:	20c00f15 	stw	r3,60(r4)
     ca8:	2080bb04 	addi	r2,r4,748
     cac:	00c000c4 	movi	r3,3
     cb0:	20c0b915 	stw	r3,740(r4)
     cb4:	2080ba15 	stw	r2,744(r4)
     cb8:	2000b815 	stw	zero,736(r4)
     cbc:	05c00204 	movi	r23,8
     cc0:	00800104 	movi	r2,4
     cc4:	2025883a 	mov	r18,r4
     cc8:	b80d883a 	mov	r6,r23
     ccc:	81001704 	addi	r4,r16,92
     cd0:	000b883a 	mov	r5,zero
     cd4:	80000015 	stw	zero,0(r16)
     cd8:	80000115 	stw	zero,4(r16)
     cdc:	80000215 	stw	zero,8(r16)
     ce0:	8080030d 	sth	r2,12(r16)
     ce4:	80001915 	stw	zero,100(r16)
     ce8:	8000038d 	sth	zero,14(r16)
     cec:	80000415 	stw	zero,16(r16)
     cf0:	80000515 	stw	zero,20(r16)
     cf4:	80000615 	stw	zero,24(r16)
     cf8:	00004580 	call	458 <memset>
     cfc:	05800034 	movhi	r22,0
     d00:	94400217 	ldw	r17,8(r18)
     d04:	05400034 	movhi	r21,0
     d08:	05000034 	movhi	r20,0
     d0c:	04c00034 	movhi	r19,0
     d10:	b587f904 	addi	r22,r22,8164
     d14:	ad481004 	addi	r21,r21,8256
     d18:	a5082f04 	addi	r20,r20,8380
     d1c:	9cc84604 	addi	r19,r19,8472
     d20:	85800815 	stw	r22,32(r16)
     d24:	85400915 	stw	r21,36(r16)
     d28:	85000a15 	stw	r20,40(r16)
     d2c:	84c00b15 	stw	r19,44(r16)
     d30:	84000715 	stw	r16,28(r16)
     d34:	00800284 	movi	r2,10
     d38:	8880030d 	sth	r2,12(r17)
     d3c:	00800044 	movi	r2,1
     d40:	b80d883a 	mov	r6,r23
     d44:	89001704 	addi	r4,r17,92
     d48:	000b883a 	mov	r5,zero
     d4c:	88000015 	stw	zero,0(r17)
     d50:	88000115 	stw	zero,4(r17)
     d54:	88000215 	stw	zero,8(r17)
     d58:	88001915 	stw	zero,100(r17)
     d5c:	8880038d 	sth	r2,14(r17)
     d60:	88000415 	stw	zero,16(r17)
     d64:	88000515 	stw	zero,20(r17)
     d68:	88000615 	stw	zero,24(r17)
     d6c:	00004580 	call	458 <memset>
     d70:	94000317 	ldw	r16,12(r18)
     d74:	00800484 	movi	r2,18
     d78:	8c400715 	stw	r17,28(r17)
     d7c:	8d800815 	stw	r22,32(r17)
     d80:	8d400915 	stw	r21,36(r17)
     d84:	8d000a15 	stw	r20,40(r17)
     d88:	8cc00b15 	stw	r19,44(r17)
     d8c:	8080030d 	sth	r2,12(r16)
     d90:	00800084 	movi	r2,2
     d94:	80000015 	stw	zero,0(r16)
     d98:	80000115 	stw	zero,4(r16)
     d9c:	80000215 	stw	zero,8(r16)
     da0:	80001915 	stw	zero,100(r16)
     da4:	8080038d 	sth	r2,14(r16)
     da8:	80000415 	stw	zero,16(r16)
     dac:	80000515 	stw	zero,20(r16)
     db0:	80000615 	stw	zero,24(r16)
     db4:	b80d883a 	mov	r6,r23
     db8:	000b883a 	mov	r5,zero
     dbc:	81001704 	addi	r4,r16,92
     dc0:	00004580 	call	458 <memset>
     dc4:	00800044 	movi	r2,1
     dc8:	84000715 	stw	r16,28(r16)
     dcc:	85800815 	stw	r22,32(r16)
     dd0:	85400915 	stw	r21,36(r16)
     dd4:	85000a15 	stw	r20,40(r16)
     dd8:	84c00b15 	stw	r19,44(r16)
     ddc:	90800e15 	stw	r2,56(r18)
     de0:	dfc00817 	ldw	ra,32(sp)
     de4:	ddc00717 	ldw	r23,28(sp)
     de8:	dd800617 	ldw	r22,24(sp)
     dec:	dd400517 	ldw	r21,20(sp)
     df0:	dd000417 	ldw	r20,16(sp)
     df4:	dcc00317 	ldw	r19,12(sp)
     df8:	dc800217 	ldw	r18,8(sp)
     dfc:	dc400117 	ldw	r17,4(sp)
     e00:	dc000017 	ldw	r16,0(sp)
     e04:	dec00904 	addi	sp,sp,36
     e08:	f800283a 	ret

00000e0c <__fp_lock>:
     e0c:	0005883a 	mov	r2,zero
     e10:	f800283a 	ret

00000e14 <__sfmoreglue>:
     e14:	defffc04 	addi	sp,sp,-16
     e18:	dc800215 	stw	r18,8(sp)
     e1c:	2825883a 	mov	r18,r5
     e20:	dc000015 	stw	r16,0(sp)
     e24:	01401a04 	movi	r5,104
     e28:	2021883a 	mov	r16,r4
     e2c:	913fffc4 	addi	r4,r18,-1
     e30:	dfc00315 	stw	ra,12(sp)
     e34:	dc400115 	stw	r17,4(sp)
     e38:	00024480 	call	2448 <__mulsi3>
     e3c:	8009883a 	mov	r4,r16
     e40:	11401d04 	addi	r5,r2,116
     e44:	1023883a 	mov	r17,r2
     e48:	00017840 	call	1784 <_malloc_r>
     e4c:	1021883a 	mov	r16,r2
     e50:	10000726 	beq	r2,zero,e70 <__sfmoreglue+0x5c>
     e54:	11000304 	addi	r4,r2,12
     e58:	10000015 	stw	zero,0(r2)
     e5c:	14800115 	stw	r18,4(r2)
     e60:	11000215 	stw	r4,8(r2)
     e64:	89801a04 	addi	r6,r17,104
     e68:	000b883a 	mov	r5,zero
     e6c:	00004580 	call	458 <memset>
     e70:	8005883a 	mov	r2,r16
     e74:	dfc00317 	ldw	ra,12(sp)
     e78:	dc800217 	ldw	r18,8(sp)
     e7c:	dc400117 	ldw	r17,4(sp)
     e80:	dc000017 	ldw	r16,0(sp)
     e84:	dec00404 	addi	sp,sp,16
     e88:	f800283a 	ret

00000e8c <__sfp>:
     e8c:	defffb04 	addi	sp,sp,-20
     e90:	dc000015 	stw	r16,0(sp)
     e94:	04000074 	movhi	r16,1
     e98:	843b3404 	addi	r16,r16,-4912
     e9c:	dcc00315 	stw	r19,12(sp)
     ea0:	2027883a 	mov	r19,r4
     ea4:	81000017 	ldw	r4,0(r16)
     ea8:	dfc00415 	stw	ra,16(sp)
     eac:	dc800215 	stw	r18,8(sp)
     eb0:	20800e17 	ldw	r2,56(r4)
     eb4:	dc400115 	stw	r17,4(sp)
     eb8:	1000021e 	bne	r2,zero,ec4 <__sfp+0x38>
     ebc:	0000c700 	call	c70 <__sinit.part.1>
     ec0:	81000017 	ldw	r4,0(r16)
     ec4:	2480b804 	addi	r18,r4,736
     ec8:	047fffc4 	movi	r17,-1
     ecc:	91000117 	ldw	r4,4(r18)
     ed0:	94000217 	ldw	r16,8(r18)
     ed4:	213fffc4 	addi	r4,r4,-1
     ed8:	20000a16 	blt	r4,zero,f04 <__sfp+0x78>
     edc:	8080030f 	ldh	r2,12(r16)
     ee0:	10000c26 	beq	r2,zero,f14 <__sfp+0x88>
     ee4:	80c01d04 	addi	r3,r16,116
     ee8:	00000206 	br	ef4 <__sfp+0x68>
     eec:	18bfe60f 	ldh	r2,-104(r3)
     ef0:	10000826 	beq	r2,zero,f14 <__sfp+0x88>
     ef4:	213fffc4 	addi	r4,r4,-1
     ef8:	1c3ffd04 	addi	r16,r3,-12
     efc:	18c01a04 	addi	r3,r3,104
     f00:	247ffa1e 	bne	r4,r17,eec <__alt_data_end+0xfffe884c>
     f04:	90800017 	ldw	r2,0(r18)
     f08:	10001d26 	beq	r2,zero,f80 <__sfp+0xf4>
     f0c:	1025883a 	mov	r18,r2
     f10:	003fee06 	br	ecc <__alt_data_end+0xfffe882c>
     f14:	00bfffc4 	movi	r2,-1
     f18:	8080038d 	sth	r2,14(r16)
     f1c:	00800044 	movi	r2,1
     f20:	8080030d 	sth	r2,12(r16)
     f24:	80001915 	stw	zero,100(r16)
     f28:	80000015 	stw	zero,0(r16)
     f2c:	80000215 	stw	zero,8(r16)
     f30:	80000115 	stw	zero,4(r16)
     f34:	80000415 	stw	zero,16(r16)
     f38:	80000515 	stw	zero,20(r16)
     f3c:	80000615 	stw	zero,24(r16)
     f40:	01800204 	movi	r6,8
     f44:	000b883a 	mov	r5,zero
     f48:	81001704 	addi	r4,r16,92
     f4c:	00004580 	call	458 <memset>
     f50:	8005883a 	mov	r2,r16
     f54:	80000c15 	stw	zero,48(r16)
     f58:	80000d15 	stw	zero,52(r16)
     f5c:	80001115 	stw	zero,68(r16)
     f60:	80001215 	stw	zero,72(r16)
     f64:	dfc00417 	ldw	ra,16(sp)
     f68:	dcc00317 	ldw	r19,12(sp)
     f6c:	dc800217 	ldw	r18,8(sp)
     f70:	dc400117 	ldw	r17,4(sp)
     f74:	dc000017 	ldw	r16,0(sp)
     f78:	dec00504 	addi	sp,sp,20
     f7c:	f800283a 	ret
     f80:	01400104 	movi	r5,4
     f84:	9809883a 	mov	r4,r19
     f88:	0000e140 	call	e14 <__sfmoreglue>
     f8c:	90800015 	stw	r2,0(r18)
     f90:	103fde1e 	bne	r2,zero,f0c <__alt_data_end+0xfffe886c>
     f94:	00800304 	movi	r2,12
     f98:	98800015 	stw	r2,0(r19)
     f9c:	0005883a 	mov	r2,zero
     fa0:	003ff006 	br	f64 <__alt_data_end+0xfffe88c4>

00000fa4 <_cleanup>:
     fa4:	00800074 	movhi	r2,1
     fa8:	10bb3404 	addi	r2,r2,-4912
     fac:	11000017 	ldw	r4,0(r2)
     fb0:	01400034 	movhi	r5,0
     fb4:	29487504 	addi	r5,r5,8660
     fb8:	00015041 	jmpi	1504 <_fwalk_reent>

00000fbc <__sinit>:
     fbc:	20800e17 	ldw	r2,56(r4)
     fc0:	10000126 	beq	r2,zero,fc8 <__sinit+0xc>
     fc4:	f800283a 	ret
     fc8:	0000c701 	jmpi	c70 <__sinit.part.1>

00000fcc <__sfp_lock_acquire>:
     fcc:	f800283a 	ret

00000fd0 <__sfp_lock_release>:
     fd0:	f800283a 	ret

00000fd4 <__sinit_lock_acquire>:
     fd4:	f800283a 	ret

00000fd8 <__sinit_lock_release>:
     fd8:	f800283a 	ret

00000fdc <__fp_lock_all>:
     fdc:	00800074 	movhi	r2,1
     fe0:	10bb3504 	addi	r2,r2,-4908
     fe4:	11000017 	ldw	r4,0(r2)
     fe8:	01400034 	movhi	r5,0
     fec:	29438304 	addi	r5,r5,3596
     ff0:	00014401 	jmpi	1440 <_fwalk>

00000ff4 <__fp_unlock_all>:
     ff4:	00800074 	movhi	r2,1
     ff8:	10bb3504 	addi	r2,r2,-4908
     ffc:	11000017 	ldw	r4,0(r2)
    1000:	01400034 	movhi	r5,0
    1004:	29431704 	addi	r5,r5,3164
    1008:	00014401 	jmpi	1440 <_fwalk>

0000100c <_malloc_trim_r>:
    100c:	defffb04 	addi	sp,sp,-20
    1010:	dcc00315 	stw	r19,12(sp)
    1014:	04c00074 	movhi	r19,1
    1018:	dc800215 	stw	r18,8(sp)
    101c:	dc400115 	stw	r17,4(sp)
    1020:	dc000015 	stw	r16,0(sp)
    1024:	dfc00415 	stw	ra,16(sp)
    1028:	2821883a 	mov	r16,r5
    102c:	9cf5a204 	addi	r19,r19,-10616
    1030:	2025883a 	mov	r18,r4
    1034:	0002f200 	call	2f20 <__malloc_lock>
    1038:	98800217 	ldw	r2,8(r19)
    103c:	14400117 	ldw	r17,4(r2)
    1040:	00bfff04 	movi	r2,-4
    1044:	88a2703a 	and	r17,r17,r2
    1048:	8c21c83a 	sub	r16,r17,r16
    104c:	8403fbc4 	addi	r16,r16,4079
    1050:	8020d33a 	srli	r16,r16,12
    1054:	0083ffc4 	movi	r2,4095
    1058:	843fffc4 	addi	r16,r16,-1
    105c:	8020933a 	slli	r16,r16,12
    1060:	1400060e 	bge	r2,r16,107c <_malloc_trim_r+0x70>
    1064:	000b883a 	mov	r5,zero
    1068:	9009883a 	mov	r4,r18
    106c:	0001f900 	call	1f90 <_sbrk_r>
    1070:	98c00217 	ldw	r3,8(r19)
    1074:	1c47883a 	add	r3,r3,r17
    1078:	10c00a26 	beq	r2,r3,10a4 <_malloc_trim_r+0x98>
    107c:	9009883a 	mov	r4,r18
    1080:	00030400 	call	3040 <__malloc_unlock>
    1084:	0005883a 	mov	r2,zero
    1088:	dfc00417 	ldw	ra,16(sp)
    108c:	dcc00317 	ldw	r19,12(sp)
    1090:	dc800217 	ldw	r18,8(sp)
    1094:	dc400117 	ldw	r17,4(sp)
    1098:	dc000017 	ldw	r16,0(sp)
    109c:	dec00504 	addi	sp,sp,20
    10a0:	f800283a 	ret
    10a4:	040bc83a 	sub	r5,zero,r16
    10a8:	9009883a 	mov	r4,r18
    10ac:	0001f900 	call	1f90 <_sbrk_r>
    10b0:	00ffffc4 	movi	r3,-1
    10b4:	10c00d26 	beq	r2,r3,10ec <_malloc_trim_r+0xe0>
    10b8:	00c00074 	movhi	r3,1
    10bc:	18c24e04 	addi	r3,r3,2360
    10c0:	18800017 	ldw	r2,0(r3)
    10c4:	99000217 	ldw	r4,8(r19)
    10c8:	8c23c83a 	sub	r17,r17,r16
    10cc:	8c400054 	ori	r17,r17,1
    10d0:	1421c83a 	sub	r16,r2,r16
    10d4:	24400115 	stw	r17,4(r4)
    10d8:	9009883a 	mov	r4,r18
    10dc:	1c000015 	stw	r16,0(r3)
    10e0:	00030400 	call	3040 <__malloc_unlock>
    10e4:	00800044 	movi	r2,1
    10e8:	003fe706 	br	1088 <__alt_data_end+0xfffe89e8>
    10ec:	000b883a 	mov	r5,zero
    10f0:	9009883a 	mov	r4,r18
    10f4:	0001f900 	call	1f90 <_sbrk_r>
    10f8:	99000217 	ldw	r4,8(r19)
    10fc:	014003c4 	movi	r5,15
    1100:	1107c83a 	sub	r3,r2,r4
    1104:	28ffdd0e 	bge	r5,r3,107c <__alt_data_end+0xfffe89dc>
    1108:	01400074 	movhi	r5,1
    110c:	297b3604 	addi	r5,r5,-4904
    1110:	29400017 	ldw	r5,0(r5)
    1114:	18c00054 	ori	r3,r3,1
    1118:	20c00115 	stw	r3,4(r4)
    111c:	00c00074 	movhi	r3,1
    1120:	1145c83a 	sub	r2,r2,r5
    1124:	18c24e04 	addi	r3,r3,2360
    1128:	18800015 	stw	r2,0(r3)
    112c:	003fd306 	br	107c <__alt_data_end+0xfffe89dc>

00001130 <_free_r>:
    1130:	28004126 	beq	r5,zero,1238 <_free_r+0x108>
    1134:	defffd04 	addi	sp,sp,-12
    1138:	dc400115 	stw	r17,4(sp)
    113c:	dc000015 	stw	r16,0(sp)
    1140:	2023883a 	mov	r17,r4
    1144:	2821883a 	mov	r16,r5
    1148:	dfc00215 	stw	ra,8(sp)
    114c:	0002f200 	call	2f20 <__malloc_lock>
    1150:	81ffff17 	ldw	r7,-4(r16)
    1154:	00bfff84 	movi	r2,-2
    1158:	01000074 	movhi	r4,1
    115c:	81bffe04 	addi	r6,r16,-8
    1160:	3884703a 	and	r2,r7,r2
    1164:	2135a204 	addi	r4,r4,-10616
    1168:	308b883a 	add	r5,r6,r2
    116c:	2a400117 	ldw	r9,4(r5)
    1170:	22000217 	ldw	r8,8(r4)
    1174:	00ffff04 	movi	r3,-4
    1178:	48c6703a 	and	r3,r9,r3
    117c:	2a005726 	beq	r5,r8,12dc <_free_r+0x1ac>
    1180:	28c00115 	stw	r3,4(r5)
    1184:	39c0004c 	andi	r7,r7,1
    1188:	3800091e 	bne	r7,zero,11b0 <_free_r+0x80>
    118c:	823ffe17 	ldw	r8,-8(r16)
    1190:	22400204 	addi	r9,r4,8
    1194:	320dc83a 	sub	r6,r6,r8
    1198:	31c00217 	ldw	r7,8(r6)
    119c:	1205883a 	add	r2,r2,r8
    11a0:	3a406526 	beq	r7,r9,1338 <_free_r+0x208>
    11a4:	32000317 	ldw	r8,12(r6)
    11a8:	3a000315 	stw	r8,12(r7)
    11ac:	41c00215 	stw	r7,8(r8)
    11b0:	28cf883a 	add	r7,r5,r3
    11b4:	39c00117 	ldw	r7,4(r7)
    11b8:	39c0004c 	andi	r7,r7,1
    11bc:	38003a26 	beq	r7,zero,12a8 <_free_r+0x178>
    11c0:	10c00054 	ori	r3,r2,1
    11c4:	30c00115 	stw	r3,4(r6)
    11c8:	3087883a 	add	r3,r6,r2
    11cc:	18800015 	stw	r2,0(r3)
    11d0:	00c07fc4 	movi	r3,511
    11d4:	18801936 	bltu	r3,r2,123c <_free_r+0x10c>
    11d8:	1004d0fa 	srli	r2,r2,3
    11dc:	01c00044 	movi	r7,1
    11e0:	21400117 	ldw	r5,4(r4)
    11e4:	10c00044 	addi	r3,r2,1
    11e8:	18c7883a 	add	r3,r3,r3
    11ec:	1005d0ba 	srai	r2,r2,2
    11f0:	18c7883a 	add	r3,r3,r3
    11f4:	18c7883a 	add	r3,r3,r3
    11f8:	1907883a 	add	r3,r3,r4
    11fc:	3884983a 	sll	r2,r7,r2
    1200:	19c00017 	ldw	r7,0(r3)
    1204:	1a3ffe04 	addi	r8,r3,-8
    1208:	1144b03a 	or	r2,r2,r5
    120c:	32000315 	stw	r8,12(r6)
    1210:	31c00215 	stw	r7,8(r6)
    1214:	20800115 	stw	r2,4(r4)
    1218:	19800015 	stw	r6,0(r3)
    121c:	39800315 	stw	r6,12(r7)
    1220:	8809883a 	mov	r4,r17
    1224:	dfc00217 	ldw	ra,8(sp)
    1228:	dc400117 	ldw	r17,4(sp)
    122c:	dc000017 	ldw	r16,0(sp)
    1230:	dec00304 	addi	sp,sp,12
    1234:	00030401 	jmpi	3040 <__malloc_unlock>
    1238:	f800283a 	ret
    123c:	100ad27a 	srli	r5,r2,9
    1240:	00c00104 	movi	r3,4
    1244:	19404a36 	bltu	r3,r5,1370 <_free_r+0x240>
    1248:	100ad1ba 	srli	r5,r2,6
    124c:	28c00e44 	addi	r3,r5,57
    1250:	18c7883a 	add	r3,r3,r3
    1254:	29400e04 	addi	r5,r5,56
    1258:	18c7883a 	add	r3,r3,r3
    125c:	18c7883a 	add	r3,r3,r3
    1260:	1909883a 	add	r4,r3,r4
    1264:	20c00017 	ldw	r3,0(r4)
    1268:	01c00074 	movhi	r7,1
    126c:	213ffe04 	addi	r4,r4,-8
    1270:	39f5a204 	addi	r7,r7,-10616
    1274:	20c04426 	beq	r4,r3,1388 <_free_r+0x258>
    1278:	01ffff04 	movi	r7,-4
    127c:	19400117 	ldw	r5,4(r3)
    1280:	29ca703a 	and	r5,r5,r7
    1284:	1140022e 	bgeu	r2,r5,1290 <_free_r+0x160>
    1288:	18c00217 	ldw	r3,8(r3)
    128c:	20fffb1e 	bne	r4,r3,127c <__alt_data_end+0xfffe8bdc>
    1290:	19000317 	ldw	r4,12(r3)
    1294:	31000315 	stw	r4,12(r6)
    1298:	30c00215 	stw	r3,8(r6)
    129c:	21800215 	stw	r6,8(r4)
    12a0:	19800315 	stw	r6,12(r3)
    12a4:	003fde06 	br	1220 <__alt_data_end+0xfffe8b80>
    12a8:	29c00217 	ldw	r7,8(r5)
    12ac:	10c5883a 	add	r2,r2,r3
    12b0:	00c00074 	movhi	r3,1
    12b4:	18f5a404 	addi	r3,r3,-10608
    12b8:	38c03b26 	beq	r7,r3,13a8 <_free_r+0x278>
    12bc:	2a000317 	ldw	r8,12(r5)
    12c0:	11400054 	ori	r5,r2,1
    12c4:	3087883a 	add	r3,r6,r2
    12c8:	3a000315 	stw	r8,12(r7)
    12cc:	41c00215 	stw	r7,8(r8)
    12d0:	31400115 	stw	r5,4(r6)
    12d4:	18800015 	stw	r2,0(r3)
    12d8:	003fbd06 	br	11d0 <__alt_data_end+0xfffe8b30>
    12dc:	39c0004c 	andi	r7,r7,1
    12e0:	10c5883a 	add	r2,r2,r3
    12e4:	3800071e 	bne	r7,zero,1304 <_free_r+0x1d4>
    12e8:	81fffe17 	ldw	r7,-8(r16)
    12ec:	31cdc83a 	sub	r6,r6,r7
    12f0:	30c00317 	ldw	r3,12(r6)
    12f4:	31400217 	ldw	r5,8(r6)
    12f8:	11c5883a 	add	r2,r2,r7
    12fc:	28c00315 	stw	r3,12(r5)
    1300:	19400215 	stw	r5,8(r3)
    1304:	10c00054 	ori	r3,r2,1
    1308:	30c00115 	stw	r3,4(r6)
    130c:	00c00074 	movhi	r3,1
    1310:	18fb3704 	addi	r3,r3,-4900
    1314:	18c00017 	ldw	r3,0(r3)
    1318:	21800215 	stw	r6,8(r4)
    131c:	10ffc036 	bltu	r2,r3,1220 <__alt_data_end+0xfffe8b80>
    1320:	00800074 	movhi	r2,1
    1324:	10822c04 	addi	r2,r2,2224
    1328:	11400017 	ldw	r5,0(r2)
    132c:	8809883a 	mov	r4,r17
    1330:	000100c0 	call	100c <_malloc_trim_r>
    1334:	003fba06 	br	1220 <__alt_data_end+0xfffe8b80>
    1338:	28c9883a 	add	r4,r5,r3
    133c:	21000117 	ldw	r4,4(r4)
    1340:	2100004c 	andi	r4,r4,1
    1344:	2000391e 	bne	r4,zero,142c <_free_r+0x2fc>
    1348:	29c00217 	ldw	r7,8(r5)
    134c:	29000317 	ldw	r4,12(r5)
    1350:	1885883a 	add	r2,r3,r2
    1354:	10c00054 	ori	r3,r2,1
    1358:	39000315 	stw	r4,12(r7)
    135c:	21c00215 	stw	r7,8(r4)
    1360:	30c00115 	stw	r3,4(r6)
    1364:	308d883a 	add	r6,r6,r2
    1368:	30800015 	stw	r2,0(r6)
    136c:	003fac06 	br	1220 <__alt_data_end+0xfffe8b80>
    1370:	00c00504 	movi	r3,20
    1374:	19401536 	bltu	r3,r5,13cc <_free_r+0x29c>
    1378:	28c01704 	addi	r3,r5,92
    137c:	18c7883a 	add	r3,r3,r3
    1380:	294016c4 	addi	r5,r5,91
    1384:	003fb406 	br	1258 <__alt_data_end+0xfffe8bb8>
    1388:	280bd0ba 	srai	r5,r5,2
    138c:	00c00044 	movi	r3,1
    1390:	38800117 	ldw	r2,4(r7)
    1394:	194a983a 	sll	r5,r3,r5
    1398:	2007883a 	mov	r3,r4
    139c:	2884b03a 	or	r2,r5,r2
    13a0:	38800115 	stw	r2,4(r7)
    13a4:	003fbb06 	br	1294 <__alt_data_end+0xfffe8bf4>
    13a8:	21800515 	stw	r6,20(r4)
    13ac:	21800415 	stw	r6,16(r4)
    13b0:	10c00054 	ori	r3,r2,1
    13b4:	31c00315 	stw	r7,12(r6)
    13b8:	31c00215 	stw	r7,8(r6)
    13bc:	30c00115 	stw	r3,4(r6)
    13c0:	308d883a 	add	r6,r6,r2
    13c4:	30800015 	stw	r2,0(r6)
    13c8:	003f9506 	br	1220 <__alt_data_end+0xfffe8b80>
    13cc:	00c01504 	movi	r3,84
    13d0:	19400536 	bltu	r3,r5,13e8 <_free_r+0x2b8>
    13d4:	100ad33a 	srli	r5,r2,12
    13d8:	28c01bc4 	addi	r3,r5,111
    13dc:	18c7883a 	add	r3,r3,r3
    13e0:	29401b84 	addi	r5,r5,110
    13e4:	003f9c06 	br	1258 <__alt_data_end+0xfffe8bb8>
    13e8:	00c05504 	movi	r3,340
    13ec:	19400536 	bltu	r3,r5,1404 <_free_r+0x2d4>
    13f0:	100ad3fa 	srli	r5,r2,15
    13f4:	28c01e04 	addi	r3,r5,120
    13f8:	18c7883a 	add	r3,r3,r3
    13fc:	29401dc4 	addi	r5,r5,119
    1400:	003f9506 	br	1258 <__alt_data_end+0xfffe8bb8>
    1404:	00c15504 	movi	r3,1364
    1408:	19400536 	bltu	r3,r5,1420 <_free_r+0x2f0>
    140c:	100ad4ba 	srli	r5,r2,18
    1410:	28c01f44 	addi	r3,r5,125
    1414:	18c7883a 	add	r3,r3,r3
    1418:	29401f04 	addi	r5,r5,124
    141c:	003f8e06 	br	1258 <__alt_data_end+0xfffe8bb8>
    1420:	00c03f84 	movi	r3,254
    1424:	01401f84 	movi	r5,126
    1428:	003f8b06 	br	1258 <__alt_data_end+0xfffe8bb8>
    142c:	10c00054 	ori	r3,r2,1
    1430:	30c00115 	stw	r3,4(r6)
    1434:	308d883a 	add	r6,r6,r2
    1438:	30800015 	stw	r2,0(r6)
    143c:	003f7806 	br	1220 <__alt_data_end+0xfffe8b80>

00001440 <_fwalk>:
    1440:	defff704 	addi	sp,sp,-36
    1444:	dd000415 	stw	r20,16(sp)
    1448:	dfc00815 	stw	ra,32(sp)
    144c:	ddc00715 	stw	r23,28(sp)
    1450:	dd800615 	stw	r22,24(sp)
    1454:	dd400515 	stw	r21,20(sp)
    1458:	dcc00315 	stw	r19,12(sp)
    145c:	dc800215 	stw	r18,8(sp)
    1460:	dc400115 	stw	r17,4(sp)
    1464:	dc000015 	stw	r16,0(sp)
    1468:	2500b804 	addi	r20,r4,736
    146c:	a0002326 	beq	r20,zero,14fc <_fwalk+0xbc>
    1470:	282b883a 	mov	r21,r5
    1474:	002f883a 	mov	r23,zero
    1478:	05800044 	movi	r22,1
    147c:	04ffffc4 	movi	r19,-1
    1480:	a4400117 	ldw	r17,4(r20)
    1484:	a4800217 	ldw	r18,8(r20)
    1488:	8c7fffc4 	addi	r17,r17,-1
    148c:	88000d16 	blt	r17,zero,14c4 <_fwalk+0x84>
    1490:	94000304 	addi	r16,r18,12
    1494:	94800384 	addi	r18,r18,14
    1498:	8080000b 	ldhu	r2,0(r16)
    149c:	8c7fffc4 	addi	r17,r17,-1
    14a0:	813ffd04 	addi	r4,r16,-12
    14a4:	b080042e 	bgeu	r22,r2,14b8 <_fwalk+0x78>
    14a8:	9080000f 	ldh	r2,0(r18)
    14ac:	14c00226 	beq	r2,r19,14b8 <_fwalk+0x78>
    14b0:	a83ee83a 	callr	r21
    14b4:	b8aeb03a 	or	r23,r23,r2
    14b8:	84001a04 	addi	r16,r16,104
    14bc:	94801a04 	addi	r18,r18,104
    14c0:	8cfff51e 	bne	r17,r19,1498 <__alt_data_end+0xfffe8df8>
    14c4:	a5000017 	ldw	r20,0(r20)
    14c8:	a03fed1e 	bne	r20,zero,1480 <__alt_data_end+0xfffe8de0>
    14cc:	b805883a 	mov	r2,r23
    14d0:	dfc00817 	ldw	ra,32(sp)
    14d4:	ddc00717 	ldw	r23,28(sp)
    14d8:	dd800617 	ldw	r22,24(sp)
    14dc:	dd400517 	ldw	r21,20(sp)
    14e0:	dd000417 	ldw	r20,16(sp)
    14e4:	dcc00317 	ldw	r19,12(sp)
    14e8:	dc800217 	ldw	r18,8(sp)
    14ec:	dc400117 	ldw	r17,4(sp)
    14f0:	dc000017 	ldw	r16,0(sp)
    14f4:	dec00904 	addi	sp,sp,36
    14f8:	f800283a 	ret
    14fc:	002f883a 	mov	r23,zero
    1500:	003ff206 	br	14cc <__alt_data_end+0xfffe8e2c>

00001504 <_fwalk_reent>:
    1504:	defff704 	addi	sp,sp,-36
    1508:	dd000415 	stw	r20,16(sp)
    150c:	dfc00815 	stw	ra,32(sp)
    1510:	ddc00715 	stw	r23,28(sp)
    1514:	dd800615 	stw	r22,24(sp)
    1518:	dd400515 	stw	r21,20(sp)
    151c:	dcc00315 	stw	r19,12(sp)
    1520:	dc800215 	stw	r18,8(sp)
    1524:	dc400115 	stw	r17,4(sp)
    1528:	dc000015 	stw	r16,0(sp)
    152c:	2500b804 	addi	r20,r4,736
    1530:	a0002326 	beq	r20,zero,15c0 <_fwalk_reent+0xbc>
    1534:	282b883a 	mov	r21,r5
    1538:	2027883a 	mov	r19,r4
    153c:	002f883a 	mov	r23,zero
    1540:	05800044 	movi	r22,1
    1544:	04bfffc4 	movi	r18,-1
    1548:	a4400117 	ldw	r17,4(r20)
    154c:	a4000217 	ldw	r16,8(r20)
    1550:	8c7fffc4 	addi	r17,r17,-1
    1554:	88000c16 	blt	r17,zero,1588 <_fwalk_reent+0x84>
    1558:	84000304 	addi	r16,r16,12
    155c:	8080000b 	ldhu	r2,0(r16)
    1560:	8c7fffc4 	addi	r17,r17,-1
    1564:	817ffd04 	addi	r5,r16,-12
    1568:	b080052e 	bgeu	r22,r2,1580 <_fwalk_reent+0x7c>
    156c:	8080008f 	ldh	r2,2(r16)
    1570:	9809883a 	mov	r4,r19
    1574:	14800226 	beq	r2,r18,1580 <_fwalk_reent+0x7c>
    1578:	a83ee83a 	callr	r21
    157c:	b8aeb03a 	or	r23,r23,r2
    1580:	84001a04 	addi	r16,r16,104
    1584:	8cbff51e 	bne	r17,r18,155c <__alt_data_end+0xfffe8ebc>
    1588:	a5000017 	ldw	r20,0(r20)
    158c:	a03fee1e 	bne	r20,zero,1548 <__alt_data_end+0xfffe8ea8>
    1590:	b805883a 	mov	r2,r23
    1594:	dfc00817 	ldw	ra,32(sp)
    1598:	ddc00717 	ldw	r23,28(sp)
    159c:	dd800617 	ldw	r22,24(sp)
    15a0:	dd400517 	ldw	r21,20(sp)
    15a4:	dd000417 	ldw	r20,16(sp)
    15a8:	dcc00317 	ldw	r19,12(sp)
    15ac:	dc800217 	ldw	r18,8(sp)
    15b0:	dc400117 	ldw	r17,4(sp)
    15b4:	dc000017 	ldw	r16,0(sp)
    15b8:	dec00904 	addi	sp,sp,36
    15bc:	f800283a 	ret
    15c0:	002f883a 	mov	r23,zero
    15c4:	003ff206 	br	1590 <__alt_data_end+0xfffe8ef0>

000015c8 <__smakebuf_r>:
    15c8:	2880030b 	ldhu	r2,12(r5)
    15cc:	10c0008c 	andi	r3,r2,2
    15d0:	1800411e 	bne	r3,zero,16d8 <__smakebuf_r+0x110>
    15d4:	deffec04 	addi	sp,sp,-80
    15d8:	dc000f15 	stw	r16,60(sp)
    15dc:	2821883a 	mov	r16,r5
    15e0:	2940038f 	ldh	r5,14(r5)
    15e4:	dc401015 	stw	r17,64(sp)
    15e8:	dfc01315 	stw	ra,76(sp)
    15ec:	dcc01215 	stw	r19,72(sp)
    15f0:	dc801115 	stw	r18,68(sp)
    15f4:	2023883a 	mov	r17,r4
    15f8:	28001c16 	blt	r5,zero,166c <__smakebuf_r+0xa4>
    15fc:	d80d883a 	mov	r6,sp
    1600:	00022d80 	call	22d8 <_fstat_r>
    1604:	10001816 	blt	r2,zero,1668 <__smakebuf_r+0xa0>
    1608:	d8800117 	ldw	r2,4(sp)
    160c:	00e00014 	movui	r3,32768
    1610:	10bc000c 	andi	r2,r2,61440
    1614:	14c80020 	cmpeqi	r19,r2,8192
    1618:	10c03726 	beq	r2,r3,16f8 <__smakebuf_r+0x130>
    161c:	80c0030b 	ldhu	r3,12(r16)
    1620:	18c20014 	ori	r3,r3,2048
    1624:	80c0030d 	sth	r3,12(r16)
    1628:	00c80004 	movi	r3,8192
    162c:	10c0521e 	bne	r2,r3,1778 <__smakebuf_r+0x1b0>
    1630:	8140038f 	ldh	r5,14(r16)
    1634:	8809883a 	mov	r4,r17
    1638:	00023340 	call	2334 <_isatty_r>
    163c:	10004c26 	beq	r2,zero,1770 <__smakebuf_r+0x1a8>
    1640:	8080030b 	ldhu	r2,12(r16)
    1644:	80c010c4 	addi	r3,r16,67
    1648:	80c00015 	stw	r3,0(r16)
    164c:	10800054 	ori	r2,r2,1
    1650:	8080030d 	sth	r2,12(r16)
    1654:	00800044 	movi	r2,1
    1658:	80c00415 	stw	r3,16(r16)
    165c:	80800515 	stw	r2,20(r16)
    1660:	04810004 	movi	r18,1024
    1664:	00000706 	br	1684 <__smakebuf_r+0xbc>
    1668:	8080030b 	ldhu	r2,12(r16)
    166c:	10c0200c 	andi	r3,r2,128
    1670:	18001f1e 	bne	r3,zero,16f0 <__smakebuf_r+0x128>
    1674:	04810004 	movi	r18,1024
    1678:	10820014 	ori	r2,r2,2048
    167c:	8080030d 	sth	r2,12(r16)
    1680:	0027883a 	mov	r19,zero
    1684:	900b883a 	mov	r5,r18
    1688:	8809883a 	mov	r4,r17
    168c:	00017840 	call	1784 <_malloc_r>
    1690:	10002c26 	beq	r2,zero,1744 <__smakebuf_r+0x17c>
    1694:	80c0030b 	ldhu	r3,12(r16)
    1698:	01000034 	movhi	r4,0
    169c:	21031904 	addi	r4,r4,3172
    16a0:	89000f15 	stw	r4,60(r17)
    16a4:	18c02014 	ori	r3,r3,128
    16a8:	80c0030d 	sth	r3,12(r16)
    16ac:	80800015 	stw	r2,0(r16)
    16b0:	80800415 	stw	r2,16(r16)
    16b4:	84800515 	stw	r18,20(r16)
    16b8:	98001a1e 	bne	r19,zero,1724 <__smakebuf_r+0x15c>
    16bc:	dfc01317 	ldw	ra,76(sp)
    16c0:	dcc01217 	ldw	r19,72(sp)
    16c4:	dc801117 	ldw	r18,68(sp)
    16c8:	dc401017 	ldw	r17,64(sp)
    16cc:	dc000f17 	ldw	r16,60(sp)
    16d0:	dec01404 	addi	sp,sp,80
    16d4:	f800283a 	ret
    16d8:	288010c4 	addi	r2,r5,67
    16dc:	28800015 	stw	r2,0(r5)
    16e0:	28800415 	stw	r2,16(r5)
    16e4:	00800044 	movi	r2,1
    16e8:	28800515 	stw	r2,20(r5)
    16ec:	f800283a 	ret
    16f0:	04801004 	movi	r18,64
    16f4:	003fe006 	br	1678 <__alt_data_end+0xfffe8fd8>
    16f8:	81000a17 	ldw	r4,40(r16)
    16fc:	00c00034 	movhi	r3,0
    1700:	18c82f04 	addi	r3,r3,8380
    1704:	20ffc51e 	bne	r4,r3,161c <__alt_data_end+0xfffe8f7c>
    1708:	8080030b 	ldhu	r2,12(r16)
    170c:	04810004 	movi	r18,1024
    1710:	84801315 	stw	r18,76(r16)
    1714:	1484b03a 	or	r2,r2,r18
    1718:	8080030d 	sth	r2,12(r16)
    171c:	0027883a 	mov	r19,zero
    1720:	003fd806 	br	1684 <__alt_data_end+0xfffe8fe4>
    1724:	8140038f 	ldh	r5,14(r16)
    1728:	8809883a 	mov	r4,r17
    172c:	00023340 	call	2334 <_isatty_r>
    1730:	103fe226 	beq	r2,zero,16bc <__alt_data_end+0xfffe901c>
    1734:	8080030b 	ldhu	r2,12(r16)
    1738:	10800054 	ori	r2,r2,1
    173c:	8080030d 	sth	r2,12(r16)
    1740:	003fde06 	br	16bc <__alt_data_end+0xfffe901c>
    1744:	8080030b 	ldhu	r2,12(r16)
    1748:	10c0800c 	andi	r3,r2,512
    174c:	183fdb1e 	bne	r3,zero,16bc <__alt_data_end+0xfffe901c>
    1750:	10800094 	ori	r2,r2,2
    1754:	80c010c4 	addi	r3,r16,67
    1758:	8080030d 	sth	r2,12(r16)
    175c:	00800044 	movi	r2,1
    1760:	80c00015 	stw	r3,0(r16)
    1764:	80c00415 	stw	r3,16(r16)
    1768:	80800515 	stw	r2,20(r16)
    176c:	003fd306 	br	16bc <__alt_data_end+0xfffe901c>
    1770:	04810004 	movi	r18,1024
    1774:	003fc306 	br	1684 <__alt_data_end+0xfffe8fe4>
    1778:	0027883a 	mov	r19,zero
    177c:	04810004 	movi	r18,1024
    1780:	003fc006 	br	1684 <__alt_data_end+0xfffe8fe4>

00001784 <_malloc_r>:
    1784:	defff504 	addi	sp,sp,-44
    1788:	dc800315 	stw	r18,12(sp)
    178c:	dfc00a15 	stw	ra,40(sp)
    1790:	df000915 	stw	fp,36(sp)
    1794:	ddc00815 	stw	r23,32(sp)
    1798:	dd800715 	stw	r22,28(sp)
    179c:	dd400615 	stw	r21,24(sp)
    17a0:	dd000515 	stw	r20,20(sp)
    17a4:	dcc00415 	stw	r19,16(sp)
    17a8:	dc400215 	stw	r17,8(sp)
    17ac:	dc000115 	stw	r16,4(sp)
    17b0:	288002c4 	addi	r2,r5,11
    17b4:	00c00584 	movi	r3,22
    17b8:	2025883a 	mov	r18,r4
    17bc:	18807f2e 	bgeu	r3,r2,19bc <_malloc_r+0x238>
    17c0:	047ffe04 	movi	r17,-8
    17c4:	1462703a 	and	r17,r2,r17
    17c8:	8800a316 	blt	r17,zero,1a58 <_malloc_r+0x2d4>
    17cc:	8940a236 	bltu	r17,r5,1a58 <_malloc_r+0x2d4>
    17d0:	0002f200 	call	2f20 <__malloc_lock>
    17d4:	00807dc4 	movi	r2,503
    17d8:	1441e92e 	bgeu	r2,r17,1f80 <_malloc_r+0x7fc>
    17dc:	8804d27a 	srli	r2,r17,9
    17e0:	1000a126 	beq	r2,zero,1a68 <_malloc_r+0x2e4>
    17e4:	00c00104 	movi	r3,4
    17e8:	18811e36 	bltu	r3,r2,1c64 <_malloc_r+0x4e0>
    17ec:	8804d1ba 	srli	r2,r17,6
    17f0:	12000e44 	addi	r8,r2,57
    17f4:	11c00e04 	addi	r7,r2,56
    17f8:	4209883a 	add	r4,r8,r8
    17fc:	04c00074 	movhi	r19,1
    1800:	2109883a 	add	r4,r4,r4
    1804:	9cf5a204 	addi	r19,r19,-10616
    1808:	2109883a 	add	r4,r4,r4
    180c:	9909883a 	add	r4,r19,r4
    1810:	24000117 	ldw	r16,4(r4)
    1814:	213ffe04 	addi	r4,r4,-8
    1818:	24009726 	beq	r4,r16,1a78 <_malloc_r+0x2f4>
    181c:	80800117 	ldw	r2,4(r16)
    1820:	01bfff04 	movi	r6,-4
    1824:	014003c4 	movi	r5,15
    1828:	1184703a 	and	r2,r2,r6
    182c:	1447c83a 	sub	r3,r2,r17
    1830:	28c00716 	blt	r5,r3,1850 <_malloc_r+0xcc>
    1834:	1800920e 	bge	r3,zero,1a80 <_malloc_r+0x2fc>
    1838:	84000317 	ldw	r16,12(r16)
    183c:	24008e26 	beq	r4,r16,1a78 <_malloc_r+0x2f4>
    1840:	80800117 	ldw	r2,4(r16)
    1844:	1184703a 	and	r2,r2,r6
    1848:	1447c83a 	sub	r3,r2,r17
    184c:	28fff90e 	bge	r5,r3,1834 <__alt_data_end+0xfffe9194>
    1850:	3809883a 	mov	r4,r7
    1854:	01800074 	movhi	r6,1
    1858:	9c000417 	ldw	r16,16(r19)
    185c:	31b5a204 	addi	r6,r6,-10616
    1860:	32000204 	addi	r8,r6,8
    1864:	82013426 	beq	r16,r8,1d38 <_malloc_r+0x5b4>
    1868:	80c00117 	ldw	r3,4(r16)
    186c:	00bfff04 	movi	r2,-4
    1870:	188e703a 	and	r7,r3,r2
    1874:	3c45c83a 	sub	r2,r7,r17
    1878:	00c003c4 	movi	r3,15
    187c:	18811f16 	blt	r3,r2,1cfc <_malloc_r+0x578>
    1880:	32000515 	stw	r8,20(r6)
    1884:	32000415 	stw	r8,16(r6)
    1888:	10007f0e 	bge	r2,zero,1a88 <_malloc_r+0x304>
    188c:	00807fc4 	movi	r2,511
    1890:	11c0fd36 	bltu	r2,r7,1c88 <_malloc_r+0x504>
    1894:	3806d0fa 	srli	r3,r7,3
    1898:	01c00044 	movi	r7,1
    189c:	30800117 	ldw	r2,4(r6)
    18a0:	19400044 	addi	r5,r3,1
    18a4:	294b883a 	add	r5,r5,r5
    18a8:	1807d0ba 	srai	r3,r3,2
    18ac:	294b883a 	add	r5,r5,r5
    18b0:	294b883a 	add	r5,r5,r5
    18b4:	298b883a 	add	r5,r5,r6
    18b8:	38c6983a 	sll	r3,r7,r3
    18bc:	29c00017 	ldw	r7,0(r5)
    18c0:	2a7ffe04 	addi	r9,r5,-8
    18c4:	1886b03a 	or	r3,r3,r2
    18c8:	82400315 	stw	r9,12(r16)
    18cc:	81c00215 	stw	r7,8(r16)
    18d0:	30c00115 	stw	r3,4(r6)
    18d4:	2c000015 	stw	r16,0(r5)
    18d8:	3c000315 	stw	r16,12(r7)
    18dc:	2005d0ba 	srai	r2,r4,2
    18e0:	01400044 	movi	r5,1
    18e4:	288a983a 	sll	r5,r5,r2
    18e8:	19406f36 	bltu	r3,r5,1aa8 <_malloc_r+0x324>
    18ec:	28c4703a 	and	r2,r5,r3
    18f0:	10000a1e 	bne	r2,zero,191c <_malloc_r+0x198>
    18f4:	00bfff04 	movi	r2,-4
    18f8:	294b883a 	add	r5,r5,r5
    18fc:	2088703a 	and	r4,r4,r2
    1900:	28c4703a 	and	r2,r5,r3
    1904:	21000104 	addi	r4,r4,4
    1908:	1000041e 	bne	r2,zero,191c <_malloc_r+0x198>
    190c:	294b883a 	add	r5,r5,r5
    1910:	28c4703a 	and	r2,r5,r3
    1914:	21000104 	addi	r4,r4,4
    1918:	103ffc26 	beq	r2,zero,190c <__alt_data_end+0xfffe926c>
    191c:	02bfff04 	movi	r10,-4
    1920:	024003c4 	movi	r9,15
    1924:	21800044 	addi	r6,r4,1
    1928:	318d883a 	add	r6,r6,r6
    192c:	318d883a 	add	r6,r6,r6
    1930:	318d883a 	add	r6,r6,r6
    1934:	998d883a 	add	r6,r19,r6
    1938:	333ffe04 	addi	r12,r6,-8
    193c:	2017883a 	mov	r11,r4
    1940:	31800104 	addi	r6,r6,4
    1944:	34000017 	ldw	r16,0(r6)
    1948:	31fffd04 	addi	r7,r6,-12
    194c:	81c0041e 	bne	r16,r7,1960 <_malloc_r+0x1dc>
    1950:	0000fb06 	br	1d40 <_malloc_r+0x5bc>
    1954:	1801030e 	bge	r3,zero,1d64 <_malloc_r+0x5e0>
    1958:	84000317 	ldw	r16,12(r16)
    195c:	81c0f826 	beq	r16,r7,1d40 <_malloc_r+0x5bc>
    1960:	80800117 	ldw	r2,4(r16)
    1964:	1284703a 	and	r2,r2,r10
    1968:	1447c83a 	sub	r3,r2,r17
    196c:	48fff90e 	bge	r9,r3,1954 <__alt_data_end+0xfffe92b4>
    1970:	80800317 	ldw	r2,12(r16)
    1974:	81000217 	ldw	r4,8(r16)
    1978:	89400054 	ori	r5,r17,1
    197c:	81400115 	stw	r5,4(r16)
    1980:	20800315 	stw	r2,12(r4)
    1984:	11000215 	stw	r4,8(r2)
    1988:	8463883a 	add	r17,r16,r17
    198c:	9c400515 	stw	r17,20(r19)
    1990:	9c400415 	stw	r17,16(r19)
    1994:	18800054 	ori	r2,r3,1
    1998:	88800115 	stw	r2,4(r17)
    199c:	8a000315 	stw	r8,12(r17)
    19a0:	8a000215 	stw	r8,8(r17)
    19a4:	88e3883a 	add	r17,r17,r3
    19a8:	88c00015 	stw	r3,0(r17)
    19ac:	9009883a 	mov	r4,r18
    19b0:	00030400 	call	3040 <__malloc_unlock>
    19b4:	80800204 	addi	r2,r16,8
    19b8:	00001b06 	br	1a28 <_malloc_r+0x2a4>
    19bc:	04400404 	movi	r17,16
    19c0:	89402536 	bltu	r17,r5,1a58 <_malloc_r+0x2d4>
    19c4:	0002f200 	call	2f20 <__malloc_lock>
    19c8:	00800184 	movi	r2,6
    19cc:	01000084 	movi	r4,2
    19d0:	04c00074 	movhi	r19,1
    19d4:	1085883a 	add	r2,r2,r2
    19d8:	9cf5a204 	addi	r19,r19,-10616
    19dc:	1085883a 	add	r2,r2,r2
    19e0:	9885883a 	add	r2,r19,r2
    19e4:	14000117 	ldw	r16,4(r2)
    19e8:	10fffe04 	addi	r3,r2,-8
    19ec:	80c0d926 	beq	r16,r3,1d54 <_malloc_r+0x5d0>
    19f0:	80c00117 	ldw	r3,4(r16)
    19f4:	81000317 	ldw	r4,12(r16)
    19f8:	00bfff04 	movi	r2,-4
    19fc:	1884703a 	and	r2,r3,r2
    1a00:	81400217 	ldw	r5,8(r16)
    1a04:	8085883a 	add	r2,r16,r2
    1a08:	10c00117 	ldw	r3,4(r2)
    1a0c:	29000315 	stw	r4,12(r5)
    1a10:	21400215 	stw	r5,8(r4)
    1a14:	18c00054 	ori	r3,r3,1
    1a18:	10c00115 	stw	r3,4(r2)
    1a1c:	9009883a 	mov	r4,r18
    1a20:	00030400 	call	3040 <__malloc_unlock>
    1a24:	80800204 	addi	r2,r16,8
    1a28:	dfc00a17 	ldw	ra,40(sp)
    1a2c:	df000917 	ldw	fp,36(sp)
    1a30:	ddc00817 	ldw	r23,32(sp)
    1a34:	dd800717 	ldw	r22,28(sp)
    1a38:	dd400617 	ldw	r21,24(sp)
    1a3c:	dd000517 	ldw	r20,20(sp)
    1a40:	dcc00417 	ldw	r19,16(sp)
    1a44:	dc800317 	ldw	r18,12(sp)
    1a48:	dc400217 	ldw	r17,8(sp)
    1a4c:	dc000117 	ldw	r16,4(sp)
    1a50:	dec00b04 	addi	sp,sp,44
    1a54:	f800283a 	ret
    1a58:	00800304 	movi	r2,12
    1a5c:	90800015 	stw	r2,0(r18)
    1a60:	0005883a 	mov	r2,zero
    1a64:	003ff006 	br	1a28 <__alt_data_end+0xfffe9388>
    1a68:	01002004 	movi	r4,128
    1a6c:	02001004 	movi	r8,64
    1a70:	01c00fc4 	movi	r7,63
    1a74:	003f6106 	br	17fc <__alt_data_end+0xfffe915c>
    1a78:	4009883a 	mov	r4,r8
    1a7c:	003f7506 	br	1854 <__alt_data_end+0xfffe91b4>
    1a80:	81000317 	ldw	r4,12(r16)
    1a84:	003fde06 	br	1a00 <__alt_data_end+0xfffe9360>
    1a88:	81c5883a 	add	r2,r16,r7
    1a8c:	11400117 	ldw	r5,4(r2)
    1a90:	9009883a 	mov	r4,r18
    1a94:	29400054 	ori	r5,r5,1
    1a98:	11400115 	stw	r5,4(r2)
    1a9c:	00030400 	call	3040 <__malloc_unlock>
    1aa0:	80800204 	addi	r2,r16,8
    1aa4:	003fe006 	br	1a28 <__alt_data_end+0xfffe9388>
    1aa8:	9c000217 	ldw	r16,8(r19)
    1aac:	00bfff04 	movi	r2,-4
    1ab0:	85800117 	ldw	r22,4(r16)
    1ab4:	b0ac703a 	and	r22,r22,r2
    1ab8:	b4400336 	bltu	r22,r17,1ac8 <_malloc_r+0x344>
    1abc:	b445c83a 	sub	r2,r22,r17
    1ac0:	00c003c4 	movi	r3,15
    1ac4:	18805d16 	blt	r3,r2,1c3c <_malloc_r+0x4b8>
    1ac8:	05c00074 	movhi	r23,1
    1acc:	00800074 	movhi	r2,1
    1ad0:	10822c04 	addi	r2,r2,2224
    1ad4:	bdfb3604 	addi	r23,r23,-4904
    1ad8:	15400017 	ldw	r21,0(r2)
    1adc:	b8c00017 	ldw	r3,0(r23)
    1ae0:	00bfffc4 	movi	r2,-1
    1ae4:	858d883a 	add	r6,r16,r22
    1ae8:	8d6b883a 	add	r21,r17,r21
    1aec:	1880ea26 	beq	r3,r2,1e98 <_malloc_r+0x714>
    1af0:	ad4403c4 	addi	r21,r21,4111
    1af4:	00bc0004 	movi	r2,-4096
    1af8:	a8aa703a 	and	r21,r21,r2
    1afc:	a80b883a 	mov	r5,r21
    1b00:	9009883a 	mov	r4,r18
    1b04:	d9800015 	stw	r6,0(sp)
    1b08:	0001f900 	call	1f90 <_sbrk_r>
    1b0c:	1029883a 	mov	r20,r2
    1b10:	00bfffc4 	movi	r2,-1
    1b14:	d9800017 	ldw	r6,0(sp)
    1b18:	a080e826 	beq	r20,r2,1ebc <_malloc_r+0x738>
    1b1c:	a180a636 	bltu	r20,r6,1db8 <_malloc_r+0x634>
    1b20:	07000074 	movhi	fp,1
    1b24:	e7024e04 	addi	fp,fp,2360
    1b28:	e0800017 	ldw	r2,0(fp)
    1b2c:	a887883a 	add	r3,r21,r2
    1b30:	e0c00015 	stw	r3,0(fp)
    1b34:	3500e626 	beq	r6,r20,1ed0 <_malloc_r+0x74c>
    1b38:	b9000017 	ldw	r4,0(r23)
    1b3c:	00bfffc4 	movi	r2,-1
    1b40:	2080ee26 	beq	r4,r2,1efc <_malloc_r+0x778>
    1b44:	a185c83a 	sub	r2,r20,r6
    1b48:	10c5883a 	add	r2,r2,r3
    1b4c:	e0800015 	stw	r2,0(fp)
    1b50:	a0c001cc 	andi	r3,r20,7
    1b54:	1800bc26 	beq	r3,zero,1e48 <_malloc_r+0x6c4>
    1b58:	a0e9c83a 	sub	r20,r20,r3
    1b5c:	00840204 	movi	r2,4104
    1b60:	a5000204 	addi	r20,r20,8
    1b64:	10c7c83a 	sub	r3,r2,r3
    1b68:	a545883a 	add	r2,r20,r21
    1b6c:	1083ffcc 	andi	r2,r2,4095
    1b70:	18abc83a 	sub	r21,r3,r2
    1b74:	a80b883a 	mov	r5,r21
    1b78:	9009883a 	mov	r4,r18
    1b7c:	0001f900 	call	1f90 <_sbrk_r>
    1b80:	00ffffc4 	movi	r3,-1
    1b84:	10c0e126 	beq	r2,r3,1f0c <_malloc_r+0x788>
    1b88:	1505c83a 	sub	r2,r2,r20
    1b8c:	1545883a 	add	r2,r2,r21
    1b90:	10800054 	ori	r2,r2,1
    1b94:	e0c00017 	ldw	r3,0(fp)
    1b98:	9d000215 	stw	r20,8(r19)
    1b9c:	a0800115 	stw	r2,4(r20)
    1ba0:	a8c7883a 	add	r3,r21,r3
    1ba4:	e0c00015 	stw	r3,0(fp)
    1ba8:	84c00e26 	beq	r16,r19,1be4 <_malloc_r+0x460>
    1bac:	018003c4 	movi	r6,15
    1bb0:	3580a72e 	bgeu	r6,r22,1e50 <_malloc_r+0x6cc>
    1bb4:	81400117 	ldw	r5,4(r16)
    1bb8:	013ffe04 	movi	r4,-8
    1bbc:	b0bffd04 	addi	r2,r22,-12
    1bc0:	1104703a 	and	r2,r2,r4
    1bc4:	2900004c 	andi	r4,r5,1
    1bc8:	2088b03a 	or	r4,r4,r2
    1bcc:	81000115 	stw	r4,4(r16)
    1bd0:	01400144 	movi	r5,5
    1bd4:	8089883a 	add	r4,r16,r2
    1bd8:	21400115 	stw	r5,4(r4)
    1bdc:	21400215 	stw	r5,8(r4)
    1be0:	3080cd36 	bltu	r6,r2,1f18 <_malloc_r+0x794>
    1be4:	00800074 	movhi	r2,1
    1be8:	10822b04 	addi	r2,r2,2220
    1bec:	11000017 	ldw	r4,0(r2)
    1bf0:	20c0012e 	bgeu	r4,r3,1bf8 <_malloc_r+0x474>
    1bf4:	10c00015 	stw	r3,0(r2)
    1bf8:	00800074 	movhi	r2,1
    1bfc:	10822a04 	addi	r2,r2,2216
    1c00:	11000017 	ldw	r4,0(r2)
    1c04:	9c000217 	ldw	r16,8(r19)
    1c08:	20c0012e 	bgeu	r4,r3,1c10 <_malloc_r+0x48c>
    1c0c:	10c00015 	stw	r3,0(r2)
    1c10:	80c00117 	ldw	r3,4(r16)
    1c14:	00bfff04 	movi	r2,-4
    1c18:	1886703a 	and	r3,r3,r2
    1c1c:	1c45c83a 	sub	r2,r3,r17
    1c20:	1c400236 	bltu	r3,r17,1c2c <_malloc_r+0x4a8>
    1c24:	00c003c4 	movi	r3,15
    1c28:	18800416 	blt	r3,r2,1c3c <_malloc_r+0x4b8>
    1c2c:	9009883a 	mov	r4,r18
    1c30:	00030400 	call	3040 <__malloc_unlock>
    1c34:	0005883a 	mov	r2,zero
    1c38:	003f7b06 	br	1a28 <__alt_data_end+0xfffe9388>
    1c3c:	88c00054 	ori	r3,r17,1
    1c40:	80c00115 	stw	r3,4(r16)
    1c44:	8463883a 	add	r17,r16,r17
    1c48:	10800054 	ori	r2,r2,1
    1c4c:	9c400215 	stw	r17,8(r19)
    1c50:	88800115 	stw	r2,4(r17)
    1c54:	9009883a 	mov	r4,r18
    1c58:	00030400 	call	3040 <__malloc_unlock>
    1c5c:	80800204 	addi	r2,r16,8
    1c60:	003f7106 	br	1a28 <__alt_data_end+0xfffe9388>
    1c64:	00c00504 	movi	r3,20
    1c68:	18804a2e 	bgeu	r3,r2,1d94 <_malloc_r+0x610>
    1c6c:	00c01504 	movi	r3,84
    1c70:	18806e36 	bltu	r3,r2,1e2c <_malloc_r+0x6a8>
    1c74:	8804d33a 	srli	r2,r17,12
    1c78:	12001bc4 	addi	r8,r2,111
    1c7c:	11c01b84 	addi	r7,r2,110
    1c80:	4209883a 	add	r4,r8,r8
    1c84:	003edd06 	br	17fc <__alt_data_end+0xfffe915c>
    1c88:	3804d27a 	srli	r2,r7,9
    1c8c:	00c00104 	movi	r3,4
    1c90:	1880442e 	bgeu	r3,r2,1da4 <_malloc_r+0x620>
    1c94:	00c00504 	movi	r3,20
    1c98:	18808136 	bltu	r3,r2,1ea0 <_malloc_r+0x71c>
    1c9c:	11401704 	addi	r5,r2,92
    1ca0:	10c016c4 	addi	r3,r2,91
    1ca4:	294b883a 	add	r5,r5,r5
    1ca8:	294b883a 	add	r5,r5,r5
    1cac:	294b883a 	add	r5,r5,r5
    1cb0:	994b883a 	add	r5,r19,r5
    1cb4:	28800017 	ldw	r2,0(r5)
    1cb8:	01800074 	movhi	r6,1
    1cbc:	297ffe04 	addi	r5,r5,-8
    1cc0:	31b5a204 	addi	r6,r6,-10616
    1cc4:	28806526 	beq	r5,r2,1e5c <_malloc_r+0x6d8>
    1cc8:	01bfff04 	movi	r6,-4
    1ccc:	10c00117 	ldw	r3,4(r2)
    1cd0:	1986703a 	and	r3,r3,r6
    1cd4:	38c0022e 	bgeu	r7,r3,1ce0 <_malloc_r+0x55c>
    1cd8:	10800217 	ldw	r2,8(r2)
    1cdc:	28bffb1e 	bne	r5,r2,1ccc <__alt_data_end+0xfffe962c>
    1ce0:	11400317 	ldw	r5,12(r2)
    1ce4:	98c00117 	ldw	r3,4(r19)
    1ce8:	81400315 	stw	r5,12(r16)
    1cec:	80800215 	stw	r2,8(r16)
    1cf0:	2c000215 	stw	r16,8(r5)
    1cf4:	14000315 	stw	r16,12(r2)
    1cf8:	003ef806 	br	18dc <__alt_data_end+0xfffe923c>
    1cfc:	88c00054 	ori	r3,r17,1
    1d00:	80c00115 	stw	r3,4(r16)
    1d04:	8463883a 	add	r17,r16,r17
    1d08:	34400515 	stw	r17,20(r6)
    1d0c:	34400415 	stw	r17,16(r6)
    1d10:	10c00054 	ori	r3,r2,1
    1d14:	8a000315 	stw	r8,12(r17)
    1d18:	8a000215 	stw	r8,8(r17)
    1d1c:	88c00115 	stw	r3,4(r17)
    1d20:	88a3883a 	add	r17,r17,r2
    1d24:	88800015 	stw	r2,0(r17)
    1d28:	9009883a 	mov	r4,r18
    1d2c:	00030400 	call	3040 <__malloc_unlock>
    1d30:	80800204 	addi	r2,r16,8
    1d34:	003f3c06 	br	1a28 <__alt_data_end+0xfffe9388>
    1d38:	30c00117 	ldw	r3,4(r6)
    1d3c:	003ee706 	br	18dc <__alt_data_end+0xfffe923c>
    1d40:	5ac00044 	addi	r11,r11,1
    1d44:	588000cc 	andi	r2,r11,3
    1d48:	31800204 	addi	r6,r6,8
    1d4c:	103efd1e 	bne	r2,zero,1944 <__alt_data_end+0xfffe92a4>
    1d50:	00002406 	br	1de4 <_malloc_r+0x660>
    1d54:	14000317 	ldw	r16,12(r2)
    1d58:	143f251e 	bne	r2,r16,19f0 <__alt_data_end+0xfffe9350>
    1d5c:	21000084 	addi	r4,r4,2
    1d60:	003ebc06 	br	1854 <__alt_data_end+0xfffe91b4>
    1d64:	8085883a 	add	r2,r16,r2
    1d68:	10c00117 	ldw	r3,4(r2)
    1d6c:	81000317 	ldw	r4,12(r16)
    1d70:	81400217 	ldw	r5,8(r16)
    1d74:	18c00054 	ori	r3,r3,1
    1d78:	10c00115 	stw	r3,4(r2)
    1d7c:	29000315 	stw	r4,12(r5)
    1d80:	21400215 	stw	r5,8(r4)
    1d84:	9009883a 	mov	r4,r18
    1d88:	00030400 	call	3040 <__malloc_unlock>
    1d8c:	80800204 	addi	r2,r16,8
    1d90:	003f2506 	br	1a28 <__alt_data_end+0xfffe9388>
    1d94:	12001704 	addi	r8,r2,92
    1d98:	11c016c4 	addi	r7,r2,91
    1d9c:	4209883a 	add	r4,r8,r8
    1da0:	003e9606 	br	17fc <__alt_data_end+0xfffe915c>
    1da4:	3804d1ba 	srli	r2,r7,6
    1da8:	11400e44 	addi	r5,r2,57
    1dac:	10c00e04 	addi	r3,r2,56
    1db0:	294b883a 	add	r5,r5,r5
    1db4:	003fbc06 	br	1ca8 <__alt_data_end+0xfffe9608>
    1db8:	84ff5926 	beq	r16,r19,1b20 <__alt_data_end+0xfffe9480>
    1dbc:	00800074 	movhi	r2,1
    1dc0:	10b5a204 	addi	r2,r2,-10616
    1dc4:	14000217 	ldw	r16,8(r2)
    1dc8:	00bfff04 	movi	r2,-4
    1dcc:	80c00117 	ldw	r3,4(r16)
    1dd0:	1886703a 	and	r3,r3,r2
    1dd4:	003f9106 	br	1c1c <__alt_data_end+0xfffe957c>
    1dd8:	60800217 	ldw	r2,8(r12)
    1ddc:	213fffc4 	addi	r4,r4,-1
    1de0:	1300651e 	bne	r2,r12,1f78 <_malloc_r+0x7f4>
    1de4:	208000cc 	andi	r2,r4,3
    1de8:	633ffe04 	addi	r12,r12,-8
    1dec:	103ffa1e 	bne	r2,zero,1dd8 <__alt_data_end+0xfffe9738>
    1df0:	98800117 	ldw	r2,4(r19)
    1df4:	0146303a 	nor	r3,zero,r5
    1df8:	1884703a 	and	r2,r3,r2
    1dfc:	98800115 	stw	r2,4(r19)
    1e00:	294b883a 	add	r5,r5,r5
    1e04:	117f2836 	bltu	r2,r5,1aa8 <__alt_data_end+0xfffe9408>
    1e08:	283f2726 	beq	r5,zero,1aa8 <__alt_data_end+0xfffe9408>
    1e0c:	2886703a 	and	r3,r5,r2
    1e10:	5809883a 	mov	r4,r11
    1e14:	183ec31e 	bne	r3,zero,1924 <__alt_data_end+0xfffe9284>
    1e18:	294b883a 	add	r5,r5,r5
    1e1c:	2886703a 	and	r3,r5,r2
    1e20:	21000104 	addi	r4,r4,4
    1e24:	183ffc26 	beq	r3,zero,1e18 <__alt_data_end+0xfffe9778>
    1e28:	003ebe06 	br	1924 <__alt_data_end+0xfffe9284>
    1e2c:	00c05504 	movi	r3,340
    1e30:	18801236 	bltu	r3,r2,1e7c <_malloc_r+0x6f8>
    1e34:	8804d3fa 	srli	r2,r17,15
    1e38:	12001e04 	addi	r8,r2,120
    1e3c:	11c01dc4 	addi	r7,r2,119
    1e40:	4209883a 	add	r4,r8,r8
    1e44:	003e6d06 	br	17fc <__alt_data_end+0xfffe915c>
    1e48:	00c40004 	movi	r3,4096
    1e4c:	003f4606 	br	1b68 <__alt_data_end+0xfffe94c8>
    1e50:	00800044 	movi	r2,1
    1e54:	a0800115 	stw	r2,4(r20)
    1e58:	003f7406 	br	1c2c <__alt_data_end+0xfffe958c>
    1e5c:	1805d0ba 	srai	r2,r3,2
    1e60:	01c00044 	movi	r7,1
    1e64:	30c00117 	ldw	r3,4(r6)
    1e68:	388e983a 	sll	r7,r7,r2
    1e6c:	2805883a 	mov	r2,r5
    1e70:	38c6b03a 	or	r3,r7,r3
    1e74:	30c00115 	stw	r3,4(r6)
    1e78:	003f9b06 	br	1ce8 <__alt_data_end+0xfffe9648>
    1e7c:	00c15504 	movi	r3,1364
    1e80:	18801a36 	bltu	r3,r2,1eec <_malloc_r+0x768>
    1e84:	8804d4ba 	srli	r2,r17,18
    1e88:	12001f44 	addi	r8,r2,125
    1e8c:	11c01f04 	addi	r7,r2,124
    1e90:	4209883a 	add	r4,r8,r8
    1e94:	003e5906 	br	17fc <__alt_data_end+0xfffe915c>
    1e98:	ad400404 	addi	r21,r21,16
    1e9c:	003f1706 	br	1afc <__alt_data_end+0xfffe945c>
    1ea0:	00c01504 	movi	r3,84
    1ea4:	18802336 	bltu	r3,r2,1f34 <_malloc_r+0x7b0>
    1ea8:	3804d33a 	srli	r2,r7,12
    1eac:	11401bc4 	addi	r5,r2,111
    1eb0:	10c01b84 	addi	r3,r2,110
    1eb4:	294b883a 	add	r5,r5,r5
    1eb8:	003f7b06 	br	1ca8 <__alt_data_end+0xfffe9608>
    1ebc:	9c000217 	ldw	r16,8(r19)
    1ec0:	00bfff04 	movi	r2,-4
    1ec4:	80c00117 	ldw	r3,4(r16)
    1ec8:	1886703a 	and	r3,r3,r2
    1ecc:	003f5306 	br	1c1c <__alt_data_end+0xfffe957c>
    1ed0:	3083ffcc 	andi	r2,r6,4095
    1ed4:	103f181e 	bne	r2,zero,1b38 <__alt_data_end+0xfffe9498>
    1ed8:	99000217 	ldw	r4,8(r19)
    1edc:	b545883a 	add	r2,r22,r21
    1ee0:	10800054 	ori	r2,r2,1
    1ee4:	20800115 	stw	r2,4(r4)
    1ee8:	003f3e06 	br	1be4 <__alt_data_end+0xfffe9544>
    1eec:	01003f84 	movi	r4,254
    1ef0:	02001fc4 	movi	r8,127
    1ef4:	01c01f84 	movi	r7,126
    1ef8:	003e4006 	br	17fc <__alt_data_end+0xfffe915c>
    1efc:	00800074 	movhi	r2,1
    1f00:	10bb3604 	addi	r2,r2,-4904
    1f04:	15000015 	stw	r20,0(r2)
    1f08:	003f1106 	br	1b50 <__alt_data_end+0xfffe94b0>
    1f0c:	00800044 	movi	r2,1
    1f10:	002b883a 	mov	r21,zero
    1f14:	003f1f06 	br	1b94 <__alt_data_end+0xfffe94f4>
    1f18:	81400204 	addi	r5,r16,8
    1f1c:	9009883a 	mov	r4,r18
    1f20:	00011300 	call	1130 <_free_r>
    1f24:	00800074 	movhi	r2,1
    1f28:	10824e04 	addi	r2,r2,2360
    1f2c:	10c00017 	ldw	r3,0(r2)
    1f30:	003f2c06 	br	1be4 <__alt_data_end+0xfffe9544>
    1f34:	00c05504 	movi	r3,340
    1f38:	18800536 	bltu	r3,r2,1f50 <_malloc_r+0x7cc>
    1f3c:	3804d3fa 	srli	r2,r7,15
    1f40:	11401e04 	addi	r5,r2,120
    1f44:	10c01dc4 	addi	r3,r2,119
    1f48:	294b883a 	add	r5,r5,r5
    1f4c:	003f5606 	br	1ca8 <__alt_data_end+0xfffe9608>
    1f50:	00c15504 	movi	r3,1364
    1f54:	18800536 	bltu	r3,r2,1f6c <_malloc_r+0x7e8>
    1f58:	3804d4ba 	srli	r2,r7,18
    1f5c:	11401f44 	addi	r5,r2,125
    1f60:	10c01f04 	addi	r3,r2,124
    1f64:	294b883a 	add	r5,r5,r5
    1f68:	003f4f06 	br	1ca8 <__alt_data_end+0xfffe9608>
    1f6c:	01403f84 	movi	r5,254
    1f70:	00c01f84 	movi	r3,126
    1f74:	003f4c06 	br	1ca8 <__alt_data_end+0xfffe9608>
    1f78:	98800117 	ldw	r2,4(r19)
    1f7c:	003fa006 	br	1e00 <__alt_data_end+0xfffe9760>
    1f80:	8808d0fa 	srli	r4,r17,3
    1f84:	20800044 	addi	r2,r4,1
    1f88:	1085883a 	add	r2,r2,r2
    1f8c:	003e9006 	br	19d0 <__alt_data_end+0xfffe9330>

00001f90 <_sbrk_r>:
    1f90:	defffd04 	addi	sp,sp,-12
    1f94:	dc000015 	stw	r16,0(sp)
    1f98:	04000074 	movhi	r16,1
    1f9c:	dc400115 	stw	r17,4(sp)
    1fa0:	84022d04 	addi	r16,r16,2228
    1fa4:	2023883a 	mov	r17,r4
    1fa8:	2809883a 	mov	r4,r5
    1fac:	dfc00215 	stw	ra,8(sp)
    1fb0:	80000015 	stw	zero,0(r16)
    1fb4:	0002c100 	call	2c10 <sbrk>
    1fb8:	00ffffc4 	movi	r3,-1
    1fbc:	10c00526 	beq	r2,r3,1fd4 <_sbrk_r+0x44>
    1fc0:	dfc00217 	ldw	ra,8(sp)
    1fc4:	dc400117 	ldw	r17,4(sp)
    1fc8:	dc000017 	ldw	r16,0(sp)
    1fcc:	dec00304 	addi	sp,sp,12
    1fd0:	f800283a 	ret
    1fd4:	80c00017 	ldw	r3,0(r16)
    1fd8:	183ff926 	beq	r3,zero,1fc0 <__alt_data_end+0xfffe9920>
    1fdc:	88c00015 	stw	r3,0(r17)
    1fe0:	003ff706 	br	1fc0 <__alt_data_end+0xfffe9920>

00001fe4 <__sread>:
    1fe4:	defffe04 	addi	sp,sp,-8
    1fe8:	dc000015 	stw	r16,0(sp)
    1fec:	2821883a 	mov	r16,r5
    1ff0:	2940038f 	ldh	r5,14(r5)
    1ff4:	dfc00115 	stw	ra,4(sp)
    1ff8:	00023e80 	call	23e8 <_read_r>
    1ffc:	10000716 	blt	r2,zero,201c <__sread+0x38>
    2000:	80c01417 	ldw	r3,80(r16)
    2004:	1887883a 	add	r3,r3,r2
    2008:	80c01415 	stw	r3,80(r16)
    200c:	dfc00117 	ldw	ra,4(sp)
    2010:	dc000017 	ldw	r16,0(sp)
    2014:	dec00204 	addi	sp,sp,8
    2018:	f800283a 	ret
    201c:	80c0030b 	ldhu	r3,12(r16)
    2020:	18fbffcc 	andi	r3,r3,61439
    2024:	80c0030d 	sth	r3,12(r16)
    2028:	dfc00117 	ldw	ra,4(sp)
    202c:	dc000017 	ldw	r16,0(sp)
    2030:	dec00204 	addi	sp,sp,8
    2034:	f800283a 	ret

00002038 <__seofread>:
    2038:	0005883a 	mov	r2,zero
    203c:	f800283a 	ret

00002040 <__swrite>:
    2040:	2880030b 	ldhu	r2,12(r5)
    2044:	defffb04 	addi	sp,sp,-20
    2048:	dcc00315 	stw	r19,12(sp)
    204c:	dc800215 	stw	r18,8(sp)
    2050:	dc400115 	stw	r17,4(sp)
    2054:	dc000015 	stw	r16,0(sp)
    2058:	dfc00415 	stw	ra,16(sp)
    205c:	10c0400c 	andi	r3,r2,256
    2060:	2821883a 	mov	r16,r5
    2064:	2023883a 	mov	r17,r4
    2068:	3025883a 	mov	r18,r6
    206c:	3827883a 	mov	r19,r7
    2070:	18000526 	beq	r3,zero,2088 <__swrite+0x48>
    2074:	2940038f 	ldh	r5,14(r5)
    2078:	01c00084 	movi	r7,2
    207c:	000d883a 	mov	r6,zero
    2080:	00023880 	call	2388 <_lseek_r>
    2084:	8080030b 	ldhu	r2,12(r16)
    2088:	8140038f 	ldh	r5,14(r16)
    208c:	10bbffcc 	andi	r2,r2,61439
    2090:	980f883a 	mov	r7,r19
    2094:	900d883a 	mov	r6,r18
    2098:	8809883a 	mov	r4,r17
    209c:	8080030d 	sth	r2,12(r16)
    20a0:	dfc00417 	ldw	ra,16(sp)
    20a4:	dcc00317 	ldw	r19,12(sp)
    20a8:	dc800217 	ldw	r18,8(sp)
    20ac:	dc400117 	ldw	r17,4(sp)
    20b0:	dc000017 	ldw	r16,0(sp)
    20b4:	dec00504 	addi	sp,sp,20
    20b8:	00021201 	jmpi	2120 <_write_r>

000020bc <__sseek>:
    20bc:	defffe04 	addi	sp,sp,-8
    20c0:	dc000015 	stw	r16,0(sp)
    20c4:	2821883a 	mov	r16,r5
    20c8:	2940038f 	ldh	r5,14(r5)
    20cc:	dfc00115 	stw	ra,4(sp)
    20d0:	00023880 	call	2388 <_lseek_r>
    20d4:	00ffffc4 	movi	r3,-1
    20d8:	10c00826 	beq	r2,r3,20fc <__sseek+0x40>
    20dc:	80c0030b 	ldhu	r3,12(r16)
    20e0:	80801415 	stw	r2,80(r16)
    20e4:	18c40014 	ori	r3,r3,4096
    20e8:	80c0030d 	sth	r3,12(r16)
    20ec:	dfc00117 	ldw	ra,4(sp)
    20f0:	dc000017 	ldw	r16,0(sp)
    20f4:	dec00204 	addi	sp,sp,8
    20f8:	f800283a 	ret
    20fc:	80c0030b 	ldhu	r3,12(r16)
    2100:	18fbffcc 	andi	r3,r3,61439
    2104:	80c0030d 	sth	r3,12(r16)
    2108:	dfc00117 	ldw	ra,4(sp)
    210c:	dc000017 	ldw	r16,0(sp)
    2110:	dec00204 	addi	sp,sp,8
    2114:	f800283a 	ret

00002118 <__sclose>:
    2118:	2940038f 	ldh	r5,14(r5)
    211c:	00021801 	jmpi	2180 <_close_r>

00002120 <_write_r>:
    2120:	defffd04 	addi	sp,sp,-12
    2124:	2805883a 	mov	r2,r5
    2128:	dc000015 	stw	r16,0(sp)
    212c:	04000074 	movhi	r16,1
    2130:	dc400115 	stw	r17,4(sp)
    2134:	300b883a 	mov	r5,r6
    2138:	84022d04 	addi	r16,r16,2228
    213c:	2023883a 	mov	r17,r4
    2140:	380d883a 	mov	r6,r7
    2144:	1009883a 	mov	r4,r2
    2148:	dfc00215 	stw	ra,8(sp)
    214c:	80000015 	stw	zero,0(r16)
    2150:	0002cfc0 	call	2cfc <write>
    2154:	00ffffc4 	movi	r3,-1
    2158:	10c00526 	beq	r2,r3,2170 <_write_r+0x50>
    215c:	dfc00217 	ldw	ra,8(sp)
    2160:	dc400117 	ldw	r17,4(sp)
    2164:	dc000017 	ldw	r16,0(sp)
    2168:	dec00304 	addi	sp,sp,12
    216c:	f800283a 	ret
    2170:	80c00017 	ldw	r3,0(r16)
    2174:	183ff926 	beq	r3,zero,215c <__alt_data_end+0xfffe9abc>
    2178:	88c00015 	stw	r3,0(r17)
    217c:	003ff706 	br	215c <__alt_data_end+0xfffe9abc>

00002180 <_close_r>:
    2180:	defffd04 	addi	sp,sp,-12
    2184:	dc000015 	stw	r16,0(sp)
    2188:	04000074 	movhi	r16,1
    218c:	dc400115 	stw	r17,4(sp)
    2190:	84022d04 	addi	r16,r16,2228
    2194:	2023883a 	mov	r17,r4
    2198:	2809883a 	mov	r4,r5
    219c:	dfc00215 	stw	ra,8(sp)
    21a0:	80000015 	stw	zero,0(r16)
    21a4:	00024ac0 	call	24ac <close>
    21a8:	00ffffc4 	movi	r3,-1
    21ac:	10c00526 	beq	r2,r3,21c4 <_close_r+0x44>
    21b0:	dfc00217 	ldw	ra,8(sp)
    21b4:	dc400117 	ldw	r17,4(sp)
    21b8:	dc000017 	ldw	r16,0(sp)
    21bc:	dec00304 	addi	sp,sp,12
    21c0:	f800283a 	ret
    21c4:	80c00017 	ldw	r3,0(r16)
    21c8:	183ff926 	beq	r3,zero,21b0 <__alt_data_end+0xfffe9b10>
    21cc:	88c00015 	stw	r3,0(r17)
    21d0:	003ff706 	br	21b0 <__alt_data_end+0xfffe9b10>

000021d4 <_fclose_r>:
    21d4:	28003926 	beq	r5,zero,22bc <_fclose_r+0xe8>
    21d8:	defffc04 	addi	sp,sp,-16
    21dc:	dc400115 	stw	r17,4(sp)
    21e0:	dc000015 	stw	r16,0(sp)
    21e4:	dfc00315 	stw	ra,12(sp)
    21e8:	dc800215 	stw	r18,8(sp)
    21ec:	2023883a 	mov	r17,r4
    21f0:	2821883a 	mov	r16,r5
    21f4:	20000226 	beq	r4,zero,2200 <_fclose_r+0x2c>
    21f8:	20800e17 	ldw	r2,56(r4)
    21fc:	10002726 	beq	r2,zero,229c <_fclose_r+0xc8>
    2200:	8080030f 	ldh	r2,12(r16)
    2204:	1000071e 	bne	r2,zero,2224 <_fclose_r+0x50>
    2208:	0005883a 	mov	r2,zero
    220c:	dfc00317 	ldw	ra,12(sp)
    2210:	dc800217 	ldw	r18,8(sp)
    2214:	dc400117 	ldw	r17,4(sp)
    2218:	dc000017 	ldw	r16,0(sp)
    221c:	dec00404 	addi	sp,sp,16
    2220:	f800283a 	ret
    2224:	800b883a 	mov	r5,r16
    2228:	8809883a 	mov	r4,r17
    222c:	00009b40 	call	9b4 <__sflush_r>
    2230:	1025883a 	mov	r18,r2
    2234:	80800b17 	ldw	r2,44(r16)
    2238:	10000426 	beq	r2,zero,224c <_fclose_r+0x78>
    223c:	81400717 	ldw	r5,28(r16)
    2240:	8809883a 	mov	r4,r17
    2244:	103ee83a 	callr	r2
    2248:	10001616 	blt	r2,zero,22a4 <_fclose_r+0xd0>
    224c:	8080030b 	ldhu	r2,12(r16)
    2250:	1080200c 	andi	r2,r2,128
    2254:	1000151e 	bne	r2,zero,22ac <_fclose_r+0xd8>
    2258:	81400c17 	ldw	r5,48(r16)
    225c:	28000526 	beq	r5,zero,2274 <_fclose_r+0xa0>
    2260:	80801004 	addi	r2,r16,64
    2264:	28800226 	beq	r5,r2,2270 <_fclose_r+0x9c>
    2268:	8809883a 	mov	r4,r17
    226c:	00011300 	call	1130 <_free_r>
    2270:	80000c15 	stw	zero,48(r16)
    2274:	81401117 	ldw	r5,68(r16)
    2278:	28000326 	beq	r5,zero,2288 <_fclose_r+0xb4>
    227c:	8809883a 	mov	r4,r17
    2280:	00011300 	call	1130 <_free_r>
    2284:	80001115 	stw	zero,68(r16)
    2288:	0000fcc0 	call	fcc <__sfp_lock_acquire>
    228c:	8000030d 	sth	zero,12(r16)
    2290:	0000fd00 	call	fd0 <__sfp_lock_release>
    2294:	9005883a 	mov	r2,r18
    2298:	003fdc06 	br	220c <__alt_data_end+0xfffe9b6c>
    229c:	0000fbc0 	call	fbc <__sinit>
    22a0:	003fd706 	br	2200 <__alt_data_end+0xfffe9b60>
    22a4:	04bfffc4 	movi	r18,-1
    22a8:	003fe806 	br	224c <__alt_data_end+0xfffe9bac>
    22ac:	81400417 	ldw	r5,16(r16)
    22b0:	8809883a 	mov	r4,r17
    22b4:	00011300 	call	1130 <_free_r>
    22b8:	003fe706 	br	2258 <__alt_data_end+0xfffe9bb8>
    22bc:	0005883a 	mov	r2,zero
    22c0:	f800283a 	ret

000022c4 <fclose>:
    22c4:	00800074 	movhi	r2,1
    22c8:	10bb3504 	addi	r2,r2,-4908
    22cc:	200b883a 	mov	r5,r4
    22d0:	11000017 	ldw	r4,0(r2)
    22d4:	00021d41 	jmpi	21d4 <_fclose_r>

000022d8 <_fstat_r>:
    22d8:	defffd04 	addi	sp,sp,-12
    22dc:	2805883a 	mov	r2,r5
    22e0:	dc000015 	stw	r16,0(sp)
    22e4:	04000074 	movhi	r16,1
    22e8:	dc400115 	stw	r17,4(sp)
    22ec:	84022d04 	addi	r16,r16,2228
    22f0:	2023883a 	mov	r17,r4
    22f4:	300b883a 	mov	r5,r6
    22f8:	1009883a 	mov	r4,r2
    22fc:	dfc00215 	stw	ra,8(sp)
    2300:	80000015 	stw	zero,0(r16)
    2304:	00025ec0 	call	25ec <fstat>
    2308:	00ffffc4 	movi	r3,-1
    230c:	10c00526 	beq	r2,r3,2324 <_fstat_r+0x4c>
    2310:	dfc00217 	ldw	ra,8(sp)
    2314:	dc400117 	ldw	r17,4(sp)
    2318:	dc000017 	ldw	r16,0(sp)
    231c:	dec00304 	addi	sp,sp,12
    2320:	f800283a 	ret
    2324:	80c00017 	ldw	r3,0(r16)
    2328:	183ff926 	beq	r3,zero,2310 <__alt_data_end+0xfffe9c70>
    232c:	88c00015 	stw	r3,0(r17)
    2330:	003ff706 	br	2310 <__alt_data_end+0xfffe9c70>

00002334 <_isatty_r>:
    2334:	defffd04 	addi	sp,sp,-12
    2338:	dc000015 	stw	r16,0(sp)
    233c:	04000074 	movhi	r16,1
    2340:	dc400115 	stw	r17,4(sp)
    2344:	84022d04 	addi	r16,r16,2228
    2348:	2023883a 	mov	r17,r4
    234c:	2809883a 	mov	r4,r5
    2350:	dfc00215 	stw	ra,8(sp)
    2354:	80000015 	stw	zero,0(r16)
    2358:	00026e00 	call	26e0 <isatty>
    235c:	00ffffc4 	movi	r3,-1
    2360:	10c00526 	beq	r2,r3,2378 <_isatty_r+0x44>
    2364:	dfc00217 	ldw	ra,8(sp)
    2368:	dc400117 	ldw	r17,4(sp)
    236c:	dc000017 	ldw	r16,0(sp)
    2370:	dec00304 	addi	sp,sp,12
    2374:	f800283a 	ret
    2378:	80c00017 	ldw	r3,0(r16)
    237c:	183ff926 	beq	r3,zero,2364 <__alt_data_end+0xfffe9cc4>
    2380:	88c00015 	stw	r3,0(r17)
    2384:	003ff706 	br	2364 <__alt_data_end+0xfffe9cc4>

00002388 <_lseek_r>:
    2388:	defffd04 	addi	sp,sp,-12
    238c:	2805883a 	mov	r2,r5
    2390:	dc000015 	stw	r16,0(sp)
    2394:	04000074 	movhi	r16,1
    2398:	dc400115 	stw	r17,4(sp)
    239c:	300b883a 	mov	r5,r6
    23a0:	84022d04 	addi	r16,r16,2228
    23a4:	2023883a 	mov	r17,r4
    23a8:	380d883a 	mov	r6,r7
    23ac:	1009883a 	mov	r4,r2
    23b0:	dfc00215 	stw	ra,8(sp)
    23b4:	80000015 	stw	zero,0(r16)
    23b8:	00028b40 	call	28b4 <lseek>
    23bc:	00ffffc4 	movi	r3,-1
    23c0:	10c00526 	beq	r2,r3,23d8 <_lseek_r+0x50>
    23c4:	dfc00217 	ldw	ra,8(sp)
    23c8:	dc400117 	ldw	r17,4(sp)
    23cc:	dc000017 	ldw	r16,0(sp)
    23d0:	dec00304 	addi	sp,sp,12
    23d4:	f800283a 	ret
    23d8:	80c00017 	ldw	r3,0(r16)
    23dc:	183ff926 	beq	r3,zero,23c4 <__alt_data_end+0xfffe9d24>
    23e0:	88c00015 	stw	r3,0(r17)
    23e4:	003ff706 	br	23c4 <__alt_data_end+0xfffe9d24>

000023e8 <_read_r>:
    23e8:	defffd04 	addi	sp,sp,-12
    23ec:	2805883a 	mov	r2,r5
    23f0:	dc000015 	stw	r16,0(sp)
    23f4:	04000074 	movhi	r16,1
    23f8:	dc400115 	stw	r17,4(sp)
    23fc:	300b883a 	mov	r5,r6
    2400:	84022d04 	addi	r16,r16,2228
    2404:	2023883a 	mov	r17,r4
    2408:	380d883a 	mov	r6,r7
    240c:	1009883a 	mov	r4,r2
    2410:	dfc00215 	stw	ra,8(sp)
    2414:	80000015 	stw	zero,0(r16)
    2418:	0002a880 	call	2a88 <read>
    241c:	00ffffc4 	movi	r3,-1
    2420:	10c00526 	beq	r2,r3,2438 <_read_r+0x50>
    2424:	dfc00217 	ldw	ra,8(sp)
    2428:	dc400117 	ldw	r17,4(sp)
    242c:	dc000017 	ldw	r16,0(sp)
    2430:	dec00304 	addi	sp,sp,12
    2434:	f800283a 	ret
    2438:	80c00017 	ldw	r3,0(r16)
    243c:	183ff926 	beq	r3,zero,2424 <__alt_data_end+0xfffe9d84>
    2440:	88c00015 	stw	r3,0(r17)
    2444:	003ff706 	br	2424 <__alt_data_end+0xfffe9d84>

00002448 <__mulsi3>:
    2448:	0005883a 	mov	r2,zero
    244c:	20000726 	beq	r4,zero,246c <__mulsi3+0x24>
    2450:	20c0004c 	andi	r3,r4,1
    2454:	2008d07a 	srli	r4,r4,1
    2458:	18000126 	beq	r3,zero,2460 <__mulsi3+0x18>
    245c:	1145883a 	add	r2,r2,r5
    2460:	294b883a 	add	r5,r5,r5
    2464:	203ffa1e 	bne	r4,zero,2450 <__alt_data_end+0xfffe9db0>
    2468:	f800283a 	ret
    246c:	f800283a 	ret

00002470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2470:	defffe04 	addi	sp,sp,-8
    2474:	dfc00115 	stw	ra,4(sp)
    2478:	df000015 	stw	fp,0(sp)
    247c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2480:	d0a00917 	ldw	r2,-32732(gp)
    2484:	10000326 	beq	r2,zero,2494 <alt_get_errno+0x24>
    2488:	d0a00917 	ldw	r2,-32732(gp)
    248c:	103ee83a 	callr	r2
    2490:	00000106 	br	2498 <alt_get_errno+0x28>
    2494:	d0a6f904 	addi	r2,gp,-25628
}
    2498:	e037883a 	mov	sp,fp
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	df000017 	ldw	fp,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    24ac:	defffb04 	addi	sp,sp,-20
    24b0:	dfc00415 	stw	ra,16(sp)
    24b4:	df000315 	stw	fp,12(sp)
    24b8:	df000304 	addi	fp,sp,12
    24bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    24c0:	e0bfff17 	ldw	r2,-4(fp)
    24c4:	10000816 	blt	r2,zero,24e8 <close+0x3c>
    24c8:	01400304 	movi	r5,12
    24cc:	e13fff17 	ldw	r4,-4(fp)
    24d0:	00024480 	call	2448 <__mulsi3>
    24d4:	1007883a 	mov	r3,r2
    24d8:	00800074 	movhi	r2,1
    24dc:	10b6ae04 	addi	r2,r2,-9544
    24e0:	1885883a 	add	r2,r3,r2
    24e4:	00000106 	br	24ec <close+0x40>
    24e8:	0005883a 	mov	r2,zero
    24ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    24f0:	e0bffd17 	ldw	r2,-12(fp)
    24f4:	10001926 	beq	r2,zero,255c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    24f8:	e0bffd17 	ldw	r2,-12(fp)
    24fc:	10800017 	ldw	r2,0(r2)
    2500:	10800417 	ldw	r2,16(r2)
    2504:	10000626 	beq	r2,zero,2520 <close+0x74>
    2508:	e0bffd17 	ldw	r2,-12(fp)
    250c:	10800017 	ldw	r2,0(r2)
    2510:	10800417 	ldw	r2,16(r2)
    2514:	e13ffd17 	ldw	r4,-12(fp)
    2518:	103ee83a 	callr	r2
    251c:	00000106 	br	2524 <close+0x78>
    2520:	0005883a 	mov	r2,zero
    2524:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2528:	e13fff17 	ldw	r4,-4(fp)
    252c:	0002b8c0 	call	2b8c <alt_release_fd>
    if (rval < 0)
    2530:	e0bffe17 	ldw	r2,-8(fp)
    2534:	1000070e 	bge	r2,zero,2554 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    2538:	00024700 	call	2470 <alt_get_errno>
    253c:	1007883a 	mov	r3,r2
    2540:	e0bffe17 	ldw	r2,-8(fp)
    2544:	0085c83a 	sub	r2,zero,r2
    2548:	18800015 	stw	r2,0(r3)
      return -1;
    254c:	00bfffc4 	movi	r2,-1
    2550:	00000706 	br	2570 <close+0xc4>
    }
    return 0;
    2554:	0005883a 	mov	r2,zero
    2558:	00000506 	br	2570 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    255c:	00024700 	call	2470 <alt_get_errno>
    2560:	1007883a 	mov	r3,r2
    2564:	00801444 	movi	r2,81
    2568:	18800015 	stw	r2,0(r3)
    return -1;
    256c:	00bfffc4 	movi	r2,-1
  }
}
    2570:	e037883a 	mov	sp,fp
    2574:	dfc00117 	ldw	ra,4(sp)
    2578:	df000017 	ldw	fp,0(sp)
    257c:	dec00204 	addi	sp,sp,8
    2580:	f800283a 	ret

00002584 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2584:	defffc04 	addi	sp,sp,-16
    2588:	df000315 	stw	fp,12(sp)
    258c:	df000304 	addi	fp,sp,12
    2590:	e13ffd15 	stw	r4,-12(fp)
    2594:	e17ffe15 	stw	r5,-8(fp)
    2598:	e1bfff15 	stw	r6,-4(fp)
  return len;
    259c:	e0bfff17 	ldw	r2,-4(fp)
}
    25a0:	e037883a 	mov	sp,fp
    25a4:	df000017 	ldw	fp,0(sp)
    25a8:	dec00104 	addi	sp,sp,4
    25ac:	f800283a 	ret

000025b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    25b0:	defffe04 	addi	sp,sp,-8
    25b4:	dfc00115 	stw	ra,4(sp)
    25b8:	df000015 	stw	fp,0(sp)
    25bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    25c0:	d0a00917 	ldw	r2,-32732(gp)
    25c4:	10000326 	beq	r2,zero,25d4 <alt_get_errno+0x24>
    25c8:	d0a00917 	ldw	r2,-32732(gp)
    25cc:	103ee83a 	callr	r2
    25d0:	00000106 	br	25d8 <alt_get_errno+0x28>
    25d4:	d0a6f904 	addi	r2,gp,-25628
}
    25d8:	e037883a 	mov	sp,fp
    25dc:	dfc00117 	ldw	ra,4(sp)
    25e0:	df000017 	ldw	fp,0(sp)
    25e4:	dec00204 	addi	sp,sp,8
    25e8:	f800283a 	ret

000025ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    25ec:	defffb04 	addi	sp,sp,-20
    25f0:	dfc00415 	stw	ra,16(sp)
    25f4:	df000315 	stw	fp,12(sp)
    25f8:	df000304 	addi	fp,sp,12
    25fc:	e13ffe15 	stw	r4,-8(fp)
    2600:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2604:	e0bffe17 	ldw	r2,-8(fp)
    2608:	10000816 	blt	r2,zero,262c <fstat+0x40>
    260c:	01400304 	movi	r5,12
    2610:	e13ffe17 	ldw	r4,-8(fp)
    2614:	00024480 	call	2448 <__mulsi3>
    2618:	1007883a 	mov	r3,r2
    261c:	00800074 	movhi	r2,1
    2620:	10b6ae04 	addi	r2,r2,-9544
    2624:	1885883a 	add	r2,r3,r2
    2628:	00000106 	br	2630 <fstat+0x44>
    262c:	0005883a 	mov	r2,zero
    2630:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    2634:	e0bffd17 	ldw	r2,-12(fp)
    2638:	10001026 	beq	r2,zero,267c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    263c:	e0bffd17 	ldw	r2,-12(fp)
    2640:	10800017 	ldw	r2,0(r2)
    2644:	10800817 	ldw	r2,32(r2)
    2648:	10000726 	beq	r2,zero,2668 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
    264c:	e0bffd17 	ldw	r2,-12(fp)
    2650:	10800017 	ldw	r2,0(r2)
    2654:	10800817 	ldw	r2,32(r2)
    2658:	e17fff17 	ldw	r5,-4(fp)
    265c:	e13ffd17 	ldw	r4,-12(fp)
    2660:	103ee83a 	callr	r2
    2664:	00000a06 	br	2690 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    2668:	e0bfff17 	ldw	r2,-4(fp)
    266c:	00c80004 	movi	r3,8192
    2670:	10c00115 	stw	r3,4(r2)
      return 0;
    2674:	0005883a 	mov	r2,zero
    2678:	00000506 	br	2690 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    267c:	00025b00 	call	25b0 <alt_get_errno>
    2680:	1007883a 	mov	r3,r2
    2684:	00801444 	movi	r2,81
    2688:	18800015 	stw	r2,0(r3)
    return -1;
    268c:	00bfffc4 	movi	r2,-1
  }
}
    2690:	e037883a 	mov	sp,fp
    2694:	dfc00117 	ldw	ra,4(sp)
    2698:	df000017 	ldw	fp,0(sp)
    269c:	dec00204 	addi	sp,sp,8
    26a0:	f800283a 	ret

000026a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    26a4:	defffe04 	addi	sp,sp,-8
    26a8:	dfc00115 	stw	ra,4(sp)
    26ac:	df000015 	stw	fp,0(sp)
    26b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    26b4:	d0a00917 	ldw	r2,-32732(gp)
    26b8:	10000326 	beq	r2,zero,26c8 <alt_get_errno+0x24>
    26bc:	d0a00917 	ldw	r2,-32732(gp)
    26c0:	103ee83a 	callr	r2
    26c4:	00000106 	br	26cc <alt_get_errno+0x28>
    26c8:	d0a6f904 	addi	r2,gp,-25628
}
    26cc:	e037883a 	mov	sp,fp
    26d0:	dfc00117 	ldw	ra,4(sp)
    26d4:	df000017 	ldw	fp,0(sp)
    26d8:	dec00204 	addi	sp,sp,8
    26dc:	f800283a 	ret

000026e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    26e0:	deffed04 	addi	sp,sp,-76
    26e4:	dfc01215 	stw	ra,72(sp)
    26e8:	df001115 	stw	fp,68(sp)
    26ec:	df001104 	addi	fp,sp,68
    26f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    26f4:	e0bfff17 	ldw	r2,-4(fp)
    26f8:	10000816 	blt	r2,zero,271c <isatty+0x3c>
    26fc:	01400304 	movi	r5,12
    2700:	e13fff17 	ldw	r4,-4(fp)
    2704:	00024480 	call	2448 <__mulsi3>
    2708:	1007883a 	mov	r3,r2
    270c:	00800074 	movhi	r2,1
    2710:	10b6ae04 	addi	r2,r2,-9544
    2714:	1885883a 	add	r2,r3,r2
    2718:	00000106 	br	2720 <isatty+0x40>
    271c:	0005883a 	mov	r2,zero
    2720:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    2724:	e0bfef17 	ldw	r2,-68(fp)
    2728:	10000e26 	beq	r2,zero,2764 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    272c:	e0bfef17 	ldw	r2,-68(fp)
    2730:	10800017 	ldw	r2,0(r2)
    2734:	10800817 	ldw	r2,32(r2)
    2738:	1000021e 	bne	r2,zero,2744 <isatty+0x64>
    {
      return 1;
    273c:	00800044 	movi	r2,1
    2740:	00000d06 	br	2778 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    2744:	e0bff004 	addi	r2,fp,-64
    2748:	100b883a 	mov	r5,r2
    274c:	e13fff17 	ldw	r4,-4(fp)
    2750:	00025ec0 	call	25ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    2754:	e0bff117 	ldw	r2,-60(fp)
    2758:	10880020 	cmpeqi	r2,r2,8192
    275c:	10803fcc 	andi	r2,r2,255
    2760:	00000506 	br	2778 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2764:	00026a40 	call	26a4 <alt_get_errno>
    2768:	1007883a 	mov	r3,r2
    276c:	00801444 	movi	r2,81
    2770:	18800015 	stw	r2,0(r3)
    return 0;
    2774:	0005883a 	mov	r2,zero
  }
}
    2778:	e037883a 	mov	sp,fp
    277c:	dfc00117 	ldw	ra,4(sp)
    2780:	df000017 	ldw	fp,0(sp)
    2784:	dec00204 	addi	sp,sp,8
    2788:	f800283a 	ret

0000278c <alt_load_section>:
    278c:	defffc04 	addi	sp,sp,-16
    2790:	df000315 	stw	fp,12(sp)
    2794:	df000304 	addi	fp,sp,12
    2798:	e13ffd15 	stw	r4,-12(fp)
    279c:	e17ffe15 	stw	r5,-8(fp)
    27a0:	e1bfff15 	stw	r6,-4(fp)
    27a4:	e0fffe17 	ldw	r3,-8(fp)
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	18800c26 	beq	r3,r2,27e0 <alt_load_section+0x54>
    27b0:	00000806 	br	27d4 <alt_load_section+0x48>
    27b4:	e0bffe17 	ldw	r2,-8(fp)
    27b8:	10c00104 	addi	r3,r2,4
    27bc:	e0fffe15 	stw	r3,-8(fp)
    27c0:	e0fffd17 	ldw	r3,-12(fp)
    27c4:	19000104 	addi	r4,r3,4
    27c8:	e13ffd15 	stw	r4,-12(fp)
    27cc:	18c00017 	ldw	r3,0(r3)
    27d0:	10c00015 	stw	r3,0(r2)
    27d4:	e0fffe17 	ldw	r3,-8(fp)
    27d8:	e0bfff17 	ldw	r2,-4(fp)
    27dc:	18bff51e 	bne	r3,r2,27b4 <__alt_data_end+0xfffea114>
    27e0:	0001883a 	nop
    27e4:	e037883a 	mov	sp,fp
    27e8:	df000017 	ldw	fp,0(sp)
    27ec:	dec00104 	addi	sp,sp,4
    27f0:	f800283a 	ret

000027f4 <alt_load>:
    27f4:	defffe04 	addi	sp,sp,-8
    27f8:	dfc00115 	stw	ra,4(sp)
    27fc:	df000015 	stw	fp,0(sp)
    2800:	d839883a 	mov	fp,sp
    2804:	01800074 	movhi	r6,1
    2808:	31bb6104 	addi	r6,r6,-4732
    280c:	01400074 	movhi	r5,1
    2810:	29749904 	addi	r5,r5,-11676
    2814:	01000074 	movhi	r4,1
    2818:	213b6104 	addi	r4,r4,-4732
    281c:	000278c0 	call	278c <alt_load_section>
    2820:	01800034 	movhi	r6,0
    2824:	31808c04 	addi	r6,r6,560
    2828:	01400034 	movhi	r5,0
    282c:	29400804 	addi	r5,r5,32
    2830:	01000034 	movhi	r4,0
    2834:	21000804 	addi	r4,r4,32
    2838:	000278c0 	call	278c <alt_load_section>
    283c:	01800074 	movhi	r6,1
    2840:	31b49904 	addi	r6,r6,-11676
    2844:	01400074 	movhi	r5,1
    2848:	29743f04 	addi	r5,r5,-12036
    284c:	01000074 	movhi	r4,1
    2850:	21343f04 	addi	r4,r4,-12036
    2854:	000278c0 	call	278c <alt_load_section>
    2858:	000b9280 	call	b928 <alt_dcache_flush_all>
    285c:	000bae80 	call	bae8 <alt_icache_flush_all>
    2860:	0001883a 	nop
    2864:	e037883a 	mov	sp,fp
    2868:	dfc00117 	ldw	ra,4(sp)
    286c:	df000017 	ldw	fp,0(sp)
    2870:	dec00204 	addi	sp,sp,8
    2874:	f800283a 	ret

00002878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2878:	defffe04 	addi	sp,sp,-8
    287c:	dfc00115 	stw	ra,4(sp)
    2880:	df000015 	stw	fp,0(sp)
    2884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2888:	d0a00917 	ldw	r2,-32732(gp)
    288c:	10000326 	beq	r2,zero,289c <alt_get_errno+0x24>
    2890:	d0a00917 	ldw	r2,-32732(gp)
    2894:	103ee83a 	callr	r2
    2898:	00000106 	br	28a0 <alt_get_errno+0x28>
    289c:	d0a6f904 	addi	r2,gp,-25628
}
    28a0:	e037883a 	mov	sp,fp
    28a4:	dfc00117 	ldw	ra,4(sp)
    28a8:	df000017 	ldw	fp,0(sp)
    28ac:	dec00204 	addi	sp,sp,8
    28b0:	f800283a 	ret

000028b4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    28b4:	defff904 	addi	sp,sp,-28
    28b8:	dfc00615 	stw	ra,24(sp)
    28bc:	df000515 	stw	fp,20(sp)
    28c0:	df000504 	addi	fp,sp,20
    28c4:	e13ffd15 	stw	r4,-12(fp)
    28c8:	e17ffe15 	stw	r5,-8(fp)
    28cc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    28d0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    28d4:	e0bffd17 	ldw	r2,-12(fp)
    28d8:	10000816 	blt	r2,zero,28fc <lseek+0x48>
    28dc:	01400304 	movi	r5,12
    28e0:	e13ffd17 	ldw	r4,-12(fp)
    28e4:	00024480 	call	2448 <__mulsi3>
    28e8:	1007883a 	mov	r3,r2
    28ec:	00800074 	movhi	r2,1
    28f0:	10b6ae04 	addi	r2,r2,-9544
    28f4:	1885883a 	add	r2,r3,r2
    28f8:	00000106 	br	2900 <lseek+0x4c>
    28fc:	0005883a 	mov	r2,zero
    2900:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    2904:	e0bffc17 	ldw	r2,-16(fp)
    2908:	10001026 	beq	r2,zero,294c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    290c:	e0bffc17 	ldw	r2,-16(fp)
    2910:	10800017 	ldw	r2,0(r2)
    2914:	10800717 	ldw	r2,28(r2)
    2918:	10000926 	beq	r2,zero,2940 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    291c:	e0bffc17 	ldw	r2,-16(fp)
    2920:	10800017 	ldw	r2,0(r2)
    2924:	10800717 	ldw	r2,28(r2)
    2928:	e1bfff17 	ldw	r6,-4(fp)
    292c:	e17ffe17 	ldw	r5,-8(fp)
    2930:	e13ffc17 	ldw	r4,-16(fp)
    2934:	103ee83a 	callr	r2
    2938:	e0bffb15 	stw	r2,-20(fp)
    293c:	00000506 	br	2954 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    2940:	00bfde84 	movi	r2,-134
    2944:	e0bffb15 	stw	r2,-20(fp)
    2948:	00000206 	br	2954 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
    294c:	00bfebc4 	movi	r2,-81
    2950:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    2954:	e0bffb17 	ldw	r2,-20(fp)
    2958:	1000070e 	bge	r2,zero,2978 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
    295c:	00028780 	call	2878 <alt_get_errno>
    2960:	1007883a 	mov	r3,r2
    2964:	e0bffb17 	ldw	r2,-20(fp)
    2968:	0085c83a 	sub	r2,zero,r2
    296c:	18800015 	stw	r2,0(r3)
    rc = -1;
    2970:	00bfffc4 	movi	r2,-1
    2974:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    2978:	e0bffb17 	ldw	r2,-20(fp)
}
    297c:	e037883a 	mov	sp,fp
    2980:	dfc00117 	ldw	ra,4(sp)
    2984:	df000017 	ldw	fp,0(sp)
    2988:	dec00204 	addi	sp,sp,8
    298c:	f800283a 	ret

00002990 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2990:	defff904 	addi	sp,sp,-28
    2994:	dfc00615 	stw	ra,24(sp)
    2998:	df000515 	stw	fp,20(sp)
    299c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    29a0:	0009883a 	mov	r4,zero
    29a4:	000a9380 	call	a938 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    29a8:	000397c0 	call	397c <OSInit>
    29ac:	01000044 	movi	r4,1
    29b0:	00082d80 	call	82d8 <OSSemCreate>
    29b4:	d0a6ff15 	stw	r2,-25604(gp)
    29b8:	01000044 	movi	r4,1
    29bc:	00082d80 	call	82d8 <OSSemCreate>
    29c0:	d0a70115 	stw	r2,-25596(gp)
    29c4:	d0a6fa04 	addi	r2,gp,-25624
    29c8:	e0bffc15 	stw	r2,-16(fp)
    29cc:	00800044 	movi	r2,1
    29d0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
    29d4:	e0bffd0b 	ldhu	r2,-12(fp)
    29d8:	1009883a 	mov	r4,r2
    29dc:	00082d80 	call	82d8 <OSSemCreate>
    29e0:	1007883a 	mov	r3,r2
    29e4:	e0bffc17 	ldw	r2,-16(fp)
    29e8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    29ec:	000a9700 	call	a970 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    29f0:	01800074 	movhi	r6,1
    29f4:	31b44304 	addi	r6,r6,-12020
    29f8:	01400074 	movhi	r5,1
    29fc:	29744304 	addi	r5,r5,-12020
    2a00:	01000074 	movhi	r4,1
    2a04:	21344304 	addi	r4,r4,-12020
    2a08:	000be8c0 	call	be8c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    2a0c:	000ba280 	call	ba28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    2a10:	01000074 	movhi	r4,1
    2a14:	212ea204 	addi	r4,r4,-17784
    2a18:	000c9d40 	call	c9d4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    2a1c:	d0a6fb17 	ldw	r2,-25620(gp)
    2a20:	d0e6fc17 	ldw	r3,-25616(gp)
    2a24:	d126fd17 	ldw	r4,-25612(gp)
    2a28:	200d883a 	mov	r6,r4
    2a2c:	180b883a 	mov	r5,r3
    2a30:	1009883a 	mov	r4,r2
    2a34:	000026c0 	call	26c <main>
    2a38:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
    2a3c:	01000044 	movi	r4,1
    2a40:	00024ac0 	call	24ac <close>
  exit (result);
    2a44:	e13ffb17 	ldw	r4,-20(fp)
    2a48:	000c9e80 	call	c9e8 <exit>

00002a4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2a4c:	defffe04 	addi	sp,sp,-8
    2a50:	dfc00115 	stw	ra,4(sp)
    2a54:	df000015 	stw	fp,0(sp)
    2a58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2a5c:	d0a00917 	ldw	r2,-32732(gp)
    2a60:	10000326 	beq	r2,zero,2a70 <alt_get_errno+0x24>
    2a64:	d0a00917 	ldw	r2,-32732(gp)
    2a68:	103ee83a 	callr	r2
    2a6c:	00000106 	br	2a74 <alt_get_errno+0x28>
    2a70:	d0a6f904 	addi	r2,gp,-25628
}
    2a74:	e037883a 	mov	sp,fp
    2a78:	dfc00117 	ldw	ra,4(sp)
    2a7c:	df000017 	ldw	fp,0(sp)
    2a80:	dec00204 	addi	sp,sp,8
    2a84:	f800283a 	ret

00002a88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    2a88:	defff904 	addi	sp,sp,-28
    2a8c:	dfc00615 	stw	ra,24(sp)
    2a90:	df000515 	stw	fp,20(sp)
    2a94:	df000504 	addi	fp,sp,20
    2a98:	e13ffd15 	stw	r4,-12(fp)
    2a9c:	e17ffe15 	stw	r5,-8(fp)
    2aa0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2aa4:	e0bffd17 	ldw	r2,-12(fp)
    2aa8:	10000816 	blt	r2,zero,2acc <read+0x44>
    2aac:	01400304 	movi	r5,12
    2ab0:	e13ffd17 	ldw	r4,-12(fp)
    2ab4:	00024480 	call	2448 <__mulsi3>
    2ab8:	1007883a 	mov	r3,r2
    2abc:	00800074 	movhi	r2,1
    2ac0:	10b6ae04 	addi	r2,r2,-9544
    2ac4:	1885883a 	add	r2,r3,r2
    2ac8:	00000106 	br	2ad0 <read+0x48>
    2acc:	0005883a 	mov	r2,zero
    2ad0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2ad4:	e0bffb17 	ldw	r2,-20(fp)
    2ad8:	10002226 	beq	r2,zero,2b64 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    2adc:	e0bffb17 	ldw	r2,-20(fp)
    2ae0:	10800217 	ldw	r2,8(r2)
    2ae4:	108000cc 	andi	r2,r2,3
    2ae8:	10800060 	cmpeqi	r2,r2,1
    2aec:	1000181e 	bne	r2,zero,2b50 <read+0xc8>
        (fd->dev->read))
    2af0:	e0bffb17 	ldw	r2,-20(fp)
    2af4:	10800017 	ldw	r2,0(r2)
    2af8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    2afc:	10001426 	beq	r2,zero,2b50 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    2b00:	e0bffb17 	ldw	r2,-20(fp)
    2b04:	10800017 	ldw	r2,0(r2)
    2b08:	10800517 	ldw	r2,20(r2)
    2b0c:	e0ffff17 	ldw	r3,-4(fp)
    2b10:	180d883a 	mov	r6,r3
    2b14:	e17ffe17 	ldw	r5,-8(fp)
    2b18:	e13ffb17 	ldw	r4,-20(fp)
    2b1c:	103ee83a 	callr	r2
    2b20:	e0bffc15 	stw	r2,-16(fp)
    2b24:	e0bffc17 	ldw	r2,-16(fp)
    2b28:	1000070e 	bge	r2,zero,2b48 <read+0xc0>
        {
          ALT_ERRNO = -rval;
    2b2c:	0002a4c0 	call	2a4c <alt_get_errno>
    2b30:	1007883a 	mov	r3,r2
    2b34:	e0bffc17 	ldw	r2,-16(fp)
    2b38:	0085c83a 	sub	r2,zero,r2
    2b3c:	18800015 	stw	r2,0(r3)
          return -1;
    2b40:	00bfffc4 	movi	r2,-1
    2b44:	00000c06 	br	2b78 <read+0xf0>
        }
        return rval;
    2b48:	e0bffc17 	ldw	r2,-16(fp)
    2b4c:	00000a06 	br	2b78 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
    2b50:	0002a4c0 	call	2a4c <alt_get_errno>
    2b54:	1007883a 	mov	r3,r2
    2b58:	00800344 	movi	r2,13
    2b5c:	18800015 	stw	r2,0(r3)
    2b60:	00000406 	br	2b74 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    2b64:	0002a4c0 	call	2a4c <alt_get_errno>
    2b68:	1007883a 	mov	r3,r2
    2b6c:	00801444 	movi	r2,81
    2b70:	18800015 	stw	r2,0(r3)
  }
  return -1;
    2b74:	00bfffc4 	movi	r2,-1
}
    2b78:	e037883a 	mov	sp,fp
    2b7c:	dfc00117 	ldw	ra,4(sp)
    2b80:	df000017 	ldw	fp,0(sp)
    2b84:	dec00204 	addi	sp,sp,8
    2b88:	f800283a 	ret

00002b8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2b8c:	defffc04 	addi	sp,sp,-16
    2b90:	dfc00315 	stw	ra,12(sp)
    2b94:	df000215 	stw	fp,8(sp)
    2b98:	dc000115 	stw	r16,4(sp)
    2b9c:	df000204 	addi	fp,sp,8
    2ba0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    2ba4:	e0bffe17 	ldw	r2,-8(fp)
    2ba8:	108000d0 	cmplti	r2,r2,3
    2bac:	1000111e 	bne	r2,zero,2bf4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    2bb0:	04000074 	movhi	r16,1
    2bb4:	8436ae04 	addi	r16,r16,-9544
    2bb8:	e0bffe17 	ldw	r2,-8(fp)
    2bbc:	01400304 	movi	r5,12
    2bc0:	1009883a 	mov	r4,r2
    2bc4:	00024480 	call	2448 <__mulsi3>
    2bc8:	8085883a 	add	r2,r16,r2
    2bcc:	10800204 	addi	r2,r2,8
    2bd0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2bd4:	04000074 	movhi	r16,1
    2bd8:	8436ae04 	addi	r16,r16,-9544
    2bdc:	e0bffe17 	ldw	r2,-8(fp)
    2be0:	01400304 	movi	r5,12
    2be4:	1009883a 	mov	r4,r2
    2be8:	00024480 	call	2448 <__mulsi3>
    2bec:	8085883a 	add	r2,r16,r2
    2bf0:	10000015 	stw	zero,0(r2)
  }
}
    2bf4:	0001883a 	nop
    2bf8:	e6ffff04 	addi	sp,fp,-4
    2bfc:	dfc00217 	ldw	ra,8(sp)
    2c00:	df000117 	ldw	fp,4(sp)
    2c04:	dc000017 	ldw	r16,0(sp)
    2c08:	dec00304 	addi	sp,sp,12
    2c0c:	f800283a 	ret

00002c10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    2c10:	defff904 	addi	sp,sp,-28
    2c14:	df000615 	stw	fp,24(sp)
    2c18:	df000604 	addi	fp,sp,24
    2c1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c20:	0005303a 	rdctl	r2,status
    2c24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c28:	e0fffe17 	ldw	r3,-8(fp)
    2c2c:	00bfff84 	movi	r2,-2
    2c30:	1884703a 	and	r2,r3,r2
    2c34:	1001703a 	wrctl	status,r2
  
  return context;
    2c38:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    2c3c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    2c40:	d0a00a17 	ldw	r2,-32728(gp)
    2c44:	10c000c4 	addi	r3,r2,3
    2c48:	00bfff04 	movi	r2,-4
    2c4c:	1884703a 	and	r2,r3,r2
    2c50:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    2c54:	d0e00a17 	ldw	r3,-32728(gp)
    2c58:	e0bfff17 	ldw	r2,-4(fp)
    2c5c:	1887883a 	add	r3,r3,r2
    2c60:	008000b4 	movhi	r2,2
    2c64:	10a1a804 	addi	r2,r2,-31072
    2c68:	10c0062e 	bgeu	r2,r3,2c84 <sbrk+0x74>
    2c6c:	e0bffb17 	ldw	r2,-20(fp)
    2c70:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2c74:	e0bffa17 	ldw	r2,-24(fp)
    2c78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    2c7c:	00bfffc4 	movi	r2,-1
    2c80:	00000b06 	br	2cb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    2c84:	d0a00a17 	ldw	r2,-32728(gp)
    2c88:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    2c8c:	d0e00a17 	ldw	r3,-32728(gp)
    2c90:	e0bfff17 	ldw	r2,-4(fp)
    2c94:	1885883a 	add	r2,r3,r2
    2c98:	d0a00a15 	stw	r2,-32728(gp)
    2c9c:	e0bffb17 	ldw	r2,-20(fp)
    2ca0:	e0bffc15 	stw	r2,-16(fp)
    2ca4:	e0bffc17 	ldw	r2,-16(fp)
    2ca8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    2cac:	e0bffd17 	ldw	r2,-12(fp)
} 
    2cb0:	e037883a 	mov	sp,fp
    2cb4:	df000017 	ldw	fp,0(sp)
    2cb8:	dec00104 	addi	sp,sp,4
    2cbc:	f800283a 	ret

00002cc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2cc0:	defffe04 	addi	sp,sp,-8
    2cc4:	dfc00115 	stw	ra,4(sp)
    2cc8:	df000015 	stw	fp,0(sp)
    2ccc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2cd0:	d0a00917 	ldw	r2,-32732(gp)
    2cd4:	10000326 	beq	r2,zero,2ce4 <alt_get_errno+0x24>
    2cd8:	d0a00917 	ldw	r2,-32732(gp)
    2cdc:	103ee83a 	callr	r2
    2ce0:	00000106 	br	2ce8 <alt_get_errno+0x28>
    2ce4:	d0a6f904 	addi	r2,gp,-25628
}
    2ce8:	e037883a 	mov	sp,fp
    2cec:	dfc00117 	ldw	ra,4(sp)
    2cf0:	df000017 	ldw	fp,0(sp)
    2cf4:	dec00204 	addi	sp,sp,8
    2cf8:	f800283a 	ret

00002cfc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    2cfc:	defff904 	addi	sp,sp,-28
    2d00:	dfc00615 	stw	ra,24(sp)
    2d04:	df000515 	stw	fp,20(sp)
    2d08:	df000504 	addi	fp,sp,20
    2d0c:	e13ffd15 	stw	r4,-12(fp)
    2d10:	e17ffe15 	stw	r5,-8(fp)
    2d14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    2d18:	e0bffd17 	ldw	r2,-12(fp)
    2d1c:	10000816 	blt	r2,zero,2d40 <write+0x44>
    2d20:	01400304 	movi	r5,12
    2d24:	e13ffd17 	ldw	r4,-12(fp)
    2d28:	00024480 	call	2448 <__mulsi3>
    2d2c:	1007883a 	mov	r3,r2
    2d30:	00800074 	movhi	r2,1
    2d34:	10b6ae04 	addi	r2,r2,-9544
    2d38:	1885883a 	add	r2,r3,r2
    2d3c:	00000106 	br	2d44 <write+0x48>
    2d40:	0005883a 	mov	r2,zero
    2d44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    2d48:	e0bffb17 	ldw	r2,-20(fp)
    2d4c:	10002126 	beq	r2,zero,2dd4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    2d50:	e0bffb17 	ldw	r2,-20(fp)
    2d54:	10800217 	ldw	r2,8(r2)
    2d58:	108000cc 	andi	r2,r2,3
    2d5c:	10001826 	beq	r2,zero,2dc0 <write+0xc4>
    2d60:	e0bffb17 	ldw	r2,-20(fp)
    2d64:	10800017 	ldw	r2,0(r2)
    2d68:	10800617 	ldw	r2,24(r2)
    2d6c:	10001426 	beq	r2,zero,2dc0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    2d70:	e0bffb17 	ldw	r2,-20(fp)
    2d74:	10800017 	ldw	r2,0(r2)
    2d78:	10800617 	ldw	r2,24(r2)
    2d7c:	e0ffff17 	ldw	r3,-4(fp)
    2d80:	180d883a 	mov	r6,r3
    2d84:	e17ffe17 	ldw	r5,-8(fp)
    2d88:	e13ffb17 	ldw	r4,-20(fp)
    2d8c:	103ee83a 	callr	r2
    2d90:	e0bffc15 	stw	r2,-16(fp)
    2d94:	e0bffc17 	ldw	r2,-16(fp)
    2d98:	1000070e 	bge	r2,zero,2db8 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    2d9c:	0002cc00 	call	2cc0 <alt_get_errno>
    2da0:	1007883a 	mov	r3,r2
    2da4:	e0bffc17 	ldw	r2,-16(fp)
    2da8:	0085c83a 	sub	r2,zero,r2
    2dac:	18800015 	stw	r2,0(r3)
        return -1;
    2db0:	00bfffc4 	movi	r2,-1
    2db4:	00000c06 	br	2de8 <write+0xec>
      }
      return rval;
    2db8:	e0bffc17 	ldw	r2,-16(fp)
    2dbc:	00000a06 	br	2de8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    2dc0:	0002cc00 	call	2cc0 <alt_get_errno>
    2dc4:	1007883a 	mov	r3,r2
    2dc8:	00800344 	movi	r2,13
    2dcc:	18800015 	stw	r2,0(r3)
    2dd0:	00000406 	br	2de4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    2dd4:	0002cc00 	call	2cc0 <alt_get_errno>
    2dd8:	1007883a 	mov	r3,r2
    2ddc:	00801444 	movi	r2,81
    2de0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    2de4:	00bfffc4 	movi	r2,-1
}
    2de8:	e037883a 	mov	sp,fp
    2dec:	dfc00117 	ldw	ra,4(sp)
    2df0:	df000017 	ldw	fp,0(sp)
    2df4:	dec00204 	addi	sp,sp,8
    2df8:	f800283a 	ret

00002dfc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
    2dfc:	deffdf04 	addi	sp,sp,-132
    2e00:	dfc02015 	stw	ra,128(sp)
    2e04:	df001f15 	stw	fp,124(sp)
    2e08:	df001f04 	addi	fp,sp,124
    2e0c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    2e10:	e0bfe204 	addi	r2,fp,-120
    2e14:	100b883a 	mov	r5,r2
    2e18:	01003fc4 	movi	r4,255
    2e1c:	000a2600 	call	a260 <OSTaskQuery>
    2e20:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    2e24:	e0bffe83 	ldbu	r2,-6(fp)
    2e28:	10803fcc 	andi	r2,r2,255
    2e2c:	10001e1e 	bne	r2,zero,2ea8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
    2e30:	e0bfee83 	ldbu	r2,-70(fp)
    2e34:	10803fcc 	andi	r2,r2,255
    2e38:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
    2e3c:	d0a6ff17 	ldw	r2,-25604(gp)
    2e40:	e0fffd04 	addi	r3,fp,-12
    2e44:	180b883a 	mov	r5,r3
    2e48:	1009883a 	mov	r4,r2
    2e4c:	0008a780 	call	8a78 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
    2e50:	e0bffe43 	ldbu	r2,-7(fp)
    2e54:	10803fcc 	andi	r2,r2,255
    2e58:	10000726 	beq	r2,zero,2e78 <__env_lock+0x7c>
    2e5c:	d0a00b17 	ldw	r2,-32724(gp)
    2e60:	e0ffe117 	ldw	r3,-124(fp)
    2e64:	1880041e 	bne	r3,r2,2e78 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
    2e68:	d0a6fe17 	ldw	r2,-25608(gp)
    2e6c:	10800044 	addi	r2,r2,1
    2e70:	d0a6fe15 	stw	r2,-25608(gp)
    2e74:	00000a06 	br	2ea0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
    2e78:	d0a6ff17 	ldw	r2,-25604(gp)
    2e7c:	e0fffe84 	addi	r3,fp,-6
    2e80:	180d883a 	mov	r6,r3
    2e84:	000b883a 	mov	r5,zero
    2e88:	1009883a 	mov	r4,r2
    2e8c:	00085f00 	call	85f0 <OSSemPend>
    locks  = 1;
    2e90:	00800044 	movi	r2,1
    2e94:	d0a6fe15 	stw	r2,-25608(gp)
    lockid = id;
    2e98:	e0bfe117 	ldw	r2,-124(fp)
    2e9c:	d0a00b15 	stw	r2,-32724(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    2ea0:	0001883a 	nop
    2ea4:	00000106 	br	2eac <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    2ea8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    2eac:	e037883a 	mov	sp,fp
    2eb0:	dfc00117 	ldw	ra,4(sp)
    2eb4:	df000017 	ldw	fp,0(sp)
    2eb8:	dec00204 	addi	sp,sp,8
    2ebc:	f800283a 	ret

00002ec0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
    2ec0:	defffd04 	addi	sp,sp,-12
    2ec4:	dfc00215 	stw	ra,8(sp)
    2ec8:	df000115 	stw	fp,4(sp)
    2ecc:	df000104 	addi	fp,sp,4
    2ed0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    2ed4:	d0a6fe17 	ldw	r2,-25608(gp)
    2ed8:	10000b26 	beq	r2,zero,2f08 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
    2edc:	d0a6fe17 	ldw	r2,-25608(gp)
    2ee0:	10bfffc4 	addi	r2,r2,-1
    2ee4:	d0a6fe15 	stw	r2,-25608(gp)
    2ee8:	d0a6fe17 	ldw	r2,-25608(gp)
    2eec:	1000071e 	bne	r2,zero,2f0c <__env_unlock+0x4c>
  {
    lockid = -1;
    2ef0:	00bfffc4 	movi	r2,-1
    2ef4:	d0a00b15 	stw	r2,-32724(gp)
    OSSemPost( alt_envsem );
    2ef8:	d0a6ff17 	ldw	r2,-25604(gp)
    2efc:	1009883a 	mov	r4,r2
    2f00:	00089680 	call	8968 <OSSemPost>
    2f04:	00000106 	br	2f0c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
    2f08:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    2f0c:	e037883a 	mov	sp,fp
    2f10:	dfc00117 	ldw	ra,4(sp)
    2f14:	df000017 	ldw	fp,0(sp)
    2f18:	dec00204 	addi	sp,sp,8
    2f1c:	f800283a 	ret

00002f20 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
    2f20:	deffdb04 	addi	sp,sp,-148
    2f24:	dfc02415 	stw	ra,144(sp)
    2f28:	df002315 	stw	fp,140(sp)
    2f2c:	df002304 	addi	fp,sp,140
    2f30:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2f34:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
    2f38:	d0a70243 	ldbu	r2,-25591(gp)
    2f3c:	10803fcc 	andi	r2,r2,255
    2f40:	10800060 	cmpeqi	r2,r2,1
    2f44:	10003626 	beq	r2,zero,3020 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
    2f48:	e0bfe204 	addi	r2,fp,-120
    2f4c:	100b883a 	mov	r5,r2
    2f50:	01003fc4 	movi	r4,255
    2f54:	000a2600 	call	a260 <OSTaskQuery>
    2f58:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
    2f5c:	e0bffe83 	ldbu	r2,-6(fp)
    2f60:	10803fcc 	andi	r2,r2,255
    2f64:	1000301e 	bne	r2,zero,3028 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
    2f68:	e0bfee83 	ldbu	r2,-70(fp)
    2f6c:	10803fcc 	andi	r2,r2,255
    2f70:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
    2f74:	d0a70117 	ldw	r2,-25596(gp)
    2f78:	e0fffd04 	addi	r3,fp,-12
    2f7c:	180b883a 	mov	r5,r3
    2f80:	1009883a 	mov	r4,r2
    2f84:	0008a780 	call	8a78 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2f88:	0005303a 	rdctl	r2,status
    2f8c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2f90:	e0ffe117 	ldw	r3,-124(fp)
    2f94:	00bfff84 	movi	r2,-2
    2f98:	1884703a 	and	r2,r3,r2
    2f9c:	1001703a 	wrctl	status,r2
  
  return context;
    2fa0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
    2fa4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
    2fa8:	e0bffd0b 	ldhu	r2,-12(fp)
    2fac:	10bfffcc 	andi	r2,r2,65535
    2fb0:	10000b1e 	bne	r2,zero,2fe0 <__malloc_lock+0xc0>
    2fb4:	d0a00c17 	ldw	r2,-32720(gp)
    2fb8:	e0ffde17 	ldw	r3,-136(fp)
    2fbc:	1880081e 	bne	r3,r2,2fe0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
    2fc0:	d0a70017 	ldw	r2,-25600(gp)
    2fc4:	10800044 	addi	r2,r2,1
    2fc8:	d0a70015 	stw	r2,-25600(gp)
    2fcc:	e0bfdd17 	ldw	r2,-140(fp)
    2fd0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2fd4:	e0bfdf17 	ldw	r2,-132(fp)
    2fd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    2fdc:	00000e06 	br	3018 <__malloc_lock+0xf8>
    2fe0:	e0bfdd17 	ldw	r2,-140(fp)
    2fe4:	e0bfe015 	stw	r2,-128(fp)
    2fe8:	e0bfe017 	ldw	r2,-128(fp)
    2fec:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
    2ff0:	d0a70117 	ldw	r2,-25596(gp)
    2ff4:	e0fffe84 	addi	r3,fp,-6
    2ff8:	180d883a 	mov	r6,r3
    2ffc:	000b883a 	mov	r5,zero
    3000:	1009883a 	mov	r4,r2
    3004:	00085f00 	call	85f0 <OSSemPend>
    locks  = 1;
    3008:	00800044 	movi	r2,1
    300c:	d0a70015 	stw	r2,-25600(gp)
    lockid = id;
    3010:	e0bfde17 	ldw	r2,-136(fp)
    3014:	d0a00c15 	stw	r2,-32720(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
    3018:	0001883a 	nop
    301c:	00000306 	br	302c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
    3020:	0001883a 	nop
    3024:	00000106 	br	302c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
    3028:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
    302c:	e037883a 	mov	sp,fp
    3030:	dfc00117 	ldw	ra,4(sp)
    3034:	df000017 	ldw	fp,0(sp)
    3038:	dec00204 	addi	sp,sp,8
    303c:	f800283a 	ret

00003040 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    3040:	defff804 	addi	sp,sp,-32
    3044:	dfc00715 	stw	ra,28(sp)
    3048:	df000615 	stw	fp,24(sp)
    304c:	df000604 	addi	fp,sp,24
    3050:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3054:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
    3058:	d0a70243 	ldbu	r2,-25591(gp)
    305c:	10803fcc 	andi	r2,r2,255
    3060:	10800060 	cmpeqi	r2,r2,1
    3064:	10002326 	beq	r2,zero,30f4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3068:	0005303a 	rdctl	r2,status
    306c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3070:	e0fffe17 	ldw	r3,-8(fp)
    3074:	00bfff84 	movi	r2,-2
    3078:	1884703a 	and	r2,r3,r2
    307c:	1001703a 	wrctl	status,r2
  
  return context;
    3080:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
    3084:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
    3088:	d0a70017 	ldw	r2,-25600(gp)
    308c:	1000051e 	bne	r2,zero,30a4 <__malloc_unlock+0x64>
    3090:	e0bffa17 	ldw	r2,-24(fp)
    3094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3098:	e0bffb17 	ldw	r2,-20(fp)
    309c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
    30a0:	00001506 	br	30f8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
    30a4:	d0a70017 	ldw	r2,-25600(gp)
    30a8:	10bfffc4 	addi	r2,r2,-1
    30ac:	d0a70015 	stw	r2,-25600(gp)
    30b0:	d0a70017 	ldw	r2,-25600(gp)
    30b4:	10000a1e 	bne	r2,zero,30e0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
    30b8:	00bfffc4 	movi	r2,-1
    30bc:	d0a00c15 	stw	r2,-32720(gp)
    30c0:	e0bffa17 	ldw	r2,-24(fp)
    30c4:	e0bffc15 	stw	r2,-16(fp)
    30c8:	e0bffc17 	ldw	r2,-16(fp)
    30cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
    30d0:	d0a70117 	ldw	r2,-25596(gp)
    30d4:	1009883a 	mov	r4,r2
    30d8:	00089680 	call	8968 <OSSemPost>
    30dc:	00000606 	br	30f8 <__malloc_unlock+0xb8>
    30e0:	e0bffa17 	ldw	r2,-24(fp)
    30e4:	e0bffd15 	stw	r2,-12(fp)
    30e8:	e0bffd17 	ldw	r2,-12(fp)
    30ec:	1001703a 	wrctl	status,r2
    30f0:	00000106 	br	30f8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
    30f4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
    30f8:	e037883a 	mov	sp,fp
    30fc:	dfc00117 	ldw	ra,4(sp)
    3100:	df000017 	ldw	fp,0(sp)
    3104:	dec00204 	addi	sp,sp,8
    3108:	f800283a 	ret

0000310c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    310c:	defff704 	addi	sp,sp,-36
    3110:	dfc00815 	stw	ra,32(sp)
    3114:	df000715 	stw	fp,28(sp)
    3118:	df000704 	addi	fp,sp,28
    311c:	e13ffd15 	stw	r4,-12(fp)
    3120:	e17ffe15 	stw	r5,-8(fp)
    3124:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3128:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    312c:	e0bfff17 	ldw	r2,-4(fp)
    3130:	1000021e 	bne	r2,zero,313c <OSEventNameGet+0x30>
        return (0);
    3134:	0005883a 	mov	r2,zero
    3138:	00003706 	br	3218 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    313c:	e0bffd17 	ldw	r2,-12(fp)
    3140:	1000051e 	bne	r2,zero,3158 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
    3144:	e0bfff17 	ldw	r2,-4(fp)
    3148:	00c00104 	movi	r3,4
    314c:	10c00005 	stb	r3,0(r2)
        return (0);
    3150:	0005883a 	mov	r2,zero
    3154:	00003006 	br	3218 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3158:	e0bffe17 	ldw	r2,-8(fp)
    315c:	1000051e 	bne	r2,zero,3174 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3160:	e0bfff17 	ldw	r2,-4(fp)
    3164:	00c00304 	movi	r3,12
    3168:	10c00005 	stb	r3,0(r2)
        return (0);
    316c:	0005883a 	mov	r2,zero
    3170:	00002906 	br	3218 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3174:	d0a71003 	ldbu	r2,-25536(gp)
    3178:	10803fcc 	andi	r2,r2,255
    317c:	10000526 	beq	r2,zero,3194 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
    3180:	e0bfff17 	ldw	r2,-4(fp)
    3184:	00c00444 	movi	r3,17
    3188:	10c00005 	stb	r3,0(r2)
        return (0);
    318c:	0005883a 	mov	r2,zero
    3190:	00002106 	br	3218 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
    3194:	e0bffd17 	ldw	r2,-12(fp)
    3198:	10800003 	ldbu	r2,0(r2)
    319c:	10803fcc 	andi	r2,r2,255
    31a0:	10bfffc4 	addi	r2,r2,-1
    31a4:	10800128 	cmpgeui	r2,r2,4
    31a8:	10000526 	beq	r2,zero,31c0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    31ac:	e0bfff17 	ldw	r2,-4(fp)
    31b0:	00c00044 	movi	r3,1
    31b4:	10c00005 	stb	r3,0(r2)
             return (0);
    31b8:	0005883a 	mov	r2,zero
    31bc:	00001606 	br	3218 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    31c0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    31c4:	0005303a 	rdctl	r2,status
    31c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    31cc:	e0fffb17 	ldw	r3,-20(fp)
    31d0:	00bfff84 	movi	r2,-2
    31d4:	1884703a 	and	r2,r3,r2
    31d8:	1001703a 	wrctl	status,r2
  
  return context;
    31dc:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    31e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    31e4:	e0bffd17 	ldw	r2,-12(fp)
    31e8:	10800384 	addi	r2,r2,14
    31ec:	100b883a 	mov	r5,r2
    31f0:	e13ffe17 	ldw	r4,-8(fp)
    31f4:	0004b900 	call	4b90 <OS_StrCopy>
    31f8:	e0bffa05 	stb	r2,-24(fp)
    31fc:	e0bff917 	ldw	r2,-28(fp)
    3200:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3204:	e0bffc17 	ldw	r2,-16(fp)
    3208:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    320c:	e0bfff17 	ldw	r2,-4(fp)
    3210:	10000005 	stb	zero,0(r2)
    return (len);
    3214:	e0bffa03 	ldbu	r2,-24(fp)
}
    3218:	e037883a 	mov	sp,fp
    321c:	dfc00117 	ldw	ra,4(sp)
    3220:	df000017 	ldw	fp,0(sp)
    3224:	dec00204 	addi	sp,sp,8
    3228:	f800283a 	ret

0000322c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    322c:	defff604 	addi	sp,sp,-40
    3230:	dfc00915 	stw	ra,36(sp)
    3234:	df000815 	stw	fp,32(sp)
    3238:	df000804 	addi	fp,sp,32
    323c:	e13ffd15 	stw	r4,-12(fp)
    3240:	e17ffe15 	stw	r5,-8(fp)
    3244:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3248:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    324c:	e0bfff17 	ldw	r2,-4(fp)
    3250:	10004026 	beq	r2,zero,3354 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
    3254:	e0bffd17 	ldw	r2,-12(fp)
    3258:	1000041e 	bne	r2,zero,326c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    325c:	e0bfff17 	ldw	r2,-4(fp)
    3260:	00c00104 	movi	r3,4
    3264:	10c00005 	stb	r3,0(r2)
        return;
    3268:	00003b06 	br	3358 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    326c:	e0bffe17 	ldw	r2,-8(fp)
    3270:	1000041e 	bne	r2,zero,3284 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    3274:	e0bfff17 	ldw	r2,-4(fp)
    3278:	00c00304 	movi	r3,12
    327c:	10c00005 	stb	r3,0(r2)
        return;
    3280:	00003506 	br	3358 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3284:	d0a71003 	ldbu	r2,-25536(gp)
    3288:	10803fcc 	andi	r2,r2,255
    328c:	10000426 	beq	r2,zero,32a0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3290:	e0bfff17 	ldw	r2,-4(fp)
    3294:	00c00484 	movi	r3,18
    3298:	10c00005 	stb	r3,0(r2)
        return;
    329c:	00002e06 	br	3358 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
    32a0:	e0bffd17 	ldw	r2,-12(fp)
    32a4:	10800003 	ldbu	r2,0(r2)
    32a8:	10803fcc 	andi	r2,r2,255
    32ac:	10bfffc4 	addi	r2,r2,-1
    32b0:	10800128 	cmpgeui	r2,r2,4
    32b4:	10000426 	beq	r2,zero,32c8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    32b8:	e0bfff17 	ldw	r2,-4(fp)
    32bc:	00c00044 	movi	r3,1
    32c0:	10c00005 	stb	r3,0(r2)
             return;
    32c4:	00002406 	br	3358 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
    32c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    32cc:	0005303a 	rdctl	r2,status
    32d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    32d4:	e0fffc17 	ldw	r3,-16(fp)
    32d8:	00bfff84 	movi	r2,-2
    32dc:	1884703a 	and	r2,r3,r2
    32e0:	1001703a 	wrctl	status,r2
  
  return context;
    32e4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    32e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    32ec:	e13ffe17 	ldw	r4,-8(fp)
    32f0:	0004c040 	call	4c04 <OS_StrLen>
    32f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    32f8:	e0bffa03 	ldbu	r2,-24(fp)
    32fc:	10800830 	cmpltui	r2,r2,32
    3300:	1000081e 	bne	r2,zero,3324 <OSEventNameSet+0xf8>
    3304:	e0bff817 	ldw	r2,-32(fp)
    3308:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    330c:	e0bff917 	ldw	r2,-28(fp)
    3310:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3314:	e0bfff17 	ldw	r2,-4(fp)
    3318:	00c002c4 	movi	r3,11
    331c:	10c00005 	stb	r3,0(r2)
        return;
    3320:	00000d06 	br	3358 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3324:	e0bffd17 	ldw	r2,-12(fp)
    3328:	10800384 	addi	r2,r2,14
    332c:	e17ffe17 	ldw	r5,-8(fp)
    3330:	1009883a 	mov	r4,r2
    3334:	0004b900 	call	4b90 <OS_StrCopy>
    3338:	e0bff817 	ldw	r2,-32(fp)
    333c:	e0bffb15 	stw	r2,-20(fp)
    3340:	e0bffb17 	ldw	r2,-20(fp)
    3344:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	10000005 	stb	zero,0(r2)
    3350:	00000106 	br	3358 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    3354:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    3358:	e037883a 	mov	sp,fp
    335c:	dfc00117 	ldw	ra,4(sp)
    3360:	df000017 	ldw	fp,0(sp)
    3364:	dec00204 	addi	sp,sp,8
    3368:	f800283a 	ret

0000336c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
    336c:	deffed04 	addi	sp,sp,-76
    3370:	dfc01215 	stw	ra,72(sp)
    3374:	df001115 	stw	fp,68(sp)
    3378:	df001104 	addi	fp,sp,68
    337c:	e13ffc15 	stw	r4,-16(fp)
    3380:	e17ffd15 	stw	r5,-12(fp)
    3384:	e1bffe15 	stw	r6,-8(fp)
    3388:	3805883a 	mov	r2,r7
    338c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
    3390:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
    3394:	e0800217 	ldw	r2,8(fp)
    3398:	1000021e 	bne	r2,zero,33a4 <OSEventPendMulti+0x38>
        return (0);
    339c:	0005883a 	mov	r2,zero
    33a0:	00017106 	br	3968 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
    33a4:	e0bffc17 	ldw	r2,-16(fp)
    33a8:	1000051e 	bne	r2,zero,33c0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
    33ac:	e0800217 	ldw	r2,8(fp)
    33b0:	00c00104 	movi	r3,4
    33b4:	10c00005 	stb	r3,0(r2)
        return (0);
    33b8:	0005883a 	mov	r2,zero
    33bc:	00016a06 	br	3968 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
    33c0:	e0bffd17 	ldw	r2,-12(fp)
    33c4:	1000051e 	bne	r2,zero,33dc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
    33c8:	e0800217 	ldw	r2,8(fp)
    33cc:	00c00104 	movi	r3,4
    33d0:	10c00005 	stb	r3,0(r2)
        return (0);
    33d4:	0005883a 	mov	r2,zero
    33d8:	00016306 	br	3968 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
    33dc:	e0bffe17 	ldw	r2,-8(fp)
    33e0:	1000051e 	bne	r2,zero,33f8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
    33e4:	e0800217 	ldw	r2,8(fp)
    33e8:	00c00104 	movi	r3,4
    33ec:	10c00005 	stb	r3,0(r2)
        return (0);
    33f0:	0005883a 	mov	r2,zero
    33f4:	00015c06 	br	3968 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
    33f8:	e0bffd17 	ldw	r2,-12(fp)
    33fc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
    3400:	e0bffc17 	ldw	r2,-16(fp)
    3404:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
    3408:	e0bfef17 	ldw	r2,-68(fp)
    340c:	10800017 	ldw	r2,0(r2)
    3410:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
    3414:	00001906 	br	347c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
    3418:	e0bff017 	ldw	r2,-64(fp)
    341c:	10800003 	ldbu	r2,0(r2)
    3420:	10803fcc 	andi	r2,r2,255
    3424:	10c000a0 	cmpeqi	r3,r2,2
    3428:	1800091e 	bne	r3,zero,3450 <OSEventPendMulti+0xe4>
    342c:	10c000e0 	cmpeqi	r3,r2,3
    3430:	1800091e 	bne	r3,zero,3458 <OSEventPendMulti+0xec>
    3434:	10800060 	cmpeqi	r2,r2,1
    3438:	1000091e 	bne	r2,zero,3460 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
    343c:	e0800217 	ldw	r2,8(fp)
    3440:	00c00044 	movi	r3,1
    3444:	10c00005 	stb	r3,0(r2)
                 return (0);
    3448:	0005883a 	mov	r2,zero
    344c:	00014606 	br	3968 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
    3450:	0001883a 	nop
    3454:	00000306 	br	3464 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
    3458:	0001883a 	nop
    345c:	00000106 	br	3464 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
    3460:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
    3464:	e0bfef17 	ldw	r2,-68(fp)
    3468:	10800104 	addi	r2,r2,4
    346c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3470:	e0bfef17 	ldw	r2,-68(fp)
    3474:	10800017 	ldw	r2,0(r2)
    3478:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
    347c:	e0bff017 	ldw	r2,-64(fp)
    3480:	103fe51e 	bne	r2,zero,3418 <__alt_data_end+0xfffead78>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
    3484:	d0a71003 	ldbu	r2,-25536(gp)
    3488:	10803fcc 	andi	r2,r2,255
    348c:	10000526 	beq	r2,zero,34a4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
    3490:	e0800217 	ldw	r2,8(fp)
    3494:	00c00084 	movi	r3,2
    3498:	10c00005 	stb	r3,0(r2)
        return (0);
    349c:	0005883a 	mov	r2,zero
    34a0:	00013106 	br	3968 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
    34a4:	d0a70203 	ldbu	r2,-25592(gp)
    34a8:	10803fcc 	andi	r2,r2,255
    34ac:	10000526 	beq	r2,zero,34c4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
    34b0:	e0800217 	ldw	r2,8(fp)
    34b4:	00c00344 	movi	r3,13
    34b8:	10c00005 	stb	r3,0(r2)
        return (0);
    34bc:	0005883a 	mov	r2,zero
    34c0:	00012906 	br	3968 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    34c4:	0005303a 	rdctl	r2,status
    34c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    34cc:	e0fffb17 	ldw	r3,-20(fp)
    34d0:	00bfff84 	movi	r2,-2
    34d4:	1884703a 	and	r2,r3,r2
    34d8:	1001703a 	wrctl	status,r2
  
  return context;
    34dc:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
    34e0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
    34e4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
    34e8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
    34ec:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
    34f0:	e0bffc17 	ldw	r2,-16(fp)
    34f4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
    34f8:	e0bfef17 	ldw	r2,-68(fp)
    34fc:	10800017 	ldw	r2,0(r2)
    3500:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    3504:	00008106 	br	370c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
    3508:	e0bff017 	ldw	r2,-64(fp)
    350c:	10800003 	ldbu	r2,0(r2)
    3510:	10803fcc 	andi	r2,r2,255
    3514:	10c000a0 	cmpeqi	r3,r2,2
    3518:	18003c1e 	bne	r3,zero,360c <OSEventPendMulti+0x2a0>
    351c:	10c000e0 	cmpeqi	r3,r2,3
    3520:	1800031e 	bne	r3,zero,3530 <OSEventPendMulti+0x1c4>
    3524:	10800060 	cmpeqi	r2,r2,1
    3528:	10001e1e 	bne	r2,zero,35a4 <OSEventPendMulti+0x238>
    352c:	00006606 	br	36c8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
    3530:	e0bff017 	ldw	r2,-64(fp)
    3534:	1080020b 	ldhu	r2,8(r2)
    3538:	10bfffcc 	andi	r2,r2,65535
    353c:	10001526 	beq	r2,zero,3594 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
    3540:	e0bff017 	ldw	r2,-64(fp)
    3544:	1080020b 	ldhu	r2,8(r2)
    3548:	10bfffc4 	addi	r2,r2,-1
    354c:	1007883a 	mov	r3,r2
    3550:	e0bff017 	ldw	r2,-64(fp)
    3554:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
    3558:	e0bffd17 	ldw	r2,-12(fp)
    355c:	10c00104 	addi	r3,r2,4
    3560:	e0fffd15 	stw	r3,-12(fp)
    3564:	e0fff017 	ldw	r3,-64(fp)
    3568:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
    356c:	00800044 	movi	r2,1
    3570:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
    3574:	e0bffe17 	ldw	r2,-8(fp)
    3578:	10c00104 	addi	r3,r2,4
    357c:	e0fffe15 	stw	r3,-8(fp)
    3580:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
    3584:	e0bff18b 	ldhu	r2,-58(fp)
    3588:	10800044 	addi	r2,r2,1
    358c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
    3590:	00005806 	br	36f4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
    3594:	e0bff203 	ldbu	r2,-56(fp)
    3598:	10800054 	ori	r2,r2,1
    359c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    35a0:	00005406 	br	36f4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
    35a4:	e0bff017 	ldw	r2,-64(fp)
    35a8:	10800117 	ldw	r2,4(r2)
    35ac:	10001326 	beq	r2,zero,35fc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
    35b0:	e0bffe17 	ldw	r2,-8(fp)
    35b4:	10c00104 	addi	r3,r2,4
    35b8:	e0fffe15 	stw	r3,-8(fp)
    35bc:	e0fff017 	ldw	r3,-64(fp)
    35c0:	18c00117 	ldw	r3,4(r3)
    35c4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
    35c8:	e0bff017 	ldw	r2,-64(fp)
    35cc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
    35d0:	e0bffd17 	ldw	r2,-12(fp)
    35d4:	10c00104 	addi	r3,r2,4
    35d8:	e0fffd15 	stw	r3,-12(fp)
    35dc:	e0fff017 	ldw	r3,-64(fp)
    35e0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
    35e4:	00800044 	movi	r2,1
    35e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    35ec:	e0bff18b 	ldhu	r2,-58(fp)
    35f0:	10800044 	addi	r2,r2,1
    35f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
    35f8:	00003e06 	br	36f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
    35fc:	e0bff203 	ldbu	r2,-56(fp)
    3600:	10800094 	ori	r2,r2,2
    3604:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    3608:	00003a06 	br	36f4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
    360c:	e0bff017 	ldw	r2,-64(fp)
    3610:	10800117 	ldw	r2,4(r2)
    3614:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
    3618:	e0bff517 	ldw	r2,-44(fp)
    361c:	1080058b 	ldhu	r2,22(r2)
    3620:	10bfffcc 	andi	r2,r2,65535
    3624:	10002426 	beq	r2,zero,36b8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
    3628:	e0bffe17 	ldw	r2,-8(fp)
    362c:	10c00104 	addi	r3,r2,4
    3630:	e0fffe15 	stw	r3,-8(fp)
    3634:	e0fff517 	ldw	r3,-44(fp)
    3638:	18c00417 	ldw	r3,16(r3)
    363c:	19400104 	addi	r5,r3,4
    3640:	e13ff517 	ldw	r4,-44(fp)
    3644:	21400415 	stw	r5,16(r4)
    3648:	18c00017 	ldw	r3,0(r3)
    364c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
    3650:	e0bff517 	ldw	r2,-44(fp)
    3654:	10c00417 	ldw	r3,16(r2)
    3658:	e0bff517 	ldw	r2,-44(fp)
    365c:	10800217 	ldw	r2,8(r2)
    3660:	1880041e 	bne	r3,r2,3674 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
    3664:	e0bff517 	ldw	r2,-44(fp)
    3668:	10c00117 	ldw	r3,4(r2)
    366c:	e0bff517 	ldw	r2,-44(fp)
    3670:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
    3674:	e0bff517 	ldw	r2,-44(fp)
    3678:	1080058b 	ldhu	r2,22(r2)
    367c:	10bfffc4 	addi	r2,r2,-1
    3680:	1007883a 	mov	r3,r2
    3684:	e0bff517 	ldw	r2,-44(fp)
    3688:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
    368c:	e0bffd17 	ldw	r2,-12(fp)
    3690:	10c00104 	addi	r3,r2,4
    3694:	e0fffd15 	stw	r3,-12(fp)
    3698:	e0fff017 	ldw	r3,-64(fp)
    369c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
    36a0:	00800044 	movi	r2,1
    36a4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
    36a8:	e0bff18b 	ldhu	r2,-58(fp)
    36ac:	10800044 	addi	r2,r2,1
    36b0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
    36b4:	00000f06 	br	36f4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
    36b8:	e0bff203 	ldbu	r2,-56(fp)
    36bc:	10800114 	ori	r2,r2,4
    36c0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
    36c4:	00000b06 	br	36f4 <OSEventPendMulti+0x388>
    36c8:	e0bff317 	ldw	r2,-52(fp)
    36cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    36d0:	e0bff417 	ldw	r2,-48(fp)
    36d4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
    36d8:	e0bffd17 	ldw	r2,-12(fp)
    36dc:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
    36e0:	e0800217 	ldw	r2,8(fp)
    36e4:	00c00044 	movi	r3,1
    36e8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
    36ec:	e0bff18b 	ldhu	r2,-58(fp)
    36f0:	00009d06 	br	3968 <OSEventPendMulti+0x5fc>
        }
        pevents++;
    36f4:	e0bfef17 	ldw	r2,-68(fp)
    36f8:	10800104 	addi	r2,r2,4
    36fc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
    3700:	e0bfef17 	ldw	r2,-68(fp)
    3704:	10800017 	ldw	r2,0(r2)
    3708:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
    370c:	e0bff017 	ldw	r2,-64(fp)
    3710:	103f7d1e 	bne	r2,zero,3508 <__alt_data_end+0xfffeae68>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
    3714:	e0bff103 	ldbu	r2,-60(fp)
    3718:	10800058 	cmpnei	r2,r2,1
    371c:	10000a1e 	bne	r2,zero,3748 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
    3720:	e0bffd17 	ldw	r2,-12(fp)
    3724:	10000015 	stw	zero,0(r2)
    3728:	e0bff317 	ldw	r2,-52(fp)
    372c:	e0bff615 	stw	r2,-40(fp)
    3730:	e0bff617 	ldw	r2,-40(fp)
    3734:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
    3738:	e0800217 	ldw	r2,8(fp)
    373c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
    3740:	e0bff18b 	ldhu	r2,-58(fp)
    3744:	00008806 	br	3968 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
    3748:	d0a71117 	ldw	r2,-25532(gp)
    374c:	d0e71117 	ldw	r3,-25532(gp)
    3750:	19000c03 	ldbu	r4,48(r3)
    3754:	e0fff203 	ldbu	r3,-56(fp)
    3758:	20c6b03a 	or	r3,r4,r3
    375c:	1809883a 	mov	r4,r3
    3760:	00ffe004 	movi	r3,-128
    3764:	20c6b03a 	or	r3,r4,r3
    3768:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    376c:	d0a71117 	ldw	r2,-25532(gp)
    3770:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
    3774:	d0a71117 	ldw	r2,-25532(gp)
    3778:	e0ffff0b 	ldhu	r3,-4(fp)
    377c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
    3780:	e13ffc17 	ldw	r4,-16(fp)
    3784:	00042a80 	call	42a8 <OS_EventTaskWaitMulti>
    3788:	e0bff317 	ldw	r2,-52(fp)
    378c:	e0bff915 	stw	r2,-28(fp)
    3790:	e0bff917 	ldw	r2,-28(fp)
    3794:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
    3798:	0004a4c0 	call	4a4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    379c:	0005303a 	rdctl	r2,status
    37a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    37a4:	e0fff717 	ldw	r3,-36(fp)
    37a8:	00bfff84 	movi	r2,-2
    37ac:	1884703a 	and	r2,r3,r2
    37b0:	1001703a 	wrctl	status,r2
  
  return context;
    37b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
    37b8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
    37bc:	d0a71117 	ldw	r2,-25532(gp)
    37c0:	10800c43 	ldbu	r2,49(r2)
    37c4:	10803fcc 	andi	r2,r2,255
    37c8:	10000226 	beq	r2,zero,37d4 <OSEventPendMulti+0x468>
    37cc:	108000a0 	cmpeqi	r2,r2,2
    37d0:	10001826 	beq	r2,zero,3834 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
    37d4:	d0a71117 	ldw	r2,-25532(gp)
    37d8:	10800717 	ldw	r2,28(r2)
    37dc:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
    37e0:	e0bff017 	ldw	r2,-64(fp)
    37e4:	10000b26 	beq	r2,zero,3814 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
    37e8:	e0bffd17 	ldw	r2,-12(fp)
    37ec:	10c00104 	addi	r3,r2,4
    37f0:	e0fffd15 	stw	r3,-12(fp)
    37f4:	e0fff017 	ldw	r3,-64(fp)
    37f8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
    37fc:	e0bffd17 	ldw	r2,-12(fp)
    3800:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
    3804:	e0bff18b 	ldhu	r2,-58(fp)
    3808:	10800044 	addi	r2,r2,1
    380c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
    3810:	00000d06 	br	3848 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
    3814:	d0a71117 	ldw	r2,-25532(gp)
    3818:	00c00044 	movi	r3,1
    381c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3820:	d0a71117 	ldw	r2,-25532(gp)
    3824:	e17ffc17 	ldw	r5,-16(fp)
    3828:	1009883a 	mov	r4,r2
    382c:	00044b00 	call	44b0 <OS_EventTaskRemoveMulti>
             }
			 break;
    3830:	00000506 	br	3848 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
    3834:	d0a71117 	ldw	r2,-25532(gp)
    3838:	e17ffc17 	ldw	r5,-16(fp)
    383c:	1009883a 	mov	r4,r2
    3840:	00044b00 	call	44b0 <OS_EventTaskRemoveMulti>
             break;
    3844:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
    3848:	d0a71117 	ldw	r2,-25532(gp)
    384c:	10800c43 	ldbu	r2,49(r2)
    3850:	10803fcc 	andi	r2,r2,255
    3854:	10000326 	beq	r2,zero,3864 <OSEventPendMulti+0x4f8>
    3858:	108000a0 	cmpeqi	r2,r2,2
    385c:	1000231e 	bne	r2,zero,38ec <OSEventPendMulti+0x580>
    3860:	00002a06 	br	390c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
    3864:	e0bff017 	ldw	r2,-64(fp)
    3868:	10800003 	ldbu	r2,0(r2)
    386c:	10803fcc 	andi	r2,r2,255
    3870:	0080100e 	bge	zero,r2,38b4 <OSEventPendMulti+0x548>
    3874:	10c000d0 	cmplti	r3,r2,3
    3878:	1800071e 	bne	r3,zero,3898 <OSEventPendMulti+0x52c>
    387c:	108000e0 	cmpeqi	r2,r2,3
    3880:	10000c26 	beq	r2,zero,38b4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
    3884:	e0bffe17 	ldw	r2,-8(fp)
    3888:	10c00104 	addi	r3,r2,4
    388c:	e0fffe15 	stw	r3,-8(fp)
    3890:	10000015 	stw	zero,0(r2)
                      break;
    3894:	00001206 	br	38e0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
    3898:	e0bffe17 	ldw	r2,-8(fp)
    389c:	10c00104 	addi	r3,r2,4
    38a0:	e0fffe15 	stw	r3,-8(fp)
    38a4:	d0e71117 	ldw	r3,-25532(gp)
    38a8:	18c00917 	ldw	r3,36(r3)
    38ac:	10c00015 	stw	r3,0(r2)
                      break;
    38b0:	00000b06 	br	38e0 <OSEventPendMulti+0x574>
    38b4:	e0bff317 	ldw	r2,-52(fp)
    38b8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    38bc:	e0bff817 	ldw	r2,-32(fp)
    38c0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
    38c4:	e0bffd17 	ldw	r2,-12(fp)
    38c8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
    38cc:	e0800217 	ldw	r2,8(fp)
    38d0:	00c00044 	movi	r3,1
    38d4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
    38d8:	e0bff18b 	ldhu	r2,-58(fp)
    38dc:	00002206 	br	3968 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
    38e0:	e0800217 	ldw	r2,8(fp)
    38e4:	10000005 	stb	zero,0(r2)
             break;
    38e8:	00001006 	br	392c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
    38ec:	e0bffe17 	ldw	r2,-8(fp)
    38f0:	10c00104 	addi	r3,r2,4
    38f4:	e0fffe15 	stw	r3,-8(fp)
    38f8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
    38fc:	e0800217 	ldw	r2,8(fp)
    3900:	00c00384 	movi	r3,14
    3904:	10c00005 	stb	r3,0(r2)
             break;
    3908:	00000806 	br	392c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
    390c:	e0bffe17 	ldw	r2,-8(fp)
    3910:	10c00104 	addi	r3,r2,4
    3914:	e0fffe15 	stw	r3,-8(fp)
    3918:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
    391c:	e0800217 	ldw	r2,8(fp)
    3920:	00c00284 	movi	r3,10
    3924:	10c00005 	stb	r3,0(r2)
             break;
    3928:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
    392c:	d0a71117 	ldw	r2,-25532(gp)
    3930:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
    3934:	d0a71117 	ldw	r2,-25532(gp)
    3938:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
    393c:	d0a71117 	ldw	r2,-25532(gp)
    3940:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    3944:	d0a71117 	ldw	r2,-25532(gp)
    3948:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    394c:	d0a71117 	ldw	r2,-25532(gp)
    3950:	10000915 	stw	zero,36(r2)
    3954:	e0bff317 	ldw	r2,-52(fp)
    3958:	e0bffa15 	stw	r2,-24(fp)
    395c:	e0bffa17 	ldw	r2,-24(fp)
    3960:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    3964:	e0bff18b 	ldhu	r2,-58(fp)
}
    3968:	e037883a 	mov	sp,fp
    396c:	dfc00117 	ldw	ra,4(sp)
    3970:	df000017 	ldw	fp,0(sp)
    3974:	dec00204 	addi	sp,sp,8
    3978:	f800283a 	ret

0000397c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    397c:	defffe04 	addi	sp,sp,-8
    3980:	dfc00115 	stw	ra,4(sp)
    3984:	df000015 	stw	fp,0(sp)
    3988:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    398c:	000c6280 	call	c628 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    3990:	00046f80 	call	46f8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    3994:	00047400 	call	4740 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    3998:	00048ac0 	call	48ac <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    399c:	00046180 	call	4618 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    39a0:	000674c0 	call	674c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    39a4:	000704c0 	call	704c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    39a8:	00081800 	call	8180 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    39ac:	00047ac0 	call	47ac <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    39b0:	000482c0 	call	482c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    39b4:	000c6480 	call	c648 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    39b8:	00051200 	call	5120 <OSDebugInit>
#endif
}
    39bc:	0001883a 	nop
    39c0:	e037883a 	mov	sp,fp
    39c4:	dfc00117 	ldw	ra,4(sp)
    39c8:	df000017 	ldw	fp,0(sp)
    39cc:	dec00204 	addi	sp,sp,8
    39d0:	f800283a 	ret

000039d4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    39d4:	deffff04 	addi	sp,sp,-4
    39d8:	df000015 	stw	fp,0(sp)
    39dc:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    39e0:	d0a70243 	ldbu	r2,-25591(gp)
    39e4:	10803fcc 	andi	r2,r2,255
    39e8:	10800058 	cmpnei	r2,r2,1
    39ec:	1000071e 	bne	r2,zero,3a0c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    39f0:	d0a71003 	ldbu	r2,-25536(gp)
    39f4:	10803fcc 	andi	r2,r2,255
    39f8:	10803fe0 	cmpeqi	r2,r2,255
    39fc:	1000031e 	bne	r2,zero,3a0c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    3a00:	d0a71003 	ldbu	r2,-25536(gp)
    3a04:	10800044 	addi	r2,r2,1
    3a08:	d0a71005 	stb	r2,-25536(gp)
        }
    }
}
    3a0c:	0001883a 	nop
    3a10:	e037883a 	mov	sp,fp
    3a14:	df000017 	ldw	fp,0(sp)
    3a18:	dec00104 	addi	sp,sp,4
    3a1c:	f800283a 	ret

00003a20 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    3a20:	defffb04 	addi	sp,sp,-20
    3a24:	dfc00415 	stw	ra,16(sp)
    3a28:	df000315 	stw	fp,12(sp)
    3a2c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3a30:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    3a34:	d0a70243 	ldbu	r2,-25591(gp)
    3a38:	10803fcc 	andi	r2,r2,255
    3a3c:	10800058 	cmpnei	r2,r2,1
    3a40:	10002f1e 	bne	r2,zero,3b00 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3a44:	0005303a 	rdctl	r2,status
    3a48:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3a4c:	e0ffff17 	ldw	r3,-4(fp)
    3a50:	00bfff84 	movi	r2,-2
    3a54:	1884703a 	and	r2,r3,r2
    3a58:	1001703a 	wrctl	status,r2
  
  return context;
    3a5c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3a60:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    3a64:	d0a71003 	ldbu	r2,-25536(gp)
    3a68:	10803fcc 	andi	r2,r2,255
    3a6c:	10000326 	beq	r2,zero,3a7c <OSIntExit+0x5c>
            OSIntNesting--;
    3a70:	d0a71003 	ldbu	r2,-25536(gp)
    3a74:	10bfffc4 	addi	r2,r2,-1
    3a78:	d0a71005 	stb	r2,-25536(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    3a7c:	d0a71003 	ldbu	r2,-25536(gp)
    3a80:	10803fcc 	andi	r2,r2,255
    3a84:	10001a1e 	bne	r2,zero,3af0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    3a88:	d0a70203 	ldbu	r2,-25592(gp)
    3a8c:	10803fcc 	andi	r2,r2,255
    3a90:	1000171e 	bne	r2,zero,3af0 <OSIntExit+0xd0>
                OS_SchedNew();
    3a94:	0004b1c0 	call	4b1c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    3a98:	d0e70403 	ldbu	r3,-25584(gp)
    3a9c:	d0a70443 	ldbu	r2,-25583(gp)
    3aa0:	18c03fcc 	andi	r3,r3,255
    3aa4:	10803fcc 	andi	r2,r2,255
    3aa8:	18801126 	beq	r3,r2,3af0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    3aac:	d0a70403 	ldbu	r2,-25584(gp)
    3ab0:	10c03fcc 	andi	r3,r2,255
    3ab4:	00800074 	movhi	r2,1
    3ab8:	109ecc04 	addi	r2,r2,31536
    3abc:	18c7883a 	add	r3,r3,r3
    3ac0:	18c7883a 	add	r3,r3,r3
    3ac4:	10c5883a 	add	r2,r2,r3
    3ac8:	10800017 	ldw	r2,0(r2)
    3acc:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    3ad0:	d0a70c17 	ldw	r2,-25552(gp)
    3ad4:	10c00e17 	ldw	r3,56(r2)
    3ad8:	18c00044 	addi	r3,r3,1
    3adc:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    3ae0:	d0a70717 	ldw	r2,-25572(gp)
    3ae4:	10800044 	addi	r2,r2,1
    3ae8:	d0a70715 	stw	r2,-25572(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    3aec:	000c3540 	call	c354 <OSCtxSw>
    3af0:	e0bffd17 	ldw	r2,-12(fp)
    3af4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3af8:	e0bffe17 	ldw	r2,-8(fp)
    3afc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    3b00:	0001883a 	nop
    3b04:	e037883a 	mov	sp,fp
    3b08:	dfc00117 	ldw	ra,4(sp)
    3b0c:	df000017 	ldw	fp,0(sp)
    3b10:	dec00204 	addi	sp,sp,8
    3b14:	f800283a 	ret

00003b18 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    3b18:	defffc04 	addi	sp,sp,-16
    3b1c:	df000315 	stw	fp,12(sp)
    3b20:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3b24:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    3b28:	d0a70243 	ldbu	r2,-25591(gp)
    3b2c:	10803fcc 	andi	r2,r2,255
    3b30:	10800058 	cmpnei	r2,r2,1
    3b34:	1000161e 	bne	r2,zero,3b90 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b38:	0005303a 	rdctl	r2,status
    3b3c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b40:	e0ffff17 	ldw	r3,-4(fp)
    3b44:	00bfff84 	movi	r2,-2
    3b48:	1884703a 	and	r2,r3,r2
    3b4c:	1001703a 	wrctl	status,r2
  
  return context;
    3b50:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3b54:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    3b58:	d0a71003 	ldbu	r2,-25536(gp)
    3b5c:	10803fcc 	andi	r2,r2,255
    3b60:	1000071e 	bne	r2,zero,3b80 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    3b64:	d0a70203 	ldbu	r2,-25592(gp)
    3b68:	10803fcc 	andi	r2,r2,255
    3b6c:	10803fe0 	cmpeqi	r2,r2,255
    3b70:	1000031e 	bne	r2,zero,3b80 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    3b74:	d0a70203 	ldbu	r2,-25592(gp)
    3b78:	10800044 	addi	r2,r2,1
    3b7c:	d0a70205 	stb	r2,-25592(gp)
    3b80:	e0bffd17 	ldw	r2,-12(fp)
    3b84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3b88:	e0bffe17 	ldw	r2,-8(fp)
    3b8c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    3b90:	0001883a 	nop
    3b94:	e037883a 	mov	sp,fp
    3b98:	df000017 	ldw	fp,0(sp)
    3b9c:	dec00104 	addi	sp,sp,4
    3ba0:	f800283a 	ret

00003ba4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    3ba4:	defff804 	addi	sp,sp,-32
    3ba8:	dfc00715 	stw	ra,28(sp)
    3bac:	df000615 	stw	fp,24(sp)
    3bb0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3bb4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    3bb8:	d0a70243 	ldbu	r2,-25591(gp)
    3bbc:	10803fcc 	andi	r2,r2,255
    3bc0:	10800058 	cmpnei	r2,r2,1
    3bc4:	1000281e 	bne	r2,zero,3c68 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3bc8:	0005303a 	rdctl	r2,status
    3bcc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3bd0:	e0ffff17 	ldw	r3,-4(fp)
    3bd4:	00bfff84 	movi	r2,-2
    3bd8:	1884703a 	and	r2,r3,r2
    3bdc:	1001703a 	wrctl	status,r2
  
  return context;
    3be0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    3be4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    3be8:	d0a70203 	ldbu	r2,-25592(gp)
    3bec:	10803fcc 	andi	r2,r2,255
    3bf0:	10001926 	beq	r2,zero,3c58 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    3bf4:	d0a70203 	ldbu	r2,-25592(gp)
    3bf8:	10bfffc4 	addi	r2,r2,-1
    3bfc:	d0a70205 	stb	r2,-25592(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    3c00:	d0a70203 	ldbu	r2,-25592(gp)
    3c04:	10803fcc 	andi	r2,r2,255
    3c08:	10000e1e 	bne	r2,zero,3c44 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    3c0c:	d0a71003 	ldbu	r2,-25536(gp)
    3c10:	10803fcc 	andi	r2,r2,255
    3c14:	1000061e 	bne	r2,zero,3c30 <OSSchedUnlock+0x8c>
    3c18:	e0bffa17 	ldw	r2,-24(fp)
    3c1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c20:	e0bffb17 	ldw	r2,-20(fp)
    3c24:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    3c28:	0004a4c0 	call	4a4c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    3c2c:	00000e06 	br	3c68 <OSSchedUnlock+0xc4>
    3c30:	e0bffa17 	ldw	r2,-24(fp)
    3c34:	e0bffc15 	stw	r2,-16(fp)
    3c38:	e0bffc17 	ldw	r2,-16(fp)
    3c3c:	1001703a 	wrctl	status,r2
    3c40:	00000906 	br	3c68 <OSSchedUnlock+0xc4>
    3c44:	e0bffa17 	ldw	r2,-24(fp)
    3c48:	e0bffd15 	stw	r2,-12(fp)
    3c4c:	e0bffd17 	ldw	r2,-12(fp)
    3c50:	1001703a 	wrctl	status,r2
    3c54:	00000406 	br	3c68 <OSSchedUnlock+0xc4>
    3c58:	e0bffa17 	ldw	r2,-24(fp)
    3c5c:	e0bffe15 	stw	r2,-8(fp)
    3c60:	e0bffe17 	ldw	r2,-8(fp)
    3c64:	1001703a 	wrctl	status,r2
    3c68:	0001883a 	nop
    3c6c:	e037883a 	mov	sp,fp
    3c70:	dfc00117 	ldw	ra,4(sp)
    3c74:	df000017 	ldw	fp,0(sp)
    3c78:	dec00204 	addi	sp,sp,8
    3c7c:	f800283a 	ret

00003c80 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    3c80:	defffe04 	addi	sp,sp,-8
    3c84:	dfc00115 	stw	ra,4(sp)
    3c88:	df000015 	stw	fp,0(sp)
    3c8c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    3c90:	d0a70243 	ldbu	r2,-25591(gp)
    3c94:	10803fcc 	andi	r2,r2,255
    3c98:	10000f1e 	bne	r2,zero,3cd8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    3c9c:	0004b1c0 	call	4b1c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    3ca0:	d0a70403 	ldbu	r2,-25584(gp)
    3ca4:	d0a70445 	stb	r2,-25583(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    3ca8:	d0a70403 	ldbu	r2,-25584(gp)
    3cac:	10c03fcc 	andi	r3,r2,255
    3cb0:	00800074 	movhi	r2,1
    3cb4:	109ecc04 	addi	r2,r2,31536
    3cb8:	18c7883a 	add	r3,r3,r3
    3cbc:	18c7883a 	add	r3,r3,r3
    3cc0:	10c5883a 	add	r2,r2,r3
    3cc4:	10800017 	ldw	r2,0(r2)
    3cc8:	d0a70c15 	stw	r2,-25552(gp)
        OSTCBCur      = OSTCBHighRdy;
    3ccc:	d0a70c17 	ldw	r2,-25552(gp)
    3cd0:	d0a71115 	stw	r2,-25532(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    3cd4:	000c3e00 	call	c3e0 <OSStartHighRdy>
    }
}
    3cd8:	0001883a 	nop
    3cdc:	e037883a 	mov	sp,fp
    3ce0:	dfc00117 	ldw	ra,4(sp)
    3ce4:	df000017 	ldw	fp,0(sp)
    3ce8:	dec00204 	addi	sp,sp,8
    3cec:	f800283a 	ret

00003cf0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    3cf0:	defff904 	addi	sp,sp,-28
    3cf4:	dfc00615 	stw	ra,24(sp)
    3cf8:	df000515 	stw	fp,20(sp)
    3cfc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3d00:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    3d04:	01000084 	movi	r4,2
    3d08:	000a3f40 	call	a3f4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d0c:	0005303a 	rdctl	r2,status
    3d10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d14:	e0fffc17 	ldw	r3,-16(fp)
    3d18:	00bfff84 	movi	r2,-2
    3d1c:	1884703a 	and	r2,r3,r2
    3d20:	1001703a 	wrctl	status,r2
  
  return context;
    3d24:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    3d28:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    3d2c:	d0270315 	stw	zero,-25588(gp)
    3d30:	e0bffb17 	ldw	r2,-20(fp)
    3d34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d38:	e0bffd17 	ldw	r2,-12(fp)
    3d3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    3d40:	01001904 	movi	r4,100
    3d44:	000a3f40 	call	a3f4 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3d48:	0005303a 	rdctl	r2,status
    3d4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3d50:	e0fffe17 	ldw	r3,-8(fp)
    3d54:	00bfff84 	movi	r2,-2
    3d58:	1884703a 	and	r2,r3,r2
    3d5c:	1001703a 	wrctl	status,r2
  
  return context;
    3d60:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    3d64:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    3d68:	d0a70317 	ldw	r2,-25588(gp)
    3d6c:	d0a70815 	stw	r2,-25568(gp)
    OSStatRdy    = OS_TRUE;
    3d70:	00800044 	movi	r2,1
    3d74:	d0a71405 	stb	r2,-25520(gp)
    3d78:	e0bffb17 	ldw	r2,-20(fp)
    3d7c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3d80:	e0bfff17 	ldw	r2,-4(fp)
    3d84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    3d88:	0001883a 	nop
    3d8c:	e037883a 	mov	sp,fp
    3d90:	dfc00117 	ldw	ra,4(sp)
    3d94:	df000017 	ldw	fp,0(sp)
    3d98:	dec00204 	addi	sp,sp,8
    3d9c:	f800283a 	ret

00003da0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    3da0:	defff704 	addi	sp,sp,-36
    3da4:	dfc00815 	stw	ra,32(sp)
    3da8:	df000715 	stw	fp,28(sp)
    3dac:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    3db0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    3db4:	000c6080 	call	c608 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3db8:	0005303a 	rdctl	r2,status
    3dbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3dc0:	e0fffd17 	ldw	r3,-12(fp)
    3dc4:	00bfff84 	movi	r2,-2
    3dc8:	1884703a 	and	r2,r3,r2
    3dcc:	1001703a 	wrctl	status,r2
  
  return context;
    3dd0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    3dd4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    3dd8:	d0a71217 	ldw	r2,-25528(gp)
    3ddc:	10800044 	addi	r2,r2,1
    3de0:	d0a71215 	stw	r2,-25528(gp)
    3de4:	e0bffb17 	ldw	r2,-20(fp)
    3de8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3dec:	e0bfff17 	ldw	r2,-4(fp)
    3df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    3df4:	d0a70243 	ldbu	r2,-25591(gp)
    3df8:	10803fcc 	andi	r2,r2,255
    3dfc:	10800058 	cmpnei	r2,r2,1
    3e00:	10006a1e 	bne	r2,zero,3fac <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    3e04:	d0a70603 	ldbu	r2,-25576(gp)
    3e08:	10803fcc 	andi	r2,r2,255
    3e0c:	10c00060 	cmpeqi	r3,r2,1
    3e10:	1800061e 	bne	r3,zero,3e2c <OSTimeTick+0x8c>
    3e14:	10c000a0 	cmpeqi	r3,r2,2
    3e18:	1800061e 	bne	r3,zero,3e34 <OSTimeTick+0x94>
    3e1c:	10000a1e 	bne	r2,zero,3e48 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    3e20:	00800044 	movi	r2,1
    3e24:	e0bffa05 	stb	r2,-24(fp)
                 break;
    3e28:	00000b06 	br	3e58 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    3e2c:	e03ffa05 	stb	zero,-24(fp)
                 break;
    3e30:	00000906 	br	3e58 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    3e34:	00800044 	movi	r2,1
    3e38:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    3e3c:	00800044 	movi	r2,1
    3e40:	d0a70605 	stb	r2,-25576(gp)
                 break;
    3e44:	00000406 	br	3e58 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    3e48:	00800044 	movi	r2,1
    3e4c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    3e50:	d0270605 	stb	zero,-25576(gp)
                 break;
    3e54:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    3e58:	e0bffa03 	ldbu	r2,-24(fp)
    3e5c:	10005226 	beq	r2,zero,3fa8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    3e60:	d0a70517 	ldw	r2,-25580(gp)
    3e64:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    3e68:	00004906 	br	3f90 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3e6c:	0005303a 	rdctl	r2,status
    3e70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3e74:	e0fffc17 	ldw	r3,-16(fp)
    3e78:	00bfff84 	movi	r2,-2
    3e7c:	1884703a 	and	r2,r3,r2
    3e80:	1001703a 	wrctl	status,r2
  
  return context;
    3e84:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    3e88:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    3e8c:	e0bff917 	ldw	r2,-28(fp)
    3e90:	10800b8b 	ldhu	r2,46(r2)
    3e94:	10bfffcc 	andi	r2,r2,65535
    3e98:	10003626 	beq	r2,zero,3f74 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    3e9c:	e0bff917 	ldw	r2,-28(fp)
    3ea0:	10800b8b 	ldhu	r2,46(r2)
    3ea4:	10bfffc4 	addi	r2,r2,-1
    3ea8:	1007883a 	mov	r3,r2
    3eac:	e0bff917 	ldw	r2,-28(fp)
    3eb0:	10c00b8d 	sth	r3,46(r2)
    3eb4:	e0bff917 	ldw	r2,-28(fp)
    3eb8:	10800b8b 	ldhu	r2,46(r2)
    3ebc:	10bfffcc 	andi	r2,r2,65535
    3ec0:	10002c1e 	bne	r2,zero,3f74 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    3ec4:	e0bff917 	ldw	r2,-28(fp)
    3ec8:	10800c03 	ldbu	r2,48(r2)
    3ecc:	10803fcc 	andi	r2,r2,255
    3ed0:	10800dcc 	andi	r2,r2,55
    3ed4:	10000b26 	beq	r2,zero,3f04 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    3ed8:	e0bff917 	ldw	r2,-28(fp)
    3edc:	10c00c03 	ldbu	r3,48(r2)
    3ee0:	00bff204 	movi	r2,-56
    3ee4:	1884703a 	and	r2,r3,r2
    3ee8:	1007883a 	mov	r3,r2
    3eec:	e0bff917 	ldw	r2,-28(fp)
    3ef0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    3ef4:	e0bff917 	ldw	r2,-28(fp)
    3ef8:	00c00044 	movi	r3,1
    3efc:	10c00c45 	stb	r3,49(r2)
    3f00:	00000206 	br	3f0c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    3f04:	e0bff917 	ldw	r2,-28(fp)
    3f08:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    3f0c:	e0bff917 	ldw	r2,-28(fp)
    3f10:	10800c03 	ldbu	r2,48(r2)
    3f14:	10803fcc 	andi	r2,r2,255
    3f18:	1080020c 	andi	r2,r2,8
    3f1c:	1000151e 	bne	r2,zero,3f74 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    3f20:	e0bff917 	ldw	r2,-28(fp)
    3f24:	10c00d83 	ldbu	r3,54(r2)
    3f28:	d0a70e03 	ldbu	r2,-25544(gp)
    3f2c:	1884b03a 	or	r2,r3,r2
    3f30:	d0a70e05 	stb	r2,-25544(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3f34:	e0bff917 	ldw	r2,-28(fp)
    3f38:	10800d03 	ldbu	r2,52(r2)
    3f3c:	10c03fcc 	andi	r3,r2,255
    3f40:	e0bff917 	ldw	r2,-28(fp)
    3f44:	10800d03 	ldbu	r2,52(r2)
    3f48:	11003fcc 	andi	r4,r2,255
    3f4c:	d0a70e44 	addi	r2,gp,-25543
    3f50:	2085883a 	add	r2,r4,r2
    3f54:	11000003 	ldbu	r4,0(r2)
    3f58:	e0bff917 	ldw	r2,-28(fp)
    3f5c:	10800d43 	ldbu	r2,53(r2)
    3f60:	2084b03a 	or	r2,r4,r2
    3f64:	1009883a 	mov	r4,r2
    3f68:	d0a70e44 	addi	r2,gp,-25543
    3f6c:	1885883a 	add	r2,r3,r2
    3f70:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    3f74:	e0bff917 	ldw	r2,-28(fp)
    3f78:	10800517 	ldw	r2,20(r2)
    3f7c:	e0bff915 	stw	r2,-28(fp)
    3f80:	e0bffb17 	ldw	r2,-20(fp)
    3f84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3f88:	e0bffe17 	ldw	r2,-8(fp)
    3f8c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    3f90:	e0bff917 	ldw	r2,-28(fp)
    3f94:	10800c83 	ldbu	r2,50(r2)
    3f98:	10803fcc 	andi	r2,r2,255
    3f9c:	10800518 	cmpnei	r2,r2,20
    3fa0:	103fb21e 	bne	r2,zero,3e6c <__alt_data_end+0xfffeb7cc>
    3fa4:	00000106 	br	3fac <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    3fa8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    3fac:	e037883a 	mov	sp,fp
    3fb0:	dfc00117 	ldw	ra,4(sp)
    3fb4:	df000017 	ldw	fp,0(sp)
    3fb8:	dec00204 	addi	sp,sp,8
    3fbc:	f800283a 	ret

00003fc0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    3fc0:	deffff04 	addi	sp,sp,-4
    3fc4:	df000015 	stw	fp,0(sp)
    3fc8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    3fcc:	00804784 	movi	r2,286
}
    3fd0:	e037883a 	mov	sp,fp
    3fd4:	df000017 	ldw	fp,0(sp)
    3fd8:	dec00104 	addi	sp,sp,4
    3fdc:	f800283a 	ret

00003fe0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    3fe0:	deffff04 	addi	sp,sp,-4
    3fe4:	df000015 	stw	fp,0(sp)
    3fe8:	d839883a 	mov	fp,sp
}
    3fec:	0001883a 	nop
    3ff0:	e037883a 	mov	sp,fp
    3ff4:	df000017 	ldw	fp,0(sp)
    3ff8:	dec00104 	addi	sp,sp,4
    3ffc:	f800283a 	ret

00004000 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4000:	defff804 	addi	sp,sp,-32
    4004:	dfc00715 	stw	ra,28(sp)
    4008:	df000615 	stw	fp,24(sp)
    400c:	df000604 	addi	fp,sp,24
    4010:	e13ffc15 	stw	r4,-16(fp)
    4014:	e17ffd15 	stw	r5,-12(fp)
    4018:	3007883a 	mov	r3,r6
    401c:	3805883a 	mov	r2,r7
    4020:	e0fffe05 	stb	r3,-8(fp)
    4024:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4028:	e0bffc17 	ldw	r2,-16(fp)
    402c:	10800283 	ldbu	r2,10(r2)
    4030:	10c03fcc 	andi	r3,r2,255
    4034:	00800074 	movhi	r2,1
    4038:	10b44804 	addi	r2,r2,-12000
    403c:	10c5883a 	add	r2,r2,r3
    4040:	10800003 	ldbu	r2,0(r2)
    4044:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    4048:	e0bffa03 	ldbu	r2,-24(fp)
    404c:	e0fffc17 	ldw	r3,-16(fp)
    4050:	1885883a 	add	r2,r3,r2
    4054:	108002c4 	addi	r2,r2,11
    4058:	10800003 	ldbu	r2,0(r2)
    405c:	10c03fcc 	andi	r3,r2,255
    4060:	00800074 	movhi	r2,1
    4064:	10b44804 	addi	r2,r2,-12000
    4068:	10c5883a 	add	r2,r2,r3
    406c:	10800003 	ldbu	r2,0(r2)
    4070:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    4074:	e0bffa03 	ldbu	r2,-24(fp)
    4078:	100490fa 	slli	r2,r2,3
    407c:	1007883a 	mov	r3,r2
    4080:	e0bffa43 	ldbu	r2,-23(fp)
    4084:	1885883a 	add	r2,r3,r2
    4088:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    408c:	e0fffa83 	ldbu	r3,-22(fp)
    4090:	00800074 	movhi	r2,1
    4094:	109ecc04 	addi	r2,r2,31536
    4098:	18c7883a 	add	r3,r3,r3
    409c:	18c7883a 	add	r3,r3,r3
    40a0:	10c5883a 	add	r2,r2,r3
    40a4:	10800017 	ldw	r2,0(r2)
    40a8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    40ac:	e0bffb17 	ldw	r2,-20(fp)
    40b0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    40b4:	e0bffb17 	ldw	r2,-20(fp)
    40b8:	e0fffd17 	ldw	r3,-12(fp)
    40bc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    40c0:	e0bffb17 	ldw	r2,-20(fp)
    40c4:	10800c03 	ldbu	r2,48(r2)
    40c8:	1007883a 	mov	r3,r2
    40cc:	e0bffe03 	ldbu	r2,-8(fp)
    40d0:	0084303a 	nor	r2,zero,r2
    40d4:	1884703a 	and	r2,r3,r2
    40d8:	1007883a 	mov	r3,r2
    40dc:	e0bffb17 	ldw	r2,-20(fp)
    40e0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    40e4:	e0bffb17 	ldw	r2,-20(fp)
    40e8:	e0ffff03 	ldbu	r3,-4(fp)
    40ec:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    40f0:	e0bffb17 	ldw	r2,-20(fp)
    40f4:	10800c03 	ldbu	r2,48(r2)
    40f8:	10803fcc 	andi	r2,r2,255
    40fc:	1080020c 	andi	r2,r2,8
    4100:	1000111e 	bne	r2,zero,4148 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4104:	e0bffb17 	ldw	r2,-20(fp)
    4108:	10c00d83 	ldbu	r3,54(r2)
    410c:	d0a70e03 	ldbu	r2,-25544(gp)
    4110:	1884b03a 	or	r2,r3,r2
    4114:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4118:	e0fffa03 	ldbu	r3,-24(fp)
    411c:	e13ffa03 	ldbu	r4,-24(fp)
    4120:	d0a70e44 	addi	r2,gp,-25543
    4124:	2085883a 	add	r2,r4,r2
    4128:	11000003 	ldbu	r4,0(r2)
    412c:	e0bffb17 	ldw	r2,-20(fp)
    4130:	10800d43 	ldbu	r2,53(r2)
    4134:	2084b03a 	or	r2,r4,r2
    4138:	1009883a 	mov	r4,r2
    413c:	d0a70e44 	addi	r2,gp,-25543
    4140:	1885883a 	add	r2,r3,r2
    4144:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    4148:	e17ffc17 	ldw	r5,-16(fp)
    414c:	e13ffb17 	ldw	r4,-20(fp)
    4150:	00043f80 	call	43f8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    4154:	e0bffb17 	ldw	r2,-20(fp)
    4158:	10800817 	ldw	r2,32(r2)
    415c:	10000826 	beq	r2,zero,4180 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    4160:	e0bffb17 	ldw	r2,-20(fp)
    4164:	10800817 	ldw	r2,32(r2)
    4168:	100b883a 	mov	r5,r2
    416c:	e13ffb17 	ldw	r4,-20(fp)
    4170:	00044b00 	call	44b0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    4174:	e0bffb17 	ldw	r2,-20(fp)
    4178:	e0fffc17 	ldw	r3,-16(fp)
    417c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    4180:	e0bffa83 	ldbu	r2,-22(fp)
}
    4184:	e037883a 	mov	sp,fp
    4188:	dfc00117 	ldw	ra,4(sp)
    418c:	df000017 	ldw	fp,0(sp)
    4190:	dec00204 	addi	sp,sp,8
    4194:	f800283a 	ret

00004198 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4198:	defffd04 	addi	sp,sp,-12
    419c:	df000215 	stw	fp,8(sp)
    41a0:	df000204 	addi	fp,sp,8
    41a4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    41a8:	d0a71117 	ldw	r2,-25532(gp)
    41ac:	e0ffff17 	ldw	r3,-4(fp)
    41b0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    41b4:	d0a71117 	ldw	r2,-25532(gp)
    41b8:	10800d03 	ldbu	r2,52(r2)
    41bc:	10803fcc 	andi	r2,r2,255
    41c0:	d0e71117 	ldw	r3,-25532(gp)
    41c4:	18c00d03 	ldbu	r3,52(r3)
    41c8:	18c03fcc 	andi	r3,r3,255
    41cc:	e13fff17 	ldw	r4,-4(fp)
    41d0:	20c7883a 	add	r3,r4,r3
    41d4:	18c002c4 	addi	r3,r3,11
    41d8:	19000003 	ldbu	r4,0(r3)
    41dc:	d0e71117 	ldw	r3,-25532(gp)
    41e0:	18c00d43 	ldbu	r3,53(r3)
    41e4:	20c6b03a 	or	r3,r4,r3
    41e8:	1809883a 	mov	r4,r3
    41ec:	e0ffff17 	ldw	r3,-4(fp)
    41f0:	1885883a 	add	r2,r3,r2
    41f4:	108002c4 	addi	r2,r2,11
    41f8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    41fc:	e0bfff17 	ldw	r2,-4(fp)
    4200:	10c00283 	ldbu	r3,10(r2)
    4204:	d0a71117 	ldw	r2,-25532(gp)
    4208:	10800d83 	ldbu	r2,54(r2)
    420c:	1884b03a 	or	r2,r3,r2
    4210:	1007883a 	mov	r3,r2
    4214:	e0bfff17 	ldw	r2,-4(fp)
    4218:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    421c:	d0a71117 	ldw	r2,-25532(gp)
    4220:	10800d03 	ldbu	r2,52(r2)
    4224:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4228:	e0fffe03 	ldbu	r3,-8(fp)
    422c:	e13ffe03 	ldbu	r4,-8(fp)
    4230:	d0a70e44 	addi	r2,gp,-25543
    4234:	2085883a 	add	r2,r4,r2
    4238:	10800003 	ldbu	r2,0(r2)
    423c:	1009883a 	mov	r4,r2
    4240:	d0a71117 	ldw	r2,-25532(gp)
    4244:	10800d43 	ldbu	r2,53(r2)
    4248:	0084303a 	nor	r2,zero,r2
    424c:	2084703a 	and	r2,r4,r2
    4250:	1009883a 	mov	r4,r2
    4254:	d0a70e44 	addi	r2,gp,-25543
    4258:	1885883a 	add	r2,r3,r2
    425c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    4260:	e0fffe03 	ldbu	r3,-8(fp)
    4264:	d0a70e44 	addi	r2,gp,-25543
    4268:	1885883a 	add	r2,r3,r2
    426c:	10800003 	ldbu	r2,0(r2)
    4270:	10803fcc 	andi	r2,r2,255
    4274:	1000071e 	bne	r2,zero,4294 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4278:	d0a71117 	ldw	r2,-25532(gp)
    427c:	10800d83 	ldbu	r2,54(r2)
    4280:	0084303a 	nor	r2,zero,r2
    4284:	1007883a 	mov	r3,r2
    4288:	d0a70e03 	ldbu	r2,-25544(gp)
    428c:	1884703a 	and	r2,r3,r2
    4290:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    4294:	0001883a 	nop
    4298:	e037883a 	mov	sp,fp
    429c:	df000017 	ldw	fp,0(sp)
    42a0:	dec00104 	addi	sp,sp,4
    42a4:	f800283a 	ret

000042a8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    42a8:	defffb04 	addi	sp,sp,-20
    42ac:	df000415 	stw	fp,16(sp)
    42b0:	df000404 	addi	fp,sp,16
    42b4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    42b8:	d0a71117 	ldw	r2,-25532(gp)
    42bc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    42c0:	d0a71117 	ldw	r2,-25532(gp)
    42c4:	e0ffff17 	ldw	r3,-4(fp)
    42c8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    42cc:	e0bfff17 	ldw	r2,-4(fp)
    42d0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    42d4:	e0bffc17 	ldw	r2,-16(fp)
    42d8:	10800017 	ldw	r2,0(r2)
    42dc:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    42e0:	00002006 	br	4364 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    42e4:	d0a71117 	ldw	r2,-25532(gp)
    42e8:	10800d03 	ldbu	r2,52(r2)
    42ec:	10803fcc 	andi	r2,r2,255
    42f0:	d0e71117 	ldw	r3,-25532(gp)
    42f4:	18c00d03 	ldbu	r3,52(r3)
    42f8:	18c03fcc 	andi	r3,r3,255
    42fc:	e13ffd17 	ldw	r4,-12(fp)
    4300:	20c7883a 	add	r3,r4,r3
    4304:	18c002c4 	addi	r3,r3,11
    4308:	19000003 	ldbu	r4,0(r3)
    430c:	d0e71117 	ldw	r3,-25532(gp)
    4310:	18c00d43 	ldbu	r3,53(r3)
    4314:	20c6b03a 	or	r3,r4,r3
    4318:	1809883a 	mov	r4,r3
    431c:	e0fffd17 	ldw	r3,-12(fp)
    4320:	1885883a 	add	r2,r3,r2
    4324:	108002c4 	addi	r2,r2,11
    4328:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    432c:	e0bffd17 	ldw	r2,-12(fp)
    4330:	10c00283 	ldbu	r3,10(r2)
    4334:	d0a71117 	ldw	r2,-25532(gp)
    4338:	10800d83 	ldbu	r2,54(r2)
    433c:	1884b03a 	or	r2,r3,r2
    4340:	1007883a 	mov	r3,r2
    4344:	e0bffd17 	ldw	r2,-12(fp)
    4348:	10c00285 	stb	r3,10(r2)
        pevents++;
    434c:	e0bffc17 	ldw	r2,-16(fp)
    4350:	10800104 	addi	r2,r2,4
    4354:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    4358:	e0bffc17 	ldw	r2,-16(fp)
    435c:	10800017 	ldw	r2,0(r2)
    4360:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    4364:	e0bffd17 	ldw	r2,-12(fp)
    4368:	103fde1e 	bne	r2,zero,42e4 <__alt_data_end+0xfffebc44>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    436c:	d0a71117 	ldw	r2,-25532(gp)
    4370:	10800d03 	ldbu	r2,52(r2)
    4374:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4378:	e0fffe03 	ldbu	r3,-8(fp)
    437c:	e13ffe03 	ldbu	r4,-8(fp)
    4380:	d0a70e44 	addi	r2,gp,-25543
    4384:	2085883a 	add	r2,r4,r2
    4388:	10800003 	ldbu	r2,0(r2)
    438c:	1009883a 	mov	r4,r2
    4390:	d0a71117 	ldw	r2,-25532(gp)
    4394:	10800d43 	ldbu	r2,53(r2)
    4398:	0084303a 	nor	r2,zero,r2
    439c:	2084703a 	and	r2,r4,r2
    43a0:	1009883a 	mov	r4,r2
    43a4:	d0a70e44 	addi	r2,gp,-25543
    43a8:	1885883a 	add	r2,r3,r2
    43ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    43b0:	e0fffe03 	ldbu	r3,-8(fp)
    43b4:	d0a70e44 	addi	r2,gp,-25543
    43b8:	1885883a 	add	r2,r3,r2
    43bc:	10800003 	ldbu	r2,0(r2)
    43c0:	10803fcc 	andi	r2,r2,255
    43c4:	1000071e 	bne	r2,zero,43e4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    43c8:	d0a71117 	ldw	r2,-25532(gp)
    43cc:	10800d83 	ldbu	r2,54(r2)
    43d0:	0084303a 	nor	r2,zero,r2
    43d4:	1007883a 	mov	r3,r2
    43d8:	d0a70e03 	ldbu	r2,-25544(gp)
    43dc:	1884703a 	and	r2,r3,r2
    43e0:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    43e4:	0001883a 	nop
    43e8:	e037883a 	mov	sp,fp
    43ec:	df000017 	ldw	fp,0(sp)
    43f0:	dec00104 	addi	sp,sp,4
    43f4:	f800283a 	ret

000043f8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    43f8:	defffc04 	addi	sp,sp,-16
    43fc:	df000315 	stw	fp,12(sp)
    4400:	df000304 	addi	fp,sp,12
    4404:	e13ffe15 	stw	r4,-8(fp)
    4408:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    440c:	e0bffe17 	ldw	r2,-8(fp)
    4410:	10800d03 	ldbu	r2,52(r2)
    4414:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    4418:	e0bffd03 	ldbu	r2,-12(fp)
    441c:	e0fffd03 	ldbu	r3,-12(fp)
    4420:	e13fff17 	ldw	r4,-4(fp)
    4424:	20c7883a 	add	r3,r4,r3
    4428:	18c002c4 	addi	r3,r3,11
    442c:	18c00003 	ldbu	r3,0(r3)
    4430:	1809883a 	mov	r4,r3
    4434:	e0fffe17 	ldw	r3,-8(fp)
    4438:	18c00d43 	ldbu	r3,53(r3)
    443c:	00c6303a 	nor	r3,zero,r3
    4440:	20c6703a 	and	r3,r4,r3
    4444:	1809883a 	mov	r4,r3
    4448:	e0ffff17 	ldw	r3,-4(fp)
    444c:	1885883a 	add	r2,r3,r2
    4450:	108002c4 	addi	r2,r2,11
    4454:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    4458:	e0bffd03 	ldbu	r2,-12(fp)
    445c:	e0ffff17 	ldw	r3,-4(fp)
    4460:	1885883a 	add	r2,r3,r2
    4464:	108002c4 	addi	r2,r2,11
    4468:	10800003 	ldbu	r2,0(r2)
    446c:	10803fcc 	andi	r2,r2,255
    4470:	10000a1e 	bne	r2,zero,449c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4474:	e0bfff17 	ldw	r2,-4(fp)
    4478:	10800283 	ldbu	r2,10(r2)
    447c:	1007883a 	mov	r3,r2
    4480:	e0bffe17 	ldw	r2,-8(fp)
    4484:	10800d83 	ldbu	r2,54(r2)
    4488:	0084303a 	nor	r2,zero,r2
    448c:	1884703a 	and	r2,r3,r2
    4490:	1007883a 	mov	r3,r2
    4494:	e0bfff17 	ldw	r2,-4(fp)
    4498:	10c00285 	stb	r3,10(r2)
    }
}
    449c:	0001883a 	nop
    44a0:	e037883a 	mov	sp,fp
    44a4:	df000017 	ldw	fp,0(sp)
    44a8:	dec00104 	addi	sp,sp,4
    44ac:	f800283a 	ret

000044b0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    44b0:	defffa04 	addi	sp,sp,-24
    44b4:	df000515 	stw	fp,20(sp)
    44b8:	df000504 	addi	fp,sp,20
    44bc:	e13ffe15 	stw	r4,-8(fp)
    44c0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    44c4:	e0bffe17 	ldw	r2,-8(fp)
    44c8:	10800d03 	ldbu	r2,52(r2)
    44cc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    44d0:	e0bffe17 	ldw	r2,-8(fp)
    44d4:	10800d83 	ldbu	r2,54(r2)
    44d8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    44dc:	e0bffe17 	ldw	r2,-8(fp)
    44e0:	10800d43 	ldbu	r2,53(r2)
    44e4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    44e8:	e0bfff17 	ldw	r2,-4(fp)
    44ec:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    44f0:	e0bffb17 	ldw	r2,-20(fp)
    44f4:	10800017 	ldw	r2,0(r2)
    44f8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    44fc:	00002506 	br	4594 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    4500:	e0bffd03 	ldbu	r2,-12(fp)
    4504:	e0fffd03 	ldbu	r3,-12(fp)
    4508:	e13ffc17 	ldw	r4,-16(fp)
    450c:	20c7883a 	add	r3,r4,r3
    4510:	18c002c4 	addi	r3,r3,11
    4514:	18c00003 	ldbu	r3,0(r3)
    4518:	1809883a 	mov	r4,r3
    451c:	e0fffd83 	ldbu	r3,-10(fp)
    4520:	00c6303a 	nor	r3,zero,r3
    4524:	20c6703a 	and	r3,r4,r3
    4528:	1809883a 	mov	r4,r3
    452c:	e0fffc17 	ldw	r3,-16(fp)
    4530:	1885883a 	add	r2,r3,r2
    4534:	108002c4 	addi	r2,r2,11
    4538:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    453c:	e0bffd03 	ldbu	r2,-12(fp)
    4540:	e0fffc17 	ldw	r3,-16(fp)
    4544:	1885883a 	add	r2,r3,r2
    4548:	108002c4 	addi	r2,r2,11
    454c:	10800003 	ldbu	r2,0(r2)
    4550:	10803fcc 	andi	r2,r2,255
    4554:	1000091e 	bne	r2,zero,457c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    4558:	e0bffc17 	ldw	r2,-16(fp)
    455c:	10800283 	ldbu	r2,10(r2)
    4560:	1007883a 	mov	r3,r2
    4564:	e0bffd43 	ldbu	r2,-11(fp)
    4568:	0084303a 	nor	r2,zero,r2
    456c:	1884703a 	and	r2,r3,r2
    4570:	1007883a 	mov	r3,r2
    4574:	e0bffc17 	ldw	r2,-16(fp)
    4578:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    457c:	e0bffb17 	ldw	r2,-20(fp)
    4580:	10800104 	addi	r2,r2,4
    4584:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    4588:	e0bffb17 	ldw	r2,-20(fp)
    458c:	10800017 	ldw	r2,0(r2)
    4590:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    4594:	e0bffc17 	ldw	r2,-16(fp)
    4598:	103fd91e 	bne	r2,zero,4500 <__alt_data_end+0xfffebe60>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    459c:	0001883a 	nop
    45a0:	e037883a 	mov	sp,fp
    45a4:	df000017 	ldw	fp,0(sp)
    45a8:	dec00104 	addi	sp,sp,4
    45ac:	f800283a 	ret

000045b0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    45b0:	defffc04 	addi	sp,sp,-16
    45b4:	df000315 	stw	fp,12(sp)
    45b8:	df000304 	addi	fp,sp,12
    45bc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    45c0:	e0bfff17 	ldw	r2,-4(fp)
    45c4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    45c8:	e0bfff17 	ldw	r2,-4(fp)
    45cc:	108002c4 	addi	r2,r2,11
    45d0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    45d4:	e03ffe05 	stb	zero,-8(fp)
    45d8:	00000706 	br	45f8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    45dc:	e0bffd17 	ldw	r2,-12(fp)
    45e0:	10c00044 	addi	r3,r2,1
    45e4:	e0fffd15 	stw	r3,-12(fp)
    45e8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    45ec:	e0bffe03 	ldbu	r2,-8(fp)
    45f0:	10800044 	addi	r2,r2,1
    45f4:	e0bffe05 	stb	r2,-8(fp)
    45f8:	e0bffe03 	ldbu	r2,-8(fp)
    45fc:	108000f0 	cmpltui	r2,r2,3
    4600:	103ff61e 	bne	r2,zero,45dc <__alt_data_end+0xfffebf3c>
        *ptbl++ = 0;
    }
}
    4604:	0001883a 	nop
    4608:	e037883a 	mov	sp,fp
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00104 	addi	sp,sp,4
    4614:	f800283a 	ret

00004618 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    4618:	defffb04 	addi	sp,sp,-20
    461c:	dfc00415 	stw	ra,16(sp)
    4620:	df000315 	stw	fp,12(sp)
    4624:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    4628:	0142d004 	movi	r5,2880
    462c:	01000074 	movhi	r4,1
    4630:	211ab804 	addi	r4,r4,27360
    4634:	00049900 	call	4990 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    4638:	00800074 	movhi	r2,1
    463c:	109ab804 	addi	r2,r2,27360
    4640:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    4644:	00800074 	movhi	r2,1
    4648:	109ac404 	addi	r2,r2,27408
    464c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4650:	e03ffd0d 	sth	zero,-12(fp)
    4654:	00001306 	br	46a4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4658:	e0bffe17 	ldw	r2,-8(fp)
    465c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    4660:	e0bffe17 	ldw	r2,-8(fp)
    4664:	e0ffff17 	ldw	r3,-4(fp)
    4668:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    466c:	e0bffe17 	ldw	r2,-8(fp)
    4670:	00c00fc4 	movi	r3,63
    4674:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    4678:	e0bffe17 	ldw	r2,-8(fp)
    467c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    4680:	e0bffe17 	ldw	r2,-8(fp)
    4684:	10800c04 	addi	r2,r2,48
    4688:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	10800c04 	addi	r2,r2,48
    4694:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4698:	e0bffd0b 	ldhu	r2,-12(fp)
    469c:	10800044 	addi	r2,r2,1
    46a0:	e0bffd0d 	sth	r2,-12(fp)
    46a4:	e0bffd0b 	ldhu	r2,-12(fp)
    46a8:	10800ef0 	cmpltui	r2,r2,59
    46ac:	103fea1e 	bne	r2,zero,4658 <__alt_data_end+0xfffebfb8>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    46b0:	e0bffe17 	ldw	r2,-8(fp)
    46b4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    46b8:	e0bffe17 	ldw	r2,-8(fp)
    46bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    46c0:	e0bffe17 	ldw	r2,-8(fp)
    46c4:	00c00fc4 	movi	r3,63
    46c8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    46cc:	e0bffe17 	ldw	r2,-8(fp)
    46d0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    46d4:	00800074 	movhi	r2,1
    46d8:	109ab804 	addi	r2,r2,27360
    46dc:	d0a70f15 	stw	r2,-25540(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    46e0:	0001883a 	nop
    46e4:	e037883a 	mov	sp,fp
    46e8:	dfc00117 	ldw	ra,4(sp)
    46ec:	df000017 	ldw	fp,0(sp)
    46f0:	dec00204 	addi	sp,sp,8
    46f4:	f800283a 	ret

000046f8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    46f8:	deffff04 	addi	sp,sp,-4
    46fc:	df000015 	stw	fp,0(sp)
    4700:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    4704:	d0271215 	stw	zero,-25528(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    4708:	d0271005 	stb	zero,-25536(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    470c:	d0270205 	stb	zero,-25592(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    4710:	d0270a45 	stb	zero,-25559(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    4714:	d0270245 	stb	zero,-25591(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    4718:	d0270715 	stw	zero,-25572(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    471c:	d0270315 	stw	zero,-25588(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    4720:	d0271515 	stw	zero,-25516(gp)
    OSIdleCtrMax  = 0L;
    4724:	d0270815 	stw	zero,-25568(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    4728:	d0271405 	stb	zero,-25520(gp)
#endif
}
    472c:	0001883a 	nop
    4730:	e037883a 	mov	sp,fp
    4734:	df000017 	ldw	fp,0(sp)
    4738:	dec00104 	addi	sp,sp,4
    473c:	f800283a 	ret

00004740 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    4740:	defffd04 	addi	sp,sp,-12
    4744:	df000215 	stw	fp,8(sp)
    4748:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    474c:	d0270e05 	stb	zero,-25544(gp)
    prdytbl       = &OSRdyTbl[0];
    4750:	d0a70e44 	addi	r2,gp,-25543
    4754:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4758:	e03ffe05 	stb	zero,-8(fp)
    475c:	00000706 	br	477c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    4760:	e0bfff17 	ldw	r2,-4(fp)
    4764:	10c00044 	addi	r3,r2,1
    4768:	e0ffff15 	stw	r3,-4(fp)
    476c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4770:	e0bffe03 	ldbu	r2,-8(fp)
    4774:	10800044 	addi	r2,r2,1
    4778:	e0bffe05 	stb	r2,-8(fp)
    477c:	e0bffe03 	ldbu	r2,-8(fp)
    4780:	108000f0 	cmpltui	r2,r2,3
    4784:	103ff61e 	bne	r2,zero,4760 <__alt_data_end+0xfffec0c0>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    4788:	d0270445 	stb	zero,-25583(gp)
    OSPrioHighRdy = 0;
    478c:	d0270405 	stb	zero,-25584(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    4790:	d0270c15 	stw	zero,-25552(gp)
    OSTCBCur      = (OS_TCB *)0;
    4794:	d0271115 	stw	zero,-25532(gp)
}
    4798:	0001883a 	nop
    479c:	e037883a 	mov	sp,fp
    47a0:	df000017 	ldw	fp,0(sp)
    47a4:	dec00104 	addi	sp,sp,4
    47a8:	f800283a 	ret

000047ac <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    47ac:	defff804 	addi	sp,sp,-32
    47b0:	dfc00715 	stw	ra,28(sp)
    47b4:	df000615 	stw	fp,24(sp)
    47b8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    47bc:	008000c4 	movi	r2,3
    47c0:	d8800415 	stw	r2,16(sp)
    47c4:	d8000315 	stw	zero,12(sp)
    47c8:	00808004 	movi	r2,512
    47cc:	d8800215 	stw	r2,8(sp)
    47d0:	00800074 	movhi	r2,1
    47d4:	1098b804 	addi	r2,r2,25312
    47d8:	d8800115 	stw	r2,4(sp)
    47dc:	00bfffd4 	movui	r2,65535
    47e0:	d8800015 	stw	r2,0(sp)
    47e4:	01c00504 	movi	r7,20
    47e8:	01800074 	movhi	r6,1
    47ec:	319ab704 	addi	r6,r6,27356
    47f0:	000b883a 	mov	r5,zero
    47f4:	01000034 	movhi	r4,0
    47f8:	21131604 	addi	r4,r4,19544
    47fc:	00093240 	call	9324 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    4800:	e1bfff04 	addi	r6,fp,-4
    4804:	01400074 	movhi	r5,1
    4808:	29748804 	addi	r5,r5,-11744
    480c:	01000504 	movi	r4,20
    4810:	0009b340 	call	9b34 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    4814:	0001883a 	nop
    4818:	e037883a 	mov	sp,fp
    481c:	dfc00117 	ldw	ra,4(sp)
    4820:	df000017 	ldw	fp,0(sp)
    4824:	dec00204 	addi	sp,sp,8
    4828:	f800283a 	ret

0000482c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    482c:	defff804 	addi	sp,sp,-32
    4830:	dfc00715 	stw	ra,28(sp)
    4834:	df000615 	stw	fp,24(sp)
    4838:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    483c:	008000c4 	movi	r2,3
    4840:	d8800415 	stw	r2,16(sp)
    4844:	d8000315 	stw	zero,12(sp)
    4848:	00808004 	movi	r2,512
    484c:	d8800215 	stw	r2,8(sp)
    4850:	00800074 	movhi	r2,1
    4854:	10964004 	addi	r2,r2,22784
    4858:	d8800115 	stw	r2,4(sp)
    485c:	00bfff94 	movui	r2,65534
    4860:	d8800015 	stw	r2,0(sp)
    4864:	01c004c4 	movi	r7,19
    4868:	01800074 	movhi	r6,1
    486c:	31983f04 	addi	r6,r6,24828
    4870:	000b883a 	mov	r5,zero
    4874:	01000034 	movhi	r4,0
    4878:	21132d04 	addi	r4,r4,19636
    487c:	00093240 	call	9324 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    4880:	e1bfff04 	addi	r6,fp,-4
    4884:	01400074 	movhi	r5,1
    4888:	29748c04 	addi	r5,r5,-11728
    488c:	010004c4 	movi	r4,19
    4890:	0009b340 	call	9b34 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    4894:	0001883a 	nop
    4898:	e037883a 	mov	sp,fp
    489c:	dfc00117 	ldw	ra,4(sp)
    48a0:	df000017 	ldw	fp,0(sp)
    48a4:	dec00204 	addi	sp,sp,8
    48a8:	f800283a 	ret

000048ac <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    48ac:	defffb04 	addi	sp,sp,-20
    48b0:	dfc00415 	stw	ra,16(sp)
    48b4:	df000315 	stw	fp,12(sp)
    48b8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    48bc:	01414404 	movi	r5,1296
    48c0:	01000074 	movhi	r4,1
    48c4:	211d8804 	addi	r4,r4,30240
    48c8:	00049900 	call	4990 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    48cc:	01401504 	movi	r5,84
    48d0:	01000074 	movhi	r4,1
    48d4:	211ecc04 	addi	r4,r4,31536
    48d8:	00049900 	call	4990 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    48dc:	00800074 	movhi	r2,1
    48e0:	109d8804 	addi	r2,r2,30240
    48e4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    48e8:	00800074 	movhi	r2,1
    48ec:	109da304 	addi	r2,r2,30348
    48f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    48f4:	e03ffd05 	stb	zero,-12(fp)
    48f8:	00001106 	br	4940 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    48fc:	e0bffe17 	ldw	r2,-8(fp)
    4900:	e0ffff17 	ldw	r3,-4(fp)
    4904:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    4908:	e0bffe17 	ldw	r2,-8(fp)
    490c:	00c00fc4 	movi	r3,63
    4910:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    491c:	e0bffe17 	ldw	r2,-8(fp)
    4920:	10801b04 	addi	r2,r2,108
    4924:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    4928:	e0bfff17 	ldw	r2,-4(fp)
    492c:	10801b04 	addi	r2,r2,108
    4930:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    4934:	e0bffd03 	ldbu	r2,-12(fp)
    4938:	10800044 	addi	r2,r2,1
    493c:	e0bffd05 	stb	r2,-12(fp)
    4940:	e0bffd03 	ldbu	r2,-12(fp)
    4944:	108002f0 	cmpltui	r2,r2,11
    4948:	103fec1e 	bne	r2,zero,48fc <__alt_data_end+0xfffec25c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    494c:	e0bffe17 	ldw	r2,-8(fp)
    4950:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    4954:	e0bffe17 	ldw	r2,-8(fp)
    4958:	00c00fc4 	movi	r3,63
    495c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4960:	e0bffe17 	ldw	r2,-8(fp)
    4964:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    4968:	d0270515 	stw	zero,-25580(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    496c:	00800074 	movhi	r2,1
    4970:	109d8804 	addi	r2,r2,30240
    4974:	d0a70915 	stw	r2,-25564(gp)
}
    4978:	0001883a 	nop
    497c:	e037883a 	mov	sp,fp
    4980:	dfc00117 	ldw	ra,4(sp)
    4984:	df000017 	ldw	fp,0(sp)
    4988:	dec00204 	addi	sp,sp,8
    498c:	f800283a 	ret

00004990 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    4990:	defffd04 	addi	sp,sp,-12
    4994:	df000215 	stw	fp,8(sp)
    4998:	df000204 	addi	fp,sp,8
    499c:	e13ffe15 	stw	r4,-8(fp)
    49a0:	2805883a 	mov	r2,r5
    49a4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    49a8:	00000706 	br	49c8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    49ac:	e0bffe17 	ldw	r2,-8(fp)
    49b0:	10c00044 	addi	r3,r2,1
    49b4:	e0fffe15 	stw	r3,-8(fp)
    49b8:	10000005 	stb	zero,0(r2)
        size--;
    49bc:	e0bfff0b 	ldhu	r2,-4(fp)
    49c0:	10bfffc4 	addi	r2,r2,-1
    49c4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    49c8:	e0bfff0b 	ldhu	r2,-4(fp)
    49cc:	103ff71e 	bne	r2,zero,49ac <__alt_data_end+0xfffec30c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    49d0:	0001883a 	nop
    49d4:	e037883a 	mov	sp,fp
    49d8:	df000017 	ldw	fp,0(sp)
    49dc:	dec00104 	addi	sp,sp,4
    49e0:	f800283a 	ret

000049e4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    49e4:	defffc04 	addi	sp,sp,-16
    49e8:	df000315 	stw	fp,12(sp)
    49ec:	df000304 	addi	fp,sp,12
    49f0:	e13ffd15 	stw	r4,-12(fp)
    49f4:	e17ffe15 	stw	r5,-8(fp)
    49f8:	3005883a 	mov	r2,r6
    49fc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    4a00:	00000b06 	br	4a30 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    4a04:	e0bffd17 	ldw	r2,-12(fp)
    4a08:	10c00044 	addi	r3,r2,1
    4a0c:	e0fffd15 	stw	r3,-12(fp)
    4a10:	e0fffe17 	ldw	r3,-8(fp)
    4a14:	19000044 	addi	r4,r3,1
    4a18:	e13ffe15 	stw	r4,-8(fp)
    4a1c:	18c00003 	ldbu	r3,0(r3)
    4a20:	10c00005 	stb	r3,0(r2)
        size--;
    4a24:	e0bfff0b 	ldhu	r2,-4(fp)
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    4a30:	e0bfff0b 	ldhu	r2,-4(fp)
    4a34:	103ff31e 	bne	r2,zero,4a04 <__alt_data_end+0xfffec364>
        *pdest++ = *psrc++;
        size--;
    }
}
    4a38:	0001883a 	nop
    4a3c:	e037883a 	mov	sp,fp
    4a40:	df000017 	ldw	fp,0(sp)
    4a44:	dec00104 	addi	sp,sp,4
    4a48:	f800283a 	ret

00004a4c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    4a4c:	defffb04 	addi	sp,sp,-20
    4a50:	dfc00415 	stw	ra,16(sp)
    4a54:	df000315 	stw	fp,12(sp)
    4a58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    4a5c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4a60:	0005303a 	rdctl	r2,status
    4a64:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4a68:	e0ffff17 	ldw	r3,-4(fp)
    4a6c:	00bfff84 	movi	r2,-2
    4a70:	1884703a 	and	r2,r3,r2
    4a74:	1001703a 	wrctl	status,r2
  
  return context;
    4a78:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    4a7c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    4a80:	d0a71003 	ldbu	r2,-25536(gp)
    4a84:	10803fcc 	andi	r2,r2,255
    4a88:	10001a1e 	bne	r2,zero,4af4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    4a8c:	d0a70203 	ldbu	r2,-25592(gp)
    4a90:	10803fcc 	andi	r2,r2,255
    4a94:	1000171e 	bne	r2,zero,4af4 <OS_Sched+0xa8>
            OS_SchedNew();
    4a98:	0004b1c0 	call	4b1c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    4a9c:	d0e70403 	ldbu	r3,-25584(gp)
    4aa0:	d0a70443 	ldbu	r2,-25583(gp)
    4aa4:	18c03fcc 	andi	r3,r3,255
    4aa8:	10803fcc 	andi	r2,r2,255
    4aac:	18801126 	beq	r3,r2,4af4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    4ab0:	d0a70403 	ldbu	r2,-25584(gp)
    4ab4:	10c03fcc 	andi	r3,r2,255
    4ab8:	00800074 	movhi	r2,1
    4abc:	109ecc04 	addi	r2,r2,31536
    4ac0:	18c7883a 	add	r3,r3,r3
    4ac4:	18c7883a 	add	r3,r3,r3
    4ac8:	10c5883a 	add	r2,r2,r3
    4acc:	10800017 	ldw	r2,0(r2)
    4ad0:	d0a70c15 	stw	r2,-25552(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    4ad4:	d0a70c17 	ldw	r2,-25552(gp)
    4ad8:	10c00e17 	ldw	r3,56(r2)
    4adc:	18c00044 	addi	r3,r3,1
    4ae0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    4ae4:	d0a70717 	ldw	r2,-25572(gp)
    4ae8:	10800044 	addi	r2,r2,1
    4aec:	d0a70715 	stw	r2,-25572(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    4af0:	000c3540 	call	c354 <OSCtxSw>
    4af4:	e0bffd17 	ldw	r2,-12(fp)
    4af8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4afc:	e0bffe17 	ldw	r2,-8(fp)
    4b00:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    4b04:	0001883a 	nop
    4b08:	e037883a 	mov	sp,fp
    4b0c:	dfc00117 	ldw	ra,4(sp)
    4b10:	df000017 	ldw	fp,0(sp)
    4b14:	dec00204 	addi	sp,sp,8
    4b18:	f800283a 	ret

00004b1c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    4b1c:	defffe04 	addi	sp,sp,-8
    4b20:	df000115 	stw	fp,4(sp)
    4b24:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    4b28:	d0a70e03 	ldbu	r2,-25544(gp)
    4b2c:	10c03fcc 	andi	r3,r2,255
    4b30:	00800074 	movhi	r2,1
    4b34:	10b44804 	addi	r2,r2,-12000
    4b38:	10c5883a 	add	r2,r2,r3
    4b3c:	10800003 	ldbu	r2,0(r2)
    4b40:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    4b44:	e0bfff03 	ldbu	r2,-4(fp)
    4b48:	100490fa 	slli	r2,r2,3
    4b4c:	1009883a 	mov	r4,r2
    4b50:	e0ffff03 	ldbu	r3,-4(fp)
    4b54:	d0a70e44 	addi	r2,gp,-25543
    4b58:	1885883a 	add	r2,r3,r2
    4b5c:	10800003 	ldbu	r2,0(r2)
    4b60:	10c03fcc 	andi	r3,r2,255
    4b64:	00800074 	movhi	r2,1
    4b68:	10b44804 	addi	r2,r2,-12000
    4b6c:	10c5883a 	add	r2,r2,r3
    4b70:	10800003 	ldbu	r2,0(r2)
    4b74:	2085883a 	add	r2,r4,r2
    4b78:	d0a70405 	stb	r2,-25584(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    4b7c:	0001883a 	nop
    4b80:	e037883a 	mov	sp,fp
    4b84:	df000017 	ldw	fp,0(sp)
    4b88:	dec00104 	addi	sp,sp,4
    4b8c:	f800283a 	ret

00004b90 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    4b90:	defffc04 	addi	sp,sp,-16
    4b94:	df000315 	stw	fp,12(sp)
    4b98:	df000304 	addi	fp,sp,12
    4b9c:	e13ffe15 	stw	r4,-8(fp)
    4ba0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    4ba4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    4ba8:	00000b06 	br	4bd8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    4bac:	e0bffe17 	ldw	r2,-8(fp)
    4bb0:	10c00044 	addi	r3,r2,1
    4bb4:	e0fffe15 	stw	r3,-8(fp)
    4bb8:	e0ffff17 	ldw	r3,-4(fp)
    4bbc:	19000044 	addi	r4,r3,1
    4bc0:	e13fff15 	stw	r4,-4(fp)
    4bc4:	18c00003 	ldbu	r3,0(r3)
    4bc8:	10c00005 	stb	r3,0(r2)
        len++;
    4bcc:	e0bffd03 	ldbu	r2,-12(fp)
    4bd0:	10800044 	addi	r2,r2,1
    4bd4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4bd8:	e0bfff17 	ldw	r2,-4(fp)
    4bdc:	10800003 	ldbu	r2,0(r2)
    4be0:	10803fcc 	andi	r2,r2,255
    4be4:	103ff11e 	bne	r2,zero,4bac <__alt_data_end+0xfffec50c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    4be8:	e0bffe17 	ldw	r2,-8(fp)
    4bec:	10000005 	stb	zero,0(r2)
    return (len);
    4bf0:	e0bffd03 	ldbu	r2,-12(fp)
}
    4bf4:	e037883a 	mov	sp,fp
    4bf8:	df000017 	ldw	fp,0(sp)
    4bfc:	dec00104 	addi	sp,sp,4
    4c00:	f800283a 	ret

00004c04 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    4c04:	defffd04 	addi	sp,sp,-12
    4c08:	df000215 	stw	fp,8(sp)
    4c0c:	df000204 	addi	fp,sp,8
    4c10:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    4c14:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    4c18:	00000606 	br	4c34 <OS_StrLen+0x30>
        psrc++;
    4c1c:	e0bfff17 	ldw	r2,-4(fp)
    4c20:	10800044 	addi	r2,r2,1
    4c24:	e0bfff15 	stw	r2,-4(fp)
        len++;
    4c28:	e0bffe03 	ldbu	r2,-8(fp)
    4c2c:	10800044 	addi	r2,r2,1
    4c30:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4c34:	e0bfff17 	ldw	r2,-4(fp)
    4c38:	10800003 	ldbu	r2,0(r2)
    4c3c:	10803fcc 	andi	r2,r2,255
    4c40:	103ff61e 	bne	r2,zero,4c1c <__alt_data_end+0xfffec57c>
        psrc++;
        len++;
    }
    return (len);
    4c44:	e0bffe03 	ldbu	r2,-8(fp)
}
    4c48:	e037883a 	mov	sp,fp
    4c4c:	df000017 	ldw	fp,0(sp)
    4c50:	dec00104 	addi	sp,sp,4
    4c54:	f800283a 	ret

00004c58 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    4c58:	defffa04 	addi	sp,sp,-24
    4c5c:	dfc00515 	stw	ra,20(sp)
    4c60:	df000415 	stw	fp,16(sp)
    4c64:	df000404 	addi	fp,sp,16
    4c68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4c6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4c70:	0005303a 	rdctl	r2,status
    4c74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4c78:	e0fffd17 	ldw	r3,-12(fp)
    4c7c:	00bfff84 	movi	r2,-2
    4c80:	1884703a 	and	r2,r3,r2
    4c84:	1001703a 	wrctl	status,r2
  
  return context;
    4c88:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    4c8c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    4c90:	d0a70317 	ldw	r2,-25588(gp)
    4c94:	10800044 	addi	r2,r2,1
    4c98:	d0a70315 	stw	r2,-25588(gp)
    4c9c:	e0bffc17 	ldw	r2,-16(fp)
    4ca0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ca4:	e0bffe17 	ldw	r2,-8(fp)
    4ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    4cac:	000c6680 	call	c668 <OSTaskIdleHook>
    }
    4cb0:	003fef06 	br	4c70 <__alt_data_end+0xfffec5d0>

00004cb4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    4cb4:	defffa04 	addi	sp,sp,-24
    4cb8:	dfc00515 	stw	ra,20(sp)
    4cbc:	df000415 	stw	fp,16(sp)
    4cc0:	df000404 	addi	fp,sp,16
    4cc4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4cc8:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4ccc:	00000206 	br	4cd8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    4cd0:	01003204 	movi	r4,200
    4cd4:	000a3f40 	call	a3f4 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    4cd8:	d0a71403 	ldbu	r2,-25520(gp)
    4cdc:	10803fcc 	andi	r2,r2,255
    4ce0:	103ffb26 	beq	r2,zero,4cd0 <__alt_data_end+0xfffec630>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    4ce4:	d0a70817 	ldw	r2,-25568(gp)
    4ce8:	01401904 	movi	r5,100
    4cec:	1009883a 	mov	r4,r2
    4cf0:	000d00c0 	call	d00c <__udivsi3>
    4cf4:	d0a70815 	stw	r2,-25568(gp)
    if (OSIdleCtrMax == 0L) {
    4cf8:	d0a70817 	ldw	r2,-25568(gp)
    4cfc:	1000031e 	bne	r2,zero,4d0c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    4d00:	d0270a05 	stb	zero,-25560(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    4d04:	01003fc4 	movi	r4,255
    4d08:	000a07c0 	call	a07c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d0c:	0005303a 	rdctl	r2,status
    4d10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d14:	e0fffd17 	ldw	r3,-12(fp)
    4d18:	00bfff84 	movi	r2,-2
    4d1c:	1884703a 	and	r2,r3,r2
    4d20:	1001703a 	wrctl	status,r2
  
  return context;
    4d24:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    4d28:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    4d2c:	d0a70317 	ldw	r2,-25588(gp)
    4d30:	d0a71515 	stw	r2,-25516(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    4d34:	d0270315 	stw	zero,-25588(gp)
    4d38:	e0bffc17 	ldw	r2,-16(fp)
    4d3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4d40:	e0bffe17 	ldw	r2,-8(fp)
    4d44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    4d48:	d0a71517 	ldw	r2,-25516(gp)
    4d4c:	d0e70817 	ldw	r3,-25568(gp)
    4d50:	180b883a 	mov	r5,r3
    4d54:	1009883a 	mov	r4,r2
    4d58:	000d00c0 	call	d00c <__udivsi3>
    4d5c:	1007883a 	mov	r3,r2
    4d60:	00801904 	movi	r2,100
    4d64:	10c5c83a 	sub	r2,r2,r3
    4d68:	d0a70a05 	stb	r2,-25560(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    4d6c:	000c5e80 	call	c5e8 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    4d70:	0004d800 	call	4d80 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    4d74:	01001904 	movi	r4,100
    4d78:	000a3f40 	call	a3f4 <OSTimeDly>
    }
    4d7c:	003fe306 	br	4d0c <__alt_data_end+0xfffec66c>

00004d80 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    4d80:	defffa04 	addi	sp,sp,-24
    4d84:	dfc00515 	stw	ra,20(sp)
    4d88:	df000415 	stw	fp,16(sp)
    4d8c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4d90:	e03ffc05 	stb	zero,-16(fp)
    4d94:	00002406 	br	4e28 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    4d98:	e0bffc03 	ldbu	r2,-16(fp)
    4d9c:	e0fffe04 	addi	r3,fp,-8
    4da0:	180b883a 	mov	r5,r3
    4da4:	1009883a 	mov	r4,r2
    4da8:	0009ebc0 	call	9ebc <OSTaskStkChk>
    4dac:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    4db0:	e0bffc43 	ldbu	r2,-15(fp)
    4db4:	1000191e 	bne	r2,zero,4e1c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    4db8:	e0fffc03 	ldbu	r3,-16(fp)
    4dbc:	00800074 	movhi	r2,1
    4dc0:	109ecc04 	addi	r2,r2,31536
    4dc4:	18c7883a 	add	r3,r3,r3
    4dc8:	18c7883a 	add	r3,r3,r3
    4dcc:	10c5883a 	add	r2,r2,r3
    4dd0:	10800017 	ldw	r2,0(r2)
    4dd4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    4dd8:	e0bffd17 	ldw	r2,-12(fp)
    4ddc:	10000f26 	beq	r2,zero,4e1c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    4de0:	e0bffd17 	ldw	r2,-12(fp)
    4de4:	10800060 	cmpeqi	r2,r2,1
    4de8:	10000c1e 	bne	r2,zero,4e1c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    4dec:	e0bffd17 	ldw	r2,-12(fp)
    4df0:	10c00217 	ldw	r3,8(r2)
    4df4:	e0bffd17 	ldw	r2,-12(fp)
    4df8:	10800317 	ldw	r2,12(r2)
    4dfc:	1085883a 	add	r2,r2,r2
    4e00:	1085883a 	add	r2,r2,r2
    4e04:	1887883a 	add	r3,r3,r2
    4e08:	e0bffd17 	ldw	r2,-12(fp)
    4e0c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    4e10:	e0ffff17 	ldw	r3,-4(fp)
    4e14:	e0bffd17 	ldw	r2,-12(fp)
    4e18:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    4e1c:	e0bffc03 	ldbu	r2,-16(fp)
    4e20:	10800044 	addi	r2,r2,1
    4e24:	e0bffc05 	stb	r2,-16(fp)
    4e28:	e0bffc03 	ldbu	r2,-16(fp)
    4e2c:	10800570 	cmpltui	r2,r2,21
    4e30:	103fd91e 	bne	r2,zero,4d98 <__alt_data_end+0xfffec6f8>
#endif
                }
            }
        }
    }
}
    4e34:	0001883a 	nop
    4e38:	e037883a 	mov	sp,fp
    4e3c:	dfc00117 	ldw	ra,4(sp)
    4e40:	df000017 	ldw	fp,0(sp)
    4e44:	dec00204 	addi	sp,sp,8
    4e48:	f800283a 	ret

00004e4c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    4e4c:	defff204 	addi	sp,sp,-56
    4e50:	dfc00d15 	stw	ra,52(sp)
    4e54:	df000c15 	stw	fp,48(sp)
    4e58:	df000c04 	addi	fp,sp,48
    4e5c:	e17ffc15 	stw	r5,-16(fp)
    4e60:	e1bffd15 	stw	r6,-12(fp)
    4e64:	3807883a 	mov	r3,r7
    4e68:	e0800417 	ldw	r2,16(fp)
    4e6c:	e13ffb05 	stb	r4,-20(fp)
    4e70:	e0fffe0d 	sth	r3,-8(fp)
    4e74:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4e78:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4e7c:	0005303a 	rdctl	r2,status
    4e80:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4e84:	e0fffa17 	ldw	r3,-24(fp)
    4e88:	00bfff84 	movi	r2,-2
    4e8c:	1884703a 	and	r2,r3,r2
    4e90:	1001703a 	wrctl	status,r2
  
  return context;
    4e94:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    4e98:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    4e9c:	d0a70917 	ldw	r2,-25564(gp)
    4ea0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    4ea4:	e0bff617 	ldw	r2,-40(fp)
    4ea8:	10009326 	beq	r2,zero,50f8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    4eac:	e0bff617 	ldw	r2,-40(fp)
    4eb0:	10800517 	ldw	r2,20(r2)
    4eb4:	d0a70915 	stw	r2,-25564(gp)
    4eb8:	e0bff417 	ldw	r2,-48(fp)
    4ebc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4ec0:	e0bff817 	ldw	r2,-32(fp)
    4ec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    4ec8:	e0bff617 	ldw	r2,-40(fp)
    4ecc:	e0fffc17 	ldw	r3,-16(fp)
    4ed0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    4ed4:	e0bff617 	ldw	r2,-40(fp)
    4ed8:	e0fffb03 	ldbu	r3,-20(fp)
    4edc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    4ee0:	e0bff617 	ldw	r2,-40(fp)
    4ee4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    4ee8:	e0bff617 	ldw	r2,-40(fp)
    4eec:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    4ef0:	e0bff617 	ldw	r2,-40(fp)
    4ef4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    4ef8:	e0bff617 	ldw	r2,-40(fp)
    4efc:	e0c00317 	ldw	r3,12(fp)
    4f00:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    4f04:	e0bff617 	ldw	r2,-40(fp)
    4f08:	e0c00217 	ldw	r3,8(fp)
    4f0c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    4f10:	e0bff617 	ldw	r2,-40(fp)
    4f14:	e0fffd17 	ldw	r3,-12(fp)
    4f18:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    4f1c:	e0bff617 	ldw	r2,-40(fp)
    4f20:	e0ffff0b 	ldhu	r3,-4(fp)
    4f24:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    4f28:	e0bff617 	ldw	r2,-40(fp)
    4f2c:	e0fffe0b 	ldhu	r3,-8(fp)
    4f30:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    4f34:	e0bff617 	ldw	r2,-40(fp)
    4f38:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    4f3c:	e0bffb03 	ldbu	r2,-20(fp)
    4f40:	1004d0fa 	srli	r2,r2,3
    4f44:	1007883a 	mov	r3,r2
    4f48:	e0bff617 	ldw	r2,-40(fp)
    4f4c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    4f50:	e0bffb03 	ldbu	r2,-20(fp)
    4f54:	108001cc 	andi	r2,r2,7
    4f58:	1007883a 	mov	r3,r2
    4f5c:	e0bff617 	ldw	r2,-40(fp)
    4f60:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    4f64:	e0bff617 	ldw	r2,-40(fp)
    4f68:	10800d03 	ldbu	r2,52(r2)
    4f6c:	10803fcc 	andi	r2,r2,255
    4f70:	00c00044 	movi	r3,1
    4f74:	1884983a 	sll	r2,r3,r2
    4f78:	1007883a 	mov	r3,r2
    4f7c:	e0bff617 	ldw	r2,-40(fp)
    4f80:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    4f84:	e0bff617 	ldw	r2,-40(fp)
    4f88:	10800cc3 	ldbu	r2,51(r2)
    4f8c:	10803fcc 	andi	r2,r2,255
    4f90:	00c00044 	movi	r3,1
    4f94:	1884983a 	sll	r2,r3,r2
    4f98:	1007883a 	mov	r3,r2
    4f9c:	e0bff617 	ldw	r2,-40(fp)
    4fa0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    4fa4:	e0bff617 	ldw	r2,-40(fp)
    4fa8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    4fac:	e0bff617 	ldw	r2,-40(fp)
    4fb0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    4fb4:	e0bff617 	ldw	r2,-40(fp)
    4fb8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    4fbc:	e0bff617 	ldw	r2,-40(fp)
    4fc0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    4fc4:	e0bff617 	ldw	r2,-40(fp)
    4fc8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    4fcc:	e0bff617 	ldw	r2,-40(fp)
    4fd0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    4fd4:	e0bff617 	ldw	r2,-40(fp)
    4fd8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    4fdc:	e0bff617 	ldw	r2,-40(fp)
    4fe0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    4fe4:	e0bff617 	ldw	r2,-40(fp)
    4fe8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    4fec:	e0bff617 	ldw	r2,-40(fp)
    4ff0:	00c00fc4 	movi	r3,63
    4ff4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    4ff8:	e0bff617 	ldw	r2,-40(fp)
    4ffc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    5000:	e13ff617 	ldw	r4,-40(fp)
    5004:	000c6880 	call	c688 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    5008:	e13ff617 	ldw	r4,-40(fp)
    500c:	000c5800 	call	c580 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5010:	0005303a 	rdctl	r2,status
    5014:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5018:	e0fff517 	ldw	r3,-44(fp)
    501c:	00bfff84 	movi	r2,-2
    5020:	1884703a 	and	r2,r3,r2
    5024:	1001703a 	wrctl	status,r2
  
  return context;
    5028:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    502c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    5030:	e0fffb03 	ldbu	r3,-20(fp)
    5034:	00800074 	movhi	r2,1
    5038:	109ecc04 	addi	r2,r2,31536
    503c:	18c7883a 	add	r3,r3,r3
    5040:	18c7883a 	add	r3,r3,r3
    5044:	10c5883a 	add	r2,r2,r3
    5048:	e0fff617 	ldw	r3,-40(fp)
    504c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    5050:	d0e70517 	ldw	r3,-25580(gp)
    5054:	e0bff617 	ldw	r2,-40(fp)
    5058:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    505c:	e0bff617 	ldw	r2,-40(fp)
    5060:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    5064:	d0a70517 	ldw	r2,-25580(gp)
    5068:	10000326 	beq	r2,zero,5078 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    506c:	d0a70517 	ldw	r2,-25580(gp)
    5070:	e0fff617 	ldw	r3,-40(fp)
    5074:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    5078:	e0bff617 	ldw	r2,-40(fp)
    507c:	d0a70515 	stw	r2,-25580(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    5080:	e0bff617 	ldw	r2,-40(fp)
    5084:	10c00d83 	ldbu	r3,54(r2)
    5088:	d0a70e03 	ldbu	r2,-25544(gp)
    508c:	1884b03a 	or	r2,r3,r2
    5090:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5094:	e0bff617 	ldw	r2,-40(fp)
    5098:	10800d03 	ldbu	r2,52(r2)
    509c:	10c03fcc 	andi	r3,r2,255
    50a0:	e0bff617 	ldw	r2,-40(fp)
    50a4:	10800d03 	ldbu	r2,52(r2)
    50a8:	11003fcc 	andi	r4,r2,255
    50ac:	d0a70e44 	addi	r2,gp,-25543
    50b0:	2085883a 	add	r2,r4,r2
    50b4:	11000003 	ldbu	r4,0(r2)
    50b8:	e0bff617 	ldw	r2,-40(fp)
    50bc:	10800d43 	ldbu	r2,53(r2)
    50c0:	2084b03a 	or	r2,r4,r2
    50c4:	1009883a 	mov	r4,r2
    50c8:	d0a70e44 	addi	r2,gp,-25543
    50cc:	1885883a 	add	r2,r3,r2
    50d0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    50d4:	d0a70a43 	ldbu	r2,-25559(gp)
    50d8:	10800044 	addi	r2,r2,1
    50dc:	d0a70a45 	stb	r2,-25559(gp)
    50e0:	e0bff417 	ldw	r2,-48(fp)
    50e4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50e8:	e0bff717 	ldw	r2,-36(fp)
    50ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    50f0:	0005883a 	mov	r2,zero
    50f4:	00000506 	br	510c <OS_TCBInit+0x2c0>
    50f8:	e0bff417 	ldw	r2,-48(fp)
    50fc:	e0bff915 	stw	r2,-28(fp)
    5100:	e0bff917 	ldw	r2,-28(fp)
    5104:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    5108:	00801084 	movi	r2,66
}
    510c:	e037883a 	mov	sp,fp
    5110:	dfc00117 	ldw	ra,4(sp)
    5114:	df000017 	ldw	fp,0(sp)
    5118:	dec00204 	addi	sp,sp,8
    511c:	f800283a 	ret

00005120 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    5120:	defffe04 	addi	sp,sp,-8
    5124:	df000115 	stw	fp,4(sp)
    5128:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    512c:	d0a00d04 	addi	r2,gp,-32716
    5130:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    5134:	d0a00e04 	addi	r2,gp,-32712
    5138:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    513c:	d0a00f84 	addi	r2,gp,-32706
    5140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    5144:	d0a01004 	addi	r2,gp,-32704
    5148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    514c:	d0a00f04 	addi	r2,gp,-32708
    5150:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    5154:	d0a01084 	addi	r2,gp,-32702
    5158:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    515c:	d0a01104 	addi	r2,gp,-32700
    5160:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    5164:	d0a01184 	addi	r2,gp,-32698
    5168:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    516c:	d0a01204 	addi	r2,gp,-32696
    5170:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    5174:	d0a01284 	addi	r2,gp,-32694
    5178:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    517c:	d0a01304 	addi	r2,gp,-32692
    5180:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    5184:	d0a01384 	addi	r2,gp,-32690
    5188:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    518c:	d0a01404 	addi	r2,gp,-32688
    5190:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    5194:	d0a01484 	addi	r2,gp,-32686
    5198:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    519c:	d0a01504 	addi	r2,gp,-32684
    51a0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    51a4:	d0a01584 	addi	r2,gp,-32682
    51a8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    51ac:	d0a01604 	addi	r2,gp,-32680
    51b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    51b4:	d0a01684 	addi	r2,gp,-32678
    51b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    51bc:	d0a01704 	addi	r2,gp,-32676
    51c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    51c4:	d0a01784 	addi	r2,gp,-32674
    51c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    51cc:	d0a01804 	addi	r2,gp,-32672
    51d0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    51d4:	d0a01884 	addi	r2,gp,-32670
    51d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    51dc:	d0a01904 	addi	r2,gp,-32668
    51e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    51e4:	d0a01984 	addi	r2,gp,-32666
    51e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    51ec:	d0a01a04 	addi	r2,gp,-32664
    51f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    51f4:	d0a01a84 	addi	r2,gp,-32662
    51f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    51fc:	d0a01b04 	addi	r2,gp,-32660
    5200:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    5204:	d0a01b84 	addi	r2,gp,-32658
    5208:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    520c:	d0a01c04 	addi	r2,gp,-32656
    5210:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    5214:	d0a01c84 	addi	r2,gp,-32654
    5218:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    521c:	d0a01d04 	addi	r2,gp,-32652
    5220:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    5224:	d0a01d84 	addi	r2,gp,-32650
    5228:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    522c:	d0a01e04 	addi	r2,gp,-32648
    5230:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    5234:	d0a01e84 	addi	r2,gp,-32646
    5238:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    523c:	d0a01f04 	addi	r2,gp,-32644
    5240:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    5244:	d0a01f84 	addi	r2,gp,-32642
    5248:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    524c:	d0a02004 	addi	r2,gp,-32640
    5250:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    5254:	d0a02084 	addi	r2,gp,-32638
    5258:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    525c:	d0a02104 	addi	r2,gp,-32636
    5260:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    5264:	d0a02184 	addi	r2,gp,-32634
    5268:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    526c:	d0a02204 	addi	r2,gp,-32632
    5270:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    5274:	d0a02284 	addi	r2,gp,-32630
    5278:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    527c:	d0a02304 	addi	r2,gp,-32628
    5280:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    5284:	d0a02384 	addi	r2,gp,-32626
    5288:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    528c:	d0a02404 	addi	r2,gp,-32624
    5290:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    5294:	d0a02904 	addi	r2,gp,-32604
    5298:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    529c:	0001883a 	nop
    52a0:	e037883a 	mov	sp,fp
    52a4:	df000017 	ldw	fp,0(sp)
    52a8:	dec00104 	addi	sp,sp,4
    52ac:	f800283a 	ret

000052b0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    52b0:	defff204 	addi	sp,sp,-56
    52b4:	df000d15 	stw	fp,52(sp)
    52b8:	df000d04 	addi	fp,sp,52
    52bc:	e13ffc15 	stw	r4,-16(fp)
    52c0:	2807883a 	mov	r3,r5
    52c4:	3005883a 	mov	r2,r6
    52c8:	e1ffff15 	stw	r7,-4(fp)
    52cc:	e0fffd0d 	sth	r3,-12(fp)
    52d0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    52d4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    52d8:	e0bfff17 	ldw	r2,-4(fp)
    52dc:	1000021e 	bne	r2,zero,52e8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    52e0:	0005883a 	mov	r2,zero
    52e4:	0000b006 	br	55a8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    52e8:	e0bffc17 	ldw	r2,-16(fp)
    52ec:	1000051e 	bne	r2,zero,5304 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    52f0:	e0bfff17 	ldw	r2,-4(fp)
    52f4:	00c01b84 	movi	r3,110
    52f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    52fc:	0005883a 	mov	r2,zero
    5300:	0000a906 	br	55a8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5304:	e0bffc17 	ldw	r2,-16(fp)
    5308:	10800003 	ldbu	r2,0(r2)
    530c:	10803fcc 	andi	r2,r2,255
    5310:	10800160 	cmpeqi	r2,r2,5
    5314:	1000051e 	bne	r2,zero,532c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    5318:	e0bfff17 	ldw	r2,-4(fp)
    531c:	00c00044 	movi	r3,1
    5320:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5324:	0005883a 	mov	r2,zero
    5328:	00009f06 	br	55a8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    532c:	e0fffe03 	ldbu	r3,-8(fp)
    5330:	00bfe004 	movi	r2,-128
    5334:	1884703a 	and	r2,r3,r2
    5338:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    533c:	e0bff503 	ldbu	r2,-44(fp)
    5340:	10000626 	beq	r2,zero,535c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    5344:	e0bffe03 	ldbu	r2,-8(fp)
    5348:	10801fcc 	andi	r2,r2,127
    534c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5350:	00800044 	movi	r2,1
    5354:	e0bff385 	stb	r2,-50(fp)
    5358:	00000106 	br	5360 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    535c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    5360:	e0bfff17 	ldw	r2,-4(fp)
    5364:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5368:	0005303a 	rdctl	r2,status
    536c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5370:	e0fffb17 	ldw	r3,-20(fp)
    5374:	00bfff84 	movi	r2,-2
    5378:	1884703a 	and	r2,r3,r2
    537c:	1001703a 	wrctl	status,r2
  
  return context;
    5380:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    5384:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    5388:	e0bffe03 	ldbu	r2,-8(fp)
    538c:	10c00060 	cmpeqi	r3,r2,1
    5390:	18005f1e 	bne	r3,zero,5510 <OSFlagAccept+0x260>
    5394:	10c00088 	cmpgei	r3,r2,2
    5398:	1800021e 	bne	r3,zero,53a4 <OSFlagAccept+0xf4>
    539c:	10003f26 	beq	r2,zero,549c <OSFlagAccept+0x1ec>
    53a0:	00007706 	br	5580 <OSFlagAccept+0x2d0>
    53a4:	10c000a0 	cmpeqi	r3,r2,2
    53a8:	1800031e 	bne	r3,zero,53b8 <OSFlagAccept+0x108>
    53ac:	108000e0 	cmpeqi	r2,r2,3
    53b0:	10001e1e 	bne	r2,zero,542c <OSFlagAccept+0x17c>
    53b4:	00007206 	br	5580 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    53b8:	e0bffc17 	ldw	r2,-16(fp)
    53bc:	10c0020b 	ldhu	r3,8(r2)
    53c0:	e0bffd0b 	ldhu	r2,-12(fp)
    53c4:	1884703a 	and	r2,r3,r2
    53c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    53cc:	e0fff30b 	ldhu	r3,-52(fp)
    53d0:	e0bffd0b 	ldhu	r2,-12(fp)
    53d4:	18800d1e 	bne	r3,r2,540c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    53d8:	e0bff383 	ldbu	r2,-50(fp)
    53dc:	10800058 	cmpnei	r2,r2,1
    53e0:	10000d1e 	bne	r2,zero,5418 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    53e4:	e0bffc17 	ldw	r2,-16(fp)
    53e8:	1080020b 	ldhu	r2,8(r2)
    53ec:	1007883a 	mov	r3,r2
    53f0:	e0bff30b 	ldhu	r2,-52(fp)
    53f4:	0084303a 	nor	r2,zero,r2
    53f8:	1884703a 	and	r2,r3,r2
    53fc:	1007883a 	mov	r3,r2
    5400:	e0bffc17 	ldw	r2,-16(fp)
    5404:	10c0020d 	sth	r3,8(r2)
    5408:	00000306 	br	5418 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    540c:	e0bfff17 	ldw	r2,-4(fp)
    5410:	00c01c04 	movi	r3,112
    5414:	10c00005 	stb	r3,0(r2)
    5418:	e0bff417 	ldw	r2,-48(fp)
    541c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5420:	e0bff617 	ldw	r2,-40(fp)
    5424:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5428:	00005e06 	br	55a4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    542c:	e0bffc17 	ldw	r2,-16(fp)
    5430:	10c0020b 	ldhu	r3,8(r2)
    5434:	e0bffd0b 	ldhu	r2,-12(fp)
    5438:	1884703a 	and	r2,r3,r2
    543c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5440:	e0bff30b 	ldhu	r2,-52(fp)
    5444:	10000d26 	beq	r2,zero,547c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5448:	e0bff383 	ldbu	r2,-50(fp)
    544c:	10800058 	cmpnei	r2,r2,1
    5450:	10000d1e 	bne	r2,zero,5488 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5454:	e0bffc17 	ldw	r2,-16(fp)
    5458:	1080020b 	ldhu	r2,8(r2)
    545c:	1007883a 	mov	r3,r2
    5460:	e0bff30b 	ldhu	r2,-52(fp)
    5464:	0084303a 	nor	r2,zero,r2
    5468:	1884703a 	and	r2,r3,r2
    546c:	1007883a 	mov	r3,r2
    5470:	e0bffc17 	ldw	r2,-16(fp)
    5474:	10c0020d 	sth	r3,8(r2)
    5478:	00000306 	br	5488 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    547c:	e0bfff17 	ldw	r2,-4(fp)
    5480:	00c01c04 	movi	r3,112
    5484:	10c00005 	stb	r3,0(r2)
    5488:	e0bff417 	ldw	r2,-48(fp)
    548c:	e0bff715 	stw	r2,-36(fp)
    5490:	e0bff717 	ldw	r2,-36(fp)
    5494:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    5498:	00004206 	br	55a4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    549c:	e0bffc17 	ldw	r2,-16(fp)
    54a0:	1080020b 	ldhu	r2,8(r2)
    54a4:	0084303a 	nor	r2,zero,r2
    54a8:	1007883a 	mov	r3,r2
    54ac:	e0bffd0b 	ldhu	r2,-12(fp)
    54b0:	1884703a 	and	r2,r3,r2
    54b4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    54b8:	e0fff30b 	ldhu	r3,-52(fp)
    54bc:	e0bffd0b 	ldhu	r2,-12(fp)
    54c0:	18800b1e 	bne	r3,r2,54f0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    54c4:	e0bff383 	ldbu	r2,-50(fp)
    54c8:	10800058 	cmpnei	r2,r2,1
    54cc:	10000b1e 	bne	r2,zero,54fc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    54d0:	e0bffc17 	ldw	r2,-16(fp)
    54d4:	10c0020b 	ldhu	r3,8(r2)
    54d8:	e0bff30b 	ldhu	r2,-52(fp)
    54dc:	1884b03a 	or	r2,r3,r2
    54e0:	1007883a 	mov	r3,r2
    54e4:	e0bffc17 	ldw	r2,-16(fp)
    54e8:	10c0020d 	sth	r3,8(r2)
    54ec:	00000306 	br	54fc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    54f0:	e0bfff17 	ldw	r2,-4(fp)
    54f4:	00c01c04 	movi	r3,112
    54f8:	10c00005 	stb	r3,0(r2)
    54fc:	e0bff417 	ldw	r2,-48(fp)
    5500:	e0bff815 	stw	r2,-32(fp)
    5504:	e0bff817 	ldw	r2,-32(fp)
    5508:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    550c:	00002506 	br	55a4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5510:	e0bffc17 	ldw	r2,-16(fp)
    5514:	1080020b 	ldhu	r2,8(r2)
    5518:	0084303a 	nor	r2,zero,r2
    551c:	1007883a 	mov	r3,r2
    5520:	e0bffd0b 	ldhu	r2,-12(fp)
    5524:	1884703a 	and	r2,r3,r2
    5528:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    552c:	e0bff30b 	ldhu	r2,-52(fp)
    5530:	10000b26 	beq	r2,zero,5560 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5534:	e0bff383 	ldbu	r2,-50(fp)
    5538:	10800058 	cmpnei	r2,r2,1
    553c:	10000b1e 	bne	r2,zero,556c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5540:	e0bffc17 	ldw	r2,-16(fp)
    5544:	10c0020b 	ldhu	r3,8(r2)
    5548:	e0bff30b 	ldhu	r2,-52(fp)
    554c:	1884b03a 	or	r2,r3,r2
    5550:	1007883a 	mov	r3,r2
    5554:	e0bffc17 	ldw	r2,-16(fp)
    5558:	10c0020d 	sth	r3,8(r2)
    555c:	00000306 	br	556c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    5560:	e0bfff17 	ldw	r2,-4(fp)
    5564:	00c01c04 	movi	r3,112
    5568:	10c00005 	stb	r3,0(r2)
    556c:	e0bff417 	ldw	r2,-48(fp)
    5570:	e0bff915 	stw	r2,-28(fp)
    5574:	e0bff917 	ldw	r2,-28(fp)
    5578:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    557c:	00000906 	br	55a4 <OSFlagAccept+0x2f4>
    5580:	e0bff417 	ldw	r2,-48(fp)
    5584:	e0bffa15 	stw	r2,-24(fp)
    5588:	e0bffa17 	ldw	r2,-24(fp)
    558c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5590:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    5594:	e0bfff17 	ldw	r2,-4(fp)
    5598:	00c01bc4 	movi	r3,111
    559c:	10c00005 	stb	r3,0(r2)
             break;
    55a0:	0001883a 	nop
    }
    return (flags_rdy);
    55a4:	e0bff30b 	ldhu	r2,-52(fp)
}
    55a8:	e037883a 	mov	sp,fp
    55ac:	df000017 	ldw	fp,0(sp)
    55b0:	dec00104 	addi	sp,sp,4
    55b4:	f800283a 	ret

000055b8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    55b8:	defff804 	addi	sp,sp,-32
    55bc:	df000715 	stw	fp,28(sp)
    55c0:	df000704 	addi	fp,sp,28
    55c4:	2005883a 	mov	r2,r4
    55c8:	e17fff15 	stw	r5,-4(fp)
    55cc:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    55d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    55d4:	e0bfff17 	ldw	r2,-4(fp)
    55d8:	1000021e 	bne	r2,zero,55e4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    55dc:	0005883a 	mov	r2,zero
    55e0:	00003306 	br	56b0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    55e4:	d0a71003 	ldbu	r2,-25536(gp)
    55e8:	10803fcc 	andi	r2,r2,255
    55ec:	10000526 	beq	r2,zero,5604 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    55f0:	e0bfff17 	ldw	r2,-4(fp)
    55f4:	00c00404 	movi	r3,16
    55f8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    55fc:	0005883a 	mov	r2,zero
    5600:	00002b06 	br	56b0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5604:	0005303a 	rdctl	r2,status
    5608:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    560c:	e0fffd17 	ldw	r3,-12(fp)
    5610:	00bfff84 	movi	r2,-2
    5614:	1884703a 	and	r2,r3,r2
    5618:	1001703a 	wrctl	status,r2
  
  return context;
    561c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5620:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    5624:	d0a71317 	ldw	r2,-25524(gp)
    5628:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    562c:	e0bffb17 	ldw	r2,-20(fp)
    5630:	10001726 	beq	r2,zero,5690 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    5634:	d0a71317 	ldw	r2,-25524(gp)
    5638:	10800117 	ldw	r2,4(r2)
    563c:	d0a71315 	stw	r2,-25524(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    5640:	e0bffb17 	ldw	r2,-20(fp)
    5644:	00c00144 	movi	r3,5
    5648:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    564c:	e0bffb17 	ldw	r2,-20(fp)
    5650:	e0fffe0b 	ldhu	r3,-8(fp)
    5654:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    5658:	e0bffb17 	ldw	r2,-20(fp)
    565c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    5660:	e0bffb17 	ldw	r2,-20(fp)
    5664:	00c00fc4 	movi	r3,63
    5668:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    566c:	e0bffb17 	ldw	r2,-20(fp)
    5670:	100002c5 	stb	zero,11(r2)
    5674:	e0bff917 	ldw	r2,-28(fp)
    5678:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    567c:	e0bffa17 	ldw	r2,-24(fp)
    5680:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    5684:	e0bfff17 	ldw	r2,-4(fp)
    5688:	10000005 	stb	zero,0(r2)
    568c:	00000706 	br	56ac <OSFlagCreate+0xf4>
    5690:	e0bff917 	ldw	r2,-28(fp)
    5694:	e0bffc15 	stw	r2,-16(fp)
    5698:	e0bffc17 	ldw	r2,-16(fp)
    569c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    56a0:	e0bfff17 	ldw	r2,-4(fp)
    56a4:	00c01c84 	movi	r3,114
    56a8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    56ac:	e0bffb17 	ldw	r2,-20(fp)
}
    56b0:	e037883a 	mov	sp,fp
    56b4:	df000017 	ldw	fp,0(sp)
    56b8:	dec00104 	addi	sp,sp,4
    56bc:	f800283a 	ret

000056c0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    56c0:	defff204 	addi	sp,sp,-56
    56c4:	dfc00d15 	stw	ra,52(sp)
    56c8:	df000c15 	stw	fp,48(sp)
    56cc:	df000c04 	addi	fp,sp,48
    56d0:	e13ffd15 	stw	r4,-12(fp)
    56d4:	2805883a 	mov	r2,r5
    56d8:	e1bfff15 	stw	r6,-4(fp)
    56dc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    56e0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    56e4:	e0bfff17 	ldw	r2,-4(fp)
    56e8:	1000021e 	bne	r2,zero,56f4 <OSFlagDel+0x34>
        return (pgrp);
    56ec:	e0bffd17 	ldw	r2,-12(fp)
    56f0:	00008006 	br	58f4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    56f4:	e0bffd17 	ldw	r2,-12(fp)
    56f8:	1000051e 	bne	r2,zero,5710 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    56fc:	e0bfff17 	ldw	r2,-4(fp)
    5700:	00c01b84 	movi	r3,110
    5704:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    5708:	e0bffd17 	ldw	r2,-12(fp)
    570c:	00007906 	br	58f4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5710:	d0a71003 	ldbu	r2,-25536(gp)
    5714:	10803fcc 	andi	r2,r2,255
    5718:	10000526 	beq	r2,zero,5730 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    571c:	e0bfff17 	ldw	r2,-4(fp)
    5720:	00c003c4 	movi	r3,15
    5724:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    5728:	e0bffd17 	ldw	r2,-12(fp)
    572c:	00007106 	br	58f4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    5730:	e0bffd17 	ldw	r2,-12(fp)
    5734:	10800003 	ldbu	r2,0(r2)
    5738:	10803fcc 	andi	r2,r2,255
    573c:	10800160 	cmpeqi	r2,r2,5
    5740:	1000051e 	bne	r2,zero,5758 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    5744:	e0bfff17 	ldw	r2,-4(fp)
    5748:	00c00044 	movi	r3,1
    574c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    5750:	e0bffd17 	ldw	r2,-12(fp)
    5754:	00006706 	br	58f4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5758:	0005303a 	rdctl	r2,status
    575c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5760:	e0fffc17 	ldw	r3,-16(fp)
    5764:	00bfff84 	movi	r2,-2
    5768:	1884703a 	and	r2,r3,r2
    576c:	1001703a 	wrctl	status,r2
  
  return context;
    5770:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5774:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    5778:	e0bffd17 	ldw	r2,-12(fp)
    577c:	10800117 	ldw	r2,4(r2)
    5780:	10000326 	beq	r2,zero,5790 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5784:	00800044 	movi	r2,1
    5788:	e0bff405 	stb	r2,-48(fp)
    578c:	00000106 	br	5794 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    5790:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    5794:	e0bffe03 	ldbu	r2,-8(fp)
    5798:	10000326 	beq	r2,zero,57a8 <OSFlagDel+0xe8>
    579c:	10800060 	cmpeqi	r2,r2,1
    57a0:	1000231e 	bne	r2,zero,5830 <OSFlagDel+0x170>
    57a4:	00004806 	br	58c8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    57a8:	e0bff403 	ldbu	r2,-48(fp)
    57ac:	1000161e 	bne	r2,zero,5808 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    57b0:	e0bffd17 	ldw	r2,-12(fp)
    57b4:	00c00fc4 	movi	r3,63
    57b8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    57bc:	e0bffd17 	ldw	r2,-12(fp)
    57c0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    57c4:	e0bffd17 	ldw	r2,-12(fp)
    57c8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    57cc:	d0e71317 	ldw	r3,-25524(gp)
    57d0:	e0bffd17 	ldw	r2,-12(fp)
    57d4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    57d8:	e0bffd17 	ldw	r2,-12(fp)
    57dc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    57e0:	e0bffd17 	ldw	r2,-12(fp)
    57e4:	d0a71315 	stw	r2,-25524(gp)
    57e8:	e0bff717 	ldw	r2,-36(fp)
    57ec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    57f0:	e0bff817 	ldw	r2,-32(fp)
    57f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    57f8:	e0bfff17 	ldw	r2,-4(fp)
    57fc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    5800:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    5804:	00003a06 	br	58f0 <OSFlagDel+0x230>
    5808:	e0bff717 	ldw	r2,-36(fp)
    580c:	e0bff915 	stw	r2,-28(fp)
    5810:	e0bff917 	ldw	r2,-28(fp)
    5814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    5818:	e0bfff17 	ldw	r2,-4(fp)
    581c:	00c01244 	movi	r3,73
    5820:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    5824:	e0bffd17 	ldw	r2,-12(fp)
    5828:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    582c:	00003006 	br	58f0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    5830:	e0bffd17 	ldw	r2,-12(fp)
    5834:	10800117 	ldw	r2,4(r2)
    5838:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    583c:	00000606 	br	5858 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    5840:	000b883a 	mov	r5,zero
    5844:	e13ff517 	ldw	r4,-44(fp)
    5848:	000682c0 	call	682c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    584c:	e0bff517 	ldw	r2,-44(fp)
    5850:	10800017 	ldw	r2,0(r2)
    5854:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    5858:	e0bff517 	ldw	r2,-44(fp)
    585c:	103ff81e 	bne	r2,zero,5840 <__alt_data_end+0xfffed1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    5860:	e0bffd17 	ldw	r2,-12(fp)
    5864:	00c00fc4 	movi	r3,63
    5868:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    586c:	e0bffd17 	ldw	r2,-12(fp)
    5870:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    5874:	e0bffd17 	ldw	r2,-12(fp)
    5878:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    587c:	d0e71317 	ldw	r3,-25524(gp)
    5880:	e0bffd17 	ldw	r2,-12(fp)
    5884:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    5888:	e0bffd17 	ldw	r2,-12(fp)
    588c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    5890:	e0bffd17 	ldw	r2,-12(fp)
    5894:	d0a71315 	stw	r2,-25524(gp)
    5898:	e0bff717 	ldw	r2,-36(fp)
    589c:	e0bffa15 	stw	r2,-24(fp)
    58a0:	e0bffa17 	ldw	r2,-24(fp)
    58a4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    58a8:	e0bff403 	ldbu	r2,-48(fp)
    58ac:	10800058 	cmpnei	r2,r2,1
    58b0:	1000011e 	bne	r2,zero,58b8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    58b4:	0004a4c0 	call	4a4c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    58b8:	e0bfff17 	ldw	r2,-4(fp)
    58bc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    58c0:	e03ff615 	stw	zero,-40(fp)
             break;
    58c4:	00000a06 	br	58f0 <OSFlagDel+0x230>
    58c8:	e0bff717 	ldw	r2,-36(fp)
    58cc:	e0bffb15 	stw	r2,-20(fp)
    58d0:	e0bffb17 	ldw	r2,-20(fp)
    58d4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    58d8:	e0bfff17 	ldw	r2,-4(fp)
    58dc:	00c001c4 	movi	r3,7
    58e0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    58e4:	e0bffd17 	ldw	r2,-12(fp)
    58e8:	e0bff615 	stw	r2,-40(fp)
             break;
    58ec:	0001883a 	nop
    }
    return (pgrp_return);
    58f0:	e0bff617 	ldw	r2,-40(fp)
}
    58f4:	e037883a 	mov	sp,fp
    58f8:	dfc00117 	ldw	ra,4(sp)
    58fc:	df000017 	ldw	fp,0(sp)
    5900:	dec00204 	addi	sp,sp,8
    5904:	f800283a 	ret

00005908 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    5908:	defff604 	addi	sp,sp,-40
    590c:	dfc00915 	stw	ra,36(sp)
    5910:	df000815 	stw	fp,32(sp)
    5914:	df000804 	addi	fp,sp,32
    5918:	e13ffd15 	stw	r4,-12(fp)
    591c:	e17ffe15 	stw	r5,-8(fp)
    5920:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5924:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5928:	e0bfff17 	ldw	r2,-4(fp)
    592c:	1000021e 	bne	r2,zero,5938 <OSFlagNameGet+0x30>
        return (0);
    5930:	0005883a 	mov	r2,zero
    5934:	00003906 	br	5a1c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    5938:	e0bffd17 	ldw	r2,-12(fp)
    593c:	1000051e 	bne	r2,zero,5954 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5940:	e0bfff17 	ldw	r2,-4(fp)
    5944:	00c01b84 	movi	r3,110
    5948:	10c00005 	stb	r3,0(r2)
        return (0);
    594c:	0005883a 	mov	r2,zero
    5950:	00003206 	br	5a1c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5954:	e0bffe17 	ldw	r2,-8(fp)
    5958:	1000051e 	bne	r2,zero,5970 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    595c:	e0bfff17 	ldw	r2,-4(fp)
    5960:	00c00304 	movi	r3,12
    5964:	10c00005 	stb	r3,0(r2)
        return (0);
    5968:	0005883a 	mov	r2,zero
    596c:	00002b06 	br	5a1c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5970:	d0a71003 	ldbu	r2,-25536(gp)
    5974:	10803fcc 	andi	r2,r2,255
    5978:	10000526 	beq	r2,zero,5990 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    597c:	e0bfff17 	ldw	r2,-4(fp)
    5980:	00c00444 	movi	r3,17
    5984:	10c00005 	stb	r3,0(r2)
        return (0);
    5988:	0005883a 	mov	r2,zero
    598c:	00002306 	br	5a1c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5990:	0005303a 	rdctl	r2,status
    5994:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5998:	e0fffc17 	ldw	r3,-16(fp)
    599c:	00bfff84 	movi	r2,-2
    59a0:	1884703a 	and	r2,r3,r2
    59a4:	1001703a 	wrctl	status,r2
  
  return context;
    59a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    59ac:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    59b0:	e0bffd17 	ldw	r2,-12(fp)
    59b4:	10800003 	ldbu	r2,0(r2)
    59b8:	10803fcc 	andi	r2,r2,255
    59bc:	10800160 	cmpeqi	r2,r2,5
    59c0:	1000091e 	bne	r2,zero,59e8 <OSFlagNameGet+0xe0>
    59c4:	e0bff817 	ldw	r2,-32(fp)
    59c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    59cc:	e0bff917 	ldw	r2,-28(fp)
    59d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    59d4:	e0bfff17 	ldw	r2,-4(fp)
    59d8:	00c00044 	movi	r3,1
    59dc:	10c00005 	stb	r3,0(r2)
        return (0);
    59e0:	0005883a 	mov	r2,zero
    59e4:	00000d06 	br	5a1c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    59e8:	e0bffd17 	ldw	r2,-12(fp)
    59ec:	10800284 	addi	r2,r2,10
    59f0:	100b883a 	mov	r5,r2
    59f4:	e13ffe17 	ldw	r4,-8(fp)
    59f8:	0004b900 	call	4b90 <OS_StrCopy>
    59fc:	e0bffb05 	stb	r2,-20(fp)
    5a00:	e0bff817 	ldw	r2,-32(fp)
    5a04:	e0bffa15 	stw	r2,-24(fp)
    5a08:	e0bffa17 	ldw	r2,-24(fp)
    5a0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5a10:	e0bfff17 	ldw	r2,-4(fp)
    5a14:	10000005 	stb	zero,0(r2)
    return (len);
    5a18:	e0bffb03 	ldbu	r2,-20(fp)
}
    5a1c:	e037883a 	mov	sp,fp
    5a20:	dfc00117 	ldw	ra,4(sp)
    5a24:	df000017 	ldw	fp,0(sp)
    5a28:	dec00204 	addi	sp,sp,8
    5a2c:	f800283a 	ret

00005a30 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    5a30:	defff504 	addi	sp,sp,-44
    5a34:	dfc00a15 	stw	ra,40(sp)
    5a38:	df000915 	stw	fp,36(sp)
    5a3c:	df000904 	addi	fp,sp,36
    5a40:	e13ffd15 	stw	r4,-12(fp)
    5a44:	e17ffe15 	stw	r5,-8(fp)
    5a48:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a4c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    5a50:	e0bfff17 	ldw	r2,-4(fp)
    5a54:	10004326 	beq	r2,zero,5b64 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    5a58:	e0bffd17 	ldw	r2,-12(fp)
    5a5c:	1000041e 	bne	r2,zero,5a70 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5a60:	e0bfff17 	ldw	r2,-4(fp)
    5a64:	00c01b84 	movi	r3,110
    5a68:	10c00005 	stb	r3,0(r2)
        return;
    5a6c:	00003e06 	br	5b68 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    5a70:	e0bffe17 	ldw	r2,-8(fp)
    5a74:	1000041e 	bne	r2,zero,5a88 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    5a78:	e0bfff17 	ldw	r2,-4(fp)
    5a7c:	00c00304 	movi	r3,12
    5a80:	10c00005 	stb	r3,0(r2)
        return;
    5a84:	00003806 	br	5b68 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5a88:	d0a71003 	ldbu	r2,-25536(gp)
    5a8c:	10803fcc 	andi	r2,r2,255
    5a90:	10000426 	beq	r2,zero,5aa4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    5a94:	e0bfff17 	ldw	r2,-4(fp)
    5a98:	00c00484 	movi	r3,18
    5a9c:	10c00005 	stb	r3,0(r2)
        return;
    5aa0:	00003106 	br	5b68 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5aa4:	0005303a 	rdctl	r2,status
    5aa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5aac:	e0fffc17 	ldw	r3,-16(fp)
    5ab0:	00bfff84 	movi	r2,-2
    5ab4:	1884703a 	and	r2,r3,r2
    5ab8:	1001703a 	wrctl	status,r2
  
  return context;
    5abc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5ac0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    5ac4:	e0bffd17 	ldw	r2,-12(fp)
    5ac8:	10800003 	ldbu	r2,0(r2)
    5acc:	10803fcc 	andi	r2,r2,255
    5ad0:	10800160 	cmpeqi	r2,r2,5
    5ad4:	1000081e 	bne	r2,zero,5af8 <OSFlagNameSet+0xc8>
    5ad8:	e0bff717 	ldw	r2,-36(fp)
    5adc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5ae0:	e0bff817 	ldw	r2,-32(fp)
    5ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    5ae8:	e0bfff17 	ldw	r2,-4(fp)
    5aec:	00c00044 	movi	r3,1
    5af0:	10c00005 	stb	r3,0(r2)
        return;
    5af4:	00001c06 	br	5b68 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    5af8:	e13ffe17 	ldw	r4,-8(fp)
    5afc:	0004c040 	call	4c04 <OS_StrLen>
    5b00:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    5b04:	e0bffa03 	ldbu	r2,-24(fp)
    5b08:	10800830 	cmpltui	r2,r2,32
    5b0c:	1000081e 	bne	r2,zero,5b30 <OSFlagNameSet+0x100>
    5b10:	e0bff717 	ldw	r2,-36(fp)
    5b14:	e0bff915 	stw	r2,-28(fp)
    5b18:	e0bff917 	ldw	r2,-28(fp)
    5b1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    5b20:	e0bfff17 	ldw	r2,-4(fp)
    5b24:	00c01cc4 	movi	r3,115
    5b28:	10c00005 	stb	r3,0(r2)
        return;
    5b2c:	00000e06 	br	5b68 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    5b30:	e0bffd17 	ldw	r2,-12(fp)
    5b34:	10800284 	addi	r2,r2,10
    5b38:	e17ffe17 	ldw	r5,-8(fp)
    5b3c:	1009883a 	mov	r4,r2
    5b40:	0004b900 	call	4b90 <OS_StrCopy>
    5b44:	e0bff717 	ldw	r2,-36(fp)
    5b48:	e0bffb15 	stw	r2,-20(fp)
    5b4c:	e0bffb17 	ldw	r2,-20(fp)
    5b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5b54:	e0bfff17 	ldw	r2,-4(fp)
    5b58:	10000005 	stb	zero,0(r2)
    return;
    5b5c:	0001883a 	nop
    5b60:	00000106 	br	5b68 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    5b64:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    5b68:	e037883a 	mov	sp,fp
    5b6c:	dfc00117 	ldw	ra,4(sp)
    5b70:	df000017 	ldw	fp,0(sp)
    5b74:	dec00204 	addi	sp,sp,8
    5b78:	f800283a 	ret

00005b7c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    5b7c:	deffe104 	addi	sp,sp,-124
    5b80:	dfc01e15 	stw	ra,120(sp)
    5b84:	df001d15 	stw	fp,116(sp)
    5b88:	df001d04 	addi	fp,sp,116
    5b8c:	e13ffc15 	stw	r4,-16(fp)
    5b90:	2809883a 	mov	r4,r5
    5b94:	3007883a 	mov	r3,r6
    5b98:	3805883a 	mov	r2,r7
    5b9c:	e13ffd0d 	sth	r4,-12(fp)
    5ba0:	e0fffe05 	stb	r3,-8(fp)
    5ba4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    5ba8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5bac:	e0800217 	ldw	r2,8(fp)
    5bb0:	1000021e 	bne	r2,zero,5bbc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    5bb4:	0005883a 	mov	r2,zero
    5bb8:	00015906 	br	6120 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    5bbc:	e0bffc17 	ldw	r2,-16(fp)
    5bc0:	1000051e 	bne	r2,zero,5bd8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    5bc4:	e0800217 	ldw	r2,8(fp)
    5bc8:	00c01b84 	movi	r3,110
    5bcc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5bd0:	0005883a 	mov	r2,zero
    5bd4:	00015206 	br	6120 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5bd8:	d0a71003 	ldbu	r2,-25536(gp)
    5bdc:	10803fcc 	andi	r2,r2,255
    5be0:	10000526 	beq	r2,zero,5bf8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    5be4:	e0800217 	ldw	r2,8(fp)
    5be8:	00c00084 	movi	r3,2
    5bec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5bf0:	0005883a 	mov	r2,zero
    5bf4:	00014a06 	br	6120 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    5bf8:	d0a70203 	ldbu	r2,-25592(gp)
    5bfc:	10803fcc 	andi	r2,r2,255
    5c00:	10000526 	beq	r2,zero,5c18 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    5c04:	e0800217 	ldw	r2,8(fp)
    5c08:	00c00344 	movi	r3,13
    5c0c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c10:	0005883a 	mov	r2,zero
    5c14:	00014206 	br	6120 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    5c18:	e0bffc17 	ldw	r2,-16(fp)
    5c1c:	10800003 	ldbu	r2,0(r2)
    5c20:	10803fcc 	andi	r2,r2,255
    5c24:	10800160 	cmpeqi	r2,r2,5
    5c28:	1000051e 	bne	r2,zero,5c40 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    5c2c:	e0800217 	ldw	r2,8(fp)
    5c30:	00c00044 	movi	r3,1
    5c34:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    5c38:	0005883a 	mov	r2,zero
    5c3c:	00013806 	br	6120 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    5c40:	e0fffe03 	ldbu	r3,-8(fp)
    5c44:	00bfe004 	movi	r2,-128
    5c48:	1884703a 	and	r2,r3,r2
    5c4c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    5c50:	e0bfe603 	ldbu	r2,-104(fp)
    5c54:	10000626 	beq	r2,zero,5c70 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    5c58:	e0bffe03 	ldbu	r2,-8(fp)
    5c5c:	10801fcc 	andi	r2,r2,127
    5c60:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    5c64:	00800044 	movi	r2,1
    5c68:	e0bfe405 	stb	r2,-112(fp)
    5c6c:	00000106 	br	5c74 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    5c70:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5c74:	0005303a 	rdctl	r2,status
    5c78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5c7c:	e0fff617 	ldw	r3,-40(fp)
    5c80:	00bfff84 	movi	r2,-2
    5c84:	1884703a 	and	r2,r3,r2
    5c88:	1001703a 	wrctl	status,r2
  
  return context;
    5c8c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    5c90:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    5c94:	e0bffe03 	ldbu	r2,-8(fp)
    5c98:	10c00060 	cmpeqi	r3,r2,1
    5c9c:	1800921e 	bne	r3,zero,5ee8 <OSFlagPend+0x36c>
    5ca0:	10c00088 	cmpgei	r3,r2,2
    5ca4:	1800021e 	bne	r3,zero,5cb0 <OSFlagPend+0x134>
    5ca8:	10006126 	beq	r2,zero,5e30 <OSFlagPend+0x2b4>
    5cac:	0000bb06 	br	5f9c <OSFlagPend+0x420>
    5cb0:	10c000a0 	cmpeqi	r3,r2,2
    5cb4:	1800031e 	bne	r3,zero,5cc4 <OSFlagPend+0x148>
    5cb8:	108000e0 	cmpeqi	r2,r2,3
    5cbc:	10002f1e 	bne	r2,zero,5d7c <OSFlagPend+0x200>
    5cc0:	0000b606 	br	5f9c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    5cc4:	e0bffc17 	ldw	r2,-16(fp)
    5cc8:	10c0020b 	ldhu	r3,8(r2)
    5ccc:	e0bffd0b 	ldhu	r2,-12(fp)
    5cd0:	1884703a 	and	r2,r3,r2
    5cd4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5cd8:	e0ffe80b 	ldhu	r3,-96(fp)
    5cdc:	e0bffd0b 	ldhu	r2,-12(fp)
    5ce0:	1880171e 	bne	r3,r2,5d40 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5ce4:	e0bfe403 	ldbu	r2,-112(fp)
    5ce8:	10800058 	cmpnei	r2,r2,1
    5cec:	1000091e 	bne	r2,zero,5d14 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    5cf0:	e0bffc17 	ldw	r2,-16(fp)
    5cf4:	1080020b 	ldhu	r2,8(r2)
    5cf8:	1007883a 	mov	r3,r2
    5cfc:	e0bfe80b 	ldhu	r2,-96(fp)
    5d00:	0084303a 	nor	r2,zero,r2
    5d04:	1884703a 	and	r2,r3,r2
    5d08:	1007883a 	mov	r3,r2
    5d0c:	e0bffc17 	ldw	r2,-16(fp)
    5d10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5d14:	d0a71117 	ldw	r2,-25532(gp)
    5d18:	e0ffe80b 	ldhu	r3,-96(fp)
    5d1c:	10c00b0d 	sth	r3,44(r2)
    5d20:	e0bfe517 	ldw	r2,-108(fp)
    5d24:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d28:	e0bfe717 	ldw	r2,-100(fp)
    5d2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5d30:	e0800217 	ldw	r2,8(fp)
    5d34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5d38:	e0bfe80b 	ldhu	r2,-96(fp)
    5d3c:	0000f806 	br	6120 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5d40:	e13ffd0b 	ldhu	r4,-12(fp)
    5d44:	e17ffe03 	ldbu	r5,-8(fp)
    5d48:	e0bfff0b 	ldhu	r2,-4(fp)
    5d4c:	e0fff704 	addi	r3,fp,-36
    5d50:	d8800015 	stw	r2,0(sp)
    5d54:	280f883a 	mov	r7,r5
    5d58:	200d883a 	mov	r6,r4
    5d5c:	180b883a 	mov	r5,r3
    5d60:	e13ffc17 	ldw	r4,-16(fp)
    5d64:	00065ec0 	call	65ec <OS_FlagBlock>
    5d68:	e0bfe517 	ldw	r2,-108(fp)
    5d6c:	e0bfe915 	stw	r2,-92(fp)
    5d70:	e0bfe917 	ldw	r2,-92(fp)
    5d74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5d78:	00009206 	br	5fc4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    5d7c:	e0bffc17 	ldw	r2,-16(fp)
    5d80:	10c0020b 	ldhu	r3,8(r2)
    5d84:	e0bffd0b 	ldhu	r2,-12(fp)
    5d88:	1884703a 	and	r2,r3,r2
    5d8c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    5d90:	e0bfe80b 	ldhu	r2,-96(fp)
    5d94:	10001726 	beq	r2,zero,5df4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5d98:	e0bfe403 	ldbu	r2,-112(fp)
    5d9c:	10800058 	cmpnei	r2,r2,1
    5da0:	1000091e 	bne	r2,zero,5dc8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    5da4:	e0bffc17 	ldw	r2,-16(fp)
    5da8:	1080020b 	ldhu	r2,8(r2)
    5dac:	1007883a 	mov	r3,r2
    5db0:	e0bfe80b 	ldhu	r2,-96(fp)
    5db4:	0084303a 	nor	r2,zero,r2
    5db8:	1884703a 	and	r2,r3,r2
    5dbc:	1007883a 	mov	r3,r2
    5dc0:	e0bffc17 	ldw	r2,-16(fp)
    5dc4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5dc8:	d0a71117 	ldw	r2,-25532(gp)
    5dcc:	e0ffe80b 	ldhu	r3,-96(fp)
    5dd0:	10c00b0d 	sth	r3,44(r2)
    5dd4:	e0bfe517 	ldw	r2,-108(fp)
    5dd8:	e0bfea15 	stw	r2,-88(fp)
    5ddc:	e0bfea17 	ldw	r2,-88(fp)
    5de0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5de4:	e0800217 	ldw	r2,8(fp)
    5de8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5dec:	e0bfe80b 	ldhu	r2,-96(fp)
    5df0:	0000cb06 	br	6120 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5df4:	e13ffd0b 	ldhu	r4,-12(fp)
    5df8:	e17ffe03 	ldbu	r5,-8(fp)
    5dfc:	e0bfff0b 	ldhu	r2,-4(fp)
    5e00:	e0fff704 	addi	r3,fp,-36
    5e04:	d8800015 	stw	r2,0(sp)
    5e08:	280f883a 	mov	r7,r5
    5e0c:	200d883a 	mov	r6,r4
    5e10:	180b883a 	mov	r5,r3
    5e14:	e13ffc17 	ldw	r4,-16(fp)
    5e18:	00065ec0 	call	65ec <OS_FlagBlock>
    5e1c:	e0bfe517 	ldw	r2,-108(fp)
    5e20:	e0bfeb15 	stw	r2,-84(fp)
    5e24:	e0bfeb17 	ldw	r2,-84(fp)
    5e28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5e2c:	00006506 	br	5fc4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    5e30:	e0bffc17 	ldw	r2,-16(fp)
    5e34:	1080020b 	ldhu	r2,8(r2)
    5e38:	0084303a 	nor	r2,zero,r2
    5e3c:	1007883a 	mov	r3,r2
    5e40:	e0bffd0b 	ldhu	r2,-12(fp)
    5e44:	1884703a 	and	r2,r3,r2
    5e48:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    5e4c:	e0ffe80b 	ldhu	r3,-96(fp)
    5e50:	e0bffd0b 	ldhu	r2,-12(fp)
    5e54:	1880151e 	bne	r3,r2,5eac <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5e58:	e0bfe403 	ldbu	r2,-112(fp)
    5e5c:	10800058 	cmpnei	r2,r2,1
    5e60:	1000071e 	bne	r2,zero,5e80 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    5e64:	e0bffc17 	ldw	r2,-16(fp)
    5e68:	10c0020b 	ldhu	r3,8(r2)
    5e6c:	e0bfe80b 	ldhu	r2,-96(fp)
    5e70:	1884b03a 	or	r2,r3,r2
    5e74:	1007883a 	mov	r3,r2
    5e78:	e0bffc17 	ldw	r2,-16(fp)
    5e7c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5e80:	d0a71117 	ldw	r2,-25532(gp)
    5e84:	e0ffe80b 	ldhu	r3,-96(fp)
    5e88:	10c00b0d 	sth	r3,44(r2)
    5e8c:	e0bfe517 	ldw	r2,-108(fp)
    5e90:	e0bfec15 	stw	r2,-80(fp)
    5e94:	e0bfec17 	ldw	r2,-80(fp)
    5e98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5e9c:	e0800217 	ldw	r2,8(fp)
    5ea0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5ea4:	e0bfe80b 	ldhu	r2,-96(fp)
    5ea8:	00009d06 	br	6120 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5eac:	e13ffd0b 	ldhu	r4,-12(fp)
    5eb0:	e17ffe03 	ldbu	r5,-8(fp)
    5eb4:	e0bfff0b 	ldhu	r2,-4(fp)
    5eb8:	e0fff704 	addi	r3,fp,-36
    5ebc:	d8800015 	stw	r2,0(sp)
    5ec0:	280f883a 	mov	r7,r5
    5ec4:	200d883a 	mov	r6,r4
    5ec8:	180b883a 	mov	r5,r3
    5ecc:	e13ffc17 	ldw	r4,-16(fp)
    5ed0:	00065ec0 	call	65ec <OS_FlagBlock>
    5ed4:	e0bfe517 	ldw	r2,-108(fp)
    5ed8:	e0bfed15 	stw	r2,-76(fp)
    5edc:	e0bfed17 	ldw	r2,-76(fp)
    5ee0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5ee4:	00003706 	br	5fc4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    5ee8:	e0bffc17 	ldw	r2,-16(fp)
    5eec:	1080020b 	ldhu	r2,8(r2)
    5ef0:	0084303a 	nor	r2,zero,r2
    5ef4:	1007883a 	mov	r3,r2
    5ef8:	e0bffd0b 	ldhu	r2,-12(fp)
    5efc:	1884703a 	and	r2,r3,r2
    5f00:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    5f04:	e0bfe80b 	ldhu	r2,-96(fp)
    5f08:	10001526 	beq	r2,zero,5f60 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    5f0c:	e0bfe403 	ldbu	r2,-112(fp)
    5f10:	10800058 	cmpnei	r2,r2,1
    5f14:	1000071e 	bne	r2,zero,5f34 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    5f18:	e0bffc17 	ldw	r2,-16(fp)
    5f1c:	10c0020b 	ldhu	r3,8(r2)
    5f20:	e0bfe80b 	ldhu	r2,-96(fp)
    5f24:	1884b03a 	or	r2,r3,r2
    5f28:	1007883a 	mov	r3,r2
    5f2c:	e0bffc17 	ldw	r2,-16(fp)
    5f30:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    5f34:	d0a71117 	ldw	r2,-25532(gp)
    5f38:	e0ffe80b 	ldhu	r3,-96(fp)
    5f3c:	10c00b0d 	sth	r3,44(r2)
    5f40:	e0bfe517 	ldw	r2,-108(fp)
    5f44:	e0bfee15 	stw	r2,-72(fp)
    5f48:	e0bfee17 	ldw	r2,-72(fp)
    5f4c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    5f50:	e0800217 	ldw	r2,8(fp)
    5f54:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    5f58:	e0bfe80b 	ldhu	r2,-96(fp)
    5f5c:	00007006 	br	6120 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    5f60:	e13ffd0b 	ldhu	r4,-12(fp)
    5f64:	e17ffe03 	ldbu	r5,-8(fp)
    5f68:	e0bfff0b 	ldhu	r2,-4(fp)
    5f6c:	e0fff704 	addi	r3,fp,-36
    5f70:	d8800015 	stw	r2,0(sp)
    5f74:	280f883a 	mov	r7,r5
    5f78:	200d883a 	mov	r6,r4
    5f7c:	180b883a 	mov	r5,r3
    5f80:	e13ffc17 	ldw	r4,-16(fp)
    5f84:	00065ec0 	call	65ec <OS_FlagBlock>
    5f88:	e0bfe517 	ldw	r2,-108(fp)
    5f8c:	e0bfef15 	stw	r2,-68(fp)
    5f90:	e0bfef17 	ldw	r2,-68(fp)
    5f94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    5f98:	00000a06 	br	5fc4 <OSFlagPend+0x448>
    5f9c:	e0bfe517 	ldw	r2,-108(fp)
    5fa0:	e0bff015 	stw	r2,-64(fp)
    5fa4:	e0bff017 	ldw	r2,-64(fp)
    5fa8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    5fac:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    5fb0:	e0800217 	ldw	r2,8(fp)
    5fb4:	00c01bc4 	movi	r3,111
    5fb8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    5fbc:	e0bfe80b 	ldhu	r2,-96(fp)
    5fc0:	00005706 	br	6120 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    5fc4:	0004a4c0 	call	4a4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5fc8:	0005303a 	rdctl	r2,status
    5fcc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5fd0:	e0fff117 	ldw	r3,-60(fp)
    5fd4:	00bfff84 	movi	r2,-2
    5fd8:	1884703a 	and	r2,r3,r2
    5fdc:	1001703a 	wrctl	status,r2
  
  return context;
    5fe0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    5fe4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    5fe8:	d0a71117 	ldw	r2,-25532(gp)
    5fec:	10800c43 	ldbu	r2,49(r2)
    5ff0:	10803fcc 	andi	r2,r2,255
    5ff4:	10001c26 	beq	r2,zero,6068 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    5ff8:	d0a71117 	ldw	r2,-25532(gp)
    5ffc:	10800c43 	ldbu	r2,49(r2)
    6000:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    6004:	d0a71117 	ldw	r2,-25532(gp)
    6008:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    600c:	e0bff704 	addi	r2,fp,-36
    6010:	1009883a 	mov	r4,r2
    6014:	00069200 	call	6920 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    6018:	d0a71117 	ldw	r2,-25532(gp)
    601c:	10000c05 	stb	zero,48(r2)
    6020:	e0bfe517 	ldw	r2,-108(fp)
    6024:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6028:	e0bff217 	ldw	r2,-56(fp)
    602c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    6030:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    6034:	e0bff303 	ldbu	r2,-52(fp)
    6038:	108000a0 	cmpeqi	r2,r2,2
    603c:	10000426 	beq	r2,zero,6050 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    6040:	e0800217 	ldw	r2,8(fp)
    6044:	00c00384 	movi	r3,14
    6048:	10c00005 	stb	r3,0(r2)
                 break;
    604c:	00000406 	br	6060 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    6050:	e0800217 	ldw	r2,8(fp)
    6054:	00c00284 	movi	r3,10
    6058:	10c00005 	stb	r3,0(r2)
                 break;
    605c:	0001883a 	nop
        }
        return (flags_rdy);
    6060:	e0bfe80b 	ldhu	r2,-96(fp)
    6064:	00002e06 	br	6120 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    6068:	d0a71117 	ldw	r2,-25532(gp)
    606c:	10800b0b 	ldhu	r2,44(r2)
    6070:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    6074:	e0bfe403 	ldbu	r2,-112(fp)
    6078:	10800058 	cmpnei	r2,r2,1
    607c:	1000211e 	bne	r2,zero,6104 <OSFlagPend+0x588>
        switch (wait_type) {
    6080:	e0bffe03 	ldbu	r2,-8(fp)
    6084:	10001616 	blt	r2,zero,60e0 <OSFlagPend+0x564>
    6088:	10c00090 	cmplti	r3,r2,2
    608c:	18000c1e 	bne	r3,zero,60c0 <OSFlagPend+0x544>
    6090:	10800108 	cmpgei	r2,r2,4
    6094:	1000121e 	bne	r2,zero,60e0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    6098:	e0bffc17 	ldw	r2,-16(fp)
    609c:	1080020b 	ldhu	r2,8(r2)
    60a0:	1007883a 	mov	r3,r2
    60a4:	e0bfe80b 	ldhu	r2,-96(fp)
    60a8:	0084303a 	nor	r2,zero,r2
    60ac:	1884703a 	and	r2,r3,r2
    60b0:	1007883a 	mov	r3,r2
    60b4:	e0bffc17 	ldw	r2,-16(fp)
    60b8:	10c0020d 	sth	r3,8(r2)
                 break;
    60bc:	00001106 	br	6104 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    60c0:	e0bffc17 	ldw	r2,-16(fp)
    60c4:	10c0020b 	ldhu	r3,8(r2)
    60c8:	e0bfe80b 	ldhu	r2,-96(fp)
    60cc:	1884b03a 	or	r2,r3,r2
    60d0:	1007883a 	mov	r3,r2
    60d4:	e0bffc17 	ldw	r2,-16(fp)
    60d8:	10c0020d 	sth	r3,8(r2)
                 break;
    60dc:	00000906 	br	6104 <OSFlagPend+0x588>
    60e0:	e0bfe517 	ldw	r2,-108(fp)
    60e4:	e0bff415 	stw	r2,-48(fp)
    60e8:	e0bff417 	ldw	r2,-48(fp)
    60ec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    60f0:	e0800217 	ldw	r2,8(fp)
    60f4:	00c01bc4 	movi	r3,111
    60f8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    60fc:	0005883a 	mov	r2,zero
    6100:	00000706 	br	6120 <OSFlagPend+0x5a4>
    6104:	e0bfe517 	ldw	r2,-108(fp)
    6108:	e0bff515 	stw	r2,-44(fp)
    610c:	e0bff517 	ldw	r2,-44(fp)
    6110:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    6114:	e0800217 	ldw	r2,8(fp)
    6118:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    611c:	e0bfe80b 	ldhu	r2,-96(fp)
}
    6120:	e037883a 	mov	sp,fp
    6124:	dfc00117 	ldw	ra,4(sp)
    6128:	df000017 	ldw	fp,0(sp)
    612c:	dec00204 	addi	sp,sp,8
    6130:	f800283a 	ret

00006134 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    6134:	defffb04 	addi	sp,sp,-20
    6138:	df000415 	stw	fp,16(sp)
    613c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    6140:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6144:	0005303a 	rdctl	r2,status
    6148:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    614c:	e0fffe17 	ldw	r3,-8(fp)
    6150:	00bfff84 	movi	r2,-2
    6154:	1884703a 	and	r2,r3,r2
    6158:	1001703a 	wrctl	status,r2
  
  return context;
    615c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    6160:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    6164:	d0a71117 	ldw	r2,-25532(gp)
    6168:	10800b0b 	ldhu	r2,44(r2)
    616c:	e0bffd0d 	sth	r2,-12(fp)
    6170:	e0bffc17 	ldw	r2,-16(fp)
    6174:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6178:	e0bfff17 	ldw	r2,-4(fp)
    617c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    6180:	e0bffd0b 	ldhu	r2,-12(fp)
}
    6184:	e037883a 	mov	sp,fp
    6188:	df000017 	ldw	fp,0(sp)
    618c:	dec00104 	addi	sp,sp,4
    6190:	f800283a 	ret

00006194 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    6194:	deffef04 	addi	sp,sp,-68
    6198:	dfc01015 	stw	ra,64(sp)
    619c:	df000f15 	stw	fp,60(sp)
    61a0:	df000f04 	addi	fp,sp,60
    61a4:	e13ffc15 	stw	r4,-16(fp)
    61a8:	2807883a 	mov	r3,r5
    61ac:	3005883a 	mov	r2,r6
    61b0:	e1ffff15 	stw	r7,-4(fp)
    61b4:	e0fffd0d 	sth	r3,-12(fp)
    61b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    61bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    61c0:	e0bfff17 	ldw	r2,-4(fp)
    61c4:	1000021e 	bne	r2,zero,61d0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    61c8:	0005883a 	mov	r2,zero
    61cc:	0000d106 	br	6514 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    61d0:	e0bffc17 	ldw	r2,-16(fp)
    61d4:	1000051e 	bne	r2,zero,61ec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    61d8:	e0bfff17 	ldw	r2,-4(fp)
    61dc:	00c01b84 	movi	r3,110
    61e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    61e4:	0005883a 	mov	r2,zero
    61e8:	0000ca06 	br	6514 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    61ec:	e0bffc17 	ldw	r2,-16(fp)
    61f0:	10800003 	ldbu	r2,0(r2)
    61f4:	10803fcc 	andi	r2,r2,255
    61f8:	10800160 	cmpeqi	r2,r2,5
    61fc:	1000051e 	bne	r2,zero,6214 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    6200:	e0bfff17 	ldw	r2,-4(fp)
    6204:	00c00044 	movi	r3,1
    6208:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    620c:	0005883a 	mov	r2,zero
    6210:	0000c006 	br	6514 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6214:	0005303a 	rdctl	r2,status
    6218:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    621c:	e0fffb17 	ldw	r3,-20(fp)
    6220:	00bfff84 	movi	r2,-2
    6224:	1884703a 	and	r2,r3,r2
    6228:	1001703a 	wrctl	status,r2
  
  return context;
    622c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    6230:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    6234:	e0bffe03 	ldbu	r2,-8(fp)
    6238:	10000326 	beq	r2,zero,6248 <OSFlagPost+0xb4>
    623c:	10800060 	cmpeqi	r2,r2,1
    6240:	10000b1e 	bne	r2,zero,6270 <OSFlagPost+0xdc>
    6244:	00001206 	br	6290 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    6248:	e0bffc17 	ldw	r2,-16(fp)
    624c:	1080020b 	ldhu	r2,8(r2)
    6250:	1007883a 	mov	r3,r2
    6254:	e0bffd0b 	ldhu	r2,-12(fp)
    6258:	0084303a 	nor	r2,zero,r2
    625c:	1884703a 	and	r2,r3,r2
    6260:	1007883a 	mov	r3,r2
    6264:	e0bffc17 	ldw	r2,-16(fp)
    6268:	10c0020d 	sth	r3,8(r2)
             break;
    626c:	00001106 	br	62b4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    6270:	e0bffc17 	ldw	r2,-16(fp)
    6274:	10c0020b 	ldhu	r3,8(r2)
    6278:	e0bffd0b 	ldhu	r2,-12(fp)
    627c:	1884b03a 	or	r2,r3,r2
    6280:	1007883a 	mov	r3,r2
    6284:	e0bffc17 	ldw	r2,-16(fp)
    6288:	10c0020d 	sth	r3,8(r2)
             break;
    628c:	00000906 	br	62b4 <OSFlagPost+0x120>
    6290:	e0bff317 	ldw	r2,-52(fp)
    6294:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6298:	e0bff417 	ldw	r2,-48(fp)
    629c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    62a0:	e0bfff17 	ldw	r2,-4(fp)
    62a4:	00c01c44 	movi	r3,113
    62a8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    62ac:	0005883a 	mov	r2,zero
    62b0:	00009806 	br	6514 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    62b4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    62b8:	e0bffc17 	ldw	r2,-16(fp)
    62bc:	10800117 	ldw	r2,4(r2)
    62c0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    62c4:	00007706 	br	64a4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    62c8:	e0bff117 	ldw	r2,-60(fp)
    62cc:	10800483 	ldbu	r2,18(r2)
    62d0:	10803fcc 	andi	r2,r2,255
    62d4:	10c00060 	cmpeqi	r3,r2,1
    62d8:	18004a1e 	bne	r3,zero,6404 <OSFlagPost+0x270>
    62dc:	10c00088 	cmpgei	r3,r2,2
    62e0:	1800021e 	bne	r3,zero,62ec <OSFlagPost+0x158>
    62e4:	10002f26 	beq	r2,zero,63a4 <OSFlagPost+0x210>
    62e8:	00005b06 	br	6458 <OSFlagPost+0x2c4>
    62ec:	10c000a0 	cmpeqi	r3,r2,2
    62f0:	1800031e 	bne	r3,zero,6300 <OSFlagPost+0x16c>
    62f4:	108000e0 	cmpeqi	r2,r2,3
    62f8:	1000171e 	bne	r2,zero,6358 <OSFlagPost+0x1c4>
    62fc:	00005606 	br	6458 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6300:	e0bffc17 	ldw	r2,-16(fp)
    6304:	10c0020b 	ldhu	r3,8(r2)
    6308:	e0bff117 	ldw	r2,-60(fp)
    630c:	1080040b 	ldhu	r2,16(r2)
    6310:	1884703a 	and	r2,r3,r2
    6314:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    6318:	e0bff117 	ldw	r2,-60(fp)
    631c:	1080040b 	ldhu	r2,16(r2)
    6320:	10ffffcc 	andi	r3,r2,65535
    6324:	e0bff60b 	ldhu	r2,-40(fp)
    6328:	1880541e 	bne	r3,r2,647c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    632c:	e0bff60b 	ldhu	r2,-40(fp)
    6330:	100b883a 	mov	r5,r2
    6334:	e13ff117 	ldw	r4,-60(fp)
    6338:	000682c0 	call	682c <OS_FlagTaskRdy>
    633c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6340:	e0bff683 	ldbu	r2,-38(fp)
    6344:	10800058 	cmpnei	r2,r2,1
    6348:	10004c1e 	bne	r2,zero,647c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    634c:	00800044 	movi	r2,1
    6350:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6354:	00004906 	br	647c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6358:	e0bffc17 	ldw	r2,-16(fp)
    635c:	10c0020b 	ldhu	r3,8(r2)
    6360:	e0bff117 	ldw	r2,-60(fp)
    6364:	1080040b 	ldhu	r2,16(r2)
    6368:	1884703a 	and	r2,r3,r2
    636c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6370:	e0bff60b 	ldhu	r2,-40(fp)
    6374:	10004326 	beq	r2,zero,6484 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    6378:	e0bff60b 	ldhu	r2,-40(fp)
    637c:	100b883a 	mov	r5,r2
    6380:	e13ff117 	ldw	r4,-60(fp)
    6384:	000682c0 	call	682c <OS_FlagTaskRdy>
    6388:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    638c:	e0bff683 	ldbu	r2,-38(fp)
    6390:	10800058 	cmpnei	r2,r2,1
    6394:	10003b1e 	bne	r2,zero,6484 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    6398:	00800044 	movi	r2,1
    639c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    63a0:	00003806 	br	6484 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    63a4:	e0bffc17 	ldw	r2,-16(fp)
    63a8:	1080020b 	ldhu	r2,8(r2)
    63ac:	0084303a 	nor	r2,zero,r2
    63b0:	1007883a 	mov	r3,r2
    63b4:	e0bff117 	ldw	r2,-60(fp)
    63b8:	1080040b 	ldhu	r2,16(r2)
    63bc:	1884703a 	and	r2,r3,r2
    63c0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    63c4:	e0bff117 	ldw	r2,-60(fp)
    63c8:	1080040b 	ldhu	r2,16(r2)
    63cc:	10ffffcc 	andi	r3,r2,65535
    63d0:	e0bff60b 	ldhu	r2,-40(fp)
    63d4:	18802d1e 	bne	r3,r2,648c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    63d8:	e0bff60b 	ldhu	r2,-40(fp)
    63dc:	100b883a 	mov	r5,r2
    63e0:	e13ff117 	ldw	r4,-60(fp)
    63e4:	000682c0 	call	682c <OS_FlagTaskRdy>
    63e8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    63ec:	e0bff683 	ldbu	r2,-38(fp)
    63f0:	10800058 	cmpnei	r2,r2,1
    63f4:	1000251e 	bne	r2,zero,648c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    63f8:	00800044 	movi	r2,1
    63fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6400:	00002206 	br	648c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    6404:	e0bffc17 	ldw	r2,-16(fp)
    6408:	1080020b 	ldhu	r2,8(r2)
    640c:	0084303a 	nor	r2,zero,r2
    6410:	1007883a 	mov	r3,r2
    6414:	e0bff117 	ldw	r2,-60(fp)
    6418:	1080040b 	ldhu	r2,16(r2)
    641c:	1884703a 	and	r2,r3,r2
    6420:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    6424:	e0bff60b 	ldhu	r2,-40(fp)
    6428:	10001a26 	beq	r2,zero,6494 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    642c:	e0bff60b 	ldhu	r2,-40(fp)
    6430:	100b883a 	mov	r5,r2
    6434:	e13ff117 	ldw	r4,-60(fp)
    6438:	000682c0 	call	682c <OS_FlagTaskRdy>
    643c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    6440:	e0bff683 	ldbu	r2,-38(fp)
    6444:	10800058 	cmpnei	r2,r2,1
    6448:	1000121e 	bne	r2,zero,6494 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    644c:	00800044 	movi	r2,1
    6450:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    6454:	00000f06 	br	6494 <OSFlagPost+0x300>
    6458:	e0bff317 	ldw	r2,-52(fp)
    645c:	e0bff515 	stw	r2,-44(fp)
    6460:	e0bff517 	ldw	r2,-44(fp)
    6464:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    6468:	e0bfff17 	ldw	r2,-4(fp)
    646c:	00c01bc4 	movi	r3,111
    6470:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    6474:	0005883a 	mov	r2,zero
    6478:	00002606 	br	6514 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    647c:	0001883a 	nop
    6480:	00000506 	br	6498 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6484:	0001883a 	nop
    6488:	00000306 	br	6498 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    648c:	0001883a 	nop
    6490:	00000106 	br	6498 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    6494:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    6498:	e0bff117 	ldw	r2,-60(fp)
    649c:	10800017 	ldw	r2,0(r2)
    64a0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    64a4:	e0bff117 	ldw	r2,-60(fp)
    64a8:	103f871e 	bne	r2,zero,62c8 <__alt_data_end+0xfffedc28>
    64ac:	e0bff317 	ldw	r2,-52(fp)
    64b0:	e0bff715 	stw	r2,-36(fp)
    64b4:	e0bff717 	ldw	r2,-36(fp)
    64b8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    64bc:	e0bff203 	ldbu	r2,-56(fp)
    64c0:	10800058 	cmpnei	r2,r2,1
    64c4:	1000011e 	bne	r2,zero,64cc <OSFlagPost+0x338>
        OS_Sched();
    64c8:	0004a4c0 	call	4a4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    64cc:	0005303a 	rdctl	r2,status
    64d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    64d4:	e0fffa17 	ldw	r3,-24(fp)
    64d8:	00bfff84 	movi	r2,-2
    64dc:	1884703a 	and	r2,r3,r2
    64e0:	1001703a 	wrctl	status,r2
  
  return context;
    64e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    64e8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    64ec:	e0bffc17 	ldw	r2,-16(fp)
    64f0:	1080020b 	ldhu	r2,8(r2)
    64f4:	e0bff90d 	sth	r2,-28(fp)
    64f8:	e0bff317 	ldw	r2,-52(fp)
    64fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6500:	e0bff817 	ldw	r2,-32(fp)
    6504:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    6508:	e0bfff17 	ldw	r2,-4(fp)
    650c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    6510:	e0bff90b 	ldhu	r2,-28(fp)
}
    6514:	e037883a 	mov	sp,fp
    6518:	dfc00117 	ldw	ra,4(sp)
    651c:	df000017 	ldw	fp,0(sp)
    6520:	dec00204 	addi	sp,sp,8
    6524:	f800283a 	ret

00006528 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    6528:	defff904 	addi	sp,sp,-28
    652c:	df000615 	stw	fp,24(sp)
    6530:	df000604 	addi	fp,sp,24
    6534:	e13ffe15 	stw	r4,-8(fp)
    6538:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    653c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    6540:	e0bfff17 	ldw	r2,-4(fp)
    6544:	1000021e 	bne	r2,zero,6550 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    6548:	0005883a 	mov	r2,zero
    654c:	00002306 	br	65dc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    6550:	e0bffe17 	ldw	r2,-8(fp)
    6554:	1000051e 	bne	r2,zero,656c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    6558:	e0bfff17 	ldw	r2,-4(fp)
    655c:	00c01b84 	movi	r3,110
    6560:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    6564:	0005883a 	mov	r2,zero
    6568:	00001c06 	br	65dc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    656c:	e0bffe17 	ldw	r2,-8(fp)
    6570:	10800003 	ldbu	r2,0(r2)
    6574:	10803fcc 	andi	r2,r2,255
    6578:	10800160 	cmpeqi	r2,r2,5
    657c:	1000051e 	bne	r2,zero,6594 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    6580:	e0bfff17 	ldw	r2,-4(fp)
    6584:	00c00044 	movi	r3,1
    6588:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    658c:	0005883a 	mov	r2,zero
    6590:	00001206 	br	65dc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6594:	0005303a 	rdctl	r2,status
    6598:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    659c:	e0fffc17 	ldw	r3,-16(fp)
    65a0:	00bfff84 	movi	r2,-2
    65a4:	1884703a 	and	r2,r3,r2
    65a8:	1001703a 	wrctl	status,r2
  
  return context;
    65ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    65b0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    65b4:	e0bffe17 	ldw	r2,-8(fp)
    65b8:	1080020b 	ldhu	r2,8(r2)
    65bc:	e0bffb0d 	sth	r2,-20(fp)
    65c0:	e0bffa17 	ldw	r2,-24(fp)
    65c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    65c8:	e0bffd17 	ldw	r2,-12(fp)
    65cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    65d0:	e0bfff17 	ldw	r2,-4(fp)
    65d4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    65d8:	e0bffb0b 	ldhu	r2,-20(fp)
}
    65dc:	e037883a 	mov	sp,fp
    65e0:	df000017 	ldw	fp,0(sp)
    65e4:	dec00104 	addi	sp,sp,4
    65e8:	f800283a 	ret

000065ec <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    65ec:	defff804 	addi	sp,sp,-32
    65f0:	df000715 	stw	fp,28(sp)
    65f4:	df000704 	addi	fp,sp,28
    65f8:	e13ffb15 	stw	r4,-20(fp)
    65fc:	e17ffc15 	stw	r5,-16(fp)
    6600:	3009883a 	mov	r4,r6
    6604:	3807883a 	mov	r3,r7
    6608:	e0800117 	ldw	r2,4(fp)
    660c:	e13ffd0d 	sth	r4,-12(fp)
    6610:	e0fffe05 	stb	r3,-8(fp)
    6614:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    6618:	d0a71117 	ldw	r2,-25532(gp)
    661c:	d0e71117 	ldw	r3,-25532(gp)
    6620:	18c00c03 	ldbu	r3,48(r3)
    6624:	18c00814 	ori	r3,r3,32
    6628:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    662c:	d0a71117 	ldw	r2,-25532(gp)
    6630:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    6634:	d0a71117 	ldw	r2,-25532(gp)
    6638:	e0ffff0b 	ldhu	r3,-4(fp)
    663c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    6640:	d0a71117 	ldw	r2,-25532(gp)
    6644:	e0fffc17 	ldw	r3,-16(fp)
    6648:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    664c:	e0bffc17 	ldw	r2,-16(fp)
    6650:	e0fffd0b 	ldhu	r3,-12(fp)
    6654:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    6658:	e0bffc17 	ldw	r2,-16(fp)
    665c:	e0fffe03 	ldbu	r3,-8(fp)
    6660:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    6664:	d0e71117 	ldw	r3,-25532(gp)
    6668:	e0bffc17 	ldw	r2,-16(fp)
    666c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    6670:	e0bffb17 	ldw	r2,-20(fp)
    6674:	10c00117 	ldw	r3,4(r2)
    6678:	e0bffc17 	ldw	r2,-16(fp)
    667c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    6680:	e0bffc17 	ldw	r2,-16(fp)
    6684:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    6688:	e0bffc17 	ldw	r2,-16(fp)
    668c:	e0fffb17 	ldw	r3,-20(fp)
    6690:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    6694:	e0bffb17 	ldw	r2,-20(fp)
    6698:	10800117 	ldw	r2,4(r2)
    669c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    66a0:	e0bff917 	ldw	r2,-28(fp)
    66a4:	10000326 	beq	r2,zero,66b4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    66a8:	e0bff917 	ldw	r2,-28(fp)
    66ac:	e0fffc17 	ldw	r3,-16(fp)
    66b0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    66b4:	e0bffb17 	ldw	r2,-20(fp)
    66b8:	e0fffc17 	ldw	r3,-16(fp)
    66bc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    66c0:	d0a71117 	ldw	r2,-25532(gp)
    66c4:	10800d03 	ldbu	r2,52(r2)
    66c8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    66cc:	e0fffa03 	ldbu	r3,-24(fp)
    66d0:	e13ffa03 	ldbu	r4,-24(fp)
    66d4:	d0a70e44 	addi	r2,gp,-25543
    66d8:	2085883a 	add	r2,r4,r2
    66dc:	10800003 	ldbu	r2,0(r2)
    66e0:	1009883a 	mov	r4,r2
    66e4:	d0a71117 	ldw	r2,-25532(gp)
    66e8:	10800d43 	ldbu	r2,53(r2)
    66ec:	0084303a 	nor	r2,zero,r2
    66f0:	2084703a 	and	r2,r4,r2
    66f4:	1009883a 	mov	r4,r2
    66f8:	d0a70e44 	addi	r2,gp,-25543
    66fc:	1885883a 	add	r2,r3,r2
    6700:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    6704:	e0fffa03 	ldbu	r3,-24(fp)
    6708:	d0a70e44 	addi	r2,gp,-25543
    670c:	1885883a 	add	r2,r3,r2
    6710:	10800003 	ldbu	r2,0(r2)
    6714:	10803fcc 	andi	r2,r2,255
    6718:	1000071e 	bne	r2,zero,6738 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    671c:	d0a71117 	ldw	r2,-25532(gp)
    6720:	10800d83 	ldbu	r2,54(r2)
    6724:	0084303a 	nor	r2,zero,r2
    6728:	1007883a 	mov	r3,r2
    672c:	d0a70e03 	ldbu	r2,-25544(gp)
    6730:	1884703a 	and	r2,r3,r2
    6734:	d0a70e05 	stb	r2,-25544(gp)
    }
}
    6738:	0001883a 	nop
    673c:	e037883a 	mov	sp,fp
    6740:	df000017 	ldw	fp,0(sp)
    6744:	dec00104 	addi	sp,sp,4
    6748:	f800283a 	ret

0000674c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    674c:	defffb04 	addi	sp,sp,-20
    6750:	dfc00415 	stw	ra,16(sp)
    6754:	df000315 	stw	fp,12(sp)
    6758:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    675c:	0140dc04 	movi	r5,880
    6760:	01000074 	movhi	r4,1
    6764:	21125804 	addi	r4,r4,18784
    6768:	00049900 	call	4990 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    676c:	00800074 	movhi	r2,1
    6770:	10925804 	addi	r2,r2,18784
    6774:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    6778:	00800074 	movhi	r2,1
    677c:	10926304 	addi	r2,r2,18828
    6780:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    6784:	e03ffd0d 	sth	zero,-12(fp)
    6788:	00001306 	br	67d8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    678c:	e0bffe17 	ldw	r2,-8(fp)
    6790:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    6794:	e0bffe17 	ldw	r2,-8(fp)
    6798:	e0ffff17 	ldw	r3,-4(fp)
    679c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    67a0:	e0bffe17 	ldw	r2,-8(fp)
    67a4:	00c00fc4 	movi	r3,63
    67a8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    67ac:	e0bffe17 	ldw	r2,-8(fp)
    67b0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    67b4:	e0bffe17 	ldw	r2,-8(fp)
    67b8:	10800b04 	addi	r2,r2,44
    67bc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    67c0:	e0bfff17 	ldw	r2,-4(fp)
    67c4:	10800b04 	addi	r2,r2,44
    67c8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    67cc:	e0bffd0b 	ldhu	r2,-12(fp)
    67d0:	10800044 	addi	r2,r2,1
    67d4:	e0bffd0d 	sth	r2,-12(fp)
    67d8:	e0bffd0b 	ldhu	r2,-12(fp)
    67dc:	108004f0 	cmpltui	r2,r2,19
    67e0:	103fea1e 	bne	r2,zero,678c <__alt_data_end+0xfffee0ec>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    67e4:	e0bffe17 	ldw	r2,-8(fp)
    67e8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    67ec:	e0bffe17 	ldw	r2,-8(fp)
    67f0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    67f4:	e0bffe17 	ldw	r2,-8(fp)
    67f8:	00c00fc4 	movi	r3,63
    67fc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    6800:	e0bffe17 	ldw	r2,-8(fp)
    6804:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    6808:	00800074 	movhi	r2,1
    680c:	10925804 	addi	r2,r2,18784
    6810:	d0a71315 	stw	r2,-25524(gp)
#endif
}
    6814:	0001883a 	nop
    6818:	e037883a 	mov	sp,fp
    681c:	dfc00117 	ldw	ra,4(sp)
    6820:	df000017 	ldw	fp,0(sp)
    6824:	dec00204 	addi	sp,sp,8
    6828:	f800283a 	ret

0000682c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    682c:	defffa04 	addi	sp,sp,-24
    6830:	dfc00515 	stw	ra,20(sp)
    6834:	df000415 	stw	fp,16(sp)
    6838:	df000404 	addi	fp,sp,16
    683c:	e13ffe15 	stw	r4,-8(fp)
    6840:	2805883a 	mov	r2,r5
    6844:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    6848:	e0bffe17 	ldw	r2,-8(fp)
    684c:	10800217 	ldw	r2,8(r2)
    6850:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    6854:	e0bffd17 	ldw	r2,-12(fp)
    6858:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    685c:	e0bffd17 	ldw	r2,-12(fp)
    6860:	e0ffff0b 	ldhu	r3,-4(fp)
    6864:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    6868:	e0bffd17 	ldw	r2,-12(fp)
    686c:	10c00c03 	ldbu	r3,48(r2)
    6870:	00bff7c4 	movi	r2,-33
    6874:	1884703a 	and	r2,r3,r2
    6878:	1007883a 	mov	r3,r2
    687c:	e0bffd17 	ldw	r2,-12(fp)
    6880:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    6884:	e0bffd17 	ldw	r2,-12(fp)
    6888:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    688c:	e0bffd17 	ldw	r2,-12(fp)
    6890:	10800c03 	ldbu	r2,48(r2)
    6894:	10803fcc 	andi	r2,r2,255
    6898:	1000181e 	bne	r2,zero,68fc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    689c:	e0bffd17 	ldw	r2,-12(fp)
    68a0:	10c00d83 	ldbu	r3,54(r2)
    68a4:	d0a70e03 	ldbu	r2,-25544(gp)
    68a8:	1884b03a 	or	r2,r3,r2
    68ac:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    68b0:	e0bffd17 	ldw	r2,-12(fp)
    68b4:	10800d03 	ldbu	r2,52(r2)
    68b8:	10c03fcc 	andi	r3,r2,255
    68bc:	e0bffd17 	ldw	r2,-12(fp)
    68c0:	10800d03 	ldbu	r2,52(r2)
    68c4:	11003fcc 	andi	r4,r2,255
    68c8:	d0a70e44 	addi	r2,gp,-25543
    68cc:	2085883a 	add	r2,r4,r2
    68d0:	11000003 	ldbu	r4,0(r2)
    68d4:	e0bffd17 	ldw	r2,-12(fp)
    68d8:	10800d43 	ldbu	r2,53(r2)
    68dc:	2084b03a 	or	r2,r4,r2
    68e0:	1009883a 	mov	r4,r2
    68e4:	d0a70e44 	addi	r2,gp,-25543
    68e8:	1885883a 	add	r2,r3,r2
    68ec:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    68f0:	00800044 	movi	r2,1
    68f4:	e0bffc05 	stb	r2,-16(fp)
    68f8:	00000106 	br	6900 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    68fc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    6900:	e13ffe17 	ldw	r4,-8(fp)
    6904:	00069200 	call	6920 <OS_FlagUnlink>
    return (sched);
    6908:	e0bffc03 	ldbu	r2,-16(fp)
}
    690c:	e037883a 	mov	sp,fp
    6910:	dfc00117 	ldw	ra,4(sp)
    6914:	df000017 	ldw	fp,0(sp)
    6918:	dec00204 	addi	sp,sp,8
    691c:	f800283a 	ret

00006920 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    6920:	defffa04 	addi	sp,sp,-24
    6924:	df000515 	stw	fp,20(sp)
    6928:	df000504 	addi	fp,sp,20
    692c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    6930:	e0bfff17 	ldw	r2,-4(fp)
    6934:	10800117 	ldw	r2,4(r2)
    6938:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    693c:	e0bfff17 	ldw	r2,-4(fp)
    6940:	10800017 	ldw	r2,0(r2)
    6944:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    6948:	e0bffb17 	ldw	r2,-20(fp)
    694c:	10000b1e 	bne	r2,zero,697c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    6950:	e0bfff17 	ldw	r2,-4(fp)
    6954:	10800317 	ldw	r2,12(r2)
    6958:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    695c:	e0bffd17 	ldw	r2,-12(fp)
    6960:	e0fffc17 	ldw	r3,-16(fp)
    6964:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    6968:	e0bffc17 	ldw	r2,-16(fp)
    696c:	10000b26 	beq	r2,zero,699c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    6970:	e0bffc17 	ldw	r2,-16(fp)
    6974:	10000115 	stw	zero,4(r2)
    6978:	00000806 	br	699c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    697c:	e0bffb17 	ldw	r2,-20(fp)
    6980:	e0fffc17 	ldw	r3,-16(fp)
    6984:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    6988:	e0bffc17 	ldw	r2,-16(fp)
    698c:	10000326 	beq	r2,zero,699c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    6990:	e0bffc17 	ldw	r2,-16(fp)
    6994:	e0fffb17 	ldw	r3,-20(fp)
    6998:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    699c:	e0bfff17 	ldw	r2,-4(fp)
    69a0:	10800217 	ldw	r2,8(r2)
    69a4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    69a8:	e0bffe17 	ldw	r2,-8(fp)
    69ac:	10000a15 	stw	zero,40(r2)
#endif
}
    69b0:	0001883a 	nop
    69b4:	e037883a 	mov	sp,fp
    69b8:	df000017 	ldw	fp,0(sp)
    69bc:	dec00104 	addi	sp,sp,4
    69c0:	f800283a 	ret

000069c4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    69c4:	defff404 	addi	sp,sp,-48
    69c8:	df000b15 	stw	fp,44(sp)
    69cc:	df000b04 	addi	fp,sp,44
    69d0:	e13ffc15 	stw	r4,-16(fp)
    69d4:	e17ffd15 	stw	r5,-12(fp)
    69d8:	e1bffe15 	stw	r6,-8(fp)
    69dc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    69e0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    69e4:	e0bfff17 	ldw	r2,-4(fp)
    69e8:	1000021e 	bne	r2,zero,69f4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    69ec:	0005883a 	mov	r2,zero
    69f0:	00006506 	br	6b88 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    69f4:	e0bffc17 	ldw	r2,-16(fp)
    69f8:	1000051e 	bne	r2,zero,6a10 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    69fc:	e0bfff17 	ldw	r2,-4(fp)
    6a00:	00c01884 	movi	r3,98
    6a04:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a08:	0005883a 	mov	r2,zero
    6a0c:	00005e06 	br	6b88 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    6a10:	e0bffc17 	ldw	r2,-16(fp)
    6a14:	108000cc 	andi	r2,r2,3
    6a18:	10000526 	beq	r2,zero,6a30 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    6a1c:	e0bfff17 	ldw	r2,-4(fp)
    6a20:	00c01884 	movi	r3,98
    6a24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a28:	0005883a 	mov	r2,zero
    6a2c:	00005606 	br	6b88 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    6a30:	e0bffd17 	ldw	r2,-12(fp)
    6a34:	108000a8 	cmpgeui	r2,r2,2
    6a38:	1000051e 	bne	r2,zero,6a50 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    6a3c:	e0bfff17 	ldw	r2,-4(fp)
    6a40:	00c016c4 	movi	r3,91
    6a44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a48:	0005883a 	mov	r2,zero
    6a4c:	00004e06 	br	6b88 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    6a50:	e0bffe17 	ldw	r2,-8(fp)
    6a54:	10800128 	cmpgeui	r2,r2,4
    6a58:	1000051e 	bne	r2,zero,6a70 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    6a5c:	e0bfff17 	ldw	r2,-4(fp)
    6a60:	00c01704 	movi	r3,92
    6a64:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6a68:	0005883a 	mov	r2,zero
    6a6c:	00004606 	br	6b88 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a70:	0005303a 	rdctl	r2,status
    6a74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a78:	e0fffb17 	ldw	r3,-20(fp)
    6a7c:	00bfff84 	movi	r2,-2
    6a80:	1884703a 	and	r2,r3,r2
    6a84:	1001703a 	wrctl	status,r2
  
  return context;
    6a88:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6a8c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    6a90:	d0a70b17 	ldw	r2,-25556(gp)
    6a94:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    6a98:	d0a70b17 	ldw	r2,-25556(gp)
    6a9c:	10000326 	beq	r2,zero,6aac <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    6aa0:	d0a70b17 	ldw	r2,-25556(gp)
    6aa4:	10800117 	ldw	r2,4(r2)
    6aa8:	d0a70b15 	stw	r2,-25556(gp)
    6aac:	e0bff817 	ldw	r2,-32(fp)
    6ab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ab4:	e0bff917 	ldw	r2,-28(fp)
    6ab8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    6abc:	e0bffa17 	ldw	r2,-24(fp)
    6ac0:	1000051e 	bne	r2,zero,6ad8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    6ac4:	e0bfff17 	ldw	r2,-4(fp)
    6ac8:	00c01684 	movi	r3,90
    6acc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    6ad0:	0005883a 	mov	r2,zero
    6ad4:	00002c06 	br	6b88 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    6ad8:	e0bffc17 	ldw	r2,-16(fp)
    6adc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    6ae0:	e0fffc17 	ldw	r3,-16(fp)
    6ae4:	e0bffe17 	ldw	r2,-8(fp)
    6ae8:	1885883a 	add	r2,r3,r2
    6aec:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    6af0:	e03ff715 	stw	zero,-36(fp)
    6af4:	00000c06 	br	6b28 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    6af8:	e0bff617 	ldw	r2,-40(fp)
    6afc:	e0fff517 	ldw	r3,-44(fp)
    6b00:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    6b04:	e0bff517 	ldw	r2,-44(fp)
    6b08:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    6b0c:	e0fff517 	ldw	r3,-44(fp)
    6b10:	e0bffe17 	ldw	r2,-8(fp)
    6b14:	1885883a 	add	r2,r3,r2
    6b18:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    6b1c:	e0bff717 	ldw	r2,-36(fp)
    6b20:	10800044 	addi	r2,r2,1
    6b24:	e0bff715 	stw	r2,-36(fp)
    6b28:	e0bffd17 	ldw	r2,-12(fp)
    6b2c:	10bfffc4 	addi	r2,r2,-1
    6b30:	e0fff717 	ldw	r3,-36(fp)
    6b34:	18bff036 	bltu	r3,r2,6af8 <__alt_data_end+0xfffee458>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    6b38:	e0bff617 	ldw	r2,-40(fp)
    6b3c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    6b40:	e0bffa17 	ldw	r2,-24(fp)
    6b44:	e0fffc17 	ldw	r3,-16(fp)
    6b48:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    6b4c:	e0bffa17 	ldw	r2,-24(fp)
    6b50:	e0fffc17 	ldw	r3,-16(fp)
    6b54:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    6b58:	e0bffa17 	ldw	r2,-24(fp)
    6b5c:	e0fffd17 	ldw	r3,-12(fp)
    6b60:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    6b64:	e0bffa17 	ldw	r2,-24(fp)
    6b68:	e0fffd17 	ldw	r3,-12(fp)
    6b6c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    6b70:	e0bffa17 	ldw	r2,-24(fp)
    6b74:	e0fffe17 	ldw	r3,-8(fp)
    6b78:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    6b7c:	e0bfff17 	ldw	r2,-4(fp)
    6b80:	10000005 	stb	zero,0(r2)
    return (pmem);
    6b84:	e0bffa17 	ldw	r2,-24(fp)
}
    6b88:	e037883a 	mov	sp,fp
    6b8c:	df000017 	ldw	fp,0(sp)
    6b90:	dec00104 	addi	sp,sp,4
    6b94:	f800283a 	ret

00006b98 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    6b98:	defff804 	addi	sp,sp,-32
    6b9c:	df000715 	stw	fp,28(sp)
    6ba0:	df000704 	addi	fp,sp,28
    6ba4:	e13ffe15 	stw	r4,-8(fp)
    6ba8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6bac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    6bb0:	e0bfff17 	ldw	r2,-4(fp)
    6bb4:	1000021e 	bne	r2,zero,6bc0 <OSMemGet+0x28>
        return ((void *)0);
    6bb8:	0005883a 	mov	r2,zero
    6bbc:	00002e06 	br	6c78 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    6bc0:	e0bffe17 	ldw	r2,-8(fp)
    6bc4:	1000051e 	bne	r2,zero,6bdc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6bc8:	e0bfff17 	ldw	r2,-4(fp)
    6bcc:	00c01804 	movi	r3,96
    6bd0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    6bd4:	0005883a 	mov	r2,zero
    6bd8:	00002706 	br	6c78 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6bdc:	0005303a 	rdctl	r2,status
    6be0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6be4:	e0fffd17 	ldw	r3,-12(fp)
    6be8:	00bfff84 	movi	r2,-2
    6bec:	1884703a 	and	r2,r3,r2
    6bf0:	1001703a 	wrctl	status,r2
  
  return context;
    6bf4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6bf8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    6bfc:	e0bffe17 	ldw	r2,-8(fp)
    6c00:	10800417 	ldw	r2,16(r2)
    6c04:	10001426 	beq	r2,zero,6c58 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    6c08:	e0bffe17 	ldw	r2,-8(fp)
    6c0c:	10800117 	ldw	r2,4(r2)
    6c10:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    6c14:	e0bffb17 	ldw	r2,-20(fp)
    6c18:	10c00017 	ldw	r3,0(r2)
    6c1c:	e0bffe17 	ldw	r2,-8(fp)
    6c20:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    6c24:	e0bffe17 	ldw	r2,-8(fp)
    6c28:	10800417 	ldw	r2,16(r2)
    6c2c:	10ffffc4 	addi	r3,r2,-1
    6c30:	e0bffe17 	ldw	r2,-8(fp)
    6c34:	10c00415 	stw	r3,16(r2)
    6c38:	e0bff917 	ldw	r2,-28(fp)
    6c3c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c40:	e0bffa17 	ldw	r2,-24(fp)
    6c44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    6c48:	e0bfff17 	ldw	r2,-4(fp)
    6c4c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    6c50:	e0bffb17 	ldw	r2,-20(fp)
    6c54:	00000806 	br	6c78 <OSMemGet+0xe0>
    6c58:	e0bff917 	ldw	r2,-28(fp)
    6c5c:	e0bffc15 	stw	r2,-16(fp)
    6c60:	e0bffc17 	ldw	r2,-16(fp)
    6c64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    6c68:	e0bfff17 	ldw	r2,-4(fp)
    6c6c:	00c01744 	movi	r3,93
    6c70:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    6c74:	0005883a 	mov	r2,zero
}
    6c78:	e037883a 	mov	sp,fp
    6c7c:	df000017 	ldw	fp,0(sp)
    6c80:	dec00104 	addi	sp,sp,4
    6c84:	f800283a 	ret

00006c88 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    6c88:	defff704 	addi	sp,sp,-36
    6c8c:	dfc00815 	stw	ra,32(sp)
    6c90:	df000715 	stw	fp,28(sp)
    6c94:	df000704 	addi	fp,sp,28
    6c98:	e13ffd15 	stw	r4,-12(fp)
    6c9c:	e17ffe15 	stw	r5,-8(fp)
    6ca0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6ca4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6ca8:	e0bfff17 	ldw	r2,-4(fp)
    6cac:	1000021e 	bne	r2,zero,6cb8 <OSMemNameGet+0x30>
        return (0);
    6cb0:	0005883a 	mov	r2,zero
    6cb4:	00002b06 	br	6d64 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6cb8:	e0bffd17 	ldw	r2,-12(fp)
    6cbc:	1000051e 	bne	r2,zero,6cd4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6cc0:	e0bfff17 	ldw	r2,-4(fp)
    6cc4:	00c01804 	movi	r3,96
    6cc8:	10c00005 	stb	r3,0(r2)
        return (0);
    6ccc:	0005883a 	mov	r2,zero
    6cd0:	00002406 	br	6d64 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6cd4:	e0bffe17 	ldw	r2,-8(fp)
    6cd8:	1000051e 	bne	r2,zero,6cf0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    6cdc:	e0bfff17 	ldw	r2,-4(fp)
    6ce0:	00c00304 	movi	r3,12
    6ce4:	10c00005 	stb	r3,0(r2)
        return (0);
    6ce8:	0005883a 	mov	r2,zero
    6cec:	00001d06 	br	6d64 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6cf0:	d0a71003 	ldbu	r2,-25536(gp)
    6cf4:	10803fcc 	andi	r2,r2,255
    6cf8:	10000526 	beq	r2,zero,6d10 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    6cfc:	e0bfff17 	ldw	r2,-4(fp)
    6d00:	00c00444 	movi	r3,17
    6d04:	10c00005 	stb	r3,0(r2)
        return (0);
    6d08:	0005883a 	mov	r2,zero
    6d0c:	00001506 	br	6d64 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6d10:	0005303a 	rdctl	r2,status
    6d14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6d18:	e0fffb17 	ldw	r3,-20(fp)
    6d1c:	00bfff84 	movi	r2,-2
    6d20:	1884703a 	and	r2,r3,r2
    6d24:	1001703a 	wrctl	status,r2
  
  return context;
    6d28:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    6d2c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    6d30:	e0bffd17 	ldw	r2,-12(fp)
    6d34:	10800504 	addi	r2,r2,20
    6d38:	100b883a 	mov	r5,r2
    6d3c:	e13ffe17 	ldw	r4,-8(fp)
    6d40:	0004b900 	call	4b90 <OS_StrCopy>
    6d44:	e0bffa05 	stb	r2,-24(fp)
    6d48:	e0bff917 	ldw	r2,-28(fp)
    6d4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6d50:	e0bffc17 	ldw	r2,-16(fp)
    6d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6d58:	e0bfff17 	ldw	r2,-4(fp)
    6d5c:	10000005 	stb	zero,0(r2)
    return (len);
    6d60:	e0bffa03 	ldbu	r2,-24(fp)
}
    6d64:	e037883a 	mov	sp,fp
    6d68:	dfc00117 	ldw	ra,4(sp)
    6d6c:	df000017 	ldw	fp,0(sp)
    6d70:	dec00204 	addi	sp,sp,8
    6d74:	f800283a 	ret

00006d78 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    6d78:	defff604 	addi	sp,sp,-40
    6d7c:	dfc00915 	stw	ra,36(sp)
    6d80:	df000815 	stw	fp,32(sp)
    6d84:	df000804 	addi	fp,sp,32
    6d88:	e13ffd15 	stw	r4,-12(fp)
    6d8c:	e17ffe15 	stw	r5,-8(fp)
    6d90:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6d94:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    6d98:	e0bfff17 	ldw	r2,-4(fp)
    6d9c:	10003526 	beq	r2,zero,6e74 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    6da0:	e0bffd17 	ldw	r2,-12(fp)
    6da4:	1000041e 	bne	r2,zero,6db8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    6da8:	e0bfff17 	ldw	r2,-4(fp)
    6dac:	00c01804 	movi	r3,96
    6db0:	10c00005 	stb	r3,0(r2)
        return;
    6db4:	00003006 	br	6e78 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    6db8:	e0bffe17 	ldw	r2,-8(fp)
    6dbc:	1000041e 	bne	r2,zero,6dd0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    6dc0:	e0bfff17 	ldw	r2,-4(fp)
    6dc4:	00c00304 	movi	r3,12
    6dc8:	10c00005 	stb	r3,0(r2)
        return;
    6dcc:	00002a06 	br	6e78 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    6dd0:	d0a71003 	ldbu	r2,-25536(gp)
    6dd4:	10803fcc 	andi	r2,r2,255
    6dd8:	10000426 	beq	r2,zero,6dec <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    6ddc:	e0bfff17 	ldw	r2,-4(fp)
    6de0:	00c00484 	movi	r3,18
    6de4:	10c00005 	stb	r3,0(r2)
        return;
    6de8:	00002306 	br	6e78 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6dec:	0005303a 	rdctl	r2,status
    6df0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6df4:	e0fffc17 	ldw	r3,-16(fp)
    6df8:	00bfff84 	movi	r2,-2
    6dfc:	1884703a 	and	r2,r3,r2
    6e00:	1001703a 	wrctl	status,r2
  
  return context;
    6e04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    6e08:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    6e0c:	e13ffe17 	ldw	r4,-8(fp)
    6e10:	0004c040 	call	4c04 <OS_StrLen>
    6e14:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    6e18:	e0bffa03 	ldbu	r2,-24(fp)
    6e1c:	10800830 	cmpltui	r2,r2,32
    6e20:	1000081e 	bne	r2,zero,6e44 <OSMemNameSet+0xcc>
    6e24:	e0bff817 	ldw	r2,-32(fp)
    6e28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6e2c:	e0bff917 	ldw	r2,-28(fp)
    6e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    6e34:	e0bfff17 	ldw	r2,-4(fp)
    6e38:	00c018c4 	movi	r3,99
    6e3c:	10c00005 	stb	r3,0(r2)
        return;
    6e40:	00000d06 	br	6e78 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    6e44:	e0bffd17 	ldw	r2,-12(fp)
    6e48:	10800504 	addi	r2,r2,20
    6e4c:	e17ffe17 	ldw	r5,-8(fp)
    6e50:	1009883a 	mov	r4,r2
    6e54:	0004b900 	call	4b90 <OS_StrCopy>
    6e58:	e0bff817 	ldw	r2,-32(fp)
    6e5c:	e0bffb15 	stw	r2,-20(fp)
    6e60:	e0bffb17 	ldw	r2,-20(fp)
    6e64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    6e68:	e0bfff17 	ldw	r2,-4(fp)
    6e6c:	10000005 	stb	zero,0(r2)
    6e70:	00000106 	br	6e78 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    6e74:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    6e78:	e037883a 	mov	sp,fp
    6e7c:	dfc00117 	ldw	ra,4(sp)
    6e80:	df000017 	ldw	fp,0(sp)
    6e84:	dec00204 	addi	sp,sp,8
    6e88:	f800283a 	ret

00006e8c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    6e8c:	defff904 	addi	sp,sp,-28
    6e90:	df000615 	stw	fp,24(sp)
    6e94:	df000604 	addi	fp,sp,24
    6e98:	e13ffe15 	stw	r4,-8(fp)
    6e9c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6ea0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6ea4:	e0bffe17 	ldw	r2,-8(fp)
    6ea8:	1000021e 	bne	r2,zero,6eb4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6eac:	00801804 	movi	r2,96
    6eb0:	00002806 	br	6f54 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    6eb4:	e0bfff17 	ldw	r2,-4(fp)
    6eb8:	1000021e 	bne	r2,zero,6ec4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    6ebc:	008017c4 	movi	r2,95
    6ec0:	00002406 	br	6f54 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6ec4:	0005303a 	rdctl	r2,status
    6ec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6ecc:	e0fffd17 	ldw	r3,-12(fp)
    6ed0:	00bfff84 	movi	r2,-2
    6ed4:	1884703a 	and	r2,r3,r2
    6ed8:	1001703a 	wrctl	status,r2
  
  return context;
    6edc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6ee0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    6ee4:	e0bffe17 	ldw	r2,-8(fp)
    6ee8:	10c00417 	ldw	r3,16(r2)
    6eec:	e0bffe17 	ldw	r2,-8(fp)
    6ef0:	10800317 	ldw	r2,12(r2)
    6ef4:	18800636 	bltu	r3,r2,6f10 <OSMemPut+0x84>
    6ef8:	e0bffa17 	ldw	r2,-24(fp)
    6efc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f00:	e0bffb17 	ldw	r2,-20(fp)
    6f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    6f08:	00801784 	movi	r2,94
    6f0c:	00001106 	br	6f54 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    6f10:	e0bffe17 	ldw	r2,-8(fp)
    6f14:	10c00117 	ldw	r3,4(r2)
    6f18:	e0bfff17 	ldw	r2,-4(fp)
    6f1c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    6f20:	e0bffe17 	ldw	r2,-8(fp)
    6f24:	e0ffff17 	ldw	r3,-4(fp)
    6f28:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    6f2c:	e0bffe17 	ldw	r2,-8(fp)
    6f30:	10800417 	ldw	r2,16(r2)
    6f34:	10c00044 	addi	r3,r2,1
    6f38:	e0bffe17 	ldw	r2,-8(fp)
    6f3c:	10c00415 	stw	r3,16(r2)
    6f40:	e0bffa17 	ldw	r2,-24(fp)
    6f44:	e0bffc15 	stw	r2,-16(fp)
    6f48:	e0bffc17 	ldw	r2,-16(fp)
    6f4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    6f50:	0005883a 	mov	r2,zero
}
    6f54:	e037883a 	mov	sp,fp
    6f58:	df000017 	ldw	fp,0(sp)
    6f5c:	dec00104 	addi	sp,sp,4
    6f60:	f800283a 	ret

00006f64 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    6f64:	defffa04 	addi	sp,sp,-24
    6f68:	df000515 	stw	fp,20(sp)
    6f6c:	df000504 	addi	fp,sp,20
    6f70:	e13ffe15 	stw	r4,-8(fp)
    6f74:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6f78:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    6f7c:	e0bffe17 	ldw	r2,-8(fp)
    6f80:	1000021e 	bne	r2,zero,6f8c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    6f84:	00801804 	movi	r2,96
    6f88:	00002c06 	br	703c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    6f8c:	e0bfff17 	ldw	r2,-4(fp)
    6f90:	1000021e 	bne	r2,zero,6f9c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    6f94:	00801844 	movi	r2,97
    6f98:	00002806 	br	703c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f9c:	0005303a 	rdctl	r2,status
    6fa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fa4:	e0fffc17 	ldw	r3,-16(fp)
    6fa8:	00bfff84 	movi	r2,-2
    6fac:	1884703a 	and	r2,r3,r2
    6fb0:	1001703a 	wrctl	status,r2
  
  return context;
    6fb4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6fb8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    6fbc:	e0bffe17 	ldw	r2,-8(fp)
    6fc0:	10c00017 	ldw	r3,0(r2)
    6fc4:	e0bfff17 	ldw	r2,-4(fp)
    6fc8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    6fcc:	e0bffe17 	ldw	r2,-8(fp)
    6fd0:	10c00117 	ldw	r3,4(r2)
    6fd4:	e0bfff17 	ldw	r2,-4(fp)
    6fd8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    6fdc:	e0bffe17 	ldw	r2,-8(fp)
    6fe0:	10c00217 	ldw	r3,8(r2)
    6fe4:	e0bfff17 	ldw	r2,-4(fp)
    6fe8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    6fec:	e0bffe17 	ldw	r2,-8(fp)
    6ff0:	10c00317 	ldw	r3,12(r2)
    6ff4:	e0bfff17 	ldw	r2,-4(fp)
    6ff8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    6ffc:	e0bffe17 	ldw	r2,-8(fp)
    7000:	10c00417 	ldw	r3,16(r2)
    7004:	e0bfff17 	ldw	r2,-4(fp)
    7008:	10c00415 	stw	r3,16(r2)
    700c:	e0bffb17 	ldw	r2,-20(fp)
    7010:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7014:	e0bffd17 	ldw	r2,-12(fp)
    7018:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    701c:	e0bfff17 	ldw	r2,-4(fp)
    7020:	10c00317 	ldw	r3,12(r2)
    7024:	e0bfff17 	ldw	r2,-4(fp)
    7028:	10800417 	ldw	r2,16(r2)
    702c:	1887c83a 	sub	r3,r3,r2
    7030:	e0bfff17 	ldw	r2,-4(fp)
    7034:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    7038:	0005883a 	mov	r2,zero
}
    703c:	e037883a 	mov	sp,fp
    7040:	df000017 	ldw	fp,0(sp)
    7044:	dec00104 	addi	sp,sp,4
    7048:	f800283a 	ret

0000704c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    704c:	defffc04 	addi	sp,sp,-16
    7050:	dfc00315 	stw	ra,12(sp)
    7054:	df000215 	stw	fp,8(sp)
    7058:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    705c:	01430c04 	movi	r5,3120
    7060:	01000074 	movhi	r4,1
    7064:	21133404 	addi	r4,r4,19664
    7068:	00049900 	call	4990 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    706c:	00800074 	movhi	r2,1
    7070:	10933404 	addi	r2,r2,19664
    7074:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    7078:	e03fff0d 	sth	zero,-4(fp)
    707c:	00001606 	br	70d8 <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    7080:	e0bfff0b 	ldhu	r2,-4(fp)
    7084:	10800044 	addi	r2,r2,1
    7088:	01400d04 	movi	r5,52
    708c:	1009883a 	mov	r4,r2
    7090:	00024480 	call	2448 <__mulsi3>
    7094:	1007883a 	mov	r3,r2
    7098:	00800074 	movhi	r2,1
    709c:	10933404 	addi	r2,r2,19664
    70a0:	1887883a 	add	r3,r3,r2
    70a4:	e0bffe17 	ldw	r2,-8(fp)
    70a8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    70ac:	e0bffe17 	ldw	r2,-8(fp)
    70b0:	00c00fc4 	movi	r3,63
    70b4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    70b8:	e0bffe17 	ldw	r2,-8(fp)
    70bc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    70c0:	e0bffe17 	ldw	r2,-8(fp)
    70c4:	10800d04 	addi	r2,r2,52
    70c8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    70cc:	e0bfff0b 	ldhu	r2,-4(fp)
    70d0:	10800044 	addi	r2,r2,1
    70d4:	e0bfff0d 	sth	r2,-4(fp)
    70d8:	e0bfff0b 	ldhu	r2,-4(fp)
    70dc:	10800ef0 	cmpltui	r2,r2,59
    70e0:	103fe71e 	bne	r2,zero,7080 <__alt_data_end+0xfffee9e0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    70e4:	e0bffe17 	ldw	r2,-8(fp)
    70e8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    70ec:	e0bffe17 	ldw	r2,-8(fp)
    70f0:	00c00fc4 	movi	r3,63
    70f4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    70f8:	e0bffe17 	ldw	r2,-8(fp)
    70fc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    7100:	00800074 	movhi	r2,1
    7104:	10933404 	addi	r2,r2,19664
    7108:	d0a70b15 	stw	r2,-25556(gp)
#endif
}
    710c:	0001883a 	nop
    7110:	e037883a 	mov	sp,fp
    7114:	dfc00117 	ldw	ra,4(sp)
    7118:	df000017 	ldw	fp,0(sp)
    711c:	dec00204 	addi	sp,sp,8
    7120:	f800283a 	ret

00007124 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    7124:	defff804 	addi	sp,sp,-32
    7128:	df000715 	stw	fp,28(sp)
    712c:	df000704 	addi	fp,sp,28
    7130:	e13ffe15 	stw	r4,-8(fp)
    7134:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7138:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    713c:	e0bfff17 	ldw	r2,-4(fp)
    7140:	1000021e 	bne	r2,zero,714c <OSQAccept+0x28>
        return ((void *)0);
    7144:	0005883a 	mov	r2,zero
    7148:	00004206 	br	7254 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    714c:	e0bffe17 	ldw	r2,-8(fp)
    7150:	1000051e 	bne	r2,zero,7168 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    7154:	e0bfff17 	ldw	r2,-4(fp)
    7158:	00c00104 	movi	r3,4
    715c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7160:	0005883a 	mov	r2,zero
    7164:	00003b06 	br	7254 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7168:	e0bffe17 	ldw	r2,-8(fp)
    716c:	10800003 	ldbu	r2,0(r2)
    7170:	10803fcc 	andi	r2,r2,255
    7174:	108000a0 	cmpeqi	r2,r2,2
    7178:	1000051e 	bne	r2,zero,7190 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    717c:	e0bfff17 	ldw	r2,-4(fp)
    7180:	00c00044 	movi	r3,1
    7184:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7188:	0005883a 	mov	r2,zero
    718c:	00003106 	br	7254 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7190:	0005303a 	rdctl	r2,status
    7194:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7198:	e0fffd17 	ldw	r3,-12(fp)
    719c:	00bfff84 	movi	r2,-2
    71a0:	1884703a 	and	r2,r3,r2
    71a4:	1001703a 	wrctl	status,r2
  
  return context;
    71a8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    71ac:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    71b0:	e0bffe17 	ldw	r2,-8(fp)
    71b4:	10800117 	ldw	r2,4(r2)
    71b8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    71bc:	e0bffc17 	ldw	r2,-16(fp)
    71c0:	1080058b 	ldhu	r2,22(r2)
    71c4:	10bfffcc 	andi	r2,r2,65535
    71c8:	10001926 	beq	r2,zero,7230 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    71cc:	e0bffc17 	ldw	r2,-16(fp)
    71d0:	10800417 	ldw	r2,16(r2)
    71d4:	11000104 	addi	r4,r2,4
    71d8:	e0fffc17 	ldw	r3,-16(fp)
    71dc:	19000415 	stw	r4,16(r3)
    71e0:	10800017 	ldw	r2,0(r2)
    71e4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    71e8:	e0bffc17 	ldw	r2,-16(fp)
    71ec:	1080058b 	ldhu	r2,22(r2)
    71f0:	10bfffc4 	addi	r2,r2,-1
    71f4:	1007883a 	mov	r3,r2
    71f8:	e0bffc17 	ldw	r2,-16(fp)
    71fc:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7200:	e0bffc17 	ldw	r2,-16(fp)
    7204:	10c00417 	ldw	r3,16(r2)
    7208:	e0bffc17 	ldw	r2,-16(fp)
    720c:	10800217 	ldw	r2,8(r2)
    7210:	1880041e 	bne	r3,r2,7224 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    7214:	e0bffc17 	ldw	r2,-16(fp)
    7218:	10c00117 	ldw	r3,4(r2)
    721c:	e0bffc17 	ldw	r2,-16(fp)
    7220:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    7224:	e0bfff17 	ldw	r2,-4(fp)
    7228:	10000005 	stb	zero,0(r2)
    722c:	00000406 	br	7240 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    7230:	e0bfff17 	ldw	r2,-4(fp)
    7234:	00c007c4 	movi	r3,31
    7238:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    723c:	e03ff915 	stw	zero,-28(fp)
    7240:	e0bffa17 	ldw	r2,-24(fp)
    7244:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7248:	e0bffb17 	ldw	r2,-20(fp)
    724c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    7250:	e0bff917 	ldw	r2,-28(fp)
}
    7254:	e037883a 	mov	sp,fp
    7258:	df000017 	ldw	fp,0(sp)
    725c:	dec00104 	addi	sp,sp,4
    7260:	f800283a 	ret

00007264 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    7264:	defff404 	addi	sp,sp,-48
    7268:	dfc00b15 	stw	ra,44(sp)
    726c:	df000a15 	stw	fp,40(sp)
    7270:	df000a04 	addi	fp,sp,40
    7274:	e13ffe15 	stw	r4,-8(fp)
    7278:	2805883a 	mov	r2,r5
    727c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7280:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    7284:	d0a71003 	ldbu	r2,-25536(gp)
    7288:	10803fcc 	andi	r2,r2,255
    728c:	10000226 	beq	r2,zero,7298 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    7290:	0005883a 	mov	r2,zero
    7294:	00005906 	br	73fc <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7298:	0005303a 	rdctl	r2,status
    729c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72a0:	e0fffd17 	ldw	r3,-12(fp)
    72a4:	00bfff84 	movi	r2,-2
    72a8:	1884703a 	and	r2,r3,r2
    72ac:	1001703a 	wrctl	status,r2
  
  return context;
    72b0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    72b4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    72b8:	d0a70f17 	ldw	r2,-25540(gp)
    72bc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    72c0:	d0a70f17 	ldw	r2,-25540(gp)
    72c4:	10000326 	beq	r2,zero,72d4 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    72c8:	d0a70f17 	ldw	r2,-25540(gp)
    72cc:	10800117 	ldw	r2,4(r2)
    72d0:	d0a70f15 	stw	r2,-25540(gp)
    72d4:	e0bff717 	ldw	r2,-36(fp)
    72d8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    72dc:	e0bff817 	ldw	r2,-32(fp)
    72e0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    72e4:	e0bff617 	ldw	r2,-40(fp)
    72e8:	10004326 	beq	r2,zero,73f8 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    72ec:	0005303a 	rdctl	r2,status
    72f0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    72f4:	e0fff917 	ldw	r3,-28(fp)
    72f8:	00bfff84 	movi	r2,-2
    72fc:	1884703a 	and	r2,r3,r2
    7300:	1001703a 	wrctl	status,r2
  
  return context;
    7304:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    7308:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    730c:	d0a70d17 	ldw	r2,-25548(gp)
    7310:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    7314:	e0bffb17 	ldw	r2,-20(fp)
    7318:	10002d26 	beq	r2,zero,73d0 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    731c:	d0a70d17 	ldw	r2,-25548(gp)
    7320:	10800017 	ldw	r2,0(r2)
    7324:	d0a70d15 	stw	r2,-25548(gp)
    7328:	e0bff717 	ldw	r2,-36(fp)
    732c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7330:	e0bffa17 	ldw	r2,-24(fp)
    7334:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    7338:	e0bffb17 	ldw	r2,-20(fp)
    733c:	e0fffe17 	ldw	r3,-8(fp)
    7340:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    7344:	e0bfff0b 	ldhu	r2,-4(fp)
    7348:	1085883a 	add	r2,r2,r2
    734c:	1085883a 	add	r2,r2,r2
    7350:	1007883a 	mov	r3,r2
    7354:	e0bffe17 	ldw	r2,-8(fp)
    7358:	10c7883a 	add	r3,r2,r3
    735c:	e0bffb17 	ldw	r2,-20(fp)
    7360:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    7364:	e0bffb17 	ldw	r2,-20(fp)
    7368:	e0fffe17 	ldw	r3,-8(fp)
    736c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    7370:	e0bffb17 	ldw	r2,-20(fp)
    7374:	e0fffe17 	ldw	r3,-8(fp)
    7378:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    737c:	e0bffb17 	ldw	r2,-20(fp)
    7380:	e0ffff0b 	ldhu	r3,-4(fp)
    7384:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    7388:	e0bffb17 	ldw	r2,-20(fp)
    738c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    7390:	e0bff617 	ldw	r2,-40(fp)
    7394:	00c00084 	movi	r3,2
    7398:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    739c:	e0bff617 	ldw	r2,-40(fp)
    73a0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    73a4:	e0bff617 	ldw	r2,-40(fp)
    73a8:	e0fffb17 	ldw	r3,-20(fp)
    73ac:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    73b0:	e0bff617 	ldw	r2,-40(fp)
    73b4:	00c00fc4 	movi	r3,63
    73b8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    73bc:	e0bff617 	ldw	r2,-40(fp)
    73c0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    73c4:	e13ff617 	ldw	r4,-40(fp)
    73c8:	00045b00 	call	45b0 <OS_EventWaitListInit>
    73cc:	00000a06 	br	73f8 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    73d0:	d0e70f17 	ldw	r3,-25540(gp)
    73d4:	e0bff617 	ldw	r2,-40(fp)
    73d8:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    73dc:	e0bff617 	ldw	r2,-40(fp)
    73e0:	d0a70f15 	stw	r2,-25540(gp)
    73e4:	e0bff717 	ldw	r2,-36(fp)
    73e8:	e0bffc15 	stw	r2,-16(fp)
    73ec:	e0bffc17 	ldw	r2,-16(fp)
    73f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    73f4:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    73f8:	e0bff617 	ldw	r2,-40(fp)
}
    73fc:	e037883a 	mov	sp,fp
    7400:	dfc00117 	ldw	ra,4(sp)
    7404:	df000017 	ldw	fp,0(sp)
    7408:	dec00204 	addi	sp,sp,8
    740c:	f800283a 	ret

00007410 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    7410:	defff204 	addi	sp,sp,-56
    7414:	dfc00d15 	stw	ra,52(sp)
    7418:	df000c15 	stw	fp,48(sp)
    741c:	df000c04 	addi	fp,sp,48
    7420:	e13ffd15 	stw	r4,-12(fp)
    7424:	2805883a 	mov	r2,r5
    7428:	e1bfff15 	stw	r6,-4(fp)
    742c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    7430:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    7434:	e0bfff17 	ldw	r2,-4(fp)
    7438:	1000021e 	bne	r2,zero,7444 <OSQDel+0x34>
        return (pevent);
    743c:	e0bffd17 	ldw	r2,-12(fp)
    7440:	00008e06 	br	767c <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7444:	e0bffd17 	ldw	r2,-12(fp)
    7448:	1000051e 	bne	r2,zero,7460 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    744c:	e0bfff17 	ldw	r2,-4(fp)
    7450:	00c00104 	movi	r3,4
    7454:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7458:	e0bffd17 	ldw	r2,-12(fp)
    745c:	00008706 	br	767c <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7460:	e0bffd17 	ldw	r2,-12(fp)
    7464:	10800003 	ldbu	r2,0(r2)
    7468:	10803fcc 	andi	r2,r2,255
    746c:	108000a0 	cmpeqi	r2,r2,2
    7470:	1000051e 	bne	r2,zero,7488 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7474:	e0bfff17 	ldw	r2,-4(fp)
    7478:	00c00044 	movi	r3,1
    747c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    7480:	e0bffd17 	ldw	r2,-12(fp)
    7484:	00007d06 	br	767c <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    7488:	d0a71003 	ldbu	r2,-25536(gp)
    748c:	10803fcc 	andi	r2,r2,255
    7490:	10000526 	beq	r2,zero,74a8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    7494:	e0bfff17 	ldw	r2,-4(fp)
    7498:	00c003c4 	movi	r3,15
    749c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    74a0:	e0bffd17 	ldw	r2,-12(fp)
    74a4:	00007506 	br	767c <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    74a8:	0005303a 	rdctl	r2,status
    74ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    74b0:	e0fffc17 	ldw	r3,-16(fp)
    74b4:	00bfff84 	movi	r2,-2
    74b8:	1884703a 	and	r2,r3,r2
    74bc:	1001703a 	wrctl	status,r2
  
  return context;
    74c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    74c4:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    74c8:	e0bffd17 	ldw	r2,-12(fp)
    74cc:	10800283 	ldbu	r2,10(r2)
    74d0:	10803fcc 	andi	r2,r2,255
    74d4:	10000326 	beq	r2,zero,74e4 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    74d8:	00800044 	movi	r2,1
    74dc:	e0bff405 	stb	r2,-48(fp)
    74e0:	00000106 	br	74e8 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    74e4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    74e8:	e0bffe03 	ldbu	r2,-8(fp)
    74ec:	10000326 	beq	r2,zero,74fc <OSQDel+0xec>
    74f0:	10800060 	cmpeqi	r2,r2,1
    74f4:	1000301e 	bne	r2,zero,75b8 <OSQDel+0x1a8>
    74f8:	00005506 	br	7650 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    74fc:	e0bff403 	ldbu	r2,-48(fp)
    7500:	10001e1e 	bne	r2,zero,757c <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    7504:	e0bffd17 	ldw	r2,-12(fp)
    7508:	00c00fc4 	movi	r3,63
    750c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    7510:	e0bffd17 	ldw	r2,-12(fp)
    7514:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    7518:	e0bffd17 	ldw	r2,-12(fp)
    751c:	10800117 	ldw	r2,4(r2)
    7520:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    7524:	d0e70d17 	ldw	r3,-25548(gp)
    7528:	e0bff817 	ldw	r2,-32(fp)
    752c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    7530:	e0bff817 	ldw	r2,-32(fp)
    7534:	d0a70d15 	stw	r2,-25548(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    7538:	e0bffd17 	ldw	r2,-12(fp)
    753c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    7540:	d0e70f17 	ldw	r3,-25540(gp)
    7544:	e0bffd17 	ldw	r2,-12(fp)
    7548:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    754c:	e0bffd17 	ldw	r2,-12(fp)
    7550:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    7554:	e0bffd17 	ldw	r2,-12(fp)
    7558:	d0a70f15 	stw	r2,-25540(gp)
    755c:	e0bff617 	ldw	r2,-40(fp)
    7560:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7564:	e0bff717 	ldw	r2,-36(fp)
    7568:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    756c:	e0bfff17 	ldw	r2,-4(fp)
    7570:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    7574:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    7578:	00003f06 	br	7678 <OSQDel+0x268>
    757c:	e0bff617 	ldw	r2,-40(fp)
    7580:	e0bff915 	stw	r2,-28(fp)
    7584:	e0bff917 	ldw	r2,-28(fp)
    7588:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    758c:	e0bfff17 	ldw	r2,-4(fp)
    7590:	00c01244 	movi	r3,73
    7594:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    7598:	e0bffd17 	ldw	r2,-12(fp)
    759c:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    75a0:	00003506 	br	7678 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    75a4:	000f883a 	mov	r7,zero
    75a8:	01800104 	movi	r6,4
    75ac:	000b883a 	mov	r5,zero
    75b0:	e13ffd17 	ldw	r4,-12(fp)
    75b4:	00040000 	call	4000 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    75b8:	e0bffd17 	ldw	r2,-12(fp)
    75bc:	10800283 	ldbu	r2,10(r2)
    75c0:	10803fcc 	andi	r2,r2,255
    75c4:	103ff71e 	bne	r2,zero,75a4 <__alt_data_end+0xfffeef04>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    75c8:	e0bffd17 	ldw	r2,-12(fp)
    75cc:	00c00fc4 	movi	r3,63
    75d0:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    75d4:	e0bffd17 	ldw	r2,-12(fp)
    75d8:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    75dc:	e0bffd17 	ldw	r2,-12(fp)
    75e0:	10800117 	ldw	r2,4(r2)
    75e4:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    75e8:	d0e70d17 	ldw	r3,-25548(gp)
    75ec:	e0bff817 	ldw	r2,-32(fp)
    75f0:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    75f4:	e0bff817 	ldw	r2,-32(fp)
    75f8:	d0a70d15 	stw	r2,-25548(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    75fc:	e0bffd17 	ldw	r2,-12(fp)
    7600:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    7604:	d0e70f17 	ldw	r3,-25540(gp)
    7608:	e0bffd17 	ldw	r2,-12(fp)
    760c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    7610:	e0bffd17 	ldw	r2,-12(fp)
    7614:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    7618:	e0bffd17 	ldw	r2,-12(fp)
    761c:	d0a70f15 	stw	r2,-25540(gp)
    7620:	e0bff617 	ldw	r2,-40(fp)
    7624:	e0bffa15 	stw	r2,-24(fp)
    7628:	e0bffa17 	ldw	r2,-24(fp)
    762c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    7630:	e0bff403 	ldbu	r2,-48(fp)
    7634:	10800058 	cmpnei	r2,r2,1
    7638:	1000011e 	bne	r2,zero,7640 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    763c:	0004a4c0 	call	4a4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    7640:	e0bfff17 	ldw	r2,-4(fp)
    7644:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    7648:	e03ff515 	stw	zero,-44(fp)
             break;
    764c:	00000a06 	br	7678 <OSQDel+0x268>
    7650:	e0bff617 	ldw	r2,-40(fp)
    7654:	e0bffb15 	stw	r2,-20(fp)
    7658:	e0bffb17 	ldw	r2,-20(fp)
    765c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    7660:	e0bfff17 	ldw	r2,-4(fp)
    7664:	00c001c4 	movi	r3,7
    7668:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    766c:	e0bffd17 	ldw	r2,-12(fp)
    7670:	e0bff515 	stw	r2,-44(fp)
             break;
    7674:	0001883a 	nop
    }
    return (pevent_return);
    7678:	e0bff517 	ldw	r2,-44(fp)
}
    767c:	e037883a 	mov	sp,fp
    7680:	dfc00117 	ldw	ra,4(sp)
    7684:	df000017 	ldw	fp,0(sp)
    7688:	dec00204 	addi	sp,sp,8
    768c:	f800283a 	ret

00007690 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    7690:	defffa04 	addi	sp,sp,-24
    7694:	df000515 	stw	fp,20(sp)
    7698:	df000504 	addi	fp,sp,20
    769c:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    76a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    76a4:	e0bfff17 	ldw	r2,-4(fp)
    76a8:	1000021e 	bne	r2,zero,76b4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    76ac:	00800104 	movi	r2,4
    76b0:	00002106 	br	7738 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    76b4:	e0bfff17 	ldw	r2,-4(fp)
    76b8:	10800003 	ldbu	r2,0(r2)
    76bc:	10803fcc 	andi	r2,r2,255
    76c0:	108000a0 	cmpeqi	r2,r2,2
    76c4:	1000021e 	bne	r2,zero,76d0 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    76c8:	00800044 	movi	r2,1
    76cc:	00001a06 	br	7738 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    76d0:	0005303a 	rdctl	r2,status
    76d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    76d8:	e0fffd17 	ldw	r3,-12(fp)
    76dc:	00bfff84 	movi	r2,-2
    76e0:	1884703a 	and	r2,r3,r2
    76e4:	1001703a 	wrctl	status,r2
  
  return context;
    76e8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    76ec:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    76f0:	e0bfff17 	ldw	r2,-4(fp)
    76f4:	10800117 	ldw	r2,4(r2)
    76f8:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    76fc:	e0bffc17 	ldw	r2,-16(fp)
    7700:	10c00117 	ldw	r3,4(r2)
    7704:	e0bffc17 	ldw	r2,-16(fp)
    7708:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    770c:	e0bffc17 	ldw	r2,-16(fp)
    7710:	10c00117 	ldw	r3,4(r2)
    7714:	e0bffc17 	ldw	r2,-16(fp)
    7718:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    771c:	e0bffc17 	ldw	r2,-16(fp)
    7720:	1000058d 	sth	zero,22(r2)
    7724:	e0bffb17 	ldw	r2,-20(fp)
    7728:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    772c:	e0bffe17 	ldw	r2,-8(fp)
    7730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7734:	0005883a 	mov	r2,zero
}
    7738:	e037883a 	mov	sp,fp
    773c:	df000017 	ldw	fp,0(sp)
    7740:	dec00104 	addi	sp,sp,4
    7744:	f800283a 	ret

00007748 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    7748:	defff304 	addi	sp,sp,-52
    774c:	dfc00c15 	stw	ra,48(sp)
    7750:	df000b15 	stw	fp,44(sp)
    7754:	df000b04 	addi	fp,sp,44
    7758:	e13ffd15 	stw	r4,-12(fp)
    775c:	2805883a 	mov	r2,r5
    7760:	e1bfff15 	stw	r6,-4(fp)
    7764:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7768:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    776c:	e0bfff17 	ldw	r2,-4(fp)
    7770:	1000021e 	bne	r2,zero,777c <OSQPend+0x34>
        return ((void *)0);
    7774:	0005883a 	mov	r2,zero
    7778:	00009106 	br	79c0 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    777c:	e0bffd17 	ldw	r2,-12(fp)
    7780:	1000051e 	bne	r2,zero,7798 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7784:	e0bfff17 	ldw	r2,-4(fp)
    7788:	00c00104 	movi	r3,4
    778c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    7790:	0005883a 	mov	r2,zero
    7794:	00008a06 	br	79c0 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    7798:	e0bffd17 	ldw	r2,-12(fp)
    779c:	10800003 	ldbu	r2,0(r2)
    77a0:	10803fcc 	andi	r2,r2,255
    77a4:	108000a0 	cmpeqi	r2,r2,2
    77a8:	1000051e 	bne	r2,zero,77c0 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    77ac:	e0bfff17 	ldw	r2,-4(fp)
    77b0:	00c00044 	movi	r3,1
    77b4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77b8:	0005883a 	mov	r2,zero
    77bc:	00008006 	br	79c0 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    77c0:	d0a71003 	ldbu	r2,-25536(gp)
    77c4:	10803fcc 	andi	r2,r2,255
    77c8:	10000526 	beq	r2,zero,77e0 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    77cc:	e0bfff17 	ldw	r2,-4(fp)
    77d0:	00c00084 	movi	r3,2
    77d4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77d8:	0005883a 	mov	r2,zero
    77dc:	00007806 	br	79c0 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    77e0:	d0a70203 	ldbu	r2,-25592(gp)
    77e4:	10803fcc 	andi	r2,r2,255
    77e8:	10000526 	beq	r2,zero,7800 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    77ec:	e0bfff17 	ldw	r2,-4(fp)
    77f0:	00c00344 	movi	r3,13
    77f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    77f8:	0005883a 	mov	r2,zero
    77fc:	00007006 	br	79c0 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7800:	0005303a 	rdctl	r2,status
    7804:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7808:	e0fffc17 	ldw	r3,-16(fp)
    780c:	00bfff84 	movi	r2,-2
    7810:	1884703a 	and	r2,r3,r2
    7814:	1001703a 	wrctl	status,r2
  
  return context;
    7818:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    781c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    7820:	e0bffd17 	ldw	r2,-12(fp)
    7824:	10800117 	ldw	r2,4(r2)
    7828:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    782c:	e0bff817 	ldw	r2,-32(fp)
    7830:	1080058b 	ldhu	r2,22(r2)
    7834:	10bfffcc 	andi	r2,r2,65535
    7838:	10001e26 	beq	r2,zero,78b4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    783c:	e0bff817 	ldw	r2,-32(fp)
    7840:	10800417 	ldw	r2,16(r2)
    7844:	11000104 	addi	r4,r2,4
    7848:	e0fff817 	ldw	r3,-32(fp)
    784c:	19000415 	stw	r4,16(r3)
    7850:	10800017 	ldw	r2,0(r2)
    7854:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    7858:	e0bff817 	ldw	r2,-32(fp)
    785c:	1080058b 	ldhu	r2,22(r2)
    7860:	10bfffc4 	addi	r2,r2,-1
    7864:	1007883a 	mov	r3,r2
    7868:	e0bff817 	ldw	r2,-32(fp)
    786c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    7870:	e0bff817 	ldw	r2,-32(fp)
    7874:	10c00417 	ldw	r3,16(r2)
    7878:	e0bff817 	ldw	r2,-32(fp)
    787c:	10800217 	ldw	r2,8(r2)
    7880:	1880041e 	bne	r3,r2,7894 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    7884:	e0bff817 	ldw	r2,-32(fp)
    7888:	10c00117 	ldw	r3,4(r2)
    788c:	e0bff817 	ldw	r2,-32(fp)
    7890:	10c00415 	stw	r3,16(r2)
    7894:	e0bff617 	ldw	r2,-40(fp)
    7898:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    789c:	e0bff717 	ldw	r2,-36(fp)
    78a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    78a4:	e0bfff17 	ldw	r2,-4(fp)
    78a8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    78ac:	e0bff517 	ldw	r2,-44(fp)
    78b0:	00004306 	br	79c0 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    78b4:	d0a71117 	ldw	r2,-25532(gp)
    78b8:	d0e71117 	ldw	r3,-25532(gp)
    78bc:	18c00c03 	ldbu	r3,48(r3)
    78c0:	18c00114 	ori	r3,r3,4
    78c4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    78c8:	d0a71117 	ldw	r2,-25532(gp)
    78cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    78d0:	d0a71117 	ldw	r2,-25532(gp)
    78d4:	e0fffe0b 	ldhu	r3,-8(fp)
    78d8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    78dc:	e13ffd17 	ldw	r4,-12(fp)
    78e0:	00041980 	call	4198 <OS_EventTaskWait>
    78e4:	e0bff617 	ldw	r2,-40(fp)
    78e8:	e0bffb15 	stw	r2,-20(fp)
    78ec:	e0bffb17 	ldw	r2,-20(fp)
    78f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    78f4:	0004a4c0 	call	4a4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    78f8:	0005303a 	rdctl	r2,status
    78fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7900:	e0fff917 	ldw	r3,-28(fp)
    7904:	00bfff84 	movi	r2,-2
    7908:	1884703a 	and	r2,r3,r2
    790c:	1001703a 	wrctl	status,r2
  
  return context;
    7910:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    7914:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    7918:	d0a71117 	ldw	r2,-25532(gp)
    791c:	10800c43 	ldbu	r2,49(r2)
    7920:	10803fcc 	andi	r2,r2,255
    7924:	10000326 	beq	r2,zero,7934 <OSQPend+0x1ec>
    7928:	108000a0 	cmpeqi	r2,r2,2
    792c:	1000071e 	bne	r2,zero,794c <OSQPend+0x204>
    7930:	00000b06 	br	7960 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    7934:	d0a71117 	ldw	r2,-25532(gp)
    7938:	10800917 	ldw	r2,36(r2)
    793c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    7940:	e0bfff17 	ldw	r2,-4(fp)
    7944:	10000005 	stb	zero,0(r2)
             break;
    7948:	00000e06 	br	7984 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    794c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    7950:	e0bfff17 	ldw	r2,-4(fp)
    7954:	00c00384 	movi	r3,14
    7958:	10c00005 	stb	r3,0(r2)
             break;
    795c:	00000906 	br	7984 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    7960:	d0a71117 	ldw	r2,-25532(gp)
    7964:	e17ffd17 	ldw	r5,-12(fp)
    7968:	1009883a 	mov	r4,r2
    796c:	00043f80 	call	43f8 <OS_EventTaskRemove>
             pmsg = (void *)0;
    7970:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    7974:	e0bfff17 	ldw	r2,-4(fp)
    7978:	00c00284 	movi	r3,10
    797c:	10c00005 	stb	r3,0(r2)
             break;
    7980:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    7984:	d0a71117 	ldw	r2,-25532(gp)
    7988:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    798c:	d0a71117 	ldw	r2,-25532(gp)
    7990:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    7994:	d0a71117 	ldw	r2,-25532(gp)
    7998:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    799c:	d0a71117 	ldw	r2,-25532(gp)
    79a0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    79a4:	d0a71117 	ldw	r2,-25532(gp)
    79a8:	10000915 	stw	zero,36(r2)
    79ac:	e0bff617 	ldw	r2,-40(fp)
    79b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79b4:	e0bffa17 	ldw	r2,-24(fp)
    79b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    79bc:	e0bff517 	ldw	r2,-44(fp)
}
    79c0:	e037883a 	mov	sp,fp
    79c4:	dfc00117 	ldw	ra,4(sp)
    79c8:	df000017 	ldw	fp,0(sp)
    79cc:	dec00204 	addi	sp,sp,8
    79d0:	f800283a 	ret

000079d4 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    79d4:	defff604 	addi	sp,sp,-40
    79d8:	dfc00915 	stw	ra,36(sp)
    79dc:	df000815 	stw	fp,32(sp)
    79e0:	df000804 	addi	fp,sp,32
    79e4:	e13ffd15 	stw	r4,-12(fp)
    79e8:	2805883a 	mov	r2,r5
    79ec:	e1bfff15 	stw	r6,-4(fp)
    79f0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    79f4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    79f8:	e0bfff17 	ldw	r2,-4(fp)
    79fc:	1000021e 	bne	r2,zero,7a08 <OSQPendAbort+0x34>
        return (0);
    7a00:	0005883a 	mov	r2,zero
    7a04:	00004906 	br	7b2c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    7a08:	e0bffd17 	ldw	r2,-12(fp)
    7a0c:	1000051e 	bne	r2,zero,7a24 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    7a10:	e0bfff17 	ldw	r2,-4(fp)
    7a14:	00c00104 	movi	r3,4
    7a18:	10c00005 	stb	r3,0(r2)
        return (0);
    7a1c:	0005883a 	mov	r2,zero
    7a20:	00004206 	br	7b2c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    7a24:	e0bffd17 	ldw	r2,-12(fp)
    7a28:	10800003 	ldbu	r2,0(r2)
    7a2c:	10803fcc 	andi	r2,r2,255
    7a30:	108000a0 	cmpeqi	r2,r2,2
    7a34:	1000051e 	bne	r2,zero,7a4c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    7a38:	e0bfff17 	ldw	r2,-4(fp)
    7a3c:	00c00044 	movi	r3,1
    7a40:	10c00005 	stb	r3,0(r2)
        return (0);
    7a44:	0005883a 	mov	r2,zero
    7a48:	00003806 	br	7b2c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7a4c:	0005303a 	rdctl	r2,status
    7a50:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7a54:	e0fffc17 	ldw	r3,-16(fp)
    7a58:	00bfff84 	movi	r2,-2
    7a5c:	1884703a 	and	r2,r3,r2
    7a60:	1001703a 	wrctl	status,r2
  
  return context;
    7a64:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7a68:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    7a6c:	e0bffd17 	ldw	r2,-12(fp)
    7a70:	10800283 	ldbu	r2,10(r2)
    7a74:	10803fcc 	andi	r2,r2,255
    7a78:	10002526 	beq	r2,zero,7b10 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    7a7c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    7a80:	e0bffe03 	ldbu	r2,-8(fp)
    7a84:	10800060 	cmpeqi	r2,r2,1
    7a88:	10000e26 	beq	r2,zero,7ac4 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    7a8c:	00000806 	br	7ab0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7a90:	01c00084 	movi	r7,2
    7a94:	01800104 	movi	r6,4
    7a98:	000b883a 	mov	r5,zero
    7a9c:	e13ffd17 	ldw	r4,-12(fp)
    7aa0:	00040000 	call	4000 <OS_EventTaskRdy>
                     nbr_tasks++;
    7aa4:	e0bff803 	ldbu	r2,-32(fp)
    7aa8:	10800044 	addi	r2,r2,1
    7aac:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    7ab0:	e0bffd17 	ldw	r2,-12(fp)
    7ab4:	10800283 	ldbu	r2,10(r2)
    7ab8:	10803fcc 	andi	r2,r2,255
    7abc:	103ff41e 	bne	r2,zero,7a90 <__alt_data_end+0xfffef3f0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    7ac0:	00000906 	br	7ae8 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    7ac4:	01c00084 	movi	r7,2
    7ac8:	01800104 	movi	r6,4
    7acc:	000b883a 	mov	r5,zero
    7ad0:	e13ffd17 	ldw	r4,-12(fp)
    7ad4:	00040000 	call	4000 <OS_EventTaskRdy>
                 nbr_tasks++;
    7ad8:	e0bff803 	ldbu	r2,-32(fp)
    7adc:	10800044 	addi	r2,r2,1
    7ae0:	e0bff805 	stb	r2,-32(fp)
                 break;
    7ae4:	0001883a 	nop
    7ae8:	e0bff917 	ldw	r2,-28(fp)
    7aec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7af0:	e0bffa17 	ldw	r2,-24(fp)
    7af4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    7af8:	0004a4c0 	call	4a4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    7afc:	e0bfff17 	ldw	r2,-4(fp)
    7b00:	00c00384 	movi	r3,14
    7b04:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    7b08:	e0bff803 	ldbu	r2,-32(fp)
    7b0c:	00000706 	br	7b2c <OSQPendAbort+0x158>
    7b10:	e0bff917 	ldw	r2,-28(fp)
    7b14:	e0bffb15 	stw	r2,-20(fp)
    7b18:	e0bffb17 	ldw	r2,-20(fp)
    7b1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7b20:	e0bfff17 	ldw	r2,-4(fp)
    7b24:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    7b28:	0005883a 	mov	r2,zero
}
    7b2c:	e037883a 	mov	sp,fp
    7b30:	dfc00117 	ldw	ra,4(sp)
    7b34:	df000017 	ldw	fp,0(sp)
    7b38:	dec00204 	addi	sp,sp,8
    7b3c:	f800283a 	ret

00007b40 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    7b40:	defff604 	addi	sp,sp,-40
    7b44:	dfc00915 	stw	ra,36(sp)
    7b48:	df000815 	stw	fp,32(sp)
    7b4c:	df000804 	addi	fp,sp,32
    7b50:	e13ffe15 	stw	r4,-8(fp)
    7b54:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7b58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    7b5c:	e0bffe17 	ldw	r2,-8(fp)
    7b60:	1000021e 	bne	r2,zero,7b6c <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    7b64:	00800104 	movi	r2,4
    7b68:	00004a06 	br	7c94 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    7b6c:	e0bffe17 	ldw	r2,-8(fp)
    7b70:	10800003 	ldbu	r2,0(r2)
    7b74:	10803fcc 	andi	r2,r2,255
    7b78:	108000a0 	cmpeqi	r2,r2,2
    7b7c:	1000021e 	bne	r2,zero,7b88 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    7b80:	00800044 	movi	r2,1
    7b84:	00004306 	br	7c94 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7b88:	0005303a 	rdctl	r2,status
    7b8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7b90:	e0fffd17 	ldw	r3,-12(fp)
    7b94:	00bfff84 	movi	r2,-2
    7b98:	1884703a 	and	r2,r3,r2
    7b9c:	1001703a 	wrctl	status,r2
  
  return context;
    7ba0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7ba4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    7ba8:	e0bffe17 	ldw	r2,-8(fp)
    7bac:	10800283 	ldbu	r2,10(r2)
    7bb0:	10803fcc 	andi	r2,r2,255
    7bb4:	10000c26 	beq	r2,zero,7be8 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7bb8:	000f883a 	mov	r7,zero
    7bbc:	01800104 	movi	r6,4
    7bc0:	e17fff17 	ldw	r5,-4(fp)
    7bc4:	e13ffe17 	ldw	r4,-8(fp)
    7bc8:	00040000 	call	4000 <OS_EventTaskRdy>
    7bcc:	e0bff817 	ldw	r2,-32(fp)
    7bd0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7bd4:	e0bff917 	ldw	r2,-28(fp)
    7bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    7bdc:	0004a4c0 	call	4a4c <OS_Sched>
        return (OS_ERR_NONE);
    7be0:	0005883a 	mov	r2,zero
    7be4:	00002b06 	br	7c94 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    7be8:	e0bffe17 	ldw	r2,-8(fp)
    7bec:	10800117 	ldw	r2,4(r2)
    7bf0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    7bf4:	e0bffb17 	ldw	r2,-20(fp)
    7bf8:	10c0058b 	ldhu	r3,22(r2)
    7bfc:	e0bffb17 	ldw	r2,-20(fp)
    7c00:	1080050b 	ldhu	r2,20(r2)
    7c04:	18ffffcc 	andi	r3,r3,65535
    7c08:	10bfffcc 	andi	r2,r2,65535
    7c0c:	18800636 	bltu	r3,r2,7c28 <OSQPost+0xe8>
    7c10:	e0bff817 	ldw	r2,-32(fp)
    7c14:	e0bffa15 	stw	r2,-24(fp)
    7c18:	e0bffa17 	ldw	r2,-24(fp)
    7c1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7c20:	00800784 	movi	r2,30
    7c24:	00001b06 	br	7c94 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    7c28:	e0bffb17 	ldw	r2,-20(fp)
    7c2c:	10800317 	ldw	r2,12(r2)
    7c30:	11000104 	addi	r4,r2,4
    7c34:	e0fffb17 	ldw	r3,-20(fp)
    7c38:	19000315 	stw	r4,12(r3)
    7c3c:	e0ffff17 	ldw	r3,-4(fp)
    7c40:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    7c44:	e0bffb17 	ldw	r2,-20(fp)
    7c48:	1080058b 	ldhu	r2,22(r2)
    7c4c:	10800044 	addi	r2,r2,1
    7c50:	1007883a 	mov	r3,r2
    7c54:	e0bffb17 	ldw	r2,-20(fp)
    7c58:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    7c5c:	e0bffb17 	ldw	r2,-20(fp)
    7c60:	10c00317 	ldw	r3,12(r2)
    7c64:	e0bffb17 	ldw	r2,-20(fp)
    7c68:	10800217 	ldw	r2,8(r2)
    7c6c:	1880041e 	bne	r3,r2,7c80 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    7c70:	e0bffb17 	ldw	r2,-20(fp)
    7c74:	10c00117 	ldw	r3,4(r2)
    7c78:	e0bffb17 	ldw	r2,-20(fp)
    7c7c:	10c00315 	stw	r3,12(r2)
    7c80:	e0bff817 	ldw	r2,-32(fp)
    7c84:	e0bffc15 	stw	r2,-16(fp)
    7c88:	e0bffc17 	ldw	r2,-16(fp)
    7c8c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7c90:	0005883a 	mov	r2,zero
}
    7c94:	e037883a 	mov	sp,fp
    7c98:	dfc00117 	ldw	ra,4(sp)
    7c9c:	df000017 	ldw	fp,0(sp)
    7ca0:	dec00204 	addi	sp,sp,8
    7ca4:	f800283a 	ret

00007ca8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    7ca8:	defff604 	addi	sp,sp,-40
    7cac:	dfc00915 	stw	ra,36(sp)
    7cb0:	df000815 	stw	fp,32(sp)
    7cb4:	df000804 	addi	fp,sp,32
    7cb8:	e13ffe15 	stw	r4,-8(fp)
    7cbc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7cc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7cc4:	e0bffe17 	ldw	r2,-8(fp)
    7cc8:	1000021e 	bne	r2,zero,7cd4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    7ccc:	00800104 	movi	r2,4
    7cd0:	00004c06 	br	7e04 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    7cd4:	e0bffe17 	ldw	r2,-8(fp)
    7cd8:	10800003 	ldbu	r2,0(r2)
    7cdc:	10803fcc 	andi	r2,r2,255
    7ce0:	108000a0 	cmpeqi	r2,r2,2
    7ce4:	1000021e 	bne	r2,zero,7cf0 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    7ce8:	00800044 	movi	r2,1
    7cec:	00004506 	br	7e04 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7cf0:	0005303a 	rdctl	r2,status
    7cf4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7cf8:	e0fffd17 	ldw	r3,-12(fp)
    7cfc:	00bfff84 	movi	r2,-2
    7d00:	1884703a 	and	r2,r3,r2
    7d04:	1001703a 	wrctl	status,r2
  
  return context;
    7d08:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    7d0c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    7d10:	e0bffe17 	ldw	r2,-8(fp)
    7d14:	10800283 	ldbu	r2,10(r2)
    7d18:	10803fcc 	andi	r2,r2,255
    7d1c:	10000c26 	beq	r2,zero,7d50 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7d20:	000f883a 	mov	r7,zero
    7d24:	01800104 	movi	r6,4
    7d28:	e17fff17 	ldw	r5,-4(fp)
    7d2c:	e13ffe17 	ldw	r4,-8(fp)
    7d30:	00040000 	call	4000 <OS_EventTaskRdy>
    7d34:	e0bff817 	ldw	r2,-32(fp)
    7d38:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7d3c:	e0bff917 	ldw	r2,-28(fp)
    7d40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    7d44:	0004a4c0 	call	4a4c <OS_Sched>
        return (OS_ERR_NONE);
    7d48:	0005883a 	mov	r2,zero
    7d4c:	00002d06 	br	7e04 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    7d50:	e0bffe17 	ldw	r2,-8(fp)
    7d54:	10800117 	ldw	r2,4(r2)
    7d58:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7d5c:	e0bffb17 	ldw	r2,-20(fp)
    7d60:	10c0058b 	ldhu	r3,22(r2)
    7d64:	e0bffb17 	ldw	r2,-20(fp)
    7d68:	1080050b 	ldhu	r2,20(r2)
    7d6c:	18ffffcc 	andi	r3,r3,65535
    7d70:	10bfffcc 	andi	r2,r2,65535
    7d74:	18800636 	bltu	r3,r2,7d90 <OSQPostFront+0xe8>
    7d78:	e0bff817 	ldw	r2,-32(fp)
    7d7c:	e0bffa15 	stw	r2,-24(fp)
    7d80:	e0bffa17 	ldw	r2,-24(fp)
    7d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7d88:	00800784 	movi	r2,30
    7d8c:	00001d06 	br	7e04 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    7d90:	e0bffb17 	ldw	r2,-20(fp)
    7d94:	10c00417 	ldw	r3,16(r2)
    7d98:	e0bffb17 	ldw	r2,-20(fp)
    7d9c:	10800117 	ldw	r2,4(r2)
    7da0:	1880041e 	bne	r3,r2,7db4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    7da4:	e0bffb17 	ldw	r2,-20(fp)
    7da8:	10c00217 	ldw	r3,8(r2)
    7dac:	e0bffb17 	ldw	r2,-20(fp)
    7db0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    7db4:	e0bffb17 	ldw	r2,-20(fp)
    7db8:	10800417 	ldw	r2,16(r2)
    7dbc:	10ffff04 	addi	r3,r2,-4
    7dc0:	e0bffb17 	ldw	r2,-20(fp)
    7dc4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    7dc8:	e0bffb17 	ldw	r2,-20(fp)
    7dcc:	10800417 	ldw	r2,16(r2)
    7dd0:	e0ffff17 	ldw	r3,-4(fp)
    7dd4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7dd8:	e0bffb17 	ldw	r2,-20(fp)
    7ddc:	1080058b 	ldhu	r2,22(r2)
    7de0:	10800044 	addi	r2,r2,1
    7de4:	1007883a 	mov	r3,r2
    7de8:	e0bffb17 	ldw	r2,-20(fp)
    7dec:	10c0058d 	sth	r3,22(r2)
    7df0:	e0bff817 	ldw	r2,-32(fp)
    7df4:	e0bffc15 	stw	r2,-16(fp)
    7df8:	e0bffc17 	ldw	r2,-16(fp)
    7dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7e00:	0005883a 	mov	r2,zero
}
    7e04:	e037883a 	mov	sp,fp
    7e08:	dfc00117 	ldw	ra,4(sp)
    7e0c:	df000017 	ldw	fp,0(sp)
    7e10:	dec00204 	addi	sp,sp,8
    7e14:	f800283a 	ret

00007e18 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    7e18:	defff504 	addi	sp,sp,-44
    7e1c:	dfc00a15 	stw	ra,40(sp)
    7e20:	df000915 	stw	fp,36(sp)
    7e24:	df000904 	addi	fp,sp,36
    7e28:	e13ffd15 	stw	r4,-12(fp)
    7e2c:	e17ffe15 	stw	r5,-8(fp)
    7e30:	3005883a 	mov	r2,r6
    7e34:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7e38:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    7e3c:	e0bffd17 	ldw	r2,-12(fp)
    7e40:	1000021e 	bne	r2,zero,7e4c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    7e44:	00800104 	movi	r2,4
    7e48:	00007106 	br	8010 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    7e4c:	e0bffd17 	ldw	r2,-12(fp)
    7e50:	10800003 	ldbu	r2,0(r2)
    7e54:	10803fcc 	andi	r2,r2,255
    7e58:	108000a0 	cmpeqi	r2,r2,2
    7e5c:	1000021e 	bne	r2,zero,7e68 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    7e60:	00800044 	movi	r2,1
    7e64:	00006a06 	br	8010 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7e68:	0005303a 	rdctl	r2,status
    7e6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7e70:	e0fffc17 	ldw	r3,-16(fp)
    7e74:	00bfff84 	movi	r2,-2
    7e78:	1884703a 	and	r2,r3,r2
    7e7c:	1001703a 	wrctl	status,r2
  
  return context;
    7e80:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7e84:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    7e88:	e0bffd17 	ldw	r2,-12(fp)
    7e8c:	10800283 	ldbu	r2,10(r2)
    7e90:	10803fcc 	andi	r2,r2,255
    7e94:	10001d26 	beq	r2,zero,7f0c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    7e98:	e0bfff03 	ldbu	r2,-4(fp)
    7e9c:	1080004c 	andi	r2,r2,1
    7ea0:	10000b26 	beq	r2,zero,7ed0 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    7ea4:	00000506 	br	7ebc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7ea8:	000f883a 	mov	r7,zero
    7eac:	01800104 	movi	r6,4
    7eb0:	e17ffe17 	ldw	r5,-8(fp)
    7eb4:	e13ffd17 	ldw	r4,-12(fp)
    7eb8:	00040000 	call	4000 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    7ebc:	e0bffd17 	ldw	r2,-12(fp)
    7ec0:	10800283 	ldbu	r2,10(r2)
    7ec4:	10803fcc 	andi	r2,r2,255
    7ec8:	103ff71e 	bne	r2,zero,7ea8 <__alt_data_end+0xfffef808>
    7ecc:	00000506 	br	7ee4 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    7ed0:	000f883a 	mov	r7,zero
    7ed4:	01800104 	movi	r6,4
    7ed8:	e17ffe17 	ldw	r5,-8(fp)
    7edc:	e13ffd17 	ldw	r4,-12(fp)
    7ee0:	00040000 	call	4000 <OS_EventTaskRdy>
    7ee4:	e0bff717 	ldw	r2,-36(fp)
    7ee8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7eec:	e0bff817 	ldw	r2,-32(fp)
    7ef0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    7ef4:	e0bfff03 	ldbu	r2,-4(fp)
    7ef8:	1080010c 	andi	r2,r2,4
    7efc:	1000011e 	bne	r2,zero,7f04 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    7f00:	0004a4c0 	call	4a4c <OS_Sched>
        }
        return (OS_ERR_NONE);
    7f04:	0005883a 	mov	r2,zero
    7f08:	00004106 	br	8010 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    7f0c:	e0bffd17 	ldw	r2,-12(fp)
    7f10:	10800117 	ldw	r2,4(r2)
    7f14:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    7f18:	e0bffa17 	ldw	r2,-24(fp)
    7f1c:	10c0058b 	ldhu	r3,22(r2)
    7f20:	e0bffa17 	ldw	r2,-24(fp)
    7f24:	1080050b 	ldhu	r2,20(r2)
    7f28:	18ffffcc 	andi	r3,r3,65535
    7f2c:	10bfffcc 	andi	r2,r2,65535
    7f30:	18800636 	bltu	r3,r2,7f4c <OSQPostOpt+0x134>
    7f34:	e0bff717 	ldw	r2,-36(fp)
    7f38:	e0bff915 	stw	r2,-28(fp)
    7f3c:	e0bff917 	ldw	r2,-28(fp)
    7f40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    7f44:	00800784 	movi	r2,30
    7f48:	00003106 	br	8010 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    7f4c:	e0bfff03 	ldbu	r2,-4(fp)
    7f50:	1080008c 	andi	r2,r2,2
    7f54:	10001326 	beq	r2,zero,7fa4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    7f58:	e0bffa17 	ldw	r2,-24(fp)
    7f5c:	10c00417 	ldw	r3,16(r2)
    7f60:	e0bffa17 	ldw	r2,-24(fp)
    7f64:	10800117 	ldw	r2,4(r2)
    7f68:	1880041e 	bne	r3,r2,7f7c <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    7f6c:	e0bffa17 	ldw	r2,-24(fp)
    7f70:	10c00217 	ldw	r3,8(r2)
    7f74:	e0bffa17 	ldw	r2,-24(fp)
    7f78:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    7f7c:	e0bffa17 	ldw	r2,-24(fp)
    7f80:	10800417 	ldw	r2,16(r2)
    7f84:	10ffff04 	addi	r3,r2,-4
    7f88:	e0bffa17 	ldw	r2,-24(fp)
    7f8c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    7f90:	e0bffa17 	ldw	r2,-24(fp)
    7f94:	10800417 	ldw	r2,16(r2)
    7f98:	e0fffe17 	ldw	r3,-8(fp)
    7f9c:	10c00015 	stw	r3,0(r2)
    7fa0:	00001006 	br	7fe4 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    7fa4:	e0bffa17 	ldw	r2,-24(fp)
    7fa8:	10800317 	ldw	r2,12(r2)
    7fac:	11000104 	addi	r4,r2,4
    7fb0:	e0fffa17 	ldw	r3,-24(fp)
    7fb4:	19000315 	stw	r4,12(r3)
    7fb8:	e0fffe17 	ldw	r3,-8(fp)
    7fbc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    7fc0:	e0bffa17 	ldw	r2,-24(fp)
    7fc4:	10c00317 	ldw	r3,12(r2)
    7fc8:	e0bffa17 	ldw	r2,-24(fp)
    7fcc:	10800217 	ldw	r2,8(r2)
    7fd0:	1880041e 	bne	r3,r2,7fe4 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    7fd4:	e0bffa17 	ldw	r2,-24(fp)
    7fd8:	10c00117 	ldw	r3,4(r2)
    7fdc:	e0bffa17 	ldw	r2,-24(fp)
    7fe0:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    7fe4:	e0bffa17 	ldw	r2,-24(fp)
    7fe8:	1080058b 	ldhu	r2,22(r2)
    7fec:	10800044 	addi	r2,r2,1
    7ff0:	1007883a 	mov	r3,r2
    7ff4:	e0bffa17 	ldw	r2,-24(fp)
    7ff8:	10c0058d 	sth	r3,22(r2)
    7ffc:	e0bff717 	ldw	r2,-36(fp)
    8000:	e0bffb15 	stw	r2,-20(fp)
    8004:	e0bffb17 	ldw	r2,-20(fp)
    8008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    800c:	0005883a 	mov	r2,zero
}
    8010:	e037883a 	mov	sp,fp
    8014:	dfc00117 	ldw	ra,4(sp)
    8018:	df000017 	ldw	fp,0(sp)
    801c:	dec00204 	addi	sp,sp,8
    8020:	f800283a 	ret

00008024 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    8024:	defff604 	addi	sp,sp,-40
    8028:	df000915 	stw	fp,36(sp)
    802c:	df000904 	addi	fp,sp,36
    8030:	e13ffe15 	stw	r4,-8(fp)
    8034:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    8038:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    803c:	e0bffe17 	ldw	r2,-8(fp)
    8040:	1000021e 	bne	r2,zero,804c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8044:	00800104 	movi	r2,4
    8048:	00004906 	br	8170 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    804c:	e0bfff17 	ldw	r2,-4(fp)
    8050:	1000021e 	bne	r2,zero,805c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8054:	00800244 	movi	r2,9
    8058:	00004506 	br	8170 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    805c:	e0bffe17 	ldw	r2,-8(fp)
    8060:	10800003 	ldbu	r2,0(r2)
    8064:	10803fcc 	andi	r2,r2,255
    8068:	108000a0 	cmpeqi	r2,r2,2
    806c:	1000021e 	bne	r2,zero,8078 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8070:	00800044 	movi	r2,1
    8074:	00003e06 	br	8170 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8078:	0005303a 	rdctl	r2,status
    807c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8080:	e0fffd17 	ldw	r3,-12(fp)
    8084:	00bfff84 	movi	r2,-2
    8088:	1884703a 	and	r2,r3,r2
    808c:	1001703a 	wrctl	status,r2
  
  return context;
    8090:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8094:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    8098:	e0bffe17 	ldw	r2,-8(fp)
    809c:	10c00283 	ldbu	r3,10(r2)
    80a0:	e0bfff17 	ldw	r2,-4(fp)
    80a4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    80a8:	e0bffe17 	ldw	r2,-8(fp)
    80ac:	108002c4 	addi	r2,r2,11
    80b0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    80b4:	e0bfff17 	ldw	r2,-4(fp)
    80b8:	10800204 	addi	r2,r2,8
    80bc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    80c0:	e03ff705 	stb	zero,-36(fp)
    80c4:	00000b06 	br	80f4 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    80c8:	e0bff917 	ldw	r2,-28(fp)
    80cc:	10c00044 	addi	r3,r2,1
    80d0:	e0fff915 	stw	r3,-28(fp)
    80d4:	e0fff817 	ldw	r3,-32(fp)
    80d8:	19000044 	addi	r4,r3,1
    80dc:	e13ff815 	stw	r4,-32(fp)
    80e0:	18c00003 	ldbu	r3,0(r3)
    80e4:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    80e8:	e0bff703 	ldbu	r2,-36(fp)
    80ec:	10800044 	addi	r2,r2,1
    80f0:	e0bff705 	stb	r2,-36(fp)
    80f4:	e0bff703 	ldbu	r2,-36(fp)
    80f8:	108000f0 	cmpltui	r2,r2,3
    80fc:	103ff21e 	bne	r2,zero,80c8 <__alt_data_end+0xfffefa28>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    8100:	e0bffe17 	ldw	r2,-8(fp)
    8104:	10800117 	ldw	r2,4(r2)
    8108:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    810c:	e0bffc17 	ldw	r2,-16(fp)
    8110:	1080058b 	ldhu	r2,22(r2)
    8114:	10bfffcc 	andi	r2,r2,65535
    8118:	10000626 	beq	r2,zero,8134 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    811c:	e0bffc17 	ldw	r2,-16(fp)
    8120:	10800417 	ldw	r2,16(r2)
    8124:	10c00017 	ldw	r3,0(r2)
    8128:	e0bfff17 	ldw	r2,-4(fp)
    812c:	10c00015 	stw	r3,0(r2)
    8130:	00000206 	br	813c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    8134:	e0bfff17 	ldw	r2,-4(fp)
    8138:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    813c:	e0bffc17 	ldw	r2,-16(fp)
    8140:	10c0058b 	ldhu	r3,22(r2)
    8144:	e0bfff17 	ldw	r2,-4(fp)
    8148:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    814c:	e0bffc17 	ldw	r2,-16(fp)
    8150:	10c0050b 	ldhu	r3,20(r2)
    8154:	e0bfff17 	ldw	r2,-4(fp)
    8158:	10c0018d 	sth	r3,6(r2)
    815c:	e0bffa17 	ldw	r2,-24(fp)
    8160:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8164:	e0bffb17 	ldw	r2,-20(fp)
    8168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    816c:	0005883a 	mov	r2,zero
}
    8170:	e037883a 	mov	sp,fp
    8174:	df000017 	ldw	fp,0(sp)
    8178:	dec00104 	addi	sp,sp,4
    817c:	f800283a 	ret

00008180 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    8180:	defffb04 	addi	sp,sp,-20
    8184:	dfc00415 	stw	ra,16(sp)
    8188:	df000315 	stw	fp,12(sp)
    818c:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    8190:	01407804 	movi	r5,480
    8194:	01000074 	movhi	r4,1
    8198:	21184004 	addi	r4,r4,24832
    819c:	00049900 	call	4990 <OS_MemClr>
    pq1 = &OSQTbl[0];
    81a0:	00800074 	movhi	r2,1
    81a4:	10984004 	addi	r2,r2,24832
    81a8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    81ac:	00800074 	movhi	r2,1
    81b0:	10984604 	addi	r2,r2,24856
    81b4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    81b8:	e03ffd0d 	sth	zero,-12(fp)
    81bc:	00000c06 	br	81f0 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    81c0:	e0bffe17 	ldw	r2,-8(fp)
    81c4:	e0ffff17 	ldw	r3,-4(fp)
    81c8:	10c00015 	stw	r3,0(r2)
        pq1++;
    81cc:	e0bffe17 	ldw	r2,-8(fp)
    81d0:	10800604 	addi	r2,r2,24
    81d4:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    81d8:	e0bfff17 	ldw	r2,-4(fp)
    81dc:	10800604 	addi	r2,r2,24
    81e0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    81e4:	e0bffd0b 	ldhu	r2,-12(fp)
    81e8:	10800044 	addi	r2,r2,1
    81ec:	e0bffd0d 	sth	r2,-12(fp)
    81f0:	e0bffd0b 	ldhu	r2,-12(fp)
    81f4:	108004f0 	cmpltui	r2,r2,19
    81f8:	103ff11e 	bne	r2,zero,81c0 <__alt_data_end+0xfffefb20>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    81fc:	e0bffe17 	ldw	r2,-8(fp)
    8200:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    8204:	00800074 	movhi	r2,1
    8208:	10984004 	addi	r2,r2,24832
    820c:	d0a70d15 	stw	r2,-25548(gp)
#endif
}
    8210:	0001883a 	nop
    8214:	e037883a 	mov	sp,fp
    8218:	dfc00117 	ldw	ra,4(sp)
    821c:	df000017 	ldw	fp,0(sp)
    8220:	dec00204 	addi	sp,sp,8
    8224:	f800283a 	ret

00008228 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    8228:	defffa04 	addi	sp,sp,-24
    822c:	df000515 	stw	fp,20(sp)
    8230:	df000504 	addi	fp,sp,20
    8234:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8238:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    823c:	e0bfff17 	ldw	r2,-4(fp)
    8240:	1000021e 	bne	r2,zero,824c <OSSemAccept+0x24>
        return (0);
    8244:	0005883a 	mov	r2,zero
    8248:	00001f06 	br	82c8 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    824c:	e0bfff17 	ldw	r2,-4(fp)
    8250:	10800003 	ldbu	r2,0(r2)
    8254:	10803fcc 	andi	r2,r2,255
    8258:	108000e0 	cmpeqi	r2,r2,3
    825c:	1000021e 	bne	r2,zero,8268 <OSSemAccept+0x40>
        return (0);
    8260:	0005883a 	mov	r2,zero
    8264:	00001806 	br	82c8 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8268:	0005303a 	rdctl	r2,status
    826c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8270:	e0fffe17 	ldw	r3,-8(fp)
    8274:	00bfff84 	movi	r2,-2
    8278:	1884703a 	and	r2,r3,r2
    827c:	1001703a 	wrctl	status,r2
  
  return context;
    8280:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8284:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    8288:	e0bfff17 	ldw	r2,-4(fp)
    828c:	1080020b 	ldhu	r2,8(r2)
    8290:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    8294:	e0bffd0b 	ldhu	r2,-12(fp)
    8298:	10000626 	beq	r2,zero,82b4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    829c:	e0bfff17 	ldw	r2,-4(fp)
    82a0:	1080020b 	ldhu	r2,8(r2)
    82a4:	10bfffc4 	addi	r2,r2,-1
    82a8:	1007883a 	mov	r3,r2
    82ac:	e0bfff17 	ldw	r2,-4(fp)
    82b0:	10c0020d 	sth	r3,8(r2)
    82b4:	e0bffb17 	ldw	r2,-20(fp)
    82b8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    82bc:	e0bffc17 	ldw	r2,-16(fp)
    82c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    82c4:	e0bffd0b 	ldhu	r2,-12(fp)
}
    82c8:	e037883a 	mov	sp,fp
    82cc:	df000017 	ldw	fp,0(sp)
    82d0:	dec00104 	addi	sp,sp,4
    82d4:	f800283a 	ret

000082d8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    82d8:	defff904 	addi	sp,sp,-28
    82dc:	dfc00615 	stw	ra,24(sp)
    82e0:	df000515 	stw	fp,20(sp)
    82e4:	df000504 	addi	fp,sp,20
    82e8:	2005883a 	mov	r2,r4
    82ec:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    82f0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    82f4:	d0a71003 	ldbu	r2,-25536(gp)
    82f8:	10803fcc 	andi	r2,r2,255
    82fc:	10000226 	beq	r2,zero,8308 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    8300:	0005883a 	mov	r2,zero
    8304:	00002506 	br	839c <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8308:	0005303a 	rdctl	r2,status
    830c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8310:	e0fffe17 	ldw	r3,-8(fp)
    8314:	00bfff84 	movi	r2,-2
    8318:	1884703a 	and	r2,r3,r2
    831c:	1001703a 	wrctl	status,r2
  
  return context;
    8320:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    8324:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    8328:	d0a70f17 	ldw	r2,-25540(gp)
    832c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    8330:	d0a70f17 	ldw	r2,-25540(gp)
    8334:	10000326 	beq	r2,zero,8344 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    8338:	d0a70f17 	ldw	r2,-25540(gp)
    833c:	10800117 	ldw	r2,4(r2)
    8340:	d0a70f15 	stw	r2,-25540(gp)
    8344:	e0bffb17 	ldw	r2,-20(fp)
    8348:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    834c:	e0bffc17 	ldw	r2,-16(fp)
    8350:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    8354:	e0bffd17 	ldw	r2,-12(fp)
    8358:	10000f26 	beq	r2,zero,8398 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    835c:	e0bffd17 	ldw	r2,-12(fp)
    8360:	00c000c4 	movi	r3,3
    8364:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    8368:	e0bffd17 	ldw	r2,-12(fp)
    836c:	e0ffff0b 	ldhu	r3,-4(fp)
    8370:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    8374:	e0bffd17 	ldw	r2,-12(fp)
    8378:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    837c:	e0bffd17 	ldw	r2,-12(fp)
    8380:	00c00fc4 	movi	r3,63
    8384:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    8388:	e0bffd17 	ldw	r2,-12(fp)
    838c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    8390:	e13ffd17 	ldw	r4,-12(fp)
    8394:	00045b00 	call	45b0 <OS_EventWaitListInit>
    }
    return (pevent);
    8398:	e0bffd17 	ldw	r2,-12(fp)
}
    839c:	e037883a 	mov	sp,fp
    83a0:	dfc00117 	ldw	ra,4(sp)
    83a4:	df000017 	ldw	fp,0(sp)
    83a8:	dec00204 	addi	sp,sp,8
    83ac:	f800283a 	ret

000083b0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    83b0:	defff304 	addi	sp,sp,-52
    83b4:	dfc00c15 	stw	ra,48(sp)
    83b8:	df000b15 	stw	fp,44(sp)
    83bc:	df000b04 	addi	fp,sp,44
    83c0:	e13ffd15 	stw	r4,-12(fp)
    83c4:	2805883a 	mov	r2,r5
    83c8:	e1bfff15 	stw	r6,-4(fp)
    83cc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    83d0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    83d4:	e0bfff17 	ldw	r2,-4(fp)
    83d8:	1000021e 	bne	r2,zero,83e4 <OSSemDel+0x34>
        return (pevent);
    83dc:	e0bffd17 	ldw	r2,-12(fp)
    83e0:	00007e06 	br	85dc <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    83e4:	e0bffd17 	ldw	r2,-12(fp)
    83e8:	1000051e 	bne	r2,zero,8400 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    83ec:	e0bfff17 	ldw	r2,-4(fp)
    83f0:	00c00104 	movi	r3,4
    83f4:	10c00005 	stb	r3,0(r2)
        return (pevent);
    83f8:	e0bffd17 	ldw	r2,-12(fp)
    83fc:	00007706 	br	85dc <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8400:	e0bffd17 	ldw	r2,-12(fp)
    8404:	10800003 	ldbu	r2,0(r2)
    8408:	10803fcc 	andi	r2,r2,255
    840c:	108000e0 	cmpeqi	r2,r2,3
    8410:	1000051e 	bne	r2,zero,8428 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8414:	e0bfff17 	ldw	r2,-4(fp)
    8418:	00c00044 	movi	r3,1
    841c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8420:	e0bffd17 	ldw	r2,-12(fp)
    8424:	00006d06 	br	85dc <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    8428:	d0a71003 	ldbu	r2,-25536(gp)
    842c:	10803fcc 	andi	r2,r2,255
    8430:	10000526 	beq	r2,zero,8448 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    8434:	e0bfff17 	ldw	r2,-4(fp)
    8438:	00c003c4 	movi	r3,15
    843c:	10c00005 	stb	r3,0(r2)
        return (pevent);
    8440:	e0bffd17 	ldw	r2,-12(fp)
    8444:	00006506 	br	85dc <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8448:	0005303a 	rdctl	r2,status
    844c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8450:	e0fffc17 	ldw	r3,-16(fp)
    8454:	00bfff84 	movi	r2,-2
    8458:	1884703a 	and	r2,r3,r2
    845c:	1001703a 	wrctl	status,r2
  
  return context;
    8460:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8464:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    8468:	e0bffd17 	ldw	r2,-12(fp)
    846c:	10800283 	ldbu	r2,10(r2)
    8470:	10803fcc 	andi	r2,r2,255
    8474:	10000326 	beq	r2,zero,8484 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    8478:	00800044 	movi	r2,1
    847c:	e0bff505 	stb	r2,-44(fp)
    8480:	00000106 	br	8488 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    8484:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    8488:	e0bffe03 	ldbu	r2,-8(fp)
    848c:	10000326 	beq	r2,zero,849c <OSSemDel+0xec>
    8490:	10800060 	cmpeqi	r2,r2,1
    8494:	1000281e 	bne	r2,zero,8538 <OSSemDel+0x188>
    8498:	00004506 	br	85b0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    849c:	e0bff503 	ldbu	r2,-44(fp)
    84a0:	1000161e 	bne	r2,zero,84fc <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    84a4:	e0bffd17 	ldw	r2,-12(fp)
    84a8:	00c00fc4 	movi	r3,63
    84ac:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    84b0:	e0bffd17 	ldw	r2,-12(fp)
    84b4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    84b8:	e0bffd17 	ldw	r2,-12(fp)
    84bc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    84c0:	d0e70f17 	ldw	r3,-25540(gp)
    84c4:	e0bffd17 	ldw	r2,-12(fp)
    84c8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    84cc:	e0bffd17 	ldw	r2,-12(fp)
    84d0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    84d4:	e0bffd17 	ldw	r2,-12(fp)
    84d8:	d0a70f15 	stw	r2,-25540(gp)
    84dc:	e0bff717 	ldw	r2,-36(fp)
    84e0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    84e4:	e0bff817 	ldw	r2,-32(fp)
    84e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    84ec:	e0bfff17 	ldw	r2,-4(fp)
    84f0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    84f4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    84f8:	00003706 	br	85d8 <OSSemDel+0x228>
    84fc:	e0bff717 	ldw	r2,-36(fp)
    8500:	e0bff915 	stw	r2,-28(fp)
    8504:	e0bff917 	ldw	r2,-28(fp)
    8508:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    850c:	e0bfff17 	ldw	r2,-4(fp)
    8510:	00c01244 	movi	r3,73
    8514:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    8518:	e0bffd17 	ldw	r2,-12(fp)
    851c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    8520:	00002d06 	br	85d8 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    8524:	000f883a 	mov	r7,zero
    8528:	01800044 	movi	r6,1
    852c:	000b883a 	mov	r5,zero
    8530:	e13ffd17 	ldw	r4,-12(fp)
    8534:	00040000 	call	4000 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    8538:	e0bffd17 	ldw	r2,-12(fp)
    853c:	10800283 	ldbu	r2,10(r2)
    8540:	10803fcc 	andi	r2,r2,255
    8544:	103ff71e 	bne	r2,zero,8524 <__alt_data_end+0xfffefe84>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    8548:	e0bffd17 	ldw	r2,-12(fp)
    854c:	00c00fc4 	movi	r3,63
    8550:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    8554:	e0bffd17 	ldw	r2,-12(fp)
    8558:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    855c:	e0bffd17 	ldw	r2,-12(fp)
    8560:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    8564:	d0e70f17 	ldw	r3,-25540(gp)
    8568:	e0bffd17 	ldw	r2,-12(fp)
    856c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    8570:	e0bffd17 	ldw	r2,-12(fp)
    8574:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    8578:	e0bffd17 	ldw	r2,-12(fp)
    857c:	d0a70f15 	stw	r2,-25540(gp)
    8580:	e0bff717 	ldw	r2,-36(fp)
    8584:	e0bffa15 	stw	r2,-24(fp)
    8588:	e0bffa17 	ldw	r2,-24(fp)
    858c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    8590:	e0bff503 	ldbu	r2,-44(fp)
    8594:	10800058 	cmpnei	r2,r2,1
    8598:	1000011e 	bne	r2,zero,85a0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    859c:	0004a4c0 	call	4a4c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    85a0:	e0bfff17 	ldw	r2,-4(fp)
    85a4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    85a8:	e03ff615 	stw	zero,-40(fp)
             break;
    85ac:	00000a06 	br	85d8 <OSSemDel+0x228>
    85b0:	e0bff717 	ldw	r2,-36(fp)
    85b4:	e0bffb15 	stw	r2,-20(fp)
    85b8:	e0bffb17 	ldw	r2,-20(fp)
    85bc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    85c0:	e0bfff17 	ldw	r2,-4(fp)
    85c4:	00c001c4 	movi	r3,7
    85c8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    85cc:	e0bffd17 	ldw	r2,-12(fp)
    85d0:	e0bff615 	stw	r2,-40(fp)
             break;
    85d4:	0001883a 	nop
    }
    return (pevent_return);
    85d8:	e0bff617 	ldw	r2,-40(fp)
}
    85dc:	e037883a 	mov	sp,fp
    85e0:	dfc00117 	ldw	ra,4(sp)
    85e4:	df000017 	ldw	fp,0(sp)
    85e8:	dec00204 	addi	sp,sp,8
    85ec:	f800283a 	ret

000085f0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    85f0:	defff504 	addi	sp,sp,-44
    85f4:	dfc00a15 	stw	ra,40(sp)
    85f8:	df000915 	stw	fp,36(sp)
    85fc:	df000904 	addi	fp,sp,36
    8600:	e13ffd15 	stw	r4,-12(fp)
    8604:	2805883a 	mov	r2,r5
    8608:	e1bfff15 	stw	r6,-4(fp)
    860c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8610:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8614:	e0bfff17 	ldw	r2,-4(fp)
    8618:	10007226 	beq	r2,zero,87e4 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    861c:	e0bffd17 	ldw	r2,-12(fp)
    8620:	1000041e 	bne	r2,zero,8634 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    8624:	e0bfff17 	ldw	r2,-4(fp)
    8628:	00c00104 	movi	r3,4
    862c:	10c00005 	stb	r3,0(r2)
        return;
    8630:	00006d06 	br	87e8 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8634:	e0bffd17 	ldw	r2,-12(fp)
    8638:	10800003 	ldbu	r2,0(r2)
    863c:	10803fcc 	andi	r2,r2,255
    8640:	108000e0 	cmpeqi	r2,r2,3
    8644:	1000041e 	bne	r2,zero,8658 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    8648:	e0bfff17 	ldw	r2,-4(fp)
    864c:	00c00044 	movi	r3,1
    8650:	10c00005 	stb	r3,0(r2)
        return;
    8654:	00006406 	br	87e8 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    8658:	d0a71003 	ldbu	r2,-25536(gp)
    865c:	10803fcc 	andi	r2,r2,255
    8660:	10000426 	beq	r2,zero,8674 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    8664:	e0bfff17 	ldw	r2,-4(fp)
    8668:	00c00084 	movi	r3,2
    866c:	10c00005 	stb	r3,0(r2)
        return;
    8670:	00005d06 	br	87e8 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    8674:	d0a70203 	ldbu	r2,-25592(gp)
    8678:	10803fcc 	andi	r2,r2,255
    867c:	10000426 	beq	r2,zero,8690 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    8680:	e0bfff17 	ldw	r2,-4(fp)
    8684:	00c00344 	movi	r3,13
    8688:	10c00005 	stb	r3,0(r2)
        return;
    868c:	00005606 	br	87e8 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8690:	0005303a 	rdctl	r2,status
    8694:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8698:	e0fffc17 	ldw	r3,-16(fp)
    869c:	00bfff84 	movi	r2,-2
    86a0:	1884703a 	and	r2,r3,r2
    86a4:	1001703a 	wrctl	status,r2
  
  return context;
    86a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    86ac:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    86b0:	e0bffd17 	ldw	r2,-12(fp)
    86b4:	1080020b 	ldhu	r2,8(r2)
    86b8:	10bfffcc 	andi	r2,r2,65535
    86bc:	10000d26 	beq	r2,zero,86f4 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    86c0:	e0bffd17 	ldw	r2,-12(fp)
    86c4:	1080020b 	ldhu	r2,8(r2)
    86c8:	10bfffc4 	addi	r2,r2,-1
    86cc:	1007883a 	mov	r3,r2
    86d0:	e0bffd17 	ldw	r2,-12(fp)
    86d4:	10c0020d 	sth	r3,8(r2)
    86d8:	e0bff717 	ldw	r2,-36(fp)
    86dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    86e0:	e0bff817 	ldw	r2,-32(fp)
    86e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    86e8:	e0bfff17 	ldw	r2,-4(fp)
    86ec:	10000005 	stb	zero,0(r2)
        return;
    86f0:	00003d06 	br	87e8 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    86f4:	d0a71117 	ldw	r2,-25532(gp)
    86f8:	d0e71117 	ldw	r3,-25532(gp)
    86fc:	18c00c03 	ldbu	r3,48(r3)
    8700:	18c00054 	ori	r3,r3,1
    8704:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    8708:	d0a71117 	ldw	r2,-25532(gp)
    870c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    8710:	d0a71117 	ldw	r2,-25532(gp)
    8714:	e0fffe0b 	ldhu	r3,-8(fp)
    8718:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    871c:	e13ffd17 	ldw	r4,-12(fp)
    8720:	00041980 	call	4198 <OS_EventTaskWait>
    8724:	e0bff717 	ldw	r2,-36(fp)
    8728:	e0bffb15 	stw	r2,-20(fp)
    872c:	e0bffb17 	ldw	r2,-20(fp)
    8730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    8734:	0004a4c0 	call	4a4c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8738:	0005303a 	rdctl	r2,status
    873c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8740:	e0fff917 	ldw	r3,-28(fp)
    8744:	00bfff84 	movi	r2,-2
    8748:	1884703a 	and	r2,r3,r2
    874c:	1001703a 	wrctl	status,r2
  
  return context;
    8750:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    8754:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    8758:	d0a71117 	ldw	r2,-25532(gp)
    875c:	10800c43 	ldbu	r2,49(r2)
    8760:	10803fcc 	andi	r2,r2,255
    8764:	10000326 	beq	r2,zero,8774 <OSSemPend+0x184>
    8768:	108000a0 	cmpeqi	r2,r2,2
    876c:	1000041e 	bne	r2,zero,8780 <OSSemPend+0x190>
    8770:	00000706 	br	8790 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    8774:	e0bfff17 	ldw	r2,-4(fp)
    8778:	10000005 	stb	zero,0(r2)
             break;
    877c:	00000c06 	br	87b0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    8780:	e0bfff17 	ldw	r2,-4(fp)
    8784:	00c00384 	movi	r3,14
    8788:	10c00005 	stb	r3,0(r2)
             break;
    878c:	00000806 	br	87b0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    8790:	d0a71117 	ldw	r2,-25532(gp)
    8794:	e17ffd17 	ldw	r5,-12(fp)
    8798:	1009883a 	mov	r4,r2
    879c:	00043f80 	call	43f8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    87a0:	e0bfff17 	ldw	r2,-4(fp)
    87a4:	00c00284 	movi	r3,10
    87a8:	10c00005 	stb	r3,0(r2)
             break;
    87ac:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    87b0:	d0a71117 	ldw	r2,-25532(gp)
    87b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    87b8:	d0a71117 	ldw	r2,-25532(gp)
    87bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    87c0:	d0a71117 	ldw	r2,-25532(gp)
    87c4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    87c8:	d0a71117 	ldw	r2,-25532(gp)
    87cc:	10000815 	stw	zero,32(r2)
    87d0:	e0bff717 	ldw	r2,-36(fp)
    87d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    87d8:	e0bffa17 	ldw	r2,-24(fp)
    87dc:	1001703a 	wrctl	status,r2
    87e0:	00000106 	br	87e8 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    87e4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    87e8:	e037883a 	mov	sp,fp
    87ec:	dfc00117 	ldw	ra,4(sp)
    87f0:	df000017 	ldw	fp,0(sp)
    87f4:	dec00204 	addi	sp,sp,8
    87f8:	f800283a 	ret

000087fc <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    87fc:	defff604 	addi	sp,sp,-40
    8800:	dfc00915 	stw	ra,36(sp)
    8804:	df000815 	stw	fp,32(sp)
    8808:	df000804 	addi	fp,sp,32
    880c:	e13ffd15 	stw	r4,-12(fp)
    8810:	2805883a 	mov	r2,r5
    8814:	e1bfff15 	stw	r6,-4(fp)
    8818:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    881c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8820:	e0bfff17 	ldw	r2,-4(fp)
    8824:	1000021e 	bne	r2,zero,8830 <OSSemPendAbort+0x34>
        return (0);
    8828:	0005883a 	mov	r2,zero
    882c:	00004906 	br	8954 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8830:	e0bffd17 	ldw	r2,-12(fp)
    8834:	1000051e 	bne	r2,zero,884c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    8838:	e0bfff17 	ldw	r2,-4(fp)
    883c:	00c00104 	movi	r3,4
    8840:	10c00005 	stb	r3,0(r2)
        return (0);
    8844:	0005883a 	mov	r2,zero
    8848:	00004206 	br	8954 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    884c:	e0bffd17 	ldw	r2,-12(fp)
    8850:	10800003 	ldbu	r2,0(r2)
    8854:	10803fcc 	andi	r2,r2,255
    8858:	108000e0 	cmpeqi	r2,r2,3
    885c:	1000051e 	bne	r2,zero,8874 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    8860:	e0bfff17 	ldw	r2,-4(fp)
    8864:	00c00044 	movi	r3,1
    8868:	10c00005 	stb	r3,0(r2)
        return (0);
    886c:	0005883a 	mov	r2,zero
    8870:	00003806 	br	8954 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8874:	0005303a 	rdctl	r2,status
    8878:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    887c:	e0fffc17 	ldw	r3,-16(fp)
    8880:	00bfff84 	movi	r2,-2
    8884:	1884703a 	and	r2,r3,r2
    8888:	1001703a 	wrctl	status,r2
  
  return context;
    888c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8890:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    8894:	e0bffd17 	ldw	r2,-12(fp)
    8898:	10800283 	ldbu	r2,10(r2)
    889c:	10803fcc 	andi	r2,r2,255
    88a0:	10002526 	beq	r2,zero,8938 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    88a4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    88a8:	e0bffe03 	ldbu	r2,-8(fp)
    88ac:	10800060 	cmpeqi	r2,r2,1
    88b0:	10000e26 	beq	r2,zero,88ec <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    88b4:	00000806 	br	88d8 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    88b8:	01c00084 	movi	r7,2
    88bc:	01800044 	movi	r6,1
    88c0:	000b883a 	mov	r5,zero
    88c4:	e13ffd17 	ldw	r4,-12(fp)
    88c8:	00040000 	call	4000 <OS_EventTaskRdy>
                     nbr_tasks++;
    88cc:	e0bff803 	ldbu	r2,-32(fp)
    88d0:	10800044 	addi	r2,r2,1
    88d4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    88d8:	e0bffd17 	ldw	r2,-12(fp)
    88dc:	10800283 	ldbu	r2,10(r2)
    88e0:	10803fcc 	andi	r2,r2,255
    88e4:	103ff41e 	bne	r2,zero,88b8 <__alt_data_end+0xffff0218>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    88e8:	00000906 	br	8910 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    88ec:	01c00084 	movi	r7,2
    88f0:	01800044 	movi	r6,1
    88f4:	000b883a 	mov	r5,zero
    88f8:	e13ffd17 	ldw	r4,-12(fp)
    88fc:	00040000 	call	4000 <OS_EventTaskRdy>
                 nbr_tasks++;
    8900:	e0bff803 	ldbu	r2,-32(fp)
    8904:	10800044 	addi	r2,r2,1
    8908:	e0bff805 	stb	r2,-32(fp)
                 break;
    890c:	0001883a 	nop
    8910:	e0bff917 	ldw	r2,-28(fp)
    8914:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8918:	e0bffa17 	ldw	r2,-24(fp)
    891c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    8920:	0004a4c0 	call	4a4c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    8924:	e0bfff17 	ldw	r2,-4(fp)
    8928:	00c00384 	movi	r3,14
    892c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    8930:	e0bff803 	ldbu	r2,-32(fp)
    8934:	00000706 	br	8954 <OSSemPendAbort+0x158>
    8938:	e0bff917 	ldw	r2,-28(fp)
    893c:	e0bffb15 	stw	r2,-20(fp)
    8940:	e0bffb17 	ldw	r2,-20(fp)
    8944:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    8948:	e0bfff17 	ldw	r2,-4(fp)
    894c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    8950:	0005883a 	mov	r2,zero
}
    8954:	e037883a 	mov	sp,fp
    8958:	dfc00117 	ldw	ra,4(sp)
    895c:	df000017 	ldw	fp,0(sp)
    8960:	dec00204 	addi	sp,sp,8
    8964:	f800283a 	ret

00008968 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    8968:	defff804 	addi	sp,sp,-32
    896c:	dfc00715 	stw	ra,28(sp)
    8970:	df000615 	stw	fp,24(sp)
    8974:	df000604 	addi	fp,sp,24
    8978:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    897c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8980:	e0bfff17 	ldw	r2,-4(fp)
    8984:	1000021e 	bne	r2,zero,8990 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    8988:	00800104 	movi	r2,4
    898c:	00003506 	br	8a64 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8990:	e0bfff17 	ldw	r2,-4(fp)
    8994:	10800003 	ldbu	r2,0(r2)
    8998:	10803fcc 	andi	r2,r2,255
    899c:	108000e0 	cmpeqi	r2,r2,3
    89a0:	1000021e 	bne	r2,zero,89ac <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    89a4:	00800044 	movi	r2,1
    89a8:	00002e06 	br	8a64 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    89ac:	0005303a 	rdctl	r2,status
    89b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    89b4:	e0fffe17 	ldw	r3,-8(fp)
    89b8:	00bfff84 	movi	r2,-2
    89bc:	1884703a 	and	r2,r3,r2
    89c0:	1001703a 	wrctl	status,r2
  
  return context;
    89c4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    89c8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    89cc:	e0bfff17 	ldw	r2,-4(fp)
    89d0:	10800283 	ldbu	r2,10(r2)
    89d4:	10803fcc 	andi	r2,r2,255
    89d8:	10000c26 	beq	r2,zero,8a0c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    89dc:	000f883a 	mov	r7,zero
    89e0:	01800044 	movi	r6,1
    89e4:	000b883a 	mov	r5,zero
    89e8:	e13fff17 	ldw	r4,-4(fp)
    89ec:	00040000 	call	4000 <OS_EventTaskRdy>
    89f0:	e0bffa17 	ldw	r2,-24(fp)
    89f4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    89f8:	e0bffb17 	ldw	r2,-20(fp)
    89fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    8a00:	0004a4c0 	call	4a4c <OS_Sched>
        return (OS_ERR_NONE);
    8a04:	0005883a 	mov	r2,zero
    8a08:	00001606 	br	8a64 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    8a0c:	e0bfff17 	ldw	r2,-4(fp)
    8a10:	1080020b 	ldhu	r2,8(r2)
    8a14:	10ffffcc 	andi	r3,r2,65535
    8a18:	00bfffd4 	movui	r2,65535
    8a1c:	18800c26 	beq	r3,r2,8a50 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    8a20:	e0bfff17 	ldw	r2,-4(fp)
    8a24:	1080020b 	ldhu	r2,8(r2)
    8a28:	10800044 	addi	r2,r2,1
    8a2c:	1007883a 	mov	r3,r2
    8a30:	e0bfff17 	ldw	r2,-4(fp)
    8a34:	10c0020d 	sth	r3,8(r2)
    8a38:	e0bffa17 	ldw	r2,-24(fp)
    8a3c:	e0bffc15 	stw	r2,-16(fp)
    8a40:	e0bffc17 	ldw	r2,-16(fp)
    8a44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    8a48:	0005883a 	mov	r2,zero
    8a4c:	00000506 	br	8a64 <OSSemPost+0xfc>
    8a50:	e0bffa17 	ldw	r2,-24(fp)
    8a54:	e0bffd15 	stw	r2,-12(fp)
    8a58:	e0bffd17 	ldw	r2,-12(fp)
    8a5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    8a60:	00800c84 	movi	r2,50
}
    8a64:	e037883a 	mov	sp,fp
    8a68:	dfc00117 	ldw	ra,4(sp)
    8a6c:	df000017 	ldw	fp,0(sp)
    8a70:	dec00204 	addi	sp,sp,8
    8a74:	f800283a 	ret

00008a78 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    8a78:	defff704 	addi	sp,sp,-36
    8a7c:	df000815 	stw	fp,32(sp)
    8a80:	df000804 	addi	fp,sp,32
    8a84:	e13ffe15 	stw	r4,-8(fp)
    8a88:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    8a8c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    8a90:	e0bffe17 	ldw	r2,-8(fp)
    8a94:	1000021e 	bne	r2,zero,8aa0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    8a98:	00800104 	movi	r2,4
    8a9c:	00003606 	br	8b78 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    8aa0:	e0bfff17 	ldw	r2,-4(fp)
    8aa4:	1000021e 	bne	r2,zero,8ab0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    8aa8:	00800244 	movi	r2,9
    8aac:	00003206 	br	8b78 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    8ab0:	e0bffe17 	ldw	r2,-8(fp)
    8ab4:	10800003 	ldbu	r2,0(r2)
    8ab8:	10803fcc 	andi	r2,r2,255
    8abc:	108000e0 	cmpeqi	r2,r2,3
    8ac0:	1000021e 	bne	r2,zero,8acc <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    8ac4:	00800044 	movi	r2,1
    8ac8:	00002b06 	br	8b78 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8acc:	0005303a 	rdctl	r2,status
    8ad0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ad4:	e0fffd17 	ldw	r3,-12(fp)
    8ad8:	00bfff84 	movi	r2,-2
    8adc:	1884703a 	and	r2,r3,r2
    8ae0:	1001703a 	wrctl	status,r2
  
  return context;
    8ae4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    8ae8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    8aec:	e0bffe17 	ldw	r2,-8(fp)
    8af0:	10c00283 	ldbu	r3,10(r2)
    8af4:	e0bfff17 	ldw	r2,-4(fp)
    8af8:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    8afc:	e0bffe17 	ldw	r2,-8(fp)
    8b00:	108002c4 	addi	r2,r2,11
    8b04:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    8b08:	e0bfff17 	ldw	r2,-4(fp)
    8b0c:	10800084 	addi	r2,r2,2
    8b10:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b14:	e03ffa05 	stb	zero,-24(fp)
    8b18:	00000b06 	br	8b48 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    8b1c:	e0bff917 	ldw	r2,-28(fp)
    8b20:	10c00044 	addi	r3,r2,1
    8b24:	e0fff915 	stw	r3,-28(fp)
    8b28:	e0fff817 	ldw	r3,-32(fp)
    8b2c:	19000044 	addi	r4,r3,1
    8b30:	e13ff815 	stw	r4,-32(fp)
    8b34:	18c00003 	ldbu	r3,0(r3)
    8b38:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    8b3c:	e0bffa03 	ldbu	r2,-24(fp)
    8b40:	10800044 	addi	r2,r2,1
    8b44:	e0bffa05 	stb	r2,-24(fp)
    8b48:	e0bffa03 	ldbu	r2,-24(fp)
    8b4c:	108000f0 	cmpltui	r2,r2,3
    8b50:	103ff21e 	bne	r2,zero,8b1c <__alt_data_end+0xffff047c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    8b54:	e0bffe17 	ldw	r2,-8(fp)
    8b58:	10c0020b 	ldhu	r3,8(r2)
    8b5c:	e0bfff17 	ldw	r2,-4(fp)
    8b60:	10c0000d 	sth	r3,0(r2)
    8b64:	e0bffb17 	ldw	r2,-20(fp)
    8b68:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8b6c:	e0bffc17 	ldw	r2,-16(fp)
    8b70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    8b74:	0005883a 	mov	r2,zero
}
    8b78:	e037883a 	mov	sp,fp
    8b7c:	df000017 	ldw	fp,0(sp)
    8b80:	dec00104 	addi	sp,sp,4
    8b84:	f800283a 	ret

00008b88 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    8b88:	defff904 	addi	sp,sp,-28
    8b8c:	df000615 	stw	fp,24(sp)
    8b90:	df000604 	addi	fp,sp,24
    8b94:	e13ffd15 	stw	r4,-12(fp)
    8b98:	2805883a 	mov	r2,r5
    8b9c:	e1bfff15 	stw	r6,-4(fp)
    8ba0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    8ba4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    8ba8:	e0bfff17 	ldw	r2,-4(fp)
    8bac:	10003126 	beq	r2,zero,8c74 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    8bb0:	e0bffd17 	ldw	r2,-12(fp)
    8bb4:	1000041e 	bne	r2,zero,8bc8 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    8bb8:	e0bfff17 	ldw	r2,-4(fp)
    8bbc:	00c00104 	movi	r3,4
    8bc0:	10c00005 	stb	r3,0(r2)
        return;
    8bc4:	00002c06 	br	8c78 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    8bc8:	e0bffd17 	ldw	r2,-12(fp)
    8bcc:	10800003 	ldbu	r2,0(r2)
    8bd0:	10803fcc 	andi	r2,r2,255
    8bd4:	108000e0 	cmpeqi	r2,r2,3
    8bd8:	1000041e 	bne	r2,zero,8bec <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    8bdc:	e0bfff17 	ldw	r2,-4(fp)
    8be0:	00c00044 	movi	r3,1
    8be4:	10c00005 	stb	r3,0(r2)
        return;
    8be8:	00002306 	br	8c78 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8bec:	0005303a 	rdctl	r2,status
    8bf0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8bf4:	e0fffc17 	ldw	r3,-16(fp)
    8bf8:	00bfff84 	movi	r2,-2
    8bfc:	1884703a 	and	r2,r3,r2
    8c00:	1001703a 	wrctl	status,r2
  
  return context;
    8c04:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    8c08:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    8c0c:	e0bfff17 	ldw	r2,-4(fp)
    8c10:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    8c14:	e0bffd17 	ldw	r2,-12(fp)
    8c18:	1080020b 	ldhu	r2,8(r2)
    8c1c:	10bfffcc 	andi	r2,r2,65535
    8c20:	10000426 	beq	r2,zero,8c34 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    8c24:	e0bffd17 	ldw	r2,-12(fp)
    8c28:	e0fffe0b 	ldhu	r3,-8(fp)
    8c2c:	10c0020d 	sth	r3,8(r2)
    8c30:	00000b06 	br	8c60 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    8c34:	e0bffd17 	ldw	r2,-12(fp)
    8c38:	10800283 	ldbu	r2,10(r2)
    8c3c:	10803fcc 	andi	r2,r2,255
    8c40:	1000041e 	bne	r2,zero,8c54 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    8c44:	e0bffd17 	ldw	r2,-12(fp)
    8c48:	e0fffe0b 	ldhu	r3,-8(fp)
    8c4c:	10c0020d 	sth	r3,8(r2)
    8c50:	00000306 	br	8c60 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    8c54:	e0bfff17 	ldw	r2,-4(fp)
    8c58:	00c01244 	movi	r3,73
    8c5c:	10c00005 	stb	r3,0(r2)
    8c60:	e0bffa17 	ldw	r2,-24(fp)
    8c64:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c68:	e0bffb17 	ldw	r2,-20(fp)
    8c6c:	1001703a 	wrctl	status,r2
    8c70:	00000106 	br	8c78 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    8c74:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    8c78:	e037883a 	mov	sp,fp
    8c7c:	df000017 	ldw	fp,0(sp)
    8c80:	dec00104 	addi	sp,sp,4
    8c84:	f800283a 	ret

00008c88 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    8c88:	defff104 	addi	sp,sp,-60
    8c8c:	dfc00e15 	stw	ra,56(sp)
    8c90:	df000d15 	stw	fp,52(sp)
    8c94:	df000d04 	addi	fp,sp,52
    8c98:	2007883a 	mov	r3,r4
    8c9c:	2805883a 	mov	r2,r5
    8ca0:	e0fffe05 	stb	r3,-8(fp)
    8ca4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    8ca8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    8cac:	e0bffe03 	ldbu	r2,-8(fp)
    8cb0:	10800530 	cmpltui	r2,r2,20
    8cb4:	1000051e 	bne	r2,zero,8ccc <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    8cb8:	e0bffe03 	ldbu	r2,-8(fp)
    8cbc:	10803fe0 	cmpeqi	r2,r2,255
    8cc0:	1000021e 	bne	r2,zero,8ccc <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    8cc4:	00800a84 	movi	r2,42
    8cc8:	00012606 	br	9164 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    8ccc:	e0bfff03 	ldbu	r2,-4(fp)
    8cd0:	10800530 	cmpltui	r2,r2,20
    8cd4:	1000021e 	bne	r2,zero,8ce0 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    8cd8:	00800a84 	movi	r2,42
    8cdc:	00012106 	br	9164 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ce0:	0005303a 	rdctl	r2,status
    8ce4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8ce8:	e0fffd17 	ldw	r3,-12(fp)
    8cec:	00bfff84 	movi	r2,-2
    8cf0:	1884703a 	and	r2,r3,r2
    8cf4:	1001703a 	wrctl	status,r2
  
  return context;
    8cf8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    8cfc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    8d00:	e0ffff03 	ldbu	r3,-4(fp)
    8d04:	00800074 	movhi	r2,1
    8d08:	109ecc04 	addi	r2,r2,31536
    8d0c:	18c7883a 	add	r3,r3,r3
    8d10:	18c7883a 	add	r3,r3,r3
    8d14:	10c5883a 	add	r2,r2,r3
    8d18:	10800017 	ldw	r2,0(r2)
    8d1c:	10000626 	beq	r2,zero,8d38 <OSTaskChangePrio+0xb0>
    8d20:	e0bff517 	ldw	r2,-44(fp)
    8d24:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8d28:	e0bff617 	ldw	r2,-40(fp)
    8d2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    8d30:	00800a04 	movi	r2,40
    8d34:	00010b06 	br	9164 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    8d38:	e0bffe03 	ldbu	r2,-8(fp)
    8d3c:	10803fd8 	cmpnei	r2,r2,255
    8d40:	1000031e 	bne	r2,zero,8d50 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    8d44:	d0a71117 	ldw	r2,-25532(gp)
    8d48:	10800c83 	ldbu	r2,50(r2)
    8d4c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    8d50:	e0fffe03 	ldbu	r3,-8(fp)
    8d54:	00800074 	movhi	r2,1
    8d58:	109ecc04 	addi	r2,r2,31536
    8d5c:	18c7883a 	add	r3,r3,r3
    8d60:	18c7883a 	add	r3,r3,r3
    8d64:	10c5883a 	add	r2,r2,r3
    8d68:	10800017 	ldw	r2,0(r2)
    8d6c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    8d70:	e0bff817 	ldw	r2,-32(fp)
    8d74:	1000061e 	bne	r2,zero,8d90 <OSTaskChangePrio+0x108>
    8d78:	e0bff517 	ldw	r2,-44(fp)
    8d7c:	e0bff715 	stw	r2,-36(fp)
    8d80:	e0bff717 	ldw	r2,-36(fp)
    8d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    8d88:	00800a44 	movi	r2,41
    8d8c:	0000f506 	br	9164 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    8d90:	e0bff817 	ldw	r2,-32(fp)
    8d94:	10800058 	cmpnei	r2,r2,1
    8d98:	1000061e 	bne	r2,zero,8db4 <OSTaskChangePrio+0x12c>
    8d9c:	e0bff517 	ldw	r2,-44(fp)
    8da0:	e0bff915 	stw	r2,-28(fp)
    8da4:	e0bff917 	ldw	r2,-28(fp)
    8da8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    8dac:	008010c4 	movi	r2,67
    8db0:	0000ec06 	br	9164 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    8db4:	e0bfff03 	ldbu	r2,-4(fp)
    8db8:	1004d0fa 	srli	r2,r2,3
    8dbc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    8dc0:	e0bfff03 	ldbu	r2,-4(fp)
    8dc4:	108001cc 	andi	r2,r2,7
    8dc8:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    8dcc:	e0bffb03 	ldbu	r2,-20(fp)
    8dd0:	00c00044 	movi	r3,1
    8dd4:	1884983a 	sll	r2,r3,r2
    8dd8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    8ddc:	e0bffb43 	ldbu	r2,-19(fp)
    8de0:	00c00044 	movi	r3,1
    8de4:	1884983a 	sll	r2,r3,r2
    8de8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    8dec:	e0fffe03 	ldbu	r3,-8(fp)
    8df0:	00800074 	movhi	r2,1
    8df4:	109ecc04 	addi	r2,r2,31536
    8df8:	18c7883a 	add	r3,r3,r3
    8dfc:	18c7883a 	add	r3,r3,r3
    8e00:	10c5883a 	add	r2,r2,r3
    8e04:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    8e08:	e0ffff03 	ldbu	r3,-4(fp)
    8e0c:	00800074 	movhi	r2,1
    8e10:	109ecc04 	addi	r2,r2,31536
    8e14:	18c7883a 	add	r3,r3,r3
    8e18:	18c7883a 	add	r3,r3,r3
    8e1c:	10c5883a 	add	r2,r2,r3
    8e20:	e0fff817 	ldw	r3,-32(fp)
    8e24:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    8e28:	e0bff817 	ldw	r2,-32(fp)
    8e2c:	10800d03 	ldbu	r2,52(r2)
    8e30:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    8e34:	e0bff817 	ldw	r2,-32(fp)
    8e38:	10800d83 	ldbu	r2,54(r2)
    8e3c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    8e40:	e0bff817 	ldw	r2,-32(fp)
    8e44:	10800d43 	ldbu	r2,53(r2)
    8e48:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    8e4c:	e0fffc03 	ldbu	r3,-16(fp)
    8e50:	d0a70e44 	addi	r2,gp,-25543
    8e54:	1885883a 	add	r2,r3,r2
    8e58:	10c00003 	ldbu	r3,0(r2)
    8e5c:	e0bffc83 	ldbu	r2,-14(fp)
    8e60:	1884703a 	and	r2,r3,r2
    8e64:	10803fcc 	andi	r2,r2,255
    8e68:	10002826 	beq	r2,zero,8f0c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    8e6c:	e0fffc03 	ldbu	r3,-16(fp)
    8e70:	e13ffc03 	ldbu	r4,-16(fp)
    8e74:	d0a70e44 	addi	r2,gp,-25543
    8e78:	2085883a 	add	r2,r4,r2
    8e7c:	10800003 	ldbu	r2,0(r2)
    8e80:	1009883a 	mov	r4,r2
    8e84:	e0bffc83 	ldbu	r2,-14(fp)
    8e88:	0084303a 	nor	r2,zero,r2
    8e8c:	2084703a 	and	r2,r4,r2
    8e90:	1009883a 	mov	r4,r2
    8e94:	d0a70e44 	addi	r2,gp,-25543
    8e98:	1885883a 	add	r2,r3,r2
    8e9c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    8ea0:	e0fffc03 	ldbu	r3,-16(fp)
    8ea4:	d0a70e44 	addi	r2,gp,-25543
    8ea8:	1885883a 	add	r2,r3,r2
    8eac:	10800003 	ldbu	r2,0(r2)
    8eb0:	10803fcc 	andi	r2,r2,255
    8eb4:	1000061e 	bne	r2,zero,8ed0 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    8eb8:	e0bffc43 	ldbu	r2,-15(fp)
    8ebc:	0084303a 	nor	r2,zero,r2
    8ec0:	1007883a 	mov	r3,r2
    8ec4:	d0a70e03 	ldbu	r2,-25544(gp)
    8ec8:	1884703a 	and	r2,r3,r2
    8ecc:	d0a70e05 	stb	r2,-25544(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    8ed0:	d0e70e03 	ldbu	r3,-25544(gp)
    8ed4:	e0bffb83 	ldbu	r2,-18(fp)
    8ed8:	1884b03a 	or	r2,r3,r2
    8edc:	d0a70e05 	stb	r2,-25544(gp)
         OSRdyTbl[y_new] |= bitx_new;
    8ee0:	e0fffb03 	ldbu	r3,-20(fp)
    8ee4:	e13ffb03 	ldbu	r4,-20(fp)
    8ee8:	d0a70e44 	addi	r2,gp,-25543
    8eec:	2085883a 	add	r2,r4,r2
    8ef0:	11000003 	ldbu	r4,0(r2)
    8ef4:	e0bffbc3 	ldbu	r2,-17(fp)
    8ef8:	2084b03a 	or	r2,r4,r2
    8efc:	1009883a 	mov	r4,r2
    8f00:	d0a70e44 	addi	r2,gp,-25543
    8f04:	1885883a 	add	r2,r3,r2
    8f08:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    8f0c:	e0bff817 	ldw	r2,-32(fp)
    8f10:	10800717 	ldw	r2,28(r2)
    8f14:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    8f18:	e0bff317 	ldw	r2,-52(fp)
    8f1c:	10003326 	beq	r2,zero,8fec <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    8f20:	e0bffc03 	ldbu	r2,-16(fp)
    8f24:	e0fffc03 	ldbu	r3,-16(fp)
    8f28:	e13ff317 	ldw	r4,-52(fp)
    8f2c:	20c7883a 	add	r3,r4,r3
    8f30:	18c002c4 	addi	r3,r3,11
    8f34:	18c00003 	ldbu	r3,0(r3)
    8f38:	1809883a 	mov	r4,r3
    8f3c:	e0fffc83 	ldbu	r3,-14(fp)
    8f40:	00c6303a 	nor	r3,zero,r3
    8f44:	20c6703a 	and	r3,r4,r3
    8f48:	1809883a 	mov	r4,r3
    8f4c:	e0fff317 	ldw	r3,-52(fp)
    8f50:	1885883a 	add	r2,r3,r2
    8f54:	108002c4 	addi	r2,r2,11
    8f58:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    8f5c:	e0bffc03 	ldbu	r2,-16(fp)
    8f60:	e0fff317 	ldw	r3,-52(fp)
    8f64:	1885883a 	add	r2,r3,r2
    8f68:	108002c4 	addi	r2,r2,11
    8f6c:	10800003 	ldbu	r2,0(r2)
    8f70:	10803fcc 	andi	r2,r2,255
    8f74:	1000091e 	bne	r2,zero,8f9c <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    8f78:	e0bff317 	ldw	r2,-52(fp)
    8f7c:	10800283 	ldbu	r2,10(r2)
    8f80:	1007883a 	mov	r3,r2
    8f84:	e0bffc43 	ldbu	r2,-15(fp)
    8f88:	0084303a 	nor	r2,zero,r2
    8f8c:	1884703a 	and	r2,r3,r2
    8f90:	1007883a 	mov	r3,r2
    8f94:	e0bff317 	ldw	r2,-52(fp)
    8f98:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    8f9c:	e0bff317 	ldw	r2,-52(fp)
    8fa0:	10c00283 	ldbu	r3,10(r2)
    8fa4:	e0bffb83 	ldbu	r2,-18(fp)
    8fa8:	1884b03a 	or	r2,r3,r2
    8fac:	1007883a 	mov	r3,r2
    8fb0:	e0bff317 	ldw	r2,-52(fp)
    8fb4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    8fb8:	e0bffb03 	ldbu	r2,-20(fp)
    8fbc:	e0fffb03 	ldbu	r3,-20(fp)
    8fc0:	e13ff317 	ldw	r4,-52(fp)
    8fc4:	20c7883a 	add	r3,r4,r3
    8fc8:	18c002c4 	addi	r3,r3,11
    8fcc:	19000003 	ldbu	r4,0(r3)
    8fd0:	e0fffbc3 	ldbu	r3,-17(fp)
    8fd4:	20c6b03a 	or	r3,r4,r3
    8fd8:	1809883a 	mov	r4,r3
    8fdc:	e0fff317 	ldw	r3,-52(fp)
    8fe0:	1885883a 	add	r2,r3,r2
    8fe4:	108002c4 	addi	r2,r2,11
    8fe8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    8fec:	e0bff817 	ldw	r2,-32(fp)
    8ff0:	10800817 	ldw	r2,32(r2)
    8ff4:	10004226 	beq	r2,zero,9100 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    8ff8:	e0bff817 	ldw	r2,-32(fp)
    8ffc:	10800817 	ldw	r2,32(r2)
    9000:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    9004:	e0bff417 	ldw	r2,-48(fp)
    9008:	10800017 	ldw	r2,0(r2)
    900c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    9010:	00003906 	br	90f8 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    9014:	e0bffc03 	ldbu	r2,-16(fp)
    9018:	e0fffc03 	ldbu	r3,-16(fp)
    901c:	e13ff317 	ldw	r4,-52(fp)
    9020:	20c7883a 	add	r3,r4,r3
    9024:	18c002c4 	addi	r3,r3,11
    9028:	18c00003 	ldbu	r3,0(r3)
    902c:	1809883a 	mov	r4,r3
    9030:	e0fffc83 	ldbu	r3,-14(fp)
    9034:	00c6303a 	nor	r3,zero,r3
    9038:	20c6703a 	and	r3,r4,r3
    903c:	1809883a 	mov	r4,r3
    9040:	e0fff317 	ldw	r3,-52(fp)
    9044:	1885883a 	add	r2,r3,r2
    9048:	108002c4 	addi	r2,r2,11
    904c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    9050:	e0bffc03 	ldbu	r2,-16(fp)
    9054:	e0fff317 	ldw	r3,-52(fp)
    9058:	1885883a 	add	r2,r3,r2
    905c:	108002c4 	addi	r2,r2,11
    9060:	10800003 	ldbu	r2,0(r2)
    9064:	10803fcc 	andi	r2,r2,255
    9068:	1000091e 	bne	r2,zero,9090 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    906c:	e0bff317 	ldw	r2,-52(fp)
    9070:	10800283 	ldbu	r2,10(r2)
    9074:	1007883a 	mov	r3,r2
    9078:	e0bffc43 	ldbu	r2,-15(fp)
    907c:	0084303a 	nor	r2,zero,r2
    9080:	1884703a 	and	r2,r3,r2
    9084:	1007883a 	mov	r3,r2
    9088:	e0bff317 	ldw	r2,-52(fp)
    908c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    9090:	e0bff317 	ldw	r2,-52(fp)
    9094:	10c00283 	ldbu	r3,10(r2)
    9098:	e0bffb83 	ldbu	r2,-18(fp)
    909c:	1884b03a 	or	r2,r3,r2
    90a0:	1007883a 	mov	r3,r2
    90a4:	e0bff317 	ldw	r2,-52(fp)
    90a8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    90ac:	e0bffb03 	ldbu	r2,-20(fp)
    90b0:	e0fffb03 	ldbu	r3,-20(fp)
    90b4:	e13ff317 	ldw	r4,-52(fp)
    90b8:	20c7883a 	add	r3,r4,r3
    90bc:	18c002c4 	addi	r3,r3,11
    90c0:	19000003 	ldbu	r4,0(r3)
    90c4:	e0fffbc3 	ldbu	r3,-17(fp)
    90c8:	20c6b03a 	or	r3,r4,r3
    90cc:	1809883a 	mov	r4,r3
    90d0:	e0fff317 	ldw	r3,-52(fp)
    90d4:	1885883a 	add	r2,r3,r2
    90d8:	108002c4 	addi	r2,r2,11
    90dc:	11000005 	stb	r4,0(r2)
            pevents++;
    90e0:	e0bff417 	ldw	r2,-48(fp)
    90e4:	10800104 	addi	r2,r2,4
    90e8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    90ec:	e0bff417 	ldw	r2,-48(fp)
    90f0:	10800017 	ldw	r2,0(r2)
    90f4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    90f8:	e0bff317 	ldw	r2,-52(fp)
    90fc:	103fc51e 	bne	r2,zero,9014 <__alt_data_end+0xffff0974>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    9100:	e0bff817 	ldw	r2,-32(fp)
    9104:	e0ffff03 	ldbu	r3,-4(fp)
    9108:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    910c:	e0bff817 	ldw	r2,-32(fp)
    9110:	e0fffb03 	ldbu	r3,-20(fp)
    9114:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    9118:	e0bff817 	ldw	r2,-32(fp)
    911c:	e0fffb43 	ldbu	r3,-19(fp)
    9120:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    9124:	e0bff817 	ldw	r2,-32(fp)
    9128:	e0fffb83 	ldbu	r3,-18(fp)
    912c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    9130:	e0bff817 	ldw	r2,-32(fp)
    9134:	e0fffbc3 	ldbu	r3,-17(fp)
    9138:	10c00d45 	stb	r3,53(r2)
    913c:	e0bff517 	ldw	r2,-44(fp)
    9140:	e0bffa15 	stw	r2,-24(fp)
    9144:	e0bffa17 	ldw	r2,-24(fp)
    9148:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    914c:	d0a70243 	ldbu	r2,-25591(gp)
    9150:	10803fcc 	andi	r2,r2,255
    9154:	10800058 	cmpnei	r2,r2,1
    9158:	1000011e 	bne	r2,zero,9160 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    915c:	0004a4c0 	call	4a4c <OS_Sched>
    }
    return (OS_ERR_NONE);
    9160:	0005883a 	mov	r2,zero
}
    9164:	e037883a 	mov	sp,fp
    9168:	dfc00117 	ldw	ra,4(sp)
    916c:	df000017 	ldw	fp,0(sp)
    9170:	dec00204 	addi	sp,sp,8
    9174:	f800283a 	ret

00009178 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    9178:	deffee04 	addi	sp,sp,-72
    917c:	dfc01115 	stw	ra,68(sp)
    9180:	df001015 	stw	fp,64(sp)
    9184:	df001004 	addi	fp,sp,64
    9188:	e13ffc15 	stw	r4,-16(fp)
    918c:	e17ffd15 	stw	r5,-12(fp)
    9190:	e1bffe15 	stw	r6,-8(fp)
    9194:	3805883a 	mov	r2,r7
    9198:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    919c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    91a0:	e0bfff03 	ldbu	r2,-4(fp)
    91a4:	10800570 	cmpltui	r2,r2,21
    91a8:	1000021e 	bne	r2,zero,91b4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    91ac:	00800a84 	movi	r2,42
    91b0:	00005706 	br	9310 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    91b4:	0005303a 	rdctl	r2,status
    91b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    91bc:	e0fffb17 	ldw	r3,-20(fp)
    91c0:	00bfff84 	movi	r2,-2
    91c4:	1884703a 	and	r2,r3,r2
    91c8:	1001703a 	wrctl	status,r2
  
  return context;
    91cc:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    91d0:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    91d4:	d0a71003 	ldbu	r2,-25536(gp)
    91d8:	10803fcc 	andi	r2,r2,255
    91dc:	10000626 	beq	r2,zero,91f8 <OSTaskCreate+0x80>
    91e0:	e0bff317 	ldw	r2,-52(fp)
    91e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    91e8:	e0bff417 	ldw	r2,-48(fp)
    91ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    91f0:	00800f04 	movi	r2,60
    91f4:	00004606 	br	9310 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    91f8:	e0ffff03 	ldbu	r3,-4(fp)
    91fc:	00800074 	movhi	r2,1
    9200:	109ecc04 	addi	r2,r2,31536
    9204:	18c7883a 	add	r3,r3,r3
    9208:	18c7883a 	add	r3,r3,r3
    920c:	10c5883a 	add	r2,r2,r3
    9210:	10800017 	ldw	r2,0(r2)
    9214:	1000391e 	bne	r2,zero,92fc <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    9218:	e0ffff03 	ldbu	r3,-4(fp)
    921c:	00800074 	movhi	r2,1
    9220:	109ecc04 	addi	r2,r2,31536
    9224:	18c7883a 	add	r3,r3,r3
    9228:	18c7883a 	add	r3,r3,r3
    922c:	10c5883a 	add	r2,r2,r3
    9230:	00c00044 	movi	r3,1
    9234:	10c00015 	stw	r3,0(r2)
    9238:	e0bff317 	ldw	r2,-52(fp)
    923c:	e0bff515 	stw	r2,-44(fp)
    9240:	e0bff517 	ldw	r2,-44(fp)
    9244:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    9248:	000f883a 	mov	r7,zero
    924c:	e1bffe17 	ldw	r6,-8(fp)
    9250:	e17ffd17 	ldw	r5,-12(fp)
    9254:	e13ffc17 	ldw	r4,-16(fp)
    9258:	000c4240 	call	c424 <OSTaskStkInit>
    925c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    9260:	e0bfff03 	ldbu	r2,-4(fp)
    9264:	d8000215 	stw	zero,8(sp)
    9268:	d8000115 	stw	zero,4(sp)
    926c:	d8000015 	stw	zero,0(sp)
    9270:	000f883a 	mov	r7,zero
    9274:	000d883a 	mov	r6,zero
    9278:	e17ff717 	ldw	r5,-36(fp)
    927c:	1009883a 	mov	r4,r2
    9280:	0004e4c0 	call	4e4c <OS_TCBInit>
    9284:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    9288:	e0bff803 	ldbu	r2,-32(fp)
    928c:	1000061e 	bne	r2,zero,92a8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    9290:	d0a70243 	ldbu	r2,-25591(gp)
    9294:	10803fcc 	andi	r2,r2,255
    9298:	10800058 	cmpnei	r2,r2,1
    929c:	1000151e 	bne	r2,zero,92f4 <OSTaskCreate+0x17c>
                OS_Sched();
    92a0:	0004a4c0 	call	4a4c <OS_Sched>
    92a4:	00001306 	br	92f4 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    92a8:	0005303a 	rdctl	r2,status
    92ac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    92b0:	e0fffa17 	ldw	r3,-24(fp)
    92b4:	00bfff84 	movi	r2,-2
    92b8:	1884703a 	and	r2,r3,r2
    92bc:	1001703a 	wrctl	status,r2
  
  return context;
    92c0:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    92c4:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    92c8:	e0ffff03 	ldbu	r3,-4(fp)
    92cc:	00800074 	movhi	r2,1
    92d0:	109ecc04 	addi	r2,r2,31536
    92d4:	18c7883a 	add	r3,r3,r3
    92d8:	18c7883a 	add	r3,r3,r3
    92dc:	10c5883a 	add	r2,r2,r3
    92e0:	10000015 	stw	zero,0(r2)
    92e4:	e0bff317 	ldw	r2,-52(fp)
    92e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    92ec:	e0bff617 	ldw	r2,-40(fp)
    92f0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    92f4:	e0bff803 	ldbu	r2,-32(fp)
    92f8:	00000506 	br	9310 <OSTaskCreate+0x198>
    92fc:	e0bff317 	ldw	r2,-52(fp)
    9300:	e0bff915 	stw	r2,-28(fp)
    9304:	e0bff917 	ldw	r2,-28(fp)
    9308:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    930c:	00800a04 	movi	r2,40
}
    9310:	e037883a 	mov	sp,fp
    9314:	dfc00117 	ldw	ra,4(sp)
    9318:	df000017 	ldw	fp,0(sp)
    931c:	dec00204 	addi	sp,sp,8
    9320:	f800283a 	ret

00009324 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    9324:	deffec04 	addi	sp,sp,-80
    9328:	dfc01315 	stw	ra,76(sp)
    932c:	df001215 	stw	fp,72(sp)
    9330:	df001204 	addi	fp,sp,72
    9334:	e13ffa15 	stw	r4,-24(fp)
    9338:	e17ffb15 	stw	r5,-20(fp)
    933c:	e1bffc15 	stw	r6,-16(fp)
    9340:	3809883a 	mov	r4,r7
    9344:	e0c00217 	ldw	r3,8(fp)
    9348:	e0800617 	ldw	r2,24(fp)
    934c:	e13ffd05 	stb	r4,-12(fp)
    9350:	e0fffe0d 	sth	r3,-8(fp)
    9354:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    9358:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    935c:	e0bffd03 	ldbu	r2,-12(fp)
    9360:	10800570 	cmpltui	r2,r2,21
    9364:	1000021e 	bne	r2,zero,9370 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    9368:	00800a84 	movi	r2,42
    936c:	00006106 	br	94f4 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9370:	0005303a 	rdctl	r2,status
    9374:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9378:	e0fff917 	ldw	r3,-28(fp)
    937c:	00bfff84 	movi	r2,-2
    9380:	1884703a 	and	r2,r3,r2
    9384:	1001703a 	wrctl	status,r2
  
  return context;
    9388:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    938c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    9390:	d0a71003 	ldbu	r2,-25536(gp)
    9394:	10803fcc 	andi	r2,r2,255
    9398:	10000626 	beq	r2,zero,93b4 <OSTaskCreateExt+0x90>
    939c:	e0bff117 	ldw	r2,-60(fp)
    93a0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93a4:	e0bff217 	ldw	r2,-56(fp)
    93a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    93ac:	00800f04 	movi	r2,60
    93b0:	00005006 	br	94f4 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    93b4:	e0fffd03 	ldbu	r3,-12(fp)
    93b8:	00800074 	movhi	r2,1
    93bc:	109ecc04 	addi	r2,r2,31536
    93c0:	18c7883a 	add	r3,r3,r3
    93c4:	18c7883a 	add	r3,r3,r3
    93c8:	10c5883a 	add	r2,r2,r3
    93cc:	10800017 	ldw	r2,0(r2)
    93d0:	1000431e 	bne	r2,zero,94e0 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    93d4:	e0fffd03 	ldbu	r3,-12(fp)
    93d8:	00800074 	movhi	r2,1
    93dc:	109ecc04 	addi	r2,r2,31536
    93e0:	18c7883a 	add	r3,r3,r3
    93e4:	18c7883a 	add	r3,r3,r3
    93e8:	10c5883a 	add	r2,r2,r3
    93ec:	00c00044 	movi	r3,1
    93f0:	10c00015 	stw	r3,0(r2)
    93f4:	e0bff117 	ldw	r2,-60(fp)
    93f8:	e0bff315 	stw	r2,-52(fp)
    93fc:	e0bff317 	ldw	r2,-52(fp)
    9400:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    9404:	e0bfff0b 	ldhu	r2,-4(fp)
    9408:	100d883a 	mov	r6,r2
    940c:	e1400417 	ldw	r5,16(fp)
    9410:	e1000317 	ldw	r4,12(fp)
    9414:	000a3840 	call	a384 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    9418:	e0bfff0b 	ldhu	r2,-4(fp)
    941c:	100f883a 	mov	r7,r2
    9420:	e1bffc17 	ldw	r6,-16(fp)
    9424:	e17ffb17 	ldw	r5,-20(fp)
    9428:	e13ffa17 	ldw	r4,-24(fp)
    942c:	000c4240 	call	c424 <OSTaskStkInit>
    9430:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    9434:	e0fffd03 	ldbu	r3,-12(fp)
    9438:	e13ffe0b 	ldhu	r4,-8(fp)
    943c:	e0bfff0b 	ldhu	r2,-4(fp)
    9440:	d8800215 	stw	r2,8(sp)
    9444:	e0800517 	ldw	r2,20(fp)
    9448:	d8800115 	stw	r2,4(sp)
    944c:	e0800417 	ldw	r2,16(fp)
    9450:	d8800015 	stw	r2,0(sp)
    9454:	200f883a 	mov	r7,r4
    9458:	e1800317 	ldw	r6,12(fp)
    945c:	e17ff517 	ldw	r5,-44(fp)
    9460:	1809883a 	mov	r4,r3
    9464:	0004e4c0 	call	4e4c <OS_TCBInit>
    9468:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    946c:	e0bff603 	ldbu	r2,-40(fp)
    9470:	1000061e 	bne	r2,zero,948c <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    9474:	d0a70243 	ldbu	r2,-25591(gp)
    9478:	10803fcc 	andi	r2,r2,255
    947c:	10800058 	cmpnei	r2,r2,1
    9480:	1000151e 	bne	r2,zero,94d8 <OSTaskCreateExt+0x1b4>
                OS_Sched();
    9484:	0004a4c0 	call	4a4c <OS_Sched>
    9488:	00001306 	br	94d8 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    948c:	0005303a 	rdctl	r2,status
    9490:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9494:	e0fff817 	ldw	r3,-32(fp)
    9498:	00bfff84 	movi	r2,-2
    949c:	1884703a 	and	r2,r3,r2
    94a0:	1001703a 	wrctl	status,r2
  
  return context;
    94a4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    94a8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    94ac:	e0fffd03 	ldbu	r3,-12(fp)
    94b0:	00800074 	movhi	r2,1
    94b4:	109ecc04 	addi	r2,r2,31536
    94b8:	18c7883a 	add	r3,r3,r3
    94bc:	18c7883a 	add	r3,r3,r3
    94c0:	10c5883a 	add	r2,r2,r3
    94c4:	10000015 	stw	zero,0(r2)
    94c8:	e0bff117 	ldw	r2,-60(fp)
    94cc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    94d0:	e0bff417 	ldw	r2,-48(fp)
    94d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    94d8:	e0bff603 	ldbu	r2,-40(fp)
    94dc:	00000506 	br	94f4 <OSTaskCreateExt+0x1d0>
    94e0:	e0bff117 	ldw	r2,-60(fp)
    94e4:	e0bff715 	stw	r2,-36(fp)
    94e8:	e0bff717 	ldw	r2,-36(fp)
    94ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    94f0:	00800a04 	movi	r2,40
}
    94f4:	e037883a 	mov	sp,fp
    94f8:	dfc00117 	ldw	ra,4(sp)
    94fc:	df000017 	ldw	fp,0(sp)
    9500:	dec00204 	addi	sp,sp,8
    9504:	f800283a 	ret

00009508 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    9508:	defff404 	addi	sp,sp,-48
    950c:	dfc00b15 	stw	ra,44(sp)
    9510:	df000a15 	stw	fp,40(sp)
    9514:	df000a04 	addi	fp,sp,40
    9518:	2005883a 	mov	r2,r4
    951c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    9520:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    9524:	d0a71003 	ldbu	r2,-25536(gp)
    9528:	10803fcc 	andi	r2,r2,255
    952c:	10000226 	beq	r2,zero,9538 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    9530:	00801004 	movi	r2,64
    9534:	0000c006 	br	9838 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    9538:	e0bfff03 	ldbu	r2,-4(fp)
    953c:	10800518 	cmpnei	r2,r2,20
    9540:	1000021e 	bne	r2,zero,954c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    9544:	00800f84 	movi	r2,62
    9548:	0000bb06 	br	9838 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    954c:	e0bfff03 	ldbu	r2,-4(fp)
    9550:	10800530 	cmpltui	r2,r2,20
    9554:	1000051e 	bne	r2,zero,956c <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    9558:	e0bfff03 	ldbu	r2,-4(fp)
    955c:	10803fe0 	cmpeqi	r2,r2,255
    9560:	1000021e 	bne	r2,zero,956c <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    9564:	00800a84 	movi	r2,42
    9568:	0000b306 	br	9838 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    956c:	0005303a 	rdctl	r2,status
    9570:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9574:	e0fffe17 	ldw	r3,-8(fp)
    9578:	00bfff84 	movi	r2,-2
    957c:	1884703a 	and	r2,r3,r2
    9580:	1001703a 	wrctl	status,r2
  
  return context;
    9584:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    9588:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    958c:	e0bfff03 	ldbu	r2,-4(fp)
    9590:	10803fd8 	cmpnei	r2,r2,255
    9594:	1000031e 	bne	r2,zero,95a4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    9598:	d0a71117 	ldw	r2,-25532(gp)
    959c:	10800c83 	ldbu	r2,50(r2)
    95a0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    95a4:	e0ffff03 	ldbu	r3,-4(fp)
    95a8:	00800074 	movhi	r2,1
    95ac:	109ecc04 	addi	r2,r2,31536
    95b0:	18c7883a 	add	r3,r3,r3
    95b4:	18c7883a 	add	r3,r3,r3
    95b8:	10c5883a 	add	r2,r2,r3
    95bc:	10800017 	ldw	r2,0(r2)
    95c0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    95c4:	e0bff817 	ldw	r2,-32(fp)
    95c8:	1000061e 	bne	r2,zero,95e4 <OSTaskDel+0xdc>
    95cc:	e0bff617 	ldw	r2,-40(fp)
    95d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95d4:	e0bff717 	ldw	r2,-36(fp)
    95d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    95dc:	008010c4 	movi	r2,67
    95e0:	00009506 	br	9838 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    95e4:	e0bff817 	ldw	r2,-32(fp)
    95e8:	10800058 	cmpnei	r2,r2,1
    95ec:	1000061e 	bne	r2,zero,9608 <OSTaskDel+0x100>
    95f0:	e0bff617 	ldw	r2,-40(fp)
    95f4:	e0bff915 	stw	r2,-28(fp)
    95f8:	e0bff917 	ldw	r2,-28(fp)
    95fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    9600:	00800f44 	movi	r2,61
    9604:	00008c06 	br	9838 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    9608:	e0bff817 	ldw	r2,-32(fp)
    960c:	10800d03 	ldbu	r2,52(r2)
    9610:	10c03fcc 	andi	r3,r2,255
    9614:	e0bff817 	ldw	r2,-32(fp)
    9618:	10800d03 	ldbu	r2,52(r2)
    961c:	11003fcc 	andi	r4,r2,255
    9620:	d0a70e44 	addi	r2,gp,-25543
    9624:	2085883a 	add	r2,r4,r2
    9628:	10800003 	ldbu	r2,0(r2)
    962c:	1009883a 	mov	r4,r2
    9630:	e0bff817 	ldw	r2,-32(fp)
    9634:	10800d43 	ldbu	r2,53(r2)
    9638:	0084303a 	nor	r2,zero,r2
    963c:	2084703a 	and	r2,r4,r2
    9640:	1009883a 	mov	r4,r2
    9644:	d0a70e44 	addi	r2,gp,-25543
    9648:	1885883a 	add	r2,r3,r2
    964c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    9650:	e0bff817 	ldw	r2,-32(fp)
    9654:	10800d03 	ldbu	r2,52(r2)
    9658:	10c03fcc 	andi	r3,r2,255
    965c:	d0a70e44 	addi	r2,gp,-25543
    9660:	1885883a 	add	r2,r3,r2
    9664:	10800003 	ldbu	r2,0(r2)
    9668:	10803fcc 	andi	r2,r2,255
    966c:	1000071e 	bne	r2,zero,968c <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    9670:	e0bff817 	ldw	r2,-32(fp)
    9674:	10800d83 	ldbu	r2,54(r2)
    9678:	0084303a 	nor	r2,zero,r2
    967c:	1007883a 	mov	r3,r2
    9680:	d0a70e03 	ldbu	r2,-25544(gp)
    9684:	1884703a 	and	r2,r3,r2
    9688:	d0a70e05 	stb	r2,-25544(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    968c:	e0bff817 	ldw	r2,-32(fp)
    9690:	10800717 	ldw	r2,28(r2)
    9694:	10000526 	beq	r2,zero,96ac <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    9698:	e0bff817 	ldw	r2,-32(fp)
    969c:	10800717 	ldw	r2,28(r2)
    96a0:	100b883a 	mov	r5,r2
    96a4:	e13ff817 	ldw	r4,-32(fp)
    96a8:	00043f80 	call	43f8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    96ac:	e0bff817 	ldw	r2,-32(fp)
    96b0:	10800817 	ldw	r2,32(r2)
    96b4:	10000526 	beq	r2,zero,96cc <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    96b8:	e0bff817 	ldw	r2,-32(fp)
    96bc:	10800817 	ldw	r2,32(r2)
    96c0:	100b883a 	mov	r5,r2
    96c4:	e13ff817 	ldw	r4,-32(fp)
    96c8:	00044b00 	call	44b0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    96cc:	e0bff817 	ldw	r2,-32(fp)
    96d0:	10800a17 	ldw	r2,40(r2)
    96d4:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    96d8:	e0bffb17 	ldw	r2,-20(fp)
    96dc:	10000226 	beq	r2,zero,96e8 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    96e0:	e13ffb17 	ldw	r4,-20(fp)
    96e4:	00069200 	call	6920 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    96e8:	e0bff817 	ldw	r2,-32(fp)
    96ec:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    96f0:	e0bff817 	ldw	r2,-32(fp)
    96f4:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    96f8:	e0bff817 	ldw	r2,-32(fp)
    96fc:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    9700:	d0a70203 	ldbu	r2,-25592(gp)
    9704:	10803fcc 	andi	r2,r2,255
    9708:	10803fe0 	cmpeqi	r2,r2,255
    970c:	1000031e 	bne	r2,zero,971c <OSTaskDel+0x214>
        OSLockNesting++;
    9710:	d0a70203 	ldbu	r2,-25592(gp)
    9714:	10800044 	addi	r2,r2,1
    9718:	d0a70205 	stb	r2,-25592(gp)
    971c:	e0bff617 	ldw	r2,-40(fp)
    9720:	e0bffd15 	stw	r2,-12(fp)
    9724:	e0bffd17 	ldw	r2,-12(fp)
    9728:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    972c:	0003fe00 	call	3fe0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9730:	0005303a 	rdctl	r2,status
    9734:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9738:	e0fffa17 	ldw	r3,-24(fp)
    973c:	00bfff84 	movi	r2,-2
    9740:	1884703a 	and	r2,r3,r2
    9744:	1001703a 	wrctl	status,r2
  
  return context;
    9748:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    974c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    9750:	d0a70203 	ldbu	r2,-25592(gp)
    9754:	10803fcc 	andi	r2,r2,255
    9758:	10000326 	beq	r2,zero,9768 <OSTaskDel+0x260>
        OSLockNesting--;
    975c:	d0a70203 	ldbu	r2,-25592(gp)
    9760:	10bfffc4 	addi	r2,r2,-1
    9764:	d0a70205 	stb	r2,-25592(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    9768:	e13ff817 	ldw	r4,-32(fp)
    976c:	000c5a40 	call	c5a4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    9770:	d0a70a43 	ldbu	r2,-25559(gp)
    9774:	10bfffc4 	addi	r2,r2,-1
    9778:	d0a70a45 	stb	r2,-25559(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    977c:	e0ffff03 	ldbu	r3,-4(fp)
    9780:	00800074 	movhi	r2,1
    9784:	109ecc04 	addi	r2,r2,31536
    9788:	18c7883a 	add	r3,r3,r3
    978c:	18c7883a 	add	r3,r3,r3
    9790:	10c5883a 	add	r2,r2,r3
    9794:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    9798:	e0bff817 	ldw	r2,-32(fp)
    979c:	10800617 	ldw	r2,24(r2)
    97a0:	1000071e 	bne	r2,zero,97c0 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    97a4:	e0bff817 	ldw	r2,-32(fp)
    97a8:	10800517 	ldw	r2,20(r2)
    97ac:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    97b0:	e0bff817 	ldw	r2,-32(fp)
    97b4:	10800517 	ldw	r2,20(r2)
    97b8:	d0a70515 	stw	r2,-25580(gp)
    97bc:	00000a06 	br	97e8 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    97c0:	e0bff817 	ldw	r2,-32(fp)
    97c4:	10800617 	ldw	r2,24(r2)
    97c8:	e0fff817 	ldw	r3,-32(fp)
    97cc:	18c00517 	ldw	r3,20(r3)
    97d0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    97d4:	e0bff817 	ldw	r2,-32(fp)
    97d8:	10800517 	ldw	r2,20(r2)
    97dc:	e0fff817 	ldw	r3,-32(fp)
    97e0:	18c00617 	ldw	r3,24(r3)
    97e4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    97e8:	d0e70917 	ldw	r3,-25564(gp)
    97ec:	e0bff817 	ldw	r2,-32(fp)
    97f0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    97f4:	e0bff817 	ldw	r2,-32(fp)
    97f8:	d0a70915 	stw	r2,-25564(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    97fc:	e0bff817 	ldw	r2,-32(fp)
    9800:	00c00fc4 	movi	r3,63
    9804:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    9808:	e0bff817 	ldw	r2,-32(fp)
    980c:	10001345 	stb	zero,77(r2)
    9810:	e0bff617 	ldw	r2,-40(fp)
    9814:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9818:	e0bffc17 	ldw	r2,-16(fp)
    981c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    9820:	d0a70243 	ldbu	r2,-25591(gp)
    9824:	10803fcc 	andi	r2,r2,255
    9828:	10800058 	cmpnei	r2,r2,1
    982c:	1000011e 	bne	r2,zero,9834 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    9830:	0004a4c0 	call	4a4c <OS_Sched>
    }
    return (OS_ERR_NONE);
    9834:	0005883a 	mov	r2,zero
}
    9838:	e037883a 	mov	sp,fp
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	df000017 	ldw	fp,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    984c:	defff504 	addi	sp,sp,-44
    9850:	df000a15 	stw	fp,40(sp)
    9854:	df000a04 	addi	fp,sp,40
    9858:	2005883a 	mov	r2,r4
    985c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    9860:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    9864:	e0bfff03 	ldbu	r2,-4(fp)
    9868:	10800518 	cmpnei	r2,r2,20
    986c:	1000021e 	bne	r2,zero,9878 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    9870:	00800f84 	movi	r2,62
    9874:	00004506 	br	998c <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    9878:	e0bfff03 	ldbu	r2,-4(fp)
    987c:	10800530 	cmpltui	r2,r2,20
    9880:	1000051e 	bne	r2,zero,9898 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    9884:	e0bfff03 	ldbu	r2,-4(fp)
    9888:	10803fe0 	cmpeqi	r2,r2,255
    988c:	1000021e 	bne	r2,zero,9898 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    9890:	00800a84 	movi	r2,42
    9894:	00003d06 	br	998c <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    9898:	e0bfff03 	ldbu	r2,-4(fp)
    989c:	10803fd8 	cmpnei	r2,r2,255
    98a0:	1000111e 	bne	r2,zero,98e8 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98a4:	0005303a 	rdctl	r2,status
    98a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98ac:	e0fff917 	ldw	r3,-28(fp)
    98b0:	00bfff84 	movi	r2,-2
    98b4:	1884703a 	and	r2,r3,r2
    98b8:	1001703a 	wrctl	status,r2
  
  return context;
    98bc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    98c0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    98c4:	d0a71117 	ldw	r2,-25532(gp)
    98c8:	10800dc3 	ldbu	r2,55(r2)
    98cc:	e0bff805 	stb	r2,-32(fp)
    98d0:	e0bff617 	ldw	r2,-40(fp)
    98d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    98d8:	e0bffe17 	ldw	r2,-8(fp)
    98dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    98e0:	e0bff803 	ldbu	r2,-32(fp)
    98e4:	00002906 	br	998c <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    98e8:	0005303a 	rdctl	r2,status
    98ec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    98f0:	e0fff717 	ldw	r3,-36(fp)
    98f4:	00bfff84 	movi	r2,-2
    98f8:	1884703a 	and	r2,r3,r2
    98fc:	1001703a 	wrctl	status,r2
  
  return context;
    9900:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    9904:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    9908:	e0ffff03 	ldbu	r3,-4(fp)
    990c:	00800074 	movhi	r2,1
    9910:	109ecc04 	addi	r2,r2,31536
    9914:	18c7883a 	add	r3,r3,r3
    9918:	18c7883a 	add	r3,r3,r3
    991c:	10c5883a 	add	r2,r2,r3
    9920:	10800017 	ldw	r2,0(r2)
    9924:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    9928:	e0bffb17 	ldw	r2,-20(fp)
    992c:	1000061e 	bne	r2,zero,9948 <OSTaskDelReq+0xfc>
    9930:	e0bff617 	ldw	r2,-40(fp)
    9934:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9938:	e0bffa17 	ldw	r2,-24(fp)
    993c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    9940:	008010c4 	movi	r2,67
    9944:	00001106 	br	998c <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    9948:	e0bffb17 	ldw	r2,-20(fp)
    994c:	10800058 	cmpnei	r2,r2,1
    9950:	1000061e 	bne	r2,zero,996c <OSTaskDelReq+0x120>
    9954:	e0bff617 	ldw	r2,-40(fp)
    9958:	e0bffc15 	stw	r2,-16(fp)
    995c:	e0bffc17 	ldw	r2,-16(fp)
    9960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    9964:	00800f44 	movi	r2,61
    9968:	00000806 	br	998c <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    996c:	e0bffb17 	ldw	r2,-20(fp)
    9970:	00c00fc4 	movi	r3,63
    9974:	10c00dc5 	stb	r3,55(r2)
    9978:	e0bff617 	ldw	r2,-40(fp)
    997c:	e0bffd15 	stw	r2,-12(fp)
    9980:	e0bffd17 	ldw	r2,-12(fp)
    9984:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    9988:	0005883a 	mov	r2,zero
}
    998c:	e037883a 	mov	sp,fp
    9990:	df000017 	ldw	fp,0(sp)
    9994:	dec00104 	addi	sp,sp,4
    9998:	f800283a 	ret

0000999c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    999c:	defff404 	addi	sp,sp,-48
    99a0:	dfc00b15 	stw	ra,44(sp)
    99a4:	df000a15 	stw	fp,40(sp)
    99a8:	df000a04 	addi	fp,sp,40
    99ac:	2005883a 	mov	r2,r4
    99b0:	e17ffe15 	stw	r5,-8(fp)
    99b4:	e1bfff15 	stw	r6,-4(fp)
    99b8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    99bc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    99c0:	e0bfff17 	ldw	r2,-4(fp)
    99c4:	1000021e 	bne	r2,zero,99d0 <OSTaskNameGet+0x34>
        return (0);
    99c8:	0005883a 	mov	r2,zero
    99cc:	00005406 	br	9b20 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    99d0:	e0bffd03 	ldbu	r2,-12(fp)
    99d4:	10800570 	cmpltui	r2,r2,21
    99d8:	1000081e 	bne	r2,zero,99fc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    99dc:	e0bffd03 	ldbu	r2,-12(fp)
    99e0:	10803fe0 	cmpeqi	r2,r2,255
    99e4:	1000051e 	bne	r2,zero,99fc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    99e8:	e0bfff17 	ldw	r2,-4(fp)
    99ec:	00c00a84 	movi	r3,42
    99f0:	10c00005 	stb	r3,0(r2)
            return (0);
    99f4:	0005883a 	mov	r2,zero
    99f8:	00004906 	br	9b20 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    99fc:	e0bffe17 	ldw	r2,-8(fp)
    9a00:	1000051e 	bne	r2,zero,9a18 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    9a04:	e0bfff17 	ldw	r2,-4(fp)
    9a08:	00c00304 	movi	r3,12
    9a0c:	10c00005 	stb	r3,0(r2)
        return (0);
    9a10:	0005883a 	mov	r2,zero
    9a14:	00004206 	br	9b20 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    9a18:	d0a71003 	ldbu	r2,-25536(gp)
    9a1c:	10803fcc 	andi	r2,r2,255
    9a20:	10000526 	beq	r2,zero,9a38 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    9a24:	e0bfff17 	ldw	r2,-4(fp)
    9a28:	00c00444 	movi	r3,17
    9a2c:	10c00005 	stb	r3,0(r2)
        return (0);
    9a30:	0005883a 	mov	r2,zero
    9a34:	00003a06 	br	9b20 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a38:	0005303a 	rdctl	r2,status
    9a3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a40:	e0fffc17 	ldw	r3,-16(fp)
    9a44:	00bfff84 	movi	r2,-2
    9a48:	1884703a 	and	r2,r3,r2
    9a4c:	1001703a 	wrctl	status,r2
  
  return context;
    9a50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9a54:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    9a58:	e0bffd03 	ldbu	r2,-12(fp)
    9a5c:	10803fd8 	cmpnei	r2,r2,255
    9a60:	1000031e 	bne	r2,zero,9a70 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    9a64:	d0a71117 	ldw	r2,-25532(gp)
    9a68:	10800c83 	ldbu	r2,50(r2)
    9a6c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9a70:	e0fffd03 	ldbu	r3,-12(fp)
    9a74:	00800074 	movhi	r2,1
    9a78:	109ecc04 	addi	r2,r2,31536
    9a7c:	18c7883a 	add	r3,r3,r3
    9a80:	18c7883a 	add	r3,r3,r3
    9a84:	10c5883a 	add	r2,r2,r3
    9a88:	10800017 	ldw	r2,0(r2)
    9a8c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    9a90:	e0bff817 	ldw	r2,-32(fp)
    9a94:	1000091e 	bne	r2,zero,9abc <OSTaskNameGet+0x120>
    9a98:	e0bff617 	ldw	r2,-40(fp)
    9a9c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9aa0:	e0bff717 	ldw	r2,-36(fp)
    9aa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9aa8:	e0bfff17 	ldw	r2,-4(fp)
    9aac:	00c010c4 	movi	r3,67
    9ab0:	10c00005 	stb	r3,0(r2)
        return (0);
    9ab4:	0005883a 	mov	r2,zero
    9ab8:	00001906 	br	9b20 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    9abc:	e0bff817 	ldw	r2,-32(fp)
    9ac0:	10800058 	cmpnei	r2,r2,1
    9ac4:	1000091e 	bne	r2,zero,9aec <OSTaskNameGet+0x150>
    9ac8:	e0bff617 	ldw	r2,-40(fp)
    9acc:	e0bff915 	stw	r2,-28(fp)
    9ad0:	e0bff917 	ldw	r2,-28(fp)
    9ad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9ad8:	e0bfff17 	ldw	r2,-4(fp)
    9adc:	00c010c4 	movi	r3,67
    9ae0:	10c00005 	stb	r3,0(r2)
        return (0);
    9ae4:	0005883a 	mov	r2,zero
    9ae8:	00000d06 	br	9b20 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    9aec:	e0bff817 	ldw	r2,-32(fp)
    9af0:	10801304 	addi	r2,r2,76
    9af4:	100b883a 	mov	r5,r2
    9af8:	e13ffe17 	ldw	r4,-8(fp)
    9afc:	0004b900 	call	4b90 <OS_StrCopy>
    9b00:	e0bffb05 	stb	r2,-20(fp)
    9b04:	e0bff617 	ldw	r2,-40(fp)
    9b08:	e0bffa15 	stw	r2,-24(fp)
    9b0c:	e0bffa17 	ldw	r2,-24(fp)
    9b10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9b14:	e0bfff17 	ldw	r2,-4(fp)
    9b18:	10000005 	stb	zero,0(r2)
    return (len);
    9b1c:	e0bffb03 	ldbu	r2,-20(fp)
}
    9b20:	e037883a 	mov	sp,fp
    9b24:	dfc00117 	ldw	ra,4(sp)
    9b28:	df000017 	ldw	fp,0(sp)
    9b2c:	dec00204 	addi	sp,sp,8
    9b30:	f800283a 	ret

00009b34 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    9b34:	defff304 	addi	sp,sp,-52
    9b38:	dfc00c15 	stw	ra,48(sp)
    9b3c:	df000b15 	stw	fp,44(sp)
    9b40:	df000b04 	addi	fp,sp,44
    9b44:	2005883a 	mov	r2,r4
    9b48:	e17ffe15 	stw	r5,-8(fp)
    9b4c:	e1bfff15 	stw	r6,-4(fp)
    9b50:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9b54:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    9b58:	e0bfff17 	ldw	r2,-4(fp)
    9b5c:	10005c26 	beq	r2,zero,9cd0 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    9b60:	e0bffd03 	ldbu	r2,-12(fp)
    9b64:	10800570 	cmpltui	r2,r2,21
    9b68:	1000071e 	bne	r2,zero,9b88 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    9b6c:	e0bffd03 	ldbu	r2,-12(fp)
    9b70:	10803fe0 	cmpeqi	r2,r2,255
    9b74:	1000041e 	bne	r2,zero,9b88 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    9b78:	e0bfff17 	ldw	r2,-4(fp)
    9b7c:	00c00a84 	movi	r3,42
    9b80:	10c00005 	stb	r3,0(r2)
            return;
    9b84:	00005306 	br	9cd4 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    9b88:	e0bffe17 	ldw	r2,-8(fp)
    9b8c:	1000041e 	bne	r2,zero,9ba0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    9b90:	e0bfff17 	ldw	r2,-4(fp)
    9b94:	00c00304 	movi	r3,12
    9b98:	10c00005 	stb	r3,0(r2)
        return;
    9b9c:	00004d06 	br	9cd4 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    9ba0:	d0a71003 	ldbu	r2,-25536(gp)
    9ba4:	10803fcc 	andi	r2,r2,255
    9ba8:	10000426 	beq	r2,zero,9bbc <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    9bac:	e0bfff17 	ldw	r2,-4(fp)
    9bb0:	00c00484 	movi	r3,18
    9bb4:	10c00005 	stb	r3,0(r2)
        return;
    9bb8:	00004606 	br	9cd4 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9bbc:	0005303a 	rdctl	r2,status
    9bc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9bc4:	e0fffc17 	ldw	r3,-16(fp)
    9bc8:	00bfff84 	movi	r2,-2
    9bcc:	1884703a 	and	r2,r3,r2
    9bd0:	1001703a 	wrctl	status,r2
  
  return context;
    9bd4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    9bd8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    9bdc:	e0bffd03 	ldbu	r2,-12(fp)
    9be0:	10803fd8 	cmpnei	r2,r2,255
    9be4:	1000031e 	bne	r2,zero,9bf4 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    9be8:	d0a71117 	ldw	r2,-25532(gp)
    9bec:	10800c83 	ldbu	r2,50(r2)
    9bf0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9bf4:	e0fffd03 	ldbu	r3,-12(fp)
    9bf8:	00800074 	movhi	r2,1
    9bfc:	109ecc04 	addi	r2,r2,31536
    9c00:	18c7883a 	add	r3,r3,r3
    9c04:	18c7883a 	add	r3,r3,r3
    9c08:	10c5883a 	add	r2,r2,r3
    9c0c:	10800017 	ldw	r2,0(r2)
    9c10:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    9c14:	e0bff717 	ldw	r2,-36(fp)
    9c18:	1000081e 	bne	r2,zero,9c3c <OSTaskNameSet+0x108>
    9c1c:	e0bff517 	ldw	r2,-44(fp)
    9c20:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c24:	e0bff617 	ldw	r2,-40(fp)
    9c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9c2c:	e0bfff17 	ldw	r2,-4(fp)
    9c30:	00c010c4 	movi	r3,67
    9c34:	10c00005 	stb	r3,0(r2)
        return;
    9c38:	00002606 	br	9cd4 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    9c3c:	e0bff717 	ldw	r2,-36(fp)
    9c40:	10800058 	cmpnei	r2,r2,1
    9c44:	1000081e 	bne	r2,zero,9c68 <OSTaskNameSet+0x134>
    9c48:	e0bff517 	ldw	r2,-44(fp)
    9c4c:	e0bff815 	stw	r2,-32(fp)
    9c50:	e0bff817 	ldw	r2,-32(fp)
    9c54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    9c58:	e0bfff17 	ldw	r2,-4(fp)
    9c5c:	00c010c4 	movi	r3,67
    9c60:	10c00005 	stb	r3,0(r2)
        return;
    9c64:	00001b06 	br	9cd4 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    9c68:	e13ffe17 	ldw	r4,-8(fp)
    9c6c:	0004c040 	call	4c04 <OS_StrLen>
    9c70:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    9c74:	e0bffa03 	ldbu	r2,-24(fp)
    9c78:	10800830 	cmpltui	r2,r2,32
    9c7c:	1000081e 	bne	r2,zero,9ca0 <OSTaskNameSet+0x16c>
    9c80:	e0bff517 	ldw	r2,-44(fp)
    9c84:	e0bff915 	stw	r2,-28(fp)
    9c88:	e0bff917 	ldw	r2,-28(fp)
    9c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    9c90:	e0bfff17 	ldw	r2,-4(fp)
    9c94:	00c01044 	movi	r3,65
    9c98:	10c00005 	stb	r3,0(r2)
        return;
    9c9c:	00000d06 	br	9cd4 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    9ca0:	e0bff717 	ldw	r2,-36(fp)
    9ca4:	10801304 	addi	r2,r2,76
    9ca8:	e17ffe17 	ldw	r5,-8(fp)
    9cac:	1009883a 	mov	r4,r2
    9cb0:	0004b900 	call	4b90 <OS_StrCopy>
    9cb4:	e0bff517 	ldw	r2,-44(fp)
    9cb8:	e0bffb15 	stw	r2,-20(fp)
    9cbc:	e0bffb17 	ldw	r2,-20(fp)
    9cc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    9cc4:	e0bfff17 	ldw	r2,-4(fp)
    9cc8:	10000005 	stb	zero,0(r2)
    9ccc:	00000106 	br	9cd4 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    9cd0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    9cd4:	e037883a 	mov	sp,fp
    9cd8:	dfc00117 	ldw	ra,4(sp)
    9cdc:	df000017 	ldw	fp,0(sp)
    9ce0:	dec00204 	addi	sp,sp,8
    9ce4:	f800283a 	ret

00009ce8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    9ce8:	defff404 	addi	sp,sp,-48
    9cec:	dfc00b15 	stw	ra,44(sp)
    9cf0:	df000a15 	stw	fp,40(sp)
    9cf4:	df000a04 	addi	fp,sp,40
    9cf8:	2005883a 	mov	r2,r4
    9cfc:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    9d00:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    9d04:	e0bfff03 	ldbu	r2,-4(fp)
    9d08:	10800530 	cmpltui	r2,r2,20
    9d0c:	1000021e 	bne	r2,zero,9d18 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    9d10:	00800a84 	movi	r2,42
    9d14:	00006406 	br	9ea8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d18:	0005303a 	rdctl	r2,status
    9d1c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d20:	e0fffe17 	ldw	r3,-8(fp)
    9d24:	00bfff84 	movi	r2,-2
    9d28:	1884703a 	and	r2,r3,r2
    9d2c:	1001703a 	wrctl	status,r2
  
  return context;
    9d30:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    9d34:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    9d38:	e0ffff03 	ldbu	r3,-4(fp)
    9d3c:	00800074 	movhi	r2,1
    9d40:	109ecc04 	addi	r2,r2,31536
    9d44:	18c7883a 	add	r3,r3,r3
    9d48:	18c7883a 	add	r3,r3,r3
    9d4c:	10c5883a 	add	r2,r2,r3
    9d50:	10800017 	ldw	r2,0(r2)
    9d54:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    9d58:	e0bff817 	ldw	r2,-32(fp)
    9d5c:	1000061e 	bne	r2,zero,9d78 <OSTaskResume+0x90>
    9d60:	e0bff617 	ldw	r2,-40(fp)
    9d64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d68:	e0bff717 	ldw	r2,-36(fp)
    9d6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    9d70:	00801184 	movi	r2,70
    9d74:	00004c06 	br	9ea8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    9d78:	e0bff817 	ldw	r2,-32(fp)
    9d7c:	10800058 	cmpnei	r2,r2,1
    9d80:	1000061e 	bne	r2,zero,9d9c <OSTaskResume+0xb4>
    9d84:	e0bff617 	ldw	r2,-40(fp)
    9d88:	e0bff915 	stw	r2,-28(fp)
    9d8c:	e0bff917 	ldw	r2,-28(fp)
    9d90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9d94:	008010c4 	movi	r2,67
    9d98:	00004306 	br	9ea8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    9d9c:	e0bff817 	ldw	r2,-32(fp)
    9da0:	10800c03 	ldbu	r2,48(r2)
    9da4:	10803fcc 	andi	r2,r2,255
    9da8:	1080020c 	andi	r2,r2,8
    9dac:	10003926 	beq	r2,zero,9e94 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    9db0:	e0bff817 	ldw	r2,-32(fp)
    9db4:	10c00c03 	ldbu	r3,48(r2)
    9db8:	00bffdc4 	movi	r2,-9
    9dbc:	1884703a 	and	r2,r3,r2
    9dc0:	1007883a 	mov	r3,r2
    9dc4:	e0bff817 	ldw	r2,-32(fp)
    9dc8:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    9dcc:	e0bff817 	ldw	r2,-32(fp)
    9dd0:	10800c03 	ldbu	r2,48(r2)
    9dd4:	10803fcc 	andi	r2,r2,255
    9dd8:	1000281e 	bne	r2,zero,9e7c <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    9ddc:	e0bff817 	ldw	r2,-32(fp)
    9de0:	10800b8b 	ldhu	r2,46(r2)
    9de4:	10bfffcc 	andi	r2,r2,65535
    9de8:	10001f1e 	bne	r2,zero,9e68 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    9dec:	e0bff817 	ldw	r2,-32(fp)
    9df0:	10c00d83 	ldbu	r3,54(r2)
    9df4:	d0a70e03 	ldbu	r2,-25544(gp)
    9df8:	1884b03a 	or	r2,r3,r2
    9dfc:	d0a70e05 	stb	r2,-25544(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    9e00:	e0bff817 	ldw	r2,-32(fp)
    9e04:	10800d03 	ldbu	r2,52(r2)
    9e08:	10c03fcc 	andi	r3,r2,255
    9e0c:	e0bff817 	ldw	r2,-32(fp)
    9e10:	10800d03 	ldbu	r2,52(r2)
    9e14:	11003fcc 	andi	r4,r2,255
    9e18:	d0a70e44 	addi	r2,gp,-25543
    9e1c:	2085883a 	add	r2,r4,r2
    9e20:	11000003 	ldbu	r4,0(r2)
    9e24:	e0bff817 	ldw	r2,-32(fp)
    9e28:	10800d43 	ldbu	r2,53(r2)
    9e2c:	2084b03a 	or	r2,r4,r2
    9e30:	1009883a 	mov	r4,r2
    9e34:	d0a70e44 	addi	r2,gp,-25543
    9e38:	1885883a 	add	r2,r3,r2
    9e3c:	11000005 	stb	r4,0(r2)
    9e40:	e0bff617 	ldw	r2,-40(fp)
    9e44:	e0bffa15 	stw	r2,-24(fp)
    9e48:	e0bffa17 	ldw	r2,-24(fp)
    9e4c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    9e50:	d0a70243 	ldbu	r2,-25591(gp)
    9e54:	10803fcc 	andi	r2,r2,255
    9e58:	10800058 	cmpnei	r2,r2,1
    9e5c:	10000b1e 	bne	r2,zero,9e8c <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    9e60:	0004a4c0 	call	4a4c <OS_Sched>
    9e64:	00000906 	br	9e8c <OSTaskResume+0x1a4>
    9e68:	e0bff617 	ldw	r2,-40(fp)
    9e6c:	e0bffb15 	stw	r2,-20(fp)
    9e70:	e0bffb17 	ldw	r2,-20(fp)
    9e74:	1001703a 	wrctl	status,r2
    9e78:	00000406 	br	9e8c <OSTaskResume+0x1a4>
    9e7c:	e0bff617 	ldw	r2,-40(fp)
    9e80:	e0bffc15 	stw	r2,-16(fp)
    9e84:	e0bffc17 	ldw	r2,-16(fp)
    9e88:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    9e8c:	0005883a 	mov	r2,zero
    9e90:	00000506 	br	9ea8 <OSTaskResume+0x1c0>
    9e94:	e0bff617 	ldw	r2,-40(fp)
    9e98:	e0bffd15 	stw	r2,-12(fp)
    9e9c:	e0bffd17 	ldw	r2,-12(fp)
    9ea0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    9ea4:	00801104 	movi	r2,68
}
    9ea8:	e037883a 	mov	sp,fp
    9eac:	dfc00117 	ldw	ra,4(sp)
    9eb0:	df000017 	ldw	fp,0(sp)
    9eb4:	dec00204 	addi	sp,sp,8
    9eb8:	f800283a 	ret

00009ebc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    9ebc:	defff304 	addi	sp,sp,-52
    9ec0:	df000c15 	stw	fp,48(sp)
    9ec4:	df000c04 	addi	fp,sp,48
    9ec8:	2005883a 	mov	r2,r4
    9ecc:	e17fff15 	stw	r5,-4(fp)
    9ed0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    9ed4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    9ed8:	e0bffe03 	ldbu	r2,-8(fp)
    9edc:	10800570 	cmpltui	r2,r2,21
    9ee0:	1000051e 	bne	r2,zero,9ef8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    9ee4:	e0bffe03 	ldbu	r2,-8(fp)
    9ee8:	10803fe0 	cmpeqi	r2,r2,255
    9eec:	1000021e 	bne	r2,zero,9ef8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    9ef0:	00800a84 	movi	r2,42
    9ef4:	00005d06 	br	a06c <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    9ef8:	e0bfff17 	ldw	r2,-4(fp)
    9efc:	1000021e 	bne	r2,zero,9f08 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    9f00:	00800244 	movi	r2,9
    9f04:	00005906 	br	a06c <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    9f08:	e0bfff17 	ldw	r2,-4(fp)
    9f0c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    9f10:	e0bfff17 	ldw	r2,-4(fp)
    9f14:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9f18:	0005303a 	rdctl	r2,status
    9f1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9f20:	e0fffd17 	ldw	r3,-12(fp)
    9f24:	00bfff84 	movi	r2,-2
    9f28:	1884703a 	and	r2,r3,r2
    9f2c:	1001703a 	wrctl	status,r2
  
  return context;
    9f30:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    9f34:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    9f38:	e0bffe03 	ldbu	r2,-8(fp)
    9f3c:	10803fd8 	cmpnei	r2,r2,255
    9f40:	1000031e 	bne	r2,zero,9f50 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    9f44:	d0a71117 	ldw	r2,-25532(gp)
    9f48:	10800c83 	ldbu	r2,50(r2)
    9f4c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    9f50:	e0fffe03 	ldbu	r3,-8(fp)
    9f54:	00800074 	movhi	r2,1
    9f58:	109ecc04 	addi	r2,r2,31536
    9f5c:	18c7883a 	add	r3,r3,r3
    9f60:	18c7883a 	add	r3,r3,r3
    9f64:	10c5883a 	add	r2,r2,r3
    9f68:	10800017 	ldw	r2,0(r2)
    9f6c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    9f70:	e0bff817 	ldw	r2,-32(fp)
    9f74:	1000061e 	bne	r2,zero,9f90 <OSTaskStkChk+0xd4>
    9f78:	e0bff617 	ldw	r2,-40(fp)
    9f7c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9f80:	e0bff717 	ldw	r2,-36(fp)
    9f84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9f88:	008010c4 	movi	r2,67
    9f8c:	00003706 	br	a06c <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    9f90:	e0bff817 	ldw	r2,-32(fp)
    9f94:	10800058 	cmpnei	r2,r2,1
    9f98:	1000061e 	bne	r2,zero,9fb4 <OSTaskStkChk+0xf8>
    9f9c:	e0bff617 	ldw	r2,-40(fp)
    9fa0:	e0bff915 	stw	r2,-28(fp)
    9fa4:	e0bff917 	ldw	r2,-28(fp)
    9fa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    9fac:	008010c4 	movi	r2,67
    9fb0:	00002e06 	br	a06c <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    9fb4:	e0bff817 	ldw	r2,-32(fp)
    9fb8:	1080040b 	ldhu	r2,16(r2)
    9fbc:	10bfffcc 	andi	r2,r2,65535
    9fc0:	1080004c 	andi	r2,r2,1
    9fc4:	1000061e 	bne	r2,zero,9fe0 <OSTaskStkChk+0x124>
    9fc8:	e0bff617 	ldw	r2,-40(fp)
    9fcc:	e0bffa15 	stw	r2,-24(fp)
    9fd0:	e0bffa17 	ldw	r2,-24(fp)
    9fd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    9fd8:	00801144 	movi	r2,69
    9fdc:	00002306 	br	a06c <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    9fe0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    9fe4:	e0bff817 	ldw	r2,-32(fp)
    9fe8:	10800317 	ldw	r2,12(r2)
    9fec:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    9ff0:	e0bff817 	ldw	r2,-32(fp)
    9ff4:	10800217 	ldw	r2,8(r2)
    9ff8:	e0bff415 	stw	r2,-48(fp)
    9ffc:	e0bff617 	ldw	r2,-40(fp)
    a000:	e0bffb15 	stw	r2,-20(fp)
    a004:	e0bffb17 	ldw	r2,-20(fp)
    a008:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    a00c:	00000306 	br	a01c <OSTaskStkChk+0x160>
        nfree++;
    a010:	e0bff517 	ldw	r2,-44(fp)
    a014:	10800044 	addi	r2,r2,1
    a018:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    a01c:	e0bff417 	ldw	r2,-48(fp)
    a020:	10c00104 	addi	r3,r2,4
    a024:	e0fff415 	stw	r3,-48(fp)
    a028:	10800017 	ldw	r2,0(r2)
    a02c:	103ff826 	beq	r2,zero,a010 <__alt_data_end+0xffff1970>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    a030:	e0bff517 	ldw	r2,-44(fp)
    a034:	1085883a 	add	r2,r2,r2
    a038:	1085883a 	add	r2,r2,r2
    a03c:	1007883a 	mov	r3,r2
    a040:	e0bfff17 	ldw	r2,-4(fp)
    a044:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    a048:	e0fffc17 	ldw	r3,-16(fp)
    a04c:	e0bff517 	ldw	r2,-44(fp)
    a050:	1885c83a 	sub	r2,r3,r2
    a054:	1085883a 	add	r2,r2,r2
    a058:	1085883a 	add	r2,r2,r2
    a05c:	1007883a 	mov	r3,r2
    a060:	e0bfff17 	ldw	r2,-4(fp)
    a064:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    a068:	0005883a 	mov	r2,zero
}
    a06c:	e037883a 	mov	sp,fp
    a070:	df000017 	ldw	fp,0(sp)
    a074:	dec00104 	addi	sp,sp,4
    a078:	f800283a 	ret

0000a07c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    a07c:	defff504 	addi	sp,sp,-44
    a080:	dfc00a15 	stw	ra,40(sp)
    a084:	df000915 	stw	fp,36(sp)
    a088:	df000904 	addi	fp,sp,36
    a08c:	2005883a 	mov	r2,r4
    a090:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a094:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    a098:	e0bfff03 	ldbu	r2,-4(fp)
    a09c:	10800518 	cmpnei	r2,r2,20
    a0a0:	1000021e 	bne	r2,zero,a0ac <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    a0a4:	008011c4 	movi	r2,71
    a0a8:	00006806 	br	a24c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    a0ac:	e0bfff03 	ldbu	r2,-4(fp)
    a0b0:	10800530 	cmpltui	r2,r2,20
    a0b4:	1000051e 	bne	r2,zero,a0cc <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    a0b8:	e0bfff03 	ldbu	r2,-4(fp)
    a0bc:	10803fe0 	cmpeqi	r2,r2,255
    a0c0:	1000021e 	bne	r2,zero,a0cc <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    a0c4:	00800a84 	movi	r2,42
    a0c8:	00006006 	br	a24c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a0cc:	0005303a 	rdctl	r2,status
    a0d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a0d4:	e0fffe17 	ldw	r3,-8(fp)
    a0d8:	00bfff84 	movi	r2,-2
    a0dc:	1884703a 	and	r2,r3,r2
    a0e0:	1001703a 	wrctl	status,r2
  
  return context;
    a0e4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    a0e8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    a0ec:	e0bfff03 	ldbu	r2,-4(fp)
    a0f0:	10803fd8 	cmpnei	r2,r2,255
    a0f4:	1000061e 	bne	r2,zero,a110 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    a0f8:	d0a71117 	ldw	r2,-25532(gp)
    a0fc:	10800c83 	ldbu	r2,50(r2)
    a100:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    a104:	00800044 	movi	r2,1
    a108:	e0bff705 	stb	r2,-36(fp)
    a10c:	00000906 	br	a134 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    a110:	d0a71117 	ldw	r2,-25532(gp)
    a114:	10800c83 	ldbu	r2,50(r2)
    a118:	10c03fcc 	andi	r3,r2,255
    a11c:	e0bfff03 	ldbu	r2,-4(fp)
    a120:	1880031e 	bne	r3,r2,a130 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    a124:	00800044 	movi	r2,1
    a128:	e0bff705 	stb	r2,-36(fp)
    a12c:	00000106 	br	a134 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    a130:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a134:	e0ffff03 	ldbu	r3,-4(fp)
    a138:	00800074 	movhi	r2,1
    a13c:	109ecc04 	addi	r2,r2,31536
    a140:	18c7883a 	add	r3,r3,r3
    a144:	18c7883a 	add	r3,r3,r3
    a148:	10c5883a 	add	r2,r2,r3
    a14c:	10800017 	ldw	r2,0(r2)
    a150:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    a154:	e0bffa17 	ldw	r2,-24(fp)
    a158:	1000061e 	bne	r2,zero,a174 <OSTaskSuspend+0xf8>
    a15c:	e0bff817 	ldw	r2,-32(fp)
    a160:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a164:	e0bff917 	ldw	r2,-28(fp)
    a168:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    a16c:	00801204 	movi	r2,72
    a170:	00003606 	br	a24c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    a174:	e0bffa17 	ldw	r2,-24(fp)
    a178:	10800058 	cmpnei	r2,r2,1
    a17c:	1000061e 	bne	r2,zero,a198 <OSTaskSuspend+0x11c>
    a180:	e0bff817 	ldw	r2,-32(fp)
    a184:	e0bffb15 	stw	r2,-20(fp)
    a188:	e0bffb17 	ldw	r2,-20(fp)
    a18c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a190:	008010c4 	movi	r2,67
    a194:	00002d06 	br	a24c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    a198:	e0bffa17 	ldw	r2,-24(fp)
    a19c:	10800d03 	ldbu	r2,52(r2)
    a1a0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    a1a4:	e0fffd03 	ldbu	r3,-12(fp)
    a1a8:	e13ffd03 	ldbu	r4,-12(fp)
    a1ac:	d0a70e44 	addi	r2,gp,-25543
    a1b0:	2085883a 	add	r2,r4,r2
    a1b4:	10800003 	ldbu	r2,0(r2)
    a1b8:	1009883a 	mov	r4,r2
    a1bc:	e0bffa17 	ldw	r2,-24(fp)
    a1c0:	10800d43 	ldbu	r2,53(r2)
    a1c4:	0084303a 	nor	r2,zero,r2
    a1c8:	2084703a 	and	r2,r4,r2
    a1cc:	1009883a 	mov	r4,r2
    a1d0:	d0a70e44 	addi	r2,gp,-25543
    a1d4:	1885883a 	add	r2,r3,r2
    a1d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    a1dc:	e0fffd03 	ldbu	r3,-12(fp)
    a1e0:	d0a70e44 	addi	r2,gp,-25543
    a1e4:	1885883a 	add	r2,r3,r2
    a1e8:	10800003 	ldbu	r2,0(r2)
    a1ec:	10803fcc 	andi	r2,r2,255
    a1f0:	1000071e 	bne	r2,zero,a210 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    a1f4:	e0bffa17 	ldw	r2,-24(fp)
    a1f8:	10800d83 	ldbu	r2,54(r2)
    a1fc:	0084303a 	nor	r2,zero,r2
    a200:	1007883a 	mov	r3,r2
    a204:	d0a70e03 	ldbu	r2,-25544(gp)
    a208:	1884703a 	and	r2,r3,r2
    a20c:	d0a70e05 	stb	r2,-25544(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    a210:	e0bffa17 	ldw	r2,-24(fp)
    a214:	10800c03 	ldbu	r2,48(r2)
    a218:	10800214 	ori	r2,r2,8
    a21c:	1007883a 	mov	r3,r2
    a220:	e0bffa17 	ldw	r2,-24(fp)
    a224:	10c00c05 	stb	r3,48(r2)
    a228:	e0bff817 	ldw	r2,-32(fp)
    a22c:	e0bffc15 	stw	r2,-16(fp)
    a230:	e0bffc17 	ldw	r2,-16(fp)
    a234:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    a238:	e0bff703 	ldbu	r2,-36(fp)
    a23c:	10800058 	cmpnei	r2,r2,1
    a240:	1000011e 	bne	r2,zero,a248 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    a244:	0004a4c0 	call	4a4c <OS_Sched>
    }
    return (OS_ERR_NONE);
    a248:	0005883a 	mov	r2,zero
}
    a24c:	e037883a 	mov	sp,fp
    a250:	dfc00117 	ldw	ra,4(sp)
    a254:	df000017 	ldw	fp,0(sp)
    a258:	dec00204 	addi	sp,sp,8
    a25c:	f800283a 	ret

0000a260 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    a260:	defff604 	addi	sp,sp,-40
    a264:	dfc00915 	stw	ra,36(sp)
    a268:	df000815 	stw	fp,32(sp)
    a26c:	df000804 	addi	fp,sp,32
    a270:	2005883a 	mov	r2,r4
    a274:	e17fff15 	stw	r5,-4(fp)
    a278:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a27c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    a280:	e0bffe03 	ldbu	r2,-8(fp)
    a284:	10800570 	cmpltui	r2,r2,21
    a288:	1000051e 	bne	r2,zero,a2a0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    a28c:	e0bffe03 	ldbu	r2,-8(fp)
    a290:	10803fe0 	cmpeqi	r2,r2,255
    a294:	1000021e 	bne	r2,zero,a2a0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    a298:	00800a84 	movi	r2,42
    a29c:	00003406 	br	a370 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    a2a0:	e0bfff17 	ldw	r2,-4(fp)
    a2a4:	1000021e 	bne	r2,zero,a2b0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    a2a8:	00800244 	movi	r2,9
    a2ac:	00003006 	br	a370 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a2b0:	0005303a 	rdctl	r2,status
    a2b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a2b8:	e0fffd17 	ldw	r3,-12(fp)
    a2bc:	00bfff84 	movi	r2,-2
    a2c0:	1884703a 	and	r2,r3,r2
    a2c4:	1001703a 	wrctl	status,r2
  
  return context;
    a2c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    a2cc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    a2d0:	e0bffe03 	ldbu	r2,-8(fp)
    a2d4:	10803fd8 	cmpnei	r2,r2,255
    a2d8:	1000031e 	bne	r2,zero,a2e8 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    a2dc:	d0a71117 	ldw	r2,-25532(gp)
    a2e0:	10800c83 	ldbu	r2,50(r2)
    a2e4:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    a2e8:	e0fffe03 	ldbu	r3,-8(fp)
    a2ec:	00800074 	movhi	r2,1
    a2f0:	109ecc04 	addi	r2,r2,31536
    a2f4:	18c7883a 	add	r3,r3,r3
    a2f8:	18c7883a 	add	r3,r3,r3
    a2fc:	10c5883a 	add	r2,r2,r3
    a300:	10800017 	ldw	r2,0(r2)
    a304:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	1000061e 	bne	r2,zero,a328 <OSTaskQuery+0xc8>
    a310:	e0bff817 	ldw	r2,-32(fp)
    a314:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a318:	e0bff917 	ldw	r2,-28(fp)
    a31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    a320:	00800a44 	movi	r2,41
    a324:	00001206 	br	a370 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    a328:	e0bffa17 	ldw	r2,-24(fp)
    a32c:	10800058 	cmpnei	r2,r2,1
    a330:	1000061e 	bne	r2,zero,a34c <OSTaskQuery+0xec>
    a334:	e0bff817 	ldw	r2,-32(fp)
    a338:	e0bffb15 	stw	r2,-20(fp)
    a33c:	e0bffb17 	ldw	r2,-20(fp)
    a340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    a344:	008010c4 	movi	r2,67
    a348:	00000906 	br	a370 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    a34c:	01801b04 	movi	r6,108
    a350:	e17ffa17 	ldw	r5,-24(fp)
    a354:	e13fff17 	ldw	r4,-4(fp)
    a358:	00049e40 	call	49e4 <OS_MemCopy>
    a35c:	e0bff817 	ldw	r2,-32(fp)
    a360:	e0bffc15 	stw	r2,-16(fp)
    a364:	e0bffc17 	ldw	r2,-16(fp)
    a368:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    a36c:	0005883a 	mov	r2,zero
}
    a370:	e037883a 	mov	sp,fp
    a374:	dfc00117 	ldw	ra,4(sp)
    a378:	df000017 	ldw	fp,0(sp)
    a37c:	dec00204 	addi	sp,sp,8
    a380:	f800283a 	ret

0000a384 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    a384:	defffc04 	addi	sp,sp,-16
    a388:	df000315 	stw	fp,12(sp)
    a38c:	df000304 	addi	fp,sp,12
    a390:	e13ffd15 	stw	r4,-12(fp)
    a394:	e17ffe15 	stw	r5,-8(fp)
    a398:	3005883a 	mov	r2,r6
    a39c:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    a3a0:	e0bfff0b 	ldhu	r2,-4(fp)
    a3a4:	1080004c 	andi	r2,r2,1
    a3a8:	10000d26 	beq	r2,zero,a3e0 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    a3ac:	e0bfff0b 	ldhu	r2,-4(fp)
    a3b0:	1080008c 	andi	r2,r2,2
    a3b4:	10000a26 	beq	r2,zero,a3e0 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    a3b8:	00000706 	br	a3d8 <OS_TaskStkClr+0x54>
                size--;
    a3bc:	e0bffe17 	ldw	r2,-8(fp)
    a3c0:	10bfffc4 	addi	r2,r2,-1
    a3c4:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    a3c8:	e0bffd17 	ldw	r2,-12(fp)
    a3cc:	10c00104 	addi	r3,r2,4
    a3d0:	e0fffd15 	stw	r3,-12(fp)
    a3d4:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    a3d8:	e0bffe17 	ldw	r2,-8(fp)
    a3dc:	103ff71e 	bne	r2,zero,a3bc <__alt_data_end+0xffff1d1c>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    a3e0:	0001883a 	nop
    a3e4:	e037883a 	mov	sp,fp
    a3e8:	df000017 	ldw	fp,0(sp)
    a3ec:	dec00104 	addi	sp,sp,4
    a3f0:	f800283a 	ret

0000a3f4 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    a3f4:	defff904 	addi	sp,sp,-28
    a3f8:	dfc00615 	stw	ra,24(sp)
    a3fc:	df000515 	stw	fp,20(sp)
    a400:	df000504 	addi	fp,sp,20
    a404:	2005883a 	mov	r2,r4
    a408:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a40c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    a410:	d0a71003 	ldbu	r2,-25536(gp)
    a414:	10803fcc 	andi	r2,r2,255
    a418:	1000311e 	bne	r2,zero,a4e0 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    a41c:	e0bfff0b 	ldhu	r2,-4(fp)
    a420:	10003026 	beq	r2,zero,a4e4 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a424:	0005303a 	rdctl	r2,status
    a428:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a42c:	e0fffe17 	ldw	r3,-8(fp)
    a430:	00bfff84 	movi	r2,-2
    a434:	1884703a 	and	r2,r3,r2
    a438:	1001703a 	wrctl	status,r2
  
  return context;
    a43c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    a440:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    a444:	d0a71117 	ldw	r2,-25532(gp)
    a448:	10800d03 	ldbu	r2,52(r2)
    a44c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    a450:	e0fffd03 	ldbu	r3,-12(fp)
    a454:	e13ffd03 	ldbu	r4,-12(fp)
    a458:	d0a70e44 	addi	r2,gp,-25543
    a45c:	2085883a 	add	r2,r4,r2
    a460:	10800003 	ldbu	r2,0(r2)
    a464:	1009883a 	mov	r4,r2
    a468:	d0a71117 	ldw	r2,-25532(gp)
    a46c:	10800d43 	ldbu	r2,53(r2)
    a470:	0084303a 	nor	r2,zero,r2
    a474:	2084703a 	and	r2,r4,r2
    a478:	1009883a 	mov	r4,r2
    a47c:	d0a70e44 	addi	r2,gp,-25543
    a480:	1885883a 	add	r2,r3,r2
    a484:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    a488:	e0fffd03 	ldbu	r3,-12(fp)
    a48c:	d0a70e44 	addi	r2,gp,-25543
    a490:	1885883a 	add	r2,r3,r2
    a494:	10800003 	ldbu	r2,0(r2)
    a498:	10803fcc 	andi	r2,r2,255
    a49c:	1000071e 	bne	r2,zero,a4bc <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    a4a0:	d0a71117 	ldw	r2,-25532(gp)
    a4a4:	10800d83 	ldbu	r2,54(r2)
    a4a8:	0084303a 	nor	r2,zero,r2
    a4ac:	1007883a 	mov	r3,r2
    a4b0:	d0a70e03 	ldbu	r2,-25544(gp)
    a4b4:	1884703a 	and	r2,r3,r2
    a4b8:	d0a70e05 	stb	r2,-25544(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    a4bc:	d0a71117 	ldw	r2,-25532(gp)
    a4c0:	e0ffff0b 	ldhu	r3,-4(fp)
    a4c4:	10c00b8d 	sth	r3,46(r2)
    a4c8:	e0bffb17 	ldw	r2,-20(fp)
    a4cc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a4d0:	e0bffc17 	ldw	r2,-16(fp)
    a4d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    a4d8:	0004a4c0 	call	4a4c <OS_Sched>
    a4dc:	00000106 	br	a4e4 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    a4e0:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    a4e4:	e037883a 	mov	sp,fp
    a4e8:	dfc00117 	ldw	ra,4(sp)
    a4ec:	df000017 	ldw	fp,0(sp)
    a4f0:	dec00204 	addi	sp,sp,8
    a4f4:	f800283a 	ret

0000a4f8 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    a4f8:	defff704 	addi	sp,sp,-36
    a4fc:	dfc00815 	stw	ra,32(sp)
    a500:	df000715 	stw	fp,28(sp)
    a504:	dc000615 	stw	r16,24(sp)
    a508:	df000704 	addi	fp,sp,28
    a50c:	2011883a 	mov	r8,r4
    a510:	2809883a 	mov	r4,r5
    a514:	3007883a 	mov	r3,r6
    a518:	3805883a 	mov	r2,r7
    a51c:	e23ffb05 	stb	r8,-20(fp)
    a520:	e13ffc05 	stb	r4,-16(fp)
    a524:	e0fffd05 	stb	r3,-12(fp)
    a528:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    a52c:	d0a71003 	ldbu	r2,-25536(gp)
    a530:	10803fcc 	andi	r2,r2,255
    a534:	10000226 	beq	r2,zero,a540 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
    a538:	00801544 	movi	r2,85
    a53c:	00004706 	br	a65c <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    a540:	e0bffb03 	ldbu	r2,-20(fp)
    a544:	1000081e 	bne	r2,zero,a568 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
    a548:	e0bffc03 	ldbu	r2,-16(fp)
    a54c:	1000061e 	bne	r2,zero,a568 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
    a550:	e0bffd03 	ldbu	r2,-12(fp)
    a554:	1000041e 	bne	r2,zero,a568 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
    a558:	e0bffe0b 	ldhu	r2,-8(fp)
    a55c:	1000021e 	bne	r2,zero,a568 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
    a560:	00801504 	movi	r2,84
    a564:	00003d06 	br	a65c <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
    a568:	e0bffc03 	ldbu	r2,-16(fp)
    a56c:	10800f30 	cmpltui	r2,r2,60
    a570:	1000021e 	bne	r2,zero,a57c <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    a574:	00801444 	movi	r2,81
    a578:	00003806 	br	a65c <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
    a57c:	e0bffd03 	ldbu	r2,-12(fp)
    a580:	10800f30 	cmpltui	r2,r2,60
    a584:	1000021e 	bne	r2,zero,a590 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
    a588:	00801484 	movi	r2,82
    a58c:	00003306 	br	a65c <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
    a590:	e0bffe0b 	ldhu	r2,-8(fp)
    a594:	1080fa30 	cmpltui	r2,r2,1000
    a598:	1000021e 	bne	r2,zero,a5a4 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
    a59c:	008014c4 	movi	r2,83
    a5a0:	00002e06 	br	a65c <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    a5a4:	e0bffb03 	ldbu	r2,-20(fp)
    a5a8:	01438404 	movi	r5,3600
    a5ac:	1009883a 	mov	r4,r2
    a5b0:	00024480 	call	2448 <__mulsi3>
    a5b4:	1021883a 	mov	r16,r2
    a5b8:	e0bffc03 	ldbu	r2,-16(fp)
    a5bc:	01400f04 	movi	r5,60
    a5c0:	1009883a 	mov	r4,r2
    a5c4:	00024480 	call	2448 <__mulsi3>
    a5c8:	8087883a 	add	r3,r16,r2
    a5cc:	e0bffd03 	ldbu	r2,-12(fp)
    a5d0:	1885883a 	add	r2,r3,r2
    a5d4:	0140fa04 	movi	r5,1000
    a5d8:	1009883a 	mov	r4,r2
    a5dc:	00024480 	call	2448 <__mulsi3>
    a5e0:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    a5e4:	e0bffe0b 	ldhu	r2,-8(fp)
    a5e8:	0140fa04 	movi	r5,1000
    a5ec:	1009883a 	mov	r4,r2
    a5f0:	00024480 	call	2448 <__mulsi3>
    a5f4:	0140fa04 	movi	r5,1000
    a5f8:	1009883a 	mov	r4,r2
    a5fc:	000d00c0 	call	d00c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    a600:	8085883a 	add	r2,r16,r2
    a604:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    a608:	e0bffa17 	ldw	r2,-24(fp)
    a60c:	1004d43a 	srli	r2,r2,16
    a610:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    a614:	e0bffa17 	ldw	r2,-24(fp)
    a618:	10bfffcc 	andi	r2,r2,65535
    a61c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    a620:	e0bffa17 	ldw	r2,-24(fp)
    a624:	10bfffcc 	andi	r2,r2,65535
    a628:	1009883a 	mov	r4,r2
    a62c:	000a3f40 	call	a3f4 <OSTimeDly>
    while (loops > 0) {
    a630:	00000706 	br	a650 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
    a634:	01200014 	movui	r4,32768
    a638:	000a3f40 	call	a3f4 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    a63c:	01200014 	movui	r4,32768
    a640:	000a3f40 	call	a3f4 <OSTimeDly>
        loops--;
    a644:	e0bff90b 	ldhu	r2,-28(fp)
    a648:	10bfffc4 	addi	r2,r2,-1
    a64c:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    a650:	e0bff90b 	ldhu	r2,-28(fp)
    a654:	103ff71e 	bne	r2,zero,a634 <__alt_data_end+0xffff1f94>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    a658:	0005883a 	mov	r2,zero
}
    a65c:	e6ffff04 	addi	sp,fp,-4
    a660:	dfc00217 	ldw	ra,8(sp)
    a664:	df000117 	ldw	fp,4(sp)
    a668:	dc000017 	ldw	r16,0(sp)
    a66c:	dec00304 	addi	sp,sp,12
    a670:	f800283a 	ret

0000a674 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    a674:	defff504 	addi	sp,sp,-44
    a678:	dfc00a15 	stw	ra,40(sp)
    a67c:	df000915 	stw	fp,36(sp)
    a680:	df000904 	addi	fp,sp,36
    a684:	2005883a 	mov	r2,r4
    a688:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    a68c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    a690:	e0bfff03 	ldbu	r2,-4(fp)
    a694:	10800530 	cmpltui	r2,r2,20
    a698:	1000021e 	bne	r2,zero,a6a4 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    a69c:	00800a84 	movi	r2,42
    a6a0:	00006406 	br	a834 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a6a4:	0005303a 	rdctl	r2,status
    a6a8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a6ac:	e0fffe17 	ldw	r3,-8(fp)
    a6b0:	00bfff84 	movi	r2,-2
    a6b4:	1884703a 	and	r2,r3,r2
    a6b8:	1001703a 	wrctl	status,r2
  
  return context;
    a6bc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    a6c0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    a6c4:	e0ffff03 	ldbu	r3,-4(fp)
    a6c8:	00800074 	movhi	r2,1
    a6cc:	109ecc04 	addi	r2,r2,31536
    a6d0:	18c7883a 	add	r3,r3,r3
    a6d4:	18c7883a 	add	r3,r3,r3
    a6d8:	10c5883a 	add	r2,r2,r3
    a6dc:	10800017 	ldw	r2,0(r2)
    a6e0:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    a6e4:	e0bff917 	ldw	r2,-28(fp)
    a6e8:	1000061e 	bne	r2,zero,a704 <OSTimeDlyResume+0x90>
    a6ec:	e0bff717 	ldw	r2,-36(fp)
    a6f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6f4:	e0bff817 	ldw	r2,-32(fp)
    a6f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    a6fc:	008010c4 	movi	r2,67
    a700:	00004c06 	br	a834 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    a704:	e0bff917 	ldw	r2,-28(fp)
    a708:	10800058 	cmpnei	r2,r2,1
    a70c:	1000061e 	bne	r2,zero,a728 <OSTimeDlyResume+0xb4>
    a710:	e0bff717 	ldw	r2,-36(fp)
    a714:	e0bffa15 	stw	r2,-24(fp)
    a718:	e0bffa17 	ldw	r2,-24(fp)
    a71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    a720:	008010c4 	movi	r2,67
    a724:	00004306 	br	a834 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    a728:	e0bff917 	ldw	r2,-28(fp)
    a72c:	10800b8b 	ldhu	r2,46(r2)
    a730:	10bfffcc 	andi	r2,r2,65535
    a734:	1000061e 	bne	r2,zero,a750 <OSTimeDlyResume+0xdc>
    a738:	e0bff717 	ldw	r2,-36(fp)
    a73c:	e0bffb15 	stw	r2,-20(fp)
    a740:	e0bffb17 	ldw	r2,-20(fp)
    a744:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    a748:	00801404 	movi	r2,80
    a74c:	00003906 	br	a834 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    a750:	e0bff917 	ldw	r2,-28(fp)
    a754:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    a758:	e0bff917 	ldw	r2,-28(fp)
    a75c:	10800c03 	ldbu	r2,48(r2)
    a760:	10803fcc 	andi	r2,r2,255
    a764:	10800dcc 	andi	r2,r2,55
    a768:	10000b26 	beq	r2,zero,a798 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    a76c:	e0bff917 	ldw	r2,-28(fp)
    a770:	10c00c03 	ldbu	r3,48(r2)
    a774:	00bff204 	movi	r2,-56
    a778:	1884703a 	and	r2,r3,r2
    a77c:	1007883a 	mov	r3,r2
    a780:	e0bff917 	ldw	r2,-28(fp)
    a784:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    a788:	e0bff917 	ldw	r2,-28(fp)
    a78c:	00c00044 	movi	r3,1
    a790:	10c00c45 	stb	r3,49(r2)
    a794:	00000206 	br	a7a0 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    a798:	e0bff917 	ldw	r2,-28(fp)
    a79c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    a7a0:	e0bff917 	ldw	r2,-28(fp)
    a7a4:	10800c03 	ldbu	r2,48(r2)
    a7a8:	10803fcc 	andi	r2,r2,255
    a7ac:	1080020c 	andi	r2,r2,8
    a7b0:	10001b1e 	bne	r2,zero,a820 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    a7b4:	e0bff917 	ldw	r2,-28(fp)
    a7b8:	10c00d83 	ldbu	r3,54(r2)
    a7bc:	d0a70e03 	ldbu	r2,-25544(gp)
    a7c0:	1884b03a 	or	r2,r3,r2
    a7c4:	d0a70e05 	stb	r2,-25544(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    a7c8:	e0bff917 	ldw	r2,-28(fp)
    a7cc:	10800d03 	ldbu	r2,52(r2)
    a7d0:	10c03fcc 	andi	r3,r2,255
    a7d4:	e0bff917 	ldw	r2,-28(fp)
    a7d8:	10800d03 	ldbu	r2,52(r2)
    a7dc:	11003fcc 	andi	r4,r2,255
    a7e0:	d0a70e44 	addi	r2,gp,-25543
    a7e4:	2085883a 	add	r2,r4,r2
    a7e8:	11000003 	ldbu	r4,0(r2)
    a7ec:	e0bff917 	ldw	r2,-28(fp)
    a7f0:	10800d43 	ldbu	r2,53(r2)
    a7f4:	2084b03a 	or	r2,r4,r2
    a7f8:	1009883a 	mov	r4,r2
    a7fc:	d0a70e44 	addi	r2,gp,-25543
    a800:	1885883a 	add	r2,r3,r2
    a804:	11000005 	stb	r4,0(r2)
    a808:	e0bff717 	ldw	r2,-36(fp)
    a80c:	e0bffc15 	stw	r2,-16(fp)
    a810:	e0bffc17 	ldw	r2,-16(fp)
    a814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    a818:	0004a4c0 	call	4a4c <OS_Sched>
    a81c:	00000406 	br	a830 <OSTimeDlyResume+0x1bc>
    a820:	e0bff717 	ldw	r2,-36(fp)
    a824:	e0bffd15 	stw	r2,-12(fp)
    a828:	e0bffd17 	ldw	r2,-12(fp)
    a82c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    a830:	0005883a 	mov	r2,zero
}
    a834:	e037883a 	mov	sp,fp
    a838:	dfc00117 	ldw	ra,4(sp)
    a83c:	df000017 	ldw	fp,0(sp)
    a840:	dec00204 	addi	sp,sp,8
    a844:	f800283a 	ret

0000a848 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    a848:	defffb04 	addi	sp,sp,-20
    a84c:	df000415 	stw	fp,16(sp)
    a850:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a854:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a858:	0005303a 	rdctl	r2,status
    a85c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a860:	e0fffe17 	ldw	r3,-8(fp)
    a864:	00bfff84 	movi	r2,-2
    a868:	1884703a 	and	r2,r3,r2
    a86c:	1001703a 	wrctl	status,r2
  
  return context;
    a870:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    a874:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    a878:	d0a71217 	ldw	r2,-25528(gp)
    a87c:	e0bffd15 	stw	r2,-12(fp)
    a880:	e0bffc17 	ldw	r2,-16(fp)
    a884:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a888:	e0bfff17 	ldw	r2,-4(fp)
    a88c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    a890:	e0bffd17 	ldw	r2,-12(fp)
}
    a894:	e037883a 	mov	sp,fp
    a898:	df000017 	ldw	fp,0(sp)
    a89c:	dec00104 	addi	sp,sp,4
    a8a0:	f800283a 	ret

0000a8a4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    a8a4:	defffb04 	addi	sp,sp,-20
    a8a8:	df000415 	stw	fp,16(sp)
    a8ac:	df000404 	addi	fp,sp,16
    a8b0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    a8b4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a8b8:	0005303a 	rdctl	r2,status
    a8bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a8c0:	e0fffd17 	ldw	r3,-12(fp)
    a8c4:	00bfff84 	movi	r2,-2
    a8c8:	1884703a 	and	r2,r3,r2
    a8cc:	1001703a 	wrctl	status,r2
  
  return context;
    a8d0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    a8d4:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    a8d8:	e0bfff17 	ldw	r2,-4(fp)
    a8dc:	d0a71215 	stw	r2,-25528(gp)
    a8e0:	e0bffc17 	ldw	r2,-16(fp)
    a8e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a8e8:	e0bffe17 	ldw	r2,-8(fp)
    a8ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    a8f0:	0001883a 	nop
    a8f4:	e037883a 	mov	sp,fp
    a8f8:	df000017 	ldw	fp,0(sp)
    a8fc:	dec00104 	addi	sp,sp,4
    a900:	f800283a 	ret

0000a904 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a904:	defffd04 	addi	sp,sp,-12
    a908:	dfc00215 	stw	ra,8(sp)
    a90c:	df000115 	stw	fp,4(sp)
    a910:	df000104 	addi	fp,sp,4
    a914:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a918:	d1600604 	addi	r5,gp,-32744
    a91c:	e13fff17 	ldw	r4,-4(fp)
    a920:	000b9840 	call	b984 <alt_dev_llist_insert>
}
    a924:	e037883a 	mov	sp,fp
    a928:	dfc00117 	ldw	ra,4(sp)
    a92c:	df000017 	ldw	fp,0(sp)
    a930:	dec00204 	addi	sp,sp,8
    a934:	f800283a 	ret

0000a938 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a938:	defffd04 	addi	sp,sp,-12
    a93c:	dfc00215 	stw	ra,8(sp)
    a940:	df000115 	stw	fp,4(sp)
    a944:	df000104 	addi	fp,sp,4
    a948:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    a94c:	000c3300 	call	c330 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a950:	00800044 	movi	r2,1
    a954:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a958:	0001883a 	nop
    a95c:	e037883a 	mov	sp,fp
    a960:	dfc00117 	ldw	ra,4(sp)
    a964:	df000017 	ldw	fp,0(sp)
    a968:	dec00204 	addi	sp,sp,8
    a96c:	f800283a 	ret

0000a970 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a970:	defffe04 	addi	sp,sp,-8
    a974:	dfc00115 	stw	ra,4(sp)
    a978:	df000015 	stw	fp,0(sp)
    a97c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    a980:	01c0fa04 	movi	r7,1000
    a984:	01800284 	movi	r6,10
    a988:	000b883a 	mov	r5,zero
    a98c:	010000b4 	movhi	r4,2
    a990:	21080804 	addi	r4,r4,8224
    a994:	000b7800 	call	b780 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a998:	01800204 	movi	r6,8
    a99c:	000b883a 	mov	r5,zero
    a9a0:	01000074 	movhi	r4,1
    a9a4:	21371804 	addi	r4,r4,-9120
    a9a8:	000ab400 	call	ab40 <altera_avalon_jtag_uart_init>
    a9ac:	01000074 	movhi	r4,1
    a9b0:	21370e04 	addi	r4,r4,-9160
    a9b4:	000a9040 	call	a904 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
    a9b8:	01000074 	movhi	r4,1
    a9bc:	213b2904 	addi	r4,r4,-4956
    a9c0:	000a9040 	call	a904 <alt_dev_reg>
}
    a9c4:	0001883a 	nop
    a9c8:	e037883a 	mov	sp,fp
    a9cc:	dfc00117 	ldw	ra,4(sp)
    a9d0:	df000017 	ldw	fp,0(sp)
    a9d4:	dec00204 	addi	sp,sp,8
    a9d8:	f800283a 	ret

0000a9dc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a9dc:	defffa04 	addi	sp,sp,-24
    a9e0:	dfc00515 	stw	ra,20(sp)
    a9e4:	df000415 	stw	fp,16(sp)
    a9e8:	df000404 	addi	fp,sp,16
    a9ec:	e13ffd15 	stw	r4,-12(fp)
    a9f0:	e17ffe15 	stw	r5,-8(fp)
    a9f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9f8:	e0bffd17 	ldw	r2,-12(fp)
    a9fc:	10800017 	ldw	r2,0(r2)
    aa00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    aa04:	e0bffc17 	ldw	r2,-16(fp)
    aa08:	10c00a04 	addi	r3,r2,40
    aa0c:	e0bffd17 	ldw	r2,-12(fp)
    aa10:	10800217 	ldw	r2,8(r2)
    aa14:	100f883a 	mov	r7,r2
    aa18:	e1bfff17 	ldw	r6,-4(fp)
    aa1c:	e17ffe17 	ldw	r5,-8(fp)
    aa20:	1809883a 	mov	r4,r3
    aa24:	000b1880 	call	b188 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    aa28:	e037883a 	mov	sp,fp
    aa2c:	dfc00117 	ldw	ra,4(sp)
    aa30:	df000017 	ldw	fp,0(sp)
    aa34:	dec00204 	addi	sp,sp,8
    aa38:	f800283a 	ret

0000aa3c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    aa3c:	defffa04 	addi	sp,sp,-24
    aa40:	dfc00515 	stw	ra,20(sp)
    aa44:	df000415 	stw	fp,16(sp)
    aa48:	df000404 	addi	fp,sp,16
    aa4c:	e13ffd15 	stw	r4,-12(fp)
    aa50:	e17ffe15 	stw	r5,-8(fp)
    aa54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa58:	e0bffd17 	ldw	r2,-12(fp)
    aa5c:	10800017 	ldw	r2,0(r2)
    aa60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    aa64:	e0bffc17 	ldw	r2,-16(fp)
    aa68:	10c00a04 	addi	r3,r2,40
    aa6c:	e0bffd17 	ldw	r2,-12(fp)
    aa70:	10800217 	ldw	r2,8(r2)
    aa74:	100f883a 	mov	r7,r2
    aa78:	e1bfff17 	ldw	r6,-4(fp)
    aa7c:	e17ffe17 	ldw	r5,-8(fp)
    aa80:	1809883a 	mov	r4,r3
    aa84:	000b4440 	call	b444 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    aa88:	e037883a 	mov	sp,fp
    aa8c:	dfc00117 	ldw	ra,4(sp)
    aa90:	df000017 	ldw	fp,0(sp)
    aa94:	dec00204 	addi	sp,sp,8
    aa98:	f800283a 	ret

0000aa9c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    aa9c:	defffc04 	addi	sp,sp,-16
    aaa0:	dfc00315 	stw	ra,12(sp)
    aaa4:	df000215 	stw	fp,8(sp)
    aaa8:	df000204 	addi	fp,sp,8
    aaac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aab0:	e0bfff17 	ldw	r2,-4(fp)
    aab4:	10800017 	ldw	r2,0(r2)
    aab8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    aabc:	e0bffe17 	ldw	r2,-8(fp)
    aac0:	10c00a04 	addi	r3,r2,40
    aac4:	e0bfff17 	ldw	r2,-4(fp)
    aac8:	10800217 	ldw	r2,8(r2)
    aacc:	100b883a 	mov	r5,r2
    aad0:	1809883a 	mov	r4,r3
    aad4:	000b0300 	call	b030 <altera_avalon_jtag_uart_close>
}
    aad8:	e037883a 	mov	sp,fp
    aadc:	dfc00117 	ldw	ra,4(sp)
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00204 	addi	sp,sp,8
    aae8:	f800283a 	ret

0000aaec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aaec:	defffa04 	addi	sp,sp,-24
    aaf0:	dfc00515 	stw	ra,20(sp)
    aaf4:	df000415 	stw	fp,16(sp)
    aaf8:	df000404 	addi	fp,sp,16
    aafc:	e13ffd15 	stw	r4,-12(fp)
    ab00:	e17ffe15 	stw	r5,-8(fp)
    ab04:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    ab08:	e0bffd17 	ldw	r2,-12(fp)
    ab0c:	10800017 	ldw	r2,0(r2)
    ab10:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    ab14:	e0bffc17 	ldw	r2,-16(fp)
    ab18:	10800a04 	addi	r2,r2,40
    ab1c:	e1bfff17 	ldw	r6,-4(fp)
    ab20:	e17ffe17 	ldw	r5,-8(fp)
    ab24:	1009883a 	mov	r4,r2
    ab28:	000b0980 	call	b098 <altera_avalon_jtag_uart_ioctl>
}
    ab2c:	e037883a 	mov	sp,fp
    ab30:	dfc00117 	ldw	ra,4(sp)
    ab34:	df000017 	ldw	fp,0(sp)
    ab38:	dec00204 	addi	sp,sp,8
    ab3c:	f800283a 	ret

0000ab40 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    ab40:	defff104 	addi	sp,sp,-60
    ab44:	dfc00e15 	stw	ra,56(sp)
    ab48:	df000d15 	stw	fp,52(sp)
    ab4c:	df000d04 	addi	fp,sp,52
    ab50:	e13ff915 	stw	r4,-28(fp)
    ab54:	e17ffa15 	stw	r5,-24(fp)
    ab58:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    ab5c:	e0bff917 	ldw	r2,-28(fp)
    ab60:	10800c04 	addi	r2,r2,48
    ab64:	e0bff415 	stw	r2,-48(fp)
    ab68:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    ab6c:	e0bff80b 	ldhu	r2,-32(fp)
    ab70:	e0fff884 	addi	r3,fp,-30
    ab74:	180b883a 	mov	r5,r3
    ab78:	1009883a 	mov	r4,r2
    ab7c:	00055b80 	call	55b8 <OSFlagCreate>
    ab80:	1007883a 	mov	r3,r2
    ab84:	e0bff417 	ldw	r2,-48(fp)
    ab88:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    ab8c:	e0bff917 	ldw	r2,-28(fp)
    ab90:	10800a04 	addi	r2,r2,40
    ab94:	e0bff515 	stw	r2,-44(fp)
    ab98:	00800044 	movi	r2,1
    ab9c:	e0bff78d 	sth	r2,-34(fp)
    aba0:	e0bff78b 	ldhu	r2,-34(fp)
    aba4:	1009883a 	mov	r4,r2
    aba8:	00082d80 	call	82d8 <OSSemCreate>
    abac:	1007883a 	mov	r3,r2
    abb0:	e0bff517 	ldw	r2,-44(fp)
    abb4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    abb8:	e0bff917 	ldw	r2,-28(fp)
    abbc:	10800b04 	addi	r2,r2,44
    abc0:	e0bff615 	stw	r2,-40(fp)
    abc4:	00800044 	movi	r2,1
    abc8:	e0bff70d 	sth	r2,-36(fp)
    abcc:	e0bff70b 	ldhu	r2,-36(fp)
    abd0:	1009883a 	mov	r4,r2
    abd4:	00082d80 	call	82d8 <OSSemCreate>
    abd8:	1007883a 	mov	r3,r2
    abdc:	e0bff617 	ldw	r2,-40(fp)
    abe0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    abe4:	e0bff917 	ldw	r2,-28(fp)
    abe8:	00c00044 	movi	r3,1
    abec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    abf0:	e0bff917 	ldw	r2,-28(fp)
    abf4:	10800017 	ldw	r2,0(r2)
    abf8:	10800104 	addi	r2,r2,4
    abfc:	1007883a 	mov	r3,r2
    ac00:	e0bff917 	ldw	r2,-28(fp)
    ac04:	10800817 	ldw	r2,32(r2)
    ac08:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ac0c:	e0bffa17 	ldw	r2,-24(fp)
    ac10:	e0fffb17 	ldw	r3,-20(fp)
    ac14:	d8000015 	stw	zero,0(sp)
    ac18:	e1fff917 	ldw	r7,-28(fp)
    ac1c:	01800074 	movhi	r6,1
    ac20:	31ab2204 	addi	r6,r6,-21368
    ac24:	180b883a 	mov	r5,r3
    ac28:	1009883a 	mov	r4,r2
    ac2c:	000bb080 	call	bb08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ac30:	e0bff917 	ldw	r2,-28(fp)
    ac34:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ac38:	e0bff917 	ldw	r2,-28(fp)
    ac3c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ac40:	d0e71717 	ldw	r3,-25508(gp)
    ac44:	e1fff917 	ldw	r7,-28(fp)
    ac48:	01800074 	movhi	r6,1
    ac4c:	31abcb04 	addi	r6,r6,-20692
    ac50:	180b883a 	mov	r5,r3
    ac54:	1009883a 	mov	r4,r2
    ac58:	000b7fc0 	call	b7fc <alt_alarm_start>
    ac5c:	1000040e 	bge	r2,zero,ac70 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ac60:	e0fff917 	ldw	r3,-28(fp)
    ac64:	00a00034 	movhi	r2,32768
    ac68:	10bfffc4 	addi	r2,r2,-1
    ac6c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ac70:	0001883a 	nop
    ac74:	e037883a 	mov	sp,fp
    ac78:	dfc00117 	ldw	ra,4(sp)
    ac7c:	df000017 	ldw	fp,0(sp)
    ac80:	dec00204 	addi	sp,sp,8
    ac84:	f800283a 	ret

0000ac88 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    ac88:	defff204 	addi	sp,sp,-56
    ac8c:	dfc00d15 	stw	ra,52(sp)
    ac90:	df000c15 	stw	fp,48(sp)
    ac94:	df000c04 	addi	fp,sp,48
    ac98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    ac9c:	e0bfff17 	ldw	r2,-4(fp)
    aca0:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    aca4:	e0bff617 	ldw	r2,-40(fp)
    aca8:	10800017 	ldw	r2,0(r2)
    acac:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    acb0:	e0bff717 	ldw	r2,-36(fp)
    acb4:	10800104 	addi	r2,r2,4
    acb8:	10800037 	ldwio	r2,0(r2)
    acbc:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    acc0:	e0bff817 	ldw	r2,-32(fp)
    acc4:	1080c00c 	andi	r2,r2,768
    acc8:	10009126 	beq	r2,zero,af10 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    accc:	e0bff817 	ldw	r2,-32(fp)
    acd0:	1080400c 	andi	r2,r2,256
    acd4:	10004726 	beq	r2,zero,adf4 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    acd8:	00800074 	movhi	r2,1
    acdc:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ace0:	e0bff617 	ldw	r2,-40(fp)
    ace4:	10800d17 	ldw	r2,52(r2)
    ace8:	10800044 	addi	r2,r2,1
    acec:	1081ffcc 	andi	r2,r2,2047
    acf0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    acf4:	e0bff617 	ldw	r2,-40(fp)
    acf8:	10c00e17 	ldw	r3,56(r2)
    acfc:	e0bff917 	ldw	r2,-28(fp)
    ad00:	18802726 	beq	r3,r2,ada0 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ad04:	e0bff717 	ldw	r2,-36(fp)
    ad08:	10800037 	ldwio	r2,0(r2)
    ad0c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ad10:	e0bff417 	ldw	r2,-48(fp)
    ad14:	10a0000c 	andi	r2,r2,32768
    ad18:	10002326 	beq	r2,zero,ada8 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ad1c:	e0bff617 	ldw	r2,-40(fp)
    ad20:	10800d17 	ldw	r2,52(r2)
    ad24:	e0fff417 	ldw	r3,-48(fp)
    ad28:	1809883a 	mov	r4,r3
    ad2c:	e0fff617 	ldw	r3,-40(fp)
    ad30:	1885883a 	add	r2,r3,r2
    ad34:	10801104 	addi	r2,r2,68
    ad38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad3c:	e0bff617 	ldw	r2,-40(fp)
    ad40:	10800d17 	ldw	r2,52(r2)
    ad44:	10800044 	addi	r2,r2,1
    ad48:	10c1ffcc 	andi	r3,r2,2047
    ad4c:	e0bff617 	ldw	r2,-40(fp)
    ad50:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    ad54:	e0bff617 	ldw	r2,-40(fp)
    ad58:	10800c17 	ldw	r2,48(r2)
    ad5c:	e0bffb15 	stw	r2,-20(fp)
    ad60:	00800044 	movi	r2,1
    ad64:	e0bffc0d 	sth	r2,-16(fp)
    ad68:	00800044 	movi	r2,1
    ad6c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ad70:	d0a70243 	ldbu	r2,-25591(gp)
    ad74:	10803fcc 	andi	r2,r2,255
    ad78:	103fd926 	beq	r2,zero,ace0 <__alt_data_end+0xffff2640>
  {
    OSFlagPost (group, flags, opt, &err);
    ad7c:	e0bffc0b 	ldhu	r2,-16(fp)
    ad80:	e0fffc83 	ldbu	r3,-14(fp)
    ad84:	e13ffdc4 	addi	r4,fp,-9
    ad88:	200f883a 	mov	r7,r4
    ad8c:	180d883a 	mov	r6,r3
    ad90:	100b883a 	mov	r5,r2
    ad94:	e13ffb17 	ldw	r4,-20(fp)
    ad98:	00061940 	call	6194 <OSFlagPost>
      }
    ad9c:	003fd006 	br	ace0 <__alt_data_end+0xffff2640>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    ada0:	0001883a 	nop
    ada4:	00000106 	br	adac <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    ada8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    adac:	e0bff417 	ldw	r2,-48(fp)
    adb0:	10bfffec 	andhi	r2,r2,65535
    adb4:	10000f26 	beq	r2,zero,adf4 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    adb8:	e0bff617 	ldw	r2,-40(fp)
    adbc:	10c00817 	ldw	r3,32(r2)
    adc0:	00bfff84 	movi	r2,-2
    adc4:	1886703a 	and	r3,r3,r2
    adc8:	e0bff617 	ldw	r2,-40(fp)
    adcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    add0:	e0bff717 	ldw	r2,-36(fp)
    add4:	10800104 	addi	r2,r2,4
    add8:	1007883a 	mov	r3,r2
    addc:	e0bff617 	ldw	r2,-40(fp)
    ade0:	10800817 	ldw	r2,32(r2)
    ade4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    ade8:	e0bff717 	ldw	r2,-36(fp)
    adec:	10800104 	addi	r2,r2,4
    adf0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    adf4:	e0bff817 	ldw	r2,-32(fp)
    adf8:	1080800c 	andi	r2,r2,512
    adfc:	103fac26 	beq	r2,zero,acb0 <__alt_data_end+0xffff2610>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ae00:	e0bff817 	ldw	r2,-32(fp)
    ae04:	1004d43a 	srli	r2,r2,16
    ae08:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    ae0c:	00002606 	br	aea8 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    ae10:	e0bff717 	ldw	r2,-36(fp)
    ae14:	e0fff617 	ldw	r3,-40(fp)
    ae18:	18c01017 	ldw	r3,64(r3)
    ae1c:	e13ff617 	ldw	r4,-40(fp)
    ae20:	20c7883a 	add	r3,r4,r3
    ae24:	18c21104 	addi	r3,r3,2116
    ae28:	18c00003 	ldbu	r3,0(r3)
    ae2c:	18c03fcc 	andi	r3,r3,255
    ae30:	18c0201c 	xori	r3,r3,128
    ae34:	18ffe004 	addi	r3,r3,-128
    ae38:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ae3c:	e0bff617 	ldw	r2,-40(fp)
    ae40:	10801017 	ldw	r2,64(r2)
    ae44:	10800044 	addi	r2,r2,1
    ae48:	10c1ffcc 	andi	r3,r2,2047
    ae4c:	e0bff617 	ldw	r2,-40(fp)
    ae50:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    ae54:	e0bff617 	ldw	r2,-40(fp)
    ae58:	10800c17 	ldw	r2,48(r2)
    ae5c:	e0bffa15 	stw	r2,-24(fp)
    ae60:	00800084 	movi	r2,2
    ae64:	e0bffd0d 	sth	r2,-12(fp)
    ae68:	00800044 	movi	r2,1
    ae6c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    ae70:	d0a70243 	ldbu	r2,-25591(gp)
    ae74:	10803fcc 	andi	r2,r2,255
    ae78:	10000826 	beq	r2,zero,ae9c <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
    ae7c:	e0bffd0b 	ldhu	r2,-12(fp)
    ae80:	e0fffd83 	ldbu	r3,-10(fp)
    ae84:	e13ffe04 	addi	r4,fp,-8
    ae88:	200f883a 	mov	r7,r4
    ae8c:	180d883a 	mov	r6,r3
    ae90:	100b883a 	mov	r5,r2
    ae94:	e13ffa17 	ldw	r4,-24(fp)
    ae98:	00061940 	call	6194 <OSFlagPost>

        space--;
    ae9c:	e0bff517 	ldw	r2,-44(fp)
    aea0:	10bfffc4 	addi	r2,r2,-1
    aea4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    aea8:	e0bff517 	ldw	r2,-44(fp)
    aeac:	10000526 	beq	r2,zero,aec4 <altera_avalon_jtag_uart_irq+0x23c>
    aeb0:	e0bff617 	ldw	r2,-40(fp)
    aeb4:	10c01017 	ldw	r3,64(r2)
    aeb8:	e0bff617 	ldw	r2,-40(fp)
    aebc:	10800f17 	ldw	r2,60(r2)
    aec0:	18bfd31e 	bne	r3,r2,ae10 <__alt_data_end+0xffff2770>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    aec4:	e0bff517 	ldw	r2,-44(fp)
    aec8:	103f7926 	beq	r2,zero,acb0 <__alt_data_end+0xffff2610>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    aecc:	e0bff617 	ldw	r2,-40(fp)
    aed0:	10c00817 	ldw	r3,32(r2)
    aed4:	00bfff44 	movi	r2,-3
    aed8:	1886703a 	and	r3,r3,r2
    aedc:	e0bff617 	ldw	r2,-40(fp)
    aee0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    aee4:	e0bff617 	ldw	r2,-40(fp)
    aee8:	10800017 	ldw	r2,0(r2)
    aeec:	10800104 	addi	r2,r2,4
    aef0:	1007883a 	mov	r3,r2
    aef4:	e0bff617 	ldw	r2,-40(fp)
    aef8:	10800817 	ldw	r2,32(r2)
    aefc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    af00:	e0bff717 	ldw	r2,-36(fp)
    af04:	10800104 	addi	r2,r2,4
    af08:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    af0c:	003f6806 	br	acb0 <__alt_data_end+0xffff2610>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    af10:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    af14:	0001883a 	nop
    af18:	e037883a 	mov	sp,fp
    af1c:	dfc00117 	ldw	ra,4(sp)
    af20:	df000017 	ldw	fp,0(sp)
    af24:	dec00204 	addi	sp,sp,8
    af28:	f800283a 	ret

0000af2c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    af2c:	defff904 	addi	sp,sp,-28
    af30:	dfc00615 	stw	ra,24(sp)
    af34:	df000515 	stw	fp,20(sp)
    af38:	df000504 	addi	fp,sp,20
    af3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    af40:	e0bfff17 	ldw	r2,-4(fp)
    af44:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    af48:	e0bffb17 	ldw	r2,-20(fp)
    af4c:	10800017 	ldw	r2,0(r2)
    af50:	10800104 	addi	r2,r2,4
    af54:	10800037 	ldwio	r2,0(r2)
    af58:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    af5c:	e0bffc17 	ldw	r2,-16(fp)
    af60:	1081000c 	andi	r2,r2,1024
    af64:	10000b26 	beq	r2,zero,af94 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    af68:	e0bffb17 	ldw	r2,-20(fp)
    af6c:	10800017 	ldw	r2,0(r2)
    af70:	10800104 	addi	r2,r2,4
    af74:	1007883a 	mov	r3,r2
    af78:	e0bffb17 	ldw	r2,-20(fp)
    af7c:	10800817 	ldw	r2,32(r2)
    af80:	10810014 	ori	r2,r2,1024
    af84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    af88:	e0bffb17 	ldw	r2,-20(fp)
    af8c:	10000915 	stw	zero,36(r2)
    af90:	00002106 	br	b018 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    af94:	e0bffb17 	ldw	r2,-20(fp)
    af98:	10c00917 	ldw	r3,36(r2)
    af9c:	00a00034 	movhi	r2,32768
    afa0:	10bfff04 	addi	r2,r2,-4
    afa4:	10c01c36 	bltu	r2,r3,b018 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    afa8:	e0bffb17 	ldw	r2,-20(fp)
    afac:	10800917 	ldw	r2,36(r2)
    afb0:	10c00044 	addi	r3,r2,1
    afb4:	e0bffb17 	ldw	r2,-20(fp)
    afb8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    afbc:	e0bffb17 	ldw	r2,-20(fp)
    afc0:	10c00917 	ldw	r3,36(r2)
    afc4:	e0bffb17 	ldw	r2,-20(fp)
    afc8:	10800117 	ldw	r2,4(r2)
    afcc:	18801236 	bltu	r3,r2,b018 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    afd0:	e0bffb17 	ldw	r2,-20(fp)
    afd4:	10800c17 	ldw	r2,48(r2)
    afd8:	e0bffd15 	stw	r2,-12(fp)
    afdc:	00800104 	movi	r2,4
    afe0:	e0bffe0d 	sth	r2,-8(fp)
    afe4:	00800044 	movi	r2,1
    afe8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    afec:	d0a70243 	ldbu	r2,-25591(gp)
    aff0:	10803fcc 	andi	r2,r2,255
    aff4:	10000826 	beq	r2,zero,b018 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    aff8:	e0bffe0b 	ldhu	r2,-8(fp)
    affc:	e0fffe83 	ldbu	r3,-6(fp)
    b000:	e13ffec4 	addi	r4,fp,-5
    b004:	200f883a 	mov	r7,r4
    b008:	180d883a 	mov	r6,r3
    b00c:	100b883a 	mov	r5,r2
    b010:	e13ffd17 	ldw	r4,-12(fp)
    b014:	00061940 	call	6194 <OSFlagPost>
    b018:	d0a71717 	ldw	r2,-25508(gp)
    }
  }

  return alt_ticks_per_second();
}
    b01c:	e037883a 	mov	sp,fp
    b020:	dfc00117 	ldw	ra,4(sp)
    b024:	df000017 	ldw	fp,0(sp)
    b028:	dec00204 	addi	sp,sp,8
    b02c:	f800283a 	ret

0000b030 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    b030:	defffd04 	addi	sp,sp,-12
    b034:	df000215 	stw	fp,8(sp)
    b038:	df000204 	addi	fp,sp,8
    b03c:	e13ffe15 	stw	r4,-8(fp)
    b040:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b044:	00000506 	br	b05c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    b048:	e0bfff17 	ldw	r2,-4(fp)
    b04c:	1090000c 	andi	r2,r2,16384
    b050:	10000226 	beq	r2,zero,b05c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    b054:	00bffd44 	movi	r2,-11
    b058:	00000b06 	br	b088 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    b05c:	e0bffe17 	ldw	r2,-8(fp)
    b060:	10c01017 	ldw	r3,64(r2)
    b064:	e0bffe17 	ldw	r2,-8(fp)
    b068:	10800f17 	ldw	r2,60(r2)
    b06c:	18800526 	beq	r3,r2,b084 <altera_avalon_jtag_uart_close+0x54>
    b070:	e0bffe17 	ldw	r2,-8(fp)
    b074:	10c00917 	ldw	r3,36(r2)
    b078:	e0bffe17 	ldw	r2,-8(fp)
    b07c:	10800117 	ldw	r2,4(r2)
    b080:	18bff136 	bltu	r3,r2,b048 <__alt_data_end+0xffff29a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    b084:	0005883a 	mov	r2,zero
}
    b088:	e037883a 	mov	sp,fp
    b08c:	df000017 	ldw	fp,0(sp)
    b090:	dec00104 	addi	sp,sp,4
    b094:	f800283a 	ret

0000b098 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    b098:	defffa04 	addi	sp,sp,-24
    b09c:	df000515 	stw	fp,20(sp)
    b0a0:	df000504 	addi	fp,sp,20
    b0a4:	e13ffd15 	stw	r4,-12(fp)
    b0a8:	e17ffe15 	stw	r5,-8(fp)
    b0ac:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    b0b0:	00bff9c4 	movi	r2,-25
    b0b4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    b0b8:	e0bffe17 	ldw	r2,-8(fp)
    b0bc:	10da8060 	cmpeqi	r3,r2,27137
    b0c0:	1800031e 	bne	r3,zero,b0d0 <altera_avalon_jtag_uart_ioctl+0x38>
    b0c4:	109a80a0 	cmpeqi	r2,r2,27138
    b0c8:	1000181e 	bne	r2,zero,b12c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    b0cc:	00002906 	br	b174 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    b0d0:	e0bffd17 	ldw	r2,-12(fp)
    b0d4:	10c00117 	ldw	r3,4(r2)
    b0d8:	00a00034 	movhi	r2,32768
    b0dc:	10bfffc4 	addi	r2,r2,-1
    b0e0:	18802126 	beq	r3,r2,b168 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    b0e4:	e0bfff17 	ldw	r2,-4(fp)
    b0e8:	10800017 	ldw	r2,0(r2)
    b0ec:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    b0f0:	e0bffc17 	ldw	r2,-16(fp)
    b0f4:	10800090 	cmplti	r2,r2,2
    b0f8:	1000061e 	bne	r2,zero,b114 <altera_avalon_jtag_uart_ioctl+0x7c>
    b0fc:	e0fffc17 	ldw	r3,-16(fp)
    b100:	00a00034 	movhi	r2,32768
    b104:	10bfffc4 	addi	r2,r2,-1
    b108:	18800226 	beq	r3,r2,b114 <altera_avalon_jtag_uart_ioctl+0x7c>
    b10c:	e0bffc17 	ldw	r2,-16(fp)
    b110:	00000206 	br	b11c <altera_avalon_jtag_uart_ioctl+0x84>
    b114:	00a00034 	movhi	r2,32768
    b118:	10bfff84 	addi	r2,r2,-2
    b11c:	e0fffd17 	ldw	r3,-12(fp)
    b120:	18800115 	stw	r2,4(r3)
      rc = 0;
    b124:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b128:	00000f06 	br	b168 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    b12c:	e0bffd17 	ldw	r2,-12(fp)
    b130:	10c00117 	ldw	r3,4(r2)
    b134:	00a00034 	movhi	r2,32768
    b138:	10bfffc4 	addi	r2,r2,-1
    b13c:	18800c26 	beq	r3,r2,b170 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    b140:	e0bffd17 	ldw	r2,-12(fp)
    b144:	10c00917 	ldw	r3,36(r2)
    b148:	e0bffd17 	ldw	r2,-12(fp)
    b14c:	10800117 	ldw	r2,4(r2)
    b150:	1885803a 	cmpltu	r2,r3,r2
    b154:	10c03fcc 	andi	r3,r2,255
    b158:	e0bfff17 	ldw	r2,-4(fp)
    b15c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    b160:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    b164:	00000206 	br	b170 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    b168:	0001883a 	nop
    b16c:	00000106 	br	b174 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    b170:	0001883a 	nop

  default:
    break;
  }

  return rc;
    b174:	e0bffb17 	ldw	r2,-20(fp)
}
    b178:	e037883a 	mov	sp,fp
    b17c:	df000017 	ldw	fp,0(sp)
    b180:	dec00104 	addi	sp,sp,4
    b184:	f800283a 	ret

0000b188 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    b188:	deffed04 	addi	sp,sp,-76
    b18c:	dfc01215 	stw	ra,72(sp)
    b190:	df001115 	stw	fp,68(sp)
    b194:	df001104 	addi	fp,sp,68
    b198:	e13ffc15 	stw	r4,-16(fp)
    b19c:	e17ffd15 	stw	r5,-12(fp)
    b1a0:	e1bffe15 	stw	r6,-8(fp)
    b1a4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    b1a8:	e0bffd17 	ldw	r2,-12(fp)
    b1ac:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    b1b0:	e0bffc17 	ldw	r2,-16(fp)
    b1b4:	10800a17 	ldw	r2,40(r2)
    b1b8:	e0bff815 	stw	r2,-32(fp)
    b1bc:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    b1c0:	e0bff90b 	ldhu	r2,-28(fp)
    b1c4:	e0fffb04 	addi	r3,fp,-20
    b1c8:	180d883a 	mov	r6,r3
    b1cc:	100b883a 	mov	r5,r2
    b1d0:	e13ff817 	ldw	r4,-32(fp)
    b1d4:	00085f00 	call	85f0 <OSSemPend>

  while (space > 0)
    b1d8:	00006106 	br	b360 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b1dc:	e0bffc17 	ldw	r2,-16(fp)
    b1e0:	10800d17 	ldw	r2,52(r2)
    b1e4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    b1e8:	e0bffc17 	ldw	r2,-16(fp)
    b1ec:	10800e17 	ldw	r2,56(r2)
    b1f0:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    b1f4:	e0fff317 	ldw	r3,-52(fp)
    b1f8:	e0bff417 	ldw	r2,-48(fp)
    b1fc:	18800536 	bltu	r3,r2,b214 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    b200:	e0fff317 	ldw	r3,-52(fp)
    b204:	e0bff417 	ldw	r2,-48(fp)
    b208:	1885c83a 	sub	r2,r3,r2
    b20c:	e0bff115 	stw	r2,-60(fp)
    b210:	00000406 	br	b224 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b214:	00c20004 	movi	r3,2048
    b218:	e0bff417 	ldw	r2,-48(fp)
    b21c:	1885c83a 	sub	r2,r3,r2
    b220:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    b224:	e0bff117 	ldw	r2,-60(fp)
    b228:	10001e26 	beq	r2,zero,b2a4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    b22c:	e0fffe17 	ldw	r3,-8(fp)
    b230:	e0bff117 	ldw	r2,-60(fp)
    b234:	1880022e 	bgeu	r3,r2,b240 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    b238:	e0bffe17 	ldw	r2,-8(fp)
    b23c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b240:	e0bffc17 	ldw	r2,-16(fp)
    b244:	10c01104 	addi	r3,r2,68
    b248:	e0bff417 	ldw	r2,-48(fp)
    b24c:	1885883a 	add	r2,r3,r2
    b250:	e1bff117 	ldw	r6,-60(fp)
    b254:	100b883a 	mov	r5,r2
    b258:	e13ff017 	ldw	r4,-64(fp)
    b25c:	000ca9c0 	call	ca9c <memcpy>
      ptr   += n;
    b260:	e0fff017 	ldw	r3,-64(fp)
    b264:	e0bff117 	ldw	r2,-60(fp)
    b268:	1885883a 	add	r2,r3,r2
    b26c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    b270:	e0fffe17 	ldw	r3,-8(fp)
    b274:	e0bff117 	ldw	r2,-60(fp)
    b278:	1885c83a 	sub	r2,r3,r2
    b27c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b280:	e0fff417 	ldw	r3,-48(fp)
    b284:	e0bff117 	ldw	r2,-60(fp)
    b288:	1885883a 	add	r2,r3,r2
    b28c:	10c1ffcc 	andi	r3,r2,2047
    b290:	e0bffc17 	ldw	r2,-16(fp)
    b294:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    b298:	e0bffe17 	ldw	r2,-8(fp)
    b29c:	00bfcf16 	blt	zero,r2,b1dc <__alt_data_end+0xffff2b3c>
    b2a0:	00000106 	br	b2a8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    b2a4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    b2a8:	e0fff017 	ldw	r3,-64(fp)
    b2ac:	e0bffd17 	ldw	r2,-12(fp)
    b2b0:	18802e1e 	bne	r3,r2,b36c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b2b4:	e0bfff17 	ldw	r2,-4(fp)
    b2b8:	1090000c 	andi	r2,r2,16384
    b2bc:	10002d1e 	bne	r2,zero,b374 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    b2c0:	d0a70243 	ldbu	r2,-25591(gp)
    b2c4:	10803fcc 	andi	r2,r2,255
    b2c8:	10800058 	cmpnei	r2,r2,1
    b2cc:	1000161e 	bne	r2,zero,b328 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    b2d0:	e0bffc17 	ldw	r2,-16(fp)
    b2d4:	10800c17 	ldw	r2,48(r2)
    b2d8:	e0bff215 	stw	r2,-56(fp)
    b2dc:	00800144 	movi	r2,5
    b2e0:	e0bff98d 	sth	r2,-26(fp)
    b2e4:	00bfe0c4 	movi	r2,-125
    b2e8:	e0bffa05 	stb	r2,-24(fp)
    b2ec:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    b2f0:	d0a70243 	ldbu	r2,-25591(gp)
    b2f4:	10803fcc 	andi	r2,r2,255
    b2f8:	10001526 	beq	r2,zero,b350 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    b2fc:	e0fff98b 	ldhu	r3,-26(fp)
    b300:	e13ffa03 	ldbu	r4,-24(fp)
    b304:	e17ffa8b 	ldhu	r5,-22(fp)
    b308:	e0bffb44 	addi	r2,fp,-19
    b30c:	d8800015 	stw	r2,0(sp)
    b310:	280f883a 	mov	r7,r5
    b314:	200d883a 	mov	r6,r4
    b318:	180b883a 	mov	r5,r3
    b31c:	e13ff217 	ldw	r4,-56(fp)
    b320:	0005b7c0 	call	5b7c <OSFlagPend>
    b324:	00000a06 	br	b350 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b328:	0001883a 	nop
    b32c:	e0bffc17 	ldw	r2,-16(fp)
    b330:	10c00d17 	ldw	r3,52(r2)
    b334:	e0bff317 	ldw	r2,-52(fp)
    b338:	1880051e 	bne	r3,r2,b350 <altera_avalon_jtag_uart_read+0x1c8>
    b33c:	e0bffc17 	ldw	r2,-16(fp)
    b340:	10c00917 	ldw	r3,36(r2)
    b344:	e0bffc17 	ldw	r2,-16(fp)
    b348:	10800117 	ldw	r2,4(r2)
    b34c:	18bff736 	bltu	r3,r2,b32c <__alt_data_end+0xffff2c8c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b350:	e0bffc17 	ldw	r2,-16(fp)
    b354:	10c00d17 	ldw	r3,52(r2)
    b358:	e0bff317 	ldw	r2,-52(fp)
    b35c:	18800726 	beq	r3,r2,b37c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b360:	e0bffe17 	ldw	r2,-8(fp)
    b364:	00bf9d16 	blt	zero,r2,b1dc <__alt_data_end+0xffff2b3c>
    b368:	00000506 	br	b380 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    b36c:	0001883a 	nop
    b370:	00000306 	br	b380 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    b374:	0001883a 	nop
    b378:	00000106 	br	b380 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    b37c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    b380:	e0bffc17 	ldw	r2,-16(fp)
    b384:	10800a17 	ldw	r2,40(r2)
    b388:	1009883a 	mov	r4,r2
    b38c:	00089680 	call	8968 <OSSemPost>

  if (ptr != buffer)
    b390:	e0fff017 	ldw	r3,-64(fp)
    b394:	e0bffd17 	ldw	r2,-12(fp)
    b398:	18801826 	beq	r3,r2,b3fc <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b39c:	0005303a 	rdctl	r2,status
    b3a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b3a4:	e0fff717 	ldw	r3,-36(fp)
    b3a8:	00bfff84 	movi	r2,-2
    b3ac:	1884703a 	and	r2,r3,r2
    b3b0:	1001703a 	wrctl	status,r2
  
  return context;
    b3b4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b3b8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b3bc:	e0bffc17 	ldw	r2,-16(fp)
    b3c0:	10800817 	ldw	r2,32(r2)
    b3c4:	10c00054 	ori	r3,r2,1
    b3c8:	e0bffc17 	ldw	r2,-16(fp)
    b3cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b3d0:	e0bffc17 	ldw	r2,-16(fp)
    b3d4:	10800017 	ldw	r2,0(r2)
    b3d8:	10800104 	addi	r2,r2,4
    b3dc:	1007883a 	mov	r3,r2
    b3e0:	e0bffc17 	ldw	r2,-16(fp)
    b3e4:	10800817 	ldw	r2,32(r2)
    b3e8:	18800035 	stwio	r2,0(r3)
    b3ec:	e0bff617 	ldw	r2,-40(fp)
    b3f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b3f4:	e0bff517 	ldw	r2,-44(fp)
    b3f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b3fc:	e0fff017 	ldw	r3,-64(fp)
    b400:	e0bffd17 	ldw	r2,-12(fp)
    b404:	18800426 	beq	r3,r2,b418 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    b408:	e0fff017 	ldw	r3,-64(fp)
    b40c:	e0bffd17 	ldw	r2,-12(fp)
    b410:	1885c83a 	sub	r2,r3,r2
    b414:	00000606 	br	b430 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    b418:	e0bfff17 	ldw	r2,-4(fp)
    b41c:	1090000c 	andi	r2,r2,16384
    b420:	10000226 	beq	r2,zero,b42c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    b424:	00bffd44 	movi	r2,-11
    b428:	00000106 	br	b430 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    b42c:	00bffec4 	movi	r2,-5
}
    b430:	e037883a 	mov	sp,fp
    b434:	dfc00117 	ldw	ra,4(sp)
    b438:	df000017 	ldw	fp,0(sp)
    b43c:	dec00204 	addi	sp,sp,8
    b440:	f800283a 	ret

0000b444 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b444:	deffed04 	addi	sp,sp,-76
    b448:	dfc01215 	stw	ra,72(sp)
    b44c:	df001115 	stw	fp,68(sp)
    b450:	df001104 	addi	fp,sp,68
    b454:	e13ffc15 	stw	r4,-16(fp)
    b458:	e17ffd15 	stw	r5,-12(fp)
    b45c:	e1bffe15 	stw	r6,-8(fp)
    b460:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b464:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b468:	e0bffd17 	ldw	r2,-12(fp)
    b46c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    b470:	e0bffc17 	ldw	r2,-16(fp)
    b474:	10800b17 	ldw	r2,44(r2)
    b478:	e0bff815 	stw	r2,-32(fp)
    b47c:	e03ff90d 	sth	zero,-28(fp)
    b480:	e0bff90b 	ldhu	r2,-28(fp)
    b484:	e0fffb44 	addi	r3,fp,-19
    b488:	180d883a 	mov	r6,r3
    b48c:	100b883a 	mov	r5,r2
    b490:	e13ff817 	ldw	r4,-32(fp)
    b494:	00085f00 	call	85f0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b498:	00003706 	br	b578 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b49c:	e0bffc17 	ldw	r2,-16(fp)
    b4a0:	10800f17 	ldw	r2,60(r2)
    b4a4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    b4a8:	e0bffc17 	ldw	r2,-16(fp)
    b4ac:	10801017 	ldw	r2,64(r2)
    b4b0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    b4b4:	e0fff417 	ldw	r3,-48(fp)
    b4b8:	e0bff017 	ldw	r2,-64(fp)
    b4bc:	1880062e 	bgeu	r3,r2,b4d8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    b4c0:	e0fff017 	ldw	r3,-64(fp)
    b4c4:	e0bff417 	ldw	r2,-48(fp)
    b4c8:	1885c83a 	sub	r2,r3,r2
    b4cc:	10bfffc4 	addi	r2,r2,-1
    b4d0:	e0bff115 	stw	r2,-60(fp)
    b4d4:	00000b06 	br	b504 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    b4d8:	e0bff017 	ldw	r2,-64(fp)
    b4dc:	10000526 	beq	r2,zero,b4f4 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b4e0:	00c20004 	movi	r3,2048
    b4e4:	e0bff417 	ldw	r2,-48(fp)
    b4e8:	1885c83a 	sub	r2,r3,r2
    b4ec:	e0bff115 	stw	r2,-60(fp)
    b4f0:	00000406 	br	b504 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b4f4:	00c1ffc4 	movi	r3,2047
    b4f8:	e0bff417 	ldw	r2,-48(fp)
    b4fc:	1885c83a 	sub	r2,r3,r2
    b500:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    b504:	e0bff117 	ldw	r2,-60(fp)
    b508:	10001e26 	beq	r2,zero,b584 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    b50c:	e0fffe17 	ldw	r3,-8(fp)
    b510:	e0bff117 	ldw	r2,-60(fp)
    b514:	1880022e 	bgeu	r3,r2,b520 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    b518:	e0bffe17 	ldw	r2,-8(fp)
    b51c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b520:	e0bffc17 	ldw	r2,-16(fp)
    b524:	10c21104 	addi	r3,r2,2116
    b528:	e0bff417 	ldw	r2,-48(fp)
    b52c:	1885883a 	add	r2,r3,r2
    b530:	e1bff117 	ldw	r6,-60(fp)
    b534:	e17ffd17 	ldw	r5,-12(fp)
    b538:	1009883a 	mov	r4,r2
    b53c:	000ca9c0 	call	ca9c <memcpy>
      ptr   += n;
    b540:	e0fffd17 	ldw	r3,-12(fp)
    b544:	e0bff117 	ldw	r2,-60(fp)
    b548:	1885883a 	add	r2,r3,r2
    b54c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    b550:	e0fffe17 	ldw	r3,-8(fp)
    b554:	e0bff117 	ldw	r2,-60(fp)
    b558:	1885c83a 	sub	r2,r3,r2
    b55c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b560:	e0fff417 	ldw	r3,-48(fp)
    b564:	e0bff117 	ldw	r2,-60(fp)
    b568:	1885883a 	add	r2,r3,r2
    b56c:	10c1ffcc 	andi	r3,r2,2047
    b570:	e0bffc17 	ldw	r2,-16(fp)
    b574:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b578:	e0bffe17 	ldw	r2,-8(fp)
    b57c:	00bfc716 	blt	zero,r2,b49c <__alt_data_end+0xffff2dfc>
    b580:	00000106 	br	b588 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    b584:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b588:	0005303a 	rdctl	r2,status
    b58c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b590:	e0fff717 	ldw	r3,-36(fp)
    b594:	00bfff84 	movi	r2,-2
    b598:	1884703a 	and	r2,r3,r2
    b59c:	1001703a 	wrctl	status,r2
  
  return context;
    b5a0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b5a4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b5a8:	e0bffc17 	ldw	r2,-16(fp)
    b5ac:	10800817 	ldw	r2,32(r2)
    b5b0:	10c00094 	ori	r3,r2,2
    b5b4:	e0bffc17 	ldw	r2,-16(fp)
    b5b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b5bc:	e0bffc17 	ldw	r2,-16(fp)
    b5c0:	10800017 	ldw	r2,0(r2)
    b5c4:	10800104 	addi	r2,r2,4
    b5c8:	1007883a 	mov	r3,r2
    b5cc:	e0bffc17 	ldw	r2,-16(fp)
    b5d0:	10800817 	ldw	r2,32(r2)
    b5d4:	18800035 	stwio	r2,0(r3)
    b5d8:	e0bff617 	ldw	r2,-40(fp)
    b5dc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b5e0:	e0bff317 	ldw	r2,-52(fp)
    b5e4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b5e8:	e0bffe17 	ldw	r2,-8(fp)
    b5ec:	00802a0e 	bge	zero,r2,b698 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    b5f0:	e0bfff17 	ldw	r2,-4(fp)
    b5f4:	1090000c 	andi	r2,r2,16384
    b5f8:	10002a1e 	bne	r2,zero,b6a4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    b5fc:	d0a70243 	ldbu	r2,-25591(gp)
    b600:	10803fcc 	andi	r2,r2,255
    b604:	10800058 	cmpnei	r2,r2,1
    b608:	1000161e 	bne	r2,zero,b664 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    b60c:	e0bffc17 	ldw	r2,-16(fp)
    b610:	10800c17 	ldw	r2,48(r2)
    b614:	e0bff515 	stw	r2,-44(fp)
    b618:	00800184 	movi	r2,6
    b61c:	e0bff98d 	sth	r2,-26(fp)
    b620:	00bfe0c4 	movi	r2,-125
    b624:	e0bffa05 	stb	r2,-24(fp)
    b628:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    b62c:	d0a70243 	ldbu	r2,-25591(gp)
    b630:	10803fcc 	andi	r2,r2,255
    b634:	10001526 	beq	r2,zero,b68c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    b638:	e0fff98b 	ldhu	r3,-26(fp)
    b63c:	e13ffa03 	ldbu	r4,-24(fp)
    b640:	e17ffa8b 	ldhu	r5,-22(fp)
    b644:	e0bffb04 	addi	r2,fp,-20
    b648:	d8800015 	stw	r2,0(sp)
    b64c:	280f883a 	mov	r7,r5
    b650:	200d883a 	mov	r6,r4
    b654:	180b883a 	mov	r5,r3
    b658:	e13ff517 	ldw	r4,-44(fp)
    b65c:	0005b7c0 	call	5b7c <OSFlagPend>
    b660:	00000a06 	br	b68c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b664:	0001883a 	nop
    b668:	e0bffc17 	ldw	r2,-16(fp)
    b66c:	10c01017 	ldw	r3,64(r2)
    b670:	e0bff017 	ldw	r2,-64(fp)
    b674:	1880051e 	bne	r3,r2,b68c <altera_avalon_jtag_uart_write+0x248>
    b678:	e0bffc17 	ldw	r2,-16(fp)
    b67c:	10c00917 	ldw	r3,36(r2)
    b680:	e0bffc17 	ldw	r2,-16(fp)
    b684:	10800117 	ldw	r2,4(r2)
    b688:	18bff736 	bltu	r3,r2,b668 <__alt_data_end+0xffff2fc8>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    b68c:	e0bffc17 	ldw	r2,-16(fp)
    b690:	10800917 	ldw	r2,36(r2)
    b694:	1000051e 	bne	r2,zero,b6ac <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    b698:	e0bffe17 	ldw	r2,-8(fp)
    b69c:	00bfb616 	blt	zero,r2,b578 <__alt_data_end+0xffff2ed8>
    b6a0:	00000306 	br	b6b0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    b6a4:	0001883a 	nop
    b6a8:	00000106 	br	b6b0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    b6ac:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    b6b0:	e0bffc17 	ldw	r2,-16(fp)
    b6b4:	10800b17 	ldw	r2,44(r2)
    b6b8:	1009883a 	mov	r4,r2
    b6bc:	00089680 	call	8968 <OSSemPost>

  if (ptr != start)
    b6c0:	e0fffd17 	ldw	r3,-12(fp)
    b6c4:	e0bff217 	ldw	r2,-56(fp)
    b6c8:	18800426 	beq	r3,r2,b6dc <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    b6cc:	e0fffd17 	ldw	r3,-12(fp)
    b6d0:	e0bff217 	ldw	r2,-56(fp)
    b6d4:	1885c83a 	sub	r2,r3,r2
    b6d8:	00000606 	br	b6f4 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    b6dc:	e0bfff17 	ldw	r2,-4(fp)
    b6e0:	1090000c 	andi	r2,r2,16384
    b6e4:	10000226 	beq	r2,zero,b6f0 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    b6e8:	00bffd44 	movi	r2,-11
    b6ec:	00000106 	br	b6f4 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b6f0:	00bffec4 	movi	r2,-5
}
    b6f4:	e037883a 	mov	sp,fp
    b6f8:	dfc00117 	ldw	ra,4(sp)
    b6fc:	df000017 	ldw	fp,0(sp)
    b700:	dec00204 	addi	sp,sp,8
    b704:	f800283a 	ret

0000b708 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b708:	defffa04 	addi	sp,sp,-24
    b70c:	dfc00515 	stw	ra,20(sp)
    b710:	df000415 	stw	fp,16(sp)
    b714:	df000404 	addi	fp,sp,16
    b718:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b71c:	0007883a 	mov	r3,zero
    b720:	e0bfff17 	ldw	r2,-4(fp)
    b724:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b728:	e0bfff17 	ldw	r2,-4(fp)
    b72c:	10800104 	addi	r2,r2,4
    b730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b734:	0005303a 	rdctl	r2,status
    b738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b73c:	e0fffd17 	ldw	r3,-12(fp)
    b740:	00bfff84 	movi	r2,-2
    b744:	1884703a 	and	r2,r3,r2
    b748:	1001703a 	wrctl	status,r2
  
  return context;
    b74c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b750:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    b754:	000c2280 	call	c228 <alt_tick>
    b758:	e0bffc17 	ldw	r2,-16(fp)
    b75c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b760:	e0bffe17 	ldw	r2,-8(fp)
    b764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b768:	0001883a 	nop
    b76c:	e037883a 	mov	sp,fp
    b770:	dfc00117 	ldw	ra,4(sp)
    b774:	df000017 	ldw	fp,0(sp)
    b778:	dec00204 	addi	sp,sp,8
    b77c:	f800283a 	ret

0000b780 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b780:	defff804 	addi	sp,sp,-32
    b784:	dfc00715 	stw	ra,28(sp)
    b788:	df000615 	stw	fp,24(sp)
    b78c:	df000604 	addi	fp,sp,24
    b790:	e13ffc15 	stw	r4,-16(fp)
    b794:	e17ffd15 	stw	r5,-12(fp)
    b798:	e1bffe15 	stw	r6,-8(fp)
    b79c:	e1ffff15 	stw	r7,-4(fp)
    b7a0:	e0bfff17 	ldw	r2,-4(fp)
    b7a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b7a8:	d0a71717 	ldw	r2,-25508(gp)
    b7ac:	1000021e 	bne	r2,zero,b7b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    b7b0:	e0bffb17 	ldw	r2,-20(fp)
    b7b4:	d0a71715 	stw	r2,-25508(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b7b8:	e0bffc17 	ldw	r2,-16(fp)
    b7bc:	10800104 	addi	r2,r2,4
    b7c0:	00c001c4 	movi	r3,7
    b7c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b7c8:	d8000015 	stw	zero,0(sp)
    b7cc:	e1fffc17 	ldw	r7,-16(fp)
    b7d0:	01800074 	movhi	r6,1
    b7d4:	31adc204 	addi	r6,r6,-18680
    b7d8:	e17ffe17 	ldw	r5,-8(fp)
    b7dc:	e13ffd17 	ldw	r4,-12(fp)
    b7e0:	000bb080 	call	bb08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b7e4:	0001883a 	nop
    b7e8:	e037883a 	mov	sp,fp
    b7ec:	dfc00117 	ldw	ra,4(sp)
    b7f0:	df000017 	ldw	fp,0(sp)
    b7f4:	dec00204 	addi	sp,sp,8
    b7f8:	f800283a 	ret

0000b7fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    b7fc:	defff504 	addi	sp,sp,-44
    b800:	df000a15 	stw	fp,40(sp)
    b804:	df000a04 	addi	fp,sp,40
    b808:	e13ffc15 	stw	r4,-16(fp)
    b80c:	e17ffd15 	stw	r5,-12(fp)
    b810:	e1bffe15 	stw	r6,-8(fp)
    b814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    b818:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    b81c:	d0a71717 	ldw	r2,-25508(gp)
  
  if (alt_ticks_per_second ())
    b820:	10003c26 	beq	r2,zero,b914 <alt_alarm_start+0x118>
  {
    if (alarm)
    b824:	e0bffc17 	ldw	r2,-16(fp)
    b828:	10003826 	beq	r2,zero,b90c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    b82c:	e0bffc17 	ldw	r2,-16(fp)
    b830:	e0fffe17 	ldw	r3,-8(fp)
    b834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    b838:	e0bffc17 	ldw	r2,-16(fp)
    b83c:	e0ffff17 	ldw	r3,-4(fp)
    b840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b844:	0005303a 	rdctl	r2,status
    b848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b84c:	e0fff917 	ldw	r3,-28(fp)
    b850:	00bfff84 	movi	r2,-2
    b854:	1884703a 	and	r2,r3,r2
    b858:	1001703a 	wrctl	status,r2
  
  return context;
    b85c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    b860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    b864:	d0a71817 	ldw	r2,-25504(gp)
      
      current_nticks = alt_nticks();
    b868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    b86c:	e0fffd17 	ldw	r3,-12(fp)
    b870:	e0bff617 	ldw	r2,-40(fp)
    b874:	1885883a 	add	r2,r3,r2
    b878:	10c00044 	addi	r3,r2,1
    b87c:	e0bffc17 	ldw	r2,-16(fp)
    b880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    b884:	e0bffc17 	ldw	r2,-16(fp)
    b888:	10c00217 	ldw	r3,8(r2)
    b88c:	e0bff617 	ldw	r2,-40(fp)
    b890:	1880042e 	bgeu	r3,r2,b8a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    b894:	e0bffc17 	ldw	r2,-16(fp)
    b898:	00c00044 	movi	r3,1
    b89c:	10c00405 	stb	r3,16(r2)
    b8a0:	00000206 	br	b8ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    b8a4:	e0bffc17 	ldw	r2,-16(fp)
    b8a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    b8ac:	e0bffc17 	ldw	r2,-16(fp)
    b8b0:	d0e02b04 	addi	r3,gp,-32596
    b8b4:	e0fffa15 	stw	r3,-24(fp)
    b8b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    b8bc:	e0bffb17 	ldw	r2,-20(fp)
    b8c0:	e0fffa17 	ldw	r3,-24(fp)
    b8c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    b8c8:	e0bffa17 	ldw	r2,-24(fp)
    b8cc:	10c00017 	ldw	r3,0(r2)
    b8d0:	e0bffb17 	ldw	r2,-20(fp)
    b8d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    b8d8:	e0bffa17 	ldw	r2,-24(fp)
    b8dc:	10800017 	ldw	r2,0(r2)
    b8e0:	e0fffb17 	ldw	r3,-20(fp)
    b8e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    b8e8:	e0bffa17 	ldw	r2,-24(fp)
    b8ec:	e0fffb17 	ldw	r3,-20(fp)
    b8f0:	10c00015 	stw	r3,0(r2)
    b8f4:	e0bff817 	ldw	r2,-32(fp)
    b8f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b8fc:	e0bff717 	ldw	r2,-36(fp)
    b900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    b904:	0005883a 	mov	r2,zero
    b908:	00000306 	br	b918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    b90c:	00bffa84 	movi	r2,-22
    b910:	00000106 	br	b918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    b914:	00bfde84 	movi	r2,-134
  }
}
    b918:	e037883a 	mov	sp,fp
    b91c:	df000017 	ldw	fp,0(sp)
    b920:	dec00104 	addi	sp,sp,4
    b924:	f800283a 	ret

0000b928 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b928:	deffff04 	addi	sp,sp,-4
    b92c:	df000015 	stw	fp,0(sp)
    b930:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    b934:	0001883a 	nop
    b938:	e037883a 	mov	sp,fp
    b93c:	df000017 	ldw	fp,0(sp)
    b940:	dec00104 	addi	sp,sp,4
    b944:	f800283a 	ret

0000b948 <alt_get_errno>:
    b948:	defffe04 	addi	sp,sp,-8
    b94c:	dfc00115 	stw	ra,4(sp)
    b950:	df000015 	stw	fp,0(sp)
    b954:	d839883a 	mov	fp,sp
    b958:	d0a00917 	ldw	r2,-32732(gp)
    b95c:	10000326 	beq	r2,zero,b96c <alt_get_errno+0x24>
    b960:	d0a00917 	ldw	r2,-32732(gp)
    b964:	103ee83a 	callr	r2
    b968:	00000106 	br	b970 <alt_get_errno+0x28>
    b96c:	d0a6f904 	addi	r2,gp,-25628
    b970:	e037883a 	mov	sp,fp
    b974:	dfc00117 	ldw	ra,4(sp)
    b978:	df000017 	ldw	fp,0(sp)
    b97c:	dec00204 	addi	sp,sp,8
    b980:	f800283a 	ret

0000b984 <alt_dev_llist_insert>:
    b984:	defffa04 	addi	sp,sp,-24
    b988:	dfc00515 	stw	ra,20(sp)
    b98c:	df000415 	stw	fp,16(sp)
    b990:	df000404 	addi	fp,sp,16
    b994:	e13ffe15 	stw	r4,-8(fp)
    b998:	e17fff15 	stw	r5,-4(fp)
    b99c:	e0bffe17 	ldw	r2,-8(fp)
    b9a0:	10000326 	beq	r2,zero,b9b0 <alt_dev_llist_insert+0x2c>
    b9a4:	e0bffe17 	ldw	r2,-8(fp)
    b9a8:	10800217 	ldw	r2,8(r2)
    b9ac:	1000061e 	bne	r2,zero,b9c8 <alt_dev_llist_insert+0x44>
    b9b0:	000b9480 	call	b948 <alt_get_errno>
    b9b4:	1007883a 	mov	r3,r2
    b9b8:	00800584 	movi	r2,22
    b9bc:	18800015 	stw	r2,0(r3)
    b9c0:	00bffa84 	movi	r2,-22
    b9c4:	00001306 	br	ba14 <alt_dev_llist_insert+0x90>
    b9c8:	e0bffe17 	ldw	r2,-8(fp)
    b9cc:	e0ffff17 	ldw	r3,-4(fp)
    b9d0:	e0fffc15 	stw	r3,-16(fp)
    b9d4:	e0bffd15 	stw	r2,-12(fp)
    b9d8:	e0bffd17 	ldw	r2,-12(fp)
    b9dc:	e0fffc17 	ldw	r3,-16(fp)
    b9e0:	10c00115 	stw	r3,4(r2)
    b9e4:	e0bffc17 	ldw	r2,-16(fp)
    b9e8:	10c00017 	ldw	r3,0(r2)
    b9ec:	e0bffd17 	ldw	r2,-12(fp)
    b9f0:	10c00015 	stw	r3,0(r2)
    b9f4:	e0bffc17 	ldw	r2,-16(fp)
    b9f8:	10800017 	ldw	r2,0(r2)
    b9fc:	e0fffd17 	ldw	r3,-12(fp)
    ba00:	10c00115 	stw	r3,4(r2)
    ba04:	e0bffc17 	ldw	r2,-16(fp)
    ba08:	e0fffd17 	ldw	r3,-12(fp)
    ba0c:	10c00015 	stw	r3,0(r2)
    ba10:	0005883a 	mov	r2,zero
    ba14:	e037883a 	mov	sp,fp
    ba18:	dfc00117 	ldw	ra,4(sp)
    ba1c:	df000017 	ldw	fp,0(sp)
    ba20:	dec00204 	addi	sp,sp,8
    ba24:	f800283a 	ret

0000ba28 <_do_ctors>:
    ba28:	defffd04 	addi	sp,sp,-12
    ba2c:	dfc00215 	stw	ra,8(sp)
    ba30:	df000115 	stw	fp,4(sp)
    ba34:	df000104 	addi	fp,sp,4
    ba38:	00800074 	movhi	r2,1
    ba3c:	10b43e04 	addi	r2,r2,-12040
    ba40:	e0bfff15 	stw	r2,-4(fp)
    ba44:	00000606 	br	ba60 <_do_ctors+0x38>
    ba48:	e0bfff17 	ldw	r2,-4(fp)
    ba4c:	10800017 	ldw	r2,0(r2)
    ba50:	103ee83a 	callr	r2
    ba54:	e0bfff17 	ldw	r2,-4(fp)
    ba58:	10bfff04 	addi	r2,r2,-4
    ba5c:	e0bfff15 	stw	r2,-4(fp)
    ba60:	e0ffff17 	ldw	r3,-4(fp)
    ba64:	00800074 	movhi	r2,1
    ba68:	10b43f04 	addi	r2,r2,-12036
    ba6c:	18bff62e 	bgeu	r3,r2,ba48 <__alt_data_end+0xffff33a8>
    ba70:	0001883a 	nop
    ba74:	e037883a 	mov	sp,fp
    ba78:	dfc00117 	ldw	ra,4(sp)
    ba7c:	df000017 	ldw	fp,0(sp)
    ba80:	dec00204 	addi	sp,sp,8
    ba84:	f800283a 	ret

0000ba88 <_do_dtors>:
    ba88:	defffd04 	addi	sp,sp,-12
    ba8c:	dfc00215 	stw	ra,8(sp)
    ba90:	df000115 	stw	fp,4(sp)
    ba94:	df000104 	addi	fp,sp,4
    ba98:	00800074 	movhi	r2,1
    ba9c:	10b43e04 	addi	r2,r2,-12040
    baa0:	e0bfff15 	stw	r2,-4(fp)
    baa4:	00000606 	br	bac0 <_do_dtors+0x38>
    baa8:	e0bfff17 	ldw	r2,-4(fp)
    baac:	10800017 	ldw	r2,0(r2)
    bab0:	103ee83a 	callr	r2
    bab4:	e0bfff17 	ldw	r2,-4(fp)
    bab8:	10bfff04 	addi	r2,r2,-4
    babc:	e0bfff15 	stw	r2,-4(fp)
    bac0:	e0ffff17 	ldw	r3,-4(fp)
    bac4:	00800074 	movhi	r2,1
    bac8:	10b43f04 	addi	r2,r2,-12036
    bacc:	18bff62e 	bgeu	r3,r2,baa8 <__alt_data_end+0xffff3408>
    bad0:	0001883a 	nop
    bad4:	e037883a 	mov	sp,fp
    bad8:	dfc00117 	ldw	ra,4(sp)
    badc:	df000017 	ldw	fp,0(sp)
    bae0:	dec00204 	addi	sp,sp,8
    bae4:	f800283a 	ret

0000bae8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    bae8:	deffff04 	addi	sp,sp,-4
    baec:	df000015 	stw	fp,0(sp)
    baf0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    baf4:	0001883a 	nop
    baf8:	e037883a 	mov	sp,fp
    bafc:	df000017 	ldw	fp,0(sp)
    bb00:	dec00104 	addi	sp,sp,4
    bb04:	f800283a 	ret

0000bb08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bb08:	defff904 	addi	sp,sp,-28
    bb0c:	dfc00615 	stw	ra,24(sp)
    bb10:	df000515 	stw	fp,20(sp)
    bb14:	df000504 	addi	fp,sp,20
    bb18:	e13ffc15 	stw	r4,-16(fp)
    bb1c:	e17ffd15 	stw	r5,-12(fp)
    bb20:	e1bffe15 	stw	r6,-8(fp)
    bb24:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    bb28:	e0800217 	ldw	r2,8(fp)
    bb2c:	d8800015 	stw	r2,0(sp)
    bb30:	e1ffff17 	ldw	r7,-4(fp)
    bb34:	e1bffe17 	ldw	r6,-8(fp)
    bb38:	e17ffd17 	ldw	r5,-12(fp)
    bb3c:	e13ffc17 	ldw	r4,-16(fp)
    bb40:	000bcb80 	call	bcb8 <alt_iic_isr_register>
}  
    bb44:	e037883a 	mov	sp,fp
    bb48:	dfc00117 	ldw	ra,4(sp)
    bb4c:	df000017 	ldw	fp,0(sp)
    bb50:	dec00204 	addi	sp,sp,8
    bb54:	f800283a 	ret

0000bb58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    bb58:	defff904 	addi	sp,sp,-28
    bb5c:	df000615 	stw	fp,24(sp)
    bb60:	df000604 	addi	fp,sp,24
    bb64:	e13ffe15 	stw	r4,-8(fp)
    bb68:	e17fff15 	stw	r5,-4(fp)
    bb6c:	e0bfff17 	ldw	r2,-4(fp)
    bb70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb74:	0005303a 	rdctl	r2,status
    bb78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb7c:	e0fffb17 	ldw	r3,-20(fp)
    bb80:	00bfff84 	movi	r2,-2
    bb84:	1884703a 	and	r2,r3,r2
    bb88:	1001703a 	wrctl	status,r2
  
  return context;
    bb8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bb90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    bb94:	00c00044 	movi	r3,1
    bb98:	e0bffa17 	ldw	r2,-24(fp)
    bb9c:	1884983a 	sll	r2,r3,r2
    bba0:	1007883a 	mov	r3,r2
    bba4:	d0a71617 	ldw	r2,-25512(gp)
    bba8:	1884b03a 	or	r2,r3,r2
    bbac:	d0a71615 	stw	r2,-25512(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bbb0:	d0a71617 	ldw	r2,-25512(gp)
    bbb4:	100170fa 	wrctl	ienable,r2
    bbb8:	e0bffc17 	ldw	r2,-16(fp)
    bbbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbc0:	e0bffd17 	ldw	r2,-12(fp)
    bbc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bbc8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    bbcc:	0001883a 	nop
}
    bbd0:	e037883a 	mov	sp,fp
    bbd4:	df000017 	ldw	fp,0(sp)
    bbd8:	dec00104 	addi	sp,sp,4
    bbdc:	f800283a 	ret

0000bbe0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    bbe0:	defff904 	addi	sp,sp,-28
    bbe4:	df000615 	stw	fp,24(sp)
    bbe8:	df000604 	addi	fp,sp,24
    bbec:	e13ffe15 	stw	r4,-8(fp)
    bbf0:	e17fff15 	stw	r5,-4(fp)
    bbf4:	e0bfff17 	ldw	r2,-4(fp)
    bbf8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bbfc:	0005303a 	rdctl	r2,status
    bc00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bc04:	e0fffb17 	ldw	r3,-20(fp)
    bc08:	00bfff84 	movi	r2,-2
    bc0c:	1884703a 	and	r2,r3,r2
    bc10:	1001703a 	wrctl	status,r2
  
  return context;
    bc14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    bc18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    bc1c:	00c00044 	movi	r3,1
    bc20:	e0bffa17 	ldw	r2,-24(fp)
    bc24:	1884983a 	sll	r2,r3,r2
    bc28:	0084303a 	nor	r2,zero,r2
    bc2c:	1007883a 	mov	r3,r2
    bc30:	d0a71617 	ldw	r2,-25512(gp)
    bc34:	1884703a 	and	r2,r3,r2
    bc38:	d0a71615 	stw	r2,-25512(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    bc3c:	d0a71617 	ldw	r2,-25512(gp)
    bc40:	100170fa 	wrctl	ienable,r2
    bc44:	e0bffc17 	ldw	r2,-16(fp)
    bc48:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc4c:	e0bffd17 	ldw	r2,-12(fp)
    bc50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    bc54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    bc58:	0001883a 	nop
}
    bc5c:	e037883a 	mov	sp,fp
    bc60:	df000017 	ldw	fp,0(sp)
    bc64:	dec00104 	addi	sp,sp,4
    bc68:	f800283a 	ret

0000bc6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    bc6c:	defffc04 	addi	sp,sp,-16
    bc70:	df000315 	stw	fp,12(sp)
    bc74:	df000304 	addi	fp,sp,12
    bc78:	e13ffe15 	stw	r4,-8(fp)
    bc7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    bc80:	000530fa 	rdctl	r2,ienable
    bc84:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    bc88:	00c00044 	movi	r3,1
    bc8c:	e0bfff17 	ldw	r2,-4(fp)
    bc90:	1884983a 	sll	r2,r3,r2
    bc94:	1007883a 	mov	r3,r2
    bc98:	e0bffd17 	ldw	r2,-12(fp)
    bc9c:	1884703a 	and	r2,r3,r2
    bca0:	1004c03a 	cmpne	r2,r2,zero
    bca4:	10803fcc 	andi	r2,r2,255
}
    bca8:	e037883a 	mov	sp,fp
    bcac:	df000017 	ldw	fp,0(sp)
    bcb0:	dec00104 	addi	sp,sp,4
    bcb4:	f800283a 	ret

0000bcb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    bcb8:	defff504 	addi	sp,sp,-44
    bcbc:	dfc00a15 	stw	ra,40(sp)
    bcc0:	df000915 	stw	fp,36(sp)
    bcc4:	df000904 	addi	fp,sp,36
    bcc8:	e13ffc15 	stw	r4,-16(fp)
    bccc:	e17ffd15 	stw	r5,-12(fp)
    bcd0:	e1bffe15 	stw	r6,-8(fp)
    bcd4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    bcd8:	00bffa84 	movi	r2,-22
    bcdc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    bce0:	e0bffd17 	ldw	r2,-12(fp)
    bce4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    bce8:	e0bff817 	ldw	r2,-32(fp)
    bcec:	10800808 	cmpgei	r2,r2,32
    bcf0:	1000271e 	bne	r2,zero,bd90 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bcf4:	0005303a 	rdctl	r2,status
    bcf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bcfc:	e0fffb17 	ldw	r3,-20(fp)
    bd00:	00bfff84 	movi	r2,-2
    bd04:	1884703a 	and	r2,r3,r2
    bd08:	1001703a 	wrctl	status,r2
  
  return context;
    bd0c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    bd10:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    bd14:	00800074 	movhi	r2,1
    bd18:	109ee104 	addi	r2,r2,31620
    bd1c:	e0fff817 	ldw	r3,-32(fp)
    bd20:	180690fa 	slli	r3,r3,3
    bd24:	10c5883a 	add	r2,r2,r3
    bd28:	e0fffe17 	ldw	r3,-8(fp)
    bd2c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    bd30:	00800074 	movhi	r2,1
    bd34:	109ee104 	addi	r2,r2,31620
    bd38:	e0fff817 	ldw	r3,-32(fp)
    bd3c:	180690fa 	slli	r3,r3,3
    bd40:	10c5883a 	add	r2,r2,r3
    bd44:	10800104 	addi	r2,r2,4
    bd48:	e0ffff17 	ldw	r3,-4(fp)
    bd4c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    bd50:	e0bffe17 	ldw	r2,-8(fp)
    bd54:	10000526 	beq	r2,zero,bd6c <alt_iic_isr_register+0xb4>
    bd58:	e0bff817 	ldw	r2,-32(fp)
    bd5c:	100b883a 	mov	r5,r2
    bd60:	e13ffc17 	ldw	r4,-16(fp)
    bd64:	000bb580 	call	bb58 <alt_ic_irq_enable>
    bd68:	00000406 	br	bd7c <alt_iic_isr_register+0xc4>
    bd6c:	e0bff817 	ldw	r2,-32(fp)
    bd70:	100b883a 	mov	r5,r2
    bd74:	e13ffc17 	ldw	r4,-16(fp)
    bd78:	000bbe00 	call	bbe0 <alt_ic_irq_disable>
    bd7c:	e0bff715 	stw	r2,-36(fp)
    bd80:	e0bffa17 	ldw	r2,-24(fp)
    bd84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bd88:	e0bff917 	ldw	r2,-28(fp)
    bd8c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    bd90:	e0bff717 	ldw	r2,-36(fp)
}
    bd94:	e037883a 	mov	sp,fp
    bd98:	dfc00117 	ldw	ra,4(sp)
    bd9c:	df000017 	ldw	fp,0(sp)
    bda0:	dec00204 	addi	sp,sp,8
    bda4:	f800283a 	ret

0000bda8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    bda8:	defff804 	addi	sp,sp,-32
    bdac:	dfc00715 	stw	ra,28(sp)
    bdb0:	df000615 	stw	fp,24(sp)
    bdb4:	dc000515 	stw	r16,20(sp)
    bdb8:	df000604 	addi	fp,sp,24
    bdbc:	e13ffb15 	stw	r4,-20(fp)
    bdc0:	e17ffc15 	stw	r5,-16(fp)
    bdc4:	e1bffd15 	stw	r6,-12(fp)
    bdc8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    bdcc:	e1bffe17 	ldw	r6,-8(fp)
    bdd0:	e17ffd17 	ldw	r5,-12(fp)
    bdd4:	e13ffc17 	ldw	r4,-16(fp)
    bdd8:	000c0300 	call	c030 <open>
    bddc:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    bde0:	e0bffa17 	ldw	r2,-24(fp)
    bde4:	10002216 	blt	r2,zero,be70 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    bde8:	04000074 	movhi	r16,1
    bdec:	8436ae04 	addi	r16,r16,-9544
    bdf0:	e0bffa17 	ldw	r2,-24(fp)
    bdf4:	01400304 	movi	r5,12
    bdf8:	1009883a 	mov	r4,r2
    bdfc:	00024480 	call	2448 <__mulsi3>
    be00:	8085883a 	add	r2,r16,r2
    be04:	10c00017 	ldw	r3,0(r2)
    be08:	e0bffb17 	ldw	r2,-20(fp)
    be0c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    be10:	04000074 	movhi	r16,1
    be14:	8436ae04 	addi	r16,r16,-9544
    be18:	e0bffa17 	ldw	r2,-24(fp)
    be1c:	01400304 	movi	r5,12
    be20:	1009883a 	mov	r4,r2
    be24:	00024480 	call	2448 <__mulsi3>
    be28:	8085883a 	add	r2,r16,r2
    be2c:	10800104 	addi	r2,r2,4
    be30:	10c00017 	ldw	r3,0(r2)
    be34:	e0bffb17 	ldw	r2,-20(fp)
    be38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    be3c:	04000074 	movhi	r16,1
    be40:	8436ae04 	addi	r16,r16,-9544
    be44:	e0bffa17 	ldw	r2,-24(fp)
    be48:	01400304 	movi	r5,12
    be4c:	1009883a 	mov	r4,r2
    be50:	00024480 	call	2448 <__mulsi3>
    be54:	8085883a 	add	r2,r16,r2
    be58:	10800204 	addi	r2,r2,8
    be5c:	10c00017 	ldw	r3,0(r2)
    be60:	e0bffb17 	ldw	r2,-20(fp)
    be64:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    be68:	e13ffa17 	ldw	r4,-24(fp)
    be6c:	0002b8c0 	call	2b8c <alt_release_fd>
  }
} 
    be70:	0001883a 	nop
    be74:	e6ffff04 	addi	sp,fp,-4
    be78:	dfc00217 	ldw	ra,8(sp)
    be7c:	df000117 	ldw	fp,4(sp)
    be80:	dc000017 	ldw	r16,0(sp)
    be84:	dec00304 	addi	sp,sp,12
    be88:	f800283a 	ret

0000be8c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    be8c:	defffb04 	addi	sp,sp,-20
    be90:	dfc00415 	stw	ra,16(sp)
    be94:	df000315 	stw	fp,12(sp)
    be98:	df000304 	addi	fp,sp,12
    be9c:	e13ffd15 	stw	r4,-12(fp)
    bea0:	e17ffe15 	stw	r5,-8(fp)
    bea4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    bea8:	01c07fc4 	movi	r7,511
    beac:	01800044 	movi	r6,1
    beb0:	e17ffd17 	ldw	r5,-12(fp)
    beb4:	01000074 	movhi	r4,1
    beb8:	2136b104 	addi	r4,r4,-9532
    bebc:	000bda80 	call	bda8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    bec0:	01c07fc4 	movi	r7,511
    bec4:	000d883a 	mov	r6,zero
    bec8:	e17ffe17 	ldw	r5,-8(fp)
    becc:	01000074 	movhi	r4,1
    bed0:	2136ae04 	addi	r4,r4,-9544
    bed4:	000bda80 	call	bda8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    bed8:	01c07fc4 	movi	r7,511
    bedc:	01800044 	movi	r6,1
    bee0:	e17fff17 	ldw	r5,-4(fp)
    bee4:	01000074 	movhi	r4,1
    bee8:	2136b404 	addi	r4,r4,-9520
    beec:	000bda80 	call	bda8 <alt_open_fd>
}  
    bef0:	0001883a 	nop
    bef4:	e037883a 	mov	sp,fp
    bef8:	dfc00117 	ldw	ra,4(sp)
    befc:	df000017 	ldw	fp,0(sp)
    bf00:	dec00204 	addi	sp,sp,8
    bf04:	f800283a 	ret

0000bf08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bf08:	defffe04 	addi	sp,sp,-8
    bf0c:	dfc00115 	stw	ra,4(sp)
    bf10:	df000015 	stw	fp,0(sp)
    bf14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    bf18:	d0a00917 	ldw	r2,-32732(gp)
    bf1c:	10000326 	beq	r2,zero,bf2c <alt_get_errno+0x24>
    bf20:	d0a00917 	ldw	r2,-32732(gp)
    bf24:	103ee83a 	callr	r2
    bf28:	00000106 	br	bf30 <alt_get_errno+0x28>
    bf2c:	d0a6f904 	addi	r2,gp,-25628
}
    bf30:	e037883a 	mov	sp,fp
    bf34:	dfc00117 	ldw	ra,4(sp)
    bf38:	df000017 	ldw	fp,0(sp)
    bf3c:	dec00204 	addi	sp,sp,8
    bf40:	f800283a 	ret

0000bf44 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    bf44:	defffb04 	addi	sp,sp,-20
    bf48:	dfc00415 	stw	ra,16(sp)
    bf4c:	df000315 	stw	fp,12(sp)
    bf50:	dc000215 	stw	r16,8(sp)
    bf54:	df000304 	addi	fp,sp,12
    bf58:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    bf5c:	e0bffe17 	ldw	r2,-8(fp)
    bf60:	10800217 	ldw	r2,8(r2)
    bf64:	10d00034 	orhi	r3,r2,16384
    bf68:	e0bffe17 	ldw	r2,-8(fp)
    bf6c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bf70:	e03ffd15 	stw	zero,-12(fp)
    bf74:	00002306 	br	c004 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bf78:	04000074 	movhi	r16,1
    bf7c:	8436ae04 	addi	r16,r16,-9544
    bf80:	e0bffd17 	ldw	r2,-12(fp)
    bf84:	01400304 	movi	r5,12
    bf88:	1009883a 	mov	r4,r2
    bf8c:	00024480 	call	2448 <__mulsi3>
    bf90:	8085883a 	add	r2,r16,r2
    bf94:	10c00017 	ldw	r3,0(r2)
    bf98:	e0bffe17 	ldw	r2,-8(fp)
    bf9c:	10800017 	ldw	r2,0(r2)
    bfa0:	1880151e 	bne	r3,r2,bff8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfa4:	04000074 	movhi	r16,1
    bfa8:	8436ae04 	addi	r16,r16,-9544
    bfac:	e0bffd17 	ldw	r2,-12(fp)
    bfb0:	01400304 	movi	r5,12
    bfb4:	1009883a 	mov	r4,r2
    bfb8:	00024480 	call	2448 <__mulsi3>
    bfbc:	8085883a 	add	r2,r16,r2
    bfc0:	10800204 	addi	r2,r2,8
    bfc4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    bfc8:	10000b0e 	bge	r2,zero,bff8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    bfcc:	01400304 	movi	r5,12
    bfd0:	e13ffd17 	ldw	r4,-12(fp)
    bfd4:	00024480 	call	2448 <__mulsi3>
    bfd8:	1007883a 	mov	r3,r2
    bfdc:	00800074 	movhi	r2,1
    bfe0:	10b6ae04 	addi	r2,r2,-9544
    bfe4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    bfe8:	e0bffe17 	ldw	r2,-8(fp)
    bfec:	18800226 	beq	r3,r2,bff8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    bff0:	00bffcc4 	movi	r2,-13
    bff4:	00000806 	br	c018 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    bff8:	e0bffd17 	ldw	r2,-12(fp)
    bffc:	10800044 	addi	r2,r2,1
    c000:	e0bffd15 	stw	r2,-12(fp)
    c004:	d0a00817 	ldw	r2,-32736(gp)
    c008:	1007883a 	mov	r3,r2
    c00c:	e0bffd17 	ldw	r2,-12(fp)
    c010:	18bfd92e 	bgeu	r3,r2,bf78 <__alt_data_end+0xffff38d8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c014:	0005883a 	mov	r2,zero
}
    c018:	e6ffff04 	addi	sp,fp,-4
    c01c:	dfc00217 	ldw	ra,8(sp)
    c020:	df000117 	ldw	fp,4(sp)
    c024:	dc000017 	ldw	r16,0(sp)
    c028:	dec00304 	addi	sp,sp,12
    c02c:	f800283a 	ret

0000c030 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c030:	defff604 	addi	sp,sp,-40
    c034:	dfc00915 	stw	ra,36(sp)
    c038:	df000815 	stw	fp,32(sp)
    c03c:	df000804 	addi	fp,sp,32
    c040:	e13ffd15 	stw	r4,-12(fp)
    c044:	e17ffe15 	stw	r5,-8(fp)
    c048:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c04c:	00bfffc4 	movi	r2,-1
    c050:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    c054:	00bffb44 	movi	r2,-19
    c058:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    c05c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c060:	d1600604 	addi	r5,gp,-32744
    c064:	e13ffd17 	ldw	r4,-12(fp)
    c068:	000c6ac0 	call	c6ac <alt_find_dev>
    c06c:	e0bff815 	stw	r2,-32(fp)
    c070:	e0bff817 	ldw	r2,-32(fp)
    c074:	1000051e 	bne	r2,zero,c08c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c078:	e13ffd17 	ldw	r4,-12(fp)
    c07c:	000c73c0 	call	c73c <alt_find_file>
    c080:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    c084:	00800044 	movi	r2,1
    c088:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c08c:	e0bff817 	ldw	r2,-32(fp)
    c090:	10002b26 	beq	r2,zero,c140 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c094:	e13ff817 	ldw	r4,-32(fp)
    c098:	000c8440 	call	c844 <alt_get_fd>
    c09c:	e0bff915 	stw	r2,-28(fp)
    c0a0:	e0bff917 	ldw	r2,-28(fp)
    c0a4:	1000030e 	bge	r2,zero,c0b4 <open+0x84>
    {
      status = index;
    c0a8:	e0bff917 	ldw	r2,-28(fp)
    c0ac:	e0bffa15 	stw	r2,-24(fp)
    c0b0:	00002506 	br	c148 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    c0b4:	01400304 	movi	r5,12
    c0b8:	e13ff917 	ldw	r4,-28(fp)
    c0bc:	00024480 	call	2448 <__mulsi3>
    c0c0:	1007883a 	mov	r3,r2
    c0c4:	00800074 	movhi	r2,1
    c0c8:	10b6ae04 	addi	r2,r2,-9544
    c0cc:	1885883a 	add	r2,r3,r2
    c0d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c0d4:	e0fffe17 	ldw	r3,-8(fp)
    c0d8:	00900034 	movhi	r2,16384
    c0dc:	10bfffc4 	addi	r2,r2,-1
    c0e0:	1886703a 	and	r3,r3,r2
    c0e4:	e0bffc17 	ldw	r2,-16(fp)
    c0e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c0ec:	e0bffb17 	ldw	r2,-20(fp)
    c0f0:	1000051e 	bne	r2,zero,c108 <open+0xd8>
    c0f4:	e13ffc17 	ldw	r4,-16(fp)
    c0f8:	000bf440 	call	bf44 <alt_file_locked>
    c0fc:	e0bffa15 	stw	r2,-24(fp)
    c100:	e0bffa17 	ldw	r2,-24(fp)
    c104:	10001016 	blt	r2,zero,c148 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c108:	e0bff817 	ldw	r2,-32(fp)
    c10c:	10800317 	ldw	r2,12(r2)
    c110:	10000826 	beq	r2,zero,c134 <open+0x104>
    c114:	e0bff817 	ldw	r2,-32(fp)
    c118:	10800317 	ldw	r2,12(r2)
    c11c:	e1ffff17 	ldw	r7,-4(fp)
    c120:	e1bffe17 	ldw	r6,-8(fp)
    c124:	e17ffd17 	ldw	r5,-12(fp)
    c128:	e13ffc17 	ldw	r4,-16(fp)
    c12c:	103ee83a 	callr	r2
    c130:	00000106 	br	c138 <open+0x108>
    c134:	0005883a 	mov	r2,zero
    c138:	e0bffa15 	stw	r2,-24(fp)
    c13c:	00000206 	br	c148 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    c140:	00bffb44 	movi	r2,-19
    c144:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    c148:	e0bffa17 	ldw	r2,-24(fp)
    c14c:	1000090e 	bge	r2,zero,c174 <open+0x144>
  {
    alt_release_fd (index);  
    c150:	e13ff917 	ldw	r4,-28(fp)
    c154:	0002b8c0 	call	2b8c <alt_release_fd>
    ALT_ERRNO = -status;
    c158:	000bf080 	call	bf08 <alt_get_errno>
    c15c:	1007883a 	mov	r3,r2
    c160:	e0bffa17 	ldw	r2,-24(fp)
    c164:	0085c83a 	sub	r2,zero,r2
    c168:	18800015 	stw	r2,0(r3)
    return -1;
    c16c:	00bfffc4 	movi	r2,-1
    c170:	00000106 	br	c178 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    c174:	e0bff917 	ldw	r2,-28(fp)
}
    c178:	e037883a 	mov	sp,fp
    c17c:	dfc00117 	ldw	ra,4(sp)
    c180:	df000017 	ldw	fp,0(sp)
    c184:	dec00204 	addi	sp,sp,8
    c188:	f800283a 	ret

0000c18c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    c18c:	defffa04 	addi	sp,sp,-24
    c190:	df000515 	stw	fp,20(sp)
    c194:	df000504 	addi	fp,sp,20
    c198:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c19c:	0005303a 	rdctl	r2,status
    c1a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c1a4:	e0fffc17 	ldw	r3,-16(fp)
    c1a8:	00bfff84 	movi	r2,-2
    c1ac:	1884703a 	and	r2,r3,r2
    c1b0:	1001703a 	wrctl	status,r2
  
  return context;
    c1b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    c1b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    c1bc:	e0bfff17 	ldw	r2,-4(fp)
    c1c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    c1c4:	e0bffd17 	ldw	r2,-12(fp)
    c1c8:	10800017 	ldw	r2,0(r2)
    c1cc:	e0fffd17 	ldw	r3,-12(fp)
    c1d0:	18c00117 	ldw	r3,4(r3)
    c1d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    c1d8:	e0bffd17 	ldw	r2,-12(fp)
    c1dc:	10800117 	ldw	r2,4(r2)
    c1e0:	e0fffd17 	ldw	r3,-12(fp)
    c1e4:	18c00017 	ldw	r3,0(r3)
    c1e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    c1ec:	e0bffd17 	ldw	r2,-12(fp)
    c1f0:	e0fffd17 	ldw	r3,-12(fp)
    c1f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    c1f8:	e0bffd17 	ldw	r2,-12(fp)
    c1fc:	e0fffd17 	ldw	r3,-12(fp)
    c200:	10c00015 	stw	r3,0(r2)
    c204:	e0bffb17 	ldw	r2,-20(fp)
    c208:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c20c:	e0bffe17 	ldw	r2,-8(fp)
    c210:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    c214:	0001883a 	nop
    c218:	e037883a 	mov	sp,fp
    c21c:	df000017 	ldw	fp,0(sp)
    c220:	dec00104 	addi	sp,sp,4
    c224:	f800283a 	ret

0000c228 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    c228:	defffb04 	addi	sp,sp,-20
    c22c:	dfc00415 	stw	ra,16(sp)
    c230:	df000315 	stw	fp,12(sp)
    c234:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    c238:	d0a02b17 	ldw	r2,-32596(gp)
    c23c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    c240:	d0a71817 	ldw	r2,-25504(gp)
    c244:	10800044 	addi	r2,r2,1
    c248:	d0a71815 	stw	r2,-25504(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c24c:	00002e06 	br	c308 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    c250:	e0bffd17 	ldw	r2,-12(fp)
    c254:	10800017 	ldw	r2,0(r2)
    c258:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    c25c:	e0bffd17 	ldw	r2,-12(fp)
    c260:	10800403 	ldbu	r2,16(r2)
    c264:	10803fcc 	andi	r2,r2,255
    c268:	10000426 	beq	r2,zero,c27c <alt_tick+0x54>
    c26c:	d0a71817 	ldw	r2,-25504(gp)
    c270:	1000021e 	bne	r2,zero,c27c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    c274:	e0bffd17 	ldw	r2,-12(fp)
    c278:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    c27c:	e0bffd17 	ldw	r2,-12(fp)
    c280:	10800217 	ldw	r2,8(r2)
    c284:	d0e71817 	ldw	r3,-25504(gp)
    c288:	18801d36 	bltu	r3,r2,c300 <alt_tick+0xd8>
    c28c:	e0bffd17 	ldw	r2,-12(fp)
    c290:	10800403 	ldbu	r2,16(r2)
    c294:	10803fcc 	andi	r2,r2,255
    c298:	1000191e 	bne	r2,zero,c300 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    c29c:	e0bffd17 	ldw	r2,-12(fp)
    c2a0:	10800317 	ldw	r2,12(r2)
    c2a4:	e0fffd17 	ldw	r3,-12(fp)
    c2a8:	18c00517 	ldw	r3,20(r3)
    c2ac:	1809883a 	mov	r4,r3
    c2b0:	103ee83a 	callr	r2
    c2b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    c2b8:	e0bfff17 	ldw	r2,-4(fp)
    c2bc:	1000031e 	bne	r2,zero,c2cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    c2c0:	e13ffd17 	ldw	r4,-12(fp)
    c2c4:	000c18c0 	call	c18c <alt_alarm_stop>
    c2c8:	00000d06 	br	c300 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    c2cc:	e0bffd17 	ldw	r2,-12(fp)
    c2d0:	10c00217 	ldw	r3,8(r2)
    c2d4:	e0bfff17 	ldw	r2,-4(fp)
    c2d8:	1887883a 	add	r3,r3,r2
    c2dc:	e0bffd17 	ldw	r2,-12(fp)
    c2e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    c2e4:	e0bffd17 	ldw	r2,-12(fp)
    c2e8:	10c00217 	ldw	r3,8(r2)
    c2ec:	d0a71817 	ldw	r2,-25504(gp)
    c2f0:	1880032e 	bgeu	r3,r2,c300 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    c2f4:	e0bffd17 	ldw	r2,-12(fp)
    c2f8:	00c00044 	movi	r3,1
    c2fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    c300:	e0bffe17 	ldw	r2,-8(fp)
    c304:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    c308:	e0fffd17 	ldw	r3,-12(fp)
    c30c:	d0a02b04 	addi	r2,gp,-32596
    c310:	18bfcf1e 	bne	r3,r2,c250 <__alt_data_end+0xffff3bb0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    c314:	0003da00 	call	3da0 <OSTimeTick>
}
    c318:	0001883a 	nop
    c31c:	e037883a 	mov	sp,fp
    c320:	dfc00117 	ldw	ra,4(sp)
    c324:	df000017 	ldw	fp,0(sp)
    c328:	dec00204 	addi	sp,sp,8
    c32c:	f800283a 	ret

0000c330 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    c330:	deffff04 	addi	sp,sp,-4
    c334:	df000015 	stw	fp,0(sp)
    c338:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    c33c:	000170fa 	wrctl	ienable,zero
}
    c340:	0001883a 	nop
    c344:	e037883a 	mov	sp,fp
    c348:	df000017 	ldw	fp,0(sp)
    c34c:	dec00104 	addi	sp,sp,4
    c350:	f800283a 	ret

0000c354 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    c354:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    c358:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    c35c:	d1271117 	ldw	r4,-25532(gp)

      stw ra,  0(sp)
    c360:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    c364:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    c368:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    c36c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    c370:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    c374:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    c378:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    c37c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    c380:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    c384:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    c388:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    c38c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c390:	000c5c80 	call	c5c8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    c394:	d1270c17 	ldw	r4,-25552(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    c398:	d1670407 	ldb	r5,-25584(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    c39c:	d1271115 	stw	r4,-25532(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    c3a0:	d1670445 	stb	r5,-25583(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    c3a4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    c3a8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    c3ac:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    c3b0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    c3b4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    c3b8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    c3bc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    c3c0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    c3c4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    c3c8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    c3cc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    c3d0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    c3d4:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    c3d8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    c3dc:	f800283a 	ret

0000c3e0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    c3e0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    c3e4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    c3e8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    c3ec:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    c3f0:	000c5c80 	call	c5c8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    c3f4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    c3f8:	d4a70245 	stb	r18,-25591(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    c3fc:	003fe506 	br	c394 <__alt_data_end+0xffff3cf4>

0000c400 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    c400:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    c404:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    c408:	10800054 	ori	r2,r2,1
      wrctl status, r2
    c40c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    c410:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    c414:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    c418:	dec00204 	addi	sp,sp,8

      callr r2
    c41c:	103ee83a 	callr	r2

      nop
    c420:	0001883a 	nop

0000c424 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    c424:	defff704 	addi	sp,sp,-36
    c428:	dfc00815 	stw	ra,32(sp)
    c42c:	df000715 	stw	fp,28(sp)
    c430:	df000704 	addi	fp,sp,28
    c434:	e13ffc15 	stw	r4,-16(fp)
    c438:	e17ffd15 	stw	r5,-12(fp)
    c43c:	e1bffe15 	stw	r6,-8(fp)
    c440:	3805883a 	mov	r2,r7
    c444:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    c448:	e0fffe17 	ldw	r3,-8(fp)
    c44c:	00bfff04 	movi	r2,-4
    c450:	1884703a 	and	r2,r3,r2
    c454:	10bef704 	addi	r2,r2,-1060
    c458:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    c45c:	01810904 	movi	r6,1060
    c460:	000b883a 	mov	r5,zero
    c464:	e13ff917 	ldw	r4,-28(fp)
    c468:	00004580 	call	458 <memset>
    c46c:	e0bff917 	ldw	r2,-28(fp)
    c470:	10c0bb04 	addi	r3,r2,748
    c474:	e0bff917 	ldw	r2,-28(fp)
    c478:	10c00115 	stw	r3,4(r2)
    c47c:	e0bff917 	ldw	r2,-28(fp)
    c480:	10c0d504 	addi	r3,r2,852
    c484:	e0bff917 	ldw	r2,-28(fp)
    c488:	10c00215 	stw	r3,8(r2)
    c48c:	e0bff917 	ldw	r2,-28(fp)
    c490:	10c0ef04 	addi	r3,r2,956
    c494:	e0bff917 	ldw	r2,-28(fp)
    c498:	10c00315 	stw	r3,12(r2)
    c49c:	e0fff917 	ldw	r3,-28(fp)
    c4a0:	00800074 	movhi	r2,1
    c4a4:	10b49804 	addi	r2,r2,-11680
    c4a8:	18800d15 	stw	r2,52(r3)
    c4ac:	e0bff917 	ldw	r2,-28(fp)
    c4b0:	00c00044 	movi	r3,1
    c4b4:	10c02915 	stw	r3,164(r2)
    c4b8:	10002a15 	stw	zero,168(r2)
    c4bc:	e0bff917 	ldw	r2,-28(fp)
    c4c0:	00ccc384 	movi	r3,13070
    c4c4:	10c02b0d 	sth	r3,172(r2)
    c4c8:	e0bff917 	ldw	r2,-28(fp)
    c4cc:	00eaf344 	movi	r3,-21555
    c4d0:	10c02b8d 	sth	r3,174(r2)
    c4d4:	e0bff917 	ldw	r2,-28(fp)
    c4d8:	00c48d04 	movi	r3,4660
    c4dc:	10c02c0d 	sth	r3,176(r2)
    c4e0:	e0bff917 	ldw	r2,-28(fp)
    c4e4:	00f99b44 	movi	r3,-6547
    c4e8:	10c02c8d 	sth	r3,178(r2)
    c4ec:	e0bff917 	ldw	r2,-28(fp)
    c4f0:	00f7bb04 	movi	r3,-8468
    c4f4:	10c02d0d 	sth	r3,180(r2)
    c4f8:	e0bff917 	ldw	r2,-28(fp)
    c4fc:	00c00144 	movi	r3,5
    c500:	10c02d8d 	sth	r3,182(r2)
    c504:	e0bff917 	ldw	r2,-28(fp)
    c508:	00c002c4 	movi	r3,11
    c50c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    c510:	e0bff917 	ldw	r2,-28(fp)
    c514:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    c518:	e0bffa17 	ldw	r2,-24(fp)
    c51c:	10bff304 	addi	r2,r2,-52
    c520:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    c524:	e0bffb17 	ldw	r2,-20(fp)
    c528:	10800c04 	addi	r2,r2,48
    c52c:	e0fffc17 	ldw	r3,-16(fp)
    c530:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    c534:	e0bffb17 	ldw	r2,-20(fp)
    c538:	10800b04 	addi	r2,r2,44
    c53c:	e0fffd17 	ldw	r3,-12(fp)
    c540:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    c544:	e0bffb17 	ldw	r2,-20(fp)
    c548:	10800a04 	addi	r2,r2,40
    c54c:	e0fff917 	ldw	r3,-28(fp)
    c550:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    c554:	00800074 	movhi	r2,1
    c558:	10b10004 	addi	r2,r2,-15360
    c55c:	10c00104 	addi	r3,r2,4
    c560:	e0bffb17 	ldw	r2,-20(fp)
    c564:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    c568:	e0bffb17 	ldw	r2,-20(fp)
}
    c56c:	e037883a 	mov	sp,fp
    c570:	dfc00117 	ldw	ra,4(sp)
    c574:	df000017 	ldw	fp,0(sp)
    c578:	dec00204 	addi	sp,sp,8
    c57c:	f800283a 	ret

0000c580 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    c580:	defffe04 	addi	sp,sp,-8
    c584:	df000115 	stw	fp,4(sp)
    c588:	df000104 	addi	fp,sp,4
    c58c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    c590:	0001883a 	nop
    c594:	e037883a 	mov	sp,fp
    c598:	df000017 	ldw	fp,0(sp)
    c59c:	dec00104 	addi	sp,sp,4
    c5a0:	f800283a 	ret

0000c5a4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    c5a4:	defffe04 	addi	sp,sp,-8
    c5a8:	df000115 	stw	fp,4(sp)
    c5ac:	df000104 	addi	fp,sp,4
    c5b0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    c5b4:	0001883a 	nop
    c5b8:	e037883a 	mov	sp,fp
    c5bc:	df000017 	ldw	fp,0(sp)
    c5c0:	dec00104 	addi	sp,sp,4
    c5c4:	f800283a 	ret

0000c5c8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    c5c8:	deffff04 	addi	sp,sp,-4
    c5cc:	df000015 	stw	fp,0(sp)
    c5d0:	d839883a 	mov	fp,sp
}
    c5d4:	0001883a 	nop
    c5d8:	e037883a 	mov	sp,fp
    c5dc:	df000017 	ldw	fp,0(sp)
    c5e0:	dec00104 	addi	sp,sp,4
    c5e4:	f800283a 	ret

0000c5e8 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    c5e8:	deffff04 	addi	sp,sp,-4
    c5ec:	df000015 	stw	fp,0(sp)
    c5f0:	d839883a 	mov	fp,sp
}
    c5f4:	0001883a 	nop
    c5f8:	e037883a 	mov	sp,fp
    c5fc:	df000017 	ldw	fp,0(sp)
    c600:	dec00104 	addi	sp,sp,4
    c604:	f800283a 	ret

0000c608 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    c608:	deffff04 	addi	sp,sp,-4
    c60c:	df000015 	stw	fp,0(sp)
    c610:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    c614:	0001883a 	nop
    c618:	e037883a 	mov	sp,fp
    c61c:	df000017 	ldw	fp,0(sp)
    c620:	dec00104 	addi	sp,sp,4
    c624:	f800283a 	ret

0000c628 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    c628:	deffff04 	addi	sp,sp,-4
    c62c:	df000015 	stw	fp,0(sp)
    c630:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    c634:	0001883a 	nop
    c638:	e037883a 	mov	sp,fp
    c63c:	df000017 	ldw	fp,0(sp)
    c640:	dec00104 	addi	sp,sp,4
    c644:	f800283a 	ret

0000c648 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    c648:	deffff04 	addi	sp,sp,-4
    c64c:	df000015 	stw	fp,0(sp)
    c650:	d839883a 	mov	fp,sp
}
    c654:	0001883a 	nop
    c658:	e037883a 	mov	sp,fp
    c65c:	df000017 	ldw	fp,0(sp)
    c660:	dec00104 	addi	sp,sp,4
    c664:	f800283a 	ret

0000c668 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    c668:	deffff04 	addi	sp,sp,-4
    c66c:	df000015 	stw	fp,0(sp)
    c670:	d839883a 	mov	fp,sp
}
    c674:	0001883a 	nop
    c678:	e037883a 	mov	sp,fp
    c67c:	df000017 	ldw	fp,0(sp)
    c680:	dec00104 	addi	sp,sp,4
    c684:	f800283a 	ret

0000c688 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    c688:	defffe04 	addi	sp,sp,-8
    c68c:	df000115 	stw	fp,4(sp)
    c690:	df000104 	addi	fp,sp,4
    c694:	e13fff15 	stw	r4,-4(fp)
}
    c698:	0001883a 	nop
    c69c:	e037883a 	mov	sp,fp
    c6a0:	df000017 	ldw	fp,0(sp)
    c6a4:	dec00104 	addi	sp,sp,4
    c6a8:	f800283a 	ret

0000c6ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    c6ac:	defffa04 	addi	sp,sp,-24
    c6b0:	dfc00515 	stw	ra,20(sp)
    c6b4:	df000415 	stw	fp,16(sp)
    c6b8:	df000404 	addi	fp,sp,16
    c6bc:	e13ffe15 	stw	r4,-8(fp)
    c6c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    c6c4:	e0bfff17 	ldw	r2,-4(fp)
    c6c8:	10800017 	ldw	r2,0(r2)
    c6cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    c6d0:	e13ffe17 	ldw	r4,-8(fp)
    c6d4:	000cbe40 	call	cbe4 <strlen>
    c6d8:	10800044 	addi	r2,r2,1
    c6dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c6e0:	00000d06 	br	c718 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    c6e4:	e0bffc17 	ldw	r2,-16(fp)
    c6e8:	10800217 	ldw	r2,8(r2)
    c6ec:	e0fffd17 	ldw	r3,-12(fp)
    c6f0:	180d883a 	mov	r6,r3
    c6f4:	e17ffe17 	ldw	r5,-8(fp)
    c6f8:	1009883a 	mov	r4,r2
    c6fc:	000ca200 	call	ca20 <memcmp>
    c700:	1000021e 	bne	r2,zero,c70c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    c704:	e0bffc17 	ldw	r2,-16(fp)
    c708:	00000706 	br	c728 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    c70c:	e0bffc17 	ldw	r2,-16(fp)
    c710:	10800017 	ldw	r2,0(r2)
    c714:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    c718:	e0fffc17 	ldw	r3,-16(fp)
    c71c:	e0bfff17 	ldw	r2,-4(fp)
    c720:	18bff01e 	bne	r3,r2,c6e4 <__alt_data_end+0xffff4044>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    c724:	0005883a 	mov	r2,zero
}
    c728:	e037883a 	mov	sp,fp
    c72c:	dfc00117 	ldw	ra,4(sp)
    c730:	df000017 	ldw	fp,0(sp)
    c734:	dec00204 	addi	sp,sp,8
    c738:	f800283a 	ret

0000c73c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    c73c:	defffb04 	addi	sp,sp,-20
    c740:	dfc00415 	stw	ra,16(sp)
    c744:	df000315 	stw	fp,12(sp)
    c748:	df000304 	addi	fp,sp,12
    c74c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    c750:	d0a00417 	ldw	r2,-32752(gp)
    c754:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c758:	00003106 	br	c820 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    c75c:	e0bffd17 	ldw	r2,-12(fp)
    c760:	10800217 	ldw	r2,8(r2)
    c764:	1009883a 	mov	r4,r2
    c768:	000cbe40 	call	cbe4 <strlen>
    c76c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    c770:	e0bffd17 	ldw	r2,-12(fp)
    c774:	10c00217 	ldw	r3,8(r2)
    c778:	e0bffe17 	ldw	r2,-8(fp)
    c77c:	10bfffc4 	addi	r2,r2,-1
    c780:	1885883a 	add	r2,r3,r2
    c784:	10800003 	ldbu	r2,0(r2)
    c788:	10803fcc 	andi	r2,r2,255
    c78c:	1080201c 	xori	r2,r2,128
    c790:	10bfe004 	addi	r2,r2,-128
    c794:	10800bd8 	cmpnei	r2,r2,47
    c798:	1000031e 	bne	r2,zero,c7a8 <alt_find_file+0x6c>
    {
      len -= 1;
    c79c:	e0bffe17 	ldw	r2,-8(fp)
    c7a0:	10bfffc4 	addi	r2,r2,-1
    c7a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c7a8:	e0bffe17 	ldw	r2,-8(fp)
    c7ac:	e0ffff17 	ldw	r3,-4(fp)
    c7b0:	1885883a 	add	r2,r3,r2
    c7b4:	10800003 	ldbu	r2,0(r2)
    c7b8:	10803fcc 	andi	r2,r2,255
    c7bc:	1080201c 	xori	r2,r2,128
    c7c0:	10bfe004 	addi	r2,r2,-128
    c7c4:	10800be0 	cmpeqi	r2,r2,47
    c7c8:	1000081e 	bne	r2,zero,c7ec <alt_find_file+0xb0>
    c7cc:	e0bffe17 	ldw	r2,-8(fp)
    c7d0:	e0ffff17 	ldw	r3,-4(fp)
    c7d4:	1885883a 	add	r2,r3,r2
    c7d8:	10800003 	ldbu	r2,0(r2)
    c7dc:	10803fcc 	andi	r2,r2,255
    c7e0:	1080201c 	xori	r2,r2,128
    c7e4:	10bfe004 	addi	r2,r2,-128
    c7e8:	10000a1e 	bne	r2,zero,c814 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    c7ec:	e0bffd17 	ldw	r2,-12(fp)
    c7f0:	10800217 	ldw	r2,8(r2)
    c7f4:	e0fffe17 	ldw	r3,-8(fp)
    c7f8:	180d883a 	mov	r6,r3
    c7fc:	e17fff17 	ldw	r5,-4(fp)
    c800:	1009883a 	mov	r4,r2
    c804:	000ca200 	call	ca20 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    c808:	1000021e 	bne	r2,zero,c814 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    c80c:	e0bffd17 	ldw	r2,-12(fp)
    c810:	00000706 	br	c830 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    c814:	e0bffd17 	ldw	r2,-12(fp)
    c818:	10800017 	ldw	r2,0(r2)
    c81c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    c820:	e0fffd17 	ldw	r3,-12(fp)
    c824:	d0a00404 	addi	r2,gp,-32752
    c828:	18bfcc1e 	bne	r3,r2,c75c <__alt_data_end+0xffff40bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    c82c:	0005883a 	mov	r2,zero
}
    c830:	e037883a 	mov	sp,fp
    c834:	dfc00117 	ldw	ra,4(sp)
    c838:	df000017 	ldw	fp,0(sp)
    c83c:	dec00204 	addi	sp,sp,8
    c840:	f800283a 	ret

0000c844 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    c844:	defff804 	addi	sp,sp,-32
    c848:	dfc00715 	stw	ra,28(sp)
    c84c:	df000615 	stw	fp,24(sp)
    c850:	dc000515 	stw	r16,20(sp)
    c854:	df000604 	addi	fp,sp,24
    c858:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    c85c:	00bffa04 	movi	r2,-24
    c860:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    c864:	d0a6fa17 	ldw	r2,-25624(gp)
    c868:	e0bffc15 	stw	r2,-16(fp)
    c86c:	e03ffd0d 	sth	zero,-12(fp)
    c870:	e0bffd0b 	ldhu	r2,-12(fp)
    c874:	e0fffd84 	addi	r3,fp,-10
    c878:	180d883a 	mov	r6,r3
    c87c:	100b883a 	mov	r5,r2
    c880:	e13ffc17 	ldw	r4,-16(fp)
    c884:	00085f00 	call	85f0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c888:	e03ffa15 	stw	zero,-24(fp)
    c88c:	00001d06 	br	c904 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
    c890:	04000074 	movhi	r16,1
    c894:	8436ae04 	addi	r16,r16,-9544
    c898:	e0bffa17 	ldw	r2,-24(fp)
    c89c:	01400304 	movi	r5,12
    c8a0:	1009883a 	mov	r4,r2
    c8a4:	00024480 	call	2448 <__mulsi3>
    c8a8:	8085883a 	add	r2,r16,r2
    c8ac:	10800017 	ldw	r2,0(r2)
    c8b0:	1000111e 	bne	r2,zero,c8f8 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
    c8b4:	04000074 	movhi	r16,1
    c8b8:	8436ae04 	addi	r16,r16,-9544
    c8bc:	e0bffa17 	ldw	r2,-24(fp)
    c8c0:	01400304 	movi	r5,12
    c8c4:	1009883a 	mov	r4,r2
    c8c8:	00024480 	call	2448 <__mulsi3>
    c8cc:	8085883a 	add	r2,r16,r2
    c8d0:	e0fffe17 	ldw	r3,-8(fp)
    c8d4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    c8d8:	d0e00817 	ldw	r3,-32736(gp)
    c8dc:	e0bffa17 	ldw	r2,-24(fp)
    c8e0:	1880020e 	bge	r3,r2,c8ec <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
    c8e4:	e0bffa17 	ldw	r2,-24(fp)
    c8e8:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
    c8ec:	e0bffa17 	ldw	r2,-24(fp)
    c8f0:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
    c8f4:	00000606 	br	c910 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    c8f8:	e0bffa17 	ldw	r2,-24(fp)
    c8fc:	10800044 	addi	r2,r2,1
    c900:	e0bffa15 	stw	r2,-24(fp)
    c904:	e0bffa17 	ldw	r2,-24(fp)
    c908:	10800810 	cmplti	r2,r2,32
    c90c:	103fe01e 	bne	r2,zero,c890 <__alt_data_end+0xffff41f0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    c910:	d0a6fa17 	ldw	r2,-25624(gp)
    c914:	1009883a 	mov	r4,r2
    c918:	00089680 	call	8968 <OSSemPost>

  return rc;
    c91c:	e0bffb17 	ldw	r2,-20(fp)
}
    c920:	e6ffff04 	addi	sp,fp,-4
    c924:	dfc00217 	ldw	ra,8(sp)
    c928:	df000117 	ldw	fp,4(sp)
    c92c:	dc000017 	ldw	r16,0(sp)
    c930:	dec00304 	addi	sp,sp,12
    c934:	f800283a 	ret

0000c938 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    c938:	defffe04 	addi	sp,sp,-8
    c93c:	df000115 	stw	fp,4(sp)
    c940:	df000104 	addi	fp,sp,4
    c944:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    c948:	e0bfff17 	ldw	r2,-4(fp)
    c94c:	10bffe84 	addi	r2,r2,-6
    c950:	10c00428 	cmpgeui	r3,r2,16
    c954:	18001a1e 	bne	r3,zero,c9c0 <alt_exception_cause_generated_bad_addr+0x88>
    c958:	100690ba 	slli	r3,r2,2
    c95c:	00800074 	movhi	r2,1
    c960:	10b25c04 	addi	r2,r2,-13968
    c964:	1885883a 	add	r2,r3,r2
    c968:	10800017 	ldw	r2,0(r2)
    c96c:	1000683a 	jmp	r2
    c970:	0000c9b0 	cmpltui	zero,zero,806
    c974:	0000c9b0 	cmpltui	zero,zero,806
    c978:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c97c:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c980:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c984:	0000c9b0 	cmpltui	zero,zero,806
    c988:	0000c9b8 	rdprs	zero,zero,806
    c98c:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c990:	0000c9b0 	cmpltui	zero,zero,806
    c994:	0000c9b0 	cmpltui	zero,zero,806
    c998:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c99c:	0000c9b0 	cmpltui	zero,zero,806
    c9a0:	0000c9b8 	rdprs	zero,zero,806
    c9a4:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c9a8:	0000c9c0 	call	c9c <__sinit.part.1+0x2c>
    c9ac:	0000c9b0 	cmpltui	zero,zero,806
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    c9b0:	00800044 	movi	r2,1
    c9b4:	00000306 	br	c9c4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    c9b8:	0005883a 	mov	r2,zero
    c9bc:	00000106 	br	c9c4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    c9c0:	0005883a 	mov	r2,zero
  }
}
    c9c4:	e037883a 	mov	sp,fp
    c9c8:	df000017 	ldw	fp,0(sp)
    c9cc:	dec00104 	addi	sp,sp,4
    c9d0:	f800283a 	ret

0000c9d4 <atexit>:
    c9d4:	200b883a 	mov	r5,r4
    c9d8:	000f883a 	mov	r7,zero
    c9dc:	000d883a 	mov	r6,zero
    c9e0:	0009883a 	mov	r4,zero
    c9e4:	000cc7c1 	jmpi	cc7c <__register_exitproc>

0000c9e8 <exit>:
    c9e8:	defffe04 	addi	sp,sp,-8
    c9ec:	000b883a 	mov	r5,zero
    c9f0:	dc000015 	stw	r16,0(sp)
    c9f4:	dfc00115 	stw	ra,4(sp)
    c9f8:	2021883a 	mov	r16,r4
    c9fc:	000cd940 	call	cd94 <__call_exitprocs>
    ca00:	00800074 	movhi	r2,1
    ca04:	10bb3404 	addi	r2,r2,-4912
    ca08:	11000017 	ldw	r4,0(r2)
    ca0c:	20800f17 	ldw	r2,60(r4)
    ca10:	10000126 	beq	r2,zero,ca18 <exit+0x30>
    ca14:	103ee83a 	callr	r2
    ca18:	8009883a 	mov	r4,r16
    ca1c:	000d0c80 	call	d0c8 <_exit>

0000ca20 <memcmp>:
    ca20:	01c000c4 	movi	r7,3
    ca24:	3980192e 	bgeu	r7,r6,ca8c <memcmp+0x6c>
    ca28:	2144b03a 	or	r2,r4,r5
    ca2c:	11c4703a 	and	r2,r2,r7
    ca30:	10000f26 	beq	r2,zero,ca70 <memcmp+0x50>
    ca34:	20800003 	ldbu	r2,0(r4)
    ca38:	28c00003 	ldbu	r3,0(r5)
    ca3c:	10c0151e 	bne	r2,r3,ca94 <memcmp+0x74>
    ca40:	31bfff84 	addi	r6,r6,-2
    ca44:	01ffffc4 	movi	r7,-1
    ca48:	00000406 	br	ca5c <memcmp+0x3c>
    ca4c:	20800003 	ldbu	r2,0(r4)
    ca50:	28c00003 	ldbu	r3,0(r5)
    ca54:	31bfffc4 	addi	r6,r6,-1
    ca58:	10c00e1e 	bne	r2,r3,ca94 <memcmp+0x74>
    ca5c:	21000044 	addi	r4,r4,1
    ca60:	29400044 	addi	r5,r5,1
    ca64:	31fff91e 	bne	r6,r7,ca4c <__alt_data_end+0xffff43ac>
    ca68:	0005883a 	mov	r2,zero
    ca6c:	f800283a 	ret
    ca70:	20c00017 	ldw	r3,0(r4)
    ca74:	28800017 	ldw	r2,0(r5)
    ca78:	18bfee1e 	bne	r3,r2,ca34 <__alt_data_end+0xffff4394>
    ca7c:	31bfff04 	addi	r6,r6,-4
    ca80:	21000104 	addi	r4,r4,4
    ca84:	29400104 	addi	r5,r5,4
    ca88:	39bff936 	bltu	r7,r6,ca70 <__alt_data_end+0xffff43d0>
    ca8c:	303fe91e 	bne	r6,zero,ca34 <__alt_data_end+0xffff4394>
    ca90:	003ff506 	br	ca68 <__alt_data_end+0xffff43c8>
    ca94:	10c5c83a 	sub	r2,r2,r3
    ca98:	f800283a 	ret

0000ca9c <memcpy>:
    ca9c:	defffd04 	addi	sp,sp,-12
    caa0:	dfc00215 	stw	ra,8(sp)
    caa4:	dc400115 	stw	r17,4(sp)
    caa8:	dc000015 	stw	r16,0(sp)
    caac:	00c003c4 	movi	r3,15
    cab0:	2005883a 	mov	r2,r4
    cab4:	1980452e 	bgeu	r3,r6,cbcc <memcpy+0x130>
    cab8:	2906b03a 	or	r3,r5,r4
    cabc:	18c000cc 	andi	r3,r3,3
    cac0:	1800441e 	bne	r3,zero,cbd4 <memcpy+0x138>
    cac4:	347ffc04 	addi	r17,r6,-16
    cac8:	8822d13a 	srli	r17,r17,4
    cacc:	28c00104 	addi	r3,r5,4
    cad0:	23400104 	addi	r13,r4,4
    cad4:	8820913a 	slli	r16,r17,4
    cad8:	2b000204 	addi	r12,r5,8
    cadc:	22c00204 	addi	r11,r4,8
    cae0:	84000504 	addi	r16,r16,20
    cae4:	2a800304 	addi	r10,r5,12
    cae8:	22400304 	addi	r9,r4,12
    caec:	2c21883a 	add	r16,r5,r16
    caf0:	2811883a 	mov	r8,r5
    caf4:	200f883a 	mov	r7,r4
    caf8:	41000017 	ldw	r4,0(r8)
    cafc:	1fc00017 	ldw	ra,0(r3)
    cb00:	63c00017 	ldw	r15,0(r12)
    cb04:	39000015 	stw	r4,0(r7)
    cb08:	53800017 	ldw	r14,0(r10)
    cb0c:	6fc00015 	stw	ra,0(r13)
    cb10:	5bc00015 	stw	r15,0(r11)
    cb14:	4b800015 	stw	r14,0(r9)
    cb18:	18c00404 	addi	r3,r3,16
    cb1c:	39c00404 	addi	r7,r7,16
    cb20:	42000404 	addi	r8,r8,16
    cb24:	6b400404 	addi	r13,r13,16
    cb28:	63000404 	addi	r12,r12,16
    cb2c:	5ac00404 	addi	r11,r11,16
    cb30:	52800404 	addi	r10,r10,16
    cb34:	4a400404 	addi	r9,r9,16
    cb38:	1c3fef1e 	bne	r3,r16,caf8 <__alt_data_end+0xffff4458>
    cb3c:	89c00044 	addi	r7,r17,1
    cb40:	380e913a 	slli	r7,r7,4
    cb44:	310003cc 	andi	r4,r6,15
    cb48:	02c000c4 	movi	r11,3
    cb4c:	11c7883a 	add	r3,r2,r7
    cb50:	29cb883a 	add	r5,r5,r7
    cb54:	5900212e 	bgeu	r11,r4,cbdc <memcpy+0x140>
    cb58:	1813883a 	mov	r9,r3
    cb5c:	2811883a 	mov	r8,r5
    cb60:	200f883a 	mov	r7,r4
    cb64:	42800017 	ldw	r10,0(r8)
    cb68:	4a400104 	addi	r9,r9,4
    cb6c:	39ffff04 	addi	r7,r7,-4
    cb70:	4abfff15 	stw	r10,-4(r9)
    cb74:	42000104 	addi	r8,r8,4
    cb78:	59fffa36 	bltu	r11,r7,cb64 <__alt_data_end+0xffff44c4>
    cb7c:	213fff04 	addi	r4,r4,-4
    cb80:	2008d0ba 	srli	r4,r4,2
    cb84:	318000cc 	andi	r6,r6,3
    cb88:	21000044 	addi	r4,r4,1
    cb8c:	2109883a 	add	r4,r4,r4
    cb90:	2109883a 	add	r4,r4,r4
    cb94:	1907883a 	add	r3,r3,r4
    cb98:	290b883a 	add	r5,r5,r4
    cb9c:	30000626 	beq	r6,zero,cbb8 <memcpy+0x11c>
    cba0:	198d883a 	add	r6,r3,r6
    cba4:	29c00003 	ldbu	r7,0(r5)
    cba8:	18c00044 	addi	r3,r3,1
    cbac:	29400044 	addi	r5,r5,1
    cbb0:	19ffffc5 	stb	r7,-1(r3)
    cbb4:	19bffb1e 	bne	r3,r6,cba4 <__alt_data_end+0xffff4504>
    cbb8:	dfc00217 	ldw	ra,8(sp)
    cbbc:	dc400117 	ldw	r17,4(sp)
    cbc0:	dc000017 	ldw	r16,0(sp)
    cbc4:	dec00304 	addi	sp,sp,12
    cbc8:	f800283a 	ret
    cbcc:	2007883a 	mov	r3,r4
    cbd0:	003ff206 	br	cb9c <__alt_data_end+0xffff44fc>
    cbd4:	2007883a 	mov	r3,r4
    cbd8:	003ff106 	br	cba0 <__alt_data_end+0xffff4500>
    cbdc:	200d883a 	mov	r6,r4
    cbe0:	003fee06 	br	cb9c <__alt_data_end+0xffff44fc>

0000cbe4 <strlen>:
    cbe4:	208000cc 	andi	r2,r4,3
    cbe8:	10002026 	beq	r2,zero,cc6c <strlen+0x88>
    cbec:	20800007 	ldb	r2,0(r4)
    cbf0:	10002026 	beq	r2,zero,cc74 <strlen+0x90>
    cbf4:	2005883a 	mov	r2,r4
    cbf8:	00000206 	br	cc04 <strlen+0x20>
    cbfc:	10c00007 	ldb	r3,0(r2)
    cc00:	18001826 	beq	r3,zero,cc64 <strlen+0x80>
    cc04:	10800044 	addi	r2,r2,1
    cc08:	10c000cc 	andi	r3,r2,3
    cc0c:	183ffb1e 	bne	r3,zero,cbfc <__alt_data_end+0xffff455c>
    cc10:	10c00017 	ldw	r3,0(r2)
    cc14:	01ffbff4 	movhi	r7,65279
    cc18:	39ffbfc4 	addi	r7,r7,-257
    cc1c:	00ca303a 	nor	r5,zero,r3
    cc20:	01a02074 	movhi	r6,32897
    cc24:	19c7883a 	add	r3,r3,r7
    cc28:	31a02004 	addi	r6,r6,-32640
    cc2c:	1946703a 	and	r3,r3,r5
    cc30:	1986703a 	and	r3,r3,r6
    cc34:	1800091e 	bne	r3,zero,cc5c <strlen+0x78>
    cc38:	10800104 	addi	r2,r2,4
    cc3c:	10c00017 	ldw	r3,0(r2)
    cc40:	19cb883a 	add	r5,r3,r7
    cc44:	00c6303a 	nor	r3,zero,r3
    cc48:	28c6703a 	and	r3,r5,r3
    cc4c:	1986703a 	and	r3,r3,r6
    cc50:	183ff926 	beq	r3,zero,cc38 <__alt_data_end+0xffff4598>
    cc54:	00000106 	br	cc5c <strlen+0x78>
    cc58:	10800044 	addi	r2,r2,1
    cc5c:	10c00007 	ldb	r3,0(r2)
    cc60:	183ffd1e 	bne	r3,zero,cc58 <__alt_data_end+0xffff45b8>
    cc64:	1105c83a 	sub	r2,r2,r4
    cc68:	f800283a 	ret
    cc6c:	2005883a 	mov	r2,r4
    cc70:	003fe706 	br	cc10 <__alt_data_end+0xffff4570>
    cc74:	0005883a 	mov	r2,zero
    cc78:	f800283a 	ret

0000cc7c <__register_exitproc>:
    cc7c:	defffa04 	addi	sp,sp,-24
    cc80:	dc000315 	stw	r16,12(sp)
    cc84:	04000074 	movhi	r16,1
    cc88:	843b3404 	addi	r16,r16,-4912
    cc8c:	80c00017 	ldw	r3,0(r16)
    cc90:	dc400415 	stw	r17,16(sp)
    cc94:	dfc00515 	stw	ra,20(sp)
    cc98:	18805217 	ldw	r2,328(r3)
    cc9c:	2023883a 	mov	r17,r4
    cca0:	10003726 	beq	r2,zero,cd80 <__register_exitproc+0x104>
    cca4:	10c00117 	ldw	r3,4(r2)
    cca8:	010007c4 	movi	r4,31
    ccac:	20c00e16 	blt	r4,r3,cce8 <__register_exitproc+0x6c>
    ccb0:	1a000044 	addi	r8,r3,1
    ccb4:	8800221e 	bne	r17,zero,cd40 <__register_exitproc+0xc4>
    ccb8:	18c00084 	addi	r3,r3,2
    ccbc:	18c7883a 	add	r3,r3,r3
    ccc0:	18c7883a 	add	r3,r3,r3
    ccc4:	12000115 	stw	r8,4(r2)
    ccc8:	10c7883a 	add	r3,r2,r3
    cccc:	19400015 	stw	r5,0(r3)
    ccd0:	0005883a 	mov	r2,zero
    ccd4:	dfc00517 	ldw	ra,20(sp)
    ccd8:	dc400417 	ldw	r17,16(sp)
    ccdc:	dc000317 	ldw	r16,12(sp)
    cce0:	dec00604 	addi	sp,sp,24
    cce4:	f800283a 	ret
    cce8:	00800034 	movhi	r2,0
    ccec:	10800004 	addi	r2,r2,0
    ccf0:	10002626 	beq	r2,zero,cd8c <__register_exitproc+0x110>
    ccf4:	01006404 	movi	r4,400
    ccf8:	d9400015 	stw	r5,0(sp)
    ccfc:	d9800115 	stw	r6,4(sp)
    cd00:	d9c00215 	stw	r7,8(sp)
    cd04:	00000000 	call	0 <__reset>
    cd08:	d9400017 	ldw	r5,0(sp)
    cd0c:	d9800117 	ldw	r6,4(sp)
    cd10:	d9c00217 	ldw	r7,8(sp)
    cd14:	10001d26 	beq	r2,zero,cd8c <__register_exitproc+0x110>
    cd18:	81000017 	ldw	r4,0(r16)
    cd1c:	10000115 	stw	zero,4(r2)
    cd20:	02000044 	movi	r8,1
    cd24:	22405217 	ldw	r9,328(r4)
    cd28:	0007883a 	mov	r3,zero
    cd2c:	12400015 	stw	r9,0(r2)
    cd30:	20805215 	stw	r2,328(r4)
    cd34:	10006215 	stw	zero,392(r2)
    cd38:	10006315 	stw	zero,396(r2)
    cd3c:	883fde26 	beq	r17,zero,ccb8 <__alt_data_end+0xffff4618>
    cd40:	18c9883a 	add	r4,r3,r3
    cd44:	2109883a 	add	r4,r4,r4
    cd48:	1109883a 	add	r4,r2,r4
    cd4c:	21802215 	stw	r6,136(r4)
    cd50:	01800044 	movi	r6,1
    cd54:	12406217 	ldw	r9,392(r2)
    cd58:	30cc983a 	sll	r6,r6,r3
    cd5c:	4992b03a 	or	r9,r9,r6
    cd60:	12406215 	stw	r9,392(r2)
    cd64:	21c04215 	stw	r7,264(r4)
    cd68:	01000084 	movi	r4,2
    cd6c:	893fd21e 	bne	r17,r4,ccb8 <__alt_data_end+0xffff4618>
    cd70:	11006317 	ldw	r4,396(r2)
    cd74:	218cb03a 	or	r6,r4,r6
    cd78:	11806315 	stw	r6,396(r2)
    cd7c:	003fce06 	br	ccb8 <__alt_data_end+0xffff4618>
    cd80:	18805304 	addi	r2,r3,332
    cd84:	18805215 	stw	r2,328(r3)
    cd88:	003fc606 	br	cca4 <__alt_data_end+0xffff4604>
    cd8c:	00bfffc4 	movi	r2,-1
    cd90:	003fd006 	br	ccd4 <__alt_data_end+0xffff4634>

0000cd94 <__call_exitprocs>:
    cd94:	defff504 	addi	sp,sp,-44
    cd98:	df000915 	stw	fp,36(sp)
    cd9c:	dd400615 	stw	r21,24(sp)
    cda0:	dc800315 	stw	r18,12(sp)
    cda4:	dfc00a15 	stw	ra,40(sp)
    cda8:	ddc00815 	stw	r23,32(sp)
    cdac:	dd800715 	stw	r22,28(sp)
    cdb0:	dd000515 	stw	r20,20(sp)
    cdb4:	dcc00415 	stw	r19,16(sp)
    cdb8:	dc400215 	stw	r17,8(sp)
    cdbc:	dc000115 	stw	r16,4(sp)
    cdc0:	d9000015 	stw	r4,0(sp)
    cdc4:	2839883a 	mov	fp,r5
    cdc8:	04800044 	movi	r18,1
    cdcc:	057fffc4 	movi	r21,-1
    cdd0:	00800074 	movhi	r2,1
    cdd4:	10bb3404 	addi	r2,r2,-4912
    cdd8:	12000017 	ldw	r8,0(r2)
    cddc:	45005217 	ldw	r20,328(r8)
    cde0:	44c05204 	addi	r19,r8,328
    cde4:	a0001c26 	beq	r20,zero,ce58 <__call_exitprocs+0xc4>
    cde8:	a0800117 	ldw	r2,4(r20)
    cdec:	15ffffc4 	addi	r23,r2,-1
    cdf0:	b8000d16 	blt	r23,zero,ce28 <__call_exitprocs+0x94>
    cdf4:	14000044 	addi	r16,r2,1
    cdf8:	8421883a 	add	r16,r16,r16
    cdfc:	8421883a 	add	r16,r16,r16
    ce00:	84402004 	addi	r17,r16,128
    ce04:	a463883a 	add	r17,r20,r17
    ce08:	a421883a 	add	r16,r20,r16
    ce0c:	e0001e26 	beq	fp,zero,ce88 <__call_exitprocs+0xf4>
    ce10:	80804017 	ldw	r2,256(r16)
    ce14:	e0801c26 	beq	fp,r2,ce88 <__call_exitprocs+0xf4>
    ce18:	bdffffc4 	addi	r23,r23,-1
    ce1c:	843fff04 	addi	r16,r16,-4
    ce20:	8c7fff04 	addi	r17,r17,-4
    ce24:	bd7ff91e 	bne	r23,r21,ce0c <__alt_data_end+0xffff476c>
    ce28:	00800034 	movhi	r2,0
    ce2c:	10800004 	addi	r2,r2,0
    ce30:	10000926 	beq	r2,zero,ce58 <__call_exitprocs+0xc4>
    ce34:	a0800117 	ldw	r2,4(r20)
    ce38:	1000301e 	bne	r2,zero,cefc <__call_exitprocs+0x168>
    ce3c:	a0800017 	ldw	r2,0(r20)
    ce40:	10003226 	beq	r2,zero,cf0c <__call_exitprocs+0x178>
    ce44:	a009883a 	mov	r4,r20
    ce48:	98800015 	stw	r2,0(r19)
    ce4c:	00000000 	call	0 <__reset>
    ce50:	9d000017 	ldw	r20,0(r19)
    ce54:	a03fe41e 	bne	r20,zero,cde8 <__alt_data_end+0xffff4748>
    ce58:	dfc00a17 	ldw	ra,40(sp)
    ce5c:	df000917 	ldw	fp,36(sp)
    ce60:	ddc00817 	ldw	r23,32(sp)
    ce64:	dd800717 	ldw	r22,28(sp)
    ce68:	dd400617 	ldw	r21,24(sp)
    ce6c:	dd000517 	ldw	r20,20(sp)
    ce70:	dcc00417 	ldw	r19,16(sp)
    ce74:	dc800317 	ldw	r18,12(sp)
    ce78:	dc400217 	ldw	r17,8(sp)
    ce7c:	dc000117 	ldw	r16,4(sp)
    ce80:	dec00b04 	addi	sp,sp,44
    ce84:	f800283a 	ret
    ce88:	a0800117 	ldw	r2,4(r20)
    ce8c:	80c00017 	ldw	r3,0(r16)
    ce90:	10bfffc4 	addi	r2,r2,-1
    ce94:	15c01426 	beq	r2,r23,cee8 <__call_exitprocs+0x154>
    ce98:	80000015 	stw	zero,0(r16)
    ce9c:	183fde26 	beq	r3,zero,ce18 <__alt_data_end+0xffff4778>
    cea0:	95c8983a 	sll	r4,r18,r23
    cea4:	a0806217 	ldw	r2,392(r20)
    cea8:	a5800117 	ldw	r22,4(r20)
    ceac:	2084703a 	and	r2,r4,r2
    ceb0:	10000b26 	beq	r2,zero,cee0 <__call_exitprocs+0x14c>
    ceb4:	a0806317 	ldw	r2,396(r20)
    ceb8:	2088703a 	and	r4,r4,r2
    cebc:	20000c1e 	bne	r4,zero,cef0 <__call_exitprocs+0x15c>
    cec0:	89400017 	ldw	r5,0(r17)
    cec4:	d9000017 	ldw	r4,0(sp)
    cec8:	183ee83a 	callr	r3
    cecc:	a0800117 	ldw	r2,4(r20)
    ced0:	15bfbf1e 	bne	r2,r22,cdd0 <__alt_data_end+0xffff4730>
    ced4:	98800017 	ldw	r2,0(r19)
    ced8:	153fcf26 	beq	r2,r20,ce18 <__alt_data_end+0xffff4778>
    cedc:	003fbc06 	br	cdd0 <__alt_data_end+0xffff4730>
    cee0:	183ee83a 	callr	r3
    cee4:	003ff906 	br	cecc <__alt_data_end+0xffff482c>
    cee8:	a5c00115 	stw	r23,4(r20)
    ceec:	003feb06 	br	ce9c <__alt_data_end+0xffff47fc>
    cef0:	89000017 	ldw	r4,0(r17)
    cef4:	183ee83a 	callr	r3
    cef8:	003ff406 	br	cecc <__alt_data_end+0xffff482c>
    cefc:	a0800017 	ldw	r2,0(r20)
    cf00:	a027883a 	mov	r19,r20
    cf04:	1029883a 	mov	r20,r2
    cf08:	003fb606 	br	cde4 <__alt_data_end+0xffff4744>
    cf0c:	0005883a 	mov	r2,zero
    cf10:	003ffb06 	br	cf00 <__alt_data_end+0xffff4860>

0000cf14 <__divsi3>:
    cf14:	20001b16 	blt	r4,zero,cf84 <__divsi3+0x70>
    cf18:	000f883a 	mov	r7,zero
    cf1c:	28001616 	blt	r5,zero,cf78 <__divsi3+0x64>
    cf20:	200d883a 	mov	r6,r4
    cf24:	29001a2e 	bgeu	r5,r4,cf90 <__divsi3+0x7c>
    cf28:	00800804 	movi	r2,32
    cf2c:	00c00044 	movi	r3,1
    cf30:	00000106 	br	cf38 <__divsi3+0x24>
    cf34:	10000d26 	beq	r2,zero,cf6c <__divsi3+0x58>
    cf38:	294b883a 	add	r5,r5,r5
    cf3c:	10bfffc4 	addi	r2,r2,-1
    cf40:	18c7883a 	add	r3,r3,r3
    cf44:	293ffb36 	bltu	r5,r4,cf34 <__alt_data_end+0xffff4894>
    cf48:	0005883a 	mov	r2,zero
    cf4c:	18000726 	beq	r3,zero,cf6c <__divsi3+0x58>
    cf50:	0005883a 	mov	r2,zero
    cf54:	31400236 	bltu	r6,r5,cf60 <__divsi3+0x4c>
    cf58:	314dc83a 	sub	r6,r6,r5
    cf5c:	10c4b03a 	or	r2,r2,r3
    cf60:	1806d07a 	srli	r3,r3,1
    cf64:	280ad07a 	srli	r5,r5,1
    cf68:	183ffa1e 	bne	r3,zero,cf54 <__alt_data_end+0xffff48b4>
    cf6c:	38000126 	beq	r7,zero,cf74 <__divsi3+0x60>
    cf70:	0085c83a 	sub	r2,zero,r2
    cf74:	f800283a 	ret
    cf78:	014bc83a 	sub	r5,zero,r5
    cf7c:	39c0005c 	xori	r7,r7,1
    cf80:	003fe706 	br	cf20 <__alt_data_end+0xffff4880>
    cf84:	0109c83a 	sub	r4,zero,r4
    cf88:	01c00044 	movi	r7,1
    cf8c:	003fe306 	br	cf1c <__alt_data_end+0xffff487c>
    cf90:	00c00044 	movi	r3,1
    cf94:	003fee06 	br	cf50 <__alt_data_end+0xffff48b0>

0000cf98 <__modsi3>:
    cf98:	20001716 	blt	r4,zero,cff8 <__modsi3+0x60>
    cf9c:	000f883a 	mov	r7,zero
    cfa0:	2005883a 	mov	r2,r4
    cfa4:	28001216 	blt	r5,zero,cff0 <__modsi3+0x58>
    cfa8:	2900162e 	bgeu	r5,r4,d004 <__modsi3+0x6c>
    cfac:	01800804 	movi	r6,32
    cfb0:	00c00044 	movi	r3,1
    cfb4:	00000106 	br	cfbc <__modsi3+0x24>
    cfb8:	30000a26 	beq	r6,zero,cfe4 <__modsi3+0x4c>
    cfbc:	294b883a 	add	r5,r5,r5
    cfc0:	31bfffc4 	addi	r6,r6,-1
    cfc4:	18c7883a 	add	r3,r3,r3
    cfc8:	293ffb36 	bltu	r5,r4,cfb8 <__alt_data_end+0xffff4918>
    cfcc:	18000526 	beq	r3,zero,cfe4 <__modsi3+0x4c>
    cfd0:	1806d07a 	srli	r3,r3,1
    cfd4:	11400136 	bltu	r2,r5,cfdc <__modsi3+0x44>
    cfd8:	1145c83a 	sub	r2,r2,r5
    cfdc:	280ad07a 	srli	r5,r5,1
    cfe0:	183ffb1e 	bne	r3,zero,cfd0 <__alt_data_end+0xffff4930>
    cfe4:	38000126 	beq	r7,zero,cfec <__modsi3+0x54>
    cfe8:	0085c83a 	sub	r2,zero,r2
    cfec:	f800283a 	ret
    cff0:	014bc83a 	sub	r5,zero,r5
    cff4:	003fec06 	br	cfa8 <__alt_data_end+0xffff4908>
    cff8:	0109c83a 	sub	r4,zero,r4
    cffc:	01c00044 	movi	r7,1
    d000:	003fe706 	br	cfa0 <__alt_data_end+0xffff4900>
    d004:	00c00044 	movi	r3,1
    d008:	003ff106 	br	cfd0 <__alt_data_end+0xffff4930>

0000d00c <__udivsi3>:
    d00c:	200d883a 	mov	r6,r4
    d010:	2900152e 	bgeu	r5,r4,d068 <__udivsi3+0x5c>
    d014:	28001416 	blt	r5,zero,d068 <__udivsi3+0x5c>
    d018:	00800804 	movi	r2,32
    d01c:	00c00044 	movi	r3,1
    d020:	00000206 	br	d02c <__udivsi3+0x20>
    d024:	10000e26 	beq	r2,zero,d060 <__udivsi3+0x54>
    d028:	28000516 	blt	r5,zero,d040 <__udivsi3+0x34>
    d02c:	294b883a 	add	r5,r5,r5
    d030:	10bfffc4 	addi	r2,r2,-1
    d034:	18c7883a 	add	r3,r3,r3
    d038:	293ffa36 	bltu	r5,r4,d024 <__alt_data_end+0xffff4984>
    d03c:	18000826 	beq	r3,zero,d060 <__udivsi3+0x54>
    d040:	0005883a 	mov	r2,zero
    d044:	31400236 	bltu	r6,r5,d050 <__udivsi3+0x44>
    d048:	314dc83a 	sub	r6,r6,r5
    d04c:	10c4b03a 	or	r2,r2,r3
    d050:	1806d07a 	srli	r3,r3,1
    d054:	280ad07a 	srli	r5,r5,1
    d058:	183ffa1e 	bne	r3,zero,d044 <__alt_data_end+0xffff49a4>
    d05c:	f800283a 	ret
    d060:	0005883a 	mov	r2,zero
    d064:	f800283a 	ret
    d068:	00c00044 	movi	r3,1
    d06c:	003ff406 	br	d040 <__alt_data_end+0xffff49a0>

0000d070 <__umodsi3>:
    d070:	2005883a 	mov	r2,r4
    d074:	2900122e 	bgeu	r5,r4,d0c0 <__umodsi3+0x50>
    d078:	28001116 	blt	r5,zero,d0c0 <__umodsi3+0x50>
    d07c:	01800804 	movi	r6,32
    d080:	00c00044 	movi	r3,1
    d084:	00000206 	br	d090 <__umodsi3+0x20>
    d088:	30000c26 	beq	r6,zero,d0bc <__umodsi3+0x4c>
    d08c:	28000516 	blt	r5,zero,d0a4 <__umodsi3+0x34>
    d090:	294b883a 	add	r5,r5,r5
    d094:	31bfffc4 	addi	r6,r6,-1
    d098:	18c7883a 	add	r3,r3,r3
    d09c:	293ffa36 	bltu	r5,r4,d088 <__alt_data_end+0xffff49e8>
    d0a0:	18000626 	beq	r3,zero,d0bc <__umodsi3+0x4c>
    d0a4:	1806d07a 	srli	r3,r3,1
    d0a8:	11400136 	bltu	r2,r5,d0b0 <__umodsi3+0x40>
    d0ac:	1145c83a 	sub	r2,r2,r5
    d0b0:	280ad07a 	srli	r5,r5,1
    d0b4:	183ffb1e 	bne	r3,zero,d0a4 <__alt_data_end+0xffff4a04>
    d0b8:	f800283a 	ret
    d0bc:	f800283a 	ret
    d0c0:	00c00044 	movi	r3,1
    d0c4:	003ff706 	br	d0a4 <__alt_data_end+0xffff4a04>

0000d0c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d0c8:	defffd04 	addi	sp,sp,-12
    d0cc:	df000215 	stw	fp,8(sp)
    d0d0:	df000204 	addi	fp,sp,8
    d0d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    d0d8:	d0270245 	stb	zero,-25591(gp)
    d0dc:	e0bfff17 	ldw	r2,-4(fp)
    d0e0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    d0e4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d0e8:	10000226 	beq	r2,zero,d0f4 <_exit+0x2c>
    ALT_SIM_FAIL();
    d0ec:	002af070 	cmpltui	zero,zero,43969
    d0f0:	00000106 	br	d0f8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    d0f4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d0f8:	003fff06 	br	d0f8 <__alt_data_end+0xffff4a58>
