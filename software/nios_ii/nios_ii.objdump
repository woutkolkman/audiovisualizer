
nios_ii.elf:     file format elf32-littlenios2
nios_ii.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000ac0c memsz 0x0000ac0c flags r-x
    LOAD off    0x0000bc2c vaddr 0x0000ac2c paddr 0x0000c338 align 2**12
         filesz 0x0000170c memsz 0x0000170c flags rw-
    LOAD off    0x0000da44 vaddr 0x0000da44 paddr 0x0000da44 align 2**12
         filesz 0x00000000 memsz 0x000073a8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a894  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000168  0000aac4  0000aac4  0000bac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000170c  0000ac2c  0000c338  0000bc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000073a8  0000da44  0000da44  0000da44  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00014dec  00014dec  0000d338  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000d338  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000798  00000000  00000000  0000d360  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00011a35  00000000  00000000  0000daf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004872  00000000  00000000  0001f52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000539c  00000000  00000000  00023d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001c38  00000000  00000000  0002913c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e70  00000000  00000000  0002ad74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000e77  00000000  00000000  0002dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0002ea5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e8  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00032082  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00032094  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00032095  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00032096  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000320a1  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000320ac  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  000320b7  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002a  00000000  00000000  000320c5  2**0
                  CONTENTS, READONLY
 26 .jdi          000045ae  00000000  00000000  000320ef  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00040480  00000000  00000000  0003669d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
0000aac4 l    d  .rodata	00000000 .rodata
0000ac2c l    d  .rwdata	00000000 .rwdata
0000da44 l    d  .bss	00000000 .bss
00014dec l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_ii_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000308 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_env_lock.c
0000c290 l     O .rwdata	00000004 lockid
0000da50 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0000c294 l     O .rwdata	00000004 lockid
0000da58 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00001dac l     F .text	00000048 OS_InitMisc
00001df4 l     F .text	0000006c OS_InitRdyList
00001f60 l     F .text	000000e4 OS_InitTCBList
00001ccc l     F .text	000000e0 OS_InitEventList
00001e60 l     F .text	00000080 OS_InitTaskIdle
00001ee0 l     F .text	00000080 OS_InitTaskStat
000021d0 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00003ee0 l     F .text	000000f4 OS_FlagTaskRdy
00003ca0 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00007fb8 l     F .text	00000034 alt_dev_reg
0000ac2c l     O .rwdata	0000106c jtag_uart_0
0000bc98 l     O .rwdata	0000002c adc_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000833c l     F .text	000002a4 altera_avalon_jtag_uart_irq
000085e0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00008dbc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00008fdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00009110 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000913c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000959c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000096fc l     F .text	0000003c alt_get_errno
00009738 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0000be6c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000dac0 g     O .bss	00000004 alt_instruction_exception_handler
0000c2e2 g     O .rwdata	00000002 OSTaskNameSize
000003f4 g     F .text	000000bc alt_main
00014cec g     O .bss	00000100 alt_irq
00004700 g     F .text	000000d8 OS_MemInit
0000c338 g       *ABS*	00000000 __flash_rwdata_start
00007f58 g     F .text	00000060 OSTimeSet
00000a20 g     F .text	00000610 OSEventPendMulti
00009df8 g     F .text	00000024 OSTaskCreateHook
0000c2ba g     O .rwdata	00000002 OSMboxEn
0000dac8 g     O .bss	00002000 TaskADCToFFTStack
00001088 g     F .text	0000004c OSIntEnter
0000c2ca g     O .rwdata	00000002 OSQEn
000006f4 g     F .text	000000cc __malloc_unlock
00009e60 g     F .text	00000020 OSTaskStatHook
0000da60 g     O .bss	00000001 OSLockNesting
0000c308 g     O .rwdata	00000002 OSDataSize
0000da61 g     O .bss	00000001 OSRunning
00009ea0 g     F .text	00000020 OSInitHookBegin
0000c300 g     O .rwdata	00000002 OSTmrSize
0000da64 g     O .bss	00000004 OSIdleCtr
00009ba8 g     F .text	00000024 altera_nios2_gen2_irq_init
00009c78 g       .text	00000000 OSStartTsk
00002500 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000000c __reset
0000c306 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000c2a6 g     O .rwdata	00000002 OSEventSize
0000da68 g     O .bss	00000001 OSPrioHighRdy
00009e1c g     F .text	00000024 OSTaskDelHook
0000dac4 g     O .bss	00000004 errno
00009c58 g       .text	00000000 OSStartHighRdy
000069d8 g     F .text	000001e4 OSTaskCreateExt
000037e8 g     F .text	00000060 OSFlagPendGetFlagsRdy
0000c2e6 g     O .rwdata	00000002 OSTaskStatStkSize
00002964 g     F .text	00000308 OSFlagAccept
00004d44 g     F .text	000000b8 OSQFlush
000047d8 g     F .text	00000140 OSQAccept
0000da48 g     O .bss	00000004 alt_argv
00014290 g       *ABS*	00000000 _gp
0000682c g     F .text	000001ac OSTaskCreate
0000633c g     F .text	000004f0 OSTaskChangePrio
0000da5c g     O .bss	00000004 alt_heapsem
000027d4 g     F .text	00000190 OSDebugInit
00006bbc g     F .text	00000344 OSTaskDel
0000bcec g     O .rwdata	00000180 alt_fd_list
00011ac8 g     O .bss	00000370 OSFlagTbl
00001aac g     F .text	000000b8 OS_EventTaskRemove
00009f24 g     F .text	00000090 alt_find_dev
0000a314 g     F .text	00000148 memcpy
0000c2d0 g     O .rwdata	00000002 OSRdyTblSize
00009680 g     F .text	0000007c alt_io_redirect
0000aac4 g       *ABS*	00000000 __DTOR_END__
0000a1b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000007c0 g     F .text	00000120 OSEventNameGet
0000c2b4 g     O .rwdata	00000002 OSFlagMax
000010d4 g     F .text	000000f8 OSIntExit
0000c2ee g     O .rwdata	00000002 OSTCBSize
0000da69 g     O .bss	00000001 OSPrioCur
0000883c g     F .text	000002bc altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000a9ac g     F .text	00000064 .hidden __udivsi3
0000c2d4 g     O .rwdata	00000002 OSStkWidth
0000c2c8 g     O .rwdata	00000002 OSPtrSize
0000c2a8 g     O .rwdata	00000002 OSEventTblSize
00009bcc g       .text	00000000 OSCtxSw
0000da6c g     O .bss	00000004 OSTCBList
0000dab0 g     O .bss	00000004 alt_fd_list_lock
000002f4 g     F .text	00000014 TaskADCToFFT
00011e38 g     O .bss	00000c30 OSMemTbl
0000da70 g     O .bss	00000001 OSTickStepState
0000c2cc g     O .rwdata	00000002 OSQMax
00012a68 g     O .bss	00000800 OSTaskStatStk
0000433c g     F .text	000000f0 OSMemNameGet
0000c2ac g     O .rwdata	00000002 OSFlagEn
0000c2f2 g     O .rwdata	00000002 OSTimeTickHookEn
000051f4 g     F .text	00000168 OSQPost
00003fd4 g     F .text	000000a4 OS_FlagUnlink
0000c31c g     O .rwdata	00000004 alt_max_fd
00002098 g     F .text	00000068 OS_MemCopy
00002100 g     F .text	000000d0 OS_Sched
0000424c g     F .text	000000f0 OSMemGet
000071e8 g     F .text	000001b4 OSTaskNameSet
0000da74 g     O .bss	00000004 OSCtxSwCtr
00009e80 g     F .text	00000020 OSTimeTickHook
0000c2b6 g     O .rwdata	00000002 OSFlagNameSize
00001b64 g     F .text	00000100 OS_EventTaskRemoveMulti
0000195c g     F .text	00000150 OS_EventTaskWaitMulti
0000c2ce g     O .rwdata	00000002 OSQSize
00005ca4 g     F .text	0000020c OSSemPend
0000c330 g     O .rwdata	00000004 _global_impure_ptr
0000c2b8 g     O .rwdata	00000002 OSLowestPrio
00014dec g       *ABS*	00000000 __bss_end
000094ac g     F .text	000000f0 alt_iic_isr_register
00009f00 g     F .text	00000024 OSTCBInitHook
0000c2fe g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00009aa0 g     F .text	00000108 alt_tick
0000c2a0 g     O .rwdata	00000002 OSEventEn
0000c2fa g     O .rwdata	00000002 OSTmrCfgNameSize
00009460 g     F .text	0000004c alt_ic_irq_enabled
00003e00 g     F .text	000000e0 OS_FlagInit
00009a04 g     F .text	0000009c alt_alarm_stop
0000c2dc g     O .rwdata	00000002 OSTaskIdleStkSize
0000dab4 g     O .bss	00000004 alt_irq_active
000058dc g     F .text	000000b0 OSSemAccept
00004540 g     F .text	000000d8 OSMemPut
00004078 g     F .text	000001d4 OSMemCreate
0000da78 g     O .bss	00000004 OSIdleCtrMax
000000fc g     F .exceptions	000000d4 alt_irq_handler
0000bcc4 g     O .rwdata	00000028 alt_dev_null
0000c2f0 g     O .rwdata	00000002 OSTicksPerSec
00009bcc g       .text	00000000 OSIntCtxSw
000090f0 g     F .text	00000020 alt_dcache_flush_all
0000da7c g     O .bss	00000004 OSTCBFreeList
0000c338 g       *ABS*	00000000 __ram_rwdata_end
00005eb0 g     F .text	0000016c OSSemPendAbort
0000c314 g     O .rwdata	00000008 alt_dev_list
0000c2f4 g     O .rwdata	00000002 OSVersionNbr
0000fac8 g     O .bss	00002000 TaskStartStack
0000ac2c g       *ABS*	00000000 __ram_rodata_end
0000c29c g     O .rwdata	00000004 OSEndiannessTest
0000aa10 g     F .text	00000058 .hidden __umodsi3
0000c2ae g     O .rwdata	00000002 OSFlagGrpSize
00014dec g       *ABS*	00000000 end
000081f4 g     F .text	00000148 altera_avalon_jtag_uart_init
00002368 g     F .text	000000cc OS_TaskStat
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0000aac4 g       *ABS*	00000000 __CTOR_LIST__
000186a0 g       *ABS*	00000000 __alt_stack_pointer
00008e34 g     F .text	0000007c alt_avalon_timer_sc_init
00008af8 g     F .text	000002c4 altera_avalon_jtag_uart_write
00002044 g     F .text	00000054 OS_MemClr
00009c9c g     F .text	0000015c OSTaskStkInit
000016b4 g     F .text	00000198 OS_EventTaskRdy
0000a734 g     F .text	00000180 __call_exitprocs
0000da80 g     O .bss	00000001 OSCPUUsage
00000230 g     F .text	0000003c _start
0000dab8 g     O .bss	00000004 _alt_tick_rate
00004dfc g     F .text	0000028c OSQPend
00007aa8 g     F .text	00000104 OSTimeDly
0000dabc g     O .bss	00000004 _alt_nticks
00008024 g     F .text	0000006c alt_sys_init
0000a61c g     F .text	00000118 __register_exitproc
0000da81 g     O .bss	00000001 OSTaskCtr
00007bac g     F .text	0000017c OSTimeDlyHMSM
000086e4 g     F .text	00000068 altera_avalon_jtag_uart_close
0000aa68 g     F .text	00000028 .hidden __mulsi3
0000ac2c g       *ABS*	00000000 __ram_rwdata_start
0000aac4 g       *ABS*	00000000 __ram_rodata_start
0000c2a2 g     O .rwdata	00000002 OSEventMax
0000601c g     F .text	00000110 OSSemPost
00001258 g     F .text	000000dc OSSchedUnlock
00008090 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a0bc g     F .text	000000f4 alt_get_fd
0000da84 g     O .bss	00000004 OSMemFreeList
000013a4 g     F .text	000000b0 OSStatInit
00003bdc g     F .text	000000c4 OSFlagQuery
0000c2d8 g     O .rwdata	00000002 OSTaskCreateExtEn
0000a298 g     F .text	0000007c memcmp
00001694 g     F .text	00000020 OS_Dummy
00008150 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00014dec g       *ABS*	00000000 __alt_stack_base
000081a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00013268 g     O .bss	000001e0 OSQTbl
0000da88 g     O .bss	00000004 OSTCBHighRdy
0000da8c g     O .bss	00000004 OSQFreeList
00009fb4 g     F .text	00000108 alt_find_file
00009178 g     F .text	000000a4 alt_dev_llist_insert
000005d4 g     F .text	00000120 __malloc_lock
000008e0 g     F .text	00000140 OSEventNameSet
0000da90 g     O .bss	00000001 OSRdyGrp
0000da44 g       *ABS*	00000000 __bss_start
0000a45c g     F .text	00000128 memset
0000026c g     F .text	0000004c main
0000da4c g     O .bss	00000004 alt_envp
000080f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000aad8 g     O .rodata	00000100 OSUnMapTbl
0000c2d2 g     O .rwdata	00000002 OSSemEn
00003848 g     F .text	00000394 OSFlagPost
0000184c g     F .text	00000110 OS_EventTaskWait
00002434 g     F .text	000000cc OS_TaskStatStkChk
00006f00 g     F .text	00000150 OSTaskDelReq
0000c320 g     O .rwdata	00000004 alt_errno
00001334 g     F .text	00000070 OSStart
00000574 g     F .text	00000060 __env_unlock
0000739c g     F .text	000001d4 OSTaskResume
00004618 g     F .text	000000e8 OSMemQuery
0000c2e4 g     O .rwdata	00000002 OSTaskStatEn
0000c2be g     O .rwdata	00000002 OSMemMax
0000535c g     F .text	00000170 OSQPostFront
0000a8b4 g     F .text	00000084 .hidden __divsi3
0000da91 g     O .bss	00000003 OSRdyTbl
0000c298 g     O .rwdata	00000002 OSDebugEn
0000aac4 g       *ABS*	00000000 __CTOR_END__
0000c2b0 g     O .rwdata	00000002 OSFlagNodeSize
0000c2f8 g     O .rwdata	00000002 OSTmrCfgMax
00004918 g     F .text	000001ac OSQCreate
00007050 g     F .text	00000198 OSTaskNameGet
0000aac4 g       *ABS*	00000000 __flash_rodata_start
000054cc g     F .text	0000020c OSQPostOpt
00001454 g     F .text	00000220 OSTimeTick
0000c2e0 g     O .rwdata	00000002 OSTaskMax
0000aac4 g       *ABS*	00000000 __DTOR_LIST__
0000598c g     F .text	000000d8 OSSemCreate
0000c304 g     O .rwdata	00000002 OSTmrWheelSize
0000c2da g     O .rwdata	00000002 OSTaskDelEn
0000612c g     F .text	00000110 OSSemQuery
00004ac4 g     F .text	00000280 OSQDel
00005088 g     F .text	0000016c OSQPendAbort
00007fec g     F .text	00000038 alt_irq_init
00009980 g     F .text	00000084 alt_release_fd
0000a24c g     F .text	00000014 atexit
000011cc g     F .text	0000008c OSSchedLock
00002c6c g     F .text	00000108 OSFlagCreate
0000c334 g     O .rwdata	00000004 _impure_ptr
0000da44 g     O .bss	00000004 alt_argc
0000927c g     F .text	00000060 _do_dtors
0000c2aa g     O .rwdata	00000002 OSEventMultiEn
00002d74 g     F .text	00000248 OSFlagDel
0000da94 g     O .bss	00000004 OSEventFreeList
00000020 g       .exceptions	00000000 alt_irq_entry
00003230 g     F .text	000005b8 OSFlagPend
0000c2f6 g     O .rwdata	00000002 OSTmrEn
0000c30c g     O .rwdata	00000008 alt_fs_list
00002244 g     F .text	00000074 OS_StrCopy
0000c2c0 g     O .rwdata	00000002 OSMemNameSize
00009ec0 g     F .text	00000020 OSInitHookEnd
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000c2ec g     O .rwdata	00000002 OSTCBPrioTblMax
0000c2e8 g     O .rwdata	00000002 OSTaskStatStkChkEn
000092fc g     F .text	00000050 alt_ic_isr_register
0000c2bc g     O .rwdata	00000002 OSMemEn
0000c2c6 g     O .rwdata	00000002 OSMutexEn
0000c338 g       *ABS*	00000000 _edata
00014dec g       *ABS*	00000000 _end
0000da98 g     O .bss	00000001 OSIntNesting
00000230 g       *ABS*	00000000 __ram_exceptions_end
0000874c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00007d28 g     F .text	000001d4 OSTimeDlyResume
000030e4 g     F .text	0000014c OSFlagNameSet
00007570 g     F .text	000001c0 OSTaskStkChk
000093d4 g     F .text	0000008c alt_ic_irq_disable
0000c2c2 g     O .rwdata	00000002 OSMemSize
0000da9c g     O .bss	00000004 OSTCBCur
0000a260 g     F .text	00000038 exit
0000c2c4 g     O .rwdata	00000002 OSMemTblSize
0000a938 g     F .text	00000074 .hidden __modsi3
000186a0 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001030 g     F .text	00000058 OSInit
00007914 g     F .text	00000124 OSTaskQuery
00005834 g     F .text	000000a8 OS_QInit
000002b8 g     F .text	0000003c TaskStart
000022b8 g     F .text	00000054 OS_StrLen
0000442c g     F .text	00000114 OSMemNameSet
0000c2de g     O .rwdata	00000002 OSTaskProfileEn
0000daa0 g     O .bss	00000004 OSTime
00013448 g     O .bss	00000800 OSTaskIdleStk
0000aa90 g     F .text	00000034 _exit
00008eb0 g     F .text	0000012c alt_alarm_start
00002fbc g     F .text	00000128 OSFlagNameGet
00007efc g     F .text	0000005c OSTimeGet
0000a584 g     F .text	00000098 strlen
00009e40 g     F .text	00000020 OSTaskSwHook
00009824 g     F .text	0000015c open
00013c48 g     O .bss	00000b40 OSEventTbl
00014788 g     O .bss	00000510 OSTCBTbl
0000623c g     F .text	00000100 OSSemSet
000092dc g     F .text	00000020 alt_icache_flush_all
0000c324 g     O .rwdata	00000004 alt_priority_mask
00005a64 g     F .text	00000240 OSSemDel
0000daa4 g     O .bss	00000004 OSFlagFreeList
0000934c g     F .text	00000088 alt_ic_irq_enable
0000c2a4 g     O .rwdata	00000002 OSEventNameSize
0000daa8 g     O .bss	00000001 OSStatRdy
00014c98 g     O .bss	00000054 OSTCBPrioTbl
000004b0 g     F .text	000000c4 __env_lock
0000c2ea g     O .rwdata	00000002 OSTaskSwHookEn
0000c328 g     O .rwdata	00000008 alt_alarm_list
0000c2b2 g     O .rwdata	00000002 OSFlagWidth
0000921c g     F .text	00000060 _do_ctors
00009018 g     F .text	000000d8 close
0000da54 g     O .bss	00000004 alt_envsem
0000daac g     O .bss	00000004 OSIdleCtrRun
00001674 g     F .text	00000020 OSVersion
0000c2fc g     O .rwdata	00000002 OSTmrCfgWheelSize
00000370 g     F .text	00000084 alt_load
00007a38 g     F .text	00000070 OS_TaskStkClr
0000c2d6 g     O .rwdata	00000002 OSTaskCreateEn
00001c64 g     F .text	00000068 OS_EventWaitListInit
00009ee0 g     F .text	00000020 OSTaskIdleHook
00007730 g     F .text	000001e4 OSTaskSuspend
0000230c g     F .text	0000005c OS_TaskIdle
0000c302 g     O .rwdata	00000002 OSTmrTblSize
000056d8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00010880 	call	1088 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	10933b04 	addi	r2,r2,19692
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	10933b04 	addi	r2,r2,19692
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	00010d40 	call	10d4 <OSIntExit>
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a60c17 	ldw	r2,-26576(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a60c17 	ldw	r2,-26576(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
     238:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     23c:	d690a414 	ori	gp,gp,17040
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	10b69114 	ori	r2,r2,55876

    movhi r3, %hi(__bss_end)
     248:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     24c:	18d37b14 	ori	r3,r3,19948

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xfffe7bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	00003700 	call	370 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	00003f40 	call	3f4 <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xfffe7bc8>

0000026c <main>:

// tasks
void TaskStart(void *pdata);
void TaskADCToFFT(void *pdata);

int main(void) {
     26c:	defffe04 	addi	sp,sp,-8
     270:	dfc00115 	stw	ra,4(sp)
     274:	df000015 	stw	fp,0(sp)
     278:	d839883a 	mov	fp,sp
  OSInit(); // initialize ucos-ii
     27c:	00010300 	call	1030 <OSInit>
  OSTaskCreate(TaskStart, (void *) 0, &TaskStartStack[TASK_STACKSIZE - 1], 5); // create new task
     280:	01c00144 	movi	r7,5
     284:	01800074 	movhi	r6,1
     288:	3186b104 	addi	r6,r6,6852
     28c:	000b883a 	mov	r5,zero
     290:	01000034 	movhi	r4,0
     294:	2100ae04 	addi	r4,r4,696
     298:	000682c0 	call	682c <OSTaskCreate>
  OSStart(); // start multitasking
     29c:	00013340 	call	1334 <OSStart>
  return 0; // never executed
     2a0:	0005883a 	mov	r2,zero
}
     2a4:	e037883a 	mov	sp,fp
     2a8:	dfc00117 	ldw	ra,4(sp)
     2ac:	df000017 	ldw	fp,0(sp)
     2b0:	dec00204 	addi	sp,sp,8
     2b4:	f800283a 	ret

000002b8 <TaskStart>:

void TaskStart(void *pdata) {
     2b8:	defffd04 	addi	sp,sp,-12
     2bc:	dfc00215 	stw	ra,8(sp)
     2c0:	df000115 	stw	fp,4(sp)
     2c4:	df000104 	addi	fp,sp,4
     2c8:	e13fff15 	stw	r4,-4(fp)
    OSTaskCreate(TaskADCToFFT, (void *) 0, &TaskADCToFFTStack[TASK_STACKSIZE - 1], 6); // create new task
     2cc:	01c00184 	movi	r7,6
     2d0:	01800074 	movhi	r6,1
     2d4:	31beb104 	addi	r6,r6,-1340
     2d8:	000b883a 	mov	r5,zero
     2dc:	01000034 	movhi	r4,0
     2e0:	2100bd04 	addi	r4,r4,756
     2e4:	000682c0 	call	682c <OSTaskCreate>

    while (1) {
        OSTimeDly(10);
     2e8:	01000284 	movi	r4,10
     2ec:	0007aa80 	call	7aa8 <OSTimeDly>
    }
     2f0:	003ffd06 	br	2e8 <__alt_data_end+0xfffe7c48>

000002f4 <TaskADCToFFT>:
}

void TaskADCToFFT(void* pdata) {
     2f4:	defffe04 	addi	sp,sp,-8
     2f8:	df000115 	stw	fp,4(sp)
     2fc:	df000104 	addi	fp,sp,4
     300:	e13fff15 	stw	r4,-4(fp)
  while (1) {
  }
     304:	003fff06 	br	304 <__alt_data_end+0xfffe7c64>

00000308 <alt_load_section>:
     308:	defffc04 	addi	sp,sp,-16
     30c:	df000315 	stw	fp,12(sp)
     310:	df000304 	addi	fp,sp,12
     314:	e13ffd15 	stw	r4,-12(fp)
     318:	e17ffe15 	stw	r5,-8(fp)
     31c:	e1bfff15 	stw	r6,-4(fp)
     320:	e0fffe17 	ldw	r3,-8(fp)
     324:	e0bffd17 	ldw	r2,-12(fp)
     328:	18800c26 	beq	r3,r2,35c <alt_load_section+0x54>
     32c:	00000806 	br	350 <alt_load_section+0x48>
     330:	e0bffe17 	ldw	r2,-8(fp)
     334:	10c00104 	addi	r3,r2,4
     338:	e0fffe15 	stw	r3,-8(fp)
     33c:	e0fffd17 	ldw	r3,-12(fp)
     340:	19000104 	addi	r4,r3,4
     344:	e13ffd15 	stw	r4,-12(fp)
     348:	18c00017 	ldw	r3,0(r3)
     34c:	10c00015 	stw	r3,0(r2)
     350:	e0fffe17 	ldw	r3,-8(fp)
     354:	e0bfff17 	ldw	r2,-4(fp)
     358:	18bff51e 	bne	r3,r2,330 <__alt_data_end+0xfffe7c90>
     35c:	0001883a 	nop
     360:	e037883a 	mov	sp,fp
     364:	df000017 	ldw	fp,0(sp)
     368:	dec00104 	addi	sp,sp,4
     36c:	f800283a 	ret

00000370 <alt_load>:
     370:	defffe04 	addi	sp,sp,-8
     374:	dfc00115 	stw	ra,4(sp)
     378:	df000015 	stw	fp,0(sp)
     37c:	d839883a 	mov	fp,sp
     380:	01800074 	movhi	r6,1
     384:	31b0ce04 	addi	r6,r6,-15560
     388:	01400074 	movhi	r5,1
     38c:	296b0b04 	addi	r5,r5,-21460
     390:	01000074 	movhi	r4,1
     394:	2130ce04 	addi	r4,r4,-15560
     398:	00003080 	call	308 <alt_load_section>
     39c:	01800034 	movhi	r6,0
     3a0:	31808c04 	addi	r6,r6,560
     3a4:	01400034 	movhi	r5,0
     3a8:	29400804 	addi	r5,r5,32
     3ac:	01000034 	movhi	r4,0
     3b0:	21000804 	addi	r4,r4,32
     3b4:	00003080 	call	308 <alt_load_section>
     3b8:	01800074 	movhi	r6,1
     3bc:	31ab0b04 	addi	r6,r6,-21460
     3c0:	01400074 	movhi	r5,1
     3c4:	296ab104 	addi	r5,r5,-21820
     3c8:	01000074 	movhi	r4,1
     3cc:	212ab104 	addi	r4,r4,-21820
     3d0:	00003080 	call	308 <alt_load_section>
     3d4:	00090f00 	call	90f0 <alt_dcache_flush_all>
     3d8:	00092dc0 	call	92dc <alt_icache_flush_all>
     3dc:	0001883a 	nop
     3e0:	e037883a 	mov	sp,fp
     3e4:	dfc00117 	ldw	ra,4(sp)
     3e8:	df000017 	ldw	fp,0(sp)
     3ec:	dec00204 	addi	sp,sp,8
     3f0:	f800283a 	ret

000003f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     3f4:	defff904 	addi	sp,sp,-28
     3f8:	dfc00615 	stw	ra,24(sp)
     3fc:	df000515 	stw	fp,20(sp)
     400:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     404:	0009883a 	mov	r4,zero
     408:	0007fec0 	call	7fec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     40c:	00010300 	call	1030 <OSInit>
     410:	01000044 	movi	r4,1
     414:	000598c0 	call	598c <OSSemCreate>
     418:	d0a5f115 	stw	r2,-26684(gp)
     41c:	01000044 	movi	r4,1
     420:	000598c0 	call	598c <OSSemCreate>
     424:	d0a5f315 	stw	r2,-26676(gp)
     428:	d0a60804 	addi	r2,gp,-26592
     42c:	e0bffc15 	stw	r2,-16(fp)
     430:	00800044 	movi	r2,1
     434:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
     438:	e0bffd0b 	ldhu	r2,-12(fp)
     43c:	1009883a 	mov	r4,r2
     440:	000598c0 	call	598c <OSSemCreate>
     444:	1007883a 	mov	r3,r2
     448:	e0bffc17 	ldw	r2,-16(fp)
     44c:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     450:	00080240 	call	8024 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     454:	01800074 	movhi	r6,1
     458:	31aab104 	addi	r6,r6,-21820
     45c:	01400074 	movhi	r5,1
     460:	296ab104 	addi	r5,r5,-21820
     464:	01000074 	movhi	r4,1
     468:	212ab104 	addi	r4,r4,-21820
     46c:	00096800 	call	9680 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     470:	000921c0 	call	921c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     474:	01000074 	movhi	r4,1
     478:	21249f04 	addi	r4,r4,-28036
     47c:	000a24c0 	call	a24c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     480:	d0a5ed17 	ldw	r2,-26700(gp)
     484:	d0e5ee17 	ldw	r3,-26696(gp)
     488:	d125ef17 	ldw	r4,-26692(gp)
     48c:	200d883a 	mov	r6,r4
     490:	180b883a 	mov	r5,r3
     494:	1009883a 	mov	r4,r2
     498:	000026c0 	call	26c <main>
     49c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
     4a0:	01000044 	movi	r4,1
     4a4:	00090180 	call	9018 <close>
  exit (result);
     4a8:	e13ffb17 	ldw	r4,-20(fp)
     4ac:	000a2600 	call	a260 <exit>

000004b0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
     4b0:	deffdf04 	addi	sp,sp,-132
     4b4:	dfc02015 	stw	ra,128(sp)
     4b8:	df001f15 	stw	fp,124(sp)
     4bc:	df001f04 	addi	fp,sp,124
     4c0:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     4c4:	e0bfe204 	addi	r2,fp,-120
     4c8:	100b883a 	mov	r5,r2
     4cc:	01003fc4 	movi	r4,255
     4d0:	00079140 	call	7914 <OSTaskQuery>
     4d4:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     4d8:	e0bffe83 	ldbu	r2,-6(fp)
     4dc:	10803fcc 	andi	r2,r2,255
     4e0:	10001e1e 	bne	r2,zero,55c <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
     4e4:	e0bfee83 	ldbu	r2,-70(fp)
     4e8:	10803fcc 	andi	r2,r2,255
     4ec:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
     4f0:	d0a5f117 	ldw	r2,-26684(gp)
     4f4:	e0fffd04 	addi	r3,fp,-12
     4f8:	180b883a 	mov	r5,r3
     4fc:	1009883a 	mov	r4,r2
     500:	000612c0 	call	612c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
     504:	e0bffe43 	ldbu	r2,-7(fp)
     508:	10803fcc 	andi	r2,r2,255
     50c:	10000726 	beq	r2,zero,52c <__env_lock+0x7c>
     510:	d0a00017 	ldw	r2,-32768(gp)
     514:	e0ffe117 	ldw	r3,-124(fp)
     518:	1880041e 	bne	r3,r2,52c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
     51c:	d0a5f017 	ldw	r2,-26688(gp)
     520:	10800044 	addi	r2,r2,1
     524:	d0a5f015 	stw	r2,-26688(gp)
     528:	00000a06 	br	554 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
     52c:	d0a5f117 	ldw	r2,-26684(gp)
     530:	e0fffe84 	addi	r3,fp,-6
     534:	180d883a 	mov	r6,r3
     538:	000b883a 	mov	r5,zero
     53c:	1009883a 	mov	r4,r2
     540:	0005ca40 	call	5ca4 <OSSemPend>
    locks  = 1;
     544:	00800044 	movi	r2,1
     548:	d0a5f015 	stw	r2,-26688(gp)
    lockid = id;
     54c:	e0bfe117 	ldw	r2,-124(fp)
     550:	d0a00015 	stw	r2,-32768(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     554:	0001883a 	nop
     558:	00000106 	br	560 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
     55c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
     560:	e037883a 	mov	sp,fp
     564:	dfc00117 	ldw	ra,4(sp)
     568:	df000017 	ldw	fp,0(sp)
     56c:	dec00204 	addi	sp,sp,8
     570:	f800283a 	ret

00000574 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
     574:	defffd04 	addi	sp,sp,-12
     578:	dfc00215 	stw	ra,8(sp)
     57c:	df000115 	stw	fp,4(sp)
     580:	df000104 	addi	fp,sp,4
     584:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
     588:	d0a5f017 	ldw	r2,-26688(gp)
     58c:	10000b26 	beq	r2,zero,5bc <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
     590:	d0a5f017 	ldw	r2,-26688(gp)
     594:	10bfffc4 	addi	r2,r2,-1
     598:	d0a5f015 	stw	r2,-26688(gp)
     59c:	d0a5f017 	ldw	r2,-26688(gp)
     5a0:	1000071e 	bne	r2,zero,5c0 <__env_unlock+0x4c>
  {
    lockid = -1;
     5a4:	00bfffc4 	movi	r2,-1
     5a8:	d0a00015 	stw	r2,-32768(gp)
    OSSemPost( alt_envsem );
     5ac:	d0a5f117 	ldw	r2,-26684(gp)
     5b0:	1009883a 	mov	r4,r2
     5b4:	000601c0 	call	601c <OSSemPost>
     5b8:	00000106 	br	5c0 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
     5bc:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     5c0:	e037883a 	mov	sp,fp
     5c4:	dfc00117 	ldw	ra,4(sp)
     5c8:	df000017 	ldw	fp,0(sp)
     5cc:	dec00204 	addi	sp,sp,8
     5d0:	f800283a 	ret

000005d4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
     5d4:	deffdb04 	addi	sp,sp,-148
     5d8:	dfc02415 	stw	ra,144(sp)
     5dc:	df002315 	stw	fp,140(sp)
     5e0:	df002304 	addi	fp,sp,140
     5e4:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     5e8:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
     5ec:	d0a5f443 	ldbu	r2,-26671(gp)
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	10800060 	cmpeqi	r2,r2,1
     5f8:	10003626 	beq	r2,zero,6d4 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
     5fc:	e0bfe204 	addi	r2,fp,-120
     600:	100b883a 	mov	r5,r2
     604:	01003fc4 	movi	r4,255
     608:	00079140 	call	7914 <OSTaskQuery>
     60c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
     610:	e0bffe83 	ldbu	r2,-6(fp)
     614:	10803fcc 	andi	r2,r2,255
     618:	1000301e 	bne	r2,zero,6dc <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
     61c:	e0bfee83 	ldbu	r2,-70(fp)
     620:	10803fcc 	andi	r2,r2,255
     624:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
     628:	d0a5f317 	ldw	r2,-26676(gp)
     62c:	e0fffd04 	addi	r3,fp,-12
     630:	180b883a 	mov	r5,r3
     634:	1009883a 	mov	r4,r2
     638:	000612c0 	call	612c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     63c:	0005303a 	rdctl	r2,status
     640:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     644:	e0ffe117 	ldw	r3,-124(fp)
     648:	00bfff84 	movi	r2,-2
     64c:	1884703a 	and	r2,r3,r2
     650:	1001703a 	wrctl	status,r2
  
  return context;
     654:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
     658:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
     65c:	e0bffd0b 	ldhu	r2,-12(fp)
     660:	10bfffcc 	andi	r2,r2,65535
     664:	10000b1e 	bne	r2,zero,694 <__malloc_lock+0xc0>
     668:	d0a00117 	ldw	r2,-32764(gp)
     66c:	e0ffde17 	ldw	r3,-136(fp)
     670:	1880081e 	bne	r3,r2,694 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
     674:	d0a5f217 	ldw	r2,-26680(gp)
     678:	10800044 	addi	r2,r2,1
     67c:	d0a5f215 	stw	r2,-26680(gp)
     680:	e0bfdd17 	ldw	r2,-140(fp)
     684:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     688:	e0bfdf17 	ldw	r2,-132(fp)
     68c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
     690:	00000e06 	br	6cc <__malloc_lock+0xf8>
     694:	e0bfdd17 	ldw	r2,-140(fp)
     698:	e0bfe015 	stw	r2,-128(fp)
     69c:	e0bfe017 	ldw	r2,-128(fp)
     6a0:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
     6a4:	d0a5f317 	ldw	r2,-26676(gp)
     6a8:	e0fffe84 	addi	r3,fp,-6
     6ac:	180d883a 	mov	r6,r3
     6b0:	000b883a 	mov	r5,zero
     6b4:	1009883a 	mov	r4,r2
     6b8:	0005ca40 	call	5ca4 <OSSemPend>
    locks  = 1;
     6bc:	00800044 	movi	r2,1
     6c0:	d0a5f215 	stw	r2,-26680(gp)
    lockid = id;
     6c4:	e0bfde17 	ldw	r2,-136(fp)
     6c8:	d0a00115 	stw	r2,-32764(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
     6cc:	0001883a 	nop
     6d0:	00000306 	br	6e0 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
     6d4:	0001883a 	nop
     6d8:	00000106 	br	6e0 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
     6dc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
     6e0:	e037883a 	mov	sp,fp
     6e4:	dfc00117 	ldw	ra,4(sp)
     6e8:	df000017 	ldw	fp,0(sp)
     6ec:	dec00204 	addi	sp,sp,8
     6f0:	f800283a 	ret

000006f4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
     6f4:	defff804 	addi	sp,sp,-32
     6f8:	dfc00715 	stw	ra,28(sp)
     6fc:	df000615 	stw	fp,24(sp)
     700:	df000604 	addi	fp,sp,24
     704:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     708:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
     70c:	d0a5f443 	ldbu	r2,-26671(gp)
     710:	10803fcc 	andi	r2,r2,255
     714:	10800060 	cmpeqi	r2,r2,1
     718:	10002326 	beq	r2,zero,7a8 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     71c:	0005303a 	rdctl	r2,status
     720:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     724:	e0fffe17 	ldw	r3,-8(fp)
     728:	00bfff84 	movi	r2,-2
     72c:	1884703a 	and	r2,r3,r2
     730:	1001703a 	wrctl	status,r2
  
  return context;
     734:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
     738:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
     73c:	d0a5f217 	ldw	r2,-26680(gp)
     740:	1000051e 	bne	r2,zero,758 <__malloc_unlock+0x64>
     744:	e0bffa17 	ldw	r2,-24(fp)
     748:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     74c:	e0bffb17 	ldw	r2,-20(fp)
     750:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
     754:	00001506 	br	7ac <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
     758:	d0a5f217 	ldw	r2,-26680(gp)
     75c:	10bfffc4 	addi	r2,r2,-1
     760:	d0a5f215 	stw	r2,-26680(gp)
     764:	d0a5f217 	ldw	r2,-26680(gp)
     768:	10000a1e 	bne	r2,zero,794 <__malloc_unlock+0xa0>
  {
    lockid = -1;
     76c:	00bfffc4 	movi	r2,-1
     770:	d0a00115 	stw	r2,-32764(gp)
     774:	e0bffa17 	ldw	r2,-24(fp)
     778:	e0bffc15 	stw	r2,-16(fp)
     77c:	e0bffc17 	ldw	r2,-16(fp)
     780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
     784:	d0a5f317 	ldw	r2,-26676(gp)
     788:	1009883a 	mov	r4,r2
     78c:	000601c0 	call	601c <OSSemPost>
     790:	00000606 	br	7ac <__malloc_unlock+0xb8>
     794:	e0bffa17 	ldw	r2,-24(fp)
     798:	e0bffd15 	stw	r2,-12(fp)
     79c:	e0bffd17 	ldw	r2,-12(fp)
     7a0:	1001703a 	wrctl	status,r2
     7a4:	00000106 	br	7ac <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
     7a8:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
     7ac:	e037883a 	mov	sp,fp
     7b0:	dfc00117 	ldw	ra,4(sp)
     7b4:	df000017 	ldw	fp,0(sp)
     7b8:	dec00204 	addi	sp,sp,8
     7bc:	f800283a 	ret

000007c0 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     7c0:	defff704 	addi	sp,sp,-36
     7c4:	dfc00815 	stw	ra,32(sp)
     7c8:	df000715 	stw	fp,28(sp)
     7cc:	df000704 	addi	fp,sp,28
     7d0:	e13ffd15 	stw	r4,-12(fp)
     7d4:	e17ffe15 	stw	r5,-8(fp)
     7d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     7dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     7e0:	e0bfff17 	ldw	r2,-4(fp)
     7e4:	1000021e 	bne	r2,zero,7f0 <OSEventNameGet+0x30>
        return (0);
     7e8:	0005883a 	mov	r2,zero
     7ec:	00003706 	br	8cc <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     7f0:	e0bffd17 	ldw	r2,-12(fp)
     7f4:	1000051e 	bne	r2,zero,80c <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
     7f8:	e0bfff17 	ldw	r2,-4(fp)
     7fc:	00c00104 	movi	r3,4
     800:	10c00005 	stb	r3,0(r2)
        return (0);
     804:	0005883a 	mov	r2,zero
     808:	00003006 	br	8cc <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     80c:	e0bffe17 	ldw	r2,-8(fp)
     810:	1000051e 	bne	r2,zero,828 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
     814:	e0bfff17 	ldw	r2,-4(fp)
     818:	00c00304 	movi	r3,12
     81c:	10c00005 	stb	r3,0(r2)
        return (0);
     820:	0005883a 	mov	r2,zero
     824:	00002906 	br	8cc <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     828:	d0a60203 	ldbu	r2,-26616(gp)
     82c:	10803fcc 	andi	r2,r2,255
     830:	10000526 	beq	r2,zero,848 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
     834:	e0bfff17 	ldw	r2,-4(fp)
     838:	00c00444 	movi	r3,17
     83c:	10c00005 	stb	r3,0(r2)
        return (0);
     840:	0005883a 	mov	r2,zero
     844:	00002106 	br	8cc <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
     848:	e0bffd17 	ldw	r2,-12(fp)
     84c:	10800003 	ldbu	r2,0(r2)
     850:	10803fcc 	andi	r2,r2,255
     854:	10bfffc4 	addi	r2,r2,-1
     858:	10800128 	cmpgeui	r2,r2,4
     85c:	10000526 	beq	r2,zero,874 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     860:	e0bfff17 	ldw	r2,-4(fp)
     864:	00c00044 	movi	r3,1
     868:	10c00005 	stb	r3,0(r2)
             return (0);
     86c:	0005883a 	mov	r2,zero
     870:	00001606 	br	8cc <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
     874:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     878:	0005303a 	rdctl	r2,status
     87c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     880:	e0fffb17 	ldw	r3,-20(fp)
     884:	00bfff84 	movi	r2,-2
     888:	1884703a 	and	r2,r3,r2
     88c:	1001703a 	wrctl	status,r2
  
  return context;
     890:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
     894:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     898:	e0bffd17 	ldw	r2,-12(fp)
     89c:	10800384 	addi	r2,r2,14
     8a0:	100b883a 	mov	r5,r2
     8a4:	e13ffe17 	ldw	r4,-8(fp)
     8a8:	00022440 	call	2244 <OS_StrCopy>
     8ac:	e0bffa05 	stb	r2,-24(fp)
     8b0:	e0bff917 	ldw	r2,-28(fp)
     8b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     8b8:	e0bffc17 	ldw	r2,-16(fp)
     8bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     8c0:	e0bfff17 	ldw	r2,-4(fp)
     8c4:	10000005 	stb	zero,0(r2)
    return (len);
     8c8:	e0bffa03 	ldbu	r2,-24(fp)
}
     8cc:	e037883a 	mov	sp,fp
     8d0:	dfc00117 	ldw	ra,4(sp)
     8d4:	df000017 	ldw	fp,0(sp)
     8d8:	dec00204 	addi	sp,sp,8
     8dc:	f800283a 	ret

000008e0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     8e0:	defff604 	addi	sp,sp,-40
     8e4:	dfc00915 	stw	ra,36(sp)
     8e8:	df000815 	stw	fp,32(sp)
     8ec:	df000804 	addi	fp,sp,32
     8f0:	e13ffd15 	stw	r4,-12(fp)
     8f4:	e17ffe15 	stw	r5,-8(fp)
     8f8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     8fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	10004026 	beq	r2,zero,a08 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
     908:	e0bffd17 	ldw	r2,-12(fp)
     90c:	1000041e 	bne	r2,zero,920 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
     910:	e0bfff17 	ldw	r2,-4(fp)
     914:	00c00104 	movi	r3,4
     918:	10c00005 	stb	r3,0(r2)
        return;
     91c:	00003b06 	br	a0c <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
     920:	e0bffe17 	ldw	r2,-8(fp)
     924:	1000041e 	bne	r2,zero,938 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
     928:	e0bfff17 	ldw	r2,-4(fp)
     92c:	00c00304 	movi	r3,12
     930:	10c00005 	stb	r3,0(r2)
        return;
     934:	00003506 	br	a0c <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     938:	d0a60203 	ldbu	r2,-26616(gp)
     93c:	10803fcc 	andi	r2,r2,255
     940:	10000426 	beq	r2,zero,954 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
     944:	e0bfff17 	ldw	r2,-4(fp)
     948:	00c00484 	movi	r3,18
     94c:	10c00005 	stb	r3,0(r2)
        return;
     950:	00002e06 	br	a0c <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
     954:	e0bffd17 	ldw	r2,-12(fp)
     958:	10800003 	ldbu	r2,0(r2)
     95c:	10803fcc 	andi	r2,r2,255
     960:	10bfffc4 	addi	r2,r2,-1
     964:	10800128 	cmpgeui	r2,r2,4
     968:	10000426 	beq	r2,zero,97c <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     96c:	e0bfff17 	ldw	r2,-4(fp)
     970:	00c00044 	movi	r3,1
     974:	10c00005 	stb	r3,0(r2)
             return;
     978:	00002406 	br	a0c <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
     97c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     980:	0005303a 	rdctl	r2,status
     984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     988:	e0fffc17 	ldw	r3,-16(fp)
     98c:	00bfff84 	movi	r2,-2
     990:	1884703a 	and	r2,r3,r2
     994:	1001703a 	wrctl	status,r2
  
  return context;
     998:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
     99c:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
     9a0:	e13ffe17 	ldw	r4,-8(fp)
     9a4:	00022b80 	call	22b8 <OS_StrLen>
     9a8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     9ac:	e0bffa03 	ldbu	r2,-24(fp)
     9b0:	10800830 	cmpltui	r2,r2,32
     9b4:	1000081e 	bne	r2,zero,9d8 <OSEventNameSet+0xf8>
     9b8:	e0bff817 	ldw	r2,-32(fp)
     9bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     9c0:	e0bff917 	ldw	r2,-28(fp)
     9c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	00c002c4 	movi	r3,11
     9d0:	10c00005 	stb	r3,0(r2)
        return;
     9d4:	00000d06 	br	a0c <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     9d8:	e0bffd17 	ldw	r2,-12(fp)
     9dc:	10800384 	addi	r2,r2,14
     9e0:	e17ffe17 	ldw	r5,-8(fp)
     9e4:	1009883a 	mov	r4,r2
     9e8:	00022440 	call	2244 <OS_StrCopy>
     9ec:	e0bff817 	ldw	r2,-32(fp)
     9f0:	e0bffb15 	stw	r2,-20(fp)
     9f4:	e0bffb17 	ldw	r2,-20(fp)
     9f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
     9fc:	e0bfff17 	ldw	r2,-4(fp)
     a00:	10000005 	stb	zero,0(r2)
     a04:	00000106 	br	a0c <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
     a08:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
     a0c:	e037883a 	mov	sp,fp
     a10:	dfc00117 	ldw	ra,4(sp)
     a14:	df000017 	ldw	fp,0(sp)
     a18:	dec00204 	addi	sp,sp,8
     a1c:	f800283a 	ret

00000a20 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
     a20:	deffed04 	addi	sp,sp,-76
     a24:	dfc01215 	stw	ra,72(sp)
     a28:	df001115 	stw	fp,68(sp)
     a2c:	df001104 	addi	fp,sp,68
     a30:	e13ffc15 	stw	r4,-16(fp)
     a34:	e17ffd15 	stw	r5,-12(fp)
     a38:	e1bffe15 	stw	r6,-8(fp)
     a3c:	3805883a 	mov	r2,r7
     a40:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
     a44:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
     a48:	e0800217 	ldw	r2,8(fp)
     a4c:	1000021e 	bne	r2,zero,a58 <OSEventPendMulti+0x38>
        return (0);
     a50:	0005883a 	mov	r2,zero
     a54:	00017106 	br	101c <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
     a58:	e0bffc17 	ldw	r2,-16(fp)
     a5c:	1000051e 	bne	r2,zero,a74 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
     a60:	e0800217 	ldw	r2,8(fp)
     a64:	00c00104 	movi	r3,4
     a68:	10c00005 	stb	r3,0(r2)
        return (0);
     a6c:	0005883a 	mov	r2,zero
     a70:	00016a06 	br	101c <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
     a74:	e0bffd17 	ldw	r2,-12(fp)
     a78:	1000051e 	bne	r2,zero,a90 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
     a7c:	e0800217 	ldw	r2,8(fp)
     a80:	00c00104 	movi	r3,4
     a84:	10c00005 	stb	r3,0(r2)
        return (0);
     a88:	0005883a 	mov	r2,zero
     a8c:	00016306 	br	101c <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
     a90:	e0bffe17 	ldw	r2,-8(fp)
     a94:	1000051e 	bne	r2,zero,aac <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
     a98:	e0800217 	ldw	r2,8(fp)
     a9c:	00c00104 	movi	r3,4
     aa0:	10c00005 	stb	r3,0(r2)
        return (0);
     aa4:	0005883a 	mov	r2,zero
     aa8:	00015c06 	br	101c <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
     aac:	e0bffd17 	ldw	r2,-12(fp)
     ab0:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
     ab4:	e0bffc17 	ldw	r2,-16(fp)
     ab8:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
     abc:	e0bfef17 	ldw	r2,-68(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
     ac8:	00001906 	br	b30 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
     acc:	e0bff017 	ldw	r2,-64(fp)
     ad0:	10800003 	ldbu	r2,0(r2)
     ad4:	10803fcc 	andi	r2,r2,255
     ad8:	10c000a0 	cmpeqi	r3,r2,2
     adc:	1800091e 	bne	r3,zero,b04 <OSEventPendMulti+0xe4>
     ae0:	10c000e0 	cmpeqi	r3,r2,3
     ae4:	1800091e 	bne	r3,zero,b0c <OSEventPendMulti+0xec>
     ae8:	10800060 	cmpeqi	r2,r2,1
     aec:	1000091e 	bne	r2,zero,b14 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
     af0:	e0800217 	ldw	r2,8(fp)
     af4:	00c00044 	movi	r3,1
     af8:	10c00005 	stb	r3,0(r2)
                 return (0);
     afc:	0005883a 	mov	r2,zero
     b00:	00014606 	br	101c <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
     b04:	0001883a 	nop
     b08:	00000306 	br	b18 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
     b0c:	0001883a 	nop
     b10:	00000106 	br	b18 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
     b14:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
     b18:	e0bfef17 	ldw	r2,-68(fp)
     b1c:	10800104 	addi	r2,r2,4
     b20:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
     b24:	e0bfef17 	ldw	r2,-68(fp)
     b28:	10800017 	ldw	r2,0(r2)
     b2c:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
     b30:	e0bff017 	ldw	r2,-64(fp)
     b34:	103fe51e 	bne	r2,zero,acc <__alt_data_end+0xfffe842c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
     b38:	d0a60203 	ldbu	r2,-26616(gp)
     b3c:	10803fcc 	andi	r2,r2,255
     b40:	10000526 	beq	r2,zero,b58 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
     b44:	e0800217 	ldw	r2,8(fp)
     b48:	00c00084 	movi	r3,2
     b4c:	10c00005 	stb	r3,0(r2)
        return (0);
     b50:	0005883a 	mov	r2,zero
     b54:	00013106 	br	101c <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
     b58:	d0a5f403 	ldbu	r2,-26672(gp)
     b5c:	10803fcc 	andi	r2,r2,255
     b60:	10000526 	beq	r2,zero,b78 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
     b64:	e0800217 	ldw	r2,8(fp)
     b68:	00c00344 	movi	r3,13
     b6c:	10c00005 	stb	r3,0(r2)
        return (0);
     b70:	0005883a 	mov	r2,zero
     b74:	00012906 	br	101c <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     b78:	0005303a 	rdctl	r2,status
     b7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     b80:	e0fffb17 	ldw	r3,-20(fp)
     b84:	00bfff84 	movi	r2,-2
     b88:	1884703a 	and	r2,r3,r2
     b8c:	1001703a 	wrctl	status,r2
  
  return context;
     b90:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
     b94:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
     b98:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
     b9c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
     ba0:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
     ba4:	e0bffc17 	ldw	r2,-16(fp)
     ba8:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
     bac:	e0bfef17 	ldw	r2,-68(fp)
     bb0:	10800017 	ldw	r2,0(r2)
     bb4:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
     bb8:	00008106 	br	dc0 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
     bbc:	e0bff017 	ldw	r2,-64(fp)
     bc0:	10800003 	ldbu	r2,0(r2)
     bc4:	10803fcc 	andi	r2,r2,255
     bc8:	10c000a0 	cmpeqi	r3,r2,2
     bcc:	18003c1e 	bne	r3,zero,cc0 <OSEventPendMulti+0x2a0>
     bd0:	10c000e0 	cmpeqi	r3,r2,3
     bd4:	1800031e 	bne	r3,zero,be4 <OSEventPendMulti+0x1c4>
     bd8:	10800060 	cmpeqi	r2,r2,1
     bdc:	10001e1e 	bne	r2,zero,c58 <OSEventPendMulti+0x238>
     be0:	00006606 	br	d7c <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
     be4:	e0bff017 	ldw	r2,-64(fp)
     be8:	1080020b 	ldhu	r2,8(r2)
     bec:	10bfffcc 	andi	r2,r2,65535
     bf0:	10001526 	beq	r2,zero,c48 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
     bf4:	e0bff017 	ldw	r2,-64(fp)
     bf8:	1080020b 	ldhu	r2,8(r2)
     bfc:	10bfffc4 	addi	r2,r2,-1
     c00:	1007883a 	mov	r3,r2
     c04:	e0bff017 	ldw	r2,-64(fp)
     c08:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
     c0c:	e0bffd17 	ldw	r2,-12(fp)
     c10:	10c00104 	addi	r3,r2,4
     c14:	e0fffd15 	stw	r3,-12(fp)
     c18:	e0fff017 	ldw	r3,-64(fp)
     c1c:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
     c20:	00800044 	movi	r2,1
     c24:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
     c28:	e0bffe17 	ldw	r2,-8(fp)
     c2c:	10c00104 	addi	r3,r2,4
     c30:	e0fffe15 	stw	r3,-8(fp)
     c34:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
     c38:	e0bff18b 	ldhu	r2,-58(fp)
     c3c:	10800044 	addi	r2,r2,1
     c40:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
     c44:	00005806 	br	da8 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
     c48:	e0bff203 	ldbu	r2,-56(fp)
     c4c:	10800054 	ori	r2,r2,1
     c50:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
     c54:	00005406 	br	da8 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
     c58:	e0bff017 	ldw	r2,-64(fp)
     c5c:	10800117 	ldw	r2,4(r2)
     c60:	10001326 	beq	r2,zero,cb0 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
     c64:	e0bffe17 	ldw	r2,-8(fp)
     c68:	10c00104 	addi	r3,r2,4
     c6c:	e0fffe15 	stw	r3,-8(fp)
     c70:	e0fff017 	ldw	r3,-64(fp)
     c74:	18c00117 	ldw	r3,4(r3)
     c78:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
     c7c:	e0bff017 	ldw	r2,-64(fp)
     c80:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
     c84:	e0bffd17 	ldw	r2,-12(fp)
     c88:	10c00104 	addi	r3,r2,4
     c8c:	e0fffd15 	stw	r3,-12(fp)
     c90:	e0fff017 	ldw	r3,-64(fp)
     c94:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
     c98:	00800044 	movi	r2,1
     c9c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
     ca0:	e0bff18b 	ldhu	r2,-58(fp)
     ca4:	10800044 	addi	r2,r2,1
     ca8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
     cac:	00003e06 	br	da8 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
     cb0:	e0bff203 	ldbu	r2,-56(fp)
     cb4:	10800094 	ori	r2,r2,2
     cb8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
     cbc:	00003a06 	br	da8 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
     cc0:	e0bff017 	ldw	r2,-64(fp)
     cc4:	10800117 	ldw	r2,4(r2)
     cc8:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
     ccc:	e0bff517 	ldw	r2,-44(fp)
     cd0:	1080058b 	ldhu	r2,22(r2)
     cd4:	10bfffcc 	andi	r2,r2,65535
     cd8:	10002426 	beq	r2,zero,d6c <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
     cdc:	e0bffe17 	ldw	r2,-8(fp)
     ce0:	10c00104 	addi	r3,r2,4
     ce4:	e0fffe15 	stw	r3,-8(fp)
     ce8:	e0fff517 	ldw	r3,-44(fp)
     cec:	18c00417 	ldw	r3,16(r3)
     cf0:	19400104 	addi	r5,r3,4
     cf4:	e13ff517 	ldw	r4,-44(fp)
     cf8:	21400415 	stw	r5,16(r4)
     cfc:	18c00017 	ldw	r3,0(r3)
     d00:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
     d04:	e0bff517 	ldw	r2,-44(fp)
     d08:	10c00417 	ldw	r3,16(r2)
     d0c:	e0bff517 	ldw	r2,-44(fp)
     d10:	10800217 	ldw	r2,8(r2)
     d14:	1880041e 	bne	r3,r2,d28 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
     d18:	e0bff517 	ldw	r2,-44(fp)
     d1c:	10c00117 	ldw	r3,4(r2)
     d20:	e0bff517 	ldw	r2,-44(fp)
     d24:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
     d28:	e0bff517 	ldw	r2,-44(fp)
     d2c:	1080058b 	ldhu	r2,22(r2)
     d30:	10bfffc4 	addi	r2,r2,-1
     d34:	1007883a 	mov	r3,r2
     d38:	e0bff517 	ldw	r2,-44(fp)
     d3c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
     d40:	e0bffd17 	ldw	r2,-12(fp)
     d44:	10c00104 	addi	r3,r2,4
     d48:	e0fffd15 	stw	r3,-12(fp)
     d4c:	e0fff017 	ldw	r3,-64(fp)
     d50:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
     d54:	00800044 	movi	r2,1
     d58:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
     d5c:	e0bff18b 	ldhu	r2,-58(fp)
     d60:	10800044 	addi	r2,r2,1
     d64:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
     d68:	00000f06 	br	da8 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
     d6c:	e0bff203 	ldbu	r2,-56(fp)
     d70:	10800114 	ori	r2,r2,4
     d74:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
     d78:	00000b06 	br	da8 <OSEventPendMulti+0x388>
     d7c:	e0bff317 	ldw	r2,-52(fp)
     d80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     d84:	e0bff417 	ldw	r2,-48(fp)
     d88:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
     d8c:	e0bffd17 	ldw	r2,-12(fp)
     d90:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
     d94:	e0800217 	ldw	r2,8(fp)
     d98:	00c00044 	movi	r3,1
     d9c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
     da0:	e0bff18b 	ldhu	r2,-58(fp)
     da4:	00009d06 	br	101c <OSEventPendMulti+0x5fc>
        }
        pevents++;
     da8:	e0bfef17 	ldw	r2,-68(fp)
     dac:	10800104 	addi	r2,r2,4
     db0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
     db4:	e0bfef17 	ldw	r2,-68(fp)
     db8:	10800017 	ldw	r2,0(r2)
     dbc:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
     dc0:	e0bff017 	ldw	r2,-64(fp)
     dc4:	103f7d1e 	bne	r2,zero,bbc <__alt_data_end+0xfffe851c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
     dc8:	e0bff103 	ldbu	r2,-60(fp)
     dcc:	10800058 	cmpnei	r2,r2,1
     dd0:	10000a1e 	bne	r2,zero,dfc <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
     dd4:	e0bffd17 	ldw	r2,-12(fp)
     dd8:	10000015 	stw	zero,0(r2)
     ddc:	e0bff317 	ldw	r2,-52(fp)
     de0:	e0bff615 	stw	r2,-40(fp)
     de4:	e0bff617 	ldw	r2,-40(fp)
     de8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
     dec:	e0800217 	ldw	r2,8(fp)
     df0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
     df4:	e0bff18b 	ldhu	r2,-58(fp)
     df8:	00008806 	br	101c <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
     dfc:	d0a60317 	ldw	r2,-26612(gp)
     e00:	d0e60317 	ldw	r3,-26612(gp)
     e04:	19000c03 	ldbu	r4,48(r3)
     e08:	e0fff203 	ldbu	r3,-56(fp)
     e0c:	20c6b03a 	or	r3,r4,r3
     e10:	1809883a 	mov	r4,r3
     e14:	00ffe004 	movi	r3,-128
     e18:	20c6b03a 	or	r3,r4,r3
     e1c:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
     e20:	d0a60317 	ldw	r2,-26612(gp)
     e24:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
     e28:	d0a60317 	ldw	r2,-26612(gp)
     e2c:	e0ffff0b 	ldhu	r3,-4(fp)
     e30:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
     e34:	e13ffc17 	ldw	r4,-16(fp)
     e38:	000195c0 	call	195c <OS_EventTaskWaitMulti>
     e3c:	e0bff317 	ldw	r2,-52(fp)
     e40:	e0bff915 	stw	r2,-28(fp)
     e44:	e0bff917 	ldw	r2,-28(fp)
     e48:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
     e4c:	00021000 	call	2100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     e50:	0005303a 	rdctl	r2,status
     e54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     e58:	e0fff717 	ldw	r3,-36(fp)
     e5c:	00bfff84 	movi	r2,-2
     e60:	1884703a 	and	r2,r3,r2
     e64:	1001703a 	wrctl	status,r2
  
  return context;
     e68:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
     e6c:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
     e70:	d0a60317 	ldw	r2,-26612(gp)
     e74:	10800c43 	ldbu	r2,49(r2)
     e78:	10803fcc 	andi	r2,r2,255
     e7c:	10000226 	beq	r2,zero,e88 <OSEventPendMulti+0x468>
     e80:	108000a0 	cmpeqi	r2,r2,2
     e84:	10001826 	beq	r2,zero,ee8 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
     e88:	d0a60317 	ldw	r2,-26612(gp)
     e8c:	10800717 	ldw	r2,28(r2)
     e90:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
     e94:	e0bff017 	ldw	r2,-64(fp)
     e98:	10000b26 	beq	r2,zero,ec8 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
     e9c:	e0bffd17 	ldw	r2,-12(fp)
     ea0:	10c00104 	addi	r3,r2,4
     ea4:	e0fffd15 	stw	r3,-12(fp)
     ea8:	e0fff017 	ldw	r3,-64(fp)
     eac:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
     eb0:	e0bffd17 	ldw	r2,-12(fp)
     eb4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
     eb8:	e0bff18b 	ldhu	r2,-58(fp)
     ebc:	10800044 	addi	r2,r2,1
     ec0:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
     ec4:	00000d06 	br	efc <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
     ec8:	d0a60317 	ldw	r2,-26612(gp)
     ecc:	00c00044 	movi	r3,1
     ed0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
     ed4:	d0a60317 	ldw	r2,-26612(gp)
     ed8:	e17ffc17 	ldw	r5,-16(fp)
     edc:	1009883a 	mov	r4,r2
     ee0:	0001b640 	call	1b64 <OS_EventTaskRemoveMulti>
             }
			 break;
     ee4:	00000506 	br	efc <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
     ee8:	d0a60317 	ldw	r2,-26612(gp)
     eec:	e17ffc17 	ldw	r5,-16(fp)
     ef0:	1009883a 	mov	r4,r2
     ef4:	0001b640 	call	1b64 <OS_EventTaskRemoveMulti>
             break;
     ef8:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
     efc:	d0a60317 	ldw	r2,-26612(gp)
     f00:	10800c43 	ldbu	r2,49(r2)
     f04:	10803fcc 	andi	r2,r2,255
     f08:	10000326 	beq	r2,zero,f18 <OSEventPendMulti+0x4f8>
     f0c:	108000a0 	cmpeqi	r2,r2,2
     f10:	1000231e 	bne	r2,zero,fa0 <OSEventPendMulti+0x580>
     f14:	00002a06 	br	fc0 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
     f18:	e0bff017 	ldw	r2,-64(fp)
     f1c:	10800003 	ldbu	r2,0(r2)
     f20:	10803fcc 	andi	r2,r2,255
     f24:	0080100e 	bge	zero,r2,f68 <OSEventPendMulti+0x548>
     f28:	10c000d0 	cmplti	r3,r2,3
     f2c:	1800071e 	bne	r3,zero,f4c <OSEventPendMulti+0x52c>
     f30:	108000e0 	cmpeqi	r2,r2,3
     f34:	10000c26 	beq	r2,zero,f68 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
     f38:	e0bffe17 	ldw	r2,-8(fp)
     f3c:	10c00104 	addi	r3,r2,4
     f40:	e0fffe15 	stw	r3,-8(fp)
     f44:	10000015 	stw	zero,0(r2)
                      break;
     f48:	00001206 	br	f94 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
     f4c:	e0bffe17 	ldw	r2,-8(fp)
     f50:	10c00104 	addi	r3,r2,4
     f54:	e0fffe15 	stw	r3,-8(fp)
     f58:	d0e60317 	ldw	r3,-26612(gp)
     f5c:	18c00917 	ldw	r3,36(r3)
     f60:	10c00015 	stw	r3,0(r2)
                      break;
     f64:	00000b06 	br	f94 <OSEventPendMulti+0x574>
     f68:	e0bff317 	ldw	r2,-52(fp)
     f6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     f70:	e0bff817 	ldw	r2,-32(fp)
     f74:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
     f78:	e0bffd17 	ldw	r2,-12(fp)
     f7c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
     f80:	e0800217 	ldw	r2,8(fp)
     f84:	00c00044 	movi	r3,1
     f88:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
     f8c:	e0bff18b 	ldhu	r2,-58(fp)
     f90:	00002206 	br	101c <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
     f94:	e0800217 	ldw	r2,8(fp)
     f98:	10000005 	stb	zero,0(r2)
             break;
     f9c:	00001006 	br	fe0 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
     fa0:	e0bffe17 	ldw	r2,-8(fp)
     fa4:	10c00104 	addi	r3,r2,4
     fa8:	e0fffe15 	stw	r3,-8(fp)
     fac:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
     fb0:	e0800217 	ldw	r2,8(fp)
     fb4:	00c00384 	movi	r3,14
     fb8:	10c00005 	stb	r3,0(r2)
             break;
     fbc:	00000806 	br	fe0 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
     fc0:	e0bffe17 	ldw	r2,-8(fp)
     fc4:	10c00104 	addi	r3,r2,4
     fc8:	e0fffe15 	stw	r3,-8(fp)
     fcc:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
     fd0:	e0800217 	ldw	r2,8(fp)
     fd4:	00c00284 	movi	r3,10
     fd8:	10c00005 	stb	r3,0(r2)
             break;
     fdc:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
     fe0:	d0a60317 	ldw	r2,-26612(gp)
     fe4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
     fe8:	d0a60317 	ldw	r2,-26612(gp)
     fec:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
     ff0:	d0a60317 	ldw	r2,-26612(gp)
     ff4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
     ff8:	d0a60317 	ldw	r2,-26612(gp)
     ffc:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
    1000:	d0a60317 	ldw	r2,-26612(gp)
    1004:	10000915 	stw	zero,36(r2)
    1008:	e0bff317 	ldw	r2,-52(fp)
    100c:	e0bffa15 	stw	r2,-24(fp)
    1010:	e0bffa17 	ldw	r2,-24(fp)
    1014:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
    1018:	e0bff18b 	ldhu	r2,-58(fp)
}
    101c:	e037883a 	mov	sp,fp
    1020:	dfc00117 	ldw	ra,4(sp)
    1024:	df000017 	ldw	fp,0(sp)
    1028:	dec00204 	addi	sp,sp,8
    102c:	f800283a 	ret

00001030 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    1030:	defffe04 	addi	sp,sp,-8
    1034:	dfc00115 	stw	ra,4(sp)
    1038:	df000015 	stw	fp,0(sp)
    103c:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    1040:	0009ea00 	call	9ea0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    1044:	0001dac0 	call	1dac <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    1048:	0001df40 	call	1df4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    104c:	0001f600 	call	1f60 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    1050:	0001ccc0 	call	1ccc <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
    1054:	0003e000 	call	3e00 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
    1058:	00047000 	call	4700 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
    105c:	00058340 	call	5834 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    1060:	0001e600 	call	1e60 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
    1064:	0001ee00 	call	1ee0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    1068:	0009ec00 	call	9ec0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    106c:	00027d40 	call	27d4 <OSDebugInit>
#endif
}
    1070:	0001883a 	nop
    1074:	e037883a 	mov	sp,fp
    1078:	dfc00117 	ldw	ra,4(sp)
    107c:	df000017 	ldw	fp,0(sp)
    1080:	dec00204 	addi	sp,sp,8
    1084:	f800283a 	ret

00001088 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    1088:	deffff04 	addi	sp,sp,-4
    108c:	df000015 	stw	fp,0(sp)
    1090:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
    1094:	d0a5f443 	ldbu	r2,-26671(gp)
    1098:	10803fcc 	andi	r2,r2,255
    109c:	10800058 	cmpnei	r2,r2,1
    10a0:	1000071e 	bne	r2,zero,10c0 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
    10a4:	d0a60203 	ldbu	r2,-26616(gp)
    10a8:	10803fcc 	andi	r2,r2,255
    10ac:	10803fe0 	cmpeqi	r2,r2,255
    10b0:	1000031e 	bne	r2,zero,10c0 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    10b4:	d0a60203 	ldbu	r2,-26616(gp)
    10b8:	10800044 	addi	r2,r2,1
    10bc:	d0a60205 	stb	r2,-26616(gp)
        }
    }
}
    10c0:	0001883a 	nop
    10c4:	e037883a 	mov	sp,fp
    10c8:	df000017 	ldw	fp,0(sp)
    10cc:	dec00104 	addi	sp,sp,4
    10d0:	f800283a 	ret

000010d4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    10d4:	defffb04 	addi	sp,sp,-20
    10d8:	dfc00415 	stw	ra,16(sp)
    10dc:	df000315 	stw	fp,12(sp)
    10e0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    10e4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
    10e8:	d0a5f443 	ldbu	r2,-26671(gp)
    10ec:	10803fcc 	andi	r2,r2,255
    10f0:	10800058 	cmpnei	r2,r2,1
    10f4:	10002f1e 	bne	r2,zero,11b4 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    10f8:	0005303a 	rdctl	r2,status
    10fc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1100:	e0ffff17 	ldw	r3,-4(fp)
    1104:	00bfff84 	movi	r2,-2
    1108:	1884703a 	and	r2,r3,r2
    110c:	1001703a 	wrctl	status,r2
  
  return context;
    1110:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    1114:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    1118:	d0a60203 	ldbu	r2,-26616(gp)
    111c:	10803fcc 	andi	r2,r2,255
    1120:	10000326 	beq	r2,zero,1130 <OSIntExit+0x5c>
            OSIntNesting--;
    1124:	d0a60203 	ldbu	r2,-26616(gp)
    1128:	10bfffc4 	addi	r2,r2,-1
    112c:	d0a60205 	stb	r2,-26616(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    1130:	d0a60203 	ldbu	r2,-26616(gp)
    1134:	10803fcc 	andi	r2,r2,255
    1138:	10001a1e 	bne	r2,zero,11a4 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    113c:	d0a5f403 	ldbu	r2,-26672(gp)
    1140:	10803fcc 	andi	r2,r2,255
    1144:	1000171e 	bne	r2,zero,11a4 <OSIntExit+0xd0>
                OS_SchedNew();
    1148:	00021d00 	call	21d0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    114c:	d0e5f603 	ldbu	r3,-26664(gp)
    1150:	d0a5f643 	ldbu	r2,-26663(gp)
    1154:	18c03fcc 	andi	r3,r3,255
    1158:	10803fcc 	andi	r2,r2,255
    115c:	18801126 	beq	r3,r2,11a4 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    1160:	d0a5f603 	ldbu	r2,-26664(gp)
    1164:	10c03fcc 	andi	r3,r2,255
    1168:	00800074 	movhi	r2,1
    116c:	10932604 	addi	r2,r2,19608
    1170:	18c7883a 	add	r3,r3,r3
    1174:	18c7883a 	add	r3,r3,r3
    1178:	10c5883a 	add	r2,r2,r3
    117c:	10800017 	ldw	r2,0(r2)
    1180:	d0a5fe15 	stw	r2,-26632(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    1184:	d0a5fe17 	ldw	r2,-26632(gp)
    1188:	10c00e17 	ldw	r3,56(r2)
    118c:	18c00044 	addi	r3,r3,1
    1190:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    1194:	d0a5f917 	ldw	r2,-26652(gp)
    1198:	10800044 	addi	r2,r2,1
    119c:	d0a5f915 	stw	r2,-26652(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    11a0:	0009bcc0 	call	9bcc <OSCtxSw>
    11a4:	e0bffd17 	ldw	r2,-12(fp)
    11a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    11ac:	e0bffe17 	ldw	r2,-8(fp)
    11b0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    11b4:	0001883a 	nop
    11b8:	e037883a 	mov	sp,fp
    11bc:	dfc00117 	ldw	ra,4(sp)
    11c0:	df000017 	ldw	fp,0(sp)
    11c4:	dec00204 	addi	sp,sp,8
    11c8:	f800283a 	ret

000011cc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    11cc:	defffc04 	addi	sp,sp,-16
    11d0:	df000315 	stw	fp,12(sp)
    11d4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    11d8:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    11dc:	d0a5f443 	ldbu	r2,-26671(gp)
    11e0:	10803fcc 	andi	r2,r2,255
    11e4:	10800058 	cmpnei	r2,r2,1
    11e8:	1000161e 	bne	r2,zero,1244 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    11ec:	0005303a 	rdctl	r2,status
    11f0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    11f4:	e0ffff17 	ldw	r3,-4(fp)
    11f8:	00bfff84 	movi	r2,-2
    11fc:	1884703a 	and	r2,r3,r2
    1200:	1001703a 	wrctl	status,r2
  
  return context;
    1204:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    1208:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    120c:	d0a60203 	ldbu	r2,-26616(gp)
    1210:	10803fcc 	andi	r2,r2,255
    1214:	1000071e 	bne	r2,zero,1234 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    1218:	d0a5f403 	ldbu	r2,-26672(gp)
    121c:	10803fcc 	andi	r2,r2,255
    1220:	10803fe0 	cmpeqi	r2,r2,255
    1224:	1000031e 	bne	r2,zero,1234 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    1228:	d0a5f403 	ldbu	r2,-26672(gp)
    122c:	10800044 	addi	r2,r2,1
    1230:	d0a5f405 	stb	r2,-26672(gp)
    1234:	e0bffd17 	ldw	r2,-12(fp)
    1238:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    123c:	e0bffe17 	ldw	r2,-8(fp)
    1240:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
    1244:	0001883a 	nop
    1248:	e037883a 	mov	sp,fp
    124c:	df000017 	ldw	fp,0(sp)
    1250:	dec00104 	addi	sp,sp,4
    1254:	f800283a 	ret

00001258 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    1258:	defff804 	addi	sp,sp,-32
    125c:	dfc00715 	stw	ra,28(sp)
    1260:	df000615 	stw	fp,24(sp)
    1264:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1268:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    126c:	d0a5f443 	ldbu	r2,-26671(gp)
    1270:	10803fcc 	andi	r2,r2,255
    1274:	10800058 	cmpnei	r2,r2,1
    1278:	1000281e 	bne	r2,zero,131c <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    127c:	0005303a 	rdctl	r2,status
    1280:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1284:	e0ffff17 	ldw	r3,-4(fp)
    1288:	00bfff84 	movi	r2,-2
    128c:	1884703a 	and	r2,r3,r2
    1290:	1001703a 	wrctl	status,r2
  
  return context;
    1294:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
    1298:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    129c:	d0a5f403 	ldbu	r2,-26672(gp)
    12a0:	10803fcc 	andi	r2,r2,255
    12a4:	10001926 	beq	r2,zero,130c <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    12a8:	d0a5f403 	ldbu	r2,-26672(gp)
    12ac:	10bfffc4 	addi	r2,r2,-1
    12b0:	d0a5f405 	stb	r2,-26672(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    12b4:	d0a5f403 	ldbu	r2,-26672(gp)
    12b8:	10803fcc 	andi	r2,r2,255
    12bc:	10000e1e 	bne	r2,zero,12f8 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    12c0:	d0a60203 	ldbu	r2,-26616(gp)
    12c4:	10803fcc 	andi	r2,r2,255
    12c8:	1000061e 	bne	r2,zero,12e4 <OSSchedUnlock+0x8c>
    12cc:	e0bffa17 	ldw	r2,-24(fp)
    12d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    12d4:	e0bffb17 	ldw	r2,-20(fp)
    12d8:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
    12dc:	00021000 	call	2100 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
    12e0:	00000e06 	br	131c <OSSchedUnlock+0xc4>
    12e4:	e0bffa17 	ldw	r2,-24(fp)
    12e8:	e0bffc15 	stw	r2,-16(fp)
    12ec:	e0bffc17 	ldw	r2,-16(fp)
    12f0:	1001703a 	wrctl	status,r2
    12f4:	00000906 	br	131c <OSSchedUnlock+0xc4>
    12f8:	e0bffa17 	ldw	r2,-24(fp)
    12fc:	e0bffd15 	stw	r2,-12(fp)
    1300:	e0bffd17 	ldw	r2,-12(fp)
    1304:	1001703a 	wrctl	status,r2
    1308:	00000406 	br	131c <OSSchedUnlock+0xc4>
    130c:	e0bffa17 	ldw	r2,-24(fp)
    1310:	e0bffe15 	stw	r2,-8(fp)
    1314:	e0bffe17 	ldw	r2,-8(fp)
    1318:	1001703a 	wrctl	status,r2
    131c:	0001883a 	nop
    1320:	e037883a 	mov	sp,fp
    1324:	dfc00117 	ldw	ra,4(sp)
    1328:	df000017 	ldw	fp,0(sp)
    132c:	dec00204 	addi	sp,sp,8
    1330:	f800283a 	ret

00001334 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    1334:	defffe04 	addi	sp,sp,-8
    1338:	dfc00115 	stw	ra,4(sp)
    133c:	df000015 	stw	fp,0(sp)
    1340:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
    1344:	d0a5f443 	ldbu	r2,-26671(gp)
    1348:	10803fcc 	andi	r2,r2,255
    134c:	10000f1e 	bne	r2,zero,138c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    1350:	00021d00 	call	21d0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    1354:	d0a5f603 	ldbu	r2,-26664(gp)
    1358:	d0a5f645 	stb	r2,-26663(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    135c:	d0a5f603 	ldbu	r2,-26664(gp)
    1360:	10c03fcc 	andi	r3,r2,255
    1364:	00800074 	movhi	r2,1
    1368:	10932604 	addi	r2,r2,19608
    136c:	18c7883a 	add	r3,r3,r3
    1370:	18c7883a 	add	r3,r3,r3
    1374:	10c5883a 	add	r2,r2,r3
    1378:	10800017 	ldw	r2,0(r2)
    137c:	d0a5fe15 	stw	r2,-26632(gp)
        OSTCBCur      = OSTCBHighRdy;
    1380:	d0a5fe17 	ldw	r2,-26632(gp)
    1384:	d0a60315 	stw	r2,-26612(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    1388:	0009c580 	call	9c58 <OSStartHighRdy>
    }
}
    138c:	0001883a 	nop
    1390:	e037883a 	mov	sp,fp
    1394:	dfc00117 	ldw	ra,4(sp)
    1398:	df000017 	ldw	fp,0(sp)
    139c:	dec00204 	addi	sp,sp,8
    13a0:	f800283a 	ret

000013a4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
    13a4:	defff904 	addi	sp,sp,-28
    13a8:	dfc00615 	stw	ra,24(sp)
    13ac:	df000515 	stw	fp,20(sp)
    13b0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    13b4:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
    13b8:	01000084 	movi	r4,2
    13bc:	0007aa80 	call	7aa8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13c0:	0005303a 	rdctl	r2,status
    13c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13c8:	e0fffc17 	ldw	r3,-16(fp)
    13cc:	00bfff84 	movi	r2,-2
    13d0:	1884703a 	and	r2,r3,r2
    13d4:	1001703a 	wrctl	status,r2
  
  return context;
    13d8:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
    13dc:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
    13e0:	d025f515 	stw	zero,-26668(gp)
    13e4:	e0bffb17 	ldw	r2,-20(fp)
    13e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13ec:	e0bffd17 	ldw	r2,-12(fp)
    13f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
    13f4:	01001904 	movi	r4,100
    13f8:	0007aa80 	call	7aa8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    13fc:	0005303a 	rdctl	r2,status
    1400:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1404:	e0fffe17 	ldw	r3,-8(fp)
    1408:	00bfff84 	movi	r2,-2
    140c:	1884703a 	and	r2,r3,r2
    1410:	1001703a 	wrctl	status,r2
  
  return context;
    1414:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
    1418:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
    141c:	d0a5f517 	ldw	r2,-26668(gp)
    1420:	d0a5fa15 	stw	r2,-26648(gp)
    OSStatRdy    = OS_TRUE;
    1424:	00800044 	movi	r2,1
    1428:	d0a60605 	stb	r2,-26600(gp)
    142c:	e0bffb17 	ldw	r2,-20(fp)
    1430:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1434:	e0bfff17 	ldw	r2,-4(fp)
    1438:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    143c:	0001883a 	nop
    1440:	e037883a 	mov	sp,fp
    1444:	dfc00117 	ldw	ra,4(sp)
    1448:	df000017 	ldw	fp,0(sp)
    144c:	dec00204 	addi	sp,sp,8
    1450:	f800283a 	ret

00001454 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    1454:	defff704 	addi	sp,sp,-36
    1458:	dfc00815 	stw	ra,32(sp)
    145c:	df000715 	stw	fp,28(sp)
    1460:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    1464:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    1468:	0009e800 	call	9e80 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    146c:	0005303a 	rdctl	r2,status
    1470:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1474:	e0fffd17 	ldw	r3,-12(fp)
    1478:	00bfff84 	movi	r2,-2
    147c:	1884703a 	and	r2,r3,r2
    1480:	1001703a 	wrctl	status,r2
  
  return context;
    1484:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    1488:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
    148c:	d0a60417 	ldw	r2,-26608(gp)
    1490:	10800044 	addi	r2,r2,1
    1494:	d0a60415 	stw	r2,-26608(gp)
    1498:	e0bffb17 	ldw	r2,-20(fp)
    149c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14a0:	e0bfff17 	ldw	r2,-4(fp)
    14a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
    14a8:	d0a5f443 	ldbu	r2,-26671(gp)
    14ac:	10803fcc 	andi	r2,r2,255
    14b0:	10800058 	cmpnei	r2,r2,1
    14b4:	10006a1e 	bne	r2,zero,1660 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
    14b8:	d0a5f803 	ldbu	r2,-26656(gp)
    14bc:	10803fcc 	andi	r2,r2,255
    14c0:	10c00060 	cmpeqi	r3,r2,1
    14c4:	1800061e 	bne	r3,zero,14e0 <OSTimeTick+0x8c>
    14c8:	10c000a0 	cmpeqi	r3,r2,2
    14cc:	1800061e 	bne	r3,zero,14e8 <OSTimeTick+0x94>
    14d0:	10000a1e 	bne	r2,zero,14fc <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
    14d4:	00800044 	movi	r2,1
    14d8:	e0bffa05 	stb	r2,-24(fp)
                 break;
    14dc:	00000b06 	br	150c <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
    14e0:	e03ffa05 	stb	zero,-24(fp)
                 break;
    14e4:	00000906 	br	150c <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
    14e8:	00800044 	movi	r2,1
    14ec:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
    14f0:	00800044 	movi	r2,1
    14f4:	d0a5f805 	stb	r2,-26656(gp)
                 break;
    14f8:	00000406 	br	150c <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
    14fc:	00800044 	movi	r2,1
    1500:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
    1504:	d025f805 	stb	zero,-26656(gp)
                 break;
    1508:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
    150c:	e0bffa03 	ldbu	r2,-24(fp)
    1510:	10005226 	beq	r2,zero,165c <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    1514:	d0a5f717 	ldw	r2,-26660(gp)
    1518:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    151c:	00004906 	br	1644 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1520:	0005303a 	rdctl	r2,status
    1524:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1528:	e0fffc17 	ldw	r3,-16(fp)
    152c:	00bfff84 	movi	r2,-2
    1530:	1884703a 	and	r2,r3,r2
    1534:	1001703a 	wrctl	status,r2
  
  return context;
    1538:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
    153c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    1540:	e0bff917 	ldw	r2,-28(fp)
    1544:	10800b8b 	ldhu	r2,46(r2)
    1548:	10bfffcc 	andi	r2,r2,65535
    154c:	10003626 	beq	r2,zero,1628 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    1550:	e0bff917 	ldw	r2,-28(fp)
    1554:	10800b8b 	ldhu	r2,46(r2)
    1558:	10bfffc4 	addi	r2,r2,-1
    155c:	1007883a 	mov	r3,r2
    1560:	e0bff917 	ldw	r2,-28(fp)
    1564:	10c00b8d 	sth	r3,46(r2)
    1568:	e0bff917 	ldw	r2,-28(fp)
    156c:	10800b8b 	ldhu	r2,46(r2)
    1570:	10bfffcc 	andi	r2,r2,65535
    1574:	10002c1e 	bne	r2,zero,1628 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    1578:	e0bff917 	ldw	r2,-28(fp)
    157c:	10800c03 	ldbu	r2,48(r2)
    1580:	10803fcc 	andi	r2,r2,255
    1584:	10800dcc 	andi	r2,r2,55
    1588:	10000b26 	beq	r2,zero,15b8 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    158c:	e0bff917 	ldw	r2,-28(fp)
    1590:	10c00c03 	ldbu	r3,48(r2)
    1594:	00bff204 	movi	r2,-56
    1598:	1884703a 	and	r2,r3,r2
    159c:	1007883a 	mov	r3,r2
    15a0:	e0bff917 	ldw	r2,-28(fp)
    15a4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    15a8:	e0bff917 	ldw	r2,-28(fp)
    15ac:	00c00044 	movi	r3,1
    15b0:	10c00c45 	stb	r3,49(r2)
    15b4:	00000206 	br	15c0 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    15b8:	e0bff917 	ldw	r2,-28(fp)
    15bc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    15c0:	e0bff917 	ldw	r2,-28(fp)
    15c4:	10800c03 	ldbu	r2,48(r2)
    15c8:	10803fcc 	andi	r2,r2,255
    15cc:	1080020c 	andi	r2,r2,8
    15d0:	1000151e 	bne	r2,zero,1628 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    15d4:	e0bff917 	ldw	r2,-28(fp)
    15d8:	10c00d83 	ldbu	r3,54(r2)
    15dc:	d0a60003 	ldbu	r2,-26624(gp)
    15e0:	1884b03a 	or	r2,r3,r2
    15e4:	d0a60005 	stb	r2,-26624(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    15e8:	e0bff917 	ldw	r2,-28(fp)
    15ec:	10800d03 	ldbu	r2,52(r2)
    15f0:	10c03fcc 	andi	r3,r2,255
    15f4:	e0bff917 	ldw	r2,-28(fp)
    15f8:	10800d03 	ldbu	r2,52(r2)
    15fc:	11003fcc 	andi	r4,r2,255
    1600:	d0a60044 	addi	r2,gp,-26623
    1604:	2085883a 	add	r2,r4,r2
    1608:	11000003 	ldbu	r4,0(r2)
    160c:	e0bff917 	ldw	r2,-28(fp)
    1610:	10800d43 	ldbu	r2,53(r2)
    1614:	2084b03a 	or	r2,r4,r2
    1618:	1009883a 	mov	r4,r2
    161c:	d0a60044 	addi	r2,gp,-26623
    1620:	1885883a 	add	r2,r3,r2
    1624:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    1628:	e0bff917 	ldw	r2,-28(fp)
    162c:	10800517 	ldw	r2,20(r2)
    1630:	e0bff915 	stw	r2,-28(fp)
    1634:	e0bffb17 	ldw	r2,-20(fp)
    1638:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    163c:	e0bffe17 	ldw	r2,-8(fp)
    1640:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    1644:	e0bff917 	ldw	r2,-28(fp)
    1648:	10800c83 	ldbu	r2,50(r2)
    164c:	10803fcc 	andi	r2,r2,255
    1650:	10800518 	cmpnei	r2,r2,20
    1654:	103fb21e 	bne	r2,zero,1520 <__alt_data_end+0xfffe8e80>
    1658:	00000106 	br	1660 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
    165c:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    1660:	e037883a 	mov	sp,fp
    1664:	dfc00117 	ldw	ra,4(sp)
    1668:	df000017 	ldw	fp,0(sp)
    166c:	dec00204 	addi	sp,sp,8
    1670:	f800283a 	ret

00001674 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    1674:	deffff04 	addi	sp,sp,-4
    1678:	df000015 	stw	fp,0(sp)
    167c:	d839883a 	mov	fp,sp
    return (OS_VERSION);
    1680:	00804784 	movi	r2,286
}
    1684:	e037883a 	mov	sp,fp
    1688:	df000017 	ldw	fp,0(sp)
    168c:	dec00104 	addi	sp,sp,4
    1690:	f800283a 	ret

00001694 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
    1694:	deffff04 	addi	sp,sp,-4
    1698:	df000015 	stw	fp,0(sp)
    169c:	d839883a 	mov	fp,sp
}
    16a0:	0001883a 	nop
    16a4:	e037883a 	mov	sp,fp
    16a8:	df000017 	ldw	fp,0(sp)
    16ac:	dec00104 	addi	sp,sp,4
    16b0:	f800283a 	ret

000016b4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    16b4:	defff804 	addi	sp,sp,-32
    16b8:	dfc00715 	stw	ra,28(sp)
    16bc:	df000615 	stw	fp,24(sp)
    16c0:	df000604 	addi	fp,sp,24
    16c4:	e13ffc15 	stw	r4,-16(fp)
    16c8:	e17ffd15 	stw	r5,-12(fp)
    16cc:	3007883a 	mov	r3,r6
    16d0:	3805883a 	mov	r2,r7
    16d4:	e0fffe05 	stb	r3,-8(fp)
    16d8:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    16dc:	e0bffc17 	ldw	r2,-16(fp)
    16e0:	10800283 	ldbu	r2,10(r2)
    16e4:	10c03fcc 	andi	r3,r2,255
    16e8:	00800074 	movhi	r2,1
    16ec:	10aab604 	addi	r2,r2,-21800
    16f0:	10c5883a 	add	r2,r2,r3
    16f4:	10800003 	ldbu	r2,0(r2)
    16f8:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    16fc:	e0bffa03 	ldbu	r2,-24(fp)
    1700:	e0fffc17 	ldw	r3,-16(fp)
    1704:	1885883a 	add	r2,r3,r2
    1708:	108002c4 	addi	r2,r2,11
    170c:	10800003 	ldbu	r2,0(r2)
    1710:	10c03fcc 	andi	r3,r2,255
    1714:	00800074 	movhi	r2,1
    1718:	10aab604 	addi	r2,r2,-21800
    171c:	10c5883a 	add	r2,r2,r3
    1720:	10800003 	ldbu	r2,0(r2)
    1724:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    1728:	e0bffa03 	ldbu	r2,-24(fp)
    172c:	100490fa 	slli	r2,r2,3
    1730:	1007883a 	mov	r3,r2
    1734:	e0bffa43 	ldbu	r2,-23(fp)
    1738:	1885883a 	add	r2,r3,r2
    173c:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    1740:	e0fffa83 	ldbu	r3,-22(fp)
    1744:	00800074 	movhi	r2,1
    1748:	10932604 	addi	r2,r2,19608
    174c:	18c7883a 	add	r3,r3,r3
    1750:	18c7883a 	add	r3,r3,r3
    1754:	10c5883a 	add	r2,r2,r3
    1758:	10800017 	ldw	r2,0(r2)
    175c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    1760:	e0bffb17 	ldw	r2,-20(fp)
    1764:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
    1768:	e0bffb17 	ldw	r2,-20(fp)
    176c:	e0fffd17 	ldw	r3,-12(fp)
    1770:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    1774:	e0bffb17 	ldw	r2,-20(fp)
    1778:	10800c03 	ldbu	r2,48(r2)
    177c:	1007883a 	mov	r3,r2
    1780:	e0bffe03 	ldbu	r2,-8(fp)
    1784:	0084303a 	nor	r2,zero,r2
    1788:	1884703a 	and	r2,r3,r2
    178c:	1007883a 	mov	r3,r2
    1790:	e0bffb17 	ldw	r2,-20(fp)
    1794:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    1798:	e0bffb17 	ldw	r2,-20(fp)
    179c:	e0ffff03 	ldbu	r3,-4(fp)
    17a0:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    17a4:	e0bffb17 	ldw	r2,-20(fp)
    17a8:	10800c03 	ldbu	r2,48(r2)
    17ac:	10803fcc 	andi	r2,r2,255
    17b0:	1080020c 	andi	r2,r2,8
    17b4:	1000111e 	bne	r2,zero,17fc <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    17b8:	e0bffb17 	ldw	r2,-20(fp)
    17bc:	10c00d83 	ldbu	r3,54(r2)
    17c0:	d0a60003 	ldbu	r2,-26624(gp)
    17c4:	1884b03a 	or	r2,r3,r2
    17c8:	d0a60005 	stb	r2,-26624(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    17cc:	e0fffa03 	ldbu	r3,-24(fp)
    17d0:	e13ffa03 	ldbu	r4,-24(fp)
    17d4:	d0a60044 	addi	r2,gp,-26623
    17d8:	2085883a 	add	r2,r4,r2
    17dc:	11000003 	ldbu	r4,0(r2)
    17e0:	e0bffb17 	ldw	r2,-20(fp)
    17e4:	10800d43 	ldbu	r2,53(r2)
    17e8:	2084b03a 	or	r2,r4,r2
    17ec:	1009883a 	mov	r4,r2
    17f0:	d0a60044 	addi	r2,gp,-26623
    17f4:	1885883a 	add	r2,r3,r2
    17f8:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    17fc:	e17ffc17 	ldw	r5,-16(fp)
    1800:	e13ffb17 	ldw	r4,-20(fp)
    1804:	0001aac0 	call	1aac <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
    1808:	e0bffb17 	ldw	r2,-20(fp)
    180c:	10800817 	ldw	r2,32(r2)
    1810:	10000826 	beq	r2,zero,1834 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    1814:	e0bffb17 	ldw	r2,-20(fp)
    1818:	10800817 	ldw	r2,32(r2)
    181c:	100b883a 	mov	r5,r2
    1820:	e13ffb17 	ldw	r4,-20(fp)
    1824:	0001b640 	call	1b64 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    1828:	e0bffb17 	ldw	r2,-20(fp)
    182c:	e0fffc17 	ldw	r3,-16(fp)
    1830:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
    1834:	e0bffa83 	ldbu	r2,-22(fp)
}
    1838:	e037883a 	mov	sp,fp
    183c:	dfc00117 	ldw	ra,4(sp)
    1840:	df000017 	ldw	fp,0(sp)
    1844:	dec00204 	addi	sp,sp,8
    1848:	f800283a 	ret

0000184c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    184c:	defffd04 	addi	sp,sp,-12
    1850:	df000215 	stw	fp,8(sp)
    1854:	df000204 	addi	fp,sp,8
    1858:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    185c:	d0a60317 	ldw	r2,-26612(gp)
    1860:	e0ffff17 	ldw	r3,-4(fp)
    1864:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    1868:	d0a60317 	ldw	r2,-26612(gp)
    186c:	10800d03 	ldbu	r2,52(r2)
    1870:	10803fcc 	andi	r2,r2,255
    1874:	d0e60317 	ldw	r3,-26612(gp)
    1878:	18c00d03 	ldbu	r3,52(r3)
    187c:	18c03fcc 	andi	r3,r3,255
    1880:	e13fff17 	ldw	r4,-4(fp)
    1884:	20c7883a 	add	r3,r4,r3
    1888:	18c002c4 	addi	r3,r3,11
    188c:	19000003 	ldbu	r4,0(r3)
    1890:	d0e60317 	ldw	r3,-26612(gp)
    1894:	18c00d43 	ldbu	r3,53(r3)
    1898:	20c6b03a 	or	r3,r4,r3
    189c:	1809883a 	mov	r4,r3
    18a0:	e0ffff17 	ldw	r3,-4(fp)
    18a4:	1885883a 	add	r2,r3,r2
    18a8:	108002c4 	addi	r2,r2,11
    18ac:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    18b0:	e0bfff17 	ldw	r2,-4(fp)
    18b4:	10c00283 	ldbu	r3,10(r2)
    18b8:	d0a60317 	ldw	r2,-26612(gp)
    18bc:	10800d83 	ldbu	r2,54(r2)
    18c0:	1884b03a 	or	r2,r3,r2
    18c4:	1007883a 	mov	r3,r2
    18c8:	e0bfff17 	ldw	r2,-4(fp)
    18cc:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    18d0:	d0a60317 	ldw	r2,-26612(gp)
    18d4:	10800d03 	ldbu	r2,52(r2)
    18d8:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    18dc:	e0fffe03 	ldbu	r3,-8(fp)
    18e0:	e13ffe03 	ldbu	r4,-8(fp)
    18e4:	d0a60044 	addi	r2,gp,-26623
    18e8:	2085883a 	add	r2,r4,r2
    18ec:	10800003 	ldbu	r2,0(r2)
    18f0:	1009883a 	mov	r4,r2
    18f4:	d0a60317 	ldw	r2,-26612(gp)
    18f8:	10800d43 	ldbu	r2,53(r2)
    18fc:	0084303a 	nor	r2,zero,r2
    1900:	2084703a 	and	r2,r4,r2
    1904:	1009883a 	mov	r4,r2
    1908:	d0a60044 	addi	r2,gp,-26623
    190c:	1885883a 	add	r2,r3,r2
    1910:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    1914:	e0fffe03 	ldbu	r3,-8(fp)
    1918:	d0a60044 	addi	r2,gp,-26623
    191c:	1885883a 	add	r2,r3,r2
    1920:	10800003 	ldbu	r2,0(r2)
    1924:	10803fcc 	andi	r2,r2,255
    1928:	1000071e 	bne	r2,zero,1948 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    192c:	d0a60317 	ldw	r2,-26612(gp)
    1930:	10800d83 	ldbu	r2,54(r2)
    1934:	0084303a 	nor	r2,zero,r2
    1938:	1007883a 	mov	r3,r2
    193c:	d0a60003 	ldbu	r2,-26624(gp)
    1940:	1884703a 	and	r2,r3,r2
    1944:	d0a60005 	stb	r2,-26624(gp)
    }
}
    1948:	0001883a 	nop
    194c:	e037883a 	mov	sp,fp
    1950:	df000017 	ldw	fp,0(sp)
    1954:	dec00104 	addi	sp,sp,4
    1958:	f800283a 	ret

0000195c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
    195c:	defffb04 	addi	sp,sp,-20
    1960:	df000415 	stw	fp,16(sp)
    1964:	df000404 	addi	fp,sp,16
    1968:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    196c:	d0a60317 	ldw	r2,-26612(gp)
    1970:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
    1974:	d0a60317 	ldw	r2,-26612(gp)
    1978:	e0ffff17 	ldw	r3,-4(fp)
    197c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
    1980:	e0bfff17 	ldw	r2,-4(fp)
    1984:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
    1988:	e0bffc17 	ldw	r2,-16(fp)
    198c:	10800017 	ldw	r2,0(r2)
    1990:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1994:	00002006 	br	1a18 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
    1998:	d0a60317 	ldw	r2,-26612(gp)
    199c:	10800d03 	ldbu	r2,52(r2)
    19a0:	10803fcc 	andi	r2,r2,255
    19a4:	d0e60317 	ldw	r3,-26612(gp)
    19a8:	18c00d03 	ldbu	r3,52(r3)
    19ac:	18c03fcc 	andi	r3,r3,255
    19b0:	e13ffd17 	ldw	r4,-12(fp)
    19b4:	20c7883a 	add	r3,r4,r3
    19b8:	18c002c4 	addi	r3,r3,11
    19bc:	19000003 	ldbu	r4,0(r3)
    19c0:	d0e60317 	ldw	r3,-26612(gp)
    19c4:	18c00d43 	ldbu	r3,53(r3)
    19c8:	20c6b03a 	or	r3,r4,r3
    19cc:	1809883a 	mov	r4,r3
    19d0:	e0fffd17 	ldw	r3,-12(fp)
    19d4:	1885883a 	add	r2,r3,r2
    19d8:	108002c4 	addi	r2,r2,11
    19dc:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    19e0:	e0bffd17 	ldw	r2,-12(fp)
    19e4:	10c00283 	ldbu	r3,10(r2)
    19e8:	d0a60317 	ldw	r2,-26612(gp)
    19ec:	10800d83 	ldbu	r2,54(r2)
    19f0:	1884b03a 	or	r2,r3,r2
    19f4:	1007883a 	mov	r3,r2
    19f8:	e0bffd17 	ldw	r2,-12(fp)
    19fc:	10c00285 	stb	r3,10(r2)
        pevents++;
    1a00:	e0bffc17 	ldw	r2,-16(fp)
    1a04:	10800104 	addi	r2,r2,4
    1a08:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
    1a0c:	e0bffc17 	ldw	r2,-16(fp)
    1a10:	10800017 	ldw	r2,0(r2)
    1a14:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
    1a18:	e0bffd17 	ldw	r2,-12(fp)
    1a1c:	103fde1e 	bne	r2,zero,1998 <__alt_data_end+0xfffe92f8>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    1a20:	d0a60317 	ldw	r2,-26612(gp)
    1a24:	10800d03 	ldbu	r2,52(r2)
    1a28:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    1a2c:	e0fffe03 	ldbu	r3,-8(fp)
    1a30:	e13ffe03 	ldbu	r4,-8(fp)
    1a34:	d0a60044 	addi	r2,gp,-26623
    1a38:	2085883a 	add	r2,r4,r2
    1a3c:	10800003 	ldbu	r2,0(r2)
    1a40:	1009883a 	mov	r4,r2
    1a44:	d0a60317 	ldw	r2,-26612(gp)
    1a48:	10800d43 	ldbu	r2,53(r2)
    1a4c:	0084303a 	nor	r2,zero,r2
    1a50:	2084703a 	and	r2,r4,r2
    1a54:	1009883a 	mov	r4,r2
    1a58:	d0a60044 	addi	r2,gp,-26623
    1a5c:	1885883a 	add	r2,r3,r2
    1a60:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    1a64:	e0fffe03 	ldbu	r3,-8(fp)
    1a68:	d0a60044 	addi	r2,gp,-26623
    1a6c:	1885883a 	add	r2,r3,r2
    1a70:	10800003 	ldbu	r2,0(r2)
    1a74:	10803fcc 	andi	r2,r2,255
    1a78:	1000071e 	bne	r2,zero,1a98 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    1a7c:	d0a60317 	ldw	r2,-26612(gp)
    1a80:	10800d83 	ldbu	r2,54(r2)
    1a84:	0084303a 	nor	r2,zero,r2
    1a88:	1007883a 	mov	r3,r2
    1a8c:	d0a60003 	ldbu	r2,-26624(gp)
    1a90:	1884703a 	and	r2,r3,r2
    1a94:	d0a60005 	stb	r2,-26624(gp)
    }
}
    1a98:	0001883a 	nop
    1a9c:	e037883a 	mov	sp,fp
    1aa0:	df000017 	ldw	fp,0(sp)
    1aa4:	dec00104 	addi	sp,sp,4
    1aa8:	f800283a 	ret

00001aac <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    1aac:	defffc04 	addi	sp,sp,-16
    1ab0:	df000315 	stw	fp,12(sp)
    1ab4:	df000304 	addi	fp,sp,12
    1ab8:	e13ffe15 	stw	r4,-8(fp)
    1abc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    1ac0:	e0bffe17 	ldw	r2,-8(fp)
    1ac4:	10800d03 	ldbu	r2,52(r2)
    1ac8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    1acc:	e0bffd03 	ldbu	r2,-12(fp)
    1ad0:	e0fffd03 	ldbu	r3,-12(fp)
    1ad4:	e13fff17 	ldw	r4,-4(fp)
    1ad8:	20c7883a 	add	r3,r4,r3
    1adc:	18c002c4 	addi	r3,r3,11
    1ae0:	18c00003 	ldbu	r3,0(r3)
    1ae4:	1809883a 	mov	r4,r3
    1ae8:	e0fffe17 	ldw	r3,-8(fp)
    1aec:	18c00d43 	ldbu	r3,53(r3)
    1af0:	00c6303a 	nor	r3,zero,r3
    1af4:	20c6703a 	and	r3,r4,r3
    1af8:	1809883a 	mov	r4,r3
    1afc:	e0ffff17 	ldw	r3,-4(fp)
    1b00:	1885883a 	add	r2,r3,r2
    1b04:	108002c4 	addi	r2,r2,11
    1b08:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
    1b0c:	e0bffd03 	ldbu	r2,-12(fp)
    1b10:	e0ffff17 	ldw	r3,-4(fp)
    1b14:	1885883a 	add	r2,r3,r2
    1b18:	108002c4 	addi	r2,r2,11
    1b1c:	10800003 	ldbu	r2,0(r2)
    1b20:	10803fcc 	andi	r2,r2,255
    1b24:	10000a1e 	bne	r2,zero,1b50 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    1b28:	e0bfff17 	ldw	r2,-4(fp)
    1b2c:	10800283 	ldbu	r2,10(r2)
    1b30:	1007883a 	mov	r3,r2
    1b34:	e0bffe17 	ldw	r2,-8(fp)
    1b38:	10800d83 	ldbu	r2,54(r2)
    1b3c:	0084303a 	nor	r2,zero,r2
    1b40:	1884703a 	and	r2,r3,r2
    1b44:	1007883a 	mov	r3,r2
    1b48:	e0bfff17 	ldw	r2,-4(fp)
    1b4c:	10c00285 	stb	r3,10(r2)
    }
}
    1b50:	0001883a 	nop
    1b54:	e037883a 	mov	sp,fp
    1b58:	df000017 	ldw	fp,0(sp)
    1b5c:	dec00104 	addi	sp,sp,4
    1b60:	f800283a 	ret

00001b64 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
    1b64:	defffa04 	addi	sp,sp,-24
    1b68:	df000515 	stw	fp,20(sp)
    1b6c:	df000504 	addi	fp,sp,20
    1b70:	e13ffe15 	stw	r4,-8(fp)
    1b74:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
    1b78:	e0bffe17 	ldw	r2,-8(fp)
    1b7c:	10800d03 	ldbu	r2,52(r2)
    1b80:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
    1b84:	e0bffe17 	ldw	r2,-8(fp)
    1b88:	10800d83 	ldbu	r2,54(r2)
    1b8c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
    1b90:	e0bffe17 	ldw	r2,-8(fp)
    1b94:	10800d43 	ldbu	r2,53(r2)
    1b98:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
    1b9c:	e0bfff17 	ldw	r2,-4(fp)
    1ba0:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
    1ba4:	e0bffb17 	ldw	r2,-20(fp)
    1ba8:	10800017 	ldw	r2,0(r2)
    1bac:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1bb0:	00002506 	br	1c48 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
    1bb4:	e0bffd03 	ldbu	r2,-12(fp)
    1bb8:	e0fffd03 	ldbu	r3,-12(fp)
    1bbc:	e13ffc17 	ldw	r4,-16(fp)
    1bc0:	20c7883a 	add	r3,r4,r3
    1bc4:	18c002c4 	addi	r3,r3,11
    1bc8:	18c00003 	ldbu	r3,0(r3)
    1bcc:	1809883a 	mov	r4,r3
    1bd0:	e0fffd83 	ldbu	r3,-10(fp)
    1bd4:	00c6303a 	nor	r3,zero,r3
    1bd8:	20c6703a 	and	r3,r4,r3
    1bdc:	1809883a 	mov	r4,r3
    1be0:	e0fffc17 	ldw	r3,-16(fp)
    1be4:	1885883a 	add	r2,r3,r2
    1be8:	108002c4 	addi	r2,r2,11
    1bec:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
    1bf0:	e0bffd03 	ldbu	r2,-12(fp)
    1bf4:	e0fffc17 	ldw	r3,-16(fp)
    1bf8:	1885883a 	add	r2,r3,r2
    1bfc:	108002c4 	addi	r2,r2,11
    1c00:	10800003 	ldbu	r2,0(r2)
    1c04:	10803fcc 	andi	r2,r2,255
    1c08:	1000091e 	bne	r2,zero,1c30 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
    1c0c:	e0bffc17 	ldw	r2,-16(fp)
    1c10:	10800283 	ldbu	r2,10(r2)
    1c14:	1007883a 	mov	r3,r2
    1c18:	e0bffd43 	ldbu	r2,-11(fp)
    1c1c:	0084303a 	nor	r2,zero,r2
    1c20:	1884703a 	and	r2,r3,r2
    1c24:	1007883a 	mov	r3,r2
    1c28:	e0bffc17 	ldw	r2,-16(fp)
    1c2c:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
    1c30:	e0bffb17 	ldw	r2,-20(fp)
    1c34:	10800104 	addi	r2,r2,4
    1c38:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
    1c3c:	e0bffb17 	ldw	r2,-20(fp)
    1c40:	10800017 	ldw	r2,0(r2)
    1c44:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
    1c48:	e0bffc17 	ldw	r2,-16(fp)
    1c4c:	103fd91e 	bne	r2,zero,1bb4 <__alt_data_end+0xfffe9514>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
    1c50:	0001883a 	nop
    1c54:	e037883a 	mov	sp,fp
    1c58:	df000017 	ldw	fp,0(sp)
    1c5c:	dec00104 	addi	sp,sp,4
    1c60:	f800283a 	ret

00001c64 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    1c64:	defffc04 	addi	sp,sp,-16
    1c68:	df000315 	stw	fp,12(sp)
    1c6c:	df000304 	addi	fp,sp,12
    1c70:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    1c74:	e0bfff17 	ldw	r2,-4(fp)
    1c78:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
    1c7c:	e0bfff17 	ldw	r2,-4(fp)
    1c80:	108002c4 	addi	r2,r2,11
    1c84:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1c88:	e03ffe05 	stb	zero,-8(fp)
    1c8c:	00000706 	br	1cac <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
    1c90:	e0bffd17 	ldw	r2,-12(fp)
    1c94:	10c00044 	addi	r3,r2,1
    1c98:	e0fffd15 	stw	r3,-12(fp)
    1c9c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1ca0:	e0bffe03 	ldbu	r2,-8(fp)
    1ca4:	10800044 	addi	r2,r2,1
    1ca8:	e0bffe05 	stb	r2,-8(fp)
    1cac:	e0bffe03 	ldbu	r2,-8(fp)
    1cb0:	108000f0 	cmpltui	r2,r2,3
    1cb4:	103ff61e 	bne	r2,zero,1c90 <__alt_data_end+0xfffe95f0>
        *ptbl++ = 0;
    }
}
    1cb8:	0001883a 	nop
    1cbc:	e037883a 	mov	sp,fp
    1cc0:	df000017 	ldw	fp,0(sp)
    1cc4:	dec00104 	addi	sp,sp,4
    1cc8:	f800283a 	ret

00001ccc <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    1ccc:	defffb04 	addi	sp,sp,-20
    1cd0:	dfc00415 	stw	ra,16(sp)
    1cd4:	df000315 	stw	fp,12(sp)
    1cd8:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    1cdc:	0142d004 	movi	r5,2880
    1ce0:	01000074 	movhi	r4,1
    1ce4:	210f1204 	addi	r4,r4,15432
    1ce8:	00020440 	call	2044 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    1cec:	00800074 	movhi	r2,1
    1cf0:	108f1204 	addi	r2,r2,15432
    1cf4:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
    1cf8:	00800074 	movhi	r2,1
    1cfc:	108f1e04 	addi	r2,r2,15480
    1d00:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    1d04:	e03ffd0d 	sth	zero,-12(fp)
    1d08:	00001306 	br	1d58 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1d0c:	e0bffe17 	ldw	r2,-8(fp)
    1d10:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	e0ffff17 	ldw	r3,-4(fp)
    1d1c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    1d20:	e0bffe17 	ldw	r2,-8(fp)
    1d24:	00c00fc4 	movi	r3,63
    1d28:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    1d2c:	e0bffe17 	ldw	r2,-8(fp)
    1d30:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	10800c04 	addi	r2,r2,48
    1d3c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
    1d40:	e0bfff17 	ldw	r2,-4(fp)
    1d44:	10800c04 	addi	r2,r2,48
    1d48:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    1d4c:	e0bffd0b 	ldhu	r2,-12(fp)
    1d50:	10800044 	addi	r2,r2,1
    1d54:	e0bffd0d 	sth	r2,-12(fp)
    1d58:	e0bffd0b 	ldhu	r2,-12(fp)
    1d5c:	10800ef0 	cmpltui	r2,r2,59
    1d60:	103fea1e 	bne	r2,zero,1d0c <__alt_data_end+0xfffe966c>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    1d64:	e0bffe17 	ldw	r2,-8(fp)
    1d68:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    1d6c:	e0bffe17 	ldw	r2,-8(fp)
    1d70:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    1d74:	e0bffe17 	ldw	r2,-8(fp)
    1d78:	00c00fc4 	movi	r3,63
    1d7c:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    1d80:	e0bffe17 	ldw	r2,-8(fp)
    1d84:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    1d88:	00800074 	movhi	r2,1
    1d8c:	108f1204 	addi	r2,r2,15432
    1d90:	d0a60115 	stw	r2,-26620(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    1d94:	0001883a 	nop
    1d98:	e037883a 	mov	sp,fp
    1d9c:	dfc00117 	ldw	ra,4(sp)
    1da0:	df000017 	ldw	fp,0(sp)
    1da4:	dec00204 	addi	sp,sp,8
    1da8:	f800283a 	ret

00001dac <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    1dac:	deffff04 	addi	sp,sp,-4
    1db0:	df000015 	stw	fp,0(sp)
    1db4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1db8:	d0260415 	stw	zero,-26608(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1dbc:	d0260205 	stb	zero,-26616(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1dc0:	d025f405 	stb	zero,-26672(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    1dc4:	d025fc45 	stb	zero,-26639(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    1dc8:	d025f445 	stb	zero,-26671(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    1dcc:	d025f915 	stw	zero,-26652(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1dd0:	d025f515 	stw	zero,-26668(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    1dd4:	d0260715 	stw	zero,-26596(gp)
    OSIdleCtrMax  = 0L;
    1dd8:	d025fa15 	stw	zero,-26648(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
    1ddc:	d0260605 	stb	zero,-26600(gp)
#endif
}
    1de0:	0001883a 	nop
    1de4:	e037883a 	mov	sp,fp
    1de8:	df000017 	ldw	fp,0(sp)
    1dec:	dec00104 	addi	sp,sp,4
    1df0:	f800283a 	ret

00001df4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    1df4:	defffd04 	addi	sp,sp,-12
    1df8:	df000215 	stw	fp,8(sp)
    1dfc:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    1e00:	d0260005 	stb	zero,-26624(gp)
    prdytbl       = &OSRdyTbl[0];
    1e04:	d0a60044 	addi	r2,gp,-26623
    1e08:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1e0c:	e03ffe05 	stb	zero,-8(fp)
    1e10:	00000706 	br	1e30 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
    1e14:	e0bfff17 	ldw	r2,-4(fp)
    1e18:	10c00044 	addi	r3,r2,1
    1e1c:	e0ffff15 	stw	r3,-4(fp)
    1e20:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1e24:	e0bffe03 	ldbu	r2,-8(fp)
    1e28:	10800044 	addi	r2,r2,1
    1e2c:	e0bffe05 	stb	r2,-8(fp)
    1e30:	e0bffe03 	ldbu	r2,-8(fp)
    1e34:	108000f0 	cmpltui	r2,r2,3
    1e38:	103ff61e 	bne	r2,zero,1e14 <__alt_data_end+0xfffe9774>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    1e3c:	d025f645 	stb	zero,-26663(gp)
    OSPrioHighRdy = 0;
    1e40:	d025f605 	stb	zero,-26664(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
    1e44:	d025fe15 	stw	zero,-26632(gp)
    OSTCBCur      = (OS_TCB *)0;
    1e48:	d0260315 	stw	zero,-26612(gp)
}
    1e4c:	0001883a 	nop
    1e50:	e037883a 	mov	sp,fp
    1e54:	df000017 	ldw	fp,0(sp)
    1e58:	dec00104 	addi	sp,sp,4
    1e5c:	f800283a 	ret

00001e60 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    1e60:	defff804 	addi	sp,sp,-32
    1e64:	dfc00715 	stw	ra,28(sp)
    1e68:	df000615 	stw	fp,24(sp)
    1e6c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    1e70:	008000c4 	movi	r2,3
    1e74:	d8800415 	stw	r2,16(sp)
    1e78:	d8000315 	stw	zero,12(sp)
    1e7c:	00808004 	movi	r2,512
    1e80:	d8800215 	stw	r2,8(sp)
    1e84:	00800074 	movhi	r2,1
    1e88:	108d1204 	addi	r2,r2,13384
    1e8c:	d8800115 	stw	r2,4(sp)
    1e90:	00bfffd4 	movui	r2,65535
    1e94:	d8800015 	stw	r2,0(sp)
    1e98:	01c00504 	movi	r7,20
    1e9c:	01800074 	movhi	r6,1
    1ea0:	318f1104 	addi	r6,r6,15428
    1ea4:	000b883a 	mov	r5,zero
    1ea8:	01000034 	movhi	r4,0
    1eac:	2108c304 	addi	r4,r4,8972
    1eb0:	00069d80 	call	69d8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    1eb4:	e1bfff04 	addi	r6,fp,-4
    1eb8:	01400074 	movhi	r5,1
    1ebc:	296af604 	addi	r5,r5,-21544
    1ec0:	01000504 	movi	r4,20
    1ec4:	00071e80 	call	71e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    1ec8:	0001883a 	nop
    1ecc:	e037883a 	mov	sp,fp
    1ed0:	dfc00117 	ldw	ra,4(sp)
    1ed4:	df000017 	ldw	fp,0(sp)
    1ed8:	dec00204 	addi	sp,sp,8
    1edc:	f800283a 	ret

00001ee0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
    1ee0:	defff804 	addi	sp,sp,-32
    1ee4:	dfc00715 	stw	ra,28(sp)
    1ee8:	df000615 	stw	fp,24(sp)
    1eec:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
    1ef0:	008000c4 	movi	r2,3
    1ef4:	d8800415 	stw	r2,16(sp)
    1ef8:	d8000315 	stw	zero,12(sp)
    1efc:	00808004 	movi	r2,512
    1f00:	d8800215 	stw	r2,8(sp)
    1f04:	00800074 	movhi	r2,1
    1f08:	108a9a04 	addi	r2,r2,10856
    1f0c:	d8800115 	stw	r2,4(sp)
    1f10:	00bfff94 	movui	r2,65534
    1f14:	d8800015 	stw	r2,0(sp)
    1f18:	01c004c4 	movi	r7,19
    1f1c:	01800074 	movhi	r6,1
    1f20:	318c9904 	addi	r6,r6,12900
    1f24:	000b883a 	mov	r5,zero
    1f28:	01000034 	movhi	r4,0
    1f2c:	2108da04 	addi	r4,r4,9064
    1f30:	00069d80 	call	69d8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
    1f34:	e1bfff04 	addi	r6,fp,-4
    1f38:	01400074 	movhi	r5,1
    1f3c:	296afa04 	addi	r5,r5,-21528
    1f40:	010004c4 	movi	r4,19
    1f44:	00071e80 	call	71e8 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
    1f48:	0001883a 	nop
    1f4c:	e037883a 	mov	sp,fp
    1f50:	dfc00117 	ldw	ra,4(sp)
    1f54:	df000017 	ldw	fp,0(sp)
    1f58:	dec00204 	addi	sp,sp,8
    1f5c:	f800283a 	ret

00001f60 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    1f60:	defffb04 	addi	sp,sp,-20
    1f64:	dfc00415 	stw	ra,16(sp)
    1f68:	df000315 	stw	fp,12(sp)
    1f6c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    1f70:	01414404 	movi	r5,1296
    1f74:	01000074 	movhi	r4,1
    1f78:	2111e204 	addi	r4,r4,18312
    1f7c:	00020440 	call	2044 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    1f80:	01401504 	movi	r5,84
    1f84:	01000074 	movhi	r4,1
    1f88:	21132604 	addi	r4,r4,19608
    1f8c:	00020440 	call	2044 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    1f90:	00800074 	movhi	r2,1
    1f94:	1091e204 	addi	r2,r2,18312
    1f98:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
    1f9c:	00800074 	movhi	r2,1
    1fa0:	1091fd04 	addi	r2,r2,18420
    1fa4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    1fa8:	e03ffd05 	stb	zero,-12(fp)
    1fac:	00001106 	br	1ff4 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
    1fb0:	e0bffe17 	ldw	r2,-8(fp)
    1fb4:	e0ffff17 	ldw	r3,-4(fp)
    1fb8:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    1fbc:	e0bffe17 	ldw	r2,-8(fp)
    1fc0:	00c00fc4 	movi	r3,63
    1fc4:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    1fc8:	e0bffe17 	ldw	r2,-8(fp)
    1fcc:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
    1fd0:	e0bffe17 	ldw	r2,-8(fp)
    1fd4:	10801b04 	addi	r2,r2,108
    1fd8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
    1fdc:	e0bfff17 	ldw	r2,-4(fp)
    1fe0:	10801b04 	addi	r2,r2,108
    1fe4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    1fe8:	e0bffd03 	ldbu	r2,-12(fp)
    1fec:	10800044 	addi	r2,r2,1
    1ff0:	e0bffd05 	stb	r2,-12(fp)
    1ff4:	e0bffd03 	ldbu	r2,-12(fp)
    1ff8:	108002f0 	cmpltui	r2,r2,11
    1ffc:	103fec1e 	bne	r2,zero,1fb0 <__alt_data_end+0xfffe9910>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    2000:	e0bffe17 	ldw	r2,-8(fp)
    2004:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	00c00fc4 	movi	r3,63
    2010:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    2014:	e0bffe17 	ldw	r2,-8(fp)
    2018:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    201c:	d025f715 	stw	zero,-26660(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
    2020:	00800074 	movhi	r2,1
    2024:	1091e204 	addi	r2,r2,18312
    2028:	d0a5fb15 	stw	r2,-26644(gp)
}
    202c:	0001883a 	nop
    2030:	e037883a 	mov	sp,fp
    2034:	dfc00117 	ldw	ra,4(sp)
    2038:	df000017 	ldw	fp,0(sp)
    203c:	dec00204 	addi	sp,sp,8
    2040:	f800283a 	ret

00002044 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    2044:	defffd04 	addi	sp,sp,-12
    2048:	df000215 	stw	fp,8(sp)
    204c:	df000204 	addi	fp,sp,8
    2050:	e13ffe15 	stw	r4,-8(fp)
    2054:	2805883a 	mov	r2,r5
    2058:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    205c:	00000706 	br	207c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
    2060:	e0bffe17 	ldw	r2,-8(fp)
    2064:	10c00044 	addi	r3,r2,1
    2068:	e0fffe15 	stw	r3,-8(fp)
    206c:	10000005 	stb	zero,0(r2)
        size--;
    2070:	e0bfff0b 	ldhu	r2,-4(fp)
    2074:	10bfffc4 	addi	r2,r2,-1
    2078:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    207c:	e0bfff0b 	ldhu	r2,-4(fp)
    2080:	103ff71e 	bne	r2,zero,2060 <__alt_data_end+0xfffe99c0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    2084:	0001883a 	nop
    2088:	e037883a 	mov	sp,fp
    208c:	df000017 	ldw	fp,0(sp)
    2090:	dec00104 	addi	sp,sp,4
    2094:	f800283a 	ret

00002098 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    2098:	defffc04 	addi	sp,sp,-16
    209c:	df000315 	stw	fp,12(sp)
    20a0:	df000304 	addi	fp,sp,12
    20a4:	e13ffd15 	stw	r4,-12(fp)
    20a8:	e17ffe15 	stw	r5,-8(fp)
    20ac:	3005883a 	mov	r2,r6
    20b0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
    20b4:	00000b06 	br	20e4 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
    20b8:	e0bffd17 	ldw	r2,-12(fp)
    20bc:	10c00044 	addi	r3,r2,1
    20c0:	e0fffd15 	stw	r3,-12(fp)
    20c4:	e0fffe17 	ldw	r3,-8(fp)
    20c8:	19000044 	addi	r4,r3,1
    20cc:	e13ffe15 	stw	r4,-8(fp)
    20d0:	18c00003 	ldbu	r3,0(r3)
    20d4:	10c00005 	stb	r3,0(r2)
        size--;
    20d8:	e0bfff0b 	ldhu	r2,-4(fp)
    20dc:	10bfffc4 	addi	r2,r2,-1
    20e0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    20e4:	e0bfff0b 	ldhu	r2,-4(fp)
    20e8:	103ff31e 	bne	r2,zero,20b8 <__alt_data_end+0xfffe9a18>
        *pdest++ = *psrc++;
        size--;
    }
}
    20ec:	0001883a 	nop
    20f0:	e037883a 	mov	sp,fp
    20f4:	df000017 	ldw	fp,0(sp)
    20f8:	dec00104 	addi	sp,sp,4
    20fc:	f800283a 	ret

00002100 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    2100:	defffb04 	addi	sp,sp,-20
    2104:	dfc00415 	stw	ra,16(sp)
    2108:	df000315 	stw	fp,12(sp)
    210c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    2110:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2114:	0005303a 	rdctl	r2,status
    2118:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    211c:	e0ffff17 	ldw	r3,-4(fp)
    2120:	00bfff84 	movi	r2,-2
    2124:	1884703a 	and	r2,r3,r2
    2128:	1001703a 	wrctl	status,r2
  
  return context;
    212c:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
    2130:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    2134:	d0a60203 	ldbu	r2,-26616(gp)
    2138:	10803fcc 	andi	r2,r2,255
    213c:	10001a1e 	bne	r2,zero,21a8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    2140:	d0a5f403 	ldbu	r2,-26672(gp)
    2144:	10803fcc 	andi	r2,r2,255
    2148:	1000171e 	bne	r2,zero,21a8 <OS_Sched+0xa8>
            OS_SchedNew();
    214c:	00021d00 	call	21d0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    2150:	d0e5f603 	ldbu	r3,-26664(gp)
    2154:	d0a5f643 	ldbu	r2,-26663(gp)
    2158:	18c03fcc 	andi	r3,r3,255
    215c:	10803fcc 	andi	r2,r2,255
    2160:	18801126 	beq	r3,r2,21a8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    2164:	d0a5f603 	ldbu	r2,-26664(gp)
    2168:	10c03fcc 	andi	r3,r2,255
    216c:	00800074 	movhi	r2,1
    2170:	10932604 	addi	r2,r2,19608
    2174:	18c7883a 	add	r3,r3,r3
    2178:	18c7883a 	add	r3,r3,r3
    217c:	10c5883a 	add	r2,r2,r3
    2180:	10800017 	ldw	r2,0(r2)
    2184:	d0a5fe15 	stw	r2,-26632(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    2188:	d0a5fe17 	ldw	r2,-26632(gp)
    218c:	10c00e17 	ldw	r3,56(r2)
    2190:	18c00044 	addi	r3,r3,1
    2194:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    2198:	d0a5f917 	ldw	r2,-26652(gp)
    219c:	10800044 	addi	r2,r2,1
    21a0:	d0a5f915 	stw	r2,-26652(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
    21a4:	0009bcc0 	call	9bcc <OSCtxSw>
    21a8:	e0bffd17 	ldw	r2,-12(fp)
    21ac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
    21b8:	0001883a 	nop
    21bc:	e037883a 	mov	sp,fp
    21c0:	dfc00117 	ldw	ra,4(sp)
    21c4:	df000017 	ldw	fp,0(sp)
    21c8:	dec00204 	addi	sp,sp,8
    21cc:	f800283a 	ret

000021d0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    21d0:	defffe04 	addi	sp,sp,-8
    21d4:	df000115 	stw	fp,4(sp)
    21d8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    21dc:	d0a60003 	ldbu	r2,-26624(gp)
    21e0:	10c03fcc 	andi	r3,r2,255
    21e4:	00800074 	movhi	r2,1
    21e8:	10aab604 	addi	r2,r2,-21800
    21ec:	10c5883a 	add	r2,r2,r3
    21f0:	10800003 	ldbu	r2,0(r2)
    21f4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    21f8:	e0bfff03 	ldbu	r2,-4(fp)
    21fc:	100490fa 	slli	r2,r2,3
    2200:	1009883a 	mov	r4,r2
    2204:	e0ffff03 	ldbu	r3,-4(fp)
    2208:	d0a60044 	addi	r2,gp,-26623
    220c:	1885883a 	add	r2,r3,r2
    2210:	10800003 	ldbu	r2,0(r2)
    2214:	10c03fcc 	andi	r3,r2,255
    2218:	00800074 	movhi	r2,1
    221c:	10aab604 	addi	r2,r2,-21800
    2220:	10c5883a 	add	r2,r2,r3
    2224:	10800003 	ldbu	r2,0(r2)
    2228:	2085883a 	add	r2,r4,r2
    222c:	d0a5f605 	stb	r2,-26664(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    2230:	0001883a 	nop
    2234:	e037883a 	mov	sp,fp
    2238:	df000017 	ldw	fp,0(sp)
    223c:	dec00104 	addi	sp,sp,4
    2240:	f800283a 	ret

00002244 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    2244:	defffc04 	addi	sp,sp,-16
    2248:	df000315 	stw	fp,12(sp)
    224c:	df000304 	addi	fp,sp,12
    2250:	e13ffe15 	stw	r4,-8(fp)
    2254:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
    2258:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
    225c:	00000b06 	br	228c <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
    2260:	e0bffe17 	ldw	r2,-8(fp)
    2264:	10c00044 	addi	r3,r2,1
    2268:	e0fffe15 	stw	r3,-8(fp)
    226c:	e0ffff17 	ldw	r3,-4(fp)
    2270:	19000044 	addi	r4,r3,1
    2274:	e13fff15 	stw	r4,-4(fp)
    2278:	18c00003 	ldbu	r3,0(r3)
    227c:	10c00005 	stb	r3,0(r2)
        len++;
    2280:	e0bffd03 	ldbu	r2,-12(fp)
    2284:	10800044 	addi	r2,r2,1
    2288:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    228c:	e0bfff17 	ldw	r2,-4(fp)
    2290:	10800003 	ldbu	r2,0(r2)
    2294:	10803fcc 	andi	r2,r2,255
    2298:	103ff11e 	bne	r2,zero,2260 <__alt_data_end+0xfffe9bc0>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    229c:	e0bffe17 	ldw	r2,-8(fp)
    22a0:	10000005 	stb	zero,0(r2)
    return (len);
    22a4:	e0bffd03 	ldbu	r2,-12(fp)
}
    22a8:	e037883a 	mov	sp,fp
    22ac:	df000017 	ldw	fp,0(sp)
    22b0:	dec00104 	addi	sp,sp,4
    22b4:	f800283a 	ret

000022b8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    22b8:	defffd04 	addi	sp,sp,-12
    22bc:	df000215 	stw	fp,8(sp)
    22c0:	df000204 	addi	fp,sp,8
    22c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
    22c8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
    22cc:	00000606 	br	22e8 <OS_StrLen+0x30>
        psrc++;
    22d0:	e0bfff17 	ldw	r2,-4(fp)
    22d4:	10800044 	addi	r2,r2,1
    22d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
    22dc:	e0bffe03 	ldbu	r2,-8(fp)
    22e0:	10800044 	addi	r2,r2,1
    22e4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    22e8:	e0bfff17 	ldw	r2,-4(fp)
    22ec:	10800003 	ldbu	r2,0(r2)
    22f0:	10803fcc 	andi	r2,r2,255
    22f4:	103ff61e 	bne	r2,zero,22d0 <__alt_data_end+0xfffe9c30>
        psrc++;
        len++;
    }
    return (len);
    22f8:	e0bffe03 	ldbu	r2,-8(fp)
}
    22fc:	e037883a 	mov	sp,fp
    2300:	df000017 	ldw	fp,0(sp)
    2304:	dec00104 	addi	sp,sp,4
    2308:	f800283a 	ret

0000230c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    230c:	defffa04 	addi	sp,sp,-24
    2310:	dfc00515 	stw	ra,20(sp)
    2314:	df000415 	stw	fp,16(sp)
    2318:	df000404 	addi	fp,sp,16
    231c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2320:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2324:	0005303a 	rdctl	r2,status
    2328:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    232c:	e0fffd17 	ldw	r3,-12(fp)
    2330:	00bfff84 	movi	r2,-2
    2334:	1884703a 	and	r2,r3,r2
    2338:	1001703a 	wrctl	status,r2
  
  return context;
    233c:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    2340:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
    2344:	d0a5f517 	ldw	r2,-26668(gp)
    2348:	10800044 	addi	r2,r2,1
    234c:	d0a5f515 	stw	r2,-26668(gp)
    2350:	e0bffc17 	ldw	r2,-16(fp)
    2354:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2358:	e0bffe17 	ldw	r2,-8(fp)
    235c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    2360:	0009ee00 	call	9ee0 <OSTaskIdleHook>
    }
    2364:	003fef06 	br	2324 <__alt_data_end+0xfffe9c84>

00002368 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
    2368:	defffa04 	addi	sp,sp,-24
    236c:	dfc00515 	stw	ra,20(sp)
    2370:	df000415 	stw	fp,16(sp)
    2374:	df000404 	addi	fp,sp,16
    2378:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    237c:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    2380:	00000206 	br	238c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    2384:	01003204 	movi	r4,200
    2388:	0007aa80 	call	7aa8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
    238c:	d0a60603 	ldbu	r2,-26600(gp)
    2390:	10803fcc 	andi	r2,r2,255
    2394:	103ffb26 	beq	r2,zero,2384 <__alt_data_end+0xfffe9ce4>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
    2398:	d0a5fa17 	ldw	r2,-26648(gp)
    239c:	01401904 	movi	r5,100
    23a0:	1009883a 	mov	r4,r2
    23a4:	000a9ac0 	call	a9ac <__udivsi3>
    23a8:	d0a5fa15 	stw	r2,-26648(gp)
    if (OSIdleCtrMax == 0L) {
    23ac:	d0a5fa17 	ldw	r2,-26648(gp)
    23b0:	1000031e 	bne	r2,zero,23c0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
    23b4:	d025fc05 	stb	zero,-26640(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
    23b8:	01003fc4 	movi	r4,255
    23bc:	00077300 	call	7730 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    23c0:	0005303a 	rdctl	r2,status
    23c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    23c8:	e0fffd17 	ldw	r3,-12(fp)
    23cc:	00bfff84 	movi	r2,-2
    23d0:	1884703a 	and	r2,r3,r2
    23d4:	1001703a 	wrctl	status,r2
  
  return context;
    23d8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
    23dc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
    23e0:	d0a5f517 	ldw	r2,-26668(gp)
    23e4:	d0a60715 	stw	r2,-26596(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
    23e8:	d025f515 	stw	zero,-26668(gp)
    23ec:	e0bffc17 	ldw	r2,-16(fp)
    23f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    23f4:	e0bffe17 	ldw	r2,-8(fp)
    23f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
    23fc:	d0a60717 	ldw	r2,-26596(gp)
    2400:	d0e5fa17 	ldw	r3,-26648(gp)
    2404:	180b883a 	mov	r5,r3
    2408:	1009883a 	mov	r4,r2
    240c:	000a9ac0 	call	a9ac <__udivsi3>
    2410:	1007883a 	mov	r3,r2
    2414:	00801904 	movi	r2,100
    2418:	10c5c83a 	sub	r2,r2,r3
    241c:	d0a5fc05 	stb	r2,-26640(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
    2420:	0009e600 	call	9e60 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
    2424:	00024340 	call	2434 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
    2428:	01001904 	movi	r4,100
    242c:	0007aa80 	call	7aa8 <OSTimeDly>
    }
    2430:	003fe306 	br	23c0 <__alt_data_end+0xfffe9d20>

00002434 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
    2434:	defffa04 	addi	sp,sp,-24
    2438:	dfc00515 	stw	ra,20(sp)
    243c:	df000415 	stw	fp,16(sp)
    2440:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    2444:	e03ffc05 	stb	zero,-16(fp)
    2448:	00002406 	br	24dc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
    244c:	e0bffc03 	ldbu	r2,-16(fp)
    2450:	e0fffe04 	addi	r3,fp,-8
    2454:	180b883a 	mov	r5,r3
    2458:	1009883a 	mov	r4,r2
    245c:	00075700 	call	7570 <OSTaskStkChk>
    2460:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
    2464:	e0bffc43 	ldbu	r2,-15(fp)
    2468:	1000191e 	bne	r2,zero,24d0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
    246c:	e0fffc03 	ldbu	r3,-16(fp)
    2470:	00800074 	movhi	r2,1
    2474:	10932604 	addi	r2,r2,19608
    2478:	18c7883a 	add	r3,r3,r3
    247c:	18c7883a 	add	r3,r3,r3
    2480:	10c5883a 	add	r2,r2,r3
    2484:	10800017 	ldw	r2,0(r2)
    2488:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
    248c:	e0bffd17 	ldw	r2,-12(fp)
    2490:	10000f26 	beq	r2,zero,24d0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
    2494:	e0bffd17 	ldw	r2,-12(fp)
    2498:	10800060 	cmpeqi	r2,r2,1
    249c:	10000c1e 	bne	r2,zero,24d0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
    24a0:	e0bffd17 	ldw	r2,-12(fp)
    24a4:	10c00217 	ldw	r3,8(r2)
    24a8:	e0bffd17 	ldw	r2,-12(fp)
    24ac:	10800317 	ldw	r2,12(r2)
    24b0:	1085883a 	add	r2,r2,r2
    24b4:	1085883a 	add	r2,r2,r2
    24b8:	1887883a 	add	r3,r3,r2
    24bc:	e0bffd17 	ldw	r2,-12(fp)
    24c0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
    24c4:	e0ffff17 	ldw	r3,-4(fp)
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
    24d0:	e0bffc03 	ldbu	r2,-16(fp)
    24d4:	10800044 	addi	r2,r2,1
    24d8:	e0bffc05 	stb	r2,-16(fp)
    24dc:	e0bffc03 	ldbu	r2,-16(fp)
    24e0:	10800570 	cmpltui	r2,r2,21
    24e4:	103fd91e 	bne	r2,zero,244c <__alt_data_end+0xfffe9dac>
#endif
                }
            }
        }
    }
}
    24e8:	0001883a 	nop
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    2500:	defff204 	addi	sp,sp,-56
    2504:	dfc00d15 	stw	ra,52(sp)
    2508:	df000c15 	stw	fp,48(sp)
    250c:	df000c04 	addi	fp,sp,48
    2510:	e17ffc15 	stw	r5,-16(fp)
    2514:	e1bffd15 	stw	r6,-12(fp)
    2518:	3807883a 	mov	r3,r7
    251c:	e0800417 	ldw	r2,16(fp)
    2520:	e13ffb05 	stb	r4,-20(fp)
    2524:	e0fffe0d 	sth	r3,-8(fp)
    2528:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    252c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2530:	0005303a 	rdctl	r2,status
    2534:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2538:	e0fffa17 	ldw	r3,-24(fp)
    253c:	00bfff84 	movi	r2,-2
    2540:	1884703a 	and	r2,r3,r2
    2544:	1001703a 	wrctl	status,r2
  
  return context;
    2548:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
    254c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    2550:	d0a5fb17 	ldw	r2,-26644(gp)
    2554:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
    2558:	e0bff617 	ldw	r2,-40(fp)
    255c:	10009326 	beq	r2,zero,27ac <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    2560:	e0bff617 	ldw	r2,-40(fp)
    2564:	10800517 	ldw	r2,20(r2)
    2568:	d0a5fb15 	stw	r2,-26644(gp)
    256c:	e0bff417 	ldw	r2,-48(fp)
    2570:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2574:	e0bff817 	ldw	r2,-32(fp)
    2578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    257c:	e0bff617 	ldw	r2,-40(fp)
    2580:	e0fffc17 	ldw	r3,-16(fp)
    2584:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    2588:	e0bff617 	ldw	r2,-40(fp)
    258c:	e0fffb03 	ldbu	r3,-20(fp)
    2590:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    2594:	e0bff617 	ldw	r2,-40(fp)
    2598:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    259c:	e0bff617 	ldw	r2,-40(fp)
    25a0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    25a4:	e0bff617 	ldw	r2,-40(fp)
    25a8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    25ac:	e0bff617 	ldw	r2,-40(fp)
    25b0:	e0c00317 	ldw	r3,12(fp)
    25b4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    25b8:	e0bff617 	ldw	r2,-40(fp)
    25bc:	e0c00217 	ldw	r3,8(fp)
    25c0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    25c4:	e0bff617 	ldw	r2,-40(fp)
    25c8:	e0fffd17 	ldw	r3,-12(fp)
    25cc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    25d0:	e0bff617 	ldw	r2,-40(fp)
    25d4:	e0ffff0b 	ldhu	r3,-4(fp)
    25d8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    25dc:	e0bff617 	ldw	r2,-40(fp)
    25e0:	e0fffe0b 	ldhu	r3,-8(fp)
    25e4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
    25e8:	e0bff617 	ldw	r2,-40(fp)
    25ec:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    25f0:	e0bffb03 	ldbu	r2,-20(fp)
    25f4:	1004d0fa 	srli	r2,r2,3
    25f8:	1007883a 	mov	r3,r2
    25fc:	e0bff617 	ldw	r2,-40(fp)
    2600:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    2604:	e0bffb03 	ldbu	r2,-20(fp)
    2608:	108001cc 	andi	r2,r2,7
    260c:	1007883a 	mov	r3,r2
    2610:	e0bff617 	ldw	r2,-40(fp)
    2614:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    2618:	e0bff617 	ldw	r2,-40(fp)
    261c:	10800d03 	ldbu	r2,52(r2)
    2620:	10803fcc 	andi	r2,r2,255
    2624:	00c00044 	movi	r3,1
    2628:	1884983a 	sll	r2,r3,r2
    262c:	1007883a 	mov	r3,r2
    2630:	e0bff617 	ldw	r2,-40(fp)
    2634:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    2638:	e0bff617 	ldw	r2,-40(fp)
    263c:	10800cc3 	ldbu	r2,51(r2)
    2640:	10803fcc 	andi	r2,r2,255
    2644:	00c00044 	movi	r3,1
    2648:	1884983a 	sll	r2,r3,r2
    264c:	1007883a 	mov	r3,r2
    2650:	e0bff617 	ldw	r2,-40(fp)
    2654:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    2658:	e0bff617 	ldw	r2,-40(fp)
    265c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
    2660:	e0bff617 	ldw	r2,-40(fp)
    2664:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
    2668:	e0bff617 	ldw	r2,-40(fp)
    266c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
    2670:	e0bff617 	ldw	r2,-40(fp)
    2674:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    2678:	e0bff617 	ldw	r2,-40(fp)
    267c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
    2680:	e0bff617 	ldw	r2,-40(fp)
    2684:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
    2688:	e0bff617 	ldw	r2,-40(fp)
    268c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    2690:	e0bff617 	ldw	r2,-40(fp)
    2694:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
    2698:	e0bff617 	ldw	r2,-40(fp)
    269c:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    26a0:	e0bff617 	ldw	r2,-40(fp)
    26a4:	00c00fc4 	movi	r3,63
    26a8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    26ac:	e0bff617 	ldw	r2,-40(fp)
    26b0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
    26b4:	e13ff617 	ldw	r4,-40(fp)
    26b8:	0009f000 	call	9f00 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    26bc:	e13ff617 	ldw	r4,-40(fp)
    26c0:	0009df80 	call	9df8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    26c4:	0005303a 	rdctl	r2,status
    26c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    26cc:	e0fff517 	ldw	r3,-44(fp)
    26d0:	00bfff84 	movi	r2,-2
    26d4:	1884703a 	and	r2,r3,r2
    26d8:	1001703a 	wrctl	status,r2
  
  return context;
    26dc:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
    26e0:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
    26e4:	e0fffb03 	ldbu	r3,-20(fp)
    26e8:	00800074 	movhi	r2,1
    26ec:	10932604 	addi	r2,r2,19608
    26f0:	18c7883a 	add	r3,r3,r3
    26f4:	18c7883a 	add	r3,r3,r3
    26f8:	10c5883a 	add	r2,r2,r3
    26fc:	e0fff617 	ldw	r3,-40(fp)
    2700:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    2704:	d0e5f717 	ldw	r3,-26660(gp)
    2708:	e0bff617 	ldw	r2,-40(fp)
    270c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    2710:	e0bff617 	ldw	r2,-40(fp)
    2714:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
    2718:	d0a5f717 	ldw	r2,-26660(gp)
    271c:	10000326 	beq	r2,zero,272c <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
    2720:	d0a5f717 	ldw	r2,-26660(gp)
    2724:	e0fff617 	ldw	r3,-40(fp)
    2728:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
    272c:	e0bff617 	ldw	r2,-40(fp)
    2730:	d0a5f715 	stw	r2,-26660(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    2734:	e0bff617 	ldw	r2,-40(fp)
    2738:	10c00d83 	ldbu	r3,54(r2)
    273c:	d0a60003 	ldbu	r2,-26624(gp)
    2740:	1884b03a 	or	r2,r3,r2
    2744:	d0a60005 	stb	r2,-26624(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2748:	e0bff617 	ldw	r2,-40(fp)
    274c:	10800d03 	ldbu	r2,52(r2)
    2750:	10c03fcc 	andi	r3,r2,255
    2754:	e0bff617 	ldw	r2,-40(fp)
    2758:	10800d03 	ldbu	r2,52(r2)
    275c:	11003fcc 	andi	r4,r2,255
    2760:	d0a60044 	addi	r2,gp,-26623
    2764:	2085883a 	add	r2,r4,r2
    2768:	11000003 	ldbu	r4,0(r2)
    276c:	e0bff617 	ldw	r2,-40(fp)
    2770:	10800d43 	ldbu	r2,53(r2)
    2774:	2084b03a 	or	r2,r4,r2
    2778:	1009883a 	mov	r4,r2
    277c:	d0a60044 	addi	r2,gp,-26623
    2780:	1885883a 	add	r2,r3,r2
    2784:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    2788:	d0a5fc43 	ldbu	r2,-26639(gp)
    278c:	10800044 	addi	r2,r2,1
    2790:	d0a5fc45 	stb	r2,-26639(gp)
    2794:	e0bff417 	ldw	r2,-48(fp)
    2798:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    279c:	e0bff717 	ldw	r2,-36(fp)
    27a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    27a4:	0005883a 	mov	r2,zero
    27a8:	00000506 	br	27c0 <OS_TCBInit+0x2c0>
    27ac:	e0bff417 	ldw	r2,-48(fp)
    27b0:	e0bff915 	stw	r2,-28(fp)
    27b4:	e0bff917 	ldw	r2,-28(fp)
    27b8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
    27bc:	00801084 	movi	r2,66
}
    27c0:	e037883a 	mov	sp,fp
    27c4:	dfc00117 	ldw	ra,4(sp)
    27c8:	df000017 	ldw	fp,0(sp)
    27cc:	dec00204 	addi	sp,sp,8
    27d0:	f800283a 	ret

000027d4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    27d4:	defffe04 	addi	sp,sp,-8
    27d8:	df000115 	stw	fp,4(sp)
    27dc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    27e0:	d0a00204 	addi	r2,gp,-32760
    27e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
    27e8:	d0a00304 	addi	r2,gp,-32756
    27ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
    27f0:	d0a00484 	addi	r2,gp,-32750
    27f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
    27f8:	d0a00504 	addi	r2,gp,-32748
    27fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
    2800:	d0a00404 	addi	r2,gp,-32752
    2804:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
    2808:	d0a00584 	addi	r2,gp,-32746
    280c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
    2810:	d0a00604 	addi	r2,gp,-32744
    2814:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
    2818:	d0a00684 	addi	r2,gp,-32742
    281c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
    2820:	d0a00704 	addi	r2,gp,-32740
    2824:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
    2828:	d0a00784 	addi	r2,gp,-32738
    282c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
    2830:	d0a00804 	addi	r2,gp,-32736
    2834:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
    2838:	d0a00884 	addi	r2,gp,-32734
    283c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
    2840:	d0a00904 	addi	r2,gp,-32732
    2844:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
    2848:	d0a00984 	addi	r2,gp,-32730
    284c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
    2850:	d0a00a04 	addi	r2,gp,-32728
    2854:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
    2858:	d0a00a84 	addi	r2,gp,-32726
    285c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
    2860:	d0a00b04 	addi	r2,gp,-32724
    2864:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
    2868:	d0a00b84 	addi	r2,gp,-32722
    286c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
    2870:	d0a00c04 	addi	r2,gp,-32720
    2874:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
    2878:	d0a00c84 	addi	r2,gp,-32718
    287c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
    2880:	d0a00d04 	addi	r2,gp,-32716
    2884:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
    2888:	d0a00d84 	addi	r2,gp,-32714
    288c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
    2890:	d0a00e04 	addi	r2,gp,-32712
    2894:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
    2898:	d0a00e84 	addi	r2,gp,-32710
    289c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
    28a0:	d0a00f04 	addi	r2,gp,-32708
    28a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
    28a8:	d0a00f84 	addi	r2,gp,-32706
    28ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
    28b0:	d0a01004 	addi	r2,gp,-32704
    28b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
    28b8:	d0a01084 	addi	r2,gp,-32702
    28bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
    28c0:	d0a01104 	addi	r2,gp,-32700
    28c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
    28c8:	d0a01184 	addi	r2,gp,-32698
    28cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
    28d0:	d0a01204 	addi	r2,gp,-32696
    28d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
    28d8:	d0a01284 	addi	r2,gp,-32694
    28dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
    28e0:	d0a01304 	addi	r2,gp,-32692
    28e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
    28e8:	d0a01384 	addi	r2,gp,-32690
    28ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
    28f0:	d0a01404 	addi	r2,gp,-32688
    28f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
    28f8:	d0a01484 	addi	r2,gp,-32686
    28fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
    2900:	d0a01504 	addi	r2,gp,-32684
    2904:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
    2908:	d0a01584 	addi	r2,gp,-32682
    290c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
    2910:	d0a01604 	addi	r2,gp,-32680
    2914:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
    2918:	d0a01684 	addi	r2,gp,-32678
    291c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
    2920:	d0a01704 	addi	r2,gp,-32676
    2924:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
    2928:	d0a01784 	addi	r2,gp,-32674
    292c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
    2930:	d0a01804 	addi	r2,gp,-32672
    2934:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
    2938:	d0a01884 	addi	r2,gp,-32670
    293c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
    2940:	d0a01904 	addi	r2,gp,-32668
    2944:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
    2948:	d0a01e04 	addi	r2,gp,-32648
    294c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    2950:	0001883a 	nop
    2954:	e037883a 	mov	sp,fp
    2958:	df000017 	ldw	fp,0(sp)
    295c:	dec00104 	addi	sp,sp,4
    2960:	f800283a 	ret

00002964 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
    2964:	defff204 	addi	sp,sp,-56
    2968:	df000d15 	stw	fp,52(sp)
    296c:	df000d04 	addi	fp,sp,52
    2970:	e13ffc15 	stw	r4,-16(fp)
    2974:	2807883a 	mov	r3,r5
    2978:	3005883a 	mov	r2,r6
    297c:	e1ffff15 	stw	r7,-4(fp)
    2980:	e0fffd0d 	sth	r3,-12(fp)
    2984:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    2988:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    298c:	e0bfff17 	ldw	r2,-4(fp)
    2990:	1000021e 	bne	r2,zero,299c <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
    2994:	0005883a 	mov	r2,zero
    2998:	0000b006 	br	2c5c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    299c:	e0bffc17 	ldw	r2,-16(fp)
    29a0:	1000051e 	bne	r2,zero,29b8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    29a4:	e0bfff17 	ldw	r2,-4(fp)
    29a8:	00c01b84 	movi	r3,110
    29ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    29b0:	0005883a 	mov	r2,zero
    29b4:	0000a906 	br	2c5c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    29b8:	e0bffc17 	ldw	r2,-16(fp)
    29bc:	10800003 	ldbu	r2,0(r2)
    29c0:	10803fcc 	andi	r2,r2,255
    29c4:	10800160 	cmpeqi	r2,r2,5
    29c8:	1000051e 	bne	r2,zero,29e0 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
    29cc:	e0bfff17 	ldw	r2,-4(fp)
    29d0:	00c00044 	movi	r3,1
    29d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    29d8:	0005883a 	mov	r2,zero
    29dc:	00009f06 	br	2c5c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    29e0:	e0fffe03 	ldbu	r3,-8(fp)
    29e4:	00bfe004 	movi	r2,-128
    29e8:	1884703a 	and	r2,r3,r2
    29ec:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
    29f0:	e0bff503 	ldbu	r2,-44(fp)
    29f4:	10000626 	beq	r2,zero,2a10 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
    29f8:	e0bffe03 	ldbu	r2,-8(fp)
    29fc:	10801fcc 	andi	r2,r2,127
    2a00:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    2a04:	00800044 	movi	r2,1
    2a08:	e0bff385 	stb	r2,-50(fp)
    2a0c:	00000106 	br	2a14 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
    2a10:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
    2a14:	e0bfff17 	ldw	r2,-4(fp)
    2a18:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a1c:	0005303a 	rdctl	r2,status
    2a20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a24:	e0fffb17 	ldw	r3,-20(fp)
    2a28:	00bfff84 	movi	r2,-2
    2a2c:	1884703a 	and	r2,r3,r2
    2a30:	1001703a 	wrctl	status,r2
  
  return context;
    2a34:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
    2a38:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
    2a3c:	e0bffe03 	ldbu	r2,-8(fp)
    2a40:	10c00060 	cmpeqi	r3,r2,1
    2a44:	18005f1e 	bne	r3,zero,2bc4 <OSFlagAccept+0x260>
    2a48:	10c00088 	cmpgei	r3,r2,2
    2a4c:	1800021e 	bne	r3,zero,2a58 <OSFlagAccept+0xf4>
    2a50:	10003f26 	beq	r2,zero,2b50 <OSFlagAccept+0x1ec>
    2a54:	00007706 	br	2c34 <OSFlagAccept+0x2d0>
    2a58:	10c000a0 	cmpeqi	r3,r2,2
    2a5c:	1800031e 	bne	r3,zero,2a6c <OSFlagAccept+0x108>
    2a60:	108000e0 	cmpeqi	r2,r2,3
    2a64:	10001e1e 	bne	r2,zero,2ae0 <OSFlagAccept+0x17c>
    2a68:	00007206 	br	2c34 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2a6c:	e0bffc17 	ldw	r2,-16(fp)
    2a70:	10c0020b 	ldhu	r3,8(r2)
    2a74:	e0bffd0b 	ldhu	r2,-12(fp)
    2a78:	1884703a 	and	r2,r3,r2
    2a7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2a80:	e0fff30b 	ldhu	r3,-52(fp)
    2a84:	e0bffd0b 	ldhu	r2,-12(fp)
    2a88:	18800d1e 	bne	r3,r2,2ac0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2a8c:	e0bff383 	ldbu	r2,-50(fp)
    2a90:	10800058 	cmpnei	r2,r2,1
    2a94:	10000d1e 	bne	r2,zero,2acc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    2a98:	e0bffc17 	ldw	r2,-16(fp)
    2a9c:	1080020b 	ldhu	r2,8(r2)
    2aa0:	1007883a 	mov	r3,r2
    2aa4:	e0bff30b 	ldhu	r2,-52(fp)
    2aa8:	0084303a 	nor	r2,zero,r2
    2aac:	1884703a 	and	r2,r3,r2
    2ab0:	1007883a 	mov	r3,r2
    2ab4:	e0bffc17 	ldw	r2,-16(fp)
    2ab8:	10c0020d 	sth	r3,8(r2)
    2abc:	00000306 	br	2acc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2ac0:	e0bfff17 	ldw	r2,-4(fp)
    2ac4:	00c01c04 	movi	r3,112
    2ac8:	10c00005 	stb	r3,0(r2)
    2acc:	e0bff417 	ldw	r2,-48(fp)
    2ad0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ad4:	e0bff617 	ldw	r2,-40(fp)
    2ad8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2adc:	00005e06 	br	2c58 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
    2ae0:	e0bffc17 	ldw	r2,-16(fp)
    2ae4:	10c0020b 	ldhu	r3,8(r2)
    2ae8:	e0bffd0b 	ldhu	r2,-12(fp)
    2aec:	1884703a 	and	r2,r3,r2
    2af0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    2af4:	e0bff30b 	ldhu	r2,-52(fp)
    2af8:	10000d26 	beq	r2,zero,2b30 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2afc:	e0bff383 	ldbu	r2,-50(fp)
    2b00:	10800058 	cmpnei	r2,r2,1
    2b04:	10000d1e 	bne	r2,zero,2b3c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    2b08:	e0bffc17 	ldw	r2,-16(fp)
    2b0c:	1080020b 	ldhu	r2,8(r2)
    2b10:	1007883a 	mov	r3,r2
    2b14:	e0bff30b 	ldhu	r2,-52(fp)
    2b18:	0084303a 	nor	r2,zero,r2
    2b1c:	1884703a 	and	r2,r3,r2
    2b20:	1007883a 	mov	r3,r2
    2b24:	e0bffc17 	ldw	r2,-16(fp)
    2b28:	10c0020d 	sth	r3,8(r2)
    2b2c:	00000306 	br	2b3c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2b30:	e0bfff17 	ldw	r2,-4(fp)
    2b34:	00c01c04 	movi	r3,112
    2b38:	10c00005 	stb	r3,0(r2)
    2b3c:	e0bff417 	ldw	r2,-48(fp)
    2b40:	e0bff715 	stw	r2,-36(fp)
    2b44:	e0bff717 	ldw	r2,-36(fp)
    2b48:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2b4c:	00004206 	br	2c58 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    2b50:	e0bffc17 	ldw	r2,-16(fp)
    2b54:	1080020b 	ldhu	r2,8(r2)
    2b58:	0084303a 	nor	r2,zero,r2
    2b5c:	1007883a 	mov	r3,r2
    2b60:	e0bffd0b 	ldhu	r2,-12(fp)
    2b64:	1884703a 	and	r2,r3,r2
    2b68:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    2b6c:	e0fff30b 	ldhu	r3,-52(fp)
    2b70:	e0bffd0b 	ldhu	r2,-12(fp)
    2b74:	18800b1e 	bne	r3,r2,2ba4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2b78:	e0bff383 	ldbu	r2,-50(fp)
    2b7c:	10800058 	cmpnei	r2,r2,1
    2b80:	10000b1e 	bne	r2,zero,2bb0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    2b84:	e0bffc17 	ldw	r2,-16(fp)
    2b88:	10c0020b 	ldhu	r3,8(r2)
    2b8c:	e0bff30b 	ldhu	r2,-52(fp)
    2b90:	1884b03a 	or	r2,r3,r2
    2b94:	1007883a 	mov	r3,r2
    2b98:	e0bffc17 	ldw	r2,-16(fp)
    2b9c:	10c0020d 	sth	r3,8(r2)
    2ba0:	00000306 	br	2bb0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2ba4:	e0bfff17 	ldw	r2,-4(fp)
    2ba8:	00c01c04 	movi	r3,112
    2bac:	10c00005 	stb	r3,0(r2)
    2bb0:	e0bff417 	ldw	r2,-48(fp)
    2bb4:	e0bff815 	stw	r2,-32(fp)
    2bb8:	e0bff817 	ldw	r2,-32(fp)
    2bbc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2bc0:	00002506 	br	2c58 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    2bc4:	e0bffc17 	ldw	r2,-16(fp)
    2bc8:	1080020b 	ldhu	r2,8(r2)
    2bcc:	0084303a 	nor	r2,zero,r2
    2bd0:	1007883a 	mov	r3,r2
    2bd4:	e0bffd0b 	ldhu	r2,-12(fp)
    2bd8:	1884703a 	and	r2,r3,r2
    2bdc:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    2be0:	e0bff30b 	ldhu	r2,-52(fp)
    2be4:	10000b26 	beq	r2,zero,2c14 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    2be8:	e0bff383 	ldbu	r2,-50(fp)
    2bec:	10800058 	cmpnei	r2,r2,1
    2bf0:	10000b1e 	bne	r2,zero,2c20 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    2bf4:	e0bffc17 	ldw	r2,-16(fp)
    2bf8:	10c0020b 	ldhu	r3,8(r2)
    2bfc:	e0bff30b 	ldhu	r2,-52(fp)
    2c00:	1884b03a 	or	r2,r3,r2
    2c04:	1007883a 	mov	r3,r2
    2c08:	e0bffc17 	ldw	r2,-16(fp)
    2c0c:	10c0020d 	sth	r3,8(r2)
    2c10:	00000306 	br	2c20 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
    2c14:	e0bfff17 	ldw	r2,-4(fp)
    2c18:	00c01c04 	movi	r3,112
    2c1c:	10c00005 	stb	r3,0(r2)
    2c20:	e0bff417 	ldw	r2,-48(fp)
    2c24:	e0bff915 	stw	r2,-28(fp)
    2c28:	e0bff917 	ldw	r2,-28(fp)
    2c2c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
    2c30:	00000906 	br	2c58 <OSFlagAccept+0x2f4>
    2c34:	e0bff417 	ldw	r2,-48(fp)
    2c38:	e0bffa15 	stw	r2,-24(fp)
    2c3c:	e0bffa17 	ldw	r2,-24(fp)
    2c40:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    2c44:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
    2c48:	e0bfff17 	ldw	r2,-4(fp)
    2c4c:	00c01bc4 	movi	r3,111
    2c50:	10c00005 	stb	r3,0(r2)
             break;
    2c54:	0001883a 	nop
    }
    return (flags_rdy);
    2c58:	e0bff30b 	ldhu	r2,-52(fp)
}
    2c5c:	e037883a 	mov	sp,fp
    2c60:	df000017 	ldw	fp,0(sp)
    2c64:	dec00104 	addi	sp,sp,4
    2c68:	f800283a 	ret

00002c6c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
    2c6c:	defff804 	addi	sp,sp,-32
    2c70:	df000715 	stw	fp,28(sp)
    2c74:	df000704 	addi	fp,sp,28
    2c78:	2005883a 	mov	r2,r4
    2c7c:	e17fff15 	stw	r5,-4(fp)
    2c80:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
    2c84:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
    2c88:	e0bfff17 	ldw	r2,-4(fp)
    2c8c:	1000021e 	bne	r2,zero,2c98 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
    2c90:	0005883a 	mov	r2,zero
    2c94:	00003306 	br	2d64 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
    2c98:	d0a60203 	ldbu	r2,-26616(gp)
    2c9c:	10803fcc 	andi	r2,r2,255
    2ca0:	10000526 	beq	r2,zero,2cb8 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
    2ca4:	e0bfff17 	ldw	r2,-4(fp)
    2ca8:	00c00404 	movi	r3,16
    2cac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
    2cb0:	0005883a 	mov	r2,zero
    2cb4:	00002b06 	br	2d64 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2cb8:	0005303a 	rdctl	r2,status
    2cbc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2cc0:	e0fffd17 	ldw	r3,-12(fp)
    2cc4:	00bfff84 	movi	r2,-2
    2cc8:	1884703a 	and	r2,r3,r2
    2ccc:	1001703a 	wrctl	status,r2
  
  return context;
    2cd0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    2cd4:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
    2cd8:	d0a60517 	ldw	r2,-26604(gp)
    2cdc:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
    2ce0:	e0bffb17 	ldw	r2,-20(fp)
    2ce4:	10001726 	beq	r2,zero,2d44 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
    2ce8:	d0a60517 	ldw	r2,-26604(gp)
    2cec:	10800117 	ldw	r2,4(r2)
    2cf0:	d0a60515 	stw	r2,-26604(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
    2cf4:	e0bffb17 	ldw	r2,-20(fp)
    2cf8:	00c00144 	movi	r3,5
    2cfc:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
    2d00:	e0bffb17 	ldw	r2,-20(fp)
    2d04:	e0fffe0b 	ldhu	r3,-8(fp)
    2d08:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
    2d0c:	e0bffb17 	ldw	r2,-20(fp)
    2d10:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
    2d14:	e0bffb17 	ldw	r2,-20(fp)
    2d18:	00c00fc4 	movi	r3,63
    2d1c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    2d20:	e0bffb17 	ldw	r2,-20(fp)
    2d24:	100002c5 	stb	zero,11(r2)
    2d28:	e0bff917 	ldw	r2,-28(fp)
    2d2c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d30:	e0bffa17 	ldw	r2,-24(fp)
    2d34:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
    2d38:	e0bfff17 	ldw	r2,-4(fp)
    2d3c:	10000005 	stb	zero,0(r2)
    2d40:	00000706 	br	2d60 <OSFlagCreate+0xf4>
    2d44:	e0bff917 	ldw	r2,-28(fp)
    2d48:	e0bffc15 	stw	r2,-16(fp)
    2d4c:	e0bffc17 	ldw	r2,-16(fp)
    2d50:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
    2d54:	e0bfff17 	ldw	r2,-4(fp)
    2d58:	00c01c84 	movi	r3,114
    2d5c:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
    2d60:	e0bffb17 	ldw	r2,-20(fp)
}
    2d64:	e037883a 	mov	sp,fp
    2d68:	df000017 	ldw	fp,0(sp)
    2d6c:	dec00104 	addi	sp,sp,4
    2d70:	f800283a 	ret

00002d74 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
    2d74:	defff204 	addi	sp,sp,-56
    2d78:	dfc00d15 	stw	ra,52(sp)
    2d7c:	df000c15 	stw	fp,48(sp)
    2d80:	df000c04 	addi	fp,sp,48
    2d84:	e13ffd15 	stw	r4,-12(fp)
    2d88:	2805883a 	mov	r2,r5
    2d8c:	e1bfff15 	stw	r6,-4(fp)
    2d90:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    2d94:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    2d98:	e0bfff17 	ldw	r2,-4(fp)
    2d9c:	1000021e 	bne	r2,zero,2da8 <OSFlagDel+0x34>
        return (pgrp);
    2da0:	e0bffd17 	ldw	r2,-12(fp)
    2da4:	00008006 	br	2fa8 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    2da8:	e0bffd17 	ldw	r2,-12(fp)
    2dac:	1000051e 	bne	r2,zero,2dc4 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    2db0:	e0bfff17 	ldw	r2,-4(fp)
    2db4:	00c01b84 	movi	r3,110
    2db8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    2dbc:	e0bffd17 	ldw	r2,-12(fp)
    2dc0:	00007906 	br	2fa8 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    2dc4:	d0a60203 	ldbu	r2,-26616(gp)
    2dc8:	10803fcc 	andi	r2,r2,255
    2dcc:	10000526 	beq	r2,zero,2de4 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    2dd0:	e0bfff17 	ldw	r2,-4(fp)
    2dd4:	00c003c4 	movi	r3,15
    2dd8:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    2ddc:	e0bffd17 	ldw	r2,-12(fp)
    2de0:	00007106 	br	2fa8 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
    2de4:	e0bffd17 	ldw	r2,-12(fp)
    2de8:	10800003 	ldbu	r2,0(r2)
    2dec:	10803fcc 	andi	r2,r2,255
    2df0:	10800160 	cmpeqi	r2,r2,5
    2df4:	1000051e 	bne	r2,zero,2e0c <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
    2df8:	e0bfff17 	ldw	r2,-4(fp)
    2dfc:	00c00044 	movi	r3,1
    2e00:	10c00005 	stb	r3,0(r2)
        return (pgrp);
    2e04:	e0bffd17 	ldw	r2,-12(fp)
    2e08:	00006706 	br	2fa8 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2e0c:	0005303a 	rdctl	r2,status
    2e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2e14:	e0fffc17 	ldw	r3,-16(fp)
    2e18:	00bfff84 	movi	r2,-2
    2e1c:	1884703a 	and	r2,r3,r2
    2e20:	1001703a 	wrctl	status,r2
  
  return context;
    2e24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    2e28:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
    2e2c:	e0bffd17 	ldw	r2,-12(fp)
    2e30:	10800117 	ldw	r2,4(r2)
    2e34:	10000326 	beq	r2,zero,2e44 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    2e38:	00800044 	movi	r2,1
    2e3c:	e0bff405 	stb	r2,-48(fp)
    2e40:	00000106 	br	2e48 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    2e44:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    2e48:	e0bffe03 	ldbu	r2,-8(fp)
    2e4c:	10000326 	beq	r2,zero,2e5c <OSFlagDel+0xe8>
    2e50:	10800060 	cmpeqi	r2,r2,1
    2e54:	1000231e 	bne	r2,zero,2ee4 <OSFlagDel+0x170>
    2e58:	00004806 	br	2f7c <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
    2e5c:	e0bff403 	ldbu	r2,-48(fp)
    2e60:	1000161e 	bne	r2,zero,2ebc <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
    2e64:	e0bffd17 	ldw	r2,-12(fp)
    2e68:	00c00fc4 	movi	r3,63
    2e6c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    2e70:	e0bffd17 	ldw	r2,-12(fp)
    2e74:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    2e78:	e0bffd17 	ldw	r2,-12(fp)
    2e7c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
    2e80:	d0e60517 	ldw	r3,-26604(gp)
    2e84:	e0bffd17 	ldw	r2,-12(fp)
    2e88:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
    2e8c:	e0bffd17 	ldw	r2,-12(fp)
    2e90:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
    2e94:	e0bffd17 	ldw	r2,-12(fp)
    2e98:	d0a60515 	stw	r2,-26604(gp)
    2e9c:	e0bff717 	ldw	r2,-36(fp)
    2ea0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2ea4:	e0bff817 	ldw	r2,-32(fp)
    2ea8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
    2eac:	e0bfff17 	ldw	r2,-4(fp)
    2eb0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
    2eb4:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
    2eb8:	00003a06 	br	2fa4 <OSFlagDel+0x230>
    2ebc:	e0bff717 	ldw	r2,-36(fp)
    2ec0:	e0bff915 	stw	r2,-28(fp)
    2ec4:	e0bff917 	ldw	r2,-28(fp)
    2ec8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
    2ecc:	e0bfff17 	ldw	r2,-4(fp)
    2ed0:	00c01244 	movi	r3,73
    2ed4:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
    2ed8:	e0bffd17 	ldw	r2,-12(fp)
    2edc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    2ee0:	00003006 	br	2fa4 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    2ee4:	e0bffd17 	ldw	r2,-12(fp)
    2ee8:	10800117 	ldw	r2,4(r2)
    2eec:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    2ef0:	00000606 	br	2f0c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
    2ef4:	000b883a 	mov	r5,zero
    2ef8:	e13ff517 	ldw	r4,-44(fp)
    2efc:	0003ee00 	call	3ee0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    2f00:	e0bff517 	ldw	r2,-44(fp)
    2f04:	10800017 	ldw	r2,0(r2)
    2f08:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
    2f0c:	e0bff517 	ldw	r2,-44(fp)
    2f10:	103ff81e 	bne	r2,zero,2ef4 <__alt_data_end+0xfffea854>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
    2f14:	e0bffd17 	ldw	r2,-12(fp)
    2f18:	00c00fc4 	movi	r3,63
    2f1c:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
    2f20:	e0bffd17 	ldw	r2,-12(fp)
    2f24:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    2f28:	e0bffd17 	ldw	r2,-12(fp)
    2f2c:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
    2f30:	d0e60517 	ldw	r3,-26604(gp)
    2f34:	e0bffd17 	ldw	r2,-12(fp)
    2f38:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
    2f3c:	e0bffd17 	ldw	r2,-12(fp)
    2f40:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
    2f44:	e0bffd17 	ldw	r2,-12(fp)
    2f48:	d0a60515 	stw	r2,-26604(gp)
    2f4c:	e0bff717 	ldw	r2,-36(fp)
    2f50:	e0bffa15 	stw	r2,-24(fp)
    2f54:	e0bffa17 	ldw	r2,-24(fp)
    2f58:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    2f5c:	e0bff403 	ldbu	r2,-48(fp)
    2f60:	10800058 	cmpnei	r2,r2,1
    2f64:	1000011e 	bne	r2,zero,2f6c <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    2f68:	00021000 	call	2100 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
    2f6c:	e0bfff17 	ldw	r2,-4(fp)
    2f70:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
    2f74:	e03ff615 	stw	zero,-40(fp)
             break;
    2f78:	00000a06 	br	2fa4 <OSFlagDel+0x230>
    2f7c:	e0bff717 	ldw	r2,-36(fp)
    2f80:	e0bffb15 	stw	r2,-20(fp)
    2f84:	e0bffb17 	ldw	r2,-20(fp)
    2f88:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
    2f8c:	e0bfff17 	ldw	r2,-4(fp)
    2f90:	00c001c4 	movi	r3,7
    2f94:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
    2f98:	e0bffd17 	ldw	r2,-12(fp)
    2f9c:	e0bff615 	stw	r2,-40(fp)
             break;
    2fa0:	0001883a 	nop
    }
    return (pgrp_return);
    2fa4:	e0bff617 	ldw	r2,-40(fp)
}
    2fa8:	e037883a 	mov	sp,fp
    2fac:	dfc00117 	ldw	ra,4(sp)
    2fb0:	df000017 	ldw	fp,0(sp)
    2fb4:	dec00204 	addi	sp,sp,8
    2fb8:	f800283a 	ret

00002fbc <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    2fbc:	defff604 	addi	sp,sp,-40
    2fc0:	dfc00915 	stw	ra,36(sp)
    2fc4:	df000815 	stw	fp,32(sp)
    2fc8:	df000804 	addi	fp,sp,32
    2fcc:	e13ffd15 	stw	r4,-12(fp)
    2fd0:	e17ffe15 	stw	r5,-8(fp)
    2fd4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2fd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    2fdc:	e0bfff17 	ldw	r2,-4(fp)
    2fe0:	1000021e 	bne	r2,zero,2fec <OSFlagNameGet+0x30>
        return (0);
    2fe4:	0005883a 	mov	r2,zero
    2fe8:	00003906 	br	30d0 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    2fec:	e0bffd17 	ldw	r2,-12(fp)
    2ff0:	1000051e 	bne	r2,zero,3008 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    2ff4:	e0bfff17 	ldw	r2,-4(fp)
    2ff8:	00c01b84 	movi	r3,110
    2ffc:	10c00005 	stb	r3,0(r2)
        return (0);
    3000:	0005883a 	mov	r2,zero
    3004:	00003206 	br	30d0 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3008:	e0bffe17 	ldw	r2,-8(fp)
    300c:	1000051e 	bne	r2,zero,3024 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    3010:	e0bfff17 	ldw	r2,-4(fp)
    3014:	00c00304 	movi	r3,12
    3018:	10c00005 	stb	r3,0(r2)
        return (0);
    301c:	0005883a 	mov	r2,zero
    3020:	00002b06 	br	30d0 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3024:	d0a60203 	ldbu	r2,-26616(gp)
    3028:	10803fcc 	andi	r2,r2,255
    302c:	10000526 	beq	r2,zero,3044 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    3030:	e0bfff17 	ldw	r2,-4(fp)
    3034:	00c00444 	movi	r3,17
    3038:	10c00005 	stb	r3,0(r2)
        return (0);
    303c:	0005883a 	mov	r2,zero
    3040:	00002306 	br	30d0 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3044:	0005303a 	rdctl	r2,status
    3048:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    304c:	e0fffc17 	ldw	r3,-16(fp)
    3050:	00bfff84 	movi	r2,-2
    3054:	1884703a 	and	r2,r3,r2
    3058:	1001703a 	wrctl	status,r2
  
  return context;
    305c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    3060:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3064:	e0bffd17 	ldw	r2,-12(fp)
    3068:	10800003 	ldbu	r2,0(r2)
    306c:	10803fcc 	andi	r2,r2,255
    3070:	10800160 	cmpeqi	r2,r2,5
    3074:	1000091e 	bne	r2,zero,309c <OSFlagNameGet+0xe0>
    3078:	e0bff817 	ldw	r2,-32(fp)
    307c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3080:	e0bff917 	ldw	r2,-28(fp)
    3084:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    3088:	e0bfff17 	ldw	r2,-4(fp)
    308c:	00c00044 	movi	r3,1
    3090:	10c00005 	stb	r3,0(r2)
        return (0);
    3094:	0005883a 	mov	r2,zero
    3098:	00000d06 	br	30d0 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
    309c:	e0bffd17 	ldw	r2,-12(fp)
    30a0:	10800284 	addi	r2,r2,10
    30a4:	100b883a 	mov	r5,r2
    30a8:	e13ffe17 	ldw	r4,-8(fp)
    30ac:	00022440 	call	2244 <OS_StrCopy>
    30b0:	e0bffb05 	stb	r2,-20(fp)
    30b4:	e0bff817 	ldw	r2,-32(fp)
    30b8:	e0bffa15 	stw	r2,-24(fp)
    30bc:	e0bffa17 	ldw	r2,-24(fp)
    30c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    30c4:	e0bfff17 	ldw	r2,-4(fp)
    30c8:	10000005 	stb	zero,0(r2)
    return (len);
    30cc:	e0bffb03 	ldbu	r2,-20(fp)
}
    30d0:	e037883a 	mov	sp,fp
    30d4:	dfc00117 	ldw	ra,4(sp)
    30d8:	df000017 	ldw	fp,0(sp)
    30dc:	dec00204 	addi	sp,sp,8
    30e0:	f800283a 	ret

000030e4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
    30e4:	defff504 	addi	sp,sp,-44
    30e8:	dfc00a15 	stw	ra,40(sp)
    30ec:	df000915 	stw	fp,36(sp)
    30f0:	df000904 	addi	fp,sp,36
    30f4:	e13ffd15 	stw	r4,-12(fp)
    30f8:	e17ffe15 	stw	r5,-8(fp)
    30fc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3100:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    3104:	e0bfff17 	ldw	r2,-4(fp)
    3108:	10004326 	beq	r2,zero,3218 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
    310c:	e0bffd17 	ldw	r2,-12(fp)
    3110:	1000041e 	bne	r2,zero,3124 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3114:	e0bfff17 	ldw	r2,-4(fp)
    3118:	00c01b84 	movi	r3,110
    311c:	10c00005 	stb	r3,0(r2)
        return;
    3120:	00003e06 	br	321c <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    3124:	e0bffe17 	ldw	r2,-8(fp)
    3128:	1000041e 	bne	r2,zero,313c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    312c:	e0bfff17 	ldw	r2,-4(fp)
    3130:	00c00304 	movi	r3,12
    3134:	10c00005 	stb	r3,0(r2)
        return;
    3138:	00003806 	br	321c <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    313c:	d0a60203 	ldbu	r2,-26616(gp)
    3140:	10803fcc 	andi	r2,r2,255
    3144:	10000426 	beq	r2,zero,3158 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    3148:	e0bfff17 	ldw	r2,-4(fp)
    314c:	00c00484 	movi	r3,18
    3150:	10c00005 	stb	r3,0(r2)
        return;
    3154:	00003106 	br	321c <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3158:	0005303a 	rdctl	r2,status
    315c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3160:	e0fffc17 	ldw	r3,-16(fp)
    3164:	00bfff84 	movi	r2,-2
    3168:	1884703a 	and	r2,r3,r2
    316c:	1001703a 	wrctl	status,r2
  
  return context;
    3170:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    3174:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
    3178:	e0bffd17 	ldw	r2,-12(fp)
    317c:	10800003 	ldbu	r2,0(r2)
    3180:	10803fcc 	andi	r2,r2,255
    3184:	10800160 	cmpeqi	r2,r2,5
    3188:	1000081e 	bne	r2,zero,31ac <OSFlagNameSet+0xc8>
    318c:	e0bff717 	ldw	r2,-36(fp)
    3190:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3194:	e0bff817 	ldw	r2,-32(fp)
    3198:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
    319c:	e0bfff17 	ldw	r2,-4(fp)
    31a0:	00c00044 	movi	r3,1
    31a4:	10c00005 	stb	r3,0(r2)
        return;
    31a8:	00001c06 	br	321c <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    31ac:	e13ffe17 	ldw	r4,-8(fp)
    31b0:	00022b80 	call	22b8 <OS_StrLen>
    31b4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
    31b8:	e0bffa03 	ldbu	r2,-24(fp)
    31bc:	10800830 	cmpltui	r2,r2,32
    31c0:	1000081e 	bne	r2,zero,31e4 <OSFlagNameSet+0x100>
    31c4:	e0bff717 	ldw	r2,-36(fp)
    31c8:	e0bff915 	stw	r2,-28(fp)
    31cc:	e0bff917 	ldw	r2,-28(fp)
    31d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
    31d4:	e0bfff17 	ldw	r2,-4(fp)
    31d8:	00c01cc4 	movi	r3,115
    31dc:	10c00005 	stb	r3,0(r2)
        return;
    31e0:	00000e06 	br	321c <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    31e4:	e0bffd17 	ldw	r2,-12(fp)
    31e8:	10800284 	addi	r2,r2,10
    31ec:	e17ffe17 	ldw	r5,-8(fp)
    31f0:	1009883a 	mov	r4,r2
    31f4:	00022440 	call	2244 <OS_StrCopy>
    31f8:	e0bff717 	ldw	r2,-36(fp)
    31fc:	e0bffb15 	stw	r2,-20(fp)
    3200:	e0bffb17 	ldw	r2,-20(fp)
    3204:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3208:	e0bfff17 	ldw	r2,-4(fp)
    320c:	10000005 	stb	zero,0(r2)
    return;
    3210:	0001883a 	nop
    3214:	00000106 	br	321c <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    3218:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
    321c:	e037883a 	mov	sp,fp
    3220:	dfc00117 	ldw	ra,4(sp)
    3224:	df000017 	ldw	fp,0(sp)
    3228:	dec00204 	addi	sp,sp,8
    322c:	f800283a 	ret

00003230 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
    3230:	deffe104 	addi	sp,sp,-124
    3234:	dfc01e15 	stw	ra,120(sp)
    3238:	df001d15 	stw	fp,116(sp)
    323c:	df001d04 	addi	fp,sp,116
    3240:	e13ffc15 	stw	r4,-16(fp)
    3244:	2809883a 	mov	r4,r5
    3248:	3007883a 	mov	r3,r6
    324c:	3805883a 	mov	r2,r7
    3250:	e13ffd0d 	sth	r4,-12(fp)
    3254:	e0fffe05 	stb	r3,-8(fp)
    3258:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    325c:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    3260:	e0800217 	ldw	r2,8(fp)
    3264:	1000021e 	bne	r2,zero,3270 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
    3268:	0005883a 	mov	r2,zero
    326c:	00015906 	br	37d4 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
    3270:	e0bffc17 	ldw	r2,-16(fp)
    3274:	1000051e 	bne	r2,zero,328c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3278:	e0800217 	ldw	r2,8(fp)
    327c:	00c01b84 	movi	r3,110
    3280:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3284:	0005883a 	mov	r2,zero
    3288:	00015206 	br	37d4 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    328c:	d0a60203 	ldbu	r2,-26616(gp)
    3290:	10803fcc 	andi	r2,r2,255
    3294:	10000526 	beq	r2,zero,32ac <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
    3298:	e0800217 	ldw	r2,8(fp)
    329c:	00c00084 	movi	r3,2
    32a0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    32a4:	0005883a 	mov	r2,zero
    32a8:	00014a06 	br	37d4 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
    32ac:	d0a5f403 	ldbu	r2,-26672(gp)
    32b0:	10803fcc 	andi	r2,r2,255
    32b4:	10000526 	beq	r2,zero,32cc <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
    32b8:	e0800217 	ldw	r2,8(fp)
    32bc:	00c00344 	movi	r3,13
    32c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    32c4:	0005883a 	mov	r2,zero
    32c8:	00014206 	br	37d4 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
    32cc:	e0bffc17 	ldw	r2,-16(fp)
    32d0:	10800003 	ldbu	r2,0(r2)
    32d4:	10803fcc 	andi	r2,r2,255
    32d8:	10800160 	cmpeqi	r2,r2,5
    32dc:	1000051e 	bne	r2,zero,32f4 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
    32e0:	e0800217 	ldw	r2,8(fp)
    32e4:	00c00044 	movi	r3,1
    32e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    32ec:	0005883a 	mov	r2,zero
    32f0:	00013806 	br	37d4 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
    32f4:	e0fffe03 	ldbu	r3,-8(fp)
    32f8:	00bfe004 	movi	r2,-128
    32fc:	1884703a 	and	r2,r3,r2
    3300:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
    3304:	e0bfe603 	ldbu	r2,-104(fp)
    3308:	10000626 	beq	r2,zero,3324 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
    330c:	e0bffe03 	ldbu	r2,-8(fp)
    3310:	10801fcc 	andi	r2,r2,127
    3314:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
    3318:	00800044 	movi	r2,1
    331c:	e0bfe405 	stb	r2,-112(fp)
    3320:	00000106 	br	3328 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
    3324:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3328:	0005303a 	rdctl	r2,status
    332c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3330:	e0fff617 	ldw	r3,-40(fp)
    3334:	00bfff84 	movi	r2,-2
    3338:	1884703a 	and	r2,r3,r2
    333c:	1001703a 	wrctl	status,r2
  
  return context;
    3340:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    3344:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
    3348:	e0bffe03 	ldbu	r2,-8(fp)
    334c:	10c00060 	cmpeqi	r3,r2,1
    3350:	1800921e 	bne	r3,zero,359c <OSFlagPend+0x36c>
    3354:	10c00088 	cmpgei	r3,r2,2
    3358:	1800021e 	bne	r3,zero,3364 <OSFlagPend+0x134>
    335c:	10006126 	beq	r2,zero,34e4 <OSFlagPend+0x2b4>
    3360:	0000bb06 	br	3650 <OSFlagPend+0x420>
    3364:	10c000a0 	cmpeqi	r3,r2,2
    3368:	1800031e 	bne	r3,zero,3378 <OSFlagPend+0x148>
    336c:	108000e0 	cmpeqi	r2,r2,3
    3370:	10002f1e 	bne	r2,zero,3430 <OSFlagPend+0x200>
    3374:	0000b606 	br	3650 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
    3378:	e0bffc17 	ldw	r2,-16(fp)
    337c:	10c0020b 	ldhu	r3,8(r2)
    3380:	e0bffd0b 	ldhu	r2,-12(fp)
    3384:	1884703a 	and	r2,r3,r2
    3388:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    338c:	e0ffe80b 	ldhu	r3,-96(fp)
    3390:	e0bffd0b 	ldhu	r2,-12(fp)
    3394:	1880171e 	bne	r3,r2,33f4 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    3398:	e0bfe403 	ldbu	r2,-112(fp)
    339c:	10800058 	cmpnei	r2,r2,1
    33a0:	1000091e 	bne	r2,zero,33c8 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
    33a4:	e0bffc17 	ldw	r2,-16(fp)
    33a8:	1080020b 	ldhu	r2,8(r2)
    33ac:	1007883a 	mov	r3,r2
    33b0:	e0bfe80b 	ldhu	r2,-96(fp)
    33b4:	0084303a 	nor	r2,zero,r2
    33b8:	1884703a 	and	r2,r3,r2
    33bc:	1007883a 	mov	r3,r2
    33c0:	e0bffc17 	ldw	r2,-16(fp)
    33c4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    33c8:	d0a60317 	ldw	r2,-26612(gp)
    33cc:	e0ffe80b 	ldhu	r3,-96(fp)
    33d0:	10c00b0d 	sth	r3,44(r2)
    33d4:	e0bfe517 	ldw	r2,-108(fp)
    33d8:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    33dc:	e0bfe717 	ldw	r2,-100(fp)
    33e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    33e4:	e0800217 	ldw	r2,8(fp)
    33e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    33ec:	e0bfe80b 	ldhu	r2,-96(fp)
    33f0:	0000f806 	br	37d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    33f4:	e13ffd0b 	ldhu	r4,-12(fp)
    33f8:	e17ffe03 	ldbu	r5,-8(fp)
    33fc:	e0bfff0b 	ldhu	r2,-4(fp)
    3400:	e0fff704 	addi	r3,fp,-36
    3404:	d8800015 	stw	r2,0(sp)
    3408:	280f883a 	mov	r7,r5
    340c:	200d883a 	mov	r6,r4
    3410:	180b883a 	mov	r5,r3
    3414:	e13ffc17 	ldw	r4,-16(fp)
    3418:	0003ca00 	call	3ca0 <OS_FlagBlock>
    341c:	e0bfe517 	ldw	r2,-108(fp)
    3420:	e0bfe915 	stw	r2,-92(fp)
    3424:	e0bfe917 	ldw	r2,-92(fp)
    3428:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    342c:	00009206 	br	3678 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
    3430:	e0bffc17 	ldw	r2,-16(fp)
    3434:	10c0020b 	ldhu	r3,8(r2)
    3438:	e0bffd0b 	ldhu	r2,-12(fp)
    343c:	1884703a 	and	r2,r3,r2
    3440:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
    3444:	e0bfe80b 	ldhu	r2,-96(fp)
    3448:	10001726 	beq	r2,zero,34a8 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    344c:	e0bfe403 	ldbu	r2,-112(fp)
    3450:	10800058 	cmpnei	r2,r2,1
    3454:	1000091e 	bne	r2,zero,347c <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
    3458:	e0bffc17 	ldw	r2,-16(fp)
    345c:	1080020b 	ldhu	r2,8(r2)
    3460:	1007883a 	mov	r3,r2
    3464:	e0bfe80b 	ldhu	r2,-96(fp)
    3468:	0084303a 	nor	r2,zero,r2
    346c:	1884703a 	and	r2,r3,r2
    3470:	1007883a 	mov	r3,r2
    3474:	e0bffc17 	ldw	r2,-16(fp)
    3478:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    347c:	d0a60317 	ldw	r2,-26612(gp)
    3480:	e0ffe80b 	ldhu	r3,-96(fp)
    3484:	10c00b0d 	sth	r3,44(r2)
    3488:	e0bfe517 	ldw	r2,-108(fp)
    348c:	e0bfea15 	stw	r2,-88(fp)
    3490:	e0bfea17 	ldw	r2,-88(fp)
    3494:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3498:	e0800217 	ldw	r2,8(fp)
    349c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    34a0:	e0bfe80b 	ldhu	r2,-96(fp)
    34a4:	0000cb06 	br	37d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    34a8:	e13ffd0b 	ldhu	r4,-12(fp)
    34ac:	e17ffe03 	ldbu	r5,-8(fp)
    34b0:	e0bfff0b 	ldhu	r2,-4(fp)
    34b4:	e0fff704 	addi	r3,fp,-36
    34b8:	d8800015 	stw	r2,0(sp)
    34bc:	280f883a 	mov	r7,r5
    34c0:	200d883a 	mov	r6,r4
    34c4:	180b883a 	mov	r5,r3
    34c8:	e13ffc17 	ldw	r4,-16(fp)
    34cc:	0003ca00 	call	3ca0 <OS_FlagBlock>
    34d0:	e0bfe517 	ldw	r2,-108(fp)
    34d4:	e0bfeb15 	stw	r2,-84(fp)
    34d8:	e0bfeb17 	ldw	r2,-84(fp)
    34dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    34e0:	00006506 	br	3678 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
    34e4:	e0bffc17 	ldw	r2,-16(fp)
    34e8:	1080020b 	ldhu	r2,8(r2)
    34ec:	0084303a 	nor	r2,zero,r2
    34f0:	1007883a 	mov	r3,r2
    34f4:	e0bffd0b 	ldhu	r2,-12(fp)
    34f8:	1884703a 	and	r2,r3,r2
    34fc:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
    3500:	e0ffe80b 	ldhu	r3,-96(fp)
    3504:	e0bffd0b 	ldhu	r2,-12(fp)
    3508:	1880151e 	bne	r3,r2,3560 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    350c:	e0bfe403 	ldbu	r2,-112(fp)
    3510:	10800058 	cmpnei	r2,r2,1
    3514:	1000071e 	bne	r2,zero,3534 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
    3518:	e0bffc17 	ldw	r2,-16(fp)
    351c:	10c0020b 	ldhu	r3,8(r2)
    3520:	e0bfe80b 	ldhu	r2,-96(fp)
    3524:	1884b03a 	or	r2,r3,r2
    3528:	1007883a 	mov	r3,r2
    352c:	e0bffc17 	ldw	r2,-16(fp)
    3530:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    3534:	d0a60317 	ldw	r2,-26612(gp)
    3538:	e0ffe80b 	ldhu	r3,-96(fp)
    353c:	10c00b0d 	sth	r3,44(r2)
    3540:	e0bfe517 	ldw	r2,-108(fp)
    3544:	e0bfec15 	stw	r2,-80(fp)
    3548:	e0bfec17 	ldw	r2,-80(fp)
    354c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3550:	e0800217 	ldw	r2,8(fp)
    3554:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    3558:	e0bfe80b 	ldhu	r2,-96(fp)
    355c:	00009d06 	br	37d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3560:	e13ffd0b 	ldhu	r4,-12(fp)
    3564:	e17ffe03 	ldbu	r5,-8(fp)
    3568:	e0bfff0b 	ldhu	r2,-4(fp)
    356c:	e0fff704 	addi	r3,fp,-36
    3570:	d8800015 	stw	r2,0(sp)
    3574:	280f883a 	mov	r7,r5
    3578:	200d883a 	mov	r6,r4
    357c:	180b883a 	mov	r5,r3
    3580:	e13ffc17 	ldw	r4,-16(fp)
    3584:	0003ca00 	call	3ca0 <OS_FlagBlock>
    3588:	e0bfe517 	ldw	r2,-108(fp)
    358c:	e0bfed15 	stw	r2,-76(fp)
    3590:	e0bfed17 	ldw	r2,-76(fp)
    3594:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    3598:	00003706 	br	3678 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
    359c:	e0bffc17 	ldw	r2,-16(fp)
    35a0:	1080020b 	ldhu	r2,8(r2)
    35a4:	0084303a 	nor	r2,zero,r2
    35a8:	1007883a 	mov	r3,r2
    35ac:	e0bffd0b 	ldhu	r2,-12(fp)
    35b0:	1884703a 	and	r2,r3,r2
    35b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
    35b8:	e0bfe80b 	ldhu	r2,-96(fp)
    35bc:	10001526 	beq	r2,zero,3614 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
    35c0:	e0bfe403 	ldbu	r2,-112(fp)
    35c4:	10800058 	cmpnei	r2,r2,1
    35c8:	1000071e 	bne	r2,zero,35e8 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
    35cc:	e0bffc17 	ldw	r2,-16(fp)
    35d0:	10c0020b 	ldhu	r3,8(r2)
    35d4:	e0bfe80b 	ldhu	r2,-96(fp)
    35d8:	1884b03a 	or	r2,r3,r2
    35dc:	1007883a 	mov	r3,r2
    35e0:	e0bffc17 	ldw	r2,-16(fp)
    35e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
    35e8:	d0a60317 	ldw	r2,-26612(gp)
    35ec:	e0ffe80b 	ldhu	r3,-96(fp)
    35f0:	10c00b0d 	sth	r3,44(r2)
    35f4:	e0bfe517 	ldw	r2,-108(fp)
    35f8:	e0bfee15 	stw	r2,-72(fp)
    35fc:	e0bfee17 	ldw	r2,-72(fp)
    3600:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
    3604:	e0800217 	ldw	r2,8(fp)
    3608:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
    360c:	e0bfe80b 	ldhu	r2,-96(fp)
    3610:	00007006 	br	37d4 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
    3614:	e13ffd0b 	ldhu	r4,-12(fp)
    3618:	e17ffe03 	ldbu	r5,-8(fp)
    361c:	e0bfff0b 	ldhu	r2,-4(fp)
    3620:	e0fff704 	addi	r3,fp,-36
    3624:	d8800015 	stw	r2,0(sp)
    3628:	280f883a 	mov	r7,r5
    362c:	200d883a 	mov	r6,r4
    3630:	180b883a 	mov	r5,r3
    3634:	e13ffc17 	ldw	r4,-16(fp)
    3638:	0003ca00 	call	3ca0 <OS_FlagBlock>
    363c:	e0bfe517 	ldw	r2,-108(fp)
    3640:	e0bfef15 	stw	r2,-68(fp)
    3644:	e0bfef17 	ldw	r2,-68(fp)
    3648:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
    364c:	00000a06 	br	3678 <OSFlagPend+0x448>
    3650:	e0bfe517 	ldw	r2,-108(fp)
    3654:	e0bff015 	stw	r2,-64(fp)
    3658:	e0bff017 	ldw	r2,-64(fp)
    365c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
    3660:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
    3664:	e0800217 	ldw	r2,8(fp)
    3668:	00c01bc4 	movi	r3,111
    366c:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
    3670:	e0bfe80b 	ldhu	r2,-96(fp)
    3674:	00005706 	br	37d4 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
    3678:	00021000 	call	2100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    367c:	0005303a 	rdctl	r2,status
    3680:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3684:	e0fff117 	ldw	r3,-60(fp)
    3688:	00bfff84 	movi	r2,-2
    368c:	1884703a 	and	r2,r3,r2
    3690:	1001703a 	wrctl	status,r2
  
  return context;
    3694:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
    3698:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
    369c:	d0a60317 	ldw	r2,-26612(gp)
    36a0:	10800c43 	ldbu	r2,49(r2)
    36a4:	10803fcc 	andi	r2,r2,255
    36a8:	10001c26 	beq	r2,zero,371c <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
    36ac:	d0a60317 	ldw	r2,-26612(gp)
    36b0:	10800c43 	ldbu	r2,49(r2)
    36b4:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    36b8:	d0a60317 	ldw	r2,-26612(gp)
    36bc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
    36c0:	e0bff704 	addi	r2,fp,-36
    36c4:	1009883a 	mov	r4,r2
    36c8:	0003fd40 	call	3fd4 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
    36cc:	d0a60317 	ldw	r2,-26612(gp)
    36d0:	10000c05 	stb	zero,48(r2)
    36d4:	e0bfe517 	ldw	r2,-108(fp)
    36d8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    36dc:	e0bff217 	ldw	r2,-56(fp)
    36e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
    36e4:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
    36e8:	e0bff303 	ldbu	r2,-52(fp)
    36ec:	108000a0 	cmpeqi	r2,r2,2
    36f0:	10000426 	beq	r2,zero,3704 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
    36f4:	e0800217 	ldw	r2,8(fp)
    36f8:	00c00384 	movi	r3,14
    36fc:	10c00005 	stb	r3,0(r2)
                 break;
    3700:	00000406 	br	3714 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
    3704:	e0800217 	ldw	r2,8(fp)
    3708:	00c00284 	movi	r3,10
    370c:	10c00005 	stb	r3,0(r2)
                 break;
    3710:	0001883a 	nop
        }
        return (flags_rdy);
    3714:	e0bfe80b 	ldhu	r2,-96(fp)
    3718:	00002e06 	br	37d4 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
    371c:	d0a60317 	ldw	r2,-26612(gp)
    3720:	10800b0b 	ldhu	r2,44(r2)
    3724:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
    3728:	e0bfe403 	ldbu	r2,-112(fp)
    372c:	10800058 	cmpnei	r2,r2,1
    3730:	1000211e 	bne	r2,zero,37b8 <OSFlagPend+0x588>
        switch (wait_type) {
    3734:	e0bffe03 	ldbu	r2,-8(fp)
    3738:	10001616 	blt	r2,zero,3794 <OSFlagPend+0x564>
    373c:	10c00090 	cmplti	r3,r2,2
    3740:	18000c1e 	bne	r3,zero,3774 <OSFlagPend+0x544>
    3744:	10800108 	cmpgei	r2,r2,4
    3748:	1000121e 	bne	r2,zero,3794 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
    374c:	e0bffc17 	ldw	r2,-16(fp)
    3750:	1080020b 	ldhu	r2,8(r2)
    3754:	1007883a 	mov	r3,r2
    3758:	e0bfe80b 	ldhu	r2,-96(fp)
    375c:	0084303a 	nor	r2,zero,r2
    3760:	1884703a 	and	r2,r3,r2
    3764:	1007883a 	mov	r3,r2
    3768:	e0bffc17 	ldw	r2,-16(fp)
    376c:	10c0020d 	sth	r3,8(r2)
                 break;
    3770:	00001106 	br	37b8 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
    3774:	e0bffc17 	ldw	r2,-16(fp)
    3778:	10c0020b 	ldhu	r3,8(r2)
    377c:	e0bfe80b 	ldhu	r2,-96(fp)
    3780:	1884b03a 	or	r2,r3,r2
    3784:	1007883a 	mov	r3,r2
    3788:	e0bffc17 	ldw	r2,-16(fp)
    378c:	10c0020d 	sth	r3,8(r2)
                 break;
    3790:	00000906 	br	37b8 <OSFlagPend+0x588>
    3794:	e0bfe517 	ldw	r2,-108(fp)
    3798:	e0bff415 	stw	r2,-48(fp)
    379c:	e0bff417 	ldw	r2,-48(fp)
    37a0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    37a4:	e0800217 	ldw	r2,8(fp)
    37a8:	00c01bc4 	movi	r3,111
    37ac:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    37b0:	0005883a 	mov	r2,zero
    37b4:	00000706 	br	37d4 <OSFlagPend+0x5a4>
    37b8:	e0bfe517 	ldw	r2,-108(fp)
    37bc:	e0bff515 	stw	r2,-44(fp)
    37c0:	e0bff517 	ldw	r2,-44(fp)
    37c4:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
    37c8:	e0800217 	ldw	r2,8(fp)
    37cc:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
    37d0:	e0bfe80b 	ldhu	r2,-96(fp)
}
    37d4:	e037883a 	mov	sp,fp
    37d8:	dfc00117 	ldw	ra,4(sp)
    37dc:	df000017 	ldw	fp,0(sp)
    37e0:	dec00204 	addi	sp,sp,8
    37e4:	f800283a 	ret

000037e8 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
    37e8:	defffb04 	addi	sp,sp,-20
    37ec:	df000415 	stw	fp,16(sp)
    37f0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
    37f4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    37f8:	0005303a 	rdctl	r2,status
    37fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3800:	e0fffe17 	ldw	r3,-8(fp)
    3804:	00bfff84 	movi	r2,-2
    3808:	1884703a 	and	r2,r3,r2
    380c:	1001703a 	wrctl	status,r2
  
  return context;
    3810:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    3814:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
    3818:	d0a60317 	ldw	r2,-26612(gp)
    381c:	10800b0b 	ldhu	r2,44(r2)
    3820:	e0bffd0d 	sth	r2,-12(fp)
    3824:	e0bffc17 	ldw	r2,-16(fp)
    3828:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    382c:	e0bfff17 	ldw	r2,-4(fp)
    3830:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
    3834:	e0bffd0b 	ldhu	r2,-12(fp)
}
    3838:	e037883a 	mov	sp,fp
    383c:	df000017 	ldw	fp,0(sp)
    3840:	dec00104 	addi	sp,sp,4
    3844:	f800283a 	ret

00003848 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
    3848:	deffef04 	addi	sp,sp,-68
    384c:	dfc01015 	stw	ra,64(sp)
    3850:	df000f15 	stw	fp,60(sp)
    3854:	df000f04 	addi	fp,sp,60
    3858:	e13ffc15 	stw	r4,-16(fp)
    385c:	2807883a 	mov	r3,r5
    3860:	3005883a 	mov	r2,r6
    3864:	e1ffff15 	stw	r7,-4(fp)
    3868:	e0fffd0d 	sth	r3,-12(fp)
    386c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
    3870:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    3874:	e0bfff17 	ldw	r2,-4(fp)
    3878:	1000021e 	bne	r2,zero,3884 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
    387c:	0005883a 	mov	r2,zero
    3880:	0000d106 	br	3bc8 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
    3884:	e0bffc17 	ldw	r2,-16(fp)
    3888:	1000051e 	bne	r2,zero,38a0 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    388c:	e0bfff17 	ldw	r2,-4(fp)
    3890:	00c01b84 	movi	r3,110
    3894:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3898:	0005883a 	mov	r2,zero
    389c:	0000ca06 	br	3bc8 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
    38a0:	e0bffc17 	ldw	r2,-16(fp)
    38a4:	10800003 	ldbu	r2,0(r2)
    38a8:	10803fcc 	andi	r2,r2,255
    38ac:	10800160 	cmpeqi	r2,r2,5
    38b0:	1000051e 	bne	r2,zero,38c8 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
    38b4:	e0bfff17 	ldw	r2,-4(fp)
    38b8:	00c00044 	movi	r3,1
    38bc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    38c0:	0005883a 	mov	r2,zero
    38c4:	0000c006 	br	3bc8 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    38c8:	0005303a 	rdctl	r2,status
    38cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    38d0:	e0fffb17 	ldw	r3,-20(fp)
    38d4:	00bfff84 	movi	r2,-2
    38d8:	1884703a 	and	r2,r3,r2
    38dc:	1001703a 	wrctl	status,r2
  
  return context;
    38e0:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
    38e4:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
    38e8:	e0bffe03 	ldbu	r2,-8(fp)
    38ec:	10000326 	beq	r2,zero,38fc <OSFlagPost+0xb4>
    38f0:	10800060 	cmpeqi	r2,r2,1
    38f4:	10000b1e 	bne	r2,zero,3924 <OSFlagPost+0xdc>
    38f8:	00001206 	br	3944 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
    38fc:	e0bffc17 	ldw	r2,-16(fp)
    3900:	1080020b 	ldhu	r2,8(r2)
    3904:	1007883a 	mov	r3,r2
    3908:	e0bffd0b 	ldhu	r2,-12(fp)
    390c:	0084303a 	nor	r2,zero,r2
    3910:	1884703a 	and	r2,r3,r2
    3914:	1007883a 	mov	r3,r2
    3918:	e0bffc17 	ldw	r2,-16(fp)
    391c:	10c0020d 	sth	r3,8(r2)
             break;
    3920:	00001106 	br	3968 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
    3924:	e0bffc17 	ldw	r2,-16(fp)
    3928:	10c0020b 	ldhu	r3,8(r2)
    392c:	e0bffd0b 	ldhu	r2,-12(fp)
    3930:	1884b03a 	or	r2,r3,r2
    3934:	1007883a 	mov	r3,r2
    3938:	e0bffc17 	ldw	r2,-16(fp)
    393c:	10c0020d 	sth	r3,8(r2)
             break;
    3940:	00000906 	br	3968 <OSFlagPost+0x120>
    3944:	e0bff317 	ldw	r2,-52(fp)
    3948:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    394c:	e0bff417 	ldw	r2,-48(fp)
    3950:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
    3954:	e0bfff17 	ldw	r2,-4(fp)
    3958:	00c01c44 	movi	r3,113
    395c:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
    3960:	0005883a 	mov	r2,zero
    3964:	00009806 	br	3bc8 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    3968:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    396c:	e0bffc17 	ldw	r2,-16(fp)
    3970:	10800117 	ldw	r2,4(r2)
    3974:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3978:	00007706 	br	3b58 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
    397c:	e0bff117 	ldw	r2,-60(fp)
    3980:	10800483 	ldbu	r2,18(r2)
    3984:	10803fcc 	andi	r2,r2,255
    3988:	10c00060 	cmpeqi	r3,r2,1
    398c:	18004a1e 	bne	r3,zero,3ab8 <OSFlagPost+0x270>
    3990:	10c00088 	cmpgei	r3,r2,2
    3994:	1800021e 	bne	r3,zero,39a0 <OSFlagPost+0x158>
    3998:	10002f26 	beq	r2,zero,3a58 <OSFlagPost+0x210>
    399c:	00005b06 	br	3b0c <OSFlagPost+0x2c4>
    39a0:	10c000a0 	cmpeqi	r3,r2,2
    39a4:	1800031e 	bne	r3,zero,39b4 <OSFlagPost+0x16c>
    39a8:	108000e0 	cmpeqi	r2,r2,3
    39ac:	1000171e 	bne	r2,zero,3a0c <OSFlagPost+0x1c4>
    39b0:	00005606 	br	3b0c <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    39b4:	e0bffc17 	ldw	r2,-16(fp)
    39b8:	10c0020b 	ldhu	r3,8(r2)
    39bc:	e0bff117 	ldw	r2,-60(fp)
    39c0:	1080040b 	ldhu	r2,16(r2)
    39c4:	1884703a 	and	r2,r3,r2
    39c8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    39cc:	e0bff117 	ldw	r2,-60(fp)
    39d0:	1080040b 	ldhu	r2,16(r2)
    39d4:	10ffffcc 	andi	r3,r2,65535
    39d8:	e0bff60b 	ldhu	r2,-40(fp)
    39dc:	1880541e 	bne	r3,r2,3b30 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    39e0:	e0bff60b 	ldhu	r2,-40(fp)
    39e4:	100b883a 	mov	r5,r2
    39e8:	e13ff117 	ldw	r4,-60(fp)
    39ec:	0003ee00 	call	3ee0 <OS_FlagTaskRdy>
    39f0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    39f4:	e0bff683 	ldbu	r2,-38(fp)
    39f8:	10800058 	cmpnei	r2,r2,1
    39fc:	10004c1e 	bne	r2,zero,3b30 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3a00:	00800044 	movi	r2,1
    3a04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3a08:	00004906 	br	3b30 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3a0c:	e0bffc17 	ldw	r2,-16(fp)
    3a10:	10c0020b 	ldhu	r3,8(r2)
    3a14:	e0bff117 	ldw	r2,-60(fp)
    3a18:	1080040b 	ldhu	r2,16(r2)
    3a1c:	1884703a 	and	r2,r3,r2
    3a20:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3a24:	e0bff60b 	ldhu	r2,-40(fp)
    3a28:	10004326 	beq	r2,zero,3b38 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3a2c:	e0bff60b 	ldhu	r2,-40(fp)
    3a30:	100b883a 	mov	r5,r2
    3a34:	e13ff117 	ldw	r4,-60(fp)
    3a38:	0003ee00 	call	3ee0 <OS_FlagTaskRdy>
    3a3c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    3a40:	e0bff683 	ldbu	r2,-38(fp)
    3a44:	10800058 	cmpnei	r2,r2,1
    3a48:	10003b1e 	bne	r2,zero,3b38 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3a4c:	00800044 	movi	r2,1
    3a50:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3a54:	00003806 	br	3b38 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3a58:	e0bffc17 	ldw	r2,-16(fp)
    3a5c:	1080020b 	ldhu	r2,8(r2)
    3a60:	0084303a 	nor	r2,zero,r2
    3a64:	1007883a 	mov	r3,r2
    3a68:	e0bff117 	ldw	r2,-60(fp)
    3a6c:	1080040b 	ldhu	r2,16(r2)
    3a70:	1884703a 	and	r2,r3,r2
    3a74:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
    3a78:	e0bff117 	ldw	r2,-60(fp)
    3a7c:	1080040b 	ldhu	r2,16(r2)
    3a80:	10ffffcc 	andi	r3,r2,65535
    3a84:	e0bff60b 	ldhu	r2,-40(fp)
    3a88:	18802d1e 	bne	r3,r2,3b40 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3a8c:	e0bff60b 	ldhu	r2,-40(fp)
    3a90:	100b883a 	mov	r5,r2
    3a94:	e13ff117 	ldw	r4,-60(fp)
    3a98:	0003ee00 	call	3ee0 <OS_FlagTaskRdy>
    3a9c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    3aa0:	e0bff683 	ldbu	r2,-38(fp)
    3aa4:	10800058 	cmpnei	r2,r2,1
    3aa8:	1000251e 	bne	r2,zero,3b40 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3aac:	00800044 	movi	r2,1
    3ab0:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3ab4:	00002206 	br	3b40 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
    3ab8:	e0bffc17 	ldw	r2,-16(fp)
    3abc:	1080020b 	ldhu	r2,8(r2)
    3ac0:	0084303a 	nor	r2,zero,r2
    3ac4:	1007883a 	mov	r3,r2
    3ac8:	e0bff117 	ldw	r2,-60(fp)
    3acc:	1080040b 	ldhu	r2,16(r2)
    3ad0:	1884703a 	and	r2,r3,r2
    3ad4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
    3ad8:	e0bff60b 	ldhu	r2,-40(fp)
    3adc:	10001a26 	beq	r2,zero,3b48 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
    3ae0:	e0bff60b 	ldhu	r2,-40(fp)
    3ae4:	100b883a 	mov	r5,r2
    3ae8:	e13ff117 	ldw	r4,-60(fp)
    3aec:	0003ee00 	call	3ee0 <OS_FlagTaskRdy>
    3af0:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
    3af4:	e0bff683 	ldbu	r2,-38(fp)
    3af8:	10800058 	cmpnei	r2,r2,1
    3afc:	1000121e 	bne	r2,zero,3b48 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
    3b00:	00800044 	movi	r2,1
    3b04:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
    3b08:	00000f06 	br	3b48 <OSFlagPost+0x300>
    3b0c:	e0bff317 	ldw	r2,-52(fp)
    3b10:	e0bff515 	stw	r2,-44(fp)
    3b14:	e0bff517 	ldw	r2,-44(fp)
    3b18:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
    3b1c:	e0bfff17 	ldw	r2,-4(fp)
    3b20:	00c01bc4 	movi	r3,111
    3b24:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
    3b28:	0005883a 	mov	r2,zero
    3b2c:	00002606 	br	3bc8 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    3b30:	0001883a 	nop
    3b34:	00000506 	br	3b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    3b38:	0001883a 	nop
    3b3c:	00000306 	br	3b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    3b40:	0001883a 	nop
    3b44:	00000106 	br	3b4c <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
    3b48:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    3b4c:	e0bff117 	ldw	r2,-60(fp)
    3b50:	10800017 	ldw	r2,0(r2)
    3b54:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
    3b58:	e0bff117 	ldw	r2,-60(fp)
    3b5c:	103f871e 	bne	r2,zero,397c <__alt_data_end+0xfffeb2dc>
    3b60:	e0bff317 	ldw	r2,-52(fp)
    3b64:	e0bff715 	stw	r2,-36(fp)
    3b68:	e0bff717 	ldw	r2,-36(fp)
    3b6c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
    3b70:	e0bff203 	ldbu	r2,-56(fp)
    3b74:	10800058 	cmpnei	r2,r2,1
    3b78:	1000011e 	bne	r2,zero,3b80 <OSFlagPost+0x338>
        OS_Sched();
    3b7c:	00021000 	call	2100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3b80:	0005303a 	rdctl	r2,status
    3b84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3b88:	e0fffa17 	ldw	r3,-24(fp)
    3b8c:	00bfff84 	movi	r2,-2
    3b90:	1884703a 	and	r2,r3,r2
    3b94:	1001703a 	wrctl	status,r2
  
  return context;
    3b98:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    3b9c:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
    3ba0:	e0bffc17 	ldw	r2,-16(fp)
    3ba4:	1080020b 	ldhu	r2,8(r2)
    3ba8:	e0bff90d 	sth	r2,-28(fp)
    3bac:	e0bff317 	ldw	r2,-52(fp)
    3bb0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3bb4:	e0bff817 	ldw	r2,-32(fp)
    3bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
    3bbc:	e0bfff17 	ldw	r2,-4(fp)
    3bc0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
    3bc4:	e0bff90b 	ldhu	r2,-28(fp)
}
    3bc8:	e037883a 	mov	sp,fp
    3bcc:	dfc00117 	ldw	ra,4(sp)
    3bd0:	df000017 	ldw	fp,0(sp)
    3bd4:	dec00204 	addi	sp,sp,8
    3bd8:	f800283a 	ret

00003bdc <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
    3bdc:	defff904 	addi	sp,sp,-28
    3be0:	df000615 	stw	fp,24(sp)
    3be4:	df000604 	addi	fp,sp,24
    3be8:	e13ffe15 	stw	r4,-8(fp)
    3bec:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
    3bf0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
    3bf4:	e0bfff17 	ldw	r2,-4(fp)
    3bf8:	1000021e 	bne	r2,zero,3c04 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
    3bfc:	0005883a 	mov	r2,zero
    3c00:	00002306 	br	3c90 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
    3c04:	e0bffe17 	ldw	r2,-8(fp)
    3c08:	1000051e 	bne	r2,zero,3c20 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
    3c0c:	e0bfff17 	ldw	r2,-4(fp)
    3c10:	00c01b84 	movi	r3,110
    3c14:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3c18:	0005883a 	mov	r2,zero
    3c1c:	00001c06 	br	3c90 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
    3c20:	e0bffe17 	ldw	r2,-8(fp)
    3c24:	10800003 	ldbu	r2,0(r2)
    3c28:	10803fcc 	andi	r2,r2,255
    3c2c:	10800160 	cmpeqi	r2,r2,5
    3c30:	1000051e 	bne	r2,zero,3c48 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    3c34:	e0bfff17 	ldw	r2,-4(fp)
    3c38:	00c00044 	movi	r3,1
    3c3c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
    3c40:	0005883a 	mov	r2,zero
    3c44:	00001206 	br	3c90 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3c48:	0005303a 	rdctl	r2,status
    3c4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3c50:	e0fffc17 	ldw	r3,-16(fp)
    3c54:	00bfff84 	movi	r2,-2
    3c58:	1884703a 	and	r2,r3,r2
    3c5c:	1001703a 	wrctl	status,r2
  
  return context;
    3c60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    3c64:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
    3c68:	e0bffe17 	ldw	r2,-8(fp)
    3c6c:	1080020b 	ldhu	r2,8(r2)
    3c70:	e0bffb0d 	sth	r2,-20(fp)
    3c74:	e0bffa17 	ldw	r2,-24(fp)
    3c78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    3c7c:	e0bffd17 	ldw	r2,-12(fp)
    3c80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    3c84:	e0bfff17 	ldw	r2,-4(fp)
    3c88:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
    3c8c:	e0bffb0b 	ldhu	r2,-20(fp)
}
    3c90:	e037883a 	mov	sp,fp
    3c94:	df000017 	ldw	fp,0(sp)
    3c98:	dec00104 	addi	sp,sp,4
    3c9c:	f800283a 	ret

00003ca0 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
    3ca0:	defff804 	addi	sp,sp,-32
    3ca4:	df000715 	stw	fp,28(sp)
    3ca8:	df000704 	addi	fp,sp,28
    3cac:	e13ffb15 	stw	r4,-20(fp)
    3cb0:	e17ffc15 	stw	r5,-16(fp)
    3cb4:	3009883a 	mov	r4,r6
    3cb8:	3807883a 	mov	r3,r7
    3cbc:	e0800117 	ldw	r2,4(fp)
    3cc0:	e13ffd0d 	sth	r4,-12(fp)
    3cc4:	e0fffe05 	stb	r3,-8(fp)
    3cc8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
    3ccc:	d0a60317 	ldw	r2,-26612(gp)
    3cd0:	d0e60317 	ldw	r3,-26612(gp)
    3cd4:	18c00c03 	ldbu	r3,48(r3)
    3cd8:	18c00814 	ori	r3,r3,32
    3cdc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
    3ce0:	d0a60317 	ldw	r2,-26612(gp)
    3ce4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
    3ce8:	d0a60317 	ldw	r2,-26612(gp)
    3cec:	e0ffff0b 	ldhu	r3,-4(fp)
    3cf0:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
    3cf4:	d0a60317 	ldw	r2,-26612(gp)
    3cf8:	e0fffc17 	ldw	r3,-16(fp)
    3cfc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
    3d00:	e0bffc17 	ldw	r2,-16(fp)
    3d04:	e0fffd0b 	ldhu	r3,-12(fp)
    3d08:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
    3d0c:	e0bffc17 	ldw	r2,-16(fp)
    3d10:	e0fffe03 	ldbu	r3,-8(fp)
    3d14:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
    3d18:	d0e60317 	ldw	r3,-26612(gp)
    3d1c:	e0bffc17 	ldw	r2,-16(fp)
    3d20:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
    3d24:	e0bffb17 	ldw	r2,-20(fp)
    3d28:	10c00117 	ldw	r3,4(r2)
    3d2c:	e0bffc17 	ldw	r2,-16(fp)
    3d30:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
    3d34:	e0bffc17 	ldw	r2,-16(fp)
    3d38:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
    3d3c:	e0bffc17 	ldw	r2,-16(fp)
    3d40:	e0fffb17 	ldw	r3,-20(fp)
    3d44:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    3d48:	e0bffb17 	ldw	r2,-20(fp)
    3d4c:	10800117 	ldw	r2,4(r2)
    3d50:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
    3d54:	e0bff917 	ldw	r2,-28(fp)
    3d58:	10000326 	beq	r2,zero,3d68 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
    3d5c:	e0bff917 	ldw	r2,-28(fp)
    3d60:	e0fffc17 	ldw	r3,-16(fp)
    3d64:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
    3d68:	e0bffb17 	ldw	r2,-20(fp)
    3d6c:	e0fffc17 	ldw	r3,-16(fp)
    3d70:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
    3d74:	d0a60317 	ldw	r2,-26612(gp)
    3d78:	10800d03 	ldbu	r2,52(r2)
    3d7c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    3d80:	e0fffa03 	ldbu	r3,-24(fp)
    3d84:	e13ffa03 	ldbu	r4,-24(fp)
    3d88:	d0a60044 	addi	r2,gp,-26623
    3d8c:	2085883a 	add	r2,r4,r2
    3d90:	10800003 	ldbu	r2,0(r2)
    3d94:	1009883a 	mov	r4,r2
    3d98:	d0a60317 	ldw	r2,-26612(gp)
    3d9c:	10800d43 	ldbu	r2,53(r2)
    3da0:	0084303a 	nor	r2,zero,r2
    3da4:	2084703a 	and	r2,r4,r2
    3da8:	1009883a 	mov	r4,r2
    3dac:	d0a60044 	addi	r2,gp,-26623
    3db0:	1885883a 	add	r2,r3,r2
    3db4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
    3db8:	e0fffa03 	ldbu	r3,-24(fp)
    3dbc:	d0a60044 	addi	r2,gp,-26623
    3dc0:	1885883a 	add	r2,r3,r2
    3dc4:	10800003 	ldbu	r2,0(r2)
    3dc8:	10803fcc 	andi	r2,r2,255
    3dcc:	1000071e 	bne	r2,zero,3dec <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    3dd0:	d0a60317 	ldw	r2,-26612(gp)
    3dd4:	10800d83 	ldbu	r2,54(r2)
    3dd8:	0084303a 	nor	r2,zero,r2
    3ddc:	1007883a 	mov	r3,r2
    3de0:	d0a60003 	ldbu	r2,-26624(gp)
    3de4:	1884703a 	and	r2,r3,r2
    3de8:	d0a60005 	stb	r2,-26624(gp)
    }
}
    3dec:	0001883a 	nop
    3df0:	e037883a 	mov	sp,fp
    3df4:	df000017 	ldw	fp,0(sp)
    3df8:	dec00104 	addi	sp,sp,4
    3dfc:	f800283a 	ret

00003e00 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
    3e00:	defffb04 	addi	sp,sp,-20
    3e04:	dfc00415 	stw	ra,16(sp)
    3e08:	df000315 	stw	fp,12(sp)
    3e0c:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    3e10:	0140dc04 	movi	r5,880
    3e14:	01000074 	movhi	r4,1
    3e18:	2106b204 	addi	r4,r4,6856
    3e1c:	00020440 	call	2044 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
    3e20:	00800074 	movhi	r2,1
    3e24:	1086b204 	addi	r2,r2,6856
    3e28:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
    3e2c:	00800074 	movhi	r2,1
    3e30:	1086bd04 	addi	r2,r2,6900
    3e34:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    3e38:	e03ffd0d 	sth	zero,-12(fp)
    3e3c:	00001306 	br	3e8c <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3e40:	e0bffe17 	ldw	r2,-8(fp)
    3e44:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
    3e48:	e0bffe17 	ldw	r2,-8(fp)
    3e4c:	e0ffff17 	ldw	r3,-4(fp)
    3e50:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
    3e54:	e0bffe17 	ldw	r2,-8(fp)
    3e58:	00c00fc4 	movi	r3,63
    3e5c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    3e60:	e0bffe17 	ldw	r2,-8(fp)
    3e64:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
    3e68:	e0bffe17 	ldw	r2,-8(fp)
    3e6c:	10800b04 	addi	r2,r2,44
    3e70:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
    3e74:	e0bfff17 	ldw	r2,-4(fp)
    3e78:	10800b04 	addi	r2,r2,44
    3e7c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
    3e80:	e0bffd0b 	ldhu	r2,-12(fp)
    3e84:	10800044 	addi	r2,r2,1
    3e88:	e0bffd0d 	sth	r2,-12(fp)
    3e8c:	e0bffd0b 	ldhu	r2,-12(fp)
    3e90:	108004f0 	cmpltui	r2,r2,19
    3e94:	103fea1e 	bne	r2,zero,3e40 <__alt_data_end+0xfffeb7a0>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
    3e98:	e0bffe17 	ldw	r2,-8(fp)
    3e9c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
    3ea0:	e0bffe17 	ldw	r2,-8(fp)
    3ea4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
    3ea8:	e0bffe17 	ldw	r2,-8(fp)
    3eac:	00c00fc4 	movi	r3,63
    3eb0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
    3eb4:	e0bffe17 	ldw	r2,-8(fp)
    3eb8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
    3ebc:	00800074 	movhi	r2,1
    3ec0:	1086b204 	addi	r2,r2,6856
    3ec4:	d0a60515 	stw	r2,-26604(gp)
#endif
}
    3ec8:	0001883a 	nop
    3ecc:	e037883a 	mov	sp,fp
    3ed0:	dfc00117 	ldw	ra,4(sp)
    3ed4:	df000017 	ldw	fp,0(sp)
    3ed8:	dec00204 	addi	sp,sp,8
    3edc:	f800283a 	ret

00003ee0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
    3ee0:	defffa04 	addi	sp,sp,-24
    3ee4:	dfc00515 	stw	ra,20(sp)
    3ee8:	df000415 	stw	fp,16(sp)
    3eec:	df000404 	addi	fp,sp,16
    3ef0:	e13ffe15 	stw	r4,-8(fp)
    3ef4:	2805883a 	mov	r2,r5
    3ef8:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
    3efc:	e0bffe17 	ldw	r2,-8(fp)
    3f00:	10800217 	ldw	r2,8(r2)
    3f04:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
    3f08:	e0bffd17 	ldw	r2,-12(fp)
    3f0c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
    3f10:	e0bffd17 	ldw	r2,-12(fp)
    3f14:	e0ffff0b 	ldhu	r3,-4(fp)
    3f18:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
    3f1c:	e0bffd17 	ldw	r2,-12(fp)
    3f20:	10c00c03 	ldbu	r3,48(r2)
    3f24:	00bff7c4 	movi	r2,-33
    3f28:	1884703a 	and	r2,r3,r2
    3f2c:	1007883a 	mov	r3,r2
    3f30:	e0bffd17 	ldw	r2,-12(fp)
    3f34:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
    3f38:	e0bffd17 	ldw	r2,-12(fp)
    3f3c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
    3f40:	e0bffd17 	ldw	r2,-12(fp)
    3f44:	10800c03 	ldbu	r2,48(r2)
    3f48:	10803fcc 	andi	r2,r2,255
    3f4c:	1000181e 	bne	r2,zero,3fb0 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
    3f50:	e0bffd17 	ldw	r2,-12(fp)
    3f54:	10c00d83 	ldbu	r3,54(r2)
    3f58:	d0a60003 	ldbu	r2,-26624(gp)
    3f5c:	1884b03a 	or	r2,r3,r2
    3f60:	d0a60005 	stb	r2,-26624(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3f64:	e0bffd17 	ldw	r2,-12(fp)
    3f68:	10800d03 	ldbu	r2,52(r2)
    3f6c:	10c03fcc 	andi	r3,r2,255
    3f70:	e0bffd17 	ldw	r2,-12(fp)
    3f74:	10800d03 	ldbu	r2,52(r2)
    3f78:	11003fcc 	andi	r4,r2,255
    3f7c:	d0a60044 	addi	r2,gp,-26623
    3f80:	2085883a 	add	r2,r4,r2
    3f84:	11000003 	ldbu	r4,0(r2)
    3f88:	e0bffd17 	ldw	r2,-12(fp)
    3f8c:	10800d43 	ldbu	r2,53(r2)
    3f90:	2084b03a 	or	r2,r4,r2
    3f94:	1009883a 	mov	r4,r2
    3f98:	d0a60044 	addi	r2,gp,-26623
    3f9c:	1885883a 	add	r2,r3,r2
    3fa0:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
    3fa4:	00800044 	movi	r2,1
    3fa8:	e0bffc05 	stb	r2,-16(fp)
    3fac:	00000106 	br	3fb4 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
    3fb0:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
    3fb4:	e13ffe17 	ldw	r4,-8(fp)
    3fb8:	0003fd40 	call	3fd4 <OS_FlagUnlink>
    return (sched);
    3fbc:	e0bffc03 	ldbu	r2,-16(fp)
}
    3fc0:	e037883a 	mov	sp,fp
    3fc4:	dfc00117 	ldw	ra,4(sp)
    3fc8:	df000017 	ldw	fp,0(sp)
    3fcc:	dec00204 	addi	sp,sp,8
    3fd0:	f800283a 	ret

00003fd4 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
    3fd4:	defffa04 	addi	sp,sp,-24
    3fd8:	df000515 	stw	fp,20(sp)
    3fdc:	df000504 	addi	fp,sp,20
    3fe0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
    3fe4:	e0bfff17 	ldw	r2,-4(fp)
    3fe8:	10800117 	ldw	r2,4(r2)
    3fec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
    3ff0:	e0bfff17 	ldw	r2,-4(fp)
    3ff4:	10800017 	ldw	r2,0(r2)
    3ff8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
    3ffc:	e0bffb17 	ldw	r2,-20(fp)
    4000:	10000b1e 	bne	r2,zero,4030 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
    4004:	e0bfff17 	ldw	r2,-4(fp)
    4008:	10800317 	ldw	r2,12(r2)
    400c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
    4010:	e0bffd17 	ldw	r2,-12(fp)
    4014:	e0fffc17 	ldw	r3,-16(fp)
    4018:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
    401c:	e0bffc17 	ldw	r2,-16(fp)
    4020:	10000b26 	beq	r2,zero,4050 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
    4024:	e0bffc17 	ldw	r2,-16(fp)
    4028:	10000115 	stw	zero,4(r2)
    402c:	00000806 	br	4050 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
    4030:	e0bffb17 	ldw	r2,-20(fp)
    4034:	e0fffc17 	ldw	r3,-16(fp)
    4038:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
    403c:	e0bffc17 	ldw	r2,-16(fp)
    4040:	10000326 	beq	r2,zero,4050 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
    4044:	e0bffc17 	ldw	r2,-16(fp)
    4048:	e0fffb17 	ldw	r3,-20(fp)
    404c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
    4050:	e0bfff17 	ldw	r2,-4(fp)
    4054:	10800217 	ldw	r2,8(r2)
    4058:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
    405c:	e0bffe17 	ldw	r2,-8(fp)
    4060:	10000a15 	stw	zero,40(r2)
#endif
}
    4064:	0001883a 	nop
    4068:	e037883a 	mov	sp,fp
    406c:	df000017 	ldw	fp,0(sp)
    4070:	dec00104 	addi	sp,sp,4
    4074:	f800283a 	ret

00004078 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
    4078:	defff404 	addi	sp,sp,-48
    407c:	df000b15 	stw	fp,44(sp)
    4080:	df000b04 	addi	fp,sp,44
    4084:	e13ffc15 	stw	r4,-16(fp)
    4088:	e17ffd15 	stw	r5,-12(fp)
    408c:	e1bffe15 	stw	r6,-8(fp)
    4090:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4094:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    4098:	e0bfff17 	ldw	r2,-4(fp)
    409c:	1000021e 	bne	r2,zero,40a8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
    40a0:	0005883a 	mov	r2,zero
    40a4:	00006506 	br	423c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
    40a8:	e0bffc17 	ldw	r2,-16(fp)
    40ac:	1000051e 	bne	r2,zero,40c4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    40b0:	e0bfff17 	ldw	r2,-4(fp)
    40b4:	00c01884 	movi	r3,98
    40b8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    40bc:	0005883a 	mov	r2,zero
    40c0:	00005e06 	br	423c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
    40c4:	e0bffc17 	ldw	r2,-16(fp)
    40c8:	108000cc 	andi	r2,r2,3
    40cc:	10000526 	beq	r2,zero,40e4 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
    40d0:	e0bfff17 	ldw	r2,-4(fp)
    40d4:	00c01884 	movi	r3,98
    40d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    40dc:	0005883a 	mov	r2,zero
    40e0:	00005606 	br	423c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
    40e4:	e0bffd17 	ldw	r2,-12(fp)
    40e8:	108000a8 	cmpgeui	r2,r2,2
    40ec:	1000051e 	bne	r2,zero,4104 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
    40f0:	e0bfff17 	ldw	r2,-4(fp)
    40f4:	00c016c4 	movi	r3,91
    40f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    40fc:	0005883a 	mov	r2,zero
    4100:	00004e06 	br	423c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
    4104:	e0bffe17 	ldw	r2,-8(fp)
    4108:	10800128 	cmpgeui	r2,r2,4
    410c:	1000051e 	bne	r2,zero,4124 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
    4110:	e0bfff17 	ldw	r2,-4(fp)
    4114:	00c01704 	movi	r3,92
    4118:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    411c:	0005883a 	mov	r2,zero
    4120:	00004606 	br	423c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4124:	0005303a 	rdctl	r2,status
    4128:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    412c:	e0fffb17 	ldw	r3,-20(fp)
    4130:	00bfff84 	movi	r2,-2
    4134:	1884703a 	and	r2,r3,r2
    4138:	1001703a 	wrctl	status,r2
  
  return context;
    413c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4140:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
    4144:	d0a5fd17 	ldw	r2,-26636(gp)
    4148:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
    414c:	d0a5fd17 	ldw	r2,-26636(gp)
    4150:	10000326 	beq	r2,zero,4160 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
    4154:	d0a5fd17 	ldw	r2,-26636(gp)
    4158:	10800117 	ldw	r2,4(r2)
    415c:	d0a5fd15 	stw	r2,-26636(gp)
    4160:	e0bff817 	ldw	r2,-32(fp)
    4164:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4168:	e0bff917 	ldw	r2,-28(fp)
    416c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
    4170:	e0bffa17 	ldw	r2,-24(fp)
    4174:	1000051e 	bne	r2,zero,418c <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
    4178:	e0bfff17 	ldw	r2,-4(fp)
    417c:	00c01684 	movi	r3,90
    4180:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
    4184:	0005883a 	mov	r2,zero
    4188:	00002c06 	br	423c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    418c:	e0bffc17 	ldw	r2,-16(fp)
    4190:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
    4194:	e0fffc17 	ldw	r3,-16(fp)
    4198:	e0bffe17 	ldw	r2,-8(fp)
    419c:	1885883a 	add	r2,r3,r2
    41a0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
    41a4:	e03ff715 	stw	zero,-36(fp)
    41a8:	00000c06 	br	41dc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
    41ac:	e0bff617 	ldw	r2,-40(fp)
    41b0:	e0fff517 	ldw	r3,-44(fp)
    41b4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
    41b8:	e0bff517 	ldw	r2,-44(fp)
    41bc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    41c0:	e0fff517 	ldw	r3,-44(fp)
    41c4:	e0bffe17 	ldw	r2,-8(fp)
    41c8:	1885883a 	add	r2,r3,r2
    41cc:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
    41d0:	e0bff717 	ldw	r2,-36(fp)
    41d4:	10800044 	addi	r2,r2,1
    41d8:	e0bff715 	stw	r2,-36(fp)
    41dc:	e0bffd17 	ldw	r2,-12(fp)
    41e0:	10bfffc4 	addi	r2,r2,-1
    41e4:	e0fff717 	ldw	r3,-36(fp)
    41e8:	18bff036 	bltu	r3,r2,41ac <__alt_data_end+0xfffebb0c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
    41ec:	e0bff617 	ldw	r2,-40(fp)
    41f0:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
    41f4:	e0bffa17 	ldw	r2,-24(fp)
    41f8:	e0fffc17 	ldw	r3,-16(fp)
    41fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
    4200:	e0bffa17 	ldw	r2,-24(fp)
    4204:	e0fffc17 	ldw	r3,-16(fp)
    4208:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
    420c:	e0bffa17 	ldw	r2,-24(fp)
    4210:	e0fffd17 	ldw	r3,-12(fp)
    4214:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
    4218:	e0bffa17 	ldw	r2,-24(fp)
    421c:	e0fffd17 	ldw	r3,-12(fp)
    4220:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
    4224:	e0bffa17 	ldw	r2,-24(fp)
    4228:	e0fffe17 	ldw	r3,-8(fp)
    422c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
    4230:	e0bfff17 	ldw	r2,-4(fp)
    4234:	10000005 	stb	zero,0(r2)
    return (pmem);
    4238:	e0bffa17 	ldw	r2,-24(fp)
}
    423c:	e037883a 	mov	sp,fp
    4240:	df000017 	ldw	fp,0(sp)
    4244:	dec00104 	addi	sp,sp,4
    4248:	f800283a 	ret

0000424c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
    424c:	defff804 	addi	sp,sp,-32
    4250:	df000715 	stw	fp,28(sp)
    4254:	df000704 	addi	fp,sp,28
    4258:	e13ffe15 	stw	r4,-8(fp)
    425c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4260:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    4264:	e0bfff17 	ldw	r2,-4(fp)
    4268:	1000021e 	bne	r2,zero,4274 <OSMemGet+0x28>
        return ((void *)0);
    426c:	0005883a 	mov	r2,zero
    4270:	00002e06 	br	432c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
    4274:	e0bffe17 	ldw	r2,-8(fp)
    4278:	1000051e 	bne	r2,zero,4290 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    427c:	e0bfff17 	ldw	r2,-4(fp)
    4280:	00c01804 	movi	r3,96
    4284:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4288:	0005883a 	mov	r2,zero
    428c:	00002706 	br	432c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4290:	0005303a 	rdctl	r2,status
    4294:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4298:	e0fffd17 	ldw	r3,-12(fp)
    429c:	00bfff84 	movi	r2,-2
    42a0:	1884703a 	and	r2,r3,r2
    42a4:	1001703a 	wrctl	status,r2
  
  return context;
    42a8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    42ac:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
    42b0:	e0bffe17 	ldw	r2,-8(fp)
    42b4:	10800417 	ldw	r2,16(r2)
    42b8:	10001426 	beq	r2,zero,430c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
    42bc:	e0bffe17 	ldw	r2,-8(fp)
    42c0:	10800117 	ldw	r2,4(r2)
    42c4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
    42c8:	e0bffb17 	ldw	r2,-20(fp)
    42cc:	10c00017 	ldw	r3,0(r2)
    42d0:	e0bffe17 	ldw	r2,-8(fp)
    42d4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10800417 	ldw	r2,16(r2)
    42e0:	10ffffc4 	addi	r3,r2,-1
    42e4:	e0bffe17 	ldw	r2,-8(fp)
    42e8:	10c00415 	stw	r3,16(r2)
    42ec:	e0bff917 	ldw	r2,-28(fp)
    42f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    42f4:	e0bffa17 	ldw	r2,-24(fp)
    42f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
    42fc:	e0bfff17 	ldw	r2,-4(fp)
    4300:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
    4304:	e0bffb17 	ldw	r2,-20(fp)
    4308:	00000806 	br	432c <OSMemGet+0xe0>
    430c:	e0bff917 	ldw	r2,-28(fp)
    4310:	e0bffc15 	stw	r2,-16(fp)
    4314:	e0bffc17 	ldw	r2,-16(fp)
    4318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
    431c:	e0bfff17 	ldw	r2,-4(fp)
    4320:	00c01744 	movi	r3,93
    4324:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
    4328:	0005883a 	mov	r2,zero
}
    432c:	e037883a 	mov	sp,fp
    4330:	df000017 	ldw	fp,0(sp)
    4334:	dec00104 	addi	sp,sp,4
    4338:	f800283a 	ret

0000433c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    433c:	defff704 	addi	sp,sp,-36
    4340:	dfc00815 	stw	ra,32(sp)
    4344:	df000715 	stw	fp,28(sp)
    4348:	df000704 	addi	fp,sp,28
    434c:	e13ffd15 	stw	r4,-12(fp)
    4350:	e17ffe15 	stw	r5,-8(fp)
    4354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4358:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    435c:	e0bfff17 	ldw	r2,-4(fp)
    4360:	1000021e 	bne	r2,zero,436c <OSMemNameGet+0x30>
        return (0);
    4364:	0005883a 	mov	r2,zero
    4368:	00002b06 	br	4418 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    436c:	e0bffd17 	ldw	r2,-12(fp)
    4370:	1000051e 	bne	r2,zero,4388 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    4374:	e0bfff17 	ldw	r2,-4(fp)
    4378:	00c01804 	movi	r3,96
    437c:	10c00005 	stb	r3,0(r2)
        return (0);
    4380:	0005883a 	mov	r2,zero
    4384:	00002406 	br	4418 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    4388:	e0bffe17 	ldw	r2,-8(fp)
    438c:	1000051e 	bne	r2,zero,43a4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	00c00304 	movi	r3,12
    4398:	10c00005 	stb	r3,0(r2)
        return (0);
    439c:	0005883a 	mov	r2,zero
    43a0:	00001d06 	br	4418 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    43a4:	d0a60203 	ldbu	r2,-26616(gp)
    43a8:	10803fcc 	andi	r2,r2,255
    43ac:	10000526 	beq	r2,zero,43c4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
    43b0:	e0bfff17 	ldw	r2,-4(fp)
    43b4:	00c00444 	movi	r3,17
    43b8:	10c00005 	stb	r3,0(r2)
        return (0);
    43bc:	0005883a 	mov	r2,zero
    43c0:	00001506 	br	4418 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    43c4:	0005303a 	rdctl	r2,status
    43c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    43cc:	e0fffb17 	ldw	r3,-20(fp)
    43d0:	00bfff84 	movi	r2,-2
    43d4:	1884703a 	and	r2,r3,r2
    43d8:	1001703a 	wrctl	status,r2
  
  return context;
    43dc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
    43e0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
    43e4:	e0bffd17 	ldw	r2,-12(fp)
    43e8:	10800504 	addi	r2,r2,20
    43ec:	100b883a 	mov	r5,r2
    43f0:	e13ffe17 	ldw	r4,-8(fp)
    43f4:	00022440 	call	2244 <OS_StrCopy>
    43f8:	e0bffa05 	stb	r2,-24(fp)
    43fc:	e0bff917 	ldw	r2,-28(fp)
    4400:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4404:	e0bffc17 	ldw	r2,-16(fp)
    4408:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    440c:	e0bfff17 	ldw	r2,-4(fp)
    4410:	10000005 	stb	zero,0(r2)
    return (len);
    4414:	e0bffa03 	ldbu	r2,-24(fp)
}
    4418:	e037883a 	mov	sp,fp
    441c:	dfc00117 	ldw	ra,4(sp)
    4420:	df000017 	ldw	fp,0(sp)
    4424:	dec00204 	addi	sp,sp,8
    4428:	f800283a 	ret

0000442c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
    442c:	defff604 	addi	sp,sp,-40
    4430:	dfc00915 	stw	ra,36(sp)
    4434:	df000815 	stw	fp,32(sp)
    4438:	df000804 	addi	fp,sp,32
    443c:	e13ffd15 	stw	r4,-12(fp)
    4440:	e17ffe15 	stw	r5,-8(fp)
    4444:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4448:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    444c:	e0bfff17 	ldw	r2,-4(fp)
    4450:	10003526 	beq	r2,zero,4528 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
    4454:	e0bffd17 	ldw	r2,-12(fp)
    4458:	1000041e 	bne	r2,zero,446c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	00c01804 	movi	r3,96
    4464:	10c00005 	stb	r3,0(r2)
        return;
    4468:	00003006 	br	452c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
    446c:	e0bffe17 	ldw	r2,-8(fp)
    4470:	1000041e 	bne	r2,zero,4484 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
    4474:	e0bfff17 	ldw	r2,-4(fp)
    4478:	00c00304 	movi	r3,12
    447c:	10c00005 	stb	r3,0(r2)
        return;
    4480:	00002a06 	br	452c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    4484:	d0a60203 	ldbu	r2,-26616(gp)
    4488:	10803fcc 	andi	r2,r2,255
    448c:	10000426 	beq	r2,zero,44a0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
    4490:	e0bfff17 	ldw	r2,-4(fp)
    4494:	00c00484 	movi	r3,18
    4498:	10c00005 	stb	r3,0(r2)
        return;
    449c:	00002306 	br	452c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    44a0:	0005303a 	rdctl	r2,status
    44a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    44a8:	e0fffc17 	ldw	r3,-16(fp)
    44ac:	00bfff84 	movi	r2,-2
    44b0:	1884703a 	and	r2,r3,r2
    44b4:	1001703a 	wrctl	status,r2
  
  return context;
    44b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    44bc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
    44c0:	e13ffe17 	ldw	r4,-8(fp)
    44c4:	00022b80 	call	22b8 <OS_StrLen>
    44c8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
    44cc:	e0bffa03 	ldbu	r2,-24(fp)
    44d0:	10800830 	cmpltui	r2,r2,32
    44d4:	1000081e 	bne	r2,zero,44f8 <OSMemNameSet+0xcc>
    44d8:	e0bff817 	ldw	r2,-32(fp)
    44dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    44e0:	e0bff917 	ldw	r2,-28(fp)
    44e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
    44e8:	e0bfff17 	ldw	r2,-4(fp)
    44ec:	00c018c4 	movi	r3,99
    44f0:	10c00005 	stb	r3,0(r2)
        return;
    44f4:	00000d06 	br	452c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    44f8:	e0bffd17 	ldw	r2,-12(fp)
    44fc:	10800504 	addi	r2,r2,20
    4500:	e17ffe17 	ldw	r5,-8(fp)
    4504:	1009883a 	mov	r4,r2
    4508:	00022440 	call	2244 <OS_StrCopy>
    450c:	e0bff817 	ldw	r2,-32(fp)
    4510:	e0bffb15 	stw	r2,-20(fp)
    4514:	e0bffb17 	ldw	r2,-20(fp)
    4518:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    451c:	e0bfff17 	ldw	r2,-4(fp)
    4520:	10000005 	stb	zero,0(r2)
    4524:	00000106 	br	452c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
    4528:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    452c:	e037883a 	mov	sp,fp
    4530:	dfc00117 	ldw	ra,4(sp)
    4534:	df000017 	ldw	fp,0(sp)
    4538:	dec00204 	addi	sp,sp,8
    453c:	f800283a 	ret

00004540 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
    4540:	defff904 	addi	sp,sp,-28
    4544:	df000615 	stw	fp,24(sp)
    4548:	df000604 	addi	fp,sp,24
    454c:	e13ffe15 	stw	r4,-8(fp)
    4550:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4554:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4558:	e0bffe17 	ldw	r2,-8(fp)
    455c:	1000021e 	bne	r2,zero,4568 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    4560:	00801804 	movi	r2,96
    4564:	00002806 	br	4608 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
    4568:	e0bfff17 	ldw	r2,-4(fp)
    456c:	1000021e 	bne	r2,zero,4578 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
    4570:	008017c4 	movi	r2,95
    4574:	00002406 	br	4608 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4578:	0005303a 	rdctl	r2,status
    457c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4580:	e0fffd17 	ldw	r3,-12(fp)
    4584:	00bfff84 	movi	r2,-2
    4588:	1884703a 	and	r2,r3,r2
    458c:	1001703a 	wrctl	status,r2
  
  return context;
    4590:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4594:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
    4598:	e0bffe17 	ldw	r2,-8(fp)
    459c:	10c00417 	ldw	r3,16(r2)
    45a0:	e0bffe17 	ldw	r2,-8(fp)
    45a4:	10800317 	ldw	r2,12(r2)
    45a8:	18800636 	bltu	r3,r2,45c4 <OSMemPut+0x84>
    45ac:	e0bffa17 	ldw	r2,-24(fp)
    45b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    45b4:	e0bffb17 	ldw	r2,-20(fp)
    45b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
    45bc:	00801784 	movi	r2,94
    45c0:	00001106 	br	4608 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
    45c4:	e0bffe17 	ldw	r2,-8(fp)
    45c8:	10c00117 	ldw	r3,4(r2)
    45cc:	e0bfff17 	ldw	r2,-4(fp)
    45d0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
    45d4:	e0bffe17 	ldw	r2,-8(fp)
    45d8:	e0ffff17 	ldw	r3,-4(fp)
    45dc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
    45e0:	e0bffe17 	ldw	r2,-8(fp)
    45e4:	10800417 	ldw	r2,16(r2)
    45e8:	10c00044 	addi	r3,r2,1
    45ec:	e0bffe17 	ldw	r2,-8(fp)
    45f0:	10c00415 	stw	r3,16(r2)
    45f4:	e0bffa17 	ldw	r2,-24(fp)
    45f8:	e0bffc15 	stw	r2,-16(fp)
    45fc:	e0bffc17 	ldw	r2,-16(fp)
    4600:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
    4604:	0005883a 	mov	r2,zero
}
    4608:	e037883a 	mov	sp,fp
    460c:	df000017 	ldw	fp,0(sp)
    4610:	dec00104 	addi	sp,sp,4
    4614:	f800283a 	ret

00004618 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
    4618:	defffa04 	addi	sp,sp,-24
    461c:	df000515 	stw	fp,20(sp)
    4620:	df000504 	addi	fp,sp,20
    4624:	e13ffe15 	stw	r4,-8(fp)
    4628:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    462c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
    4630:	e0bffe17 	ldw	r2,-8(fp)
    4634:	1000021e 	bne	r2,zero,4640 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
    4638:	00801804 	movi	r2,96
    463c:	00002c06 	br	46f0 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
    4640:	e0bfff17 	ldw	r2,-4(fp)
    4644:	1000021e 	bne	r2,zero,4650 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
    4648:	00801844 	movi	r2,97
    464c:	00002806 	br	46f0 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4650:	0005303a 	rdctl	r2,status
    4654:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4658:	e0fffc17 	ldw	r3,-16(fp)
    465c:	00bfff84 	movi	r2,-2
    4660:	1884703a 	and	r2,r3,r2
    4664:	1001703a 	wrctl	status,r2
  
  return context;
    4668:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    466c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
    4670:	e0bffe17 	ldw	r2,-8(fp)
    4674:	10c00017 	ldw	r3,0(r2)
    4678:	e0bfff17 	ldw	r2,-4(fp)
    467c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
    4680:	e0bffe17 	ldw	r2,-8(fp)
    4684:	10c00117 	ldw	r3,4(r2)
    4688:	e0bfff17 	ldw	r2,-4(fp)
    468c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
    4690:	e0bffe17 	ldw	r2,-8(fp)
    4694:	10c00217 	ldw	r3,8(r2)
    4698:	e0bfff17 	ldw	r2,-4(fp)
    469c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
    46a0:	e0bffe17 	ldw	r2,-8(fp)
    46a4:	10c00317 	ldw	r3,12(r2)
    46a8:	e0bfff17 	ldw	r2,-4(fp)
    46ac:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
    46b0:	e0bffe17 	ldw	r2,-8(fp)
    46b4:	10c00417 	ldw	r3,16(r2)
    46b8:	e0bfff17 	ldw	r2,-4(fp)
    46bc:	10c00415 	stw	r3,16(r2)
    46c0:	e0bffb17 	ldw	r2,-20(fp)
    46c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    46c8:	e0bffd17 	ldw	r2,-12(fp)
    46cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
    46d0:	e0bfff17 	ldw	r2,-4(fp)
    46d4:	10c00317 	ldw	r3,12(r2)
    46d8:	e0bfff17 	ldw	r2,-4(fp)
    46dc:	10800417 	ldw	r2,16(r2)
    46e0:	1887c83a 	sub	r3,r3,r2
    46e4:	e0bfff17 	ldw	r2,-4(fp)
    46e8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
    46ec:	0005883a 	mov	r2,zero
}
    46f0:	e037883a 	mov	sp,fp
    46f4:	df000017 	ldw	fp,0(sp)
    46f8:	dec00104 	addi	sp,sp,4
    46fc:	f800283a 	ret

00004700 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
    4700:	defffc04 	addi	sp,sp,-16
    4704:	dfc00315 	stw	ra,12(sp)
    4708:	df000215 	stw	fp,8(sp)
    470c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    4710:	01430c04 	movi	r5,3120
    4714:	01000074 	movhi	r4,1
    4718:	21078e04 	addi	r4,r4,7736
    471c:	00020440 	call	2044 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    4720:	00800074 	movhi	r2,1
    4724:	10878e04 	addi	r2,r2,7736
    4728:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    472c:	e03fff0d 	sth	zero,-4(fp)
    4730:	00001606 	br	478c <OS_MemInit+0x8c>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
    4734:	e0bfff0b 	ldhu	r2,-4(fp)
    4738:	10800044 	addi	r2,r2,1
    473c:	01400d04 	movi	r5,52
    4740:	1009883a 	mov	r4,r2
    4744:	000aa680 	call	aa68 <__mulsi3>
    4748:	1007883a 	mov	r3,r2
    474c:	00800074 	movhi	r2,1
    4750:	10878e04 	addi	r2,r2,7736
    4754:	1887883a 	add	r3,r3,r2
    4758:	e0bffe17 	ldw	r2,-8(fp)
    475c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
    4760:	e0bffe17 	ldw	r2,-8(fp)
    4764:	00c00fc4 	movi	r3,63
    4768:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
    476c:	e0bffe17 	ldw	r2,-8(fp)
    4770:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
    4774:	e0bffe17 	ldw	r2,-8(fp)
    4778:	10800d04 	addi	r2,r2,52
    477c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
    4780:	e0bfff0b 	ldhu	r2,-4(fp)
    4784:	10800044 	addi	r2,r2,1
    4788:	e0bfff0d 	sth	r2,-4(fp)
    478c:	e0bfff0b 	ldhu	r2,-4(fp)
    4790:	10800ef0 	cmpltui	r2,r2,59
    4794:	103fe71e 	bne	r2,zero,4734 <__alt_data_end+0xfffec094>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
    4798:	e0bffe17 	ldw	r2,-8(fp)
    479c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
    47a0:	e0bffe17 	ldw	r2,-8(fp)
    47a4:	00c00fc4 	movi	r3,63
    47a8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
    47ac:	e0bffe17 	ldw	r2,-8(fp)
    47b0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
    47b4:	00800074 	movhi	r2,1
    47b8:	10878e04 	addi	r2,r2,7736
    47bc:	d0a5fd15 	stw	r2,-26636(gp)
#endif
}
    47c0:	0001883a 	nop
    47c4:	e037883a 	mov	sp,fp
    47c8:	dfc00117 	ldw	ra,4(sp)
    47cc:	df000017 	ldw	fp,0(sp)
    47d0:	dec00204 	addi	sp,sp,8
    47d4:	f800283a 	ret

000047d8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
    47d8:	defff804 	addi	sp,sp,-32
    47dc:	df000715 	stw	fp,28(sp)
    47e0:	df000704 	addi	fp,sp,28
    47e4:	e13ffe15 	stw	r4,-8(fp)
    47e8:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    47ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    47f0:	e0bfff17 	ldw	r2,-4(fp)
    47f4:	1000021e 	bne	r2,zero,4800 <OSQAccept+0x28>
        return ((void *)0);
    47f8:	0005883a 	mov	r2,zero
    47fc:	00004206 	br	4908 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    4800:	e0bffe17 	ldw	r2,-8(fp)
    4804:	1000051e 	bne	r2,zero,481c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    4808:	e0bfff17 	ldw	r2,-4(fp)
    480c:	00c00104 	movi	r3,4
    4810:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4814:	0005883a 	mov	r2,zero
    4818:	00003b06 	br	4908 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    481c:	e0bffe17 	ldw	r2,-8(fp)
    4820:	10800003 	ldbu	r2,0(r2)
    4824:	10803fcc 	andi	r2,r2,255
    4828:	108000a0 	cmpeqi	r2,r2,2
    482c:	1000051e 	bne	r2,zero,4844 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
    4830:	e0bfff17 	ldw	r2,-4(fp)
    4834:	00c00044 	movi	r3,1
    4838:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    483c:	0005883a 	mov	r2,zero
    4840:	00003106 	br	4908 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4844:	0005303a 	rdctl	r2,status
    4848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    484c:	e0fffd17 	ldw	r3,-12(fp)
    4850:	00bfff84 	movi	r2,-2
    4854:	1884703a 	and	r2,r3,r2
    4858:	1001703a 	wrctl	status,r2
  
  return context;
    485c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4860:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    4864:	e0bffe17 	ldw	r2,-8(fp)
    4868:	10800117 	ldw	r2,4(r2)
    486c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    4870:	e0bffc17 	ldw	r2,-16(fp)
    4874:	1080058b 	ldhu	r2,22(r2)
    4878:	10bfffcc 	andi	r2,r2,65535
    487c:	10001926 	beq	r2,zero,48e4 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    4880:	e0bffc17 	ldw	r2,-16(fp)
    4884:	10800417 	ldw	r2,16(r2)
    4888:	11000104 	addi	r4,r2,4
    488c:	e0fffc17 	ldw	r3,-16(fp)
    4890:	19000415 	stw	r4,16(r3)
    4894:	10800017 	ldw	r2,0(r2)
    4898:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    489c:	e0bffc17 	ldw	r2,-16(fp)
    48a0:	1080058b 	ldhu	r2,22(r2)
    48a4:	10bfffc4 	addi	r2,r2,-1
    48a8:	1007883a 	mov	r3,r2
    48ac:	e0bffc17 	ldw	r2,-16(fp)
    48b0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    48b4:	e0bffc17 	ldw	r2,-16(fp)
    48b8:	10c00417 	ldw	r3,16(r2)
    48bc:	e0bffc17 	ldw	r2,-16(fp)
    48c0:	10800217 	ldw	r2,8(r2)
    48c4:	1880041e 	bne	r3,r2,48d8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
    48c8:	e0bffc17 	ldw	r2,-16(fp)
    48cc:	10c00117 	ldw	r3,4(r2)
    48d0:	e0bffc17 	ldw	r2,-16(fp)
    48d4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
    48d8:	e0bfff17 	ldw	r2,-4(fp)
    48dc:	10000005 	stb	zero,0(r2)
    48e0:	00000406 	br	48f4 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
    48e4:	e0bfff17 	ldw	r2,-4(fp)
    48e8:	00c007c4 	movi	r3,31
    48ec:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
    48f0:	e03ff915 	stw	zero,-28(fp)
    48f4:	e0bffa17 	ldw	r2,-24(fp)
    48f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    48fc:	e0bffb17 	ldw	r2,-20(fp)
    4900:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
    4904:	e0bff917 	ldw	r2,-28(fp)
}
    4908:	e037883a 	mov	sp,fp
    490c:	df000017 	ldw	fp,0(sp)
    4910:	dec00104 	addi	sp,sp,4
    4914:	f800283a 	ret

00004918 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
    4918:	defff404 	addi	sp,sp,-48
    491c:	dfc00b15 	stw	ra,44(sp)
    4920:	df000a15 	stw	fp,40(sp)
    4924:	df000a04 	addi	fp,sp,40
    4928:	e13ffe15 	stw	r4,-8(fp)
    492c:	2805883a 	mov	r2,r5
    4930:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4934:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    4938:	d0a60203 	ldbu	r2,-26616(gp)
    493c:	10803fcc 	andi	r2,r2,255
    4940:	10000226 	beq	r2,zero,494c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
    4944:	0005883a 	mov	r2,zero
    4948:	00005906 	br	4ab0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    494c:	0005303a 	rdctl	r2,status
    4950:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4954:	e0fffd17 	ldw	r3,-12(fp)
    4958:	00bfff84 	movi	r2,-2
    495c:	1884703a 	and	r2,r3,r2
    4960:	1001703a 	wrctl	status,r2
  
  return context;
    4964:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    4968:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
    496c:	d0a60117 	ldw	r2,-26620(gp)
    4970:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
    4974:	d0a60117 	ldw	r2,-26620(gp)
    4978:	10000326 	beq	r2,zero,4988 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    497c:	d0a60117 	ldw	r2,-26620(gp)
    4980:	10800117 	ldw	r2,4(r2)
    4984:	d0a60115 	stw	r2,-26620(gp)
    4988:	e0bff717 	ldw	r2,-36(fp)
    498c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4990:	e0bff817 	ldw	r2,-32(fp)
    4994:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
    4998:	e0bff617 	ldw	r2,-40(fp)
    499c:	10004326 	beq	r2,zero,4aac <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    49a0:	0005303a 	rdctl	r2,status
    49a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    49a8:	e0fff917 	ldw	r3,-28(fp)
    49ac:	00bfff84 	movi	r2,-2
    49b0:	1884703a 	and	r2,r3,r2
    49b4:	1001703a 	wrctl	status,r2
  
  return context;
    49b8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
    49bc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
    49c0:	d0a5ff17 	ldw	r2,-26628(gp)
    49c4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
    49c8:	e0bffb17 	ldw	r2,-20(fp)
    49cc:	10002d26 	beq	r2,zero,4a84 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
    49d0:	d0a5ff17 	ldw	r2,-26628(gp)
    49d4:	10800017 	ldw	r2,0(r2)
    49d8:	d0a5ff15 	stw	r2,-26628(gp)
    49dc:	e0bff717 	ldw	r2,-36(fp)
    49e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    49e4:	e0bffa17 	ldw	r2,-24(fp)
    49e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
    49ec:	e0bffb17 	ldw	r2,-20(fp)
    49f0:	e0fffe17 	ldw	r3,-8(fp)
    49f4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
    49f8:	e0bfff0b 	ldhu	r2,-4(fp)
    49fc:	1085883a 	add	r2,r2,r2
    4a00:	1085883a 	add	r2,r2,r2
    4a04:	1007883a 	mov	r3,r2
    4a08:	e0bffe17 	ldw	r2,-8(fp)
    4a0c:	10c7883a 	add	r3,r2,r3
    4a10:	e0bffb17 	ldw	r2,-20(fp)
    4a14:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
    4a18:	e0bffb17 	ldw	r2,-20(fp)
    4a1c:	e0fffe17 	ldw	r3,-8(fp)
    4a20:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
    4a24:	e0bffb17 	ldw	r2,-20(fp)
    4a28:	e0fffe17 	ldw	r3,-8(fp)
    4a2c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
    4a30:	e0bffb17 	ldw	r2,-20(fp)
    4a34:	e0ffff0b 	ldhu	r3,-4(fp)
    4a38:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
    4a3c:	e0bffb17 	ldw	r2,-20(fp)
    4a40:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
    4a44:	e0bff617 	ldw	r2,-40(fp)
    4a48:	00c00084 	movi	r3,2
    4a4c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
    4a50:	e0bff617 	ldw	r2,-40(fp)
    4a54:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
    4a58:	e0bff617 	ldw	r2,-40(fp)
    4a5c:	e0fffb17 	ldw	r3,-20(fp)
    4a60:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
    4a64:	e0bff617 	ldw	r2,-40(fp)
    4a68:	00c00fc4 	movi	r3,63
    4a6c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
    4a70:	e0bff617 	ldw	r2,-40(fp)
    4a74:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
    4a78:	e13ff617 	ldw	r4,-40(fp)
    4a7c:	0001c640 	call	1c64 <OS_EventWaitListInit>
    4a80:	00000a06 	br	4aac <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
    4a84:	d0e60117 	ldw	r3,-26620(gp)
    4a88:	e0bff617 	ldw	r2,-40(fp)
    4a8c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
    4a90:	e0bff617 	ldw	r2,-40(fp)
    4a94:	d0a60115 	stw	r2,-26620(gp)
    4a98:	e0bff717 	ldw	r2,-36(fp)
    4a9c:	e0bffc15 	stw	r2,-16(fp)
    4aa0:	e0bffc17 	ldw	r2,-16(fp)
    4aa4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
    4aa8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
    4aac:	e0bff617 	ldw	r2,-40(fp)
}
    4ab0:	e037883a 	mov	sp,fp
    4ab4:	dfc00117 	ldw	ra,4(sp)
    4ab8:	df000017 	ldw	fp,0(sp)
    4abc:	dec00204 	addi	sp,sp,8
    4ac0:	f800283a 	ret

00004ac4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4ac4:	defff204 	addi	sp,sp,-56
    4ac8:	dfc00d15 	stw	ra,52(sp)
    4acc:	df000c15 	stw	fp,48(sp)
    4ad0:	df000c04 	addi	fp,sp,48
    4ad4:	e13ffd15 	stw	r4,-12(fp)
    4ad8:	2805883a 	mov	r2,r5
    4adc:	e1bfff15 	stw	r6,-4(fp)
    4ae0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4ae4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    4ae8:	e0bfff17 	ldw	r2,-4(fp)
    4aec:	1000021e 	bne	r2,zero,4af8 <OSQDel+0x34>
        return (pevent);
    4af0:	e0bffd17 	ldw	r2,-12(fp)
    4af4:	00008e06 	br	4d30 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    4af8:	e0bffd17 	ldw	r2,-12(fp)
    4afc:	1000051e 	bne	r2,zero,4b14 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    4b00:	e0bfff17 	ldw	r2,-4(fp)
    4b04:	00c00104 	movi	r3,4
    4b08:	10c00005 	stb	r3,0(r2)
        return (pevent);
    4b0c:	e0bffd17 	ldw	r2,-12(fp)
    4b10:	00008706 	br	4d30 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    4b14:	e0bffd17 	ldw	r2,-12(fp)
    4b18:	10800003 	ldbu	r2,0(r2)
    4b1c:	10803fcc 	andi	r2,r2,255
    4b20:	108000a0 	cmpeqi	r2,r2,2
    4b24:	1000051e 	bne	r2,zero,4b3c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    4b28:	e0bfff17 	ldw	r2,-4(fp)
    4b2c:	00c00044 	movi	r3,1
    4b30:	10c00005 	stb	r3,0(r2)
        return (pevent);
    4b34:	e0bffd17 	ldw	r2,-12(fp)
    4b38:	00007d06 	br	4d30 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4b3c:	d0a60203 	ldbu	r2,-26616(gp)
    4b40:	10803fcc 	andi	r2,r2,255
    4b44:	10000526 	beq	r2,zero,4b5c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
    4b48:	e0bfff17 	ldw	r2,-4(fp)
    4b4c:	00c003c4 	movi	r3,15
    4b50:	10c00005 	stb	r3,0(r2)
        return (pevent);
    4b54:	e0bffd17 	ldw	r2,-12(fp)
    4b58:	00007506 	br	4d30 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4b5c:	0005303a 	rdctl	r2,status
    4b60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4b64:	e0fffc17 	ldw	r3,-16(fp)
    4b68:	00bfff84 	movi	r2,-2
    4b6c:	1884703a 	and	r2,r3,r2
    4b70:	1001703a 	wrctl	status,r2
  
  return context;
    4b74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4b78:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
    4b7c:	e0bffd17 	ldw	r2,-12(fp)
    4b80:	10800283 	ldbu	r2,10(r2)
    4b84:	10803fcc 	andi	r2,r2,255
    4b88:	10000326 	beq	r2,zero,4b98 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    4b8c:	00800044 	movi	r2,1
    4b90:	e0bff405 	stb	r2,-48(fp)
    4b94:	00000106 	br	4b9c <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4b98:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
    4b9c:	e0bffe03 	ldbu	r2,-8(fp)
    4ba0:	10000326 	beq	r2,zero,4bb0 <OSQDel+0xec>
    4ba4:	10800060 	cmpeqi	r2,r2,1
    4ba8:	1000301e 	bne	r2,zero,4c6c <OSQDel+0x1a8>
    4bac:	00005506 	br	4d04 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
    4bb0:	e0bff403 	ldbu	r2,-48(fp)
    4bb4:	10001e1e 	bne	r2,zero,4c30 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    4bb8:	e0bffd17 	ldw	r2,-12(fp)
    4bbc:	00c00fc4 	movi	r3,63
    4bc0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    4bc4:	e0bffd17 	ldw	r2,-12(fp)
    4bc8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
    4bcc:	e0bffd17 	ldw	r2,-12(fp)
    4bd0:	10800117 	ldw	r2,4(r2)
    4bd4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
    4bd8:	d0e5ff17 	ldw	r3,-26628(gp)
    4bdc:	e0bff817 	ldw	r2,-32(fp)
    4be0:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
    4be4:	e0bff817 	ldw	r2,-32(fp)
    4be8:	d0a5ff15 	stw	r2,-26628(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4bec:	e0bffd17 	ldw	r2,-12(fp)
    4bf0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    4bf4:	d0e60117 	ldw	r3,-26620(gp)
    4bf8:	e0bffd17 	ldw	r2,-12(fp)
    4bfc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    4c00:	e0bffd17 	ldw	r2,-12(fp)
    4c04:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    4c08:	e0bffd17 	ldw	r2,-12(fp)
    4c0c:	d0a60115 	stw	r2,-26620(gp)
    4c10:	e0bff617 	ldw	r2,-40(fp)
    4c14:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4c18:	e0bff717 	ldw	r2,-36(fp)
    4c1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    4c20:	e0bfff17 	ldw	r2,-4(fp)
    4c24:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
    4c28:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    4c2c:	00003f06 	br	4d2c <OSQDel+0x268>
    4c30:	e0bff617 	ldw	r2,-40(fp)
    4c34:	e0bff915 	stw	r2,-28(fp)
    4c38:	e0bff917 	ldw	r2,-28(fp)
    4c3c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    4c40:	e0bfff17 	ldw	r2,-4(fp)
    4c44:	00c01244 	movi	r3,73
    4c48:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    4c4c:	e0bffd17 	ldw	r2,-12(fp)
    4c50:	e0bff515 	stw	r2,-44(fp)
             }
             break;
    4c54:	00003506 	br	4d2c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
    4c58:	000f883a 	mov	r7,zero
    4c5c:	01800104 	movi	r6,4
    4c60:	000b883a 	mov	r5,zero
    4c64:	e13ffd17 	ldw	r4,-12(fp)
    4c68:	00016b40 	call	16b4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
    4c6c:	e0bffd17 	ldw	r2,-12(fp)
    4c70:	10800283 	ldbu	r2,10(r2)
    4c74:	10803fcc 	andi	r2,r2,255
    4c78:	103ff71e 	bne	r2,zero,4c58 <__alt_data_end+0xfffec5b8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    4c7c:	e0bffd17 	ldw	r2,-12(fp)
    4c80:	00c00fc4 	movi	r3,63
    4c84:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    4c88:	e0bffd17 	ldw	r2,-12(fp)
    4c8c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
    4c90:	e0bffd17 	ldw	r2,-12(fp)
    4c94:	10800117 	ldw	r2,4(r2)
    4c98:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
    4c9c:	d0e5ff17 	ldw	r3,-26628(gp)
    4ca0:	e0bff817 	ldw	r2,-32(fp)
    4ca4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
    4ca8:	e0bff817 	ldw	r2,-32(fp)
    4cac:	d0a5ff15 	stw	r2,-26628(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4cb0:	e0bffd17 	ldw	r2,-12(fp)
    4cb4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    4cb8:	d0e60117 	ldw	r3,-26620(gp)
    4cbc:	e0bffd17 	ldw	r2,-12(fp)
    4cc0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    4cc4:	e0bffd17 	ldw	r2,-12(fp)
    4cc8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    4ccc:	e0bffd17 	ldw	r2,-12(fp)
    4cd0:	d0a60115 	stw	r2,-26620(gp)
    4cd4:	e0bff617 	ldw	r2,-40(fp)
    4cd8:	e0bffa15 	stw	r2,-24(fp)
    4cdc:	e0bffa17 	ldw	r2,-24(fp)
    4ce0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    4ce4:	e0bff403 	ldbu	r2,-48(fp)
    4ce8:	10800058 	cmpnei	r2,r2,1
    4cec:	1000011e 	bne	r2,zero,4cf4 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    4cf0:	00021000 	call	2100 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    4cf4:	e0bfff17 	ldw	r2,-4(fp)
    4cf8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
    4cfc:	e03ff515 	stw	zero,-44(fp)
             break;
    4d00:	00000a06 	br	4d2c <OSQDel+0x268>
    4d04:	e0bff617 	ldw	r2,-40(fp)
    4d08:	e0bffb15 	stw	r2,-20(fp)
    4d0c:	e0bffb17 	ldw	r2,-20(fp)
    4d10:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    4d14:	e0bfff17 	ldw	r2,-4(fp)
    4d18:	00c001c4 	movi	r3,7
    4d1c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    4d20:	e0bffd17 	ldw	r2,-12(fp)
    4d24:	e0bff515 	stw	r2,-44(fp)
             break;
    4d28:	0001883a 	nop
    }
    return (pevent_return);
    4d2c:	e0bff517 	ldw	r2,-44(fp)
}
    4d30:	e037883a 	mov	sp,fp
    4d34:	dfc00117 	ldw	ra,4(sp)
    4d38:	df000017 	ldw	fp,0(sp)
    4d3c:	dec00204 	addi	sp,sp,8
    4d40:	f800283a 	ret

00004d44 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
    4d44:	defffa04 	addi	sp,sp,-24
    4d48:	df000515 	stw	fp,20(sp)
    4d4c:	df000504 	addi	fp,sp,20
    4d50:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4d54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    4d58:	e0bfff17 	ldw	r2,-4(fp)
    4d5c:	1000021e 	bne	r2,zero,4d68 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
    4d60:	00800104 	movi	r2,4
    4d64:	00002106 	br	4dec <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    4d68:	e0bfff17 	ldw	r2,-4(fp)
    4d6c:	10800003 	ldbu	r2,0(r2)
    4d70:	10803fcc 	andi	r2,r2,255
    4d74:	108000a0 	cmpeqi	r2,r2,2
    4d78:	1000021e 	bne	r2,zero,4d84 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
    4d7c:	00800044 	movi	r2,1
    4d80:	00001a06 	br	4dec <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4d84:	0005303a 	rdctl	r2,status
    4d88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4d8c:	e0fffd17 	ldw	r3,-12(fp)
    4d90:	00bfff84 	movi	r2,-2
    4d94:	1884703a 	and	r2,r3,r2
    4d98:	1001703a 	wrctl	status,r2
  
  return context;
    4d9c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    4da0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
    4da4:	e0bfff17 	ldw	r2,-4(fp)
    4da8:	10800117 	ldw	r2,4(r2)
    4dac:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
    4db0:	e0bffc17 	ldw	r2,-16(fp)
    4db4:	10c00117 	ldw	r3,4(r2)
    4db8:	e0bffc17 	ldw	r2,-16(fp)
    4dbc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
    4dc0:	e0bffc17 	ldw	r2,-16(fp)
    4dc4:	10c00117 	ldw	r3,4(r2)
    4dc8:	e0bffc17 	ldw	r2,-16(fp)
    4dcc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
    4dd0:	e0bffc17 	ldw	r2,-16(fp)
    4dd4:	1000058d 	sth	zero,22(r2)
    4dd8:	e0bffb17 	ldw	r2,-20(fp)
    4ddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4de0:	e0bffe17 	ldw	r2,-8(fp)
    4de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    4de8:	0005883a 	mov	r2,zero
}
    4dec:	e037883a 	mov	sp,fp
    4df0:	df000017 	ldw	fp,0(sp)
    4df4:	dec00104 	addi	sp,sp,4
    4df8:	f800283a 	ret

00004dfc <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    4dfc:	defff304 	addi	sp,sp,-52
    4e00:	dfc00c15 	stw	ra,48(sp)
    4e04:	df000b15 	stw	fp,44(sp)
    4e08:	df000b04 	addi	fp,sp,44
    4e0c:	e13ffd15 	stw	r4,-12(fp)
    4e10:	2805883a 	mov	r2,r5
    4e14:	e1bfff15 	stw	r6,-4(fp)
    4e18:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4e1c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
    4e20:	e0bfff17 	ldw	r2,-4(fp)
    4e24:	1000021e 	bne	r2,zero,4e30 <OSQPend+0x34>
        return ((void *)0);
    4e28:	0005883a 	mov	r2,zero
    4e2c:	00009106 	br	5074 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    4e30:	e0bffd17 	ldw	r2,-12(fp)
    4e34:	1000051e 	bne	r2,zero,4e4c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    4e38:	e0bfff17 	ldw	r2,-4(fp)
    4e3c:	00c00104 	movi	r3,4
    4e40:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4e44:	0005883a 	mov	r2,zero
    4e48:	00008a06 	br	5074 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
    4e4c:	e0bffd17 	ldw	r2,-12(fp)
    4e50:	10800003 	ldbu	r2,0(r2)
    4e54:	10803fcc 	andi	r2,r2,255
    4e58:	108000a0 	cmpeqi	r2,r2,2
    4e5c:	1000051e 	bne	r2,zero,4e74 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    4e60:	e0bfff17 	ldw	r2,-4(fp)
    4e64:	00c00044 	movi	r3,1
    4e68:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4e6c:	0005883a 	mov	r2,zero
    4e70:	00008006 	br	5074 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
    4e74:	d0a60203 	ldbu	r2,-26616(gp)
    4e78:	10803fcc 	andi	r2,r2,255
    4e7c:	10000526 	beq	r2,zero,4e94 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
    4e80:	e0bfff17 	ldw	r2,-4(fp)
    4e84:	00c00084 	movi	r3,2
    4e88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4e8c:	0005883a 	mov	r2,zero
    4e90:	00007806 	br	5074 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
    4e94:	d0a5f403 	ldbu	r2,-26672(gp)
    4e98:	10803fcc 	andi	r2,r2,255
    4e9c:	10000526 	beq	r2,zero,4eb4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
    4ea0:	e0bfff17 	ldw	r2,-4(fp)
    4ea4:	00c00344 	movi	r3,13
    4ea8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
    4eac:	0005883a 	mov	r2,zero
    4eb0:	00007006 	br	5074 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4eb4:	0005303a 	rdctl	r2,status
    4eb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4ebc:	e0fffc17 	ldw	r3,-16(fp)
    4ec0:	00bfff84 	movi	r2,-2
    4ec4:	1884703a 	and	r2,r3,r2
    4ec8:	1001703a 	wrctl	status,r2
  
  return context;
    4ecc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    4ed0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
    4ed4:	e0bffd17 	ldw	r2,-12(fp)
    4ed8:	10800117 	ldw	r2,4(r2)
    4edc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
    4ee0:	e0bff817 	ldw	r2,-32(fp)
    4ee4:	1080058b 	ldhu	r2,22(r2)
    4ee8:	10bfffcc 	andi	r2,r2,65535
    4eec:	10001e26 	beq	r2,zero,4f68 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
    4ef0:	e0bff817 	ldw	r2,-32(fp)
    4ef4:	10800417 	ldw	r2,16(r2)
    4ef8:	11000104 	addi	r4,r2,4
    4efc:	e0fff817 	ldw	r3,-32(fp)
    4f00:	19000415 	stw	r4,16(r3)
    4f04:	10800017 	ldw	r2,0(r2)
    4f08:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
    4f0c:	e0bff817 	ldw	r2,-32(fp)
    4f10:	1080058b 	ldhu	r2,22(r2)
    4f14:	10bfffc4 	addi	r2,r2,-1
    4f18:	1007883a 	mov	r3,r2
    4f1c:	e0bff817 	ldw	r2,-32(fp)
    4f20:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
    4f24:	e0bff817 	ldw	r2,-32(fp)
    4f28:	10c00417 	ldw	r3,16(r2)
    4f2c:	e0bff817 	ldw	r2,-32(fp)
    4f30:	10800217 	ldw	r2,8(r2)
    4f34:	1880041e 	bne	r3,r2,4f48 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
    4f38:	e0bff817 	ldw	r2,-32(fp)
    4f3c:	10c00117 	ldw	r3,4(r2)
    4f40:	e0bff817 	ldw	r2,-32(fp)
    4f44:	10c00415 	stw	r3,16(r2)
    4f48:	e0bff617 	ldw	r2,-40(fp)
    4f4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    4f50:	e0bff717 	ldw	r2,-36(fp)
    4f54:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    4f58:	e0bfff17 	ldw	r2,-4(fp)
    4f5c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
    4f60:	e0bff517 	ldw	r2,-44(fp)
    4f64:	00004306 	br	5074 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
    4f68:	d0a60317 	ldw	r2,-26612(gp)
    4f6c:	d0e60317 	ldw	r3,-26612(gp)
    4f70:	18c00c03 	ldbu	r3,48(r3)
    4f74:	18c00114 	ori	r3,r3,4
    4f78:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4f7c:	d0a60317 	ldw	r2,-26612(gp)
    4f80:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
    4f84:	d0a60317 	ldw	r2,-26612(gp)
    4f88:	e0fffe0b 	ldhu	r3,-8(fp)
    4f8c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
    4f90:	e13ffd17 	ldw	r4,-12(fp)
    4f94:	000184c0 	call	184c <OS_EventTaskWait>
    4f98:	e0bff617 	ldw	r2,-40(fp)
    4f9c:	e0bffb15 	stw	r2,-20(fp)
    4fa0:	e0bffb17 	ldw	r2,-20(fp)
    4fa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
    4fa8:	00021000 	call	2100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    4fac:	0005303a 	rdctl	r2,status
    4fb0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    4fb4:	e0fff917 	ldw	r3,-28(fp)
    4fb8:	00bfff84 	movi	r2,-2
    4fbc:	1884703a 	and	r2,r3,r2
    4fc0:	1001703a 	wrctl	status,r2
  
  return context;
    4fc4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    4fc8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    4fcc:	d0a60317 	ldw	r2,-26612(gp)
    4fd0:	10800c43 	ldbu	r2,49(r2)
    4fd4:	10803fcc 	andi	r2,r2,255
    4fd8:	10000326 	beq	r2,zero,4fe8 <OSQPend+0x1ec>
    4fdc:	108000a0 	cmpeqi	r2,r2,2
    4fe0:	1000071e 	bne	r2,zero,5000 <OSQPend+0x204>
    4fe4:	00000b06 	br	5014 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
    4fe8:	d0a60317 	ldw	r2,-26612(gp)
    4fec:	10800917 	ldw	r2,36(r2)
    4ff0:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
    4ff4:	e0bfff17 	ldw	r2,-4(fp)
    4ff8:	10000005 	stb	zero,0(r2)
             break;
    4ffc:	00000e06 	br	5038 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
    5000:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5004:	e0bfff17 	ldw	r2,-4(fp)
    5008:	00c00384 	movi	r3,14
    500c:	10c00005 	stb	r3,0(r2)
             break;
    5010:	00000906 	br	5038 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
    5014:	d0a60317 	ldw	r2,-26612(gp)
    5018:	e17ffd17 	ldw	r5,-12(fp)
    501c:	1009883a 	mov	r4,r2
    5020:	0001aac0 	call	1aac <OS_EventTaskRemove>
             pmsg = (void *)0;
    5024:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    5028:	e0bfff17 	ldw	r2,-4(fp)
    502c:	00c00284 	movi	r3,10
    5030:	10c00005 	stb	r3,0(r2)
             break;
    5034:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    5038:	d0a60317 	ldw	r2,-26612(gp)
    503c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    5040:	d0a60317 	ldw	r2,-26612(gp)
    5044:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    5048:	d0a60317 	ldw	r2,-26612(gp)
    504c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5050:	d0a60317 	ldw	r2,-26612(gp)
    5054:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
    5058:	d0a60317 	ldw	r2,-26612(gp)
    505c:	10000915 	stw	zero,36(r2)
    5060:	e0bff617 	ldw	r2,-40(fp)
    5064:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5068:	e0bffa17 	ldw	r2,-24(fp)
    506c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
    5070:	e0bff517 	ldw	r2,-44(fp)
}
    5074:	e037883a 	mov	sp,fp
    5078:	dfc00117 	ldw	ra,4(sp)
    507c:	df000017 	ldw	fp,0(sp)
    5080:	dec00204 	addi	sp,sp,8
    5084:	f800283a 	ret

00005088 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5088:	defff604 	addi	sp,sp,-40
    508c:	dfc00915 	stw	ra,36(sp)
    5090:	df000815 	stw	fp,32(sp)
    5094:	df000804 	addi	fp,sp,32
    5098:	e13ffd15 	stw	r4,-12(fp)
    509c:	2805883a 	mov	r2,r5
    50a0:	e1bfff15 	stw	r6,-4(fp)
    50a4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    50a8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    50ac:	e0bfff17 	ldw	r2,-4(fp)
    50b0:	1000021e 	bne	r2,zero,50bc <OSQPendAbort+0x34>
        return (0);
    50b4:	0005883a 	mov	r2,zero
    50b8:	00004906 	br	51e0 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    50bc:	e0bffd17 	ldw	r2,-12(fp)
    50c0:	1000051e 	bne	r2,zero,50d8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    50c4:	e0bfff17 	ldw	r2,-4(fp)
    50c8:	00c00104 	movi	r3,4
    50cc:	10c00005 	stb	r3,0(r2)
        return (0);
    50d0:	0005883a 	mov	r2,zero
    50d4:	00004206 	br	51e0 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
    50d8:	e0bffd17 	ldw	r2,-12(fp)
    50dc:	10800003 	ldbu	r2,0(r2)
    50e0:	10803fcc 	andi	r2,r2,255
    50e4:	108000a0 	cmpeqi	r2,r2,2
    50e8:	1000051e 	bne	r2,zero,5100 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    50ec:	e0bfff17 	ldw	r2,-4(fp)
    50f0:	00c00044 	movi	r3,1
    50f4:	10c00005 	stb	r3,0(r2)
        return (0);
    50f8:	0005883a 	mov	r2,zero
    50fc:	00003806 	br	51e0 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5100:	0005303a 	rdctl	r2,status
    5104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5108:	e0fffc17 	ldw	r3,-16(fp)
    510c:	00bfff84 	movi	r2,-2
    5110:	1884703a 	and	r2,r3,r2
    5114:	1001703a 	wrctl	status,r2
  
  return context;
    5118:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    511c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
    5120:	e0bffd17 	ldw	r2,-12(fp)
    5124:	10800283 	ldbu	r2,10(r2)
    5128:	10803fcc 	andi	r2,r2,255
    512c:	10002526 	beq	r2,zero,51c4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
    5130:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    5134:	e0bffe03 	ldbu	r2,-8(fp)
    5138:	10800060 	cmpeqi	r2,r2,1
    513c:	10000e26 	beq	r2,zero,5178 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    5140:	00000806 	br	5164 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    5144:	01c00084 	movi	r7,2
    5148:	01800104 	movi	r6,4
    514c:	000b883a 	mov	r5,zero
    5150:	e13ffd17 	ldw	r4,-12(fp)
    5154:	00016b40 	call	16b4 <OS_EventTaskRdy>
                     nbr_tasks++;
    5158:	e0bff803 	ldbu	r2,-32(fp)
    515c:	10800044 	addi	r2,r2,1
    5160:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
    5164:	e0bffd17 	ldw	r2,-12(fp)
    5168:	10800283 	ldbu	r2,10(r2)
    516c:	10803fcc 	andi	r2,r2,255
    5170:	103ff41e 	bne	r2,zero,5144 <__alt_data_end+0xfffecaa4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    5174:	00000906 	br	519c <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
    5178:	01c00084 	movi	r7,2
    517c:	01800104 	movi	r6,4
    5180:	000b883a 	mov	r5,zero
    5184:	e13ffd17 	ldw	r4,-12(fp)
    5188:	00016b40 	call	16b4 <OS_EventTaskRdy>
                 nbr_tasks++;
    518c:	e0bff803 	ldbu	r2,-32(fp)
    5190:	10800044 	addi	r2,r2,1
    5194:	e0bff805 	stb	r2,-32(fp)
                 break;
    5198:	0001883a 	nop
    519c:	e0bff917 	ldw	r2,-28(fp)
    51a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51a4:	e0bffa17 	ldw	r2,-24(fp)
    51a8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
    51ac:	00021000 	call	2100 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    51b0:	e0bfff17 	ldw	r2,-4(fp)
    51b4:	00c00384 	movi	r3,14
    51b8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    51bc:	e0bff803 	ldbu	r2,-32(fp)
    51c0:	00000706 	br	51e0 <OSQPendAbort+0x158>
    51c4:	e0bff917 	ldw	r2,-28(fp)
    51c8:	e0bffb15 	stw	r2,-20(fp)
    51cc:	e0bffb17 	ldw	r2,-20(fp)
    51d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    51d4:	e0bfff17 	ldw	r2,-4(fp)
    51d8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
    51dc:	0005883a 	mov	r2,zero
}
    51e0:	e037883a 	mov	sp,fp
    51e4:	dfc00117 	ldw	ra,4(sp)
    51e8:	df000017 	ldw	fp,0(sp)
    51ec:	dec00204 	addi	sp,sp,8
    51f0:	f800283a 	ret

000051f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
    51f4:	defff604 	addi	sp,sp,-40
    51f8:	dfc00915 	stw	ra,36(sp)
    51fc:	df000815 	stw	fp,32(sp)
    5200:	df000804 	addi	fp,sp,32
    5204:	e13ffe15 	stw	r4,-8(fp)
    5208:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    520c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    5210:	e0bffe17 	ldw	r2,-8(fp)
    5214:	1000021e 	bne	r2,zero,5220 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
    5218:	00800104 	movi	r2,4
    521c:	00004a06 	br	5348 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    5220:	e0bffe17 	ldw	r2,-8(fp)
    5224:	10800003 	ldbu	r2,0(r2)
    5228:	10803fcc 	andi	r2,r2,255
    522c:	108000a0 	cmpeqi	r2,r2,2
    5230:	1000021e 	bne	r2,zero,523c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
    5234:	00800044 	movi	r2,1
    5238:	00004306 	br	5348 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    523c:	0005303a 	rdctl	r2,status
    5240:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5244:	e0fffd17 	ldw	r3,-12(fp)
    5248:	00bfff84 	movi	r2,-2
    524c:	1884703a 	and	r2,r3,r2
    5250:	1001703a 	wrctl	status,r2
  
  return context;
    5254:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5258:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
    525c:	e0bffe17 	ldw	r2,-8(fp)
    5260:	10800283 	ldbu	r2,10(r2)
    5264:	10803fcc 	andi	r2,r2,255
    5268:	10000c26 	beq	r2,zero,529c <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    526c:	000f883a 	mov	r7,zero
    5270:	01800104 	movi	r6,4
    5274:	e17fff17 	ldw	r5,-4(fp)
    5278:	e13ffe17 	ldw	r4,-8(fp)
    527c:	00016b40 	call	16b4 <OS_EventTaskRdy>
    5280:	e0bff817 	ldw	r2,-32(fp)
    5284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5288:	e0bff917 	ldw	r2,-28(fp)
    528c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
    5290:	00021000 	call	2100 <OS_Sched>
        return (OS_ERR_NONE);
    5294:	0005883a 	mov	r2,zero
    5298:	00002b06 	br	5348 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
    529c:	e0bffe17 	ldw	r2,-8(fp)
    52a0:	10800117 	ldw	r2,4(r2)
    52a4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
    52a8:	e0bffb17 	ldw	r2,-20(fp)
    52ac:	10c0058b 	ldhu	r3,22(r2)
    52b0:	e0bffb17 	ldw	r2,-20(fp)
    52b4:	1080050b 	ldhu	r2,20(r2)
    52b8:	18ffffcc 	andi	r3,r3,65535
    52bc:	10bfffcc 	andi	r2,r2,65535
    52c0:	18800636 	bltu	r3,r2,52dc <OSQPost+0xe8>
    52c4:	e0bff817 	ldw	r2,-32(fp)
    52c8:	e0bffa15 	stw	r2,-24(fp)
    52cc:	e0bffa17 	ldw	r2,-24(fp)
    52d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    52d4:	00800784 	movi	r2,30
    52d8:	00001b06 	br	5348 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
    52dc:	e0bffb17 	ldw	r2,-20(fp)
    52e0:	10800317 	ldw	r2,12(r2)
    52e4:	11000104 	addi	r4,r2,4
    52e8:	e0fffb17 	ldw	r3,-20(fp)
    52ec:	19000315 	stw	r4,12(r3)
    52f0:	e0ffff17 	ldw	r3,-4(fp)
    52f4:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
    52f8:	e0bffb17 	ldw	r2,-20(fp)
    52fc:	1080058b 	ldhu	r2,22(r2)
    5300:	10800044 	addi	r2,r2,1
    5304:	1007883a 	mov	r3,r2
    5308:	e0bffb17 	ldw	r2,-20(fp)
    530c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
    5310:	e0bffb17 	ldw	r2,-20(fp)
    5314:	10c00317 	ldw	r3,12(r2)
    5318:	e0bffb17 	ldw	r2,-20(fp)
    531c:	10800217 	ldw	r2,8(r2)
    5320:	1880041e 	bne	r3,r2,5334 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
    5324:	e0bffb17 	ldw	r2,-20(fp)
    5328:	10c00117 	ldw	r3,4(r2)
    532c:	e0bffb17 	ldw	r2,-20(fp)
    5330:	10c00315 	stw	r3,12(r2)
    5334:	e0bff817 	ldw	r2,-32(fp)
    5338:	e0bffc15 	stw	r2,-16(fp)
    533c:	e0bffc17 	ldw	r2,-16(fp)
    5340:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5344:	0005883a 	mov	r2,zero
}
    5348:	e037883a 	mov	sp,fp
    534c:	dfc00117 	ldw	ra,4(sp)
    5350:	df000017 	ldw	fp,0(sp)
    5354:	dec00204 	addi	sp,sp,8
    5358:	f800283a 	ret

0000535c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
    535c:	defff604 	addi	sp,sp,-40
    5360:	dfc00915 	stw	ra,36(sp)
    5364:	df000815 	stw	fp,32(sp)
    5368:	df000804 	addi	fp,sp,32
    536c:	e13ffe15 	stw	r4,-8(fp)
    5370:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5374:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5378:	e0bffe17 	ldw	r2,-8(fp)
    537c:	1000021e 	bne	r2,zero,5388 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
    5380:	00800104 	movi	r2,4
    5384:	00004c06 	br	54b8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5388:	e0bffe17 	ldw	r2,-8(fp)
    538c:	10800003 	ldbu	r2,0(r2)
    5390:	10803fcc 	andi	r2,r2,255
    5394:	108000a0 	cmpeqi	r2,r2,2
    5398:	1000021e 	bne	r2,zero,53a4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
    539c:	00800044 	movi	r2,1
    53a0:	00004506 	br	54b8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    53a4:	0005303a 	rdctl	r2,status
    53a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    53ac:	e0fffd17 	ldw	r3,-12(fp)
    53b0:	00bfff84 	movi	r2,-2
    53b4:	1884703a 	and	r2,r3,r2
    53b8:	1001703a 	wrctl	status,r2
  
  return context;
    53bc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    53c0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
    53c4:	e0bffe17 	ldw	r2,-8(fp)
    53c8:	10800283 	ldbu	r2,10(r2)
    53cc:	10803fcc 	andi	r2,r2,255
    53d0:	10000c26 	beq	r2,zero,5404 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    53d4:	000f883a 	mov	r7,zero
    53d8:	01800104 	movi	r6,4
    53dc:	e17fff17 	ldw	r5,-4(fp)
    53e0:	e13ffe17 	ldw	r4,-8(fp)
    53e4:	00016b40 	call	16b4 <OS_EventTaskRdy>
    53e8:	e0bff817 	ldw	r2,-32(fp)
    53ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    53f0:	e0bff917 	ldw	r2,-28(fp)
    53f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
    53f8:	00021000 	call	2100 <OS_Sched>
        return (OS_ERR_NONE);
    53fc:	0005883a 	mov	r2,zero
    5400:	00002d06 	br	54b8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    5404:	e0bffe17 	ldw	r2,-8(fp)
    5408:	10800117 	ldw	r2,4(r2)
    540c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    5410:	e0bffb17 	ldw	r2,-20(fp)
    5414:	10c0058b 	ldhu	r3,22(r2)
    5418:	e0bffb17 	ldw	r2,-20(fp)
    541c:	1080050b 	ldhu	r2,20(r2)
    5420:	18ffffcc 	andi	r3,r3,65535
    5424:	10bfffcc 	andi	r2,r2,65535
    5428:	18800636 	bltu	r3,r2,5444 <OSQPostFront+0xe8>
    542c:	e0bff817 	ldw	r2,-32(fp)
    5430:	e0bffa15 	stw	r2,-24(fp)
    5434:	e0bffa17 	ldw	r2,-24(fp)
    5438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    543c:	00800784 	movi	r2,30
    5440:	00001d06 	br	54b8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
    5444:	e0bffb17 	ldw	r2,-20(fp)
    5448:	10c00417 	ldw	r3,16(r2)
    544c:	e0bffb17 	ldw	r2,-20(fp)
    5450:	10800117 	ldw	r2,4(r2)
    5454:	1880041e 	bne	r3,r2,5468 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
    5458:	e0bffb17 	ldw	r2,-20(fp)
    545c:	10c00217 	ldw	r3,8(r2)
    5460:	e0bffb17 	ldw	r2,-20(fp)
    5464:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
    5468:	e0bffb17 	ldw	r2,-20(fp)
    546c:	10800417 	ldw	r2,16(r2)
    5470:	10ffff04 	addi	r3,r2,-4
    5474:	e0bffb17 	ldw	r2,-20(fp)
    5478:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
    547c:	e0bffb17 	ldw	r2,-20(fp)
    5480:	10800417 	ldw	r2,16(r2)
    5484:	e0ffff17 	ldw	r3,-4(fp)
    5488:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    548c:	e0bffb17 	ldw	r2,-20(fp)
    5490:	1080058b 	ldhu	r2,22(r2)
    5494:	10800044 	addi	r2,r2,1
    5498:	1007883a 	mov	r3,r2
    549c:	e0bffb17 	ldw	r2,-20(fp)
    54a0:	10c0058d 	sth	r3,22(r2)
    54a4:	e0bff817 	ldw	r2,-32(fp)
    54a8:	e0bffc15 	stw	r2,-16(fp)
    54ac:	e0bffc17 	ldw	r2,-16(fp)
    54b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    54b4:	0005883a 	mov	r2,zero
}
    54b8:	e037883a 	mov	sp,fp
    54bc:	dfc00117 	ldw	ra,4(sp)
    54c0:	df000017 	ldw	fp,0(sp)
    54c4:	dec00204 	addi	sp,sp,8
    54c8:	f800283a 	ret

000054cc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
    54cc:	defff504 	addi	sp,sp,-44
    54d0:	dfc00a15 	stw	ra,40(sp)
    54d4:	df000915 	stw	fp,36(sp)
    54d8:	df000904 	addi	fp,sp,36
    54dc:	e13ffd15 	stw	r4,-12(fp)
    54e0:	e17ffe15 	stw	r5,-8(fp)
    54e4:	3005883a 	mov	r2,r6
    54e8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    54ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    54f0:	e0bffd17 	ldw	r2,-12(fp)
    54f4:	1000021e 	bne	r2,zero,5500 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
    54f8:	00800104 	movi	r2,4
    54fc:	00007106 	br	56c4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    5500:	e0bffd17 	ldw	r2,-12(fp)
    5504:	10800003 	ldbu	r2,0(r2)
    5508:	10803fcc 	andi	r2,r2,255
    550c:	108000a0 	cmpeqi	r2,r2,2
    5510:	1000021e 	bne	r2,zero,551c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
    5514:	00800044 	movi	r2,1
    5518:	00006a06 	br	56c4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    551c:	0005303a 	rdctl	r2,status
    5520:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5524:	e0fffc17 	ldw	r3,-16(fp)
    5528:	00bfff84 	movi	r2,-2
    552c:	1884703a 	and	r2,r3,r2
    5530:	1001703a 	wrctl	status,r2
  
  return context;
    5534:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5538:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
    553c:	e0bffd17 	ldw	r2,-12(fp)
    5540:	10800283 	ldbu	r2,10(r2)
    5544:	10803fcc 	andi	r2,r2,255
    5548:	10001d26 	beq	r2,zero,55c0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
    554c:	e0bfff03 	ldbu	r2,-4(fp)
    5550:	1080004c 	andi	r2,r2,1
    5554:	10000b26 	beq	r2,zero,5584 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5558:	00000506 	br	5570 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    555c:	000f883a 	mov	r7,zero
    5560:	01800104 	movi	r6,4
    5564:	e17ffe17 	ldw	r5,-8(fp)
    5568:	e13ffd17 	ldw	r4,-12(fp)
    556c:	00016b40 	call	16b4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
    5570:	e0bffd17 	ldw	r2,-12(fp)
    5574:	10800283 	ldbu	r2,10(r2)
    5578:	10803fcc 	andi	r2,r2,255
    557c:	103ff71e 	bne	r2,zero,555c <__alt_data_end+0xfffecebc>
    5580:	00000506 	br	5598 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
    5584:	000f883a 	mov	r7,zero
    5588:	01800104 	movi	r6,4
    558c:	e17ffe17 	ldw	r5,-8(fp)
    5590:	e13ffd17 	ldw	r4,-12(fp)
    5594:	00016b40 	call	16b4 <OS_EventTaskRdy>
    5598:	e0bff717 	ldw	r2,-36(fp)
    559c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    55a0:	e0bff817 	ldw	r2,-32(fp)
    55a4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
    55a8:	e0bfff03 	ldbu	r2,-4(fp)
    55ac:	1080010c 	andi	r2,r2,4
    55b0:	1000011e 	bne	r2,zero,55b8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
    55b4:	00021000 	call	2100 <OS_Sched>
        }
        return (OS_ERR_NONE);
    55b8:	0005883a 	mov	r2,zero
    55bc:	00004106 	br	56c4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
    55c0:	e0bffd17 	ldw	r2,-12(fp)
    55c4:	10800117 	ldw	r2,4(r2)
    55c8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
    55cc:	e0bffa17 	ldw	r2,-24(fp)
    55d0:	10c0058b 	ldhu	r3,22(r2)
    55d4:	e0bffa17 	ldw	r2,-24(fp)
    55d8:	1080050b 	ldhu	r2,20(r2)
    55dc:	18ffffcc 	andi	r3,r3,65535
    55e0:	10bfffcc 	andi	r2,r2,65535
    55e4:	18800636 	bltu	r3,r2,5600 <OSQPostOpt+0x134>
    55e8:	e0bff717 	ldw	r2,-36(fp)
    55ec:	e0bff915 	stw	r2,-28(fp)
    55f0:	e0bff917 	ldw	r2,-28(fp)
    55f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
    55f8:	00800784 	movi	r2,30
    55fc:	00003106 	br	56c4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
    5600:	e0bfff03 	ldbu	r2,-4(fp)
    5604:	1080008c 	andi	r2,r2,2
    5608:	10001326 	beq	r2,zero,5658 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
    560c:	e0bffa17 	ldw	r2,-24(fp)
    5610:	10c00417 	ldw	r3,16(r2)
    5614:	e0bffa17 	ldw	r2,-24(fp)
    5618:	10800117 	ldw	r2,4(r2)
    561c:	1880041e 	bne	r3,r2,5630 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
    5620:	e0bffa17 	ldw	r2,-24(fp)
    5624:	10c00217 	ldw	r3,8(r2)
    5628:	e0bffa17 	ldw	r2,-24(fp)
    562c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
    5630:	e0bffa17 	ldw	r2,-24(fp)
    5634:	10800417 	ldw	r2,16(r2)
    5638:	10ffff04 	addi	r3,r2,-4
    563c:	e0bffa17 	ldw	r2,-24(fp)
    5640:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
    5644:	e0bffa17 	ldw	r2,-24(fp)
    5648:	10800417 	ldw	r2,16(r2)
    564c:	e0fffe17 	ldw	r3,-8(fp)
    5650:	10c00015 	stw	r3,0(r2)
    5654:	00001006 	br	5698 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
    5658:	e0bffa17 	ldw	r2,-24(fp)
    565c:	10800317 	ldw	r2,12(r2)
    5660:	11000104 	addi	r4,r2,4
    5664:	e0fffa17 	ldw	r3,-24(fp)
    5668:	19000315 	stw	r4,12(r3)
    566c:	e0fffe17 	ldw	r3,-8(fp)
    5670:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
    5674:	e0bffa17 	ldw	r2,-24(fp)
    5678:	10c00317 	ldw	r3,12(r2)
    567c:	e0bffa17 	ldw	r2,-24(fp)
    5680:	10800217 	ldw	r2,8(r2)
    5684:	1880041e 	bne	r3,r2,5698 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
    5688:	e0bffa17 	ldw	r2,-24(fp)
    568c:	10c00117 	ldw	r3,4(r2)
    5690:	e0bffa17 	ldw	r2,-24(fp)
    5694:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
    5698:	e0bffa17 	ldw	r2,-24(fp)
    569c:	1080058b 	ldhu	r2,22(r2)
    56a0:	10800044 	addi	r2,r2,1
    56a4:	1007883a 	mov	r3,r2
    56a8:	e0bffa17 	ldw	r2,-24(fp)
    56ac:	10c0058d 	sth	r3,22(r2)
    56b0:	e0bff717 	ldw	r2,-36(fp)
    56b4:	e0bffb15 	stw	r2,-20(fp)
    56b8:	e0bffb17 	ldw	r2,-20(fp)
    56bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    56c0:	0005883a 	mov	r2,zero
}
    56c4:	e037883a 	mov	sp,fp
    56c8:	dfc00117 	ldw	ra,4(sp)
    56cc:	df000017 	ldw	fp,0(sp)
    56d0:	dec00204 	addi	sp,sp,8
    56d4:	f800283a 	ret

000056d8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
    56d8:	defff604 	addi	sp,sp,-40
    56dc:	df000915 	stw	fp,36(sp)
    56e0:	df000904 	addi	fp,sp,36
    56e4:	e13ffe15 	stw	r4,-8(fp)
    56e8:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    56ec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    56f0:	e0bffe17 	ldw	r2,-8(fp)
    56f4:	1000021e 	bne	r2,zero,5700 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    56f8:	00800104 	movi	r2,4
    56fc:	00004906 	br	5824 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    5700:	e0bfff17 	ldw	r2,-4(fp)
    5704:	1000021e 	bne	r2,zero,5710 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    5708:	00800244 	movi	r2,9
    570c:	00004506 	br	5824 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
    5710:	e0bffe17 	ldw	r2,-8(fp)
    5714:	10800003 	ldbu	r2,0(r2)
    5718:	10803fcc 	andi	r2,r2,255
    571c:	108000a0 	cmpeqi	r2,r2,2
    5720:	1000021e 	bne	r2,zero,572c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    5724:	00800044 	movi	r2,1
    5728:	00003e06 	br	5824 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    572c:	0005303a 	rdctl	r2,status
    5730:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5734:	e0fffd17 	ldw	r3,-12(fp)
    5738:	00bfff84 	movi	r2,-2
    573c:	1884703a 	and	r2,r3,r2
    5740:	1001703a 	wrctl	status,r2
  
  return context;
    5744:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    5748:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    574c:	e0bffe17 	ldw	r2,-8(fp)
    5750:	10c00283 	ldbu	r3,10(r2)
    5754:	e0bfff17 	ldw	r2,-4(fp)
    5758:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
    575c:	e0bffe17 	ldw	r2,-8(fp)
    5760:	108002c4 	addi	r2,r2,11
    5764:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
    5768:	e0bfff17 	ldw	r2,-4(fp)
    576c:	10800204 	addi	r2,r2,8
    5770:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5774:	e03ff705 	stb	zero,-36(fp)
    5778:	00000b06 	br	57a8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
    577c:	e0bff917 	ldw	r2,-28(fp)
    5780:	10c00044 	addi	r3,r2,1
    5784:	e0fff915 	stw	r3,-28(fp)
    5788:	e0fff817 	ldw	r3,-32(fp)
    578c:	19000044 	addi	r4,r3,1
    5790:	e13ff815 	stw	r4,-32(fp)
    5794:	18c00003 	ldbu	r3,0(r3)
    5798:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    579c:	e0bff703 	ldbu	r2,-36(fp)
    57a0:	10800044 	addi	r2,r2,1
    57a4:	e0bff705 	stb	r2,-36(fp)
    57a8:	e0bff703 	ldbu	r2,-36(fp)
    57ac:	108000f0 	cmpltui	r2,r2,3
    57b0:	103ff21e 	bne	r2,zero,577c <__alt_data_end+0xfffed0dc>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
    57b4:	e0bffe17 	ldw	r2,-8(fp)
    57b8:	10800117 	ldw	r2,4(r2)
    57bc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
    57c0:	e0bffc17 	ldw	r2,-16(fp)
    57c4:	1080058b 	ldhu	r2,22(r2)
    57c8:	10bfffcc 	andi	r2,r2,65535
    57cc:	10000626 	beq	r2,zero,57e8 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
    57d0:	e0bffc17 	ldw	r2,-16(fp)
    57d4:	10800417 	ldw	r2,16(r2)
    57d8:	10c00017 	ldw	r3,0(r2)
    57dc:	e0bfff17 	ldw	r2,-4(fp)
    57e0:	10c00015 	stw	r3,0(r2)
    57e4:	00000206 	br	57f0 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
    57e8:	e0bfff17 	ldw	r2,-4(fp)
    57ec:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
    57f0:	e0bffc17 	ldw	r2,-16(fp)
    57f4:	10c0058b 	ldhu	r3,22(r2)
    57f8:	e0bfff17 	ldw	r2,-4(fp)
    57fc:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
    5800:	e0bffc17 	ldw	r2,-16(fp)
    5804:	10c0050b 	ldhu	r3,20(r2)
    5808:	e0bfff17 	ldw	r2,-4(fp)
    580c:	10c0018d 	sth	r3,6(r2)
    5810:	e0bffa17 	ldw	r2,-24(fp)
    5814:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5818:	e0bffb17 	ldw	r2,-20(fp)
    581c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    5820:	0005883a 	mov	r2,zero
}
    5824:	e037883a 	mov	sp,fp
    5828:	df000017 	ldw	fp,0(sp)
    582c:	dec00104 	addi	sp,sp,4
    5830:	f800283a 	ret

00005834 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
    5834:	defffb04 	addi	sp,sp,-20
    5838:	dfc00415 	stw	ra,16(sp)
    583c:	df000315 	stw	fp,12(sp)
    5840:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    5844:	01407804 	movi	r5,480
    5848:	01000074 	movhi	r4,1
    584c:	210c9a04 	addi	r4,r4,12904
    5850:	00020440 	call	2044 <OS_MemClr>
    pq1 = &OSQTbl[0];
    5854:	00800074 	movhi	r2,1
    5858:	108c9a04 	addi	r2,r2,12904
    585c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
    5860:	00800074 	movhi	r2,1
    5864:	108ca004 	addi	r2,r2,12928
    5868:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    586c:	e03ffd0d 	sth	zero,-12(fp)
    5870:	00000c06 	br	58a4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
    5874:	e0bffe17 	ldw	r2,-8(fp)
    5878:	e0ffff17 	ldw	r3,-4(fp)
    587c:	10c00015 	stw	r3,0(r2)
        pq1++;
    5880:	e0bffe17 	ldw	r2,-8(fp)
    5884:	10800604 	addi	r2,r2,24
    5888:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
    588c:	e0bfff17 	ldw	r2,-4(fp)
    5890:	10800604 	addi	r2,r2,24
    5894:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
    5898:	e0bffd0b 	ldhu	r2,-12(fp)
    589c:	10800044 	addi	r2,r2,1
    58a0:	e0bffd0d 	sth	r2,-12(fp)
    58a4:	e0bffd0b 	ldhu	r2,-12(fp)
    58a8:	108004f0 	cmpltui	r2,r2,19
    58ac:	103ff11e 	bne	r2,zero,5874 <__alt_data_end+0xfffed1d4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
    58b0:	e0bffe17 	ldw	r2,-8(fp)
    58b4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
    58b8:	00800074 	movhi	r2,1
    58bc:	108c9a04 	addi	r2,r2,12904
    58c0:	d0a5ff15 	stw	r2,-26628(gp)
#endif
}
    58c4:	0001883a 	nop
    58c8:	e037883a 	mov	sp,fp
    58cc:	dfc00117 	ldw	ra,4(sp)
    58d0:	df000017 	ldw	fp,0(sp)
    58d4:	dec00204 	addi	sp,sp,8
    58d8:	f800283a 	ret

000058dc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    58dc:	defffa04 	addi	sp,sp,-24
    58e0:	df000515 	stw	fp,20(sp)
    58e4:	df000504 	addi	fp,sp,20
    58e8:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    58ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    58f0:	e0bfff17 	ldw	r2,-4(fp)
    58f4:	1000021e 	bne	r2,zero,5900 <OSSemAccept+0x24>
        return (0);
    58f8:	0005883a 	mov	r2,zero
    58fc:	00001f06 	br	597c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5900:	e0bfff17 	ldw	r2,-4(fp)
    5904:	10800003 	ldbu	r2,0(r2)
    5908:	10803fcc 	andi	r2,r2,255
    590c:	108000e0 	cmpeqi	r2,r2,3
    5910:	1000021e 	bne	r2,zero,591c <OSSemAccept+0x40>
        return (0);
    5914:	0005883a 	mov	r2,zero
    5918:	00001806 	br	597c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    591c:	0005303a 	rdctl	r2,status
    5920:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5924:	e0fffe17 	ldw	r3,-8(fp)
    5928:	00bfff84 	movi	r2,-2
    592c:	1884703a 	and	r2,r3,r2
    5930:	1001703a 	wrctl	status,r2
  
  return context;
    5934:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    5938:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
    593c:	e0bfff17 	ldw	r2,-4(fp)
    5940:	1080020b 	ldhu	r2,8(r2)
    5944:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
    5948:	e0bffd0b 	ldhu	r2,-12(fp)
    594c:	10000626 	beq	r2,zero,5968 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    5950:	e0bfff17 	ldw	r2,-4(fp)
    5954:	1080020b 	ldhu	r2,8(r2)
    5958:	10bfffc4 	addi	r2,r2,-1
    595c:	1007883a 	mov	r3,r2
    5960:	e0bfff17 	ldw	r2,-4(fp)
    5964:	10c0020d 	sth	r3,8(r2)
    5968:	e0bffb17 	ldw	r2,-20(fp)
    596c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5970:	e0bffc17 	ldw	r2,-16(fp)
    5974:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
    5978:	e0bffd0b 	ldhu	r2,-12(fp)
}
    597c:	e037883a 	mov	sp,fp
    5980:	df000017 	ldw	fp,0(sp)
    5984:	dec00104 	addi	sp,sp,4
    5988:	f800283a 	ret

0000598c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    598c:	defff904 	addi	sp,sp,-28
    5990:	dfc00615 	stw	ra,24(sp)
    5994:	df000515 	stw	fp,20(sp)
    5998:	df000504 	addi	fp,sp,20
    599c:	2005883a 	mov	r2,r4
    59a0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    59a4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    59a8:	d0a60203 	ldbu	r2,-26616(gp)
    59ac:	10803fcc 	andi	r2,r2,255
    59b0:	10000226 	beq	r2,zero,59bc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    59b4:	0005883a 	mov	r2,zero
    59b8:	00002506 	br	5a50 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    59bc:	0005303a 	rdctl	r2,status
    59c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    59c4:	e0fffe17 	ldw	r3,-8(fp)
    59c8:	00bfff84 	movi	r2,-2
    59cc:	1884703a 	and	r2,r3,r2
    59d0:	1001703a 	wrctl	status,r2
  
  return context;
    59d4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    59d8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    59dc:	d0a60117 	ldw	r2,-26620(gp)
    59e0:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    59e4:	d0a60117 	ldw	r2,-26620(gp)
    59e8:	10000326 	beq	r2,zero,59f8 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    59ec:	d0a60117 	ldw	r2,-26620(gp)
    59f0:	10800117 	ldw	r2,4(r2)
    59f4:	d0a60115 	stw	r2,-26620(gp)
    59f8:	e0bffb17 	ldw	r2,-20(fp)
    59fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5a00:	e0bffc17 	ldw	r2,-16(fp)
    5a04:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    5a08:	e0bffd17 	ldw	r2,-12(fp)
    5a0c:	10000f26 	beq	r2,zero,5a4c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    5a10:	e0bffd17 	ldw	r2,-12(fp)
    5a14:	00c000c4 	movi	r3,3
    5a18:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    5a1c:	e0bffd17 	ldw	r2,-12(fp)
    5a20:	e0ffff0b 	ldhu	r3,-4(fp)
    5a24:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    5a28:	e0bffd17 	ldw	r2,-12(fp)
    5a2c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    5a30:	e0bffd17 	ldw	r2,-12(fp)
    5a34:	00c00fc4 	movi	r3,63
    5a38:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
    5a3c:	e0bffd17 	ldw	r2,-12(fp)
    5a40:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    5a44:	e13ffd17 	ldw	r4,-12(fp)
    5a48:	0001c640 	call	1c64 <OS_EventWaitListInit>
    }
    return (pevent);
    5a4c:	e0bffd17 	ldw	r2,-12(fp)
}
    5a50:	e037883a 	mov	sp,fp
    5a54:	dfc00117 	ldw	ra,4(sp)
    5a58:	df000017 	ldw	fp,0(sp)
    5a5c:	dec00204 	addi	sp,sp,8
    5a60:	f800283a 	ret

00005a64 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5a64:	defff304 	addi	sp,sp,-52
    5a68:	dfc00c15 	stw	ra,48(sp)
    5a6c:	df000b15 	stw	fp,44(sp)
    5a70:	df000b04 	addi	fp,sp,44
    5a74:	e13ffd15 	stw	r4,-12(fp)
    5a78:	2805883a 	mov	r2,r5
    5a7c:	e1bfff15 	stw	r6,-4(fp)
    5a80:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5a84:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
    5a88:	e0bfff17 	ldw	r2,-4(fp)
    5a8c:	1000021e 	bne	r2,zero,5a98 <OSSemDel+0x34>
        return (pevent);
    5a90:	e0bffd17 	ldw	r2,-12(fp)
    5a94:	00007e06 	br	5c90 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    5a98:	e0bffd17 	ldw	r2,-12(fp)
    5a9c:	1000051e 	bne	r2,zero,5ab4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5aa0:	e0bfff17 	ldw	r2,-4(fp)
    5aa4:	00c00104 	movi	r3,4
    5aa8:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5aac:	e0bffd17 	ldw	r2,-12(fp)
    5ab0:	00007706 	br	5c90 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    5ab4:	e0bffd17 	ldw	r2,-12(fp)
    5ab8:	10800003 	ldbu	r2,0(r2)
    5abc:	10803fcc 	andi	r2,r2,255
    5ac0:	108000e0 	cmpeqi	r2,r2,3
    5ac4:	1000051e 	bne	r2,zero,5adc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    5ac8:	e0bfff17 	ldw	r2,-4(fp)
    5acc:	00c00044 	movi	r3,1
    5ad0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5ad4:	e0bffd17 	ldw	r2,-12(fp)
    5ad8:	00006d06 	br	5c90 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    5adc:	d0a60203 	ldbu	r2,-26616(gp)
    5ae0:	10803fcc 	andi	r2,r2,255
    5ae4:	10000526 	beq	r2,zero,5afc <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    5ae8:	e0bfff17 	ldw	r2,-4(fp)
    5aec:	00c003c4 	movi	r3,15
    5af0:	10c00005 	stb	r3,0(r2)
        return (pevent);
    5af4:	e0bffd17 	ldw	r2,-12(fp)
    5af8:	00006506 	br	5c90 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5afc:	0005303a 	rdctl	r2,status
    5b00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5b04:	e0fffc17 	ldw	r3,-16(fp)
    5b08:	00bfff84 	movi	r2,-2
    5b0c:	1884703a 	and	r2,r3,r2
    5b10:	1001703a 	wrctl	status,r2
  
  return context;
    5b14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5b18:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    5b1c:	e0bffd17 	ldw	r2,-12(fp)
    5b20:	10800283 	ldbu	r2,10(r2)
    5b24:	10803fcc 	andi	r2,r2,255
    5b28:	10000326 	beq	r2,zero,5b38 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    5b2c:	00800044 	movi	r2,1
    5b30:	e0bff505 	stb	r2,-44(fp)
    5b34:	00000106 	br	5b3c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    5b38:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
    5b3c:	e0bffe03 	ldbu	r2,-8(fp)
    5b40:	10000326 	beq	r2,zero,5b50 <OSSemDel+0xec>
    5b44:	10800060 	cmpeqi	r2,r2,1
    5b48:	1000281e 	bne	r2,zero,5bec <OSSemDel+0x188>
    5b4c:	00004506 	br	5c64 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    5b50:	e0bff503 	ldbu	r2,-44(fp)
    5b54:	1000161e 	bne	r2,zero,5bb0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    5b58:	e0bffd17 	ldw	r2,-12(fp)
    5b5c:	00c00fc4 	movi	r3,63
    5b60:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    5b64:	e0bffd17 	ldw	r2,-12(fp)
    5b68:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5b6c:	e0bffd17 	ldw	r2,-12(fp)
    5b70:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    5b74:	d0e60117 	ldw	r3,-26620(gp)
    5b78:	e0bffd17 	ldw	r2,-12(fp)
    5b7c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
    5b80:	e0bffd17 	ldw	r2,-12(fp)
    5b84:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    5b88:	e0bffd17 	ldw	r2,-12(fp)
    5b8c:	d0a60115 	stw	r2,-26620(gp)
    5b90:	e0bff717 	ldw	r2,-36(fp)
    5b94:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5b98:	e0bff817 	ldw	r2,-32(fp)
    5b9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
    5ba0:	e0bfff17 	ldw	r2,-4(fp)
    5ba4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    5ba8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    5bac:	00003706 	br	5c8c <OSSemDel+0x228>
    5bb0:	e0bff717 	ldw	r2,-36(fp)
    5bb4:	e0bff915 	stw	r2,-28(fp)
    5bb8:	e0bff917 	ldw	r2,-28(fp)
    5bbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
    5bc0:	e0bfff17 	ldw	r2,-4(fp)
    5bc4:	00c01244 	movi	r3,73
    5bc8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
    5bcc:	e0bffd17 	ldw	r2,-12(fp)
    5bd0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
    5bd4:	00002d06 	br	5c8c <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    5bd8:	000f883a 	mov	r7,zero
    5bdc:	01800044 	movi	r6,1
    5be0:	000b883a 	mov	r5,zero
    5be4:	e13ffd17 	ldw	r4,-12(fp)
    5be8:	00016b40 	call	16b4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    5bec:	e0bffd17 	ldw	r2,-12(fp)
    5bf0:	10800283 	ldbu	r2,10(r2)
    5bf4:	10803fcc 	andi	r2,r2,255
    5bf8:	103ff71e 	bne	r2,zero,5bd8 <__alt_data_end+0xfffed538>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    5bfc:	e0bffd17 	ldw	r2,-12(fp)
    5c00:	00c00fc4 	movi	r3,63
    5c04:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
    5c08:	e0bffd17 	ldw	r2,-12(fp)
    5c0c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    5c10:	e0bffd17 	ldw	r2,-12(fp)
    5c14:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    5c18:	d0e60117 	ldw	r3,-26620(gp)
    5c1c:	e0bffd17 	ldw	r2,-12(fp)
    5c20:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
    5c24:	e0bffd17 	ldw	r2,-12(fp)
    5c28:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    5c2c:	e0bffd17 	ldw	r2,-12(fp)
    5c30:	d0a60115 	stw	r2,-26620(gp)
    5c34:	e0bff717 	ldw	r2,-36(fp)
    5c38:	e0bffa15 	stw	r2,-24(fp)
    5c3c:	e0bffa17 	ldw	r2,-24(fp)
    5c40:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    5c44:	e0bff503 	ldbu	r2,-44(fp)
    5c48:	10800058 	cmpnei	r2,r2,1
    5c4c:	1000011e 	bne	r2,zero,5c54 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    5c50:	00021000 	call	2100 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    5c54:	e0bfff17 	ldw	r2,-4(fp)
    5c58:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    5c5c:	e03ff615 	stw	zero,-40(fp)
             break;
    5c60:	00000a06 	br	5c8c <OSSemDel+0x228>
    5c64:	e0bff717 	ldw	r2,-36(fp)
    5c68:	e0bffb15 	stw	r2,-20(fp)
    5c6c:	e0bffb17 	ldw	r2,-20(fp)
    5c70:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
    5c74:	e0bfff17 	ldw	r2,-4(fp)
    5c78:	00c001c4 	movi	r3,7
    5c7c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
    5c80:	e0bffd17 	ldw	r2,-12(fp)
    5c84:	e0bff615 	stw	r2,-40(fp)
             break;
    5c88:	0001883a 	nop
    }
    return (pevent_return);
    5c8c:	e0bff617 	ldw	r2,-40(fp)
}
    5c90:	e037883a 	mov	sp,fp
    5c94:	dfc00117 	ldw	ra,4(sp)
    5c98:	df000017 	ldw	fp,0(sp)
    5c9c:	dec00204 	addi	sp,sp,8
    5ca0:	f800283a 	ret

00005ca4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    5ca4:	defff504 	addi	sp,sp,-44
    5ca8:	dfc00a15 	stw	ra,40(sp)
    5cac:	df000915 	stw	fp,36(sp)
    5cb0:	df000904 	addi	fp,sp,36
    5cb4:	e13ffd15 	stw	r4,-12(fp)
    5cb8:	2805883a 	mov	r2,r5
    5cbc:	e1bfff15 	stw	r6,-4(fp)
    5cc0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5cc4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    5cc8:	e0bfff17 	ldw	r2,-4(fp)
    5ccc:	10007226 	beq	r2,zero,5e98 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5cd0:	e0bffd17 	ldw	r2,-12(fp)
    5cd4:	1000041e 	bne	r2,zero,5ce8 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
    5cd8:	e0bfff17 	ldw	r2,-4(fp)
    5cdc:	00c00104 	movi	r3,4
    5ce0:	10c00005 	stb	r3,0(r2)
        return;
    5ce4:	00006d06 	br	5e9c <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5ce8:	e0bffd17 	ldw	r2,-12(fp)
    5cec:	10800003 	ldbu	r2,0(r2)
    5cf0:	10803fcc 	andi	r2,r2,255
    5cf4:	108000e0 	cmpeqi	r2,r2,3
    5cf8:	1000041e 	bne	r2,zero,5d0c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
    5cfc:	e0bfff17 	ldw	r2,-4(fp)
    5d00:	00c00044 	movi	r3,1
    5d04:	10c00005 	stb	r3,0(r2)
        return;
    5d08:	00006406 	br	5e9c <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    5d0c:	d0a60203 	ldbu	r2,-26616(gp)
    5d10:	10803fcc 	andi	r2,r2,255
    5d14:	10000426 	beq	r2,zero,5d28 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    5d18:	e0bfff17 	ldw	r2,-4(fp)
    5d1c:	00c00084 	movi	r3,2
    5d20:	10c00005 	stb	r3,0(r2)
        return;
    5d24:	00005d06 	br	5e9c <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    5d28:	d0a5f403 	ldbu	r2,-26672(gp)
    5d2c:	10803fcc 	andi	r2,r2,255
    5d30:	10000426 	beq	r2,zero,5d44 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    5d34:	e0bfff17 	ldw	r2,-4(fp)
    5d38:	00c00344 	movi	r3,13
    5d3c:	10c00005 	stb	r3,0(r2)
        return;
    5d40:	00005606 	br	5e9c <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5d44:	0005303a 	rdctl	r2,status
    5d48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5d4c:	e0fffc17 	ldw	r3,-16(fp)
    5d50:	00bfff84 	movi	r2,-2
    5d54:	1884703a 	and	r2,r3,r2
    5d58:	1001703a 	wrctl	status,r2
  
  return context;
    5d5c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5d60:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    5d64:	e0bffd17 	ldw	r2,-12(fp)
    5d68:	1080020b 	ldhu	r2,8(r2)
    5d6c:	10bfffcc 	andi	r2,r2,65535
    5d70:	10000d26 	beq	r2,zero,5da8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    5d74:	e0bffd17 	ldw	r2,-12(fp)
    5d78:	1080020b 	ldhu	r2,8(r2)
    5d7c:	10bfffc4 	addi	r2,r2,-1
    5d80:	1007883a 	mov	r3,r2
    5d84:	e0bffd17 	ldw	r2,-12(fp)
    5d88:	10c0020d 	sth	r3,8(r2)
    5d8c:	e0bff717 	ldw	r2,-36(fp)
    5d90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5d94:	e0bff817 	ldw	r2,-32(fp)
    5d98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
    5d9c:	e0bfff17 	ldw	r2,-4(fp)
    5da0:	10000005 	stb	zero,0(r2)
        return;
    5da4:	00003d06 	br	5e9c <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    5da8:	d0a60317 	ldw	r2,-26612(gp)
    5dac:	d0e60317 	ldw	r3,-26612(gp)
    5db0:	18c00c03 	ldbu	r3,48(r3)
    5db4:	18c00054 	ori	r3,r3,1
    5db8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    5dbc:	d0a60317 	ldw	r2,-26612(gp)
    5dc0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    5dc4:	d0a60317 	ldw	r2,-26612(gp)
    5dc8:	e0fffe0b 	ldhu	r3,-8(fp)
    5dcc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    5dd0:	e13ffd17 	ldw	r4,-12(fp)
    5dd4:	000184c0 	call	184c <OS_EventTaskWait>
    5dd8:	e0bff717 	ldw	r2,-36(fp)
    5ddc:	e0bffb15 	stw	r2,-20(fp)
    5de0:	e0bffb17 	ldw	r2,-20(fp)
    5de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
    5de8:	00021000 	call	2100 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5dec:	0005303a 	rdctl	r2,status
    5df0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5df4:	e0fff917 	ldw	r3,-28(fp)
    5df8:	00bfff84 	movi	r2,-2
    5dfc:	1884703a 	and	r2,r3,r2
    5e00:	1001703a 	wrctl	status,r2
  
  return context;
    5e04:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
    5e08:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    5e0c:	d0a60317 	ldw	r2,-26612(gp)
    5e10:	10800c43 	ldbu	r2,49(r2)
    5e14:	10803fcc 	andi	r2,r2,255
    5e18:	10000326 	beq	r2,zero,5e28 <OSSemPend+0x184>
    5e1c:	108000a0 	cmpeqi	r2,r2,2
    5e20:	1000041e 	bne	r2,zero,5e34 <OSSemPend+0x190>
    5e24:	00000706 	br	5e44 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    5e28:	e0bfff17 	ldw	r2,-4(fp)
    5e2c:	10000005 	stb	zero,0(r2)
             break;
    5e30:	00000c06 	br	5e64 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5e34:	e0bfff17 	ldw	r2,-4(fp)
    5e38:	00c00384 	movi	r3,14
    5e3c:	10c00005 	stb	r3,0(r2)
             break;
    5e40:	00000806 	br	5e64 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    5e44:	d0a60317 	ldw	r2,-26612(gp)
    5e48:	e17ffd17 	ldw	r5,-12(fp)
    5e4c:	1009883a 	mov	r4,r2
    5e50:	0001aac0 	call	1aac <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    5e54:	e0bfff17 	ldw	r2,-4(fp)
    5e58:	00c00284 	movi	r3,10
    5e5c:	10c00005 	stb	r3,0(r2)
             break;
    5e60:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    5e64:	d0a60317 	ldw	r2,-26612(gp)
    5e68:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    5e6c:	d0a60317 	ldw	r2,-26612(gp)
    5e70:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    5e74:	d0a60317 	ldw	r2,-26612(gp)
    5e78:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
    5e7c:	d0a60317 	ldw	r2,-26612(gp)
    5e80:	10000815 	stw	zero,32(r2)
    5e84:	e0bff717 	ldw	r2,-36(fp)
    5e88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5e8c:	e0bffa17 	ldw	r2,-24(fp)
    5e90:	1001703a 	wrctl	status,r2
    5e94:	00000106 	br	5e9c <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    5e98:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
    5e9c:	e037883a 	mov	sp,fp
    5ea0:	dfc00117 	ldw	ra,4(sp)
    5ea4:	df000017 	ldw	fp,0(sp)
    5ea8:	dec00204 	addi	sp,sp,8
    5eac:	f800283a 	ret

00005eb0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    5eb0:	defff604 	addi	sp,sp,-40
    5eb4:	dfc00915 	stw	ra,36(sp)
    5eb8:	df000815 	stw	fp,32(sp)
    5ebc:	df000804 	addi	fp,sp,32
    5ec0:	e13ffd15 	stw	r4,-12(fp)
    5ec4:	2805883a 	mov	r2,r5
    5ec8:	e1bfff15 	stw	r6,-4(fp)
    5ecc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5ed0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    5ed4:	e0bfff17 	ldw	r2,-4(fp)
    5ed8:	1000021e 	bne	r2,zero,5ee4 <OSSemPendAbort+0x34>
        return (0);
    5edc:	0005883a 	mov	r2,zero
    5ee0:	00004906 	br	6008 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    5ee4:	e0bffd17 	ldw	r2,-12(fp)
    5ee8:	1000051e 	bne	r2,zero,5f00 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
    5eec:	e0bfff17 	ldw	r2,-4(fp)
    5ef0:	00c00104 	movi	r3,4
    5ef4:	10c00005 	stb	r3,0(r2)
        return (0);
    5ef8:	0005883a 	mov	r2,zero
    5efc:	00004206 	br	6008 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5f00:	e0bffd17 	ldw	r2,-12(fp)
    5f04:	10800003 	ldbu	r2,0(r2)
    5f08:	10803fcc 	andi	r2,r2,255
    5f0c:	108000e0 	cmpeqi	r2,r2,3
    5f10:	1000051e 	bne	r2,zero,5f28 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
    5f14:	e0bfff17 	ldw	r2,-4(fp)
    5f18:	00c00044 	movi	r3,1
    5f1c:	10c00005 	stb	r3,0(r2)
        return (0);
    5f20:	0005883a 	mov	r2,zero
    5f24:	00003806 	br	6008 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5f28:	0005303a 	rdctl	r2,status
    5f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5f30:	e0fffc17 	ldw	r3,-16(fp)
    5f34:	00bfff84 	movi	r2,-2
    5f38:	1884703a 	and	r2,r3,r2
    5f3c:	1001703a 	wrctl	status,r2
  
  return context;
    5f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    5f44:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    5f48:	e0bffd17 	ldw	r2,-12(fp)
    5f4c:	10800283 	ldbu	r2,10(r2)
    5f50:	10803fcc 	andi	r2,r2,255
    5f54:	10002526 	beq	r2,zero,5fec <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
    5f58:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
    5f5c:	e0bffe03 	ldbu	r2,-8(fp)
    5f60:	10800060 	cmpeqi	r2,r2,1
    5f64:	10000e26 	beq	r2,zero,5fa0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    5f68:	00000806 	br	5f8c <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    5f6c:	01c00084 	movi	r7,2
    5f70:	01800044 	movi	r6,1
    5f74:	000b883a 	mov	r5,zero
    5f78:	e13ffd17 	ldw	r4,-12(fp)
    5f7c:	00016b40 	call	16b4 <OS_EventTaskRdy>
                     nbr_tasks++;
    5f80:	e0bff803 	ldbu	r2,-32(fp)
    5f84:	10800044 	addi	r2,r2,1
    5f88:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    5f8c:	e0bffd17 	ldw	r2,-12(fp)
    5f90:	10800283 	ldbu	r2,10(r2)
    5f94:	10803fcc 	andi	r2,r2,255
    5f98:	103ff41e 	bne	r2,zero,5f6c <__alt_data_end+0xfffed8cc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    5f9c:	00000906 	br	5fc4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    5fa0:	01c00084 	movi	r7,2
    5fa4:	01800044 	movi	r6,1
    5fa8:	000b883a 	mov	r5,zero
    5fac:	e13ffd17 	ldw	r4,-12(fp)
    5fb0:	00016b40 	call	16b4 <OS_EventTaskRdy>
                 nbr_tasks++;
    5fb4:	e0bff803 	ldbu	r2,-32(fp)
    5fb8:	10800044 	addi	r2,r2,1
    5fbc:	e0bff805 	stb	r2,-32(fp)
                 break;
    5fc0:	0001883a 	nop
    5fc4:	e0bff917 	ldw	r2,-28(fp)
    5fc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5fcc:	e0bffa17 	ldw	r2,-24(fp)
    5fd0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    5fd4:	00021000 	call	2100 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    5fd8:	e0bfff17 	ldw	r2,-4(fp)
    5fdc:	00c00384 	movi	r3,14
    5fe0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
    5fe4:	e0bff803 	ldbu	r2,-32(fp)
    5fe8:	00000706 	br	6008 <OSSemPendAbort+0x158>
    5fec:	e0bff917 	ldw	r2,-28(fp)
    5ff0:	e0bffb15 	stw	r2,-20(fp)
    5ff4:	e0bffb17 	ldw	r2,-20(fp)
    5ff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    5ffc:	e0bfff17 	ldw	r2,-4(fp)
    6000:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
    6004:	0005883a 	mov	r2,zero
}
    6008:	e037883a 	mov	sp,fp
    600c:	dfc00117 	ldw	ra,4(sp)
    6010:	df000017 	ldw	fp,0(sp)
    6014:	dec00204 	addi	sp,sp,8
    6018:	f800283a 	ret

0000601c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    601c:	defff804 	addi	sp,sp,-32
    6020:	dfc00715 	stw	ra,28(sp)
    6024:	df000615 	stw	fp,24(sp)
    6028:	df000604 	addi	fp,sp,24
    602c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6030:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6034:	e0bfff17 	ldw	r2,-4(fp)
    6038:	1000021e 	bne	r2,zero,6044 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
    603c:	00800104 	movi	r2,4
    6040:	00003506 	br	6118 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    6044:	e0bfff17 	ldw	r2,-4(fp)
    6048:	10800003 	ldbu	r2,0(r2)
    604c:	10803fcc 	andi	r2,r2,255
    6050:	108000e0 	cmpeqi	r2,r2,3
    6054:	1000021e 	bne	r2,zero,6060 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
    6058:	00800044 	movi	r2,1
    605c:	00002e06 	br	6118 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6060:	0005303a 	rdctl	r2,status
    6064:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6068:	e0fffe17 	ldw	r3,-8(fp)
    606c:	00bfff84 	movi	r2,-2
    6070:	1884703a 	and	r2,r3,r2
    6074:	1001703a 	wrctl	status,r2
  
  return context;
    6078:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    607c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    6080:	e0bfff17 	ldw	r2,-4(fp)
    6084:	10800283 	ldbu	r2,10(r2)
    6088:	10803fcc 	andi	r2,r2,255
    608c:	10000c26 	beq	r2,zero,60c0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    6090:	000f883a 	mov	r7,zero
    6094:	01800044 	movi	r6,1
    6098:	000b883a 	mov	r5,zero
    609c:	e13fff17 	ldw	r4,-4(fp)
    60a0:	00016b40 	call	16b4 <OS_EventTaskRdy>
    60a4:	e0bffa17 	ldw	r2,-24(fp)
    60a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    60ac:	e0bffb17 	ldw	r2,-20(fp)
    60b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
    60b4:	00021000 	call	2100 <OS_Sched>
        return (OS_ERR_NONE);
    60b8:	0005883a 	mov	r2,zero
    60bc:	00001606 	br	6118 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    60c0:	e0bfff17 	ldw	r2,-4(fp)
    60c4:	1080020b 	ldhu	r2,8(r2)
    60c8:	10ffffcc 	andi	r3,r2,65535
    60cc:	00bfffd4 	movui	r2,65535
    60d0:	18800c26 	beq	r3,r2,6104 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    60d4:	e0bfff17 	ldw	r2,-4(fp)
    60d8:	1080020b 	ldhu	r2,8(r2)
    60dc:	10800044 	addi	r2,r2,1
    60e0:	1007883a 	mov	r3,r2
    60e4:	e0bfff17 	ldw	r2,-4(fp)
    60e8:	10c0020d 	sth	r3,8(r2)
    60ec:	e0bffa17 	ldw	r2,-24(fp)
    60f0:	e0bffc15 	stw	r2,-16(fp)
    60f4:	e0bffc17 	ldw	r2,-16(fp)
    60f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
    60fc:	0005883a 	mov	r2,zero
    6100:	00000506 	br	6118 <OSSemPost+0xfc>
    6104:	e0bffa17 	ldw	r2,-24(fp)
    6108:	e0bffd15 	stw	r2,-12(fp)
    610c:	e0bffd17 	ldw	r2,-12(fp)
    6110:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
    6114:	00800c84 	movi	r2,50
}
    6118:	e037883a 	mov	sp,fp
    611c:	dfc00117 	ldw	ra,4(sp)
    6120:	df000017 	ldw	fp,0(sp)
    6124:	dec00204 	addi	sp,sp,8
    6128:	f800283a 	ret

0000612c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    612c:	defff704 	addi	sp,sp,-36
    6130:	df000815 	stw	fp,32(sp)
    6134:	df000804 	addi	fp,sp,32
    6138:	e13ffe15 	stw	r4,-8(fp)
    613c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    6140:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    6144:	e0bffe17 	ldw	r2,-8(fp)
    6148:	1000021e 	bne	r2,zero,6154 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
    614c:	00800104 	movi	r2,4
    6150:	00003606 	br	622c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
    6154:	e0bfff17 	ldw	r2,-4(fp)
    6158:	1000021e 	bne	r2,zero,6164 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
    615c:	00800244 	movi	r2,9
    6160:	00003206 	br	622c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    6164:	e0bffe17 	ldw	r2,-8(fp)
    6168:	10800003 	ldbu	r2,0(r2)
    616c:	10803fcc 	andi	r2,r2,255
    6170:	108000e0 	cmpeqi	r2,r2,3
    6174:	1000021e 	bne	r2,zero,6180 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
    6178:	00800044 	movi	r2,1
    617c:	00002b06 	br	622c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6180:	0005303a 	rdctl	r2,status
    6184:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6188:	e0fffd17 	ldw	r3,-12(fp)
    618c:	00bfff84 	movi	r2,-2
    6190:	1884703a 	and	r2,r3,r2
    6194:	1001703a 	wrctl	status,r2
  
  return context;
    6198:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
    619c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    61a0:	e0bffe17 	ldw	r2,-8(fp)
    61a4:	10c00283 	ldbu	r3,10(r2)
    61a8:	e0bfff17 	ldw	r2,-4(fp)
    61ac:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
    61b0:	e0bffe17 	ldw	r2,-8(fp)
    61b4:	108002c4 	addi	r2,r2,11
    61b8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
    61bc:	e0bfff17 	ldw	r2,-4(fp)
    61c0:	10800084 	addi	r2,r2,2
    61c4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    61c8:	e03ffa05 	stb	zero,-24(fp)
    61cc:	00000b06 	br	61fc <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
    61d0:	e0bff917 	ldw	r2,-28(fp)
    61d4:	10c00044 	addi	r3,r2,1
    61d8:	e0fff915 	stw	r3,-28(fp)
    61dc:	e0fff817 	ldw	r3,-32(fp)
    61e0:	19000044 	addi	r4,r3,1
    61e4:	e13ff815 	stw	r4,-32(fp)
    61e8:	18c00003 	ldbu	r3,0(r3)
    61ec:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    61f0:	e0bffa03 	ldbu	r2,-24(fp)
    61f4:	10800044 	addi	r2,r2,1
    61f8:	e0bffa05 	stb	r2,-24(fp)
    61fc:	e0bffa03 	ldbu	r2,-24(fp)
    6200:	108000f0 	cmpltui	r2,r2,3
    6204:	103ff21e 	bne	r2,zero,61d0 <__alt_data_end+0xfffedb30>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    6208:	e0bffe17 	ldw	r2,-8(fp)
    620c:	10c0020b 	ldhu	r3,8(r2)
    6210:	e0bfff17 	ldw	r2,-4(fp)
    6214:	10c0000d 	sth	r3,0(r2)
    6218:	e0bffb17 	ldw	r2,-20(fp)
    621c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6220:	e0bffc17 	ldw	r2,-16(fp)
    6224:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    6228:	0005883a 	mov	r2,zero
}
    622c:	e037883a 	mov	sp,fp
    6230:	df000017 	ldw	fp,0(sp)
    6234:	dec00104 	addi	sp,sp,4
    6238:	f800283a 	ret

0000623c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    623c:	defff904 	addi	sp,sp,-28
    6240:	df000615 	stw	fp,24(sp)
    6244:	df000604 	addi	fp,sp,24
    6248:	e13ffd15 	stw	r4,-12(fp)
    624c:	2805883a 	mov	r2,r5
    6250:	e1bfff15 	stw	r6,-4(fp)
    6254:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    6258:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
    625c:	e0bfff17 	ldw	r2,-4(fp)
    6260:	10003126 	beq	r2,zero,6328 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    6264:	e0bffd17 	ldw	r2,-12(fp)
    6268:	1000041e 	bne	r2,zero,627c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
    626c:	e0bfff17 	ldw	r2,-4(fp)
    6270:	00c00104 	movi	r3,4
    6274:	10c00005 	stb	r3,0(r2)
        return;
    6278:	00002c06 	br	632c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    627c:	e0bffd17 	ldw	r2,-12(fp)
    6280:	10800003 	ldbu	r2,0(r2)
    6284:	10803fcc 	andi	r2,r2,255
    6288:	108000e0 	cmpeqi	r2,r2,3
    628c:	1000041e 	bne	r2,zero,62a0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
    6290:	e0bfff17 	ldw	r2,-4(fp)
    6294:	00c00044 	movi	r3,1
    6298:	10c00005 	stb	r3,0(r2)
        return;
    629c:	00002306 	br	632c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    62a0:	0005303a 	rdctl	r2,status
    62a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    62a8:	e0fffc17 	ldw	r3,-16(fp)
    62ac:	00bfff84 	movi	r2,-2
    62b0:	1884703a 	and	r2,r3,r2
    62b4:	1001703a 	wrctl	status,r2
  
  return context;
    62b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    62bc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
    62c0:	e0bfff17 	ldw	r2,-4(fp)
    62c4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    62c8:	e0bffd17 	ldw	r2,-12(fp)
    62cc:	1080020b 	ldhu	r2,8(r2)
    62d0:	10bfffcc 	andi	r2,r2,65535
    62d4:	10000426 	beq	r2,zero,62e8 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    62d8:	e0bffd17 	ldw	r2,-12(fp)
    62dc:	e0fffe0b 	ldhu	r3,-8(fp)
    62e0:	10c0020d 	sth	r3,8(r2)
    62e4:	00000b06 	br	6314 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    62e8:	e0bffd17 	ldw	r2,-12(fp)
    62ec:	10800283 	ldbu	r2,10(r2)
    62f0:	10803fcc 	andi	r2,r2,255
    62f4:	1000041e 	bne	r2,zero,6308 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    62f8:	e0bffd17 	ldw	r2,-12(fp)
    62fc:	e0fffe0b 	ldhu	r3,-8(fp)
    6300:	10c0020d 	sth	r3,8(r2)
    6304:	00000306 	br	6314 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    6308:	e0bfff17 	ldw	r2,-4(fp)
    630c:	00c01244 	movi	r3,73
    6310:	10c00005 	stb	r3,0(r2)
    6314:	e0bffa17 	ldw	r2,-24(fp)
    6318:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    631c:	e0bffb17 	ldw	r2,-20(fp)
    6320:	1001703a 	wrctl	status,r2
    6324:	00000106 	br	632c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
    6328:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
    632c:	e037883a 	mov	sp,fp
    6330:	df000017 	ldw	fp,0(sp)
    6334:	dec00104 	addi	sp,sp,4
    6338:	f800283a 	ret

0000633c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
    633c:	defff104 	addi	sp,sp,-60
    6340:	dfc00e15 	stw	ra,56(sp)
    6344:	df000d15 	stw	fp,52(sp)
    6348:	df000d04 	addi	fp,sp,52
    634c:	2007883a 	mov	r3,r4
    6350:	2805883a 	mov	r2,r5
    6354:	e0fffe05 	stb	r3,-8(fp)
    6358:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
    635c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
    6360:	e0bffe03 	ldbu	r2,-8(fp)
    6364:	10800530 	cmpltui	r2,r2,20
    6368:	1000051e 	bne	r2,zero,6380 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
    636c:	e0bffe03 	ldbu	r2,-8(fp)
    6370:	10803fe0 	cmpeqi	r2,r2,255
    6374:	1000021e 	bne	r2,zero,6380 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
    6378:	00800a84 	movi	r2,42
    637c:	00012606 	br	6818 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
    6380:	e0bfff03 	ldbu	r2,-4(fp)
    6384:	10800530 	cmpltui	r2,r2,20
    6388:	1000021e 	bne	r2,zero,6394 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
    638c:	00800a84 	movi	r2,42
    6390:	00012106 	br	6818 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6394:	0005303a 	rdctl	r2,status
    6398:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    639c:	e0fffd17 	ldw	r3,-12(fp)
    63a0:	00bfff84 	movi	r2,-2
    63a4:	1884703a 	and	r2,r3,r2
    63a8:	1001703a 	wrctl	status,r2
  
  return context;
    63ac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    63b0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
    63b4:	e0ffff03 	ldbu	r3,-4(fp)
    63b8:	00800074 	movhi	r2,1
    63bc:	10932604 	addi	r2,r2,19608
    63c0:	18c7883a 	add	r3,r3,r3
    63c4:	18c7883a 	add	r3,r3,r3
    63c8:	10c5883a 	add	r2,r2,r3
    63cc:	10800017 	ldw	r2,0(r2)
    63d0:	10000626 	beq	r2,zero,63ec <OSTaskChangePrio+0xb0>
    63d4:	e0bff517 	ldw	r2,-44(fp)
    63d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    63dc:	e0bff617 	ldw	r2,-40(fp)
    63e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
    63e4:	00800a04 	movi	r2,40
    63e8:	00010b06 	br	6818 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
    63ec:	e0bffe03 	ldbu	r2,-8(fp)
    63f0:	10803fd8 	cmpnei	r2,r2,255
    63f4:	1000031e 	bne	r2,zero,6404 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
    63f8:	d0a60317 	ldw	r2,-26612(gp)
    63fc:	10800c83 	ldbu	r2,50(r2)
    6400:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
    6404:	e0fffe03 	ldbu	r3,-8(fp)
    6408:	00800074 	movhi	r2,1
    640c:	10932604 	addi	r2,r2,19608
    6410:	18c7883a 	add	r3,r3,r3
    6414:	18c7883a 	add	r3,r3,r3
    6418:	10c5883a 	add	r2,r2,r3
    641c:	10800017 	ldw	r2,0(r2)
    6420:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
    6424:	e0bff817 	ldw	r2,-32(fp)
    6428:	1000061e 	bne	r2,zero,6444 <OSTaskChangePrio+0x108>
    642c:	e0bff517 	ldw	r2,-44(fp)
    6430:	e0bff715 	stw	r2,-36(fp)
    6434:	e0bff717 	ldw	r2,-36(fp)
    6438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
    643c:	00800a44 	movi	r2,41
    6440:	0000f506 	br	6818 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
    6444:	e0bff817 	ldw	r2,-32(fp)
    6448:	10800058 	cmpnei	r2,r2,1
    644c:	1000061e 	bne	r2,zero,6468 <OSTaskChangePrio+0x12c>
    6450:	e0bff517 	ldw	r2,-44(fp)
    6454:	e0bff915 	stw	r2,-28(fp)
    6458:	e0bff917 	ldw	r2,-28(fp)
    645c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
    6460:	008010c4 	movi	r2,67
    6464:	0000ec06 	br	6818 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
    6468:	e0bfff03 	ldbu	r2,-4(fp)
    646c:	1004d0fa 	srli	r2,r2,3
    6470:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
    6474:	e0bfff03 	ldbu	r2,-4(fp)
    6478:	108001cc 	andi	r2,r2,7
    647c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
    6480:	e0bffb03 	ldbu	r2,-20(fp)
    6484:	00c00044 	movi	r3,1
    6488:	1884983a 	sll	r2,r3,r2
    648c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
    6490:	e0bffb43 	ldbu	r2,-19(fp)
    6494:	00c00044 	movi	r3,1
    6498:	1884983a 	sll	r2,r3,r2
    649c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
    64a0:	e0fffe03 	ldbu	r3,-8(fp)
    64a4:	00800074 	movhi	r2,1
    64a8:	10932604 	addi	r2,r2,19608
    64ac:	18c7883a 	add	r3,r3,r3
    64b0:	18c7883a 	add	r3,r3,r3
    64b4:	10c5883a 	add	r2,r2,r3
    64b8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
    64bc:	e0ffff03 	ldbu	r3,-4(fp)
    64c0:	00800074 	movhi	r2,1
    64c4:	10932604 	addi	r2,r2,19608
    64c8:	18c7883a 	add	r3,r3,r3
    64cc:	18c7883a 	add	r3,r3,r3
    64d0:	10c5883a 	add	r2,r2,r3
    64d4:	e0fff817 	ldw	r3,-32(fp)
    64d8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
    64dc:	e0bff817 	ldw	r2,-32(fp)
    64e0:	10800d03 	ldbu	r2,52(r2)
    64e4:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
    64e8:	e0bff817 	ldw	r2,-32(fp)
    64ec:	10800d83 	ldbu	r2,54(r2)
    64f0:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
    64f4:	e0bff817 	ldw	r2,-32(fp)
    64f8:	10800d43 	ldbu	r2,53(r2)
    64fc:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
    6500:	e0fffc03 	ldbu	r3,-16(fp)
    6504:	d0a60044 	addi	r2,gp,-26623
    6508:	1885883a 	add	r2,r3,r2
    650c:	10c00003 	ldbu	r3,0(r2)
    6510:	e0bffc83 	ldbu	r2,-14(fp)
    6514:	1884703a 	and	r2,r3,r2
    6518:	10803fcc 	andi	r2,r2,255
    651c:	10002826 	beq	r2,zero,65c0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
    6520:	e0fffc03 	ldbu	r3,-16(fp)
    6524:	e13ffc03 	ldbu	r4,-16(fp)
    6528:	d0a60044 	addi	r2,gp,-26623
    652c:	2085883a 	add	r2,r4,r2
    6530:	10800003 	ldbu	r2,0(r2)
    6534:	1009883a 	mov	r4,r2
    6538:	e0bffc83 	ldbu	r2,-14(fp)
    653c:	0084303a 	nor	r2,zero,r2
    6540:	2084703a 	and	r2,r4,r2
    6544:	1009883a 	mov	r4,r2
    6548:	d0a60044 	addi	r2,gp,-26623
    654c:	1885883a 	add	r2,r3,r2
    6550:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
    6554:	e0fffc03 	ldbu	r3,-16(fp)
    6558:	d0a60044 	addi	r2,gp,-26623
    655c:	1885883a 	add	r2,r3,r2
    6560:	10800003 	ldbu	r2,0(r2)
    6564:	10803fcc 	andi	r2,r2,255
    6568:	1000061e 	bne	r2,zero,6584 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
    656c:	e0bffc43 	ldbu	r2,-15(fp)
    6570:	0084303a 	nor	r2,zero,r2
    6574:	1007883a 	mov	r3,r2
    6578:	d0a60003 	ldbu	r2,-26624(gp)
    657c:	1884703a 	and	r2,r3,r2
    6580:	d0a60005 	stb	r2,-26624(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
    6584:	d0e60003 	ldbu	r3,-26624(gp)
    6588:	e0bffb83 	ldbu	r2,-18(fp)
    658c:	1884b03a 	or	r2,r3,r2
    6590:	d0a60005 	stb	r2,-26624(gp)
         OSRdyTbl[y_new] |= bitx_new;
    6594:	e0fffb03 	ldbu	r3,-20(fp)
    6598:	e13ffb03 	ldbu	r4,-20(fp)
    659c:	d0a60044 	addi	r2,gp,-26623
    65a0:	2085883a 	add	r2,r4,r2
    65a4:	11000003 	ldbu	r4,0(r2)
    65a8:	e0bffbc3 	ldbu	r2,-17(fp)
    65ac:	2084b03a 	or	r2,r4,r2
    65b0:	1009883a 	mov	r4,r2
    65b4:	d0a60044 	addi	r2,gp,-26623
    65b8:	1885883a 	add	r2,r3,r2
    65bc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
    65c0:	e0bff817 	ldw	r2,-32(fp)
    65c4:	10800717 	ldw	r2,28(r2)
    65c8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
    65cc:	e0bff317 	ldw	r2,-52(fp)
    65d0:	10003326 	beq	r2,zero,66a0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
    65d4:	e0bffc03 	ldbu	r2,-16(fp)
    65d8:	e0fffc03 	ldbu	r3,-16(fp)
    65dc:	e13ff317 	ldw	r4,-52(fp)
    65e0:	20c7883a 	add	r3,r4,r3
    65e4:	18c002c4 	addi	r3,r3,11
    65e8:	18c00003 	ldbu	r3,0(r3)
    65ec:	1809883a 	mov	r4,r3
    65f0:	e0fffc83 	ldbu	r3,-14(fp)
    65f4:	00c6303a 	nor	r3,zero,r3
    65f8:	20c6703a 	and	r3,r4,r3
    65fc:	1809883a 	mov	r4,r3
    6600:	e0fff317 	ldw	r3,-52(fp)
    6604:	1885883a 	add	r2,r3,r2
    6608:	108002c4 	addi	r2,r2,11
    660c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
    6610:	e0bffc03 	ldbu	r2,-16(fp)
    6614:	e0fff317 	ldw	r3,-52(fp)
    6618:	1885883a 	add	r2,r3,r2
    661c:	108002c4 	addi	r2,r2,11
    6620:	10800003 	ldbu	r2,0(r2)
    6624:	10803fcc 	andi	r2,r2,255
    6628:	1000091e 	bne	r2,zero,6650 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
    662c:	e0bff317 	ldw	r2,-52(fp)
    6630:	10800283 	ldbu	r2,10(r2)
    6634:	1007883a 	mov	r3,r2
    6638:	e0bffc43 	ldbu	r2,-15(fp)
    663c:	0084303a 	nor	r2,zero,r2
    6640:	1884703a 	and	r2,r3,r2
    6644:	1007883a 	mov	r3,r2
    6648:	e0bff317 	ldw	r2,-52(fp)
    664c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
    6650:	e0bff317 	ldw	r2,-52(fp)
    6654:	10c00283 	ldbu	r3,10(r2)
    6658:	e0bffb83 	ldbu	r2,-18(fp)
    665c:	1884b03a 	or	r2,r3,r2
    6660:	1007883a 	mov	r3,r2
    6664:	e0bff317 	ldw	r2,-52(fp)
    6668:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
    666c:	e0bffb03 	ldbu	r2,-20(fp)
    6670:	e0fffb03 	ldbu	r3,-20(fp)
    6674:	e13ff317 	ldw	r4,-52(fp)
    6678:	20c7883a 	add	r3,r4,r3
    667c:	18c002c4 	addi	r3,r3,11
    6680:	19000003 	ldbu	r4,0(r3)
    6684:	e0fffbc3 	ldbu	r3,-17(fp)
    6688:	20c6b03a 	or	r3,r4,r3
    668c:	1809883a 	mov	r4,r3
    6690:	e0fff317 	ldw	r3,-52(fp)
    6694:	1885883a 	add	r2,r3,r2
    6698:	108002c4 	addi	r2,r2,11
    669c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
    66a0:	e0bff817 	ldw	r2,-32(fp)
    66a4:	10800817 	ldw	r2,32(r2)
    66a8:	10004226 	beq	r2,zero,67b4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
    66ac:	e0bff817 	ldw	r2,-32(fp)
    66b0:	10800817 	ldw	r2,32(r2)
    66b4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
    66b8:	e0bff417 	ldw	r2,-48(fp)
    66bc:	10800017 	ldw	r2,0(r2)
    66c0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
    66c4:	00003906 	br	67ac <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
    66c8:	e0bffc03 	ldbu	r2,-16(fp)
    66cc:	e0fffc03 	ldbu	r3,-16(fp)
    66d0:	e13ff317 	ldw	r4,-52(fp)
    66d4:	20c7883a 	add	r3,r4,r3
    66d8:	18c002c4 	addi	r3,r3,11
    66dc:	18c00003 	ldbu	r3,0(r3)
    66e0:	1809883a 	mov	r4,r3
    66e4:	e0fffc83 	ldbu	r3,-14(fp)
    66e8:	00c6303a 	nor	r3,zero,r3
    66ec:	20c6703a 	and	r3,r4,r3
    66f0:	1809883a 	mov	r4,r3
    66f4:	e0fff317 	ldw	r3,-52(fp)
    66f8:	1885883a 	add	r2,r3,r2
    66fc:	108002c4 	addi	r2,r2,11
    6700:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
    6704:	e0bffc03 	ldbu	r2,-16(fp)
    6708:	e0fff317 	ldw	r3,-52(fp)
    670c:	1885883a 	add	r2,r3,r2
    6710:	108002c4 	addi	r2,r2,11
    6714:	10800003 	ldbu	r2,0(r2)
    6718:	10803fcc 	andi	r2,r2,255
    671c:	1000091e 	bne	r2,zero,6744 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
    6720:	e0bff317 	ldw	r2,-52(fp)
    6724:	10800283 	ldbu	r2,10(r2)
    6728:	1007883a 	mov	r3,r2
    672c:	e0bffc43 	ldbu	r2,-15(fp)
    6730:	0084303a 	nor	r2,zero,r2
    6734:	1884703a 	and	r2,r3,r2
    6738:	1007883a 	mov	r3,r2
    673c:	e0bff317 	ldw	r2,-52(fp)
    6740:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
    6744:	e0bff317 	ldw	r2,-52(fp)
    6748:	10c00283 	ldbu	r3,10(r2)
    674c:	e0bffb83 	ldbu	r2,-18(fp)
    6750:	1884b03a 	or	r2,r3,r2
    6754:	1007883a 	mov	r3,r2
    6758:	e0bff317 	ldw	r2,-52(fp)
    675c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
    6760:	e0bffb03 	ldbu	r2,-20(fp)
    6764:	e0fffb03 	ldbu	r3,-20(fp)
    6768:	e13ff317 	ldw	r4,-52(fp)
    676c:	20c7883a 	add	r3,r4,r3
    6770:	18c002c4 	addi	r3,r3,11
    6774:	19000003 	ldbu	r4,0(r3)
    6778:	e0fffbc3 	ldbu	r3,-17(fp)
    677c:	20c6b03a 	or	r3,r4,r3
    6780:	1809883a 	mov	r4,r3
    6784:	e0fff317 	ldw	r3,-52(fp)
    6788:	1885883a 	add	r2,r3,r2
    678c:	108002c4 	addi	r2,r2,11
    6790:	11000005 	stb	r4,0(r2)
            pevents++;
    6794:	e0bff417 	ldw	r2,-48(fp)
    6798:	10800104 	addi	r2,r2,4
    679c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
    67a0:	e0bff417 	ldw	r2,-48(fp)
    67a4:	10800017 	ldw	r2,0(r2)
    67a8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
    67ac:	e0bff317 	ldw	r2,-52(fp)
    67b0:	103fc51e 	bne	r2,zero,66c8 <__alt_data_end+0xfffee028>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
    67b4:	e0bff817 	ldw	r2,-32(fp)
    67b8:	e0ffff03 	ldbu	r3,-4(fp)
    67bc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
    67c0:	e0bff817 	ldw	r2,-32(fp)
    67c4:	e0fffb03 	ldbu	r3,-20(fp)
    67c8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
    67cc:	e0bff817 	ldw	r2,-32(fp)
    67d0:	e0fffb43 	ldbu	r3,-19(fp)
    67d4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
    67d8:	e0bff817 	ldw	r2,-32(fp)
    67dc:	e0fffb83 	ldbu	r3,-18(fp)
    67e0:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
    67e4:	e0bff817 	ldw	r2,-32(fp)
    67e8:	e0fffbc3 	ldbu	r3,-17(fp)
    67ec:	10c00d45 	stb	r3,53(r2)
    67f0:	e0bff517 	ldw	r2,-44(fp)
    67f4:	e0bffa15 	stw	r2,-24(fp)
    67f8:	e0bffa17 	ldw	r2,-24(fp)
    67fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    6800:	d0a5f443 	ldbu	r2,-26671(gp)
    6804:	10803fcc 	andi	r2,r2,255
    6808:	10800058 	cmpnei	r2,r2,1
    680c:	1000011e 	bne	r2,zero,6814 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
    6810:	00021000 	call	2100 <OS_Sched>
    }
    return (OS_ERR_NONE);
    6814:	0005883a 	mov	r2,zero
}
    6818:	e037883a 	mov	sp,fp
    681c:	dfc00117 	ldw	ra,4(sp)
    6820:	df000017 	ldw	fp,0(sp)
    6824:	dec00204 	addi	sp,sp,8
    6828:	f800283a 	ret

0000682c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    682c:	deffee04 	addi	sp,sp,-72
    6830:	dfc01115 	stw	ra,68(sp)
    6834:	df001015 	stw	fp,64(sp)
    6838:	df001004 	addi	fp,sp,64
    683c:	e13ffc15 	stw	r4,-16(fp)
    6840:	e17ffd15 	stw	r5,-12(fp)
    6844:	e1bffe15 	stw	r6,-8(fp)
    6848:	3805883a 	mov	r2,r7
    684c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    6850:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    6854:	e0bfff03 	ldbu	r2,-4(fp)
    6858:	10800570 	cmpltui	r2,r2,21
    685c:	1000021e 	bne	r2,zero,6868 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
    6860:	00800a84 	movi	r2,42
    6864:	00005706 	br	69c4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6868:	0005303a 	rdctl	r2,status
    686c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6870:	e0fffb17 	ldw	r3,-20(fp)
    6874:	00bfff84 	movi	r2,-2
    6878:	1884703a 	and	r2,r3,r2
    687c:	1001703a 	wrctl	status,r2
  
  return context;
    6880:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6884:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    6888:	d0a60203 	ldbu	r2,-26616(gp)
    688c:	10803fcc 	andi	r2,r2,255
    6890:	10000626 	beq	r2,zero,68ac <OSTaskCreate+0x80>
    6894:	e0bff317 	ldw	r2,-52(fp)
    6898:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    689c:	e0bff417 	ldw	r2,-48(fp)
    68a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    68a4:	00800f04 	movi	r2,60
    68a8:	00004606 	br	69c4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    68ac:	e0ffff03 	ldbu	r3,-4(fp)
    68b0:	00800074 	movhi	r2,1
    68b4:	10932604 	addi	r2,r2,19608
    68b8:	18c7883a 	add	r3,r3,r3
    68bc:	18c7883a 	add	r3,r3,r3
    68c0:	10c5883a 	add	r2,r2,r3
    68c4:	10800017 	ldw	r2,0(r2)
    68c8:	1000391e 	bne	r2,zero,69b0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    68cc:	e0ffff03 	ldbu	r3,-4(fp)
    68d0:	00800074 	movhi	r2,1
    68d4:	10932604 	addi	r2,r2,19608
    68d8:	18c7883a 	add	r3,r3,r3
    68dc:	18c7883a 	add	r3,r3,r3
    68e0:	10c5883a 	add	r2,r2,r3
    68e4:	00c00044 	movi	r3,1
    68e8:	10c00015 	stw	r3,0(r2)
    68ec:	e0bff317 	ldw	r2,-52(fp)
    68f0:	e0bff515 	stw	r2,-44(fp)
    68f4:	e0bff517 	ldw	r2,-44(fp)
    68f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    68fc:	000f883a 	mov	r7,zero
    6900:	e1bffe17 	ldw	r6,-8(fp)
    6904:	e17ffd17 	ldw	r5,-12(fp)
    6908:	e13ffc17 	ldw	r4,-16(fp)
    690c:	0009c9c0 	call	9c9c <OSTaskStkInit>
    6910:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    6914:	e0bfff03 	ldbu	r2,-4(fp)
    6918:	d8000215 	stw	zero,8(sp)
    691c:	d8000115 	stw	zero,4(sp)
    6920:	d8000015 	stw	zero,0(sp)
    6924:	000f883a 	mov	r7,zero
    6928:	000d883a 	mov	r6,zero
    692c:	e17ff717 	ldw	r5,-36(fp)
    6930:	1009883a 	mov	r4,r2
    6934:	00025000 	call	2500 <OS_TCBInit>
    6938:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
    693c:	e0bff803 	ldbu	r2,-32(fp)
    6940:	1000061e 	bne	r2,zero,695c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    6944:	d0a5f443 	ldbu	r2,-26671(gp)
    6948:	10803fcc 	andi	r2,r2,255
    694c:	10800058 	cmpnei	r2,r2,1
    6950:	1000151e 	bne	r2,zero,69a8 <OSTaskCreate+0x17c>
                OS_Sched();
    6954:	00021000 	call	2100 <OS_Sched>
    6958:	00001306 	br	69a8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    695c:	0005303a 	rdctl	r2,status
    6960:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6964:	e0fffa17 	ldw	r3,-24(fp)
    6968:	00bfff84 	movi	r2,-2
    696c:	1884703a 	and	r2,r3,r2
    6970:	1001703a 	wrctl	status,r2
  
  return context;
    6974:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    6978:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    697c:	e0ffff03 	ldbu	r3,-4(fp)
    6980:	00800074 	movhi	r2,1
    6984:	10932604 	addi	r2,r2,19608
    6988:	18c7883a 	add	r3,r3,r3
    698c:	18c7883a 	add	r3,r3,r3
    6990:	10c5883a 	add	r2,r2,r3
    6994:	10000015 	stw	zero,0(r2)
    6998:	e0bff317 	ldw	r2,-52(fp)
    699c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    69a0:	e0bff617 	ldw	r2,-40(fp)
    69a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    69a8:	e0bff803 	ldbu	r2,-32(fp)
    69ac:	00000506 	br	69c4 <OSTaskCreate+0x198>
    69b0:	e0bff317 	ldw	r2,-52(fp)
    69b4:	e0bff915 	stw	r2,-28(fp)
    69b8:	e0bff917 	ldw	r2,-28(fp)
    69bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    69c0:	00800a04 	movi	r2,40
}
    69c4:	e037883a 	mov	sp,fp
    69c8:	dfc00117 	ldw	ra,4(sp)
    69cc:	df000017 	ldw	fp,0(sp)
    69d0:	dec00204 	addi	sp,sp,8
    69d4:	f800283a 	ret

000069d8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    69d8:	deffec04 	addi	sp,sp,-80
    69dc:	dfc01315 	stw	ra,76(sp)
    69e0:	df001215 	stw	fp,72(sp)
    69e4:	df001204 	addi	fp,sp,72
    69e8:	e13ffa15 	stw	r4,-24(fp)
    69ec:	e17ffb15 	stw	r5,-20(fp)
    69f0:	e1bffc15 	stw	r6,-16(fp)
    69f4:	3809883a 	mov	r4,r7
    69f8:	e0c00217 	ldw	r3,8(fp)
    69fc:	e0800617 	ldw	r2,24(fp)
    6a00:	e13ffd05 	stb	r4,-12(fp)
    6a04:	e0fffe0d 	sth	r3,-8(fp)
    6a08:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    6a0c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
    6a10:	e0bffd03 	ldbu	r2,-12(fp)
    6a14:	10800570 	cmpltui	r2,r2,21
    6a18:	1000021e 	bne	r2,zero,6a24 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
    6a1c:	00800a84 	movi	r2,42
    6a20:	00006106 	br	6ba8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6a24:	0005303a 	rdctl	r2,status
    6a28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6a2c:	e0fff917 	ldw	r3,-28(fp)
    6a30:	00bfff84 	movi	r2,-2
    6a34:	1884703a 	and	r2,r3,r2
    6a38:	1001703a 	wrctl	status,r2
  
  return context;
    6a3c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    6a40:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    6a44:	d0a60203 	ldbu	r2,-26616(gp)
    6a48:	10803fcc 	andi	r2,r2,255
    6a4c:	10000626 	beq	r2,zero,6a68 <OSTaskCreateExt+0x90>
    6a50:	e0bff117 	ldw	r2,-60(fp)
    6a54:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6a58:	e0bff217 	ldw	r2,-56(fp)
    6a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
    6a60:	00800f04 	movi	r2,60
    6a64:	00005006 	br	6ba8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    6a68:	e0fffd03 	ldbu	r3,-12(fp)
    6a6c:	00800074 	movhi	r2,1
    6a70:	10932604 	addi	r2,r2,19608
    6a74:	18c7883a 	add	r3,r3,r3
    6a78:	18c7883a 	add	r3,r3,r3
    6a7c:	10c5883a 	add	r2,r2,r3
    6a80:	10800017 	ldw	r2,0(r2)
    6a84:	1000431e 	bne	r2,zero,6b94 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    6a88:	e0fffd03 	ldbu	r3,-12(fp)
    6a8c:	00800074 	movhi	r2,1
    6a90:	10932604 	addi	r2,r2,19608
    6a94:	18c7883a 	add	r3,r3,r3
    6a98:	18c7883a 	add	r3,r3,r3
    6a9c:	10c5883a 	add	r2,r2,r3
    6aa0:	00c00044 	movi	r3,1
    6aa4:	10c00015 	stw	r3,0(r2)
    6aa8:	e0bff117 	ldw	r2,-60(fp)
    6aac:	e0bff315 	stw	r2,-52(fp)
    6ab0:	e0bff317 	ldw	r2,-52(fp)
    6ab4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
    6ab8:	e0bfff0b 	ldhu	r2,-4(fp)
    6abc:	100d883a 	mov	r6,r2
    6ac0:	e1400417 	ldw	r5,16(fp)
    6ac4:	e1000317 	ldw	r4,12(fp)
    6ac8:	0007a380 	call	7a38 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    6acc:	e0bfff0b 	ldhu	r2,-4(fp)
    6ad0:	100f883a 	mov	r7,r2
    6ad4:	e1bffc17 	ldw	r6,-16(fp)
    6ad8:	e17ffb17 	ldw	r5,-20(fp)
    6adc:	e13ffa17 	ldw	r4,-24(fp)
    6ae0:	0009c9c0 	call	9c9c <OSTaskStkInit>
    6ae4:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    6ae8:	e0fffd03 	ldbu	r3,-12(fp)
    6aec:	e13ffe0b 	ldhu	r4,-8(fp)
    6af0:	e0bfff0b 	ldhu	r2,-4(fp)
    6af4:	d8800215 	stw	r2,8(sp)
    6af8:	e0800517 	ldw	r2,20(fp)
    6afc:	d8800115 	stw	r2,4(sp)
    6b00:	e0800417 	ldw	r2,16(fp)
    6b04:	d8800015 	stw	r2,0(sp)
    6b08:	200f883a 	mov	r7,r4
    6b0c:	e1800317 	ldw	r6,12(fp)
    6b10:	e17ff517 	ldw	r5,-44(fp)
    6b14:	1809883a 	mov	r4,r3
    6b18:	00025000 	call	2500 <OS_TCBInit>
    6b1c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
    6b20:	e0bff603 	ldbu	r2,-40(fp)
    6b24:	1000061e 	bne	r2,zero,6b40 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    6b28:	d0a5f443 	ldbu	r2,-26671(gp)
    6b2c:	10803fcc 	andi	r2,r2,255
    6b30:	10800058 	cmpnei	r2,r2,1
    6b34:	1000151e 	bne	r2,zero,6b8c <OSTaskCreateExt+0x1b4>
                OS_Sched();
    6b38:	00021000 	call	2100 <OS_Sched>
    6b3c:	00001306 	br	6b8c <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6b40:	0005303a 	rdctl	r2,status
    6b44:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6b48:	e0fff817 	ldw	r3,-32(fp)
    6b4c:	00bfff84 	movi	r2,-2
    6b50:	1884703a 	and	r2,r3,r2
    6b54:	1001703a 	wrctl	status,r2
  
  return context;
    6b58:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
    6b5c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    6b60:	e0fffd03 	ldbu	r3,-12(fp)
    6b64:	00800074 	movhi	r2,1
    6b68:	10932604 	addi	r2,r2,19608
    6b6c:	18c7883a 	add	r3,r3,r3
    6b70:	18c7883a 	add	r3,r3,r3
    6b74:	10c5883a 	add	r2,r2,r3
    6b78:	10000015 	stw	zero,0(r2)
    6b7c:	e0bff117 	ldw	r2,-60(fp)
    6b80:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6b84:	e0bff417 	ldw	r2,-48(fp)
    6b88:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
    6b8c:	e0bff603 	ldbu	r2,-40(fp)
    6b90:	00000506 	br	6ba8 <OSTaskCreateExt+0x1d0>
    6b94:	e0bff117 	ldw	r2,-60(fp)
    6b98:	e0bff715 	stw	r2,-36(fp)
    6b9c:	e0bff717 	ldw	r2,-36(fp)
    6ba0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
    6ba4:	00800a04 	movi	r2,40
}
    6ba8:	e037883a 	mov	sp,fp
    6bac:	dfc00117 	ldw	ra,4(sp)
    6bb0:	df000017 	ldw	fp,0(sp)
    6bb4:	dec00204 	addi	sp,sp,8
    6bb8:	f800283a 	ret

00006bbc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
    6bbc:	defff404 	addi	sp,sp,-48
    6bc0:	dfc00b15 	stw	ra,44(sp)
    6bc4:	df000a15 	stw	fp,40(sp)
    6bc8:	df000a04 	addi	fp,sp,40
    6bcc:	2005883a 	mov	r2,r4
    6bd0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
    6bd4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
    6bd8:	d0a60203 	ldbu	r2,-26616(gp)
    6bdc:	10803fcc 	andi	r2,r2,255
    6be0:	10000226 	beq	r2,zero,6bec <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
    6be4:	00801004 	movi	r2,64
    6be8:	0000c006 	br	6eec <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
    6bec:	e0bfff03 	ldbu	r2,-4(fp)
    6bf0:	10800518 	cmpnei	r2,r2,20
    6bf4:	1000021e 	bne	r2,zero,6c00 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
    6bf8:	00800f84 	movi	r2,62
    6bfc:	0000bb06 	br	6eec <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
    6c00:	e0bfff03 	ldbu	r2,-4(fp)
    6c04:	10800530 	cmpltui	r2,r2,20
    6c08:	1000051e 	bne	r2,zero,6c20 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
    6c0c:	e0bfff03 	ldbu	r2,-4(fp)
    6c10:	10803fe0 	cmpeqi	r2,r2,255
    6c14:	1000021e 	bne	r2,zero,6c20 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
    6c18:	00800a84 	movi	r2,42
    6c1c:	0000b306 	br	6eec <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6c20:	0005303a 	rdctl	r2,status
    6c24:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6c28:	e0fffe17 	ldw	r3,-8(fp)
    6c2c:	00bfff84 	movi	r2,-2
    6c30:	1884703a 	and	r2,r3,r2
    6c34:	1001703a 	wrctl	status,r2
  
  return context;
    6c38:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
    6c3c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
    6c40:	e0bfff03 	ldbu	r2,-4(fp)
    6c44:	10803fd8 	cmpnei	r2,r2,255
    6c48:	1000031e 	bne	r2,zero,6c58 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
    6c4c:	d0a60317 	ldw	r2,-26612(gp)
    6c50:	10800c83 	ldbu	r2,50(r2)
    6c54:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    6c58:	e0ffff03 	ldbu	r3,-4(fp)
    6c5c:	00800074 	movhi	r2,1
    6c60:	10932604 	addi	r2,r2,19608
    6c64:	18c7883a 	add	r3,r3,r3
    6c68:	18c7883a 	add	r3,r3,r3
    6c6c:	10c5883a 	add	r2,r2,r3
    6c70:	10800017 	ldw	r2,0(r2)
    6c74:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
    6c78:	e0bff817 	ldw	r2,-32(fp)
    6c7c:	1000061e 	bne	r2,zero,6c98 <OSTaskDel+0xdc>
    6c80:	e0bff617 	ldw	r2,-40(fp)
    6c84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6c88:	e0bff717 	ldw	r2,-36(fp)
    6c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    6c90:	008010c4 	movi	r2,67
    6c94:	00009506 	br	6eec <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
    6c98:	e0bff817 	ldw	r2,-32(fp)
    6c9c:	10800058 	cmpnei	r2,r2,1
    6ca0:	1000061e 	bne	r2,zero,6cbc <OSTaskDel+0x100>
    6ca4:	e0bff617 	ldw	r2,-40(fp)
    6ca8:	e0bff915 	stw	r2,-28(fp)
    6cac:	e0bff917 	ldw	r2,-28(fp)
    6cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    6cb4:	00800f44 	movi	r2,61
    6cb8:	00008c06 	br	6eec <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
    6cbc:	e0bff817 	ldw	r2,-32(fp)
    6cc0:	10800d03 	ldbu	r2,52(r2)
    6cc4:	10c03fcc 	andi	r3,r2,255
    6cc8:	e0bff817 	ldw	r2,-32(fp)
    6ccc:	10800d03 	ldbu	r2,52(r2)
    6cd0:	11003fcc 	andi	r4,r2,255
    6cd4:	d0a60044 	addi	r2,gp,-26623
    6cd8:	2085883a 	add	r2,r4,r2
    6cdc:	10800003 	ldbu	r2,0(r2)
    6ce0:	1009883a 	mov	r4,r2
    6ce4:	e0bff817 	ldw	r2,-32(fp)
    6ce8:	10800d43 	ldbu	r2,53(r2)
    6cec:	0084303a 	nor	r2,zero,r2
    6cf0:	2084703a 	and	r2,r4,r2
    6cf4:	1009883a 	mov	r4,r2
    6cf8:	d0a60044 	addi	r2,gp,-26623
    6cfc:	1885883a 	add	r2,r3,r2
    6d00:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
    6d04:	e0bff817 	ldw	r2,-32(fp)
    6d08:	10800d03 	ldbu	r2,52(r2)
    6d0c:	10c03fcc 	andi	r3,r2,255
    6d10:	d0a60044 	addi	r2,gp,-26623
    6d14:	1885883a 	add	r2,r3,r2
    6d18:	10800003 	ldbu	r2,0(r2)
    6d1c:	10803fcc 	andi	r2,r2,255
    6d20:	1000071e 	bne	r2,zero,6d40 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
    6d24:	e0bff817 	ldw	r2,-32(fp)
    6d28:	10800d83 	ldbu	r2,54(r2)
    6d2c:	0084303a 	nor	r2,zero,r2
    6d30:	1007883a 	mov	r3,r2
    6d34:	d0a60003 	ldbu	r2,-26624(gp)
    6d38:	1884703a 	and	r2,r3,r2
    6d3c:	d0a60005 	stb	r2,-26624(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
    6d40:	e0bff817 	ldw	r2,-32(fp)
    6d44:	10800717 	ldw	r2,28(r2)
    6d48:	10000526 	beq	r2,zero,6d60 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
    6d4c:	e0bff817 	ldw	r2,-32(fp)
    6d50:	10800717 	ldw	r2,28(r2)
    6d54:	100b883a 	mov	r5,r2
    6d58:	e13ff817 	ldw	r4,-32(fp)
    6d5c:	0001aac0 	call	1aac <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
    6d60:	e0bff817 	ldw	r2,-32(fp)
    6d64:	10800817 	ldw	r2,32(r2)
    6d68:	10000526 	beq	r2,zero,6d80 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
    6d6c:	e0bff817 	ldw	r2,-32(fp)
    6d70:	10800817 	ldw	r2,32(r2)
    6d74:	100b883a 	mov	r5,r2
    6d78:	e13ff817 	ldw	r4,-32(fp)
    6d7c:	0001b640 	call	1b64 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
    6d80:	e0bff817 	ldw	r2,-32(fp)
    6d84:	10800a17 	ldw	r2,40(r2)
    6d88:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
    6d8c:	e0bffb17 	ldw	r2,-20(fp)
    6d90:	10000226 	beq	r2,zero,6d9c <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
    6d94:	e13ffb17 	ldw	r4,-20(fp)
    6d98:	0003fd40 	call	3fd4 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
    6d9c:	e0bff817 	ldw	r2,-32(fp)
    6da0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
    6da4:	e0bff817 	ldw	r2,-32(fp)
    6da8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    6dac:	e0bff817 	ldw	r2,-32(fp)
    6db0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
    6db4:	d0a5f403 	ldbu	r2,-26672(gp)
    6db8:	10803fcc 	andi	r2,r2,255
    6dbc:	10803fe0 	cmpeqi	r2,r2,255
    6dc0:	1000031e 	bne	r2,zero,6dd0 <OSTaskDel+0x214>
        OSLockNesting++;
    6dc4:	d0a5f403 	ldbu	r2,-26672(gp)
    6dc8:	10800044 	addi	r2,r2,1
    6dcc:	d0a5f405 	stb	r2,-26672(gp)
    6dd0:	e0bff617 	ldw	r2,-40(fp)
    6dd4:	e0bffd15 	stw	r2,-12(fp)
    6dd8:	e0bffd17 	ldw	r2,-12(fp)
    6ddc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
    6de0:	00016940 	call	1694 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6de4:	0005303a 	rdctl	r2,status
    6de8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6dec:	e0fffa17 	ldw	r3,-24(fp)
    6df0:	00bfff84 	movi	r2,-2
    6df4:	1884703a 	and	r2,r3,r2
    6df8:	1001703a 	wrctl	status,r2
  
  return context;
    6dfc:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
    6e00:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
    6e04:	d0a5f403 	ldbu	r2,-26672(gp)
    6e08:	10803fcc 	andi	r2,r2,255
    6e0c:	10000326 	beq	r2,zero,6e1c <OSTaskDel+0x260>
        OSLockNesting--;
    6e10:	d0a5f403 	ldbu	r2,-26672(gp)
    6e14:	10bfffc4 	addi	r2,r2,-1
    6e18:	d0a5f405 	stb	r2,-26672(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
    6e1c:	e13ff817 	ldw	r4,-32(fp)
    6e20:	0009e1c0 	call	9e1c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
    6e24:	d0a5fc43 	ldbu	r2,-26639(gp)
    6e28:	10bfffc4 	addi	r2,r2,-1
    6e2c:	d0a5fc45 	stb	r2,-26639(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
    6e30:	e0ffff03 	ldbu	r3,-4(fp)
    6e34:	00800074 	movhi	r2,1
    6e38:	10932604 	addi	r2,r2,19608
    6e3c:	18c7883a 	add	r3,r3,r3
    6e40:	18c7883a 	add	r3,r3,r3
    6e44:	10c5883a 	add	r2,r2,r3
    6e48:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
    6e4c:	e0bff817 	ldw	r2,-32(fp)
    6e50:	10800617 	ldw	r2,24(r2)
    6e54:	1000071e 	bne	r2,zero,6e74 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
    6e58:	e0bff817 	ldw	r2,-32(fp)
    6e5c:	10800517 	ldw	r2,20(r2)
    6e60:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
    6e64:	e0bff817 	ldw	r2,-32(fp)
    6e68:	10800517 	ldw	r2,20(r2)
    6e6c:	d0a5f715 	stw	r2,-26660(gp)
    6e70:	00000a06 	br	6e9c <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
    6e74:	e0bff817 	ldw	r2,-32(fp)
    6e78:	10800617 	ldw	r2,24(r2)
    6e7c:	e0fff817 	ldw	r3,-32(fp)
    6e80:	18c00517 	ldw	r3,20(r3)
    6e84:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
    6e88:	e0bff817 	ldw	r2,-32(fp)
    6e8c:	10800517 	ldw	r2,20(r2)
    6e90:	e0fff817 	ldw	r3,-32(fp)
    6e94:	18c00617 	ldw	r3,24(r3)
    6e98:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
    6e9c:	d0e5fb17 	ldw	r3,-26644(gp)
    6ea0:	e0bff817 	ldw	r2,-32(fp)
    6ea4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
    6ea8:	e0bff817 	ldw	r2,-32(fp)
    6eac:	d0a5fb15 	stw	r2,-26644(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
    6eb0:	e0bff817 	ldw	r2,-32(fp)
    6eb4:	00c00fc4 	movi	r3,63
    6eb8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    6ebc:	e0bff817 	ldw	r2,-32(fp)
    6ec0:	10001345 	stb	zero,77(r2)
    6ec4:	e0bff617 	ldw	r2,-40(fp)
    6ec8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6ecc:	e0bffc17 	ldw	r2,-16(fp)
    6ed0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
    6ed4:	d0a5f443 	ldbu	r2,-26671(gp)
    6ed8:	10803fcc 	andi	r2,r2,255
    6edc:	10800058 	cmpnei	r2,r2,1
    6ee0:	1000011e 	bne	r2,zero,6ee8 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
    6ee4:	00021000 	call	2100 <OS_Sched>
    }
    return (OS_ERR_NONE);
    6ee8:	0005883a 	mov	r2,zero
}
    6eec:	e037883a 	mov	sp,fp
    6ef0:	dfc00117 	ldw	ra,4(sp)
    6ef4:	df000017 	ldw	fp,0(sp)
    6ef8:	dec00204 	addi	sp,sp,8
    6efc:	f800283a 	ret

00006f00 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
    6f00:	defff504 	addi	sp,sp,-44
    6f04:	df000a15 	stw	fp,40(sp)
    6f08:	df000a04 	addi	fp,sp,40
    6f0c:	2005883a 	mov	r2,r4
    6f10:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    6f14:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
    6f18:	e0bfff03 	ldbu	r2,-4(fp)
    6f1c:	10800518 	cmpnei	r2,r2,20
    6f20:	1000021e 	bne	r2,zero,6f2c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
    6f24:	00800f84 	movi	r2,62
    6f28:	00004506 	br	7040 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    6f2c:	e0bfff03 	ldbu	r2,-4(fp)
    6f30:	10800530 	cmpltui	r2,r2,20
    6f34:	1000051e 	bne	r2,zero,6f4c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
    6f38:	e0bfff03 	ldbu	r2,-4(fp)
    6f3c:	10803fe0 	cmpeqi	r2,r2,255
    6f40:	1000021e 	bne	r2,zero,6f4c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
    6f44:	00800a84 	movi	r2,42
    6f48:	00003d06 	br	7040 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
    6f4c:	e0bfff03 	ldbu	r2,-4(fp)
    6f50:	10803fd8 	cmpnei	r2,r2,255
    6f54:	1000111e 	bne	r2,zero,6f9c <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f58:	0005303a 	rdctl	r2,status
    6f5c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6f60:	e0fff917 	ldw	r3,-28(fp)
    6f64:	00bfff84 	movi	r2,-2
    6f68:	1884703a 	and	r2,r3,r2
    6f6c:	1001703a 	wrctl	status,r2
  
  return context;
    6f70:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
    6f74:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
    6f78:	d0a60317 	ldw	r2,-26612(gp)
    6f7c:	10800dc3 	ldbu	r2,55(r2)
    6f80:	e0bff805 	stb	r2,-32(fp)
    6f84:	e0bff617 	ldw	r2,-40(fp)
    6f88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6f8c:	e0bffe17 	ldw	r2,-8(fp)
    6f90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
    6f94:	e0bff803 	ldbu	r2,-32(fp)
    6f98:	00002906 	br	7040 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    6f9c:	0005303a 	rdctl	r2,status
    6fa0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    6fa4:	e0fff717 	ldw	r3,-36(fp)
    6fa8:	00bfff84 	movi	r2,-2
    6fac:	1884703a 	and	r2,r3,r2
    6fb0:	1001703a 	wrctl	status,r2
  
  return context;
    6fb4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    6fb8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    6fbc:	e0ffff03 	ldbu	r3,-4(fp)
    6fc0:	00800074 	movhi	r2,1
    6fc4:	10932604 	addi	r2,r2,19608
    6fc8:	18c7883a 	add	r3,r3,r3
    6fcc:	18c7883a 	add	r3,r3,r3
    6fd0:	10c5883a 	add	r2,r2,r3
    6fd4:	10800017 	ldw	r2,0(r2)
    6fd8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
    6fdc:	e0bffb17 	ldw	r2,-20(fp)
    6fe0:	1000061e 	bne	r2,zero,6ffc <OSTaskDelReq+0xfc>
    6fe4:	e0bff617 	ldw	r2,-40(fp)
    6fe8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    6fec:	e0bffa17 	ldw	r2,-24(fp)
    6ff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
    6ff4:	008010c4 	movi	r2,67
    6ff8:	00001106 	br	7040 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
    6ffc:	e0bffb17 	ldw	r2,-20(fp)
    7000:	10800058 	cmpnei	r2,r2,1
    7004:	1000061e 	bne	r2,zero,7020 <OSTaskDelReq+0x120>
    7008:	e0bff617 	ldw	r2,-40(fp)
    700c:	e0bffc15 	stw	r2,-16(fp)
    7010:	e0bffc17 	ldw	r2,-16(fp)
    7014:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
    7018:	00800f44 	movi	r2,61
    701c:	00000806 	br	7040 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
    7020:	e0bffb17 	ldw	r2,-20(fp)
    7024:	00c00fc4 	movi	r3,63
    7028:	10c00dc5 	stb	r3,55(r2)
    702c:	e0bff617 	ldw	r2,-40(fp)
    7030:	e0bffd15 	stw	r2,-12(fp)
    7034:	e0bffd17 	ldw	r2,-12(fp)
    7038:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    703c:	0005883a 	mov	r2,zero
}
    7040:	e037883a 	mov	sp,fp
    7044:	df000017 	ldw	fp,0(sp)
    7048:	dec00104 	addi	sp,sp,4
    704c:	f800283a 	ret

00007050 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    7050:	defff404 	addi	sp,sp,-48
    7054:	dfc00b15 	stw	ra,44(sp)
    7058:	df000a15 	stw	fp,40(sp)
    705c:	df000a04 	addi	fp,sp,40
    7060:	2005883a 	mov	r2,r4
    7064:	e17ffe15 	stw	r5,-8(fp)
    7068:	e1bfff15 	stw	r6,-4(fp)
    706c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    7070:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
    7074:	e0bfff17 	ldw	r2,-4(fp)
    7078:	1000021e 	bne	r2,zero,7084 <OSTaskNameGet+0x34>
        return (0);
    707c:	0005883a 	mov	r2,zero
    7080:	00005406 	br	71d4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
    7084:	e0bffd03 	ldbu	r2,-12(fp)
    7088:	10800570 	cmpltui	r2,r2,21
    708c:	1000081e 	bne	r2,zero,70b0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
    7090:	e0bffd03 	ldbu	r2,-12(fp)
    7094:	10803fe0 	cmpeqi	r2,r2,255
    7098:	1000051e 	bne	r2,zero,70b0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
    709c:	e0bfff17 	ldw	r2,-4(fp)
    70a0:	00c00a84 	movi	r3,42
    70a4:	10c00005 	stb	r3,0(r2)
            return (0);
    70a8:	0005883a 	mov	r2,zero
    70ac:	00004906 	br	71d4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
    70b0:	e0bffe17 	ldw	r2,-8(fp)
    70b4:	1000051e 	bne	r2,zero,70cc <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
    70b8:	e0bfff17 	ldw	r2,-4(fp)
    70bc:	00c00304 	movi	r3,12
    70c0:	10c00005 	stb	r3,0(r2)
        return (0);
    70c4:	0005883a 	mov	r2,zero
    70c8:	00004206 	br	71d4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    70cc:	d0a60203 	ldbu	r2,-26616(gp)
    70d0:	10803fcc 	andi	r2,r2,255
    70d4:	10000526 	beq	r2,zero,70ec <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
    70d8:	e0bfff17 	ldw	r2,-4(fp)
    70dc:	00c00444 	movi	r3,17
    70e0:	10c00005 	stb	r3,0(r2)
        return (0);
    70e4:	0005883a 	mov	r2,zero
    70e8:	00003a06 	br	71d4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    70ec:	0005303a 	rdctl	r2,status
    70f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    70f4:	e0fffc17 	ldw	r3,-16(fp)
    70f8:	00bfff84 	movi	r2,-2
    70fc:	1884703a 	and	r2,r3,r2
    7100:	1001703a 	wrctl	status,r2
  
  return context;
    7104:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    7108:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    710c:	e0bffd03 	ldbu	r2,-12(fp)
    7110:	10803fd8 	cmpnei	r2,r2,255
    7114:	1000031e 	bne	r2,zero,7124 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
    7118:	d0a60317 	ldw	r2,-26612(gp)
    711c:	10800c83 	ldbu	r2,50(r2)
    7120:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7124:	e0fffd03 	ldbu	r3,-12(fp)
    7128:	00800074 	movhi	r2,1
    712c:	10932604 	addi	r2,r2,19608
    7130:	18c7883a 	add	r3,r3,r3
    7134:	18c7883a 	add	r3,r3,r3
    7138:	10c5883a 	add	r2,r2,r3
    713c:	10800017 	ldw	r2,0(r2)
    7140:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    7144:	e0bff817 	ldw	r2,-32(fp)
    7148:	1000091e 	bne	r2,zero,7170 <OSTaskNameGet+0x120>
    714c:	e0bff617 	ldw	r2,-40(fp)
    7150:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7154:	e0bff717 	ldw	r2,-36(fp)
    7158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
    715c:	e0bfff17 	ldw	r2,-4(fp)
    7160:	00c010c4 	movi	r3,67
    7164:	10c00005 	stb	r3,0(r2)
        return (0);
    7168:	0005883a 	mov	r2,zero
    716c:	00001906 	br	71d4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    7170:	e0bff817 	ldw	r2,-32(fp)
    7174:	10800058 	cmpnei	r2,r2,1
    7178:	1000091e 	bne	r2,zero,71a0 <OSTaskNameGet+0x150>
    717c:	e0bff617 	ldw	r2,-40(fp)
    7180:	e0bff915 	stw	r2,-28(fp)
    7184:	e0bff917 	ldw	r2,-28(fp)
    7188:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
    718c:	e0bfff17 	ldw	r2,-4(fp)
    7190:	00c010c4 	movi	r3,67
    7194:	10c00005 	stb	r3,0(r2)
        return (0);
    7198:	0005883a 	mov	r2,zero
    719c:	00000d06 	br	71d4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    71a0:	e0bff817 	ldw	r2,-32(fp)
    71a4:	10801304 	addi	r2,r2,76
    71a8:	100b883a 	mov	r5,r2
    71ac:	e13ffe17 	ldw	r4,-8(fp)
    71b0:	00022440 	call	2244 <OS_StrCopy>
    71b4:	e0bffb05 	stb	r2,-20(fp)
    71b8:	e0bff617 	ldw	r2,-40(fp)
    71bc:	e0bffa15 	stw	r2,-24(fp)
    71c0:	e0bffa17 	ldw	r2,-24(fp)
    71c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    71c8:	e0bfff17 	ldw	r2,-4(fp)
    71cc:	10000005 	stb	zero,0(r2)
    return (len);
    71d0:	e0bffb03 	ldbu	r2,-20(fp)
}
    71d4:	e037883a 	mov	sp,fp
    71d8:	dfc00117 	ldw	ra,4(sp)
    71dc:	df000017 	ldw	fp,0(sp)
    71e0:	dec00204 	addi	sp,sp,8
    71e4:	f800283a 	ret

000071e8 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    71e8:	defff304 	addi	sp,sp,-52
    71ec:	dfc00c15 	stw	ra,48(sp)
    71f0:	df000b15 	stw	fp,44(sp)
    71f4:	df000b04 	addi	fp,sp,44
    71f8:	2005883a 	mov	r2,r4
    71fc:	e17ffe15 	stw	r5,-8(fp)
    7200:	e1bfff15 	stw	r6,-4(fp)
    7204:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    7208:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
    720c:	e0bfff17 	ldw	r2,-4(fp)
    7210:	10005c26 	beq	r2,zero,7384 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
    7214:	e0bffd03 	ldbu	r2,-12(fp)
    7218:	10800570 	cmpltui	r2,r2,21
    721c:	1000071e 	bne	r2,zero,723c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
    7220:	e0bffd03 	ldbu	r2,-12(fp)
    7224:	10803fe0 	cmpeqi	r2,r2,255
    7228:	1000041e 	bne	r2,zero,723c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
    722c:	e0bfff17 	ldw	r2,-4(fp)
    7230:	00c00a84 	movi	r3,42
    7234:	10c00005 	stb	r3,0(r2)
            return;
    7238:	00005306 	br	7388 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
    723c:	e0bffe17 	ldw	r2,-8(fp)
    7240:	1000041e 	bne	r2,zero,7254 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
    7244:	e0bfff17 	ldw	r2,-4(fp)
    7248:	00c00304 	movi	r3,12
    724c:	10c00005 	stb	r3,0(r2)
        return;
    7250:	00004d06 	br	7388 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    7254:	d0a60203 	ldbu	r2,-26616(gp)
    7258:	10803fcc 	andi	r2,r2,255
    725c:	10000426 	beq	r2,zero,7270 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
    7260:	e0bfff17 	ldw	r2,-4(fp)
    7264:	00c00484 	movi	r3,18
    7268:	10c00005 	stb	r3,0(r2)
        return;
    726c:	00004606 	br	7388 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7270:	0005303a 	rdctl	r2,status
    7274:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7278:	e0fffc17 	ldw	r3,-16(fp)
    727c:	00bfff84 	movi	r2,-2
    7280:	1884703a 	and	r2,r3,r2
    7284:	1001703a 	wrctl	status,r2
  
  return context;
    7288:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    728c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    7290:	e0bffd03 	ldbu	r2,-12(fp)
    7294:	10803fd8 	cmpnei	r2,r2,255
    7298:	1000031e 	bne	r2,zero,72a8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
    729c:	d0a60317 	ldw	r2,-26612(gp)
    72a0:	10800c83 	ldbu	r2,50(r2)
    72a4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    72a8:	e0fffd03 	ldbu	r3,-12(fp)
    72ac:	00800074 	movhi	r2,1
    72b0:	10932604 	addi	r2,r2,19608
    72b4:	18c7883a 	add	r3,r3,r3
    72b8:	18c7883a 	add	r3,r3,r3
    72bc:	10c5883a 	add	r2,r2,r3
    72c0:	10800017 	ldw	r2,0(r2)
    72c4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    72c8:	e0bff717 	ldw	r2,-36(fp)
    72cc:	1000081e 	bne	r2,zero,72f0 <OSTaskNameSet+0x108>
    72d0:	e0bff517 	ldw	r2,-44(fp)
    72d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    72d8:	e0bff617 	ldw	r2,-40(fp)
    72dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
    72e0:	e0bfff17 	ldw	r2,-4(fp)
    72e4:	00c010c4 	movi	r3,67
    72e8:	10c00005 	stb	r3,0(r2)
        return;
    72ec:	00002606 	br	7388 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    72f0:	e0bff717 	ldw	r2,-36(fp)
    72f4:	10800058 	cmpnei	r2,r2,1
    72f8:	1000081e 	bne	r2,zero,731c <OSTaskNameSet+0x134>
    72fc:	e0bff517 	ldw	r2,-44(fp)
    7300:	e0bff815 	stw	r2,-32(fp)
    7304:	e0bff817 	ldw	r2,-32(fp)
    7308:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
    730c:	e0bfff17 	ldw	r2,-4(fp)
    7310:	00c010c4 	movi	r3,67
    7314:	10c00005 	stb	r3,0(r2)
        return;
    7318:	00001b06 	br	7388 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    731c:	e13ffe17 	ldw	r4,-8(fp)
    7320:	00022b80 	call	22b8 <OS_StrLen>
    7324:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    7328:	e0bffa03 	ldbu	r2,-24(fp)
    732c:	10800830 	cmpltui	r2,r2,32
    7330:	1000081e 	bne	r2,zero,7354 <OSTaskNameSet+0x16c>
    7334:	e0bff517 	ldw	r2,-44(fp)
    7338:	e0bff915 	stw	r2,-28(fp)
    733c:	e0bff917 	ldw	r2,-28(fp)
    7340:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    7344:	e0bfff17 	ldw	r2,-4(fp)
    7348:	00c01044 	movi	r3,65
    734c:	10c00005 	stb	r3,0(r2)
        return;
    7350:	00000d06 	br	7388 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    7354:	e0bff717 	ldw	r2,-36(fp)
    7358:	10801304 	addi	r2,r2,76
    735c:	e17ffe17 	ldw	r5,-8(fp)
    7360:	1009883a 	mov	r4,r2
    7364:	00022440 	call	2244 <OS_StrCopy>
    7368:	e0bff517 	ldw	r2,-44(fp)
    736c:	e0bffb15 	stw	r2,-20(fp)
    7370:	e0bffb17 	ldw	r2,-20(fp)
    7374:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    7378:	e0bfff17 	ldw	r2,-4(fp)
    737c:	10000005 	stb	zero,0(r2)
    7380:	00000106 	br	7388 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
    7384:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
    7388:	e037883a 	mov	sp,fp
    738c:	dfc00117 	ldw	ra,4(sp)
    7390:	df000017 	ldw	fp,0(sp)
    7394:	dec00204 	addi	sp,sp,8
    7398:	f800283a 	ret

0000739c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    739c:	defff404 	addi	sp,sp,-48
    73a0:	dfc00b15 	stw	ra,44(sp)
    73a4:	df000a15 	stw	fp,40(sp)
    73a8:	df000a04 	addi	fp,sp,40
    73ac:	2005883a 	mov	r2,r4
    73b0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    73b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
    73b8:	e0bfff03 	ldbu	r2,-4(fp)
    73bc:	10800530 	cmpltui	r2,r2,20
    73c0:	1000021e 	bne	r2,zero,73cc <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    73c4:	00800a84 	movi	r2,42
    73c8:	00006406 	br	755c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    73cc:	0005303a 	rdctl	r2,status
    73d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    73d4:	e0fffe17 	ldw	r3,-8(fp)
    73d8:	00bfff84 	movi	r2,-2
    73dc:	1884703a 	and	r2,r3,r2
    73e0:	1001703a 	wrctl	status,r2
  
  return context;
    73e4:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    73e8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
    73ec:	e0ffff03 	ldbu	r3,-4(fp)
    73f0:	00800074 	movhi	r2,1
    73f4:	10932604 	addi	r2,r2,19608
    73f8:	18c7883a 	add	r3,r3,r3
    73fc:	18c7883a 	add	r3,r3,r3
    7400:	10c5883a 	add	r2,r2,r3
    7404:	10800017 	ldw	r2,0(r2)
    7408:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    740c:	e0bff817 	ldw	r2,-32(fp)
    7410:	1000061e 	bne	r2,zero,742c <OSTaskResume+0x90>
    7414:	e0bff617 	ldw	r2,-40(fp)
    7418:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    741c:	e0bff717 	ldw	r2,-36(fp)
    7420:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
    7424:	00801184 	movi	r2,70
    7428:	00004c06 	br	755c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    742c:	e0bff817 	ldw	r2,-32(fp)
    7430:	10800058 	cmpnei	r2,r2,1
    7434:	1000061e 	bne	r2,zero,7450 <OSTaskResume+0xb4>
    7438:	e0bff617 	ldw	r2,-40(fp)
    743c:	e0bff915 	stw	r2,-28(fp)
    7440:	e0bff917 	ldw	r2,-28(fp)
    7444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7448:	008010c4 	movi	r2,67
    744c:	00004306 	br	755c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    7450:	e0bff817 	ldw	r2,-32(fp)
    7454:	10800c03 	ldbu	r2,48(r2)
    7458:	10803fcc 	andi	r2,r2,255
    745c:	1080020c 	andi	r2,r2,8
    7460:	10003926 	beq	r2,zero,7548 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    7464:	e0bff817 	ldw	r2,-32(fp)
    7468:	10c00c03 	ldbu	r3,48(r2)
    746c:	00bffdc4 	movi	r2,-9
    7470:	1884703a 	and	r2,r3,r2
    7474:	1007883a 	mov	r3,r2
    7478:	e0bff817 	ldw	r2,-32(fp)
    747c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    7480:	e0bff817 	ldw	r2,-32(fp)
    7484:	10800c03 	ldbu	r2,48(r2)
    7488:	10803fcc 	andi	r2,r2,255
    748c:	1000281e 	bne	r2,zero,7530 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
    7490:	e0bff817 	ldw	r2,-32(fp)
    7494:	10800b8b 	ldhu	r2,46(r2)
    7498:	10bfffcc 	andi	r2,r2,65535
    749c:	10001f1e 	bne	r2,zero,751c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    74a0:	e0bff817 	ldw	r2,-32(fp)
    74a4:	10c00d83 	ldbu	r3,54(r2)
    74a8:	d0a60003 	ldbu	r2,-26624(gp)
    74ac:	1884b03a 	or	r2,r3,r2
    74b0:	d0a60005 	stb	r2,-26624(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    74b4:	e0bff817 	ldw	r2,-32(fp)
    74b8:	10800d03 	ldbu	r2,52(r2)
    74bc:	10c03fcc 	andi	r3,r2,255
    74c0:	e0bff817 	ldw	r2,-32(fp)
    74c4:	10800d03 	ldbu	r2,52(r2)
    74c8:	11003fcc 	andi	r4,r2,255
    74cc:	d0a60044 	addi	r2,gp,-26623
    74d0:	2085883a 	add	r2,r4,r2
    74d4:	11000003 	ldbu	r4,0(r2)
    74d8:	e0bff817 	ldw	r2,-32(fp)
    74dc:	10800d43 	ldbu	r2,53(r2)
    74e0:	2084b03a 	or	r2,r4,r2
    74e4:	1009883a 	mov	r4,r2
    74e8:	d0a60044 	addi	r2,gp,-26623
    74ec:	1885883a 	add	r2,r3,r2
    74f0:	11000005 	stb	r4,0(r2)
    74f4:	e0bff617 	ldw	r2,-40(fp)
    74f8:	e0bffa15 	stw	r2,-24(fp)
    74fc:	e0bffa17 	ldw	r2,-24(fp)
    7500:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
    7504:	d0a5f443 	ldbu	r2,-26671(gp)
    7508:	10803fcc 	andi	r2,r2,255
    750c:	10800058 	cmpnei	r2,r2,1
    7510:	10000b1e 	bne	r2,zero,7540 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
    7514:	00021000 	call	2100 <OS_Sched>
    7518:	00000906 	br	7540 <OSTaskResume+0x1a4>
    751c:	e0bff617 	ldw	r2,-40(fp)
    7520:	e0bffb15 	stw	r2,-20(fp)
    7524:	e0bffb17 	ldw	r2,-20(fp)
    7528:	1001703a 	wrctl	status,r2
    752c:	00000406 	br	7540 <OSTaskResume+0x1a4>
    7530:	e0bff617 	ldw	r2,-40(fp)
    7534:	e0bffc15 	stw	r2,-16(fp)
    7538:	e0bffc17 	ldw	r2,-16(fp)
    753c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    7540:	0005883a 	mov	r2,zero
    7544:	00000506 	br	755c <OSTaskResume+0x1c0>
    7548:	e0bff617 	ldw	r2,-40(fp)
    754c:	e0bffd15 	stw	r2,-12(fp)
    7550:	e0bffd17 	ldw	r2,-12(fp)
    7554:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
    7558:	00801104 	movi	r2,68
}
    755c:	e037883a 	mov	sp,fp
    7560:	dfc00117 	ldw	ra,4(sp)
    7564:	df000017 	ldw	fp,0(sp)
    7568:	dec00204 	addi	sp,sp,8
    756c:	f800283a 	ret

00007570 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
    7570:	defff304 	addi	sp,sp,-52
    7574:	df000c15 	stw	fp,48(sp)
    7578:	df000c04 	addi	fp,sp,48
    757c:	2005883a 	mov	r2,r4
    7580:	e17fff15 	stw	r5,-4(fp)
    7584:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    7588:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
    758c:	e0bffe03 	ldbu	r2,-8(fp)
    7590:	10800570 	cmpltui	r2,r2,21
    7594:	1000051e 	bne	r2,zero,75ac <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
    7598:	e0bffe03 	ldbu	r2,-8(fp)
    759c:	10803fe0 	cmpeqi	r2,r2,255
    75a0:	1000021e 	bne	r2,zero,75ac <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
    75a4:	00800a84 	movi	r2,42
    75a8:	00005d06 	br	7720 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
    75ac:	e0bfff17 	ldw	r2,-4(fp)
    75b0:	1000021e 	bne	r2,zero,75bc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
    75b4:	00800244 	movi	r2,9
    75b8:	00005906 	br	7720 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
    75bc:	e0bfff17 	ldw	r2,-4(fp)
    75c0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
    75c4:	e0bfff17 	ldw	r2,-4(fp)
    75c8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    75cc:	0005303a 	rdctl	r2,status
    75d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    75d4:	e0fffd17 	ldw	r3,-12(fp)
    75d8:	00bfff84 	movi	r2,-2
    75dc:	1884703a 	and	r2,r3,r2
    75e0:	1001703a 	wrctl	status,r2
  
  return context;
    75e4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
    75e8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
    75ec:	e0bffe03 	ldbu	r2,-8(fp)
    75f0:	10803fd8 	cmpnei	r2,r2,255
    75f4:	1000031e 	bne	r2,zero,7604 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
    75f8:	d0a60317 	ldw	r2,-26612(gp)
    75fc:	10800c83 	ldbu	r2,50(r2)
    7600:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    7604:	e0fffe03 	ldbu	r3,-8(fp)
    7608:	00800074 	movhi	r2,1
    760c:	10932604 	addi	r2,r2,19608
    7610:	18c7883a 	add	r3,r3,r3
    7614:	18c7883a 	add	r3,r3,r3
    7618:	10c5883a 	add	r2,r2,r3
    761c:	10800017 	ldw	r2,0(r2)
    7620:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
    7624:	e0bff817 	ldw	r2,-32(fp)
    7628:	1000061e 	bne	r2,zero,7644 <OSTaskStkChk+0xd4>
    762c:	e0bff617 	ldw	r2,-40(fp)
    7630:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7634:	e0bff717 	ldw	r2,-36(fp)
    7638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    763c:	008010c4 	movi	r2,67
    7640:	00003706 	br	7720 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    7644:	e0bff817 	ldw	r2,-32(fp)
    7648:	10800058 	cmpnei	r2,r2,1
    764c:	1000061e 	bne	r2,zero,7668 <OSTaskStkChk+0xf8>
    7650:	e0bff617 	ldw	r2,-40(fp)
    7654:	e0bff915 	stw	r2,-28(fp)
    7658:	e0bff917 	ldw	r2,-28(fp)
    765c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7660:	008010c4 	movi	r2,67
    7664:	00002e06 	br	7720 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
    7668:	e0bff817 	ldw	r2,-32(fp)
    766c:	1080040b 	ldhu	r2,16(r2)
    7670:	10bfffcc 	andi	r2,r2,65535
    7674:	1080004c 	andi	r2,r2,1
    7678:	1000061e 	bne	r2,zero,7694 <OSTaskStkChk+0x124>
    767c:	e0bff617 	ldw	r2,-40(fp)
    7680:	e0bffa15 	stw	r2,-24(fp)
    7684:	e0bffa17 	ldw	r2,-24(fp)
    7688:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
    768c:	00801144 	movi	r2,69
    7690:	00002306 	br	7720 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
    7694:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
    7698:	e0bff817 	ldw	r2,-32(fp)
    769c:	10800317 	ldw	r2,12(r2)
    76a0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
    76a4:	e0bff817 	ldw	r2,-32(fp)
    76a8:	10800217 	ldw	r2,8(r2)
    76ac:	e0bff415 	stw	r2,-48(fp)
    76b0:	e0bff617 	ldw	r2,-40(fp)
    76b4:	e0bffb15 	stw	r2,-20(fp)
    76b8:	e0bffb17 	ldw	r2,-20(fp)
    76bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    76c0:	00000306 	br	76d0 <OSTaskStkChk+0x160>
        nfree++;
    76c4:	e0bff517 	ldw	r2,-44(fp)
    76c8:	10800044 	addi	r2,r2,1
    76cc:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
    76d0:	e0bff417 	ldw	r2,-48(fp)
    76d4:	10c00104 	addi	r3,r2,4
    76d8:	e0fff415 	stw	r3,-48(fp)
    76dc:	10800017 	ldw	r2,0(r2)
    76e0:	103ff826 	beq	r2,zero,76c4 <__alt_data_end+0xfffef024>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
    76e4:	e0bff517 	ldw	r2,-44(fp)
    76e8:	1085883a 	add	r2,r2,r2
    76ec:	1085883a 	add	r2,r2,r2
    76f0:	1007883a 	mov	r3,r2
    76f4:	e0bfff17 	ldw	r2,-4(fp)
    76f8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
    76fc:	e0fffc17 	ldw	r3,-16(fp)
    7700:	e0bff517 	ldw	r2,-44(fp)
    7704:	1885c83a 	sub	r2,r3,r2
    7708:	1085883a 	add	r2,r2,r2
    770c:	1085883a 	add	r2,r2,r2
    7710:	1007883a 	mov	r3,r2
    7714:	e0bfff17 	ldw	r2,-4(fp)
    7718:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
    771c:	0005883a 	mov	r2,zero
}
    7720:	e037883a 	mov	sp,fp
    7724:	df000017 	ldw	fp,0(sp)
    7728:	dec00104 	addi	sp,sp,4
    772c:	f800283a 	ret

00007730 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    7730:	defff504 	addi	sp,sp,-44
    7734:	dfc00a15 	stw	ra,40(sp)
    7738:	df000915 	stw	fp,36(sp)
    773c:	df000904 	addi	fp,sp,36
    7740:	2005883a 	mov	r2,r4
    7744:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7748:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
    774c:	e0bfff03 	ldbu	r2,-4(fp)
    7750:	10800518 	cmpnei	r2,r2,20
    7754:	1000021e 	bne	r2,zero,7760 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
    7758:	008011c4 	movi	r2,71
    775c:	00006806 	br	7900 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
    7760:	e0bfff03 	ldbu	r2,-4(fp)
    7764:	10800530 	cmpltui	r2,r2,20
    7768:	1000051e 	bne	r2,zero,7780 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
    776c:	e0bfff03 	ldbu	r2,-4(fp)
    7770:	10803fe0 	cmpeqi	r2,r2,255
    7774:	1000021e 	bne	r2,zero,7780 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
    7778:	00800a84 	movi	r2,42
    777c:	00006006 	br	7900 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7780:	0005303a 	rdctl	r2,status
    7784:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7788:	e0fffe17 	ldw	r3,-8(fp)
    778c:	00bfff84 	movi	r2,-2
    7790:	1884703a 	and	r2,r3,r2
    7794:	1001703a 	wrctl	status,r2
  
  return context;
    7798:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
    779c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    77a0:	e0bfff03 	ldbu	r2,-4(fp)
    77a4:	10803fd8 	cmpnei	r2,r2,255
    77a8:	1000061e 	bne	r2,zero,77c4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
    77ac:	d0a60317 	ldw	r2,-26612(gp)
    77b0:	10800c83 	ldbu	r2,50(r2)
    77b4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
    77b8:	00800044 	movi	r2,1
    77bc:	e0bff705 	stb	r2,-36(fp)
    77c0:	00000906 	br	77e8 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    77c4:	d0a60317 	ldw	r2,-26612(gp)
    77c8:	10800c83 	ldbu	r2,50(r2)
    77cc:	10c03fcc 	andi	r3,r2,255
    77d0:	e0bfff03 	ldbu	r2,-4(fp)
    77d4:	1880031e 	bne	r3,r2,77e4 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
    77d8:	00800044 	movi	r2,1
    77dc:	e0bff705 	stb	r2,-36(fp)
    77e0:	00000106 	br	77e8 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    77e4:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    77e8:	e0ffff03 	ldbu	r3,-4(fp)
    77ec:	00800074 	movhi	r2,1
    77f0:	10932604 	addi	r2,r2,19608
    77f4:	18c7883a 	add	r3,r3,r3
    77f8:	18c7883a 	add	r3,r3,r3
    77fc:	10c5883a 	add	r2,r2,r3
    7800:	10800017 	ldw	r2,0(r2)
    7804:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    7808:	e0bffa17 	ldw	r2,-24(fp)
    780c:	1000061e 	bne	r2,zero,7828 <OSTaskSuspend+0xf8>
    7810:	e0bff817 	ldw	r2,-32(fp)
    7814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7818:	e0bff917 	ldw	r2,-28(fp)
    781c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
    7820:	00801204 	movi	r2,72
    7824:	00003606 	br	7900 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    7828:	e0bffa17 	ldw	r2,-24(fp)
    782c:	10800058 	cmpnei	r2,r2,1
    7830:	1000061e 	bne	r2,zero,784c <OSTaskSuspend+0x11c>
    7834:	e0bff817 	ldw	r2,-32(fp)
    7838:	e0bffb15 	stw	r2,-20(fp)
    783c:	e0bffb17 	ldw	r2,-20(fp)
    7840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    7844:	008010c4 	movi	r2,67
    7848:	00002d06 	br	7900 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
    784c:	e0bffa17 	ldw	r2,-24(fp)
    7850:	10800d03 	ldbu	r2,52(r2)
    7854:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    7858:	e0fffd03 	ldbu	r3,-12(fp)
    785c:	e13ffd03 	ldbu	r4,-12(fp)
    7860:	d0a60044 	addi	r2,gp,-26623
    7864:	2085883a 	add	r2,r4,r2
    7868:	10800003 	ldbu	r2,0(r2)
    786c:	1009883a 	mov	r4,r2
    7870:	e0bffa17 	ldw	r2,-24(fp)
    7874:	10800d43 	ldbu	r2,53(r2)
    7878:	0084303a 	nor	r2,zero,r2
    787c:	2084703a 	and	r2,r4,r2
    7880:	1009883a 	mov	r4,r2
    7884:	d0a60044 	addi	r2,gp,-26623
    7888:	1885883a 	add	r2,r3,r2
    788c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
    7890:	e0fffd03 	ldbu	r3,-12(fp)
    7894:	d0a60044 	addi	r2,gp,-26623
    7898:	1885883a 	add	r2,r3,r2
    789c:	10800003 	ldbu	r2,0(r2)
    78a0:	10803fcc 	andi	r2,r2,255
    78a4:	1000071e 	bne	r2,zero,78c4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    78a8:	e0bffa17 	ldw	r2,-24(fp)
    78ac:	10800d83 	ldbu	r2,54(r2)
    78b0:	0084303a 	nor	r2,zero,r2
    78b4:	1007883a 	mov	r3,r2
    78b8:	d0a60003 	ldbu	r2,-26624(gp)
    78bc:	1884703a 	and	r2,r3,r2
    78c0:	d0a60005 	stb	r2,-26624(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    78c4:	e0bffa17 	ldw	r2,-24(fp)
    78c8:	10800c03 	ldbu	r2,48(r2)
    78cc:	10800214 	ori	r2,r2,8
    78d0:	1007883a 	mov	r3,r2
    78d4:	e0bffa17 	ldw	r2,-24(fp)
    78d8:	10c00c05 	stb	r3,48(r2)
    78dc:	e0bff817 	ldw	r2,-32(fp)
    78e0:	e0bffc15 	stw	r2,-16(fp)
    78e4:	e0bffc17 	ldw	r2,-16(fp)
    78e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    78ec:	e0bff703 	ldbu	r2,-36(fp)
    78f0:	10800058 	cmpnei	r2,r2,1
    78f4:	1000011e 	bne	r2,zero,78fc <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
    78f8:	00021000 	call	2100 <OS_Sched>
    }
    return (OS_ERR_NONE);
    78fc:	0005883a 	mov	r2,zero
}
    7900:	e037883a 	mov	sp,fp
    7904:	dfc00117 	ldw	ra,4(sp)
    7908:	df000017 	ldw	fp,0(sp)
    790c:	dec00204 	addi	sp,sp,8
    7910:	f800283a 	ret

00007914 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    7914:	defff604 	addi	sp,sp,-40
    7918:	dfc00915 	stw	ra,36(sp)
    791c:	df000815 	stw	fp,32(sp)
    7920:	df000804 	addi	fp,sp,32
    7924:	2005883a 	mov	r2,r4
    7928:	e17fff15 	stw	r5,-4(fp)
    792c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7930:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
    7934:	e0bffe03 	ldbu	r2,-8(fp)
    7938:	10800570 	cmpltui	r2,r2,21
    793c:	1000051e 	bne	r2,zero,7954 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
    7940:	e0bffe03 	ldbu	r2,-8(fp)
    7944:	10803fe0 	cmpeqi	r2,r2,255
    7948:	1000021e 	bne	r2,zero,7954 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
    794c:	00800a84 	movi	r2,42
    7950:	00003406 	br	7a24 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
    7954:	e0bfff17 	ldw	r2,-4(fp)
    7958:	1000021e 	bne	r2,zero,7964 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
    795c:	00800244 	movi	r2,9
    7960:	00003006 	br	7a24 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7964:	0005303a 	rdctl	r2,status
    7968:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    796c:	e0fffd17 	ldw	r3,-12(fp)
    7970:	00bfff84 	movi	r2,-2
    7974:	1884703a 	and	r2,r3,r2
    7978:	1001703a 	wrctl	status,r2
  
  return context;
    797c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
    7980:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    7984:	e0bffe03 	ldbu	r2,-8(fp)
    7988:	10803fd8 	cmpnei	r2,r2,255
    798c:	1000031e 	bne	r2,zero,799c <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
    7990:	d0a60317 	ldw	r2,-26612(gp)
    7994:	10800c83 	ldbu	r2,50(r2)
    7998:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
    799c:	e0fffe03 	ldbu	r3,-8(fp)
    79a0:	00800074 	movhi	r2,1
    79a4:	10932604 	addi	r2,r2,19608
    79a8:	18c7883a 	add	r3,r3,r3
    79ac:	18c7883a 	add	r3,r3,r3
    79b0:	10c5883a 	add	r2,r2,r3
    79b4:	10800017 	ldw	r2,0(r2)
    79b8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    79bc:	e0bffa17 	ldw	r2,-24(fp)
    79c0:	1000061e 	bne	r2,zero,79dc <OSTaskQuery+0xc8>
    79c4:	e0bff817 	ldw	r2,-32(fp)
    79c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    79cc:	e0bff917 	ldw	r2,-28(fp)
    79d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
    79d4:	00800a44 	movi	r2,41
    79d8:	00001206 	br	7a24 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    79dc:	e0bffa17 	ldw	r2,-24(fp)
    79e0:	10800058 	cmpnei	r2,r2,1
    79e4:	1000061e 	bne	r2,zero,7a00 <OSTaskQuery+0xec>
    79e8:	e0bff817 	ldw	r2,-32(fp)
    79ec:	e0bffb15 	stw	r2,-20(fp)
    79f0:	e0bffb17 	ldw	r2,-20(fp)
    79f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
    79f8:	008010c4 	movi	r2,67
    79fc:	00000906 	br	7a24 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    7a00:	01801b04 	movi	r6,108
    7a04:	e17ffa17 	ldw	r5,-24(fp)
    7a08:	e13fff17 	ldw	r4,-4(fp)
    7a0c:	00020980 	call	2098 <OS_MemCopy>
    7a10:	e0bff817 	ldw	r2,-32(fp)
    7a14:	e0bffc15 	stw	r2,-16(fp)
    7a18:	e0bffc17 	ldw	r2,-16(fp)
    7a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
    7a20:	0005883a 	mov	r2,zero
}
    7a24:	e037883a 	mov	sp,fp
    7a28:	dfc00117 	ldw	ra,4(sp)
    7a2c:	df000017 	ldw	fp,0(sp)
    7a30:	dec00204 	addi	sp,sp,8
    7a34:	f800283a 	ret

00007a38 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    7a38:	defffc04 	addi	sp,sp,-16
    7a3c:	df000315 	stw	fp,12(sp)
    7a40:	df000304 	addi	fp,sp,12
    7a44:	e13ffd15 	stw	r4,-12(fp)
    7a48:	e17ffe15 	stw	r5,-8(fp)
    7a4c:	3005883a 	mov	r2,r6
    7a50:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
    7a54:	e0bfff0b 	ldhu	r2,-4(fp)
    7a58:	1080004c 	andi	r2,r2,1
    7a5c:	10000d26 	beq	r2,zero,7a94 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
    7a60:	e0bfff0b 	ldhu	r2,-4(fp)
    7a64:	1080008c 	andi	r2,r2,2
    7a68:	10000a26 	beq	r2,zero,7a94 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    7a6c:	00000706 	br	7a8c <OS_TaskStkClr+0x54>
                size--;
    7a70:	e0bffe17 	ldw	r2,-8(fp)
    7a74:	10bfffc4 	addi	r2,r2,-1
    7a78:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
    7a7c:	e0bffd17 	ldw	r2,-12(fp)
    7a80:	10c00104 	addi	r3,r2,4
    7a84:	e0fffd15 	stw	r3,-12(fp)
    7a88:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
    7a8c:	e0bffe17 	ldw	r2,-8(fp)
    7a90:	103ff71e 	bne	r2,zero,7a70 <__alt_data_end+0xfffef3d0>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
    7a94:	0001883a 	nop
    7a98:	e037883a 	mov	sp,fp
    7a9c:	df000017 	ldw	fp,0(sp)
    7aa0:	dec00104 	addi	sp,sp,4
    7aa4:	f800283a 	ret

00007aa8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    7aa8:	defff904 	addi	sp,sp,-28
    7aac:	dfc00615 	stw	ra,24(sp)
    7ab0:	df000515 	stw	fp,20(sp)
    7ab4:	df000504 	addi	fp,sp,20
    7ab8:	2005883a 	mov	r2,r4
    7abc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7ac0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7ac4:	d0a60203 	ldbu	r2,-26616(gp)
    7ac8:	10803fcc 	andi	r2,r2,255
    7acc:	1000311e 	bne	r2,zero,7b94 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    7ad0:	e0bfff0b 	ldhu	r2,-4(fp)
    7ad4:	10003026 	beq	r2,zero,7b98 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7ad8:	0005303a 	rdctl	r2,status
    7adc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7ae0:	e0fffe17 	ldw	r3,-8(fp)
    7ae4:	00bfff84 	movi	r2,-2
    7ae8:	1884703a 	and	r2,r3,r2
    7aec:	1001703a 	wrctl	status,r2
  
  return context;
    7af0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
    7af4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    7af8:	d0a60317 	ldw	r2,-26612(gp)
    7afc:	10800d03 	ldbu	r2,52(r2)
    7b00:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    7b04:	e0fffd03 	ldbu	r3,-12(fp)
    7b08:	e13ffd03 	ldbu	r4,-12(fp)
    7b0c:	d0a60044 	addi	r2,gp,-26623
    7b10:	2085883a 	add	r2,r4,r2
    7b14:	10800003 	ldbu	r2,0(r2)
    7b18:	1009883a 	mov	r4,r2
    7b1c:	d0a60317 	ldw	r2,-26612(gp)
    7b20:	10800d43 	ldbu	r2,53(r2)
    7b24:	0084303a 	nor	r2,zero,r2
    7b28:	2084703a 	and	r2,r4,r2
    7b2c:	1009883a 	mov	r4,r2
    7b30:	d0a60044 	addi	r2,gp,-26623
    7b34:	1885883a 	add	r2,r3,r2
    7b38:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
    7b3c:	e0fffd03 	ldbu	r3,-12(fp)
    7b40:	d0a60044 	addi	r2,gp,-26623
    7b44:	1885883a 	add	r2,r3,r2
    7b48:	10800003 	ldbu	r2,0(r2)
    7b4c:	10803fcc 	andi	r2,r2,255
    7b50:	1000071e 	bne	r2,zero,7b70 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    7b54:	d0a60317 	ldw	r2,-26612(gp)
    7b58:	10800d83 	ldbu	r2,54(r2)
    7b5c:	0084303a 	nor	r2,zero,r2
    7b60:	1007883a 	mov	r3,r2
    7b64:	d0a60003 	ldbu	r2,-26624(gp)
    7b68:	1884703a 	and	r2,r3,r2
    7b6c:	d0a60005 	stb	r2,-26624(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    7b70:	d0a60317 	ldw	r2,-26612(gp)
    7b74:	e0ffff0b 	ldhu	r3,-4(fp)
    7b78:	10c00b8d 	sth	r3,46(r2)
    7b7c:	e0bffb17 	ldw	r2,-20(fp)
    7b80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7b84:	e0bffc17 	ldw	r2,-16(fp)
    7b88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    7b8c:	00021000 	call	2100 <OS_Sched>
    7b90:	00000106 	br	7b98 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    7b94:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    7b98:	e037883a 	mov	sp,fp
    7b9c:	dfc00117 	ldw	ra,4(sp)
    7ba0:	df000017 	ldw	fp,0(sp)
    7ba4:	dec00204 	addi	sp,sp,8
    7ba8:	f800283a 	ret

00007bac <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    7bac:	defff704 	addi	sp,sp,-36
    7bb0:	dfc00815 	stw	ra,32(sp)
    7bb4:	df000715 	stw	fp,28(sp)
    7bb8:	dc000615 	stw	r16,24(sp)
    7bbc:	df000704 	addi	fp,sp,28
    7bc0:	2011883a 	mov	r8,r4
    7bc4:	2809883a 	mov	r4,r5
    7bc8:	3007883a 	mov	r3,r6
    7bcc:	3805883a 	mov	r2,r7
    7bd0:	e23ffb05 	stb	r8,-20(fp)
    7bd4:	e13ffc05 	stb	r4,-16(fp)
    7bd8:	e0fffd05 	stb	r3,-12(fp)
    7bdc:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    7be0:	d0a60203 	ldbu	r2,-26616(gp)
    7be4:	10803fcc 	andi	r2,r2,255
    7be8:	10000226 	beq	r2,zero,7bf4 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
    7bec:	00801544 	movi	r2,85
    7bf0:	00004706 	br	7d10 <OSTimeDlyHMSM+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
    7bf4:	e0bffb03 	ldbu	r2,-20(fp)
    7bf8:	1000081e 	bne	r2,zero,7c1c <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
    7bfc:	e0bffc03 	ldbu	r2,-16(fp)
    7c00:	1000061e 	bne	r2,zero,7c1c <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
    7c04:	e0bffd03 	ldbu	r2,-12(fp)
    7c08:	1000041e 	bne	r2,zero,7c1c <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
    7c0c:	e0bffe0b 	ldhu	r2,-8(fp)
    7c10:	1000021e 	bne	r2,zero,7c1c <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
    7c14:	00801504 	movi	r2,84
    7c18:	00003d06 	br	7d10 <OSTimeDlyHMSM+0x164>
                }
            }
        }
    }
    if (minutes > 59) {
    7c1c:	e0bffc03 	ldbu	r2,-16(fp)
    7c20:	10800f30 	cmpltui	r2,r2,60
    7c24:	1000021e 	bne	r2,zero,7c30 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
    7c28:	00801444 	movi	r2,81
    7c2c:	00003806 	br	7d10 <OSTimeDlyHMSM+0x164>
    }
    if (seconds > 59) {
    7c30:	e0bffd03 	ldbu	r2,-12(fp)
    7c34:	10800f30 	cmpltui	r2,r2,60
    7c38:	1000021e 	bne	r2,zero,7c44 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
    7c3c:	00801484 	movi	r2,82
    7c40:	00003306 	br	7d10 <OSTimeDlyHMSM+0x164>
    }
    if (ms > 999) {
    7c44:	e0bffe0b 	ldhu	r2,-8(fp)
    7c48:	1080fa30 	cmpltui	r2,r2,1000
    7c4c:	1000021e 	bne	r2,zero,7c58 <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
    7c50:	008014c4 	movi	r2,83
    7c54:	00002e06 	br	7d10 <OSTimeDlyHMSM+0x164>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    7c58:	e0bffb03 	ldbu	r2,-20(fp)
    7c5c:	01438404 	movi	r5,3600
    7c60:	1009883a 	mov	r4,r2
    7c64:	000aa680 	call	aa68 <__mulsi3>
    7c68:	1021883a 	mov	r16,r2
    7c6c:	e0bffc03 	ldbu	r2,-16(fp)
    7c70:	01400f04 	movi	r5,60
    7c74:	1009883a 	mov	r4,r2
    7c78:	000aa680 	call	aa68 <__mulsi3>
    7c7c:	8087883a 	add	r3,r16,r2
    7c80:	e0bffd03 	ldbu	r2,-12(fp)
    7c84:	1885883a 	add	r2,r3,r2
    7c88:	0140fa04 	movi	r5,1000
    7c8c:	1009883a 	mov	r4,r2
    7c90:	000aa680 	call	aa68 <__mulsi3>
    7c94:	1021883a 	mov	r16,r2
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    7c98:	e0bffe0b 	ldhu	r2,-8(fp)
    7c9c:	0140fa04 	movi	r5,1000
    7ca0:	1009883a 	mov	r4,r2
    7ca4:	000aa680 	call	aa68 <__mulsi3>
    7ca8:	0140fa04 	movi	r5,1000
    7cac:	1009883a 	mov	r4,r2
    7cb0:	000a9ac0 	call	a9ac <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    7cb4:	8085883a 	add	r2,r16,r2
    7cb8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    7cbc:	e0bffa17 	ldw	r2,-24(fp)
    7cc0:	1004d43a 	srli	r2,r2,16
    7cc4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    7cc8:	e0bffa17 	ldw	r2,-24(fp)
    7ccc:	10bfffcc 	andi	r2,r2,65535
    7cd0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
    7cd4:	e0bffa17 	ldw	r2,-24(fp)
    7cd8:	10bfffcc 	andi	r2,r2,65535
    7cdc:	1009883a 	mov	r4,r2
    7ce0:	0007aa80 	call	7aa8 <OSTimeDly>
    while (loops > 0) {
    7ce4:	00000706 	br	7d04 <OSTimeDlyHMSM+0x158>
        OSTimeDly((INT16U)32768u);
    7ce8:	01200014 	movui	r4,32768
    7cec:	0007aa80 	call	7aa8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    7cf0:	01200014 	movui	r4,32768
    7cf4:	0007aa80 	call	7aa8 <OSTimeDly>
        loops--;
    7cf8:	e0bff90b 	ldhu	r2,-28(fp)
    7cfc:	10bfffc4 	addi	r2,r2,-1
    7d00:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    7d04:	e0bff90b 	ldhu	r2,-28(fp)
    7d08:	103ff71e 	bne	r2,zero,7ce8 <__alt_data_end+0xfffef648>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    7d0c:	0005883a 	mov	r2,zero
}
    7d10:	e6ffff04 	addi	sp,fp,-4
    7d14:	dfc00217 	ldw	ra,8(sp)
    7d18:	df000117 	ldw	fp,4(sp)
    7d1c:	dc000017 	ldw	r16,0(sp)
    7d20:	dec00304 	addi	sp,sp,12
    7d24:	f800283a 	ret

00007d28 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    7d28:	defff504 	addi	sp,sp,-44
    7d2c:	dfc00a15 	stw	ra,40(sp)
    7d30:	df000915 	stw	fp,36(sp)
    7d34:	df000904 	addi	fp,sp,36
    7d38:	2005883a 	mov	r2,r4
    7d3c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    7d40:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
    7d44:	e0bfff03 	ldbu	r2,-4(fp)
    7d48:	10800530 	cmpltui	r2,r2,20
    7d4c:	1000021e 	bne	r2,zero,7d58 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
    7d50:	00800a84 	movi	r2,42
    7d54:	00006406 	br	7ee8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7d58:	0005303a 	rdctl	r2,status
    7d5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7d60:	e0fffe17 	ldw	r3,-8(fp)
    7d64:	00bfff84 	movi	r2,-2
    7d68:	1884703a 	and	r2,r3,r2
    7d6c:	1001703a 	wrctl	status,r2
  
  return context;
    7d70:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
    7d74:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    7d78:	e0ffff03 	ldbu	r3,-4(fp)
    7d7c:	00800074 	movhi	r2,1
    7d80:	10932604 	addi	r2,r2,19608
    7d84:	18c7883a 	add	r3,r3,r3
    7d88:	18c7883a 	add	r3,r3,r3
    7d8c:	10c5883a 	add	r2,r2,r3
    7d90:	10800017 	ldw	r2,0(r2)
    7d94:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
    7d98:	e0bff917 	ldw	r2,-28(fp)
    7d9c:	1000061e 	bne	r2,zero,7db8 <OSTimeDlyResume+0x90>
    7da0:	e0bff717 	ldw	r2,-36(fp)
    7da4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7da8:	e0bff817 	ldw	r2,-32(fp)
    7dac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    7db0:	008010c4 	movi	r2,67
    7db4:	00004c06 	br	7ee8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
    7db8:	e0bff917 	ldw	r2,-28(fp)
    7dbc:	10800058 	cmpnei	r2,r2,1
    7dc0:	1000061e 	bne	r2,zero,7ddc <OSTimeDlyResume+0xb4>
    7dc4:	e0bff717 	ldw	r2,-36(fp)
    7dc8:	e0bffa15 	stw	r2,-24(fp)
    7dcc:	e0bffa17 	ldw	r2,-24(fp)
    7dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    7dd4:	008010c4 	movi	r2,67
    7dd8:	00004306 	br	7ee8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    7ddc:	e0bff917 	ldw	r2,-28(fp)
    7de0:	10800b8b 	ldhu	r2,46(r2)
    7de4:	10bfffcc 	andi	r2,r2,65535
    7de8:	1000061e 	bne	r2,zero,7e04 <OSTimeDlyResume+0xdc>
    7dec:	e0bff717 	ldw	r2,-36(fp)
    7df0:	e0bffb15 	stw	r2,-20(fp)
    7df4:	e0bffb17 	ldw	r2,-20(fp)
    7df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    7dfc:	00801404 	movi	r2,80
    7e00:	00003906 	br	7ee8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    7e04:	e0bff917 	ldw	r2,-28(fp)
    7e08:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    7e0c:	e0bff917 	ldw	r2,-28(fp)
    7e10:	10800c03 	ldbu	r2,48(r2)
    7e14:	10803fcc 	andi	r2,r2,255
    7e18:	10800dcc 	andi	r2,r2,55
    7e1c:	10000b26 	beq	r2,zero,7e4c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    7e20:	e0bff917 	ldw	r2,-28(fp)
    7e24:	10c00c03 	ldbu	r3,48(r2)
    7e28:	00bff204 	movi	r2,-56
    7e2c:	1884703a 	and	r2,r3,r2
    7e30:	1007883a 	mov	r3,r2
    7e34:	e0bff917 	ldw	r2,-28(fp)
    7e38:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    7e3c:	e0bff917 	ldw	r2,-28(fp)
    7e40:	00c00044 	movi	r3,1
    7e44:	10c00c45 	stb	r3,49(r2)
    7e48:	00000206 	br	7e54 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    7e4c:	e0bff917 	ldw	r2,-28(fp)
    7e50:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    7e54:	e0bff917 	ldw	r2,-28(fp)
    7e58:	10800c03 	ldbu	r2,48(r2)
    7e5c:	10803fcc 	andi	r2,r2,255
    7e60:	1080020c 	andi	r2,r2,8
    7e64:	10001b1e 	bne	r2,zero,7ed4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    7e68:	e0bff917 	ldw	r2,-28(fp)
    7e6c:	10c00d83 	ldbu	r3,54(r2)
    7e70:	d0a60003 	ldbu	r2,-26624(gp)
    7e74:	1884b03a 	or	r2,r3,r2
    7e78:	d0a60005 	stb	r2,-26624(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    7e7c:	e0bff917 	ldw	r2,-28(fp)
    7e80:	10800d03 	ldbu	r2,52(r2)
    7e84:	10c03fcc 	andi	r3,r2,255
    7e88:	e0bff917 	ldw	r2,-28(fp)
    7e8c:	10800d03 	ldbu	r2,52(r2)
    7e90:	11003fcc 	andi	r4,r2,255
    7e94:	d0a60044 	addi	r2,gp,-26623
    7e98:	2085883a 	add	r2,r4,r2
    7e9c:	11000003 	ldbu	r4,0(r2)
    7ea0:	e0bff917 	ldw	r2,-28(fp)
    7ea4:	10800d43 	ldbu	r2,53(r2)
    7ea8:	2084b03a 	or	r2,r4,r2
    7eac:	1009883a 	mov	r4,r2
    7eb0:	d0a60044 	addi	r2,gp,-26623
    7eb4:	1885883a 	add	r2,r3,r2
    7eb8:	11000005 	stb	r4,0(r2)
    7ebc:	e0bff717 	ldw	r2,-36(fp)
    7ec0:	e0bffc15 	stw	r2,-16(fp)
    7ec4:	e0bffc17 	ldw	r2,-16(fp)
    7ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
    7ecc:	00021000 	call	2100 <OS_Sched>
    7ed0:	00000406 	br	7ee4 <OSTimeDlyResume+0x1bc>
    7ed4:	e0bff717 	ldw	r2,-36(fp)
    7ed8:	e0bffd15 	stw	r2,-12(fp)
    7edc:	e0bffd17 	ldw	r2,-12(fp)
    7ee0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
    7ee4:	0005883a 	mov	r2,zero
}
    7ee8:	e037883a 	mov	sp,fp
    7eec:	dfc00117 	ldw	ra,4(sp)
    7ef0:	df000017 	ldw	fp,0(sp)
    7ef4:	dec00204 	addi	sp,sp,8
    7ef8:	f800283a 	ret

00007efc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    7efc:	defffb04 	addi	sp,sp,-20
    7f00:	df000415 	stw	fp,16(sp)
    7f04:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7f08:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f0c:	0005303a 	rdctl	r2,status
    7f10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f14:	e0fffe17 	ldw	r3,-8(fp)
    7f18:	00bfff84 	movi	r2,-2
    7f1c:	1884703a 	and	r2,r3,r2
    7f20:	1001703a 	wrctl	status,r2
  
  return context;
    7f24:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
    7f28:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
    7f2c:	d0a60417 	ldw	r2,-26608(gp)
    7f30:	e0bffd15 	stw	r2,-12(fp)
    7f34:	e0bffc17 	ldw	r2,-16(fp)
    7f38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f3c:	e0bfff17 	ldw	r2,-4(fp)
    7f40:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
    7f44:	e0bffd17 	ldw	r2,-12(fp)
}
    7f48:	e037883a 	mov	sp,fp
    7f4c:	df000017 	ldw	fp,0(sp)
    7f50:	dec00104 	addi	sp,sp,4
    7f54:	f800283a 	ret

00007f58 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    7f58:	defffb04 	addi	sp,sp,-20
    7f5c:	df000415 	stw	fp,16(sp)
    7f60:	df000404 	addi	fp,sp,16
    7f64:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    7f68:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    7f6c:	0005303a 	rdctl	r2,status
    7f70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    7f74:	e0fffd17 	ldw	r3,-12(fp)
    7f78:	00bfff84 	movi	r2,-2
    7f7c:	1884703a 	and	r2,r3,r2
    7f80:	1001703a 	wrctl	status,r2
  
  return context;
    7f84:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
    7f88:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
    7f8c:	e0bfff17 	ldw	r2,-4(fp)
    7f90:	d0a60415 	stw	r2,-26608(gp)
    7f94:	e0bffc17 	ldw	r2,-16(fp)
    7f98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    7f9c:	e0bffe17 	ldw	r2,-8(fp)
    7fa0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
    7fa4:	0001883a 	nop
    7fa8:	e037883a 	mov	sp,fp
    7fac:	df000017 	ldw	fp,0(sp)
    7fb0:	dec00104 	addi	sp,sp,4
    7fb4:	f800283a 	ret

00007fb8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    7fb8:	defffd04 	addi	sp,sp,-12
    7fbc:	dfc00215 	stw	ra,8(sp)
    7fc0:	df000115 	stw	fp,4(sp)
    7fc4:	df000104 	addi	fp,sp,4
    7fc8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    7fcc:	d1602104 	addi	r5,gp,-32636
    7fd0:	e13fff17 	ldw	r4,-4(fp)
    7fd4:	00091780 	call	9178 <alt_dev_llist_insert>
}
    7fd8:	e037883a 	mov	sp,fp
    7fdc:	dfc00117 	ldw	ra,4(sp)
    7fe0:	df000017 	ldw	fp,0(sp)
    7fe4:	dec00204 	addi	sp,sp,8
    7fe8:	f800283a 	ret

00007fec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    7fec:	defffd04 	addi	sp,sp,-12
    7ff0:	dfc00215 	stw	ra,8(sp)
    7ff4:	df000115 	stw	fp,4(sp)
    7ff8:	df000104 	addi	fp,sp,4
    7ffc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8000:	0009ba80 	call	9ba8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8004:	00800044 	movi	r2,1
    8008:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    800c:	0001883a 	nop
    8010:	e037883a 	mov	sp,fp
    8014:	dfc00117 	ldw	ra,4(sp)
    8018:	df000017 	ldw	fp,0(sp)
    801c:	dec00204 	addi	sp,sp,8
    8020:	f800283a 	ret

00008024 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8024:	defffe04 	addi	sp,sp,-8
    8028:	dfc00115 	stw	ra,4(sp)
    802c:	df000015 	stw	fp,0(sp)
    8030:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    8034:	01c0fa04 	movi	r7,1000
    8038:	01800284 	movi	r6,10
    803c:	000b883a 	mov	r5,zero
    8040:	010000b4 	movhi	r4,2
    8044:	21080804 	addi	r4,r4,8224
    8048:	0008e340 	call	8e34 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    804c:	01800204 	movi	r6,8
    8050:	000b883a 	mov	r5,zero
    8054:	01000074 	movhi	r4,1
    8058:	212b1504 	addi	r4,r4,-21420
    805c:	00081f40 	call	81f4 <altera_avalon_jtag_uart_init>
    8060:	01000074 	movhi	r4,1
    8064:	212b0b04 	addi	r4,r4,-21460
    8068:	0007fb80 	call	7fb8 <alt_dev_reg>
    ALTERA_UP_AVALON_ADC_INIT ( ADC_0, adc_0);
    806c:	01000074 	movhi	r4,1
    8070:	212f2604 	addi	r4,r4,-17256
    8074:	0007fb80 	call	7fb8 <alt_dev_reg>
}
    8078:	0001883a 	nop
    807c:	e037883a 	mov	sp,fp
    8080:	dfc00117 	ldw	ra,4(sp)
    8084:	df000017 	ldw	fp,0(sp)
    8088:	dec00204 	addi	sp,sp,8
    808c:	f800283a 	ret

00008090 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    8090:	defffa04 	addi	sp,sp,-24
    8094:	dfc00515 	stw	ra,20(sp)
    8098:	df000415 	stw	fp,16(sp)
    809c:	df000404 	addi	fp,sp,16
    80a0:	e13ffd15 	stw	r4,-12(fp)
    80a4:	e17ffe15 	stw	r5,-8(fp)
    80a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    80ac:	e0bffd17 	ldw	r2,-12(fp)
    80b0:	10800017 	ldw	r2,0(r2)
    80b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    80b8:	e0bffc17 	ldw	r2,-16(fp)
    80bc:	10c00a04 	addi	r3,r2,40
    80c0:	e0bffd17 	ldw	r2,-12(fp)
    80c4:	10800217 	ldw	r2,8(r2)
    80c8:	100f883a 	mov	r7,r2
    80cc:	e1bfff17 	ldw	r6,-4(fp)
    80d0:	e17ffe17 	ldw	r5,-8(fp)
    80d4:	1809883a 	mov	r4,r3
    80d8:	000883c0 	call	883c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    80dc:	e037883a 	mov	sp,fp
    80e0:	dfc00117 	ldw	ra,4(sp)
    80e4:	df000017 	ldw	fp,0(sp)
    80e8:	dec00204 	addi	sp,sp,8
    80ec:	f800283a 	ret

000080f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    80f0:	defffa04 	addi	sp,sp,-24
    80f4:	dfc00515 	stw	ra,20(sp)
    80f8:	df000415 	stw	fp,16(sp)
    80fc:	df000404 	addi	fp,sp,16
    8100:	e13ffd15 	stw	r4,-12(fp)
    8104:	e17ffe15 	stw	r5,-8(fp)
    8108:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    810c:	e0bffd17 	ldw	r2,-12(fp)
    8110:	10800017 	ldw	r2,0(r2)
    8114:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    8118:	e0bffc17 	ldw	r2,-16(fp)
    811c:	10c00a04 	addi	r3,r2,40
    8120:	e0bffd17 	ldw	r2,-12(fp)
    8124:	10800217 	ldw	r2,8(r2)
    8128:	100f883a 	mov	r7,r2
    812c:	e1bfff17 	ldw	r6,-4(fp)
    8130:	e17ffe17 	ldw	r5,-8(fp)
    8134:	1809883a 	mov	r4,r3
    8138:	0008af80 	call	8af8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    813c:	e037883a 	mov	sp,fp
    8140:	dfc00117 	ldw	ra,4(sp)
    8144:	df000017 	ldw	fp,0(sp)
    8148:	dec00204 	addi	sp,sp,8
    814c:	f800283a 	ret

00008150 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    8150:	defffc04 	addi	sp,sp,-16
    8154:	dfc00315 	stw	ra,12(sp)
    8158:	df000215 	stw	fp,8(sp)
    815c:	df000204 	addi	fp,sp,8
    8160:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    8164:	e0bfff17 	ldw	r2,-4(fp)
    8168:	10800017 	ldw	r2,0(r2)
    816c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    8170:	e0bffe17 	ldw	r2,-8(fp)
    8174:	10c00a04 	addi	r3,r2,40
    8178:	e0bfff17 	ldw	r2,-4(fp)
    817c:	10800217 	ldw	r2,8(r2)
    8180:	100b883a 	mov	r5,r2
    8184:	1809883a 	mov	r4,r3
    8188:	00086e40 	call	86e4 <altera_avalon_jtag_uart_close>
}
    818c:	e037883a 	mov	sp,fp
    8190:	dfc00117 	ldw	ra,4(sp)
    8194:	df000017 	ldw	fp,0(sp)
    8198:	dec00204 	addi	sp,sp,8
    819c:	f800283a 	ret

000081a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    81a0:	defffa04 	addi	sp,sp,-24
    81a4:	dfc00515 	stw	ra,20(sp)
    81a8:	df000415 	stw	fp,16(sp)
    81ac:	df000404 	addi	fp,sp,16
    81b0:	e13ffd15 	stw	r4,-12(fp)
    81b4:	e17ffe15 	stw	r5,-8(fp)
    81b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    81bc:	e0bffd17 	ldw	r2,-12(fp)
    81c0:	10800017 	ldw	r2,0(r2)
    81c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    81c8:	e0bffc17 	ldw	r2,-16(fp)
    81cc:	10800a04 	addi	r2,r2,40
    81d0:	e1bfff17 	ldw	r6,-4(fp)
    81d4:	e17ffe17 	ldw	r5,-8(fp)
    81d8:	1009883a 	mov	r4,r2
    81dc:	000874c0 	call	874c <altera_avalon_jtag_uart_ioctl>
}
    81e0:	e037883a 	mov	sp,fp
    81e4:	dfc00117 	ldw	ra,4(sp)
    81e8:	df000017 	ldw	fp,0(sp)
    81ec:	dec00204 	addi	sp,sp,8
    81f0:	f800283a 	ret

000081f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    81f4:	defff104 	addi	sp,sp,-60
    81f8:	dfc00e15 	stw	ra,56(sp)
    81fc:	df000d15 	stw	fp,52(sp)
    8200:	df000d04 	addi	fp,sp,52
    8204:	e13ff915 	stw	r4,-28(fp)
    8208:	e17ffa15 	stw	r5,-24(fp)
    820c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
    8210:	e0bff917 	ldw	r2,-28(fp)
    8214:	10800c04 	addi	r2,r2,48
    8218:	e0bff415 	stw	r2,-48(fp)
    821c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
    8220:	e0bff80b 	ldhu	r2,-32(fp)
    8224:	e0fff884 	addi	r3,fp,-30
    8228:	180b883a 	mov	r5,r3
    822c:	1009883a 	mov	r4,r2
    8230:	0002c6c0 	call	2c6c <OSFlagCreate>
    8234:	1007883a 	mov	r3,r2
    8238:	e0bff417 	ldw	r2,-48(fp)
    823c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
    8240:	e0bff917 	ldw	r2,-28(fp)
    8244:	10800a04 	addi	r2,r2,40
    8248:	e0bff515 	stw	r2,-44(fp)
    824c:	00800044 	movi	r2,1
    8250:	e0bff78d 	sth	r2,-34(fp)
    8254:	e0bff78b 	ldhu	r2,-34(fp)
    8258:	1009883a 	mov	r4,r2
    825c:	000598c0 	call	598c <OSSemCreate>
    8260:	1007883a 	mov	r3,r2
    8264:	e0bff517 	ldw	r2,-44(fp)
    8268:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
    826c:	e0bff917 	ldw	r2,-28(fp)
    8270:	10800b04 	addi	r2,r2,44
    8274:	e0bff615 	stw	r2,-40(fp)
    8278:	00800044 	movi	r2,1
    827c:	e0bff70d 	sth	r2,-36(fp)
    8280:	e0bff70b 	ldhu	r2,-36(fp)
    8284:	1009883a 	mov	r4,r2
    8288:	000598c0 	call	598c <OSSemCreate>
    828c:	1007883a 	mov	r3,r2
    8290:	e0bff617 	ldw	r2,-40(fp)
    8294:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8298:	e0bff917 	ldw	r2,-28(fp)
    829c:	00c00044 	movi	r3,1
    82a0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    82a4:	e0bff917 	ldw	r2,-28(fp)
    82a8:	10800017 	ldw	r2,0(r2)
    82ac:	10800104 	addi	r2,r2,4
    82b0:	1007883a 	mov	r3,r2
    82b4:	e0bff917 	ldw	r2,-28(fp)
    82b8:	10800817 	ldw	r2,32(r2)
    82bc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    82c0:	e0bffa17 	ldw	r2,-24(fp)
    82c4:	e0fffb17 	ldw	r3,-20(fp)
    82c8:	d8000015 	stw	zero,0(sp)
    82cc:	e1fff917 	ldw	r7,-28(fp)
    82d0:	01800074 	movhi	r6,1
    82d4:	31a0cf04 	addi	r6,r6,-31940
    82d8:	180b883a 	mov	r5,r3
    82dc:	1009883a 	mov	r4,r2
    82e0:	00092fc0 	call	92fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    82e4:	e0bff917 	ldw	r2,-28(fp)
    82e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    82ec:	e0bff917 	ldw	r2,-28(fp)
    82f0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    82f4:	d0e60a17 	ldw	r3,-26584(gp)
    82f8:	e1fff917 	ldw	r7,-28(fp)
    82fc:	01800074 	movhi	r6,1
    8300:	31a17804 	addi	r6,r6,-31264
    8304:	180b883a 	mov	r5,r3
    8308:	1009883a 	mov	r4,r2
    830c:	0008eb00 	call	8eb0 <alt_alarm_start>
    8310:	1000040e 	bge	r2,zero,8324 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    8314:	e0fff917 	ldw	r3,-28(fp)
    8318:	00a00034 	movhi	r2,32768
    831c:	10bfffc4 	addi	r2,r2,-1
    8320:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    8324:	0001883a 	nop
    8328:	e037883a 	mov	sp,fp
    832c:	dfc00117 	ldw	ra,4(sp)
    8330:	df000017 	ldw	fp,0(sp)
    8334:	dec00204 	addi	sp,sp,8
    8338:	f800283a 	ret

0000833c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    833c:	defff204 	addi	sp,sp,-56
    8340:	dfc00d15 	stw	ra,52(sp)
    8344:	df000c15 	stw	fp,48(sp)
    8348:	df000c04 	addi	fp,sp,48
    834c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    8350:	e0bfff17 	ldw	r2,-4(fp)
    8354:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
    8358:	e0bff617 	ldw	r2,-40(fp)
    835c:	10800017 	ldw	r2,0(r2)
    8360:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    8364:	e0bff717 	ldw	r2,-36(fp)
    8368:	10800104 	addi	r2,r2,4
    836c:	10800037 	ldwio	r2,0(r2)
    8370:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    8374:	e0bff817 	ldw	r2,-32(fp)
    8378:	1080c00c 	andi	r2,r2,768
    837c:	10009126 	beq	r2,zero,85c4 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    8380:	e0bff817 	ldw	r2,-32(fp)
    8384:	1080400c 	andi	r2,r2,256
    8388:	10004726 	beq	r2,zero,84a8 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    838c:	00800074 	movhi	r2,1
    8390:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8394:	e0bff617 	ldw	r2,-40(fp)
    8398:	10800d17 	ldw	r2,52(r2)
    839c:	10800044 	addi	r2,r2,1
    83a0:	1081ffcc 	andi	r2,r2,2047
    83a4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
    83a8:	e0bff617 	ldw	r2,-40(fp)
    83ac:	10c00e17 	ldw	r3,56(r2)
    83b0:	e0bff917 	ldw	r2,-28(fp)
    83b4:	18802726 	beq	r3,r2,8454 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    83b8:	e0bff717 	ldw	r2,-36(fp)
    83bc:	10800037 	ldwio	r2,0(r2)
    83c0:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    83c4:	e0bff417 	ldw	r2,-48(fp)
    83c8:	10a0000c 	andi	r2,r2,32768
    83cc:	10002326 	beq	r2,zero,845c <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    83d0:	e0bff617 	ldw	r2,-40(fp)
    83d4:	10800d17 	ldw	r2,52(r2)
    83d8:	e0fff417 	ldw	r3,-48(fp)
    83dc:	1809883a 	mov	r4,r3
    83e0:	e0fff617 	ldw	r3,-40(fp)
    83e4:	1885883a 	add	r2,r3,r2
    83e8:	10801104 	addi	r2,r2,68
    83ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    83f0:	e0bff617 	ldw	r2,-40(fp)
    83f4:	10800d17 	ldw	r2,52(r2)
    83f8:	10800044 	addi	r2,r2,1
    83fc:	10c1ffcc 	andi	r3,r2,2047
    8400:	e0bff617 	ldw	r2,-40(fp)
    8404:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
    8408:	e0bff617 	ldw	r2,-40(fp)
    840c:	10800c17 	ldw	r2,48(r2)
    8410:	e0bffb15 	stw	r2,-20(fp)
    8414:	00800044 	movi	r2,1
    8418:	e0bffc0d 	sth	r2,-16(fp)
    841c:	00800044 	movi	r2,1
    8420:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    8424:	d0a5f443 	ldbu	r2,-26671(gp)
    8428:	10803fcc 	andi	r2,r2,255
    842c:	103fd926 	beq	r2,zero,8394 <__alt_data_end+0xfffefcf4>
  {
    OSFlagPost (group, flags, opt, &err);
    8430:	e0bffc0b 	ldhu	r2,-16(fp)
    8434:	e0fffc83 	ldbu	r3,-14(fp)
    8438:	e13ffdc4 	addi	r4,fp,-9
    843c:	200f883a 	mov	r7,r4
    8440:	180d883a 	mov	r6,r3
    8444:	100b883a 	mov	r5,r2
    8448:	e13ffb17 	ldw	r4,-20(fp)
    844c:	00038480 	call	3848 <OSFlagPost>
      }
    8450:	003fd006 	br	8394 <__alt_data_end+0xfffefcf4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    8454:	0001883a 	nop
    8458:	00000106 	br	8460 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    845c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    8460:	e0bff417 	ldw	r2,-48(fp)
    8464:	10bfffec 	andhi	r2,r2,65535
    8468:	10000f26 	beq	r2,zero,84a8 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    846c:	e0bff617 	ldw	r2,-40(fp)
    8470:	10c00817 	ldw	r3,32(r2)
    8474:	00bfff84 	movi	r2,-2
    8478:	1886703a 	and	r3,r3,r2
    847c:	e0bff617 	ldw	r2,-40(fp)
    8480:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    8484:	e0bff717 	ldw	r2,-36(fp)
    8488:	10800104 	addi	r2,r2,4
    848c:	1007883a 	mov	r3,r2
    8490:	e0bff617 	ldw	r2,-40(fp)
    8494:	10800817 	ldw	r2,32(r2)
    8498:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    849c:	e0bff717 	ldw	r2,-36(fp)
    84a0:	10800104 	addi	r2,r2,4
    84a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    84a8:	e0bff817 	ldw	r2,-32(fp)
    84ac:	1080800c 	andi	r2,r2,512
    84b0:	103fac26 	beq	r2,zero,8364 <__alt_data_end+0xfffefcc4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    84b4:	e0bff817 	ldw	r2,-32(fp)
    84b8:	1004d43a 	srli	r2,r2,16
    84bc:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    84c0:	00002606 	br	855c <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    84c4:	e0bff717 	ldw	r2,-36(fp)
    84c8:	e0fff617 	ldw	r3,-40(fp)
    84cc:	18c01017 	ldw	r3,64(r3)
    84d0:	e13ff617 	ldw	r4,-40(fp)
    84d4:	20c7883a 	add	r3,r4,r3
    84d8:	18c21104 	addi	r3,r3,2116
    84dc:	18c00003 	ldbu	r3,0(r3)
    84e0:	18c03fcc 	andi	r3,r3,255
    84e4:	18c0201c 	xori	r3,r3,128
    84e8:	18ffe004 	addi	r3,r3,-128
    84ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    84f0:	e0bff617 	ldw	r2,-40(fp)
    84f4:	10801017 	ldw	r2,64(r2)
    84f8:	10800044 	addi	r2,r2,1
    84fc:	10c1ffcc 	andi	r3,r2,2047
    8500:	e0bff617 	ldw	r2,-40(fp)
    8504:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
    8508:	e0bff617 	ldw	r2,-40(fp)
    850c:	10800c17 	ldw	r2,48(r2)
    8510:	e0bffa15 	stw	r2,-24(fp)
    8514:	00800084 	movi	r2,2
    8518:	e0bffd0d 	sth	r2,-12(fp)
    851c:	00800044 	movi	r2,1
    8520:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    8524:	d0a5f443 	ldbu	r2,-26671(gp)
    8528:	10803fcc 	andi	r2,r2,255
    852c:	10000826 	beq	r2,zero,8550 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
    8530:	e0bffd0b 	ldhu	r2,-12(fp)
    8534:	e0fffd83 	ldbu	r3,-10(fp)
    8538:	e13ffe04 	addi	r4,fp,-8
    853c:	200f883a 	mov	r7,r4
    8540:	180d883a 	mov	r6,r3
    8544:	100b883a 	mov	r5,r2
    8548:	e13ffa17 	ldw	r4,-24(fp)
    854c:	00038480 	call	3848 <OSFlagPost>

        space--;
    8550:	e0bff517 	ldw	r2,-44(fp)
    8554:	10bfffc4 	addi	r2,r2,-1
    8558:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    855c:	e0bff517 	ldw	r2,-44(fp)
    8560:	10000526 	beq	r2,zero,8578 <altera_avalon_jtag_uart_irq+0x23c>
    8564:	e0bff617 	ldw	r2,-40(fp)
    8568:	10c01017 	ldw	r3,64(r2)
    856c:	e0bff617 	ldw	r2,-40(fp)
    8570:	10800f17 	ldw	r2,60(r2)
    8574:	18bfd31e 	bne	r3,r2,84c4 <__alt_data_end+0xfffefe24>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    8578:	e0bff517 	ldw	r2,-44(fp)
    857c:	103f7926 	beq	r2,zero,8364 <__alt_data_end+0xfffefcc4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8580:	e0bff617 	ldw	r2,-40(fp)
    8584:	10c00817 	ldw	r3,32(r2)
    8588:	00bfff44 	movi	r2,-3
    858c:	1886703a 	and	r3,r3,r2
    8590:	e0bff617 	ldw	r2,-40(fp)
    8594:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8598:	e0bff617 	ldw	r2,-40(fp)
    859c:	10800017 	ldw	r2,0(r2)
    85a0:	10800104 	addi	r2,r2,4
    85a4:	1007883a 	mov	r3,r2
    85a8:	e0bff617 	ldw	r2,-40(fp)
    85ac:	10800817 	ldw	r2,32(r2)
    85b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    85b4:	e0bff717 	ldw	r2,-36(fp)
    85b8:	10800104 	addi	r2,r2,4
    85bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    85c0:	003f6806 	br	8364 <__alt_data_end+0xfffefcc4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    85c4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    85c8:	0001883a 	nop
    85cc:	e037883a 	mov	sp,fp
    85d0:	dfc00117 	ldw	ra,4(sp)
    85d4:	df000017 	ldw	fp,0(sp)
    85d8:	dec00204 	addi	sp,sp,8
    85dc:	f800283a 	ret

000085e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    85e0:	defff904 	addi	sp,sp,-28
    85e4:	dfc00615 	stw	ra,24(sp)
    85e8:	df000515 	stw	fp,20(sp)
    85ec:	df000504 	addi	fp,sp,20
    85f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    85f4:	e0bfff17 	ldw	r2,-4(fp)
    85f8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    85fc:	e0bffb17 	ldw	r2,-20(fp)
    8600:	10800017 	ldw	r2,0(r2)
    8604:	10800104 	addi	r2,r2,4
    8608:	10800037 	ldwio	r2,0(r2)
    860c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    8610:	e0bffc17 	ldw	r2,-16(fp)
    8614:	1081000c 	andi	r2,r2,1024
    8618:	10000b26 	beq	r2,zero,8648 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    861c:	e0bffb17 	ldw	r2,-20(fp)
    8620:	10800017 	ldw	r2,0(r2)
    8624:	10800104 	addi	r2,r2,4
    8628:	1007883a 	mov	r3,r2
    862c:	e0bffb17 	ldw	r2,-20(fp)
    8630:	10800817 	ldw	r2,32(r2)
    8634:	10810014 	ori	r2,r2,1024
    8638:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    863c:	e0bffb17 	ldw	r2,-20(fp)
    8640:	10000915 	stw	zero,36(r2)
    8644:	00002106 	br	86cc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    8648:	e0bffb17 	ldw	r2,-20(fp)
    864c:	10c00917 	ldw	r3,36(r2)
    8650:	00a00034 	movhi	r2,32768
    8654:	10bfff04 	addi	r2,r2,-4
    8658:	10c01c36 	bltu	r2,r3,86cc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
    865c:	e0bffb17 	ldw	r2,-20(fp)
    8660:	10800917 	ldw	r2,36(r2)
    8664:	10c00044 	addi	r3,r2,1
    8668:	e0bffb17 	ldw	r2,-20(fp)
    866c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
    8670:	e0bffb17 	ldw	r2,-20(fp)
    8674:	10c00917 	ldw	r3,36(r2)
    8678:	e0bffb17 	ldw	r2,-20(fp)
    867c:	10800117 	ldw	r2,4(r2)
    8680:	18801236 	bltu	r3,r2,86cc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    8684:	e0bffb17 	ldw	r2,-20(fp)
    8688:	10800c17 	ldw	r2,48(r2)
    868c:	e0bffd15 	stw	r2,-12(fp)
    8690:	00800104 	movi	r2,4
    8694:	e0bffe0d 	sth	r2,-8(fp)
    8698:	00800044 	movi	r2,1
    869c:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
    86a0:	d0a5f443 	ldbu	r2,-26671(gp)
    86a4:	10803fcc 	andi	r2,r2,255
    86a8:	10000826 	beq	r2,zero,86cc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
    86ac:	e0bffe0b 	ldhu	r2,-8(fp)
    86b0:	e0fffe83 	ldbu	r3,-6(fp)
    86b4:	e13ffec4 	addi	r4,fp,-5
    86b8:	200f883a 	mov	r7,r4
    86bc:	180d883a 	mov	r6,r3
    86c0:	100b883a 	mov	r5,r2
    86c4:	e13ffd17 	ldw	r4,-12(fp)
    86c8:	00038480 	call	3848 <OSFlagPost>
    86cc:	d0a60a17 	ldw	r2,-26584(gp)
    }
  }

  return alt_ticks_per_second();
}
    86d0:	e037883a 	mov	sp,fp
    86d4:	dfc00117 	ldw	ra,4(sp)
    86d8:	df000017 	ldw	fp,0(sp)
    86dc:	dec00204 	addi	sp,sp,8
    86e0:	f800283a 	ret

000086e4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    86e4:	defffd04 	addi	sp,sp,-12
    86e8:	df000215 	stw	fp,8(sp)
    86ec:	df000204 	addi	fp,sp,8
    86f0:	e13ffe15 	stw	r4,-8(fp)
    86f4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    86f8:	00000506 	br	8710 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    86fc:	e0bfff17 	ldw	r2,-4(fp)
    8700:	1090000c 	andi	r2,r2,16384
    8704:	10000226 	beq	r2,zero,8710 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    8708:	00bffd44 	movi	r2,-11
    870c:	00000b06 	br	873c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    8710:	e0bffe17 	ldw	r2,-8(fp)
    8714:	10c01017 	ldw	r3,64(r2)
    8718:	e0bffe17 	ldw	r2,-8(fp)
    871c:	10800f17 	ldw	r2,60(r2)
    8720:	18800526 	beq	r3,r2,8738 <altera_avalon_jtag_uart_close+0x54>
    8724:	e0bffe17 	ldw	r2,-8(fp)
    8728:	10c00917 	ldw	r3,36(r2)
    872c:	e0bffe17 	ldw	r2,-8(fp)
    8730:	10800117 	ldw	r2,4(r2)
    8734:	18bff136 	bltu	r3,r2,86fc <__alt_data_end+0xffff005c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    8738:	0005883a 	mov	r2,zero
}
    873c:	e037883a 	mov	sp,fp
    8740:	df000017 	ldw	fp,0(sp)
    8744:	dec00104 	addi	sp,sp,4
    8748:	f800283a 	ret

0000874c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    874c:	defffa04 	addi	sp,sp,-24
    8750:	df000515 	stw	fp,20(sp)
    8754:	df000504 	addi	fp,sp,20
    8758:	e13ffd15 	stw	r4,-12(fp)
    875c:	e17ffe15 	stw	r5,-8(fp)
    8760:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    8764:	00bff9c4 	movi	r2,-25
    8768:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    876c:	e0bffe17 	ldw	r2,-8(fp)
    8770:	10da8060 	cmpeqi	r3,r2,27137
    8774:	1800031e 	bne	r3,zero,8784 <altera_avalon_jtag_uart_ioctl+0x38>
    8778:	109a80a0 	cmpeqi	r2,r2,27138
    877c:	1000181e 	bne	r2,zero,87e0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    8780:	00002906 	br	8828 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    8784:	e0bffd17 	ldw	r2,-12(fp)
    8788:	10c00117 	ldw	r3,4(r2)
    878c:	00a00034 	movhi	r2,32768
    8790:	10bfffc4 	addi	r2,r2,-1
    8794:	18802126 	beq	r3,r2,881c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    8798:	e0bfff17 	ldw	r2,-4(fp)
    879c:	10800017 	ldw	r2,0(r2)
    87a0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    87a4:	e0bffc17 	ldw	r2,-16(fp)
    87a8:	10800090 	cmplti	r2,r2,2
    87ac:	1000061e 	bne	r2,zero,87c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    87b0:	e0fffc17 	ldw	r3,-16(fp)
    87b4:	00a00034 	movhi	r2,32768
    87b8:	10bfffc4 	addi	r2,r2,-1
    87bc:	18800226 	beq	r3,r2,87c8 <altera_avalon_jtag_uart_ioctl+0x7c>
    87c0:	e0bffc17 	ldw	r2,-16(fp)
    87c4:	00000206 	br	87d0 <altera_avalon_jtag_uart_ioctl+0x84>
    87c8:	00a00034 	movhi	r2,32768
    87cc:	10bfff84 	addi	r2,r2,-2
    87d0:	e0fffd17 	ldw	r3,-12(fp)
    87d4:	18800115 	stw	r2,4(r3)
      rc = 0;
    87d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    87dc:	00000f06 	br	881c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    87e0:	e0bffd17 	ldw	r2,-12(fp)
    87e4:	10c00117 	ldw	r3,4(r2)
    87e8:	00a00034 	movhi	r2,32768
    87ec:	10bfffc4 	addi	r2,r2,-1
    87f0:	18800c26 	beq	r3,r2,8824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    87f4:	e0bffd17 	ldw	r2,-12(fp)
    87f8:	10c00917 	ldw	r3,36(r2)
    87fc:	e0bffd17 	ldw	r2,-12(fp)
    8800:	10800117 	ldw	r2,4(r2)
    8804:	1885803a 	cmpltu	r2,r3,r2
    8808:	10c03fcc 	andi	r3,r2,255
    880c:	e0bfff17 	ldw	r2,-4(fp)
    8810:	10c00015 	stw	r3,0(r2)
      rc = 0;
    8814:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    8818:	00000206 	br	8824 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    881c:	0001883a 	nop
    8820:	00000106 	br	8828 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    8824:	0001883a 	nop

  default:
    break;
  }

  return rc;
    8828:	e0bffb17 	ldw	r2,-20(fp)
}
    882c:	e037883a 	mov	sp,fp
    8830:	df000017 	ldw	fp,0(sp)
    8834:	dec00104 	addi	sp,sp,4
    8838:	f800283a 	ret

0000883c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    883c:	deffed04 	addi	sp,sp,-76
    8840:	dfc01215 	stw	ra,72(sp)
    8844:	df001115 	stw	fp,68(sp)
    8848:	df001104 	addi	fp,sp,68
    884c:	e13ffc15 	stw	r4,-16(fp)
    8850:	e17ffd15 	stw	r5,-12(fp)
    8854:	e1bffe15 	stw	r6,-8(fp)
    8858:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    885c:	e0bffd17 	ldw	r2,-12(fp)
    8860:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
    8864:	e0bffc17 	ldw	r2,-16(fp)
    8868:	10800a17 	ldw	r2,40(r2)
    886c:	e0bff815 	stw	r2,-32(fp)
    8870:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
    8874:	e0bff90b 	ldhu	r2,-28(fp)
    8878:	e0fffb04 	addi	r3,fp,-20
    887c:	180d883a 	mov	r6,r3
    8880:	100b883a 	mov	r5,r2
    8884:	e13ff817 	ldw	r4,-32(fp)
    8888:	0005ca40 	call	5ca4 <OSSemPend>

  while (space > 0)
    888c:	00006106 	br	8a14 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    8890:	e0bffc17 	ldw	r2,-16(fp)
    8894:	10800d17 	ldw	r2,52(r2)
    8898:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
    889c:	e0bffc17 	ldw	r2,-16(fp)
    88a0:	10800e17 	ldw	r2,56(r2)
    88a4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
    88a8:	e0fff317 	ldw	r3,-52(fp)
    88ac:	e0bff417 	ldw	r2,-48(fp)
    88b0:	18800536 	bltu	r3,r2,88c8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
    88b4:	e0fff317 	ldw	r3,-52(fp)
    88b8:	e0bff417 	ldw	r2,-48(fp)
    88bc:	1885c83a 	sub	r2,r3,r2
    88c0:	e0bff115 	stw	r2,-60(fp)
    88c4:	00000406 	br	88d8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    88c8:	00c20004 	movi	r3,2048
    88cc:	e0bff417 	ldw	r2,-48(fp)
    88d0:	1885c83a 	sub	r2,r3,r2
    88d4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    88d8:	e0bff117 	ldw	r2,-60(fp)
    88dc:	10001e26 	beq	r2,zero,8958 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
    88e0:	e0fffe17 	ldw	r3,-8(fp)
    88e4:	e0bff117 	ldw	r2,-60(fp)
    88e8:	1880022e 	bgeu	r3,r2,88f4 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
    88ec:	e0bffe17 	ldw	r2,-8(fp)
    88f0:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    88f4:	e0bffc17 	ldw	r2,-16(fp)
    88f8:	10c01104 	addi	r3,r2,68
    88fc:	e0bff417 	ldw	r2,-48(fp)
    8900:	1885883a 	add	r2,r3,r2
    8904:	e1bff117 	ldw	r6,-60(fp)
    8908:	100b883a 	mov	r5,r2
    890c:	e13ff017 	ldw	r4,-64(fp)
    8910:	000a3140 	call	a314 <memcpy>
      ptr   += n;
    8914:	e0fff017 	ldw	r3,-64(fp)
    8918:	e0bff117 	ldw	r2,-60(fp)
    891c:	1885883a 	add	r2,r3,r2
    8920:	e0bff015 	stw	r2,-64(fp)
      space -= n;
    8924:	e0fffe17 	ldw	r3,-8(fp)
    8928:	e0bff117 	ldw	r2,-60(fp)
    892c:	1885c83a 	sub	r2,r3,r2
    8930:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8934:	e0fff417 	ldw	r3,-48(fp)
    8938:	e0bff117 	ldw	r2,-60(fp)
    893c:	1885883a 	add	r2,r3,r2
    8940:	10c1ffcc 	andi	r3,r2,2047
    8944:	e0bffc17 	ldw	r2,-16(fp)
    8948:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
    894c:	e0bffe17 	ldw	r2,-8(fp)
    8950:	00bfcf16 	blt	zero,r2,8890 <__alt_data_end+0xffff01f0>
    8954:	00000106 	br	895c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    8958:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    895c:	e0fff017 	ldw	r3,-64(fp)
    8960:	e0bffd17 	ldw	r2,-12(fp)
    8964:	18802e1e 	bne	r3,r2,8a20 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    8968:	e0bfff17 	ldw	r2,-4(fp)
    896c:	1090000c 	andi	r2,r2,16384
    8970:	10002d1e 	bne	r2,zero,8a28 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
    8974:	d0a5f443 	ldbu	r2,-26671(gp)
    8978:	10803fcc 	andi	r2,r2,255
    897c:	10800058 	cmpnei	r2,r2,1
    8980:	1000161e 	bne	r2,zero,89dc <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
    8984:	e0bffc17 	ldw	r2,-16(fp)
    8988:	10800c17 	ldw	r2,48(r2)
    898c:	e0bff215 	stw	r2,-56(fp)
    8990:	00800144 	movi	r2,5
    8994:	e0bff98d 	sth	r2,-26(fp)
    8998:	00bfe0c4 	movi	r2,-125
    899c:	e0bffa05 	stb	r2,-24(fp)
    89a0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    89a4:	d0a5f443 	ldbu	r2,-26671(gp)
    89a8:	10803fcc 	andi	r2,r2,255
    89ac:	10001526 	beq	r2,zero,8a04 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    89b0:	e0fff98b 	ldhu	r3,-26(fp)
    89b4:	e13ffa03 	ldbu	r4,-24(fp)
    89b8:	e17ffa8b 	ldhu	r5,-22(fp)
    89bc:	e0bffb44 	addi	r2,fp,-19
    89c0:	d8800015 	stw	r2,0(sp)
    89c4:	280f883a 	mov	r7,r5
    89c8:	200d883a 	mov	r6,r4
    89cc:	180b883a 	mov	r5,r3
    89d0:	e13ff217 	ldw	r4,-56(fp)
    89d4:	00032300 	call	3230 <OSFlagPend>
    89d8:	00000a06 	br	8a04 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    89dc:	0001883a 	nop
    89e0:	e0bffc17 	ldw	r2,-16(fp)
    89e4:	10c00d17 	ldw	r3,52(r2)
    89e8:	e0bff317 	ldw	r2,-52(fp)
    89ec:	1880051e 	bne	r3,r2,8a04 <altera_avalon_jtag_uart_read+0x1c8>
    89f0:	e0bffc17 	ldw	r2,-16(fp)
    89f4:	10c00917 	ldw	r3,36(r2)
    89f8:	e0bffc17 	ldw	r2,-16(fp)
    89fc:	10800117 	ldw	r2,4(r2)
    8a00:	18bff736 	bltu	r3,r2,89e0 <__alt_data_end+0xffff0340>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    8a04:	e0bffc17 	ldw	r2,-16(fp)
    8a08:	10c00d17 	ldw	r3,52(r2)
    8a0c:	e0bff317 	ldw	r2,-52(fp)
    8a10:	18800726 	beq	r3,r2,8a30 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    8a14:	e0bffe17 	ldw	r2,-8(fp)
    8a18:	00bf9d16 	blt	zero,r2,8890 <__alt_data_end+0xffff01f0>
    8a1c:	00000506 	br	8a34 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    8a20:	0001883a 	nop
    8a24:	00000306 	br	8a34 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    8a28:	0001883a 	nop
    8a2c:	00000106 	br	8a34 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    8a30:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
    8a34:	e0bffc17 	ldw	r2,-16(fp)
    8a38:	10800a17 	ldw	r2,40(r2)
    8a3c:	1009883a 	mov	r4,r2
    8a40:	000601c0 	call	601c <OSSemPost>

  if (ptr != buffer)
    8a44:	e0fff017 	ldw	r3,-64(fp)
    8a48:	e0bffd17 	ldw	r2,-12(fp)
    8a4c:	18801826 	beq	r3,r2,8ab0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8a50:	0005303a 	rdctl	r2,status
    8a54:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8a58:	e0fff717 	ldw	r3,-36(fp)
    8a5c:	00bfff84 	movi	r2,-2
    8a60:	1884703a 	and	r2,r3,r2
    8a64:	1001703a 	wrctl	status,r2
  
  return context;
    8a68:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    8a6c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    8a70:	e0bffc17 	ldw	r2,-16(fp)
    8a74:	10800817 	ldw	r2,32(r2)
    8a78:	10c00054 	ori	r3,r2,1
    8a7c:	e0bffc17 	ldw	r2,-16(fp)
    8a80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8a84:	e0bffc17 	ldw	r2,-16(fp)
    8a88:	10800017 	ldw	r2,0(r2)
    8a8c:	10800104 	addi	r2,r2,4
    8a90:	1007883a 	mov	r3,r2
    8a94:	e0bffc17 	ldw	r2,-16(fp)
    8a98:	10800817 	ldw	r2,32(r2)
    8a9c:	18800035 	stwio	r2,0(r3)
    8aa0:	e0bff617 	ldw	r2,-40(fp)
    8aa4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8aa8:	e0bff517 	ldw	r2,-44(fp)
    8aac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    8ab0:	e0fff017 	ldw	r3,-64(fp)
    8ab4:	e0bffd17 	ldw	r2,-12(fp)
    8ab8:	18800426 	beq	r3,r2,8acc <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
    8abc:	e0fff017 	ldw	r3,-64(fp)
    8ac0:	e0bffd17 	ldw	r2,-12(fp)
    8ac4:	1885c83a 	sub	r2,r3,r2
    8ac8:	00000606 	br	8ae4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
    8acc:	e0bfff17 	ldw	r2,-4(fp)
    8ad0:	1090000c 	andi	r2,r2,16384
    8ad4:	10000226 	beq	r2,zero,8ae0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
    8ad8:	00bffd44 	movi	r2,-11
    8adc:	00000106 	br	8ae4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
    8ae0:	00bffec4 	movi	r2,-5
}
    8ae4:	e037883a 	mov	sp,fp
    8ae8:	dfc00117 	ldw	ra,4(sp)
    8aec:	df000017 	ldw	fp,0(sp)
    8af0:	dec00204 	addi	sp,sp,8
    8af4:	f800283a 	ret

00008af8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8af8:	deffed04 	addi	sp,sp,-76
    8afc:	dfc01215 	stw	ra,72(sp)
    8b00:	df001115 	stw	fp,68(sp)
    8b04:	df001104 	addi	fp,sp,68
    8b08:	e13ffc15 	stw	r4,-16(fp)
    8b0c:	e17ffd15 	stw	r5,-12(fp)
    8b10:	e1bffe15 	stw	r6,-8(fp)
    8b14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    8b18:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    8b1c:	e0bffd17 	ldw	r2,-12(fp)
    8b20:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
    8b24:	e0bffc17 	ldw	r2,-16(fp)
    8b28:	10800b17 	ldw	r2,44(r2)
    8b2c:	e0bff815 	stw	r2,-32(fp)
    8b30:	e03ff90d 	sth	zero,-28(fp)
    8b34:	e0bff90b 	ldhu	r2,-28(fp)
    8b38:	e0fffb44 	addi	r3,fp,-19
    8b3c:	180d883a 	mov	r6,r3
    8b40:	100b883a 	mov	r5,r2
    8b44:	e13ff817 	ldw	r4,-32(fp)
    8b48:	0005ca40 	call	5ca4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8b4c:	00003706 	br	8c2c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    8b50:	e0bffc17 	ldw	r2,-16(fp)
    8b54:	10800f17 	ldw	r2,60(r2)
    8b58:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
    8b5c:	e0bffc17 	ldw	r2,-16(fp)
    8b60:	10801017 	ldw	r2,64(r2)
    8b64:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
    8b68:	e0fff417 	ldw	r3,-48(fp)
    8b6c:	e0bff017 	ldw	r2,-64(fp)
    8b70:	1880062e 	bgeu	r3,r2,8b8c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
    8b74:	e0fff017 	ldw	r3,-64(fp)
    8b78:	e0bff417 	ldw	r2,-48(fp)
    8b7c:	1885c83a 	sub	r2,r3,r2
    8b80:	10bfffc4 	addi	r2,r2,-1
    8b84:	e0bff115 	stw	r2,-60(fp)
    8b88:	00000b06 	br	8bb8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
    8b8c:	e0bff017 	ldw	r2,-64(fp)
    8b90:	10000526 	beq	r2,zero,8ba8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    8b94:	00c20004 	movi	r3,2048
    8b98:	e0bff417 	ldw	r2,-48(fp)
    8b9c:	1885c83a 	sub	r2,r3,r2
    8ba0:	e0bff115 	stw	r2,-60(fp)
    8ba4:	00000406 	br	8bb8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    8ba8:	00c1ffc4 	movi	r3,2047
    8bac:	e0bff417 	ldw	r2,-48(fp)
    8bb0:	1885c83a 	sub	r2,r3,r2
    8bb4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
    8bb8:	e0bff117 	ldw	r2,-60(fp)
    8bbc:	10001e26 	beq	r2,zero,8c38 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
    8bc0:	e0fffe17 	ldw	r3,-8(fp)
    8bc4:	e0bff117 	ldw	r2,-60(fp)
    8bc8:	1880022e 	bgeu	r3,r2,8bd4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
    8bcc:	e0bffe17 	ldw	r2,-8(fp)
    8bd0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    8bd4:	e0bffc17 	ldw	r2,-16(fp)
    8bd8:	10c21104 	addi	r3,r2,2116
    8bdc:	e0bff417 	ldw	r2,-48(fp)
    8be0:	1885883a 	add	r2,r3,r2
    8be4:	e1bff117 	ldw	r6,-60(fp)
    8be8:	e17ffd17 	ldw	r5,-12(fp)
    8bec:	1009883a 	mov	r4,r2
    8bf0:	000a3140 	call	a314 <memcpy>
      ptr   += n;
    8bf4:	e0fffd17 	ldw	r3,-12(fp)
    8bf8:	e0bff117 	ldw	r2,-60(fp)
    8bfc:	1885883a 	add	r2,r3,r2
    8c00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    8c04:	e0fffe17 	ldw	r3,-8(fp)
    8c08:	e0bff117 	ldw	r2,-60(fp)
    8c0c:	1885c83a 	sub	r2,r3,r2
    8c10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    8c14:	e0fff417 	ldw	r3,-48(fp)
    8c18:	e0bff117 	ldw	r2,-60(fp)
    8c1c:	1885883a 	add	r2,r3,r2
    8c20:	10c1ffcc 	andi	r3,r2,2047
    8c24:	e0bffc17 	ldw	r2,-16(fp)
    8c28:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    8c2c:	e0bffe17 	ldw	r2,-8(fp)
    8c30:	00bfc716 	blt	zero,r2,8b50 <__alt_data_end+0xffff04b0>
    8c34:	00000106 	br	8c3c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    8c38:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8c3c:	0005303a 	rdctl	r2,status
    8c40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8c44:	e0fff717 	ldw	r3,-36(fp)
    8c48:	00bfff84 	movi	r2,-2
    8c4c:	1884703a 	and	r2,r3,r2
    8c50:	1001703a 	wrctl	status,r2
  
  return context;
    8c54:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    8c58:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    8c5c:	e0bffc17 	ldw	r2,-16(fp)
    8c60:	10800817 	ldw	r2,32(r2)
    8c64:	10c00094 	ori	r3,r2,2
    8c68:	e0bffc17 	ldw	r2,-16(fp)
    8c6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    8c70:	e0bffc17 	ldw	r2,-16(fp)
    8c74:	10800017 	ldw	r2,0(r2)
    8c78:	10800104 	addi	r2,r2,4
    8c7c:	1007883a 	mov	r3,r2
    8c80:	e0bffc17 	ldw	r2,-16(fp)
    8c84:	10800817 	ldw	r2,32(r2)
    8c88:	18800035 	stwio	r2,0(r3)
    8c8c:	e0bff617 	ldw	r2,-40(fp)
    8c90:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8c94:	e0bff317 	ldw	r2,-52(fp)
    8c98:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    8c9c:	e0bffe17 	ldw	r2,-8(fp)
    8ca0:	00802a0e 	bge	zero,r2,8d4c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
    8ca4:	e0bfff17 	ldw	r2,-4(fp)
    8ca8:	1090000c 	andi	r2,r2,16384
    8cac:	10002a1e 	bne	r2,zero,8d58 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
    8cb0:	d0a5f443 	ldbu	r2,-26671(gp)
    8cb4:	10803fcc 	andi	r2,r2,255
    8cb8:	10800058 	cmpnei	r2,r2,1
    8cbc:	1000161e 	bne	r2,zero,8d18 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
    8cc0:	e0bffc17 	ldw	r2,-16(fp)
    8cc4:	10800c17 	ldw	r2,48(r2)
    8cc8:	e0bff515 	stw	r2,-44(fp)
    8ccc:	00800184 	movi	r2,6
    8cd0:	e0bff98d 	sth	r2,-26(fp)
    8cd4:	00bfe0c4 	movi	r2,-125
    8cd8:	e0bffa05 	stb	r2,-24(fp)
    8cdc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
    8ce0:	d0a5f443 	ldbu	r2,-26671(gp)
    8ce4:	10803fcc 	andi	r2,r2,255
    8ce8:	10001526 	beq	r2,zero,8d40 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
    8cec:	e0fff98b 	ldhu	r3,-26(fp)
    8cf0:	e13ffa03 	ldbu	r4,-24(fp)
    8cf4:	e17ffa8b 	ldhu	r5,-22(fp)
    8cf8:	e0bffb04 	addi	r2,fp,-20
    8cfc:	d8800015 	stw	r2,0(sp)
    8d00:	280f883a 	mov	r7,r5
    8d04:	200d883a 	mov	r6,r4
    8d08:	180b883a 	mov	r5,r3
    8d0c:	e13ff517 	ldw	r4,-44(fp)
    8d10:	00032300 	call	3230 <OSFlagPend>
    8d14:	00000a06 	br	8d40 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    8d18:	0001883a 	nop
    8d1c:	e0bffc17 	ldw	r2,-16(fp)
    8d20:	10c01017 	ldw	r3,64(r2)
    8d24:	e0bff017 	ldw	r2,-64(fp)
    8d28:	1880051e 	bne	r3,r2,8d40 <altera_avalon_jtag_uart_write+0x248>
    8d2c:	e0bffc17 	ldw	r2,-16(fp)
    8d30:	10c00917 	ldw	r3,36(r2)
    8d34:	e0bffc17 	ldw	r2,-16(fp)
    8d38:	10800117 	ldw	r2,4(r2)
    8d3c:	18bff736 	bltu	r3,r2,8d1c <__alt_data_end+0xffff067c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    8d40:	e0bffc17 	ldw	r2,-16(fp)
    8d44:	10800917 	ldw	r2,36(r2)
    8d48:	1000051e 	bne	r2,zero,8d60 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
    8d4c:	e0bffe17 	ldw	r2,-8(fp)
    8d50:	00bfb616 	blt	zero,r2,8c2c <__alt_data_end+0xffff058c>
    8d54:	00000306 	br	8d64 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    8d58:	0001883a 	nop
    8d5c:	00000106 	br	8d64 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    8d60:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
    8d64:	e0bffc17 	ldw	r2,-16(fp)
    8d68:	10800b17 	ldw	r2,44(r2)
    8d6c:	1009883a 	mov	r4,r2
    8d70:	000601c0 	call	601c <OSSemPost>

  if (ptr != start)
    8d74:	e0fffd17 	ldw	r3,-12(fp)
    8d78:	e0bff217 	ldw	r2,-56(fp)
    8d7c:	18800426 	beq	r3,r2,8d90 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
    8d80:	e0fffd17 	ldw	r3,-12(fp)
    8d84:	e0bff217 	ldw	r2,-56(fp)
    8d88:	1885c83a 	sub	r2,r3,r2
    8d8c:	00000606 	br	8da8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
    8d90:	e0bfff17 	ldw	r2,-4(fp)
    8d94:	1090000c 	andi	r2,r2,16384
    8d98:	10000226 	beq	r2,zero,8da4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
    8d9c:	00bffd44 	movi	r2,-11
    8da0:	00000106 	br	8da8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    8da4:	00bffec4 	movi	r2,-5
}
    8da8:	e037883a 	mov	sp,fp
    8dac:	dfc00117 	ldw	ra,4(sp)
    8db0:	df000017 	ldw	fp,0(sp)
    8db4:	dec00204 	addi	sp,sp,8
    8db8:	f800283a 	ret

00008dbc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    8dbc:	defffa04 	addi	sp,sp,-24
    8dc0:	dfc00515 	stw	ra,20(sp)
    8dc4:	df000415 	stw	fp,16(sp)
    8dc8:	df000404 	addi	fp,sp,16
    8dcc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    8dd0:	0007883a 	mov	r3,zero
    8dd4:	e0bfff17 	ldw	r2,-4(fp)
    8dd8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    8ddc:	e0bfff17 	ldw	r2,-4(fp)
    8de0:	10800104 	addi	r2,r2,4
    8de4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8de8:	0005303a 	rdctl	r2,status
    8dec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8df0:	e0fffd17 	ldw	r3,-12(fp)
    8df4:	00bfff84 	movi	r2,-2
    8df8:	1884703a 	and	r2,r3,r2
    8dfc:	1001703a 	wrctl	status,r2
  
  return context;
    8e00:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    8e04:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    8e08:	0009aa00 	call	9aa0 <alt_tick>
    8e0c:	e0bffc17 	ldw	r2,-16(fp)
    8e10:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8e14:	e0bffe17 	ldw	r2,-8(fp)
    8e18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    8e1c:	0001883a 	nop
    8e20:	e037883a 	mov	sp,fp
    8e24:	dfc00117 	ldw	ra,4(sp)
    8e28:	df000017 	ldw	fp,0(sp)
    8e2c:	dec00204 	addi	sp,sp,8
    8e30:	f800283a 	ret

00008e34 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    8e34:	defff804 	addi	sp,sp,-32
    8e38:	dfc00715 	stw	ra,28(sp)
    8e3c:	df000615 	stw	fp,24(sp)
    8e40:	df000604 	addi	fp,sp,24
    8e44:	e13ffc15 	stw	r4,-16(fp)
    8e48:	e17ffd15 	stw	r5,-12(fp)
    8e4c:	e1bffe15 	stw	r6,-8(fp)
    8e50:	e1ffff15 	stw	r7,-4(fp)
    8e54:	e0bfff17 	ldw	r2,-4(fp)
    8e58:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    8e5c:	d0a60a17 	ldw	r2,-26584(gp)
    8e60:	1000021e 	bne	r2,zero,8e6c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    8e64:	e0bffb17 	ldw	r2,-20(fp)
    8e68:	d0a60a15 	stw	r2,-26584(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    8e6c:	e0bffc17 	ldw	r2,-16(fp)
    8e70:	10800104 	addi	r2,r2,4
    8e74:	00c001c4 	movi	r3,7
    8e78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    8e7c:	d8000015 	stw	zero,0(sp)
    8e80:	e1fffc17 	ldw	r7,-16(fp)
    8e84:	01800074 	movhi	r6,1
    8e88:	31a36f04 	addi	r6,r6,-29252
    8e8c:	e17ffe17 	ldw	r5,-8(fp)
    8e90:	e13ffd17 	ldw	r4,-12(fp)
    8e94:	00092fc0 	call	92fc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    8e98:	0001883a 	nop
    8e9c:	e037883a 	mov	sp,fp
    8ea0:	dfc00117 	ldw	ra,4(sp)
    8ea4:	df000017 	ldw	fp,0(sp)
    8ea8:	dec00204 	addi	sp,sp,8
    8eac:	f800283a 	ret

00008eb0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    8eb0:	defff504 	addi	sp,sp,-44
    8eb4:	df000a15 	stw	fp,40(sp)
    8eb8:	df000a04 	addi	fp,sp,40
    8ebc:	e13ffc15 	stw	r4,-16(fp)
    8ec0:	e17ffd15 	stw	r5,-12(fp)
    8ec4:	e1bffe15 	stw	r6,-8(fp)
    8ec8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    8ecc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    8ed0:	d0a60a17 	ldw	r2,-26584(gp)
  
  if (alt_ticks_per_second ())
    8ed4:	10003c26 	beq	r2,zero,8fc8 <alt_alarm_start+0x118>
  {
    if (alarm)
    8ed8:	e0bffc17 	ldw	r2,-16(fp)
    8edc:	10003826 	beq	r2,zero,8fc0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    8ee0:	e0bffc17 	ldw	r2,-16(fp)
    8ee4:	e0fffe17 	ldw	r3,-8(fp)
    8ee8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    8eec:	e0bffc17 	ldw	r2,-16(fp)
    8ef0:	e0ffff17 	ldw	r3,-4(fp)
    8ef4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    8ef8:	0005303a 	rdctl	r2,status
    8efc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    8f00:	e0fff917 	ldw	r3,-28(fp)
    8f04:	00bfff84 	movi	r2,-2
    8f08:	1884703a 	and	r2,r3,r2
    8f0c:	1001703a 	wrctl	status,r2
  
  return context;
    8f10:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    8f14:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    8f18:	d0a60b17 	ldw	r2,-26580(gp)
      
      current_nticks = alt_nticks();
    8f1c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    8f20:	e0fffd17 	ldw	r3,-12(fp)
    8f24:	e0bff617 	ldw	r2,-40(fp)
    8f28:	1885883a 	add	r2,r3,r2
    8f2c:	10c00044 	addi	r3,r2,1
    8f30:	e0bffc17 	ldw	r2,-16(fp)
    8f34:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    8f38:	e0bffc17 	ldw	r2,-16(fp)
    8f3c:	10c00217 	ldw	r3,8(r2)
    8f40:	e0bff617 	ldw	r2,-40(fp)
    8f44:	1880042e 	bgeu	r3,r2,8f58 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    8f48:	e0bffc17 	ldw	r2,-16(fp)
    8f4c:	00c00044 	movi	r3,1
    8f50:	10c00405 	stb	r3,16(r2)
    8f54:	00000206 	br	8f60 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    8f58:	e0bffc17 	ldw	r2,-16(fp)
    8f5c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    8f60:	e0bffc17 	ldw	r2,-16(fp)
    8f64:	d0e02604 	addi	r3,gp,-32616
    8f68:	e0fffa15 	stw	r3,-24(fp)
    8f6c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    8f70:	e0bffb17 	ldw	r2,-20(fp)
    8f74:	e0fffa17 	ldw	r3,-24(fp)
    8f78:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    8f7c:	e0bffa17 	ldw	r2,-24(fp)
    8f80:	10c00017 	ldw	r3,0(r2)
    8f84:	e0bffb17 	ldw	r2,-20(fp)
    8f88:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    8f8c:	e0bffa17 	ldw	r2,-24(fp)
    8f90:	10800017 	ldw	r2,0(r2)
    8f94:	e0fffb17 	ldw	r3,-20(fp)
    8f98:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    8f9c:	e0bffa17 	ldw	r2,-24(fp)
    8fa0:	e0fffb17 	ldw	r3,-20(fp)
    8fa4:	10c00015 	stw	r3,0(r2)
    8fa8:	e0bff817 	ldw	r2,-32(fp)
    8fac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    8fb0:	e0bff717 	ldw	r2,-36(fp)
    8fb4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    8fb8:	0005883a 	mov	r2,zero
    8fbc:	00000306 	br	8fcc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    8fc0:	00bffa84 	movi	r2,-22
    8fc4:	00000106 	br	8fcc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    8fc8:	00bfde84 	movi	r2,-134
  }
}
    8fcc:	e037883a 	mov	sp,fp
    8fd0:	df000017 	ldw	fp,0(sp)
    8fd4:	dec00104 	addi	sp,sp,4
    8fd8:	f800283a 	ret

00008fdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8fdc:	defffe04 	addi	sp,sp,-8
    8fe0:	dfc00115 	stw	ra,4(sp)
    8fe4:	df000015 	stw	fp,0(sp)
    8fe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8fec:	d0a02417 	ldw	r2,-32624(gp)
    8ff0:	10000326 	beq	r2,zero,9000 <alt_get_errno+0x24>
    8ff4:	d0a02417 	ldw	r2,-32624(gp)
    8ff8:	103ee83a 	callr	r2
    8ffc:	00000106 	br	9004 <alt_get_errno+0x28>
    9000:	d0a60d04 	addi	r2,gp,-26572
}
    9004:	e037883a 	mov	sp,fp
    9008:	dfc00117 	ldw	ra,4(sp)
    900c:	df000017 	ldw	fp,0(sp)
    9010:	dec00204 	addi	sp,sp,8
    9014:	f800283a 	ret

00009018 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9018:	defffb04 	addi	sp,sp,-20
    901c:	dfc00415 	stw	ra,16(sp)
    9020:	df000315 	stw	fp,12(sp)
    9024:	df000304 	addi	fp,sp,12
    9028:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    902c:	e0bfff17 	ldw	r2,-4(fp)
    9030:	10000816 	blt	r2,zero,9054 <close+0x3c>
    9034:	01400304 	movi	r5,12
    9038:	e13fff17 	ldw	r4,-4(fp)
    903c:	000aa680 	call	aa68 <__mulsi3>
    9040:	1007883a 	mov	r3,r2
    9044:	00800074 	movhi	r2,1
    9048:	10af3b04 	addi	r2,r2,-17172
    904c:	1885883a 	add	r2,r3,r2
    9050:	00000106 	br	9058 <close+0x40>
    9054:	0005883a 	mov	r2,zero
    9058:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    905c:	e0bffd17 	ldw	r2,-12(fp)
    9060:	10001926 	beq	r2,zero,90c8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9064:	e0bffd17 	ldw	r2,-12(fp)
    9068:	10800017 	ldw	r2,0(r2)
    906c:	10800417 	ldw	r2,16(r2)
    9070:	10000626 	beq	r2,zero,908c <close+0x74>
    9074:	e0bffd17 	ldw	r2,-12(fp)
    9078:	10800017 	ldw	r2,0(r2)
    907c:	10800417 	ldw	r2,16(r2)
    9080:	e13ffd17 	ldw	r4,-12(fp)
    9084:	103ee83a 	callr	r2
    9088:	00000106 	br	9090 <close+0x78>
    908c:	0005883a 	mov	r2,zero
    9090:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9094:	e13fff17 	ldw	r4,-4(fp)
    9098:	00099800 	call	9980 <alt_release_fd>
    if (rval < 0)
    909c:	e0bffe17 	ldw	r2,-8(fp)
    90a0:	1000070e 	bge	r2,zero,90c0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    90a4:	0008fdc0 	call	8fdc <alt_get_errno>
    90a8:	1007883a 	mov	r3,r2
    90ac:	e0bffe17 	ldw	r2,-8(fp)
    90b0:	0085c83a 	sub	r2,zero,r2
    90b4:	18800015 	stw	r2,0(r3)
      return -1;
    90b8:	00bfffc4 	movi	r2,-1
    90bc:	00000706 	br	90dc <close+0xc4>
    }
    return 0;
    90c0:	0005883a 	mov	r2,zero
    90c4:	00000506 	br	90dc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    90c8:	0008fdc0 	call	8fdc <alt_get_errno>
    90cc:	1007883a 	mov	r3,r2
    90d0:	00801444 	movi	r2,81
    90d4:	18800015 	stw	r2,0(r3)
    return -1;
    90d8:	00bfffc4 	movi	r2,-1
  }
}
    90dc:	e037883a 	mov	sp,fp
    90e0:	dfc00117 	ldw	ra,4(sp)
    90e4:	df000017 	ldw	fp,0(sp)
    90e8:	dec00204 	addi	sp,sp,8
    90ec:	f800283a 	ret

000090f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    90f0:	deffff04 	addi	sp,sp,-4
    90f4:	df000015 	stw	fp,0(sp)
    90f8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    90fc:	0001883a 	nop
    9100:	e037883a 	mov	sp,fp
    9104:	df000017 	ldw	fp,0(sp)
    9108:	dec00104 	addi	sp,sp,4
    910c:	f800283a 	ret

00009110 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9110:	defffc04 	addi	sp,sp,-16
    9114:	df000315 	stw	fp,12(sp)
    9118:	df000304 	addi	fp,sp,12
    911c:	e13ffd15 	stw	r4,-12(fp)
    9120:	e17ffe15 	stw	r5,-8(fp)
    9124:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9128:	e0bfff17 	ldw	r2,-4(fp)
}
    912c:	e037883a 	mov	sp,fp
    9130:	df000017 	ldw	fp,0(sp)
    9134:	dec00104 	addi	sp,sp,4
    9138:	f800283a 	ret

0000913c <alt_get_errno>:
    913c:	defffe04 	addi	sp,sp,-8
    9140:	dfc00115 	stw	ra,4(sp)
    9144:	df000015 	stw	fp,0(sp)
    9148:	d839883a 	mov	fp,sp
    914c:	d0a02417 	ldw	r2,-32624(gp)
    9150:	10000326 	beq	r2,zero,9160 <alt_get_errno+0x24>
    9154:	d0a02417 	ldw	r2,-32624(gp)
    9158:	103ee83a 	callr	r2
    915c:	00000106 	br	9164 <alt_get_errno+0x28>
    9160:	d0a60d04 	addi	r2,gp,-26572
    9164:	e037883a 	mov	sp,fp
    9168:	dfc00117 	ldw	ra,4(sp)
    916c:	df000017 	ldw	fp,0(sp)
    9170:	dec00204 	addi	sp,sp,8
    9174:	f800283a 	ret

00009178 <alt_dev_llist_insert>:
    9178:	defffa04 	addi	sp,sp,-24
    917c:	dfc00515 	stw	ra,20(sp)
    9180:	df000415 	stw	fp,16(sp)
    9184:	df000404 	addi	fp,sp,16
    9188:	e13ffe15 	stw	r4,-8(fp)
    918c:	e17fff15 	stw	r5,-4(fp)
    9190:	e0bffe17 	ldw	r2,-8(fp)
    9194:	10000326 	beq	r2,zero,91a4 <alt_dev_llist_insert+0x2c>
    9198:	e0bffe17 	ldw	r2,-8(fp)
    919c:	10800217 	ldw	r2,8(r2)
    91a0:	1000061e 	bne	r2,zero,91bc <alt_dev_llist_insert+0x44>
    91a4:	000913c0 	call	913c <alt_get_errno>
    91a8:	1007883a 	mov	r3,r2
    91ac:	00800584 	movi	r2,22
    91b0:	18800015 	stw	r2,0(r3)
    91b4:	00bffa84 	movi	r2,-22
    91b8:	00001306 	br	9208 <alt_dev_llist_insert+0x90>
    91bc:	e0bffe17 	ldw	r2,-8(fp)
    91c0:	e0ffff17 	ldw	r3,-4(fp)
    91c4:	e0fffc15 	stw	r3,-16(fp)
    91c8:	e0bffd15 	stw	r2,-12(fp)
    91cc:	e0bffd17 	ldw	r2,-12(fp)
    91d0:	e0fffc17 	ldw	r3,-16(fp)
    91d4:	10c00115 	stw	r3,4(r2)
    91d8:	e0bffc17 	ldw	r2,-16(fp)
    91dc:	10c00017 	ldw	r3,0(r2)
    91e0:	e0bffd17 	ldw	r2,-12(fp)
    91e4:	10c00015 	stw	r3,0(r2)
    91e8:	e0bffc17 	ldw	r2,-16(fp)
    91ec:	10800017 	ldw	r2,0(r2)
    91f0:	e0fffd17 	ldw	r3,-12(fp)
    91f4:	10c00115 	stw	r3,4(r2)
    91f8:	e0bffc17 	ldw	r2,-16(fp)
    91fc:	e0fffd17 	ldw	r3,-12(fp)
    9200:	10c00015 	stw	r3,0(r2)
    9204:	0005883a 	mov	r2,zero
    9208:	e037883a 	mov	sp,fp
    920c:	dfc00117 	ldw	ra,4(sp)
    9210:	df000017 	ldw	fp,0(sp)
    9214:	dec00204 	addi	sp,sp,8
    9218:	f800283a 	ret

0000921c <_do_ctors>:
    921c:	defffd04 	addi	sp,sp,-12
    9220:	dfc00215 	stw	ra,8(sp)
    9224:	df000115 	stw	fp,4(sp)
    9228:	df000104 	addi	fp,sp,4
    922c:	00800074 	movhi	r2,1
    9230:	10aab004 	addi	r2,r2,-21824
    9234:	e0bfff15 	stw	r2,-4(fp)
    9238:	00000606 	br	9254 <_do_ctors+0x38>
    923c:	e0bfff17 	ldw	r2,-4(fp)
    9240:	10800017 	ldw	r2,0(r2)
    9244:	103ee83a 	callr	r2
    9248:	e0bfff17 	ldw	r2,-4(fp)
    924c:	10bfff04 	addi	r2,r2,-4
    9250:	e0bfff15 	stw	r2,-4(fp)
    9254:	e0ffff17 	ldw	r3,-4(fp)
    9258:	00800074 	movhi	r2,1
    925c:	10aab104 	addi	r2,r2,-21820
    9260:	18bff62e 	bgeu	r3,r2,923c <__alt_data_end+0xffff0b9c>
    9264:	0001883a 	nop
    9268:	e037883a 	mov	sp,fp
    926c:	dfc00117 	ldw	ra,4(sp)
    9270:	df000017 	ldw	fp,0(sp)
    9274:	dec00204 	addi	sp,sp,8
    9278:	f800283a 	ret

0000927c <_do_dtors>:
    927c:	defffd04 	addi	sp,sp,-12
    9280:	dfc00215 	stw	ra,8(sp)
    9284:	df000115 	stw	fp,4(sp)
    9288:	df000104 	addi	fp,sp,4
    928c:	00800074 	movhi	r2,1
    9290:	10aab004 	addi	r2,r2,-21824
    9294:	e0bfff15 	stw	r2,-4(fp)
    9298:	00000606 	br	92b4 <_do_dtors+0x38>
    929c:	e0bfff17 	ldw	r2,-4(fp)
    92a0:	10800017 	ldw	r2,0(r2)
    92a4:	103ee83a 	callr	r2
    92a8:	e0bfff17 	ldw	r2,-4(fp)
    92ac:	10bfff04 	addi	r2,r2,-4
    92b0:	e0bfff15 	stw	r2,-4(fp)
    92b4:	e0ffff17 	ldw	r3,-4(fp)
    92b8:	00800074 	movhi	r2,1
    92bc:	10aab104 	addi	r2,r2,-21820
    92c0:	18bff62e 	bgeu	r3,r2,929c <__alt_data_end+0xffff0bfc>
    92c4:	0001883a 	nop
    92c8:	e037883a 	mov	sp,fp
    92cc:	dfc00117 	ldw	ra,4(sp)
    92d0:	df000017 	ldw	fp,0(sp)
    92d4:	dec00204 	addi	sp,sp,8
    92d8:	f800283a 	ret

000092dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    92dc:	deffff04 	addi	sp,sp,-4
    92e0:	df000015 	stw	fp,0(sp)
    92e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    92e8:	0001883a 	nop
    92ec:	e037883a 	mov	sp,fp
    92f0:	df000017 	ldw	fp,0(sp)
    92f4:	dec00104 	addi	sp,sp,4
    92f8:	f800283a 	ret

000092fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    92fc:	defff904 	addi	sp,sp,-28
    9300:	dfc00615 	stw	ra,24(sp)
    9304:	df000515 	stw	fp,20(sp)
    9308:	df000504 	addi	fp,sp,20
    930c:	e13ffc15 	stw	r4,-16(fp)
    9310:	e17ffd15 	stw	r5,-12(fp)
    9314:	e1bffe15 	stw	r6,-8(fp)
    9318:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    931c:	e0800217 	ldw	r2,8(fp)
    9320:	d8800015 	stw	r2,0(sp)
    9324:	e1ffff17 	ldw	r7,-4(fp)
    9328:	e1bffe17 	ldw	r6,-8(fp)
    932c:	e17ffd17 	ldw	r5,-12(fp)
    9330:	e13ffc17 	ldw	r4,-16(fp)
    9334:	00094ac0 	call	94ac <alt_iic_isr_register>
}  
    9338:	e037883a 	mov	sp,fp
    933c:	dfc00117 	ldw	ra,4(sp)
    9340:	df000017 	ldw	fp,0(sp)
    9344:	dec00204 	addi	sp,sp,8
    9348:	f800283a 	ret

0000934c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    934c:	defff904 	addi	sp,sp,-28
    9350:	df000615 	stw	fp,24(sp)
    9354:	df000604 	addi	fp,sp,24
    9358:	e13ffe15 	stw	r4,-8(fp)
    935c:	e17fff15 	stw	r5,-4(fp)
    9360:	e0bfff17 	ldw	r2,-4(fp)
    9364:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9368:	0005303a 	rdctl	r2,status
    936c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9370:	e0fffb17 	ldw	r3,-20(fp)
    9374:	00bfff84 	movi	r2,-2
    9378:	1884703a 	and	r2,r3,r2
    937c:	1001703a 	wrctl	status,r2
  
  return context;
    9380:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9384:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9388:	00c00044 	movi	r3,1
    938c:	e0bffa17 	ldw	r2,-24(fp)
    9390:	1884983a 	sll	r2,r3,r2
    9394:	1007883a 	mov	r3,r2
    9398:	d0a60917 	ldw	r2,-26588(gp)
    939c:	1884b03a 	or	r2,r3,r2
    93a0:	d0a60915 	stw	r2,-26588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    93a4:	d0a60917 	ldw	r2,-26588(gp)
    93a8:	100170fa 	wrctl	ienable,r2
    93ac:	e0bffc17 	ldw	r2,-16(fp)
    93b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    93b4:	e0bffd17 	ldw	r2,-12(fp)
    93b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    93bc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    93c0:	0001883a 	nop
}
    93c4:	e037883a 	mov	sp,fp
    93c8:	df000017 	ldw	fp,0(sp)
    93cc:	dec00104 	addi	sp,sp,4
    93d0:	f800283a 	ret

000093d4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    93d4:	defff904 	addi	sp,sp,-28
    93d8:	df000615 	stw	fp,24(sp)
    93dc:	df000604 	addi	fp,sp,24
    93e0:	e13ffe15 	stw	r4,-8(fp)
    93e4:	e17fff15 	stw	r5,-4(fp)
    93e8:	e0bfff17 	ldw	r2,-4(fp)
    93ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    93f0:	0005303a 	rdctl	r2,status
    93f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    93f8:	e0fffb17 	ldw	r3,-20(fp)
    93fc:	00bfff84 	movi	r2,-2
    9400:	1884703a 	and	r2,r3,r2
    9404:	1001703a 	wrctl	status,r2
  
  return context;
    9408:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    940c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9410:	00c00044 	movi	r3,1
    9414:	e0bffa17 	ldw	r2,-24(fp)
    9418:	1884983a 	sll	r2,r3,r2
    941c:	0084303a 	nor	r2,zero,r2
    9420:	1007883a 	mov	r3,r2
    9424:	d0a60917 	ldw	r2,-26588(gp)
    9428:	1884703a 	and	r2,r3,r2
    942c:	d0a60915 	stw	r2,-26588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9430:	d0a60917 	ldw	r2,-26588(gp)
    9434:	100170fa 	wrctl	ienable,r2
    9438:	e0bffc17 	ldw	r2,-16(fp)
    943c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9440:	e0bffd17 	ldw	r2,-12(fp)
    9444:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9448:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    944c:	0001883a 	nop
}
    9450:	e037883a 	mov	sp,fp
    9454:	df000017 	ldw	fp,0(sp)
    9458:	dec00104 	addi	sp,sp,4
    945c:	f800283a 	ret

00009460 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9460:	defffc04 	addi	sp,sp,-16
    9464:	df000315 	stw	fp,12(sp)
    9468:	df000304 	addi	fp,sp,12
    946c:	e13ffe15 	stw	r4,-8(fp)
    9470:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9474:	000530fa 	rdctl	r2,ienable
    9478:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    947c:	00c00044 	movi	r3,1
    9480:	e0bfff17 	ldw	r2,-4(fp)
    9484:	1884983a 	sll	r2,r3,r2
    9488:	1007883a 	mov	r3,r2
    948c:	e0bffd17 	ldw	r2,-12(fp)
    9490:	1884703a 	and	r2,r3,r2
    9494:	1004c03a 	cmpne	r2,r2,zero
    9498:	10803fcc 	andi	r2,r2,255
}
    949c:	e037883a 	mov	sp,fp
    94a0:	df000017 	ldw	fp,0(sp)
    94a4:	dec00104 	addi	sp,sp,4
    94a8:	f800283a 	ret

000094ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    94ac:	defff504 	addi	sp,sp,-44
    94b0:	dfc00a15 	stw	ra,40(sp)
    94b4:	df000915 	stw	fp,36(sp)
    94b8:	df000904 	addi	fp,sp,36
    94bc:	e13ffc15 	stw	r4,-16(fp)
    94c0:	e17ffd15 	stw	r5,-12(fp)
    94c4:	e1bffe15 	stw	r6,-8(fp)
    94c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    94cc:	00bffa84 	movi	r2,-22
    94d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    94d4:	e0bffd17 	ldw	r2,-12(fp)
    94d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    94dc:	e0bff817 	ldw	r2,-32(fp)
    94e0:	10800808 	cmpgei	r2,r2,32
    94e4:	1000271e 	bne	r2,zero,9584 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    94e8:	0005303a 	rdctl	r2,status
    94ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    94f0:	e0fffb17 	ldw	r3,-20(fp)
    94f4:	00bfff84 	movi	r2,-2
    94f8:	1884703a 	and	r2,r3,r2
    94fc:	1001703a 	wrctl	status,r2
  
  return context;
    9500:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9504:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9508:	00800074 	movhi	r2,1
    950c:	10933b04 	addi	r2,r2,19692
    9510:	e0fff817 	ldw	r3,-32(fp)
    9514:	180690fa 	slli	r3,r3,3
    9518:	10c5883a 	add	r2,r2,r3
    951c:	e0fffe17 	ldw	r3,-8(fp)
    9520:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9524:	00800074 	movhi	r2,1
    9528:	10933b04 	addi	r2,r2,19692
    952c:	e0fff817 	ldw	r3,-32(fp)
    9530:	180690fa 	slli	r3,r3,3
    9534:	10c5883a 	add	r2,r2,r3
    9538:	10800104 	addi	r2,r2,4
    953c:	e0ffff17 	ldw	r3,-4(fp)
    9540:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9544:	e0bffe17 	ldw	r2,-8(fp)
    9548:	10000526 	beq	r2,zero,9560 <alt_iic_isr_register+0xb4>
    954c:	e0bff817 	ldw	r2,-32(fp)
    9550:	100b883a 	mov	r5,r2
    9554:	e13ffc17 	ldw	r4,-16(fp)
    9558:	000934c0 	call	934c <alt_ic_irq_enable>
    955c:	00000406 	br	9570 <alt_iic_isr_register+0xc4>
    9560:	e0bff817 	ldw	r2,-32(fp)
    9564:	100b883a 	mov	r5,r2
    9568:	e13ffc17 	ldw	r4,-16(fp)
    956c:	00093d40 	call	93d4 <alt_ic_irq_disable>
    9570:	e0bff715 	stw	r2,-36(fp)
    9574:	e0bffa17 	ldw	r2,-24(fp)
    9578:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    957c:	e0bff917 	ldw	r2,-28(fp)
    9580:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9584:	e0bff717 	ldw	r2,-36(fp)
}
    9588:	e037883a 	mov	sp,fp
    958c:	dfc00117 	ldw	ra,4(sp)
    9590:	df000017 	ldw	fp,0(sp)
    9594:	dec00204 	addi	sp,sp,8
    9598:	f800283a 	ret

0000959c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    959c:	defff804 	addi	sp,sp,-32
    95a0:	dfc00715 	stw	ra,28(sp)
    95a4:	df000615 	stw	fp,24(sp)
    95a8:	dc000515 	stw	r16,20(sp)
    95ac:	df000604 	addi	fp,sp,24
    95b0:	e13ffb15 	stw	r4,-20(fp)
    95b4:	e17ffc15 	stw	r5,-16(fp)
    95b8:	e1bffd15 	stw	r6,-12(fp)
    95bc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    95c0:	e1bffe17 	ldw	r6,-8(fp)
    95c4:	e17ffd17 	ldw	r5,-12(fp)
    95c8:	e13ffc17 	ldw	r4,-16(fp)
    95cc:	00098240 	call	9824 <open>
    95d0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    95d4:	e0bffa17 	ldw	r2,-24(fp)
    95d8:	10002216 	blt	r2,zero,9664 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    95dc:	04000074 	movhi	r16,1
    95e0:	842f3b04 	addi	r16,r16,-17172
    95e4:	e0bffa17 	ldw	r2,-24(fp)
    95e8:	01400304 	movi	r5,12
    95ec:	1009883a 	mov	r4,r2
    95f0:	000aa680 	call	aa68 <__mulsi3>
    95f4:	8085883a 	add	r2,r16,r2
    95f8:	10c00017 	ldw	r3,0(r2)
    95fc:	e0bffb17 	ldw	r2,-20(fp)
    9600:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9604:	04000074 	movhi	r16,1
    9608:	842f3b04 	addi	r16,r16,-17172
    960c:	e0bffa17 	ldw	r2,-24(fp)
    9610:	01400304 	movi	r5,12
    9614:	1009883a 	mov	r4,r2
    9618:	000aa680 	call	aa68 <__mulsi3>
    961c:	8085883a 	add	r2,r16,r2
    9620:	10800104 	addi	r2,r2,4
    9624:	10c00017 	ldw	r3,0(r2)
    9628:	e0bffb17 	ldw	r2,-20(fp)
    962c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9630:	04000074 	movhi	r16,1
    9634:	842f3b04 	addi	r16,r16,-17172
    9638:	e0bffa17 	ldw	r2,-24(fp)
    963c:	01400304 	movi	r5,12
    9640:	1009883a 	mov	r4,r2
    9644:	000aa680 	call	aa68 <__mulsi3>
    9648:	8085883a 	add	r2,r16,r2
    964c:	10800204 	addi	r2,r2,8
    9650:	10c00017 	ldw	r3,0(r2)
    9654:	e0bffb17 	ldw	r2,-20(fp)
    9658:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    965c:	e13ffa17 	ldw	r4,-24(fp)
    9660:	00099800 	call	9980 <alt_release_fd>
  }
} 
    9664:	0001883a 	nop
    9668:	e6ffff04 	addi	sp,fp,-4
    966c:	dfc00217 	ldw	ra,8(sp)
    9670:	df000117 	ldw	fp,4(sp)
    9674:	dc000017 	ldw	r16,0(sp)
    9678:	dec00304 	addi	sp,sp,12
    967c:	f800283a 	ret

00009680 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9680:	defffb04 	addi	sp,sp,-20
    9684:	dfc00415 	stw	ra,16(sp)
    9688:	df000315 	stw	fp,12(sp)
    968c:	df000304 	addi	fp,sp,12
    9690:	e13ffd15 	stw	r4,-12(fp)
    9694:	e17ffe15 	stw	r5,-8(fp)
    9698:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    969c:	01c07fc4 	movi	r7,511
    96a0:	01800044 	movi	r6,1
    96a4:	e17ffd17 	ldw	r5,-12(fp)
    96a8:	01000074 	movhi	r4,1
    96ac:	212f3e04 	addi	r4,r4,-17160
    96b0:	000959c0 	call	959c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    96b4:	01c07fc4 	movi	r7,511
    96b8:	000d883a 	mov	r6,zero
    96bc:	e17ffe17 	ldw	r5,-8(fp)
    96c0:	01000074 	movhi	r4,1
    96c4:	212f3b04 	addi	r4,r4,-17172
    96c8:	000959c0 	call	959c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    96cc:	01c07fc4 	movi	r7,511
    96d0:	01800044 	movi	r6,1
    96d4:	e17fff17 	ldw	r5,-4(fp)
    96d8:	01000074 	movhi	r4,1
    96dc:	212f4104 	addi	r4,r4,-17148
    96e0:	000959c0 	call	959c <alt_open_fd>
}  
    96e4:	0001883a 	nop
    96e8:	e037883a 	mov	sp,fp
    96ec:	dfc00117 	ldw	ra,4(sp)
    96f0:	df000017 	ldw	fp,0(sp)
    96f4:	dec00204 	addi	sp,sp,8
    96f8:	f800283a 	ret

000096fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    96fc:	defffe04 	addi	sp,sp,-8
    9700:	dfc00115 	stw	ra,4(sp)
    9704:	df000015 	stw	fp,0(sp)
    9708:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    970c:	d0a02417 	ldw	r2,-32624(gp)
    9710:	10000326 	beq	r2,zero,9720 <alt_get_errno+0x24>
    9714:	d0a02417 	ldw	r2,-32624(gp)
    9718:	103ee83a 	callr	r2
    971c:	00000106 	br	9724 <alt_get_errno+0x28>
    9720:	d0a60d04 	addi	r2,gp,-26572
}
    9724:	e037883a 	mov	sp,fp
    9728:	dfc00117 	ldw	ra,4(sp)
    972c:	df000017 	ldw	fp,0(sp)
    9730:	dec00204 	addi	sp,sp,8
    9734:	f800283a 	ret

00009738 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9738:	defffb04 	addi	sp,sp,-20
    973c:	dfc00415 	stw	ra,16(sp)
    9740:	df000315 	stw	fp,12(sp)
    9744:	dc000215 	stw	r16,8(sp)
    9748:	df000304 	addi	fp,sp,12
    974c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9750:	e0bffe17 	ldw	r2,-8(fp)
    9754:	10800217 	ldw	r2,8(r2)
    9758:	10d00034 	orhi	r3,r2,16384
    975c:	e0bffe17 	ldw	r2,-8(fp)
    9760:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9764:	e03ffd15 	stw	zero,-12(fp)
    9768:	00002306 	br	97f8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    976c:	04000074 	movhi	r16,1
    9770:	842f3b04 	addi	r16,r16,-17172
    9774:	e0bffd17 	ldw	r2,-12(fp)
    9778:	01400304 	movi	r5,12
    977c:	1009883a 	mov	r4,r2
    9780:	000aa680 	call	aa68 <__mulsi3>
    9784:	8085883a 	add	r2,r16,r2
    9788:	10c00017 	ldw	r3,0(r2)
    978c:	e0bffe17 	ldw	r2,-8(fp)
    9790:	10800017 	ldw	r2,0(r2)
    9794:	1880151e 	bne	r3,r2,97ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9798:	04000074 	movhi	r16,1
    979c:	842f3b04 	addi	r16,r16,-17172
    97a0:	e0bffd17 	ldw	r2,-12(fp)
    97a4:	01400304 	movi	r5,12
    97a8:	1009883a 	mov	r4,r2
    97ac:	000aa680 	call	aa68 <__mulsi3>
    97b0:	8085883a 	add	r2,r16,r2
    97b4:	10800204 	addi	r2,r2,8
    97b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    97bc:	10000b0e 	bge	r2,zero,97ec <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    97c0:	01400304 	movi	r5,12
    97c4:	e13ffd17 	ldw	r4,-12(fp)
    97c8:	000aa680 	call	aa68 <__mulsi3>
    97cc:	1007883a 	mov	r3,r2
    97d0:	00800074 	movhi	r2,1
    97d4:	10af3b04 	addi	r2,r2,-17172
    97d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    97dc:	e0bffe17 	ldw	r2,-8(fp)
    97e0:	18800226 	beq	r3,r2,97ec <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    97e4:	00bffcc4 	movi	r2,-13
    97e8:	00000806 	br	980c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    97ec:	e0bffd17 	ldw	r2,-12(fp)
    97f0:	10800044 	addi	r2,r2,1
    97f4:	e0bffd15 	stw	r2,-12(fp)
    97f8:	d0a02317 	ldw	r2,-32628(gp)
    97fc:	1007883a 	mov	r3,r2
    9800:	e0bffd17 	ldw	r2,-12(fp)
    9804:	18bfd92e 	bgeu	r3,r2,976c <__alt_data_end+0xffff10cc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9808:	0005883a 	mov	r2,zero
}
    980c:	e6ffff04 	addi	sp,fp,-4
    9810:	dfc00217 	ldw	ra,8(sp)
    9814:	df000117 	ldw	fp,4(sp)
    9818:	dc000017 	ldw	r16,0(sp)
    981c:	dec00304 	addi	sp,sp,12
    9820:	f800283a 	ret

00009824 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9824:	defff604 	addi	sp,sp,-40
    9828:	dfc00915 	stw	ra,36(sp)
    982c:	df000815 	stw	fp,32(sp)
    9830:	df000804 	addi	fp,sp,32
    9834:	e13ffd15 	stw	r4,-12(fp)
    9838:	e17ffe15 	stw	r5,-8(fp)
    983c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    9840:	00bfffc4 	movi	r2,-1
    9844:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    9848:	00bffb44 	movi	r2,-19
    984c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    9850:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    9854:	d1602104 	addi	r5,gp,-32636
    9858:	e13ffd17 	ldw	r4,-12(fp)
    985c:	0009f240 	call	9f24 <alt_find_dev>
    9860:	e0bff815 	stw	r2,-32(fp)
    9864:	e0bff817 	ldw	r2,-32(fp)
    9868:	1000051e 	bne	r2,zero,9880 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    986c:	e13ffd17 	ldw	r4,-12(fp)
    9870:	0009fb40 	call	9fb4 <alt_find_file>
    9874:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    9878:	00800044 	movi	r2,1
    987c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    9880:	e0bff817 	ldw	r2,-32(fp)
    9884:	10002b26 	beq	r2,zero,9934 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
    9888:	e13ff817 	ldw	r4,-32(fp)
    988c:	000a0bc0 	call	a0bc <alt_get_fd>
    9890:	e0bff915 	stw	r2,-28(fp)
    9894:	e0bff917 	ldw	r2,-28(fp)
    9898:	1000030e 	bge	r2,zero,98a8 <open+0x84>
    {
      status = index;
    989c:	e0bff917 	ldw	r2,-28(fp)
    98a0:	e0bffa15 	stw	r2,-24(fp)
    98a4:	00002506 	br	993c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
    98a8:	01400304 	movi	r5,12
    98ac:	e13ff917 	ldw	r4,-28(fp)
    98b0:	000aa680 	call	aa68 <__mulsi3>
    98b4:	1007883a 	mov	r3,r2
    98b8:	00800074 	movhi	r2,1
    98bc:	10af3b04 	addi	r2,r2,-17172
    98c0:	1885883a 	add	r2,r3,r2
    98c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    98c8:	e0fffe17 	ldw	r3,-8(fp)
    98cc:	00900034 	movhi	r2,16384
    98d0:	10bfffc4 	addi	r2,r2,-1
    98d4:	1886703a 	and	r3,r3,r2
    98d8:	e0bffc17 	ldw	r2,-16(fp)
    98dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    98e0:	e0bffb17 	ldw	r2,-20(fp)
    98e4:	1000051e 	bne	r2,zero,98fc <open+0xd8>
    98e8:	e13ffc17 	ldw	r4,-16(fp)
    98ec:	00097380 	call	9738 <alt_file_locked>
    98f0:	e0bffa15 	stw	r2,-24(fp)
    98f4:	e0bffa17 	ldw	r2,-24(fp)
    98f8:	10001016 	blt	r2,zero,993c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    98fc:	e0bff817 	ldw	r2,-32(fp)
    9900:	10800317 	ldw	r2,12(r2)
    9904:	10000826 	beq	r2,zero,9928 <open+0x104>
    9908:	e0bff817 	ldw	r2,-32(fp)
    990c:	10800317 	ldw	r2,12(r2)
    9910:	e1ffff17 	ldw	r7,-4(fp)
    9914:	e1bffe17 	ldw	r6,-8(fp)
    9918:	e17ffd17 	ldw	r5,-12(fp)
    991c:	e13ffc17 	ldw	r4,-16(fp)
    9920:	103ee83a 	callr	r2
    9924:	00000106 	br	992c <open+0x108>
    9928:	0005883a 	mov	r2,zero
    992c:	e0bffa15 	stw	r2,-24(fp)
    9930:	00000206 	br	993c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
    9934:	00bffb44 	movi	r2,-19
    9938:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    993c:	e0bffa17 	ldw	r2,-24(fp)
    9940:	1000090e 	bge	r2,zero,9968 <open+0x144>
  {
    alt_release_fd (index);  
    9944:	e13ff917 	ldw	r4,-28(fp)
    9948:	00099800 	call	9980 <alt_release_fd>
    ALT_ERRNO = -status;
    994c:	00096fc0 	call	96fc <alt_get_errno>
    9950:	1007883a 	mov	r3,r2
    9954:	e0bffa17 	ldw	r2,-24(fp)
    9958:	0085c83a 	sub	r2,zero,r2
    995c:	18800015 	stw	r2,0(r3)
    return -1;
    9960:	00bfffc4 	movi	r2,-1
    9964:	00000106 	br	996c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
    9968:	e0bff917 	ldw	r2,-28(fp)
}
    996c:	e037883a 	mov	sp,fp
    9970:	dfc00117 	ldw	ra,4(sp)
    9974:	df000017 	ldw	fp,0(sp)
    9978:	dec00204 	addi	sp,sp,8
    997c:	f800283a 	ret

00009980 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    9980:	defffc04 	addi	sp,sp,-16
    9984:	dfc00315 	stw	ra,12(sp)
    9988:	df000215 	stw	fp,8(sp)
    998c:	dc000115 	stw	r16,4(sp)
    9990:	df000204 	addi	fp,sp,8
    9994:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    9998:	e0bffe17 	ldw	r2,-8(fp)
    999c:	108000d0 	cmplti	r2,r2,3
    99a0:	1000111e 	bne	r2,zero,99e8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    99a4:	04000074 	movhi	r16,1
    99a8:	842f3b04 	addi	r16,r16,-17172
    99ac:	e0bffe17 	ldw	r2,-8(fp)
    99b0:	01400304 	movi	r5,12
    99b4:	1009883a 	mov	r4,r2
    99b8:	000aa680 	call	aa68 <__mulsi3>
    99bc:	8085883a 	add	r2,r16,r2
    99c0:	10800204 	addi	r2,r2,8
    99c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    99c8:	04000074 	movhi	r16,1
    99cc:	842f3b04 	addi	r16,r16,-17172
    99d0:	e0bffe17 	ldw	r2,-8(fp)
    99d4:	01400304 	movi	r5,12
    99d8:	1009883a 	mov	r4,r2
    99dc:	000aa680 	call	aa68 <__mulsi3>
    99e0:	8085883a 	add	r2,r16,r2
    99e4:	10000015 	stw	zero,0(r2)
  }
}
    99e8:	0001883a 	nop
    99ec:	e6ffff04 	addi	sp,fp,-4
    99f0:	dfc00217 	ldw	ra,8(sp)
    99f4:	df000117 	ldw	fp,4(sp)
    99f8:	dc000017 	ldw	r16,0(sp)
    99fc:	dec00304 	addi	sp,sp,12
    9a00:	f800283a 	ret

00009a04 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    9a04:	defffa04 	addi	sp,sp,-24
    9a08:	df000515 	stw	fp,20(sp)
    9a0c:	df000504 	addi	fp,sp,20
    9a10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9a14:	0005303a 	rdctl	r2,status
    9a18:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9a1c:	e0fffc17 	ldw	r3,-16(fp)
    9a20:	00bfff84 	movi	r2,-2
    9a24:	1884703a 	and	r2,r3,r2
    9a28:	1001703a 	wrctl	status,r2
  
  return context;
    9a2c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    9a30:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    9a34:	e0bfff17 	ldw	r2,-4(fp)
    9a38:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    9a3c:	e0bffd17 	ldw	r2,-12(fp)
    9a40:	10800017 	ldw	r2,0(r2)
    9a44:	e0fffd17 	ldw	r3,-12(fp)
    9a48:	18c00117 	ldw	r3,4(r3)
    9a4c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    9a50:	e0bffd17 	ldw	r2,-12(fp)
    9a54:	10800117 	ldw	r2,4(r2)
    9a58:	e0fffd17 	ldw	r3,-12(fp)
    9a5c:	18c00017 	ldw	r3,0(r3)
    9a60:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    9a64:	e0bffd17 	ldw	r2,-12(fp)
    9a68:	e0fffd17 	ldw	r3,-12(fp)
    9a6c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    9a70:	e0bffd17 	ldw	r2,-12(fp)
    9a74:	e0fffd17 	ldw	r3,-12(fp)
    9a78:	10c00015 	stw	r3,0(r2)
    9a7c:	e0bffb17 	ldw	r2,-20(fp)
    9a80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9a84:	e0bffe17 	ldw	r2,-8(fp)
    9a88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    9a8c:	0001883a 	nop
    9a90:	e037883a 	mov	sp,fp
    9a94:	df000017 	ldw	fp,0(sp)
    9a98:	dec00104 	addi	sp,sp,4
    9a9c:	f800283a 	ret

00009aa0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    9aa0:	defffb04 	addi	sp,sp,-20
    9aa4:	dfc00415 	stw	ra,16(sp)
    9aa8:	df000315 	stw	fp,12(sp)
    9aac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    9ab0:	d0a02617 	ldw	r2,-32616(gp)
    9ab4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    9ab8:	d0a60b17 	ldw	r2,-26580(gp)
    9abc:	10800044 	addi	r2,r2,1
    9ac0:	d0a60b15 	stw	r2,-26580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9ac4:	00002e06 	br	9b80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    9ac8:	e0bffd17 	ldw	r2,-12(fp)
    9acc:	10800017 	ldw	r2,0(r2)
    9ad0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    9ad4:	e0bffd17 	ldw	r2,-12(fp)
    9ad8:	10800403 	ldbu	r2,16(r2)
    9adc:	10803fcc 	andi	r2,r2,255
    9ae0:	10000426 	beq	r2,zero,9af4 <alt_tick+0x54>
    9ae4:	d0a60b17 	ldw	r2,-26580(gp)
    9ae8:	1000021e 	bne	r2,zero,9af4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    9aec:	e0bffd17 	ldw	r2,-12(fp)
    9af0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    9af4:	e0bffd17 	ldw	r2,-12(fp)
    9af8:	10800217 	ldw	r2,8(r2)
    9afc:	d0e60b17 	ldw	r3,-26580(gp)
    9b00:	18801d36 	bltu	r3,r2,9b78 <alt_tick+0xd8>
    9b04:	e0bffd17 	ldw	r2,-12(fp)
    9b08:	10800403 	ldbu	r2,16(r2)
    9b0c:	10803fcc 	andi	r2,r2,255
    9b10:	1000191e 	bne	r2,zero,9b78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    9b14:	e0bffd17 	ldw	r2,-12(fp)
    9b18:	10800317 	ldw	r2,12(r2)
    9b1c:	e0fffd17 	ldw	r3,-12(fp)
    9b20:	18c00517 	ldw	r3,20(r3)
    9b24:	1809883a 	mov	r4,r3
    9b28:	103ee83a 	callr	r2
    9b2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    9b30:	e0bfff17 	ldw	r2,-4(fp)
    9b34:	1000031e 	bne	r2,zero,9b44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    9b38:	e13ffd17 	ldw	r4,-12(fp)
    9b3c:	0009a040 	call	9a04 <alt_alarm_stop>
    9b40:	00000d06 	br	9b78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    9b44:	e0bffd17 	ldw	r2,-12(fp)
    9b48:	10c00217 	ldw	r3,8(r2)
    9b4c:	e0bfff17 	ldw	r2,-4(fp)
    9b50:	1887883a 	add	r3,r3,r2
    9b54:	e0bffd17 	ldw	r2,-12(fp)
    9b58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    9b5c:	e0bffd17 	ldw	r2,-12(fp)
    9b60:	10c00217 	ldw	r3,8(r2)
    9b64:	d0a60b17 	ldw	r2,-26580(gp)
    9b68:	1880032e 	bgeu	r3,r2,9b78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    9b6c:	e0bffd17 	ldw	r2,-12(fp)
    9b70:	00c00044 	movi	r3,1
    9b74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    9b78:	e0bffe17 	ldw	r2,-8(fp)
    9b7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    9b80:	e0fffd17 	ldw	r3,-12(fp)
    9b84:	d0a02604 	addi	r2,gp,-32616
    9b88:	18bfcf1e 	bne	r3,r2,9ac8 <__alt_data_end+0xffff1428>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    9b8c:	00014540 	call	1454 <OSTimeTick>
}
    9b90:	0001883a 	nop
    9b94:	e037883a 	mov	sp,fp
    9b98:	dfc00117 	ldw	ra,4(sp)
    9b9c:	df000017 	ldw	fp,0(sp)
    9ba0:	dec00204 	addi	sp,sp,8
    9ba4:	f800283a 	ret

00009ba8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    9ba8:	deffff04 	addi	sp,sp,-4
    9bac:	df000015 	stw	fp,0(sp)
    9bb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    9bb4:	000170fa 	wrctl	ienable,zero
}
    9bb8:	0001883a 	nop
    9bbc:	e037883a 	mov	sp,fp
    9bc0:	df000017 	ldw	fp,0(sp)
    9bc4:	dec00104 	addi	sp,sp,4
    9bc8:	f800283a 	ret

00009bcc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
    9bcc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
    9bd0:	d0e02917 	ldw	r3,-32604(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
    9bd4:	d1260317 	ldw	r4,-26612(gp)

      stw ra,  0(sp)
    9bd8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
    9bdc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
    9be0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
    9be4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
    9be8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
    9bec:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
    9bf0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
    9bf4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
    9bf8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
    9bfc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
    9c00:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
    9c04:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    9c08:	0009e400 	call	9e40 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
    9c0c:	d125fe17 	ldw	r4,-26632(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
    9c10:	d165f607 	ldb	r5,-26664(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
    9c14:	d1260315 	stw	r4,-26612(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
    9c18:	d165f645 	stb	r5,-26663(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
    9c1c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
    9c20:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
    9c24:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
    9c28:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
    9c2c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
    9c30:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
    9c34:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
    9c38:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
    9c3c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
    9c40:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
    9c44:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
    9c48:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
    9c4c:	d0e02915 	stw	r3,-32604(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
    9c50:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
    9c54:	f800283a 	ret

00009c58 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
    9c58:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
    9c5c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
    9c60:	9464703a 	and	r18,r18,r17
      wrctl status, r18
    9c64:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
    9c68:	0009e400 	call	9e40 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
    9c6c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
    9c70:	d4a5f445 	stb	r18,-26671(gp)

      /*
       * start execution of the new task.
       */

      br 9b
    9c74:	003fe506 	br	9c0c <__alt_data_end+0xffff156c>

00009c78 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
    9c78:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
    9c7c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
    9c80:	10800054 	ori	r2,r2,1
      wrctl status, r2
    9c84:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
    9c88:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
    9c8c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
    9c90:	dec00204 	addi	sp,sp,8

      callr r2
    9c94:	103ee83a 	callr	r2

      nop
    9c98:	0001883a 	nop

00009c9c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
    9c9c:	defff704 	addi	sp,sp,-36
    9ca0:	dfc00815 	stw	ra,32(sp)
    9ca4:	df000715 	stw	fp,28(sp)
    9ca8:	df000704 	addi	fp,sp,28
    9cac:	e13ffc15 	stw	r4,-16(fp)
    9cb0:	e17ffd15 	stw	r5,-12(fp)
    9cb4:	e1bffe15 	stw	r6,-8(fp)
    9cb8:	3805883a 	mov	r2,r7
    9cbc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
    9cc0:	e0fffe17 	ldw	r3,-8(fp)
    9cc4:	00bfff04 	movi	r2,-4
    9cc8:	1884703a 	and	r2,r3,r2
    9ccc:	10bef704 	addi	r2,r2,-1060
    9cd0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
    9cd4:	01810904 	movi	r6,1060
    9cd8:	000b883a 	mov	r5,zero
    9cdc:	e13ff917 	ldw	r4,-28(fp)
    9ce0:	000a45c0 	call	a45c <memset>
    9ce4:	e0bff917 	ldw	r2,-28(fp)
    9ce8:	10c0bb04 	addi	r3,r2,748
    9cec:	e0bff917 	ldw	r2,-28(fp)
    9cf0:	10c00115 	stw	r3,4(r2)
    9cf4:	e0bff917 	ldw	r2,-28(fp)
    9cf8:	10c0d504 	addi	r3,r2,852
    9cfc:	e0bff917 	ldw	r2,-28(fp)
    9d00:	10c00215 	stw	r3,8(r2)
    9d04:	e0bff917 	ldw	r2,-28(fp)
    9d08:	10c0ef04 	addi	r3,r2,956
    9d0c:	e0bff917 	ldw	r2,-28(fp)
    9d10:	10c00315 	stw	r3,12(r2)
    9d14:	e0fff917 	ldw	r3,-28(fp)
    9d18:	00800074 	movhi	r2,1
    9d1c:	10ab0904 	addi	r2,r2,-21468
    9d20:	18800d15 	stw	r2,52(r3)
    9d24:	e0bff917 	ldw	r2,-28(fp)
    9d28:	00c00044 	movi	r3,1
    9d2c:	10c02915 	stw	r3,164(r2)
    9d30:	10002a15 	stw	zero,168(r2)
    9d34:	e0bff917 	ldw	r2,-28(fp)
    9d38:	00ccc384 	movi	r3,13070
    9d3c:	10c02b0d 	sth	r3,172(r2)
    9d40:	e0bff917 	ldw	r2,-28(fp)
    9d44:	00eaf344 	movi	r3,-21555
    9d48:	10c02b8d 	sth	r3,174(r2)
    9d4c:	e0bff917 	ldw	r2,-28(fp)
    9d50:	00c48d04 	movi	r3,4660
    9d54:	10c02c0d 	sth	r3,176(r2)
    9d58:	e0bff917 	ldw	r2,-28(fp)
    9d5c:	00f99b44 	movi	r3,-6547
    9d60:	10c02c8d 	sth	r3,178(r2)
    9d64:	e0bff917 	ldw	r2,-28(fp)
    9d68:	00f7bb04 	movi	r3,-8468
    9d6c:	10c02d0d 	sth	r3,180(r2)
    9d70:	e0bff917 	ldw	r2,-28(fp)
    9d74:	00c00144 	movi	r3,5
    9d78:	10c02d8d 	sth	r3,182(r2)
    9d7c:	e0bff917 	ldw	r2,-28(fp)
    9d80:	00c002c4 	movi	r3,11
    9d84:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
    9d88:	e0bff917 	ldw	r2,-28(fp)
    9d8c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
    9d90:	e0bffa17 	ldw	r2,-24(fp)
    9d94:	10bff304 	addi	r2,r2,-52
    9d98:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
    9d9c:	e0bffb17 	ldw	r2,-20(fp)
    9da0:	10800c04 	addi	r2,r2,48
    9da4:	e0fffc17 	ldw	r3,-16(fp)
    9da8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
    9dac:	e0bffb17 	ldw	r2,-20(fp)
    9db0:	10800b04 	addi	r2,r2,44
    9db4:	e0fffd17 	ldw	r3,-12(fp)
    9db8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
    9dbc:	e0bffb17 	ldw	r2,-20(fp)
    9dc0:	10800a04 	addi	r2,r2,40
    9dc4:	e0fff917 	ldw	r3,-28(fp)
    9dc8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
    9dcc:	00800074 	movhi	r2,1
    9dd0:	10a71e04 	addi	r2,r2,-25480
    9dd4:	10c00104 	addi	r3,r2,4
    9dd8:	e0bffb17 	ldw	r2,-20(fp)
    9ddc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
    9de0:	e0bffb17 	ldw	r2,-20(fp)
}
    9de4:	e037883a 	mov	sp,fp
    9de8:	dfc00117 	ldw	ra,4(sp)
    9dec:	df000017 	ldw	fp,0(sp)
    9df0:	dec00204 	addi	sp,sp,8
    9df4:	f800283a 	ret

00009df8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
    9df8:	defffe04 	addi	sp,sp,-8
    9dfc:	df000115 	stw	fp,4(sp)
    9e00:	df000104 	addi	fp,sp,4
    9e04:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
    9e08:	0001883a 	nop
    9e0c:	e037883a 	mov	sp,fp
    9e10:	df000017 	ldw	fp,0(sp)
    9e14:	dec00104 	addi	sp,sp,4
    9e18:	f800283a 	ret

00009e1c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
    9e1c:	defffe04 	addi	sp,sp,-8
    9e20:	df000115 	stw	fp,4(sp)
    9e24:	df000104 	addi	fp,sp,4
    9e28:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
    9e2c:	0001883a 	nop
    9e30:	e037883a 	mov	sp,fp
    9e34:	df000017 	ldw	fp,0(sp)
    9e38:	dec00104 	addi	sp,sp,4
    9e3c:	f800283a 	ret

00009e40 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
    9e40:	deffff04 	addi	sp,sp,-4
    9e44:	df000015 	stw	fp,0(sp)
    9e48:	d839883a 	mov	fp,sp
}
    9e4c:	0001883a 	nop
    9e50:	e037883a 	mov	sp,fp
    9e54:	df000017 	ldw	fp,0(sp)
    9e58:	dec00104 	addi	sp,sp,4
    9e5c:	f800283a 	ret

00009e60 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
    9e60:	deffff04 	addi	sp,sp,-4
    9e64:	df000015 	stw	fp,0(sp)
    9e68:	d839883a 	mov	fp,sp
}
    9e6c:	0001883a 	nop
    9e70:	e037883a 	mov	sp,fp
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00104 	addi	sp,sp,4
    9e7c:	f800283a 	ret

00009e80 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
    9e80:	deffff04 	addi	sp,sp,-4
    9e84:	df000015 	stw	fp,0(sp)
    9e88:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
    9e8c:	0001883a 	nop
    9e90:	e037883a 	mov	sp,fp
    9e94:	df000017 	ldw	fp,0(sp)
    9e98:	dec00104 	addi	sp,sp,4
    9e9c:	f800283a 	ret

00009ea0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
    9ea0:	deffff04 	addi	sp,sp,-4
    9ea4:	df000015 	stw	fp,0(sp)
    9ea8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
    9eac:	0001883a 	nop
    9eb0:	e037883a 	mov	sp,fp
    9eb4:	df000017 	ldw	fp,0(sp)
    9eb8:	dec00104 	addi	sp,sp,4
    9ebc:	f800283a 	ret

00009ec0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
    9ec0:	deffff04 	addi	sp,sp,-4
    9ec4:	df000015 	stw	fp,0(sp)
    9ec8:	d839883a 	mov	fp,sp
}
    9ecc:	0001883a 	nop
    9ed0:	e037883a 	mov	sp,fp
    9ed4:	df000017 	ldw	fp,0(sp)
    9ed8:	dec00104 	addi	sp,sp,4
    9edc:	f800283a 	ret

00009ee0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
    9ee0:	deffff04 	addi	sp,sp,-4
    9ee4:	df000015 	stw	fp,0(sp)
    9ee8:	d839883a 	mov	fp,sp
}
    9eec:	0001883a 	nop
    9ef0:	e037883a 	mov	sp,fp
    9ef4:	df000017 	ldw	fp,0(sp)
    9ef8:	dec00104 	addi	sp,sp,4
    9efc:	f800283a 	ret

00009f00 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
    9f00:	defffe04 	addi	sp,sp,-8
    9f04:	df000115 	stw	fp,4(sp)
    9f08:	df000104 	addi	fp,sp,4
    9f0c:	e13fff15 	stw	r4,-4(fp)
}
    9f10:	0001883a 	nop
    9f14:	e037883a 	mov	sp,fp
    9f18:	df000017 	ldw	fp,0(sp)
    9f1c:	dec00104 	addi	sp,sp,4
    9f20:	f800283a 	ret

00009f24 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    9f24:	defffa04 	addi	sp,sp,-24
    9f28:	dfc00515 	stw	ra,20(sp)
    9f2c:	df000415 	stw	fp,16(sp)
    9f30:	df000404 	addi	fp,sp,16
    9f34:	e13ffe15 	stw	r4,-8(fp)
    9f38:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    9f3c:	e0bfff17 	ldw	r2,-4(fp)
    9f40:	10800017 	ldw	r2,0(r2)
    9f44:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    9f48:	e13ffe17 	ldw	r4,-8(fp)
    9f4c:	000a5840 	call	a584 <strlen>
    9f50:	10800044 	addi	r2,r2,1
    9f54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f58:	00000d06 	br	9f90 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    9f5c:	e0bffc17 	ldw	r2,-16(fp)
    9f60:	10800217 	ldw	r2,8(r2)
    9f64:	e0fffd17 	ldw	r3,-12(fp)
    9f68:	180d883a 	mov	r6,r3
    9f6c:	e17ffe17 	ldw	r5,-8(fp)
    9f70:	1009883a 	mov	r4,r2
    9f74:	000a2980 	call	a298 <memcmp>
    9f78:	1000021e 	bne	r2,zero,9f84 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    9f7c:	e0bffc17 	ldw	r2,-16(fp)
    9f80:	00000706 	br	9fa0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    9f84:	e0bffc17 	ldw	r2,-16(fp)
    9f88:	10800017 	ldw	r2,0(r2)
    9f8c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    9f90:	e0fffc17 	ldw	r3,-16(fp)
    9f94:	e0bfff17 	ldw	r2,-4(fp)
    9f98:	18bff01e 	bne	r3,r2,9f5c <__alt_data_end+0xffff18bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    9f9c:	0005883a 	mov	r2,zero
}
    9fa0:	e037883a 	mov	sp,fp
    9fa4:	dfc00117 	ldw	ra,4(sp)
    9fa8:	df000017 	ldw	fp,0(sp)
    9fac:	dec00204 	addi	sp,sp,8
    9fb0:	f800283a 	ret

00009fb4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    9fb4:	defffb04 	addi	sp,sp,-20
    9fb8:	dfc00415 	stw	ra,16(sp)
    9fbc:	df000315 	stw	fp,12(sp)
    9fc0:	df000304 	addi	fp,sp,12
    9fc4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    9fc8:	d0a01f17 	ldw	r2,-32644(gp)
    9fcc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    9fd0:	00003106 	br	a098 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    9fd4:	e0bffd17 	ldw	r2,-12(fp)
    9fd8:	10800217 	ldw	r2,8(r2)
    9fdc:	1009883a 	mov	r4,r2
    9fe0:	000a5840 	call	a584 <strlen>
    9fe4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    9fe8:	e0bffd17 	ldw	r2,-12(fp)
    9fec:	10c00217 	ldw	r3,8(r2)
    9ff0:	e0bffe17 	ldw	r2,-8(fp)
    9ff4:	10bfffc4 	addi	r2,r2,-1
    9ff8:	1885883a 	add	r2,r3,r2
    9ffc:	10800003 	ldbu	r2,0(r2)
    a000:	10803fcc 	andi	r2,r2,255
    a004:	1080201c 	xori	r2,r2,128
    a008:	10bfe004 	addi	r2,r2,-128
    a00c:	10800bd8 	cmpnei	r2,r2,47
    a010:	1000031e 	bne	r2,zero,a020 <alt_find_file+0x6c>
    {
      len -= 1;
    a014:	e0bffe17 	ldw	r2,-8(fp)
    a018:	10bfffc4 	addi	r2,r2,-1
    a01c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a020:	e0bffe17 	ldw	r2,-8(fp)
    a024:	e0ffff17 	ldw	r3,-4(fp)
    a028:	1885883a 	add	r2,r3,r2
    a02c:	10800003 	ldbu	r2,0(r2)
    a030:	10803fcc 	andi	r2,r2,255
    a034:	1080201c 	xori	r2,r2,128
    a038:	10bfe004 	addi	r2,r2,-128
    a03c:	10800be0 	cmpeqi	r2,r2,47
    a040:	1000081e 	bne	r2,zero,a064 <alt_find_file+0xb0>
    a044:	e0bffe17 	ldw	r2,-8(fp)
    a048:	e0ffff17 	ldw	r3,-4(fp)
    a04c:	1885883a 	add	r2,r3,r2
    a050:	10800003 	ldbu	r2,0(r2)
    a054:	10803fcc 	andi	r2,r2,255
    a058:	1080201c 	xori	r2,r2,128
    a05c:	10bfe004 	addi	r2,r2,-128
    a060:	10000a1e 	bne	r2,zero,a08c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a064:	e0bffd17 	ldw	r2,-12(fp)
    a068:	10800217 	ldw	r2,8(r2)
    a06c:	e0fffe17 	ldw	r3,-8(fp)
    a070:	180d883a 	mov	r6,r3
    a074:	e17fff17 	ldw	r5,-4(fp)
    a078:	1009883a 	mov	r4,r2
    a07c:	000a2980 	call	a298 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a080:	1000021e 	bne	r2,zero,a08c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a084:	e0bffd17 	ldw	r2,-12(fp)
    a088:	00000706 	br	a0a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a08c:	e0bffd17 	ldw	r2,-12(fp)
    a090:	10800017 	ldw	r2,0(r2)
    a094:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a098:	e0fffd17 	ldw	r3,-12(fp)
    a09c:	d0a01f04 	addi	r2,gp,-32644
    a0a0:	18bfcc1e 	bne	r3,r2,9fd4 <__alt_data_end+0xffff1934>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a0a4:	0005883a 	mov	r2,zero
}
    a0a8:	e037883a 	mov	sp,fp
    a0ac:	dfc00117 	ldw	ra,4(sp)
    a0b0:	df000017 	ldw	fp,0(sp)
    a0b4:	dec00204 	addi	sp,sp,8
    a0b8:	f800283a 	ret

0000a0bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a0bc:	defff804 	addi	sp,sp,-32
    a0c0:	dfc00715 	stw	ra,28(sp)
    a0c4:	df000615 	stw	fp,24(sp)
    a0c8:	dc000515 	stw	r16,20(sp)
    a0cc:	df000604 	addi	fp,sp,24
    a0d0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    a0d4:	00bffa04 	movi	r2,-24
    a0d8:	e0bffb15 	stw	r2,-20(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
    a0dc:	d0a60817 	ldw	r2,-26592(gp)
    a0e0:	e0bffc15 	stw	r2,-16(fp)
    a0e4:	e03ffd0d 	sth	zero,-12(fp)
    a0e8:	e0bffd0b 	ldhu	r2,-12(fp)
    a0ec:	e0fffd84 	addi	r3,fp,-10
    a0f0:	180d883a 	mov	r6,r3
    a0f4:	100b883a 	mov	r5,r2
    a0f8:	e13ffc17 	ldw	r4,-16(fp)
    a0fc:	0005ca40 	call	5ca4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a100:	e03ffa15 	stw	zero,-24(fp)
    a104:	00001d06 	br	a17c <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
    a108:	04000074 	movhi	r16,1
    a10c:	842f3b04 	addi	r16,r16,-17172
    a110:	e0bffa17 	ldw	r2,-24(fp)
    a114:	01400304 	movi	r5,12
    a118:	1009883a 	mov	r4,r2
    a11c:	000aa680 	call	aa68 <__mulsi3>
    a120:	8085883a 	add	r2,r16,r2
    a124:	10800017 	ldw	r2,0(r2)
    a128:	1000111e 	bne	r2,zero,a170 <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
    a12c:	04000074 	movhi	r16,1
    a130:	842f3b04 	addi	r16,r16,-17172
    a134:	e0bffa17 	ldw	r2,-24(fp)
    a138:	01400304 	movi	r5,12
    a13c:	1009883a 	mov	r4,r2
    a140:	000aa680 	call	aa68 <__mulsi3>
    a144:	8085883a 	add	r2,r16,r2
    a148:	e0fffe17 	ldw	r3,-8(fp)
    a14c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a150:	d0e02317 	ldw	r3,-32628(gp)
    a154:	e0bffa17 	ldw	r2,-24(fp)
    a158:	1880020e 	bge	r3,r2,a164 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
    a15c:	e0bffa17 	ldw	r2,-24(fp)
    a160:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
    a164:	e0bffa17 	ldw	r2,-24(fp)
    a168:	e0bffb15 	stw	r2,-20(fp)
      goto alt_get_fd_exit;
    a16c:	00000606 	br	a188 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a170:	e0bffa17 	ldw	r2,-24(fp)
    a174:	10800044 	addi	r2,r2,1
    a178:	e0bffa15 	stw	r2,-24(fp)
    a17c:	e0bffa17 	ldw	r2,-24(fp)
    a180:	10800810 	cmplti	r2,r2,32
    a184:	103fe01e 	bne	r2,zero,a108 <__alt_data_end+0xffff1a68>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
    a188:	d0a60817 	ldw	r2,-26592(gp)
    a18c:	1009883a 	mov	r4,r2
    a190:	000601c0 	call	601c <OSSemPost>

  return rc;
    a194:	e0bffb17 	ldw	r2,-20(fp)
}
    a198:	e6ffff04 	addi	sp,fp,-4
    a19c:	dfc00217 	ldw	ra,8(sp)
    a1a0:	df000117 	ldw	fp,4(sp)
    a1a4:	dc000017 	ldw	r16,0(sp)
    a1a8:	dec00304 	addi	sp,sp,12
    a1ac:	f800283a 	ret

0000a1b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a1b0:	defffe04 	addi	sp,sp,-8
    a1b4:	df000115 	stw	fp,4(sp)
    a1b8:	df000104 	addi	fp,sp,4
    a1bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a1c0:	e0bfff17 	ldw	r2,-4(fp)
    a1c4:	10bffe84 	addi	r2,r2,-6
    a1c8:	10c00428 	cmpgeui	r3,r2,16
    a1cc:	18001a1e 	bne	r3,zero,a238 <alt_exception_cause_generated_bad_addr+0x88>
    a1d0:	100690ba 	slli	r3,r2,2
    a1d4:	00800074 	movhi	r2,1
    a1d8:	10a87a04 	addi	r2,r2,-24088
    a1dc:	1885883a 	add	r2,r3,r2
    a1e0:	10800017 	ldw	r2,0(r2)
    a1e4:	1000683a 	jmp	r2
    a1e8:	0000a228 	cmpgeui	zero,zero,648
    a1ec:	0000a228 	cmpgeui	zero,zero,648
    a1f0:	0000a238 	rdprs	zero,zero,648
    a1f4:	0000a238 	rdprs	zero,zero,648
    a1f8:	0000a238 	rdprs	zero,zero,648
    a1fc:	0000a228 	cmpgeui	zero,zero,648
    a200:	0000a230 	cmpltui	zero,zero,648
    a204:	0000a238 	rdprs	zero,zero,648
    a208:	0000a228 	cmpgeui	zero,zero,648
    a20c:	0000a228 	cmpgeui	zero,zero,648
    a210:	0000a238 	rdprs	zero,zero,648
    a214:	0000a228 	cmpgeui	zero,zero,648
    a218:	0000a230 	cmpltui	zero,zero,648
    a21c:	0000a238 	rdprs	zero,zero,648
    a220:	0000a238 	rdprs	zero,zero,648
    a224:	0000a228 	cmpgeui	zero,zero,648
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a228:	00800044 	movi	r2,1
    a22c:	00000306 	br	a23c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a230:	0005883a 	mov	r2,zero
    a234:	00000106 	br	a23c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a238:	0005883a 	mov	r2,zero
  }
}
    a23c:	e037883a 	mov	sp,fp
    a240:	df000017 	ldw	fp,0(sp)
    a244:	dec00104 	addi	sp,sp,4
    a248:	f800283a 	ret

0000a24c <atexit>:
    a24c:	200b883a 	mov	r5,r4
    a250:	000f883a 	mov	r7,zero
    a254:	000d883a 	mov	r6,zero
    a258:	0009883a 	mov	r4,zero
    a25c:	000a61c1 	jmpi	a61c <__register_exitproc>

0000a260 <exit>:
    a260:	defffe04 	addi	sp,sp,-8
    a264:	000b883a 	mov	r5,zero
    a268:	dc000015 	stw	r16,0(sp)
    a26c:	dfc00115 	stw	ra,4(sp)
    a270:	2021883a 	mov	r16,r4
    a274:	000a7340 	call	a734 <__call_exitprocs>
    a278:	00800074 	movhi	r2,1
    a27c:	10b0cc04 	addi	r2,r2,-15568
    a280:	11000017 	ldw	r4,0(r2)
    a284:	20800f17 	ldw	r2,60(r4)
    a288:	10000126 	beq	r2,zero,a290 <exit+0x30>
    a28c:	103ee83a 	callr	r2
    a290:	8009883a 	mov	r4,r16
    a294:	000aa900 	call	aa90 <_exit>

0000a298 <memcmp>:
    a298:	01c000c4 	movi	r7,3
    a29c:	3980192e 	bgeu	r7,r6,a304 <memcmp+0x6c>
    a2a0:	2144b03a 	or	r2,r4,r5
    a2a4:	11c4703a 	and	r2,r2,r7
    a2a8:	10000f26 	beq	r2,zero,a2e8 <memcmp+0x50>
    a2ac:	20800003 	ldbu	r2,0(r4)
    a2b0:	28c00003 	ldbu	r3,0(r5)
    a2b4:	10c0151e 	bne	r2,r3,a30c <memcmp+0x74>
    a2b8:	31bfff84 	addi	r6,r6,-2
    a2bc:	01ffffc4 	movi	r7,-1
    a2c0:	00000406 	br	a2d4 <memcmp+0x3c>
    a2c4:	20800003 	ldbu	r2,0(r4)
    a2c8:	28c00003 	ldbu	r3,0(r5)
    a2cc:	31bfffc4 	addi	r6,r6,-1
    a2d0:	10c00e1e 	bne	r2,r3,a30c <memcmp+0x74>
    a2d4:	21000044 	addi	r4,r4,1
    a2d8:	29400044 	addi	r5,r5,1
    a2dc:	31fff91e 	bne	r6,r7,a2c4 <__alt_data_end+0xffff1c24>
    a2e0:	0005883a 	mov	r2,zero
    a2e4:	f800283a 	ret
    a2e8:	20c00017 	ldw	r3,0(r4)
    a2ec:	28800017 	ldw	r2,0(r5)
    a2f0:	18bfee1e 	bne	r3,r2,a2ac <__alt_data_end+0xffff1c0c>
    a2f4:	31bfff04 	addi	r6,r6,-4
    a2f8:	21000104 	addi	r4,r4,4
    a2fc:	29400104 	addi	r5,r5,4
    a300:	39bff936 	bltu	r7,r6,a2e8 <__alt_data_end+0xffff1c48>
    a304:	303fe91e 	bne	r6,zero,a2ac <__alt_data_end+0xffff1c0c>
    a308:	003ff506 	br	a2e0 <__alt_data_end+0xffff1c40>
    a30c:	10c5c83a 	sub	r2,r2,r3
    a310:	f800283a 	ret

0000a314 <memcpy>:
    a314:	defffd04 	addi	sp,sp,-12
    a318:	dfc00215 	stw	ra,8(sp)
    a31c:	dc400115 	stw	r17,4(sp)
    a320:	dc000015 	stw	r16,0(sp)
    a324:	00c003c4 	movi	r3,15
    a328:	2005883a 	mov	r2,r4
    a32c:	1980452e 	bgeu	r3,r6,a444 <memcpy+0x130>
    a330:	2906b03a 	or	r3,r5,r4
    a334:	18c000cc 	andi	r3,r3,3
    a338:	1800441e 	bne	r3,zero,a44c <memcpy+0x138>
    a33c:	347ffc04 	addi	r17,r6,-16
    a340:	8822d13a 	srli	r17,r17,4
    a344:	28c00104 	addi	r3,r5,4
    a348:	23400104 	addi	r13,r4,4
    a34c:	8820913a 	slli	r16,r17,4
    a350:	2b000204 	addi	r12,r5,8
    a354:	22c00204 	addi	r11,r4,8
    a358:	84000504 	addi	r16,r16,20
    a35c:	2a800304 	addi	r10,r5,12
    a360:	22400304 	addi	r9,r4,12
    a364:	2c21883a 	add	r16,r5,r16
    a368:	2811883a 	mov	r8,r5
    a36c:	200f883a 	mov	r7,r4
    a370:	41000017 	ldw	r4,0(r8)
    a374:	1fc00017 	ldw	ra,0(r3)
    a378:	63c00017 	ldw	r15,0(r12)
    a37c:	39000015 	stw	r4,0(r7)
    a380:	53800017 	ldw	r14,0(r10)
    a384:	6fc00015 	stw	ra,0(r13)
    a388:	5bc00015 	stw	r15,0(r11)
    a38c:	4b800015 	stw	r14,0(r9)
    a390:	18c00404 	addi	r3,r3,16
    a394:	39c00404 	addi	r7,r7,16
    a398:	42000404 	addi	r8,r8,16
    a39c:	6b400404 	addi	r13,r13,16
    a3a0:	63000404 	addi	r12,r12,16
    a3a4:	5ac00404 	addi	r11,r11,16
    a3a8:	52800404 	addi	r10,r10,16
    a3ac:	4a400404 	addi	r9,r9,16
    a3b0:	1c3fef1e 	bne	r3,r16,a370 <__alt_data_end+0xffff1cd0>
    a3b4:	89c00044 	addi	r7,r17,1
    a3b8:	380e913a 	slli	r7,r7,4
    a3bc:	310003cc 	andi	r4,r6,15
    a3c0:	02c000c4 	movi	r11,3
    a3c4:	11c7883a 	add	r3,r2,r7
    a3c8:	29cb883a 	add	r5,r5,r7
    a3cc:	5900212e 	bgeu	r11,r4,a454 <memcpy+0x140>
    a3d0:	1813883a 	mov	r9,r3
    a3d4:	2811883a 	mov	r8,r5
    a3d8:	200f883a 	mov	r7,r4
    a3dc:	42800017 	ldw	r10,0(r8)
    a3e0:	4a400104 	addi	r9,r9,4
    a3e4:	39ffff04 	addi	r7,r7,-4
    a3e8:	4abfff15 	stw	r10,-4(r9)
    a3ec:	42000104 	addi	r8,r8,4
    a3f0:	59fffa36 	bltu	r11,r7,a3dc <__alt_data_end+0xffff1d3c>
    a3f4:	213fff04 	addi	r4,r4,-4
    a3f8:	2008d0ba 	srli	r4,r4,2
    a3fc:	318000cc 	andi	r6,r6,3
    a400:	21000044 	addi	r4,r4,1
    a404:	2109883a 	add	r4,r4,r4
    a408:	2109883a 	add	r4,r4,r4
    a40c:	1907883a 	add	r3,r3,r4
    a410:	290b883a 	add	r5,r5,r4
    a414:	30000626 	beq	r6,zero,a430 <memcpy+0x11c>
    a418:	198d883a 	add	r6,r3,r6
    a41c:	29c00003 	ldbu	r7,0(r5)
    a420:	18c00044 	addi	r3,r3,1
    a424:	29400044 	addi	r5,r5,1
    a428:	19ffffc5 	stb	r7,-1(r3)
    a42c:	19bffb1e 	bne	r3,r6,a41c <__alt_data_end+0xffff1d7c>
    a430:	dfc00217 	ldw	ra,8(sp)
    a434:	dc400117 	ldw	r17,4(sp)
    a438:	dc000017 	ldw	r16,0(sp)
    a43c:	dec00304 	addi	sp,sp,12
    a440:	f800283a 	ret
    a444:	2007883a 	mov	r3,r4
    a448:	003ff206 	br	a414 <__alt_data_end+0xffff1d74>
    a44c:	2007883a 	mov	r3,r4
    a450:	003ff106 	br	a418 <__alt_data_end+0xffff1d78>
    a454:	200d883a 	mov	r6,r4
    a458:	003fee06 	br	a414 <__alt_data_end+0xffff1d74>

0000a45c <memset>:
    a45c:	20c000cc 	andi	r3,r4,3
    a460:	2005883a 	mov	r2,r4
    a464:	18004426 	beq	r3,zero,a578 <memset+0x11c>
    a468:	31ffffc4 	addi	r7,r6,-1
    a46c:	30004026 	beq	r6,zero,a570 <memset+0x114>
    a470:	2813883a 	mov	r9,r5
    a474:	200d883a 	mov	r6,r4
    a478:	2007883a 	mov	r3,r4
    a47c:	00000406 	br	a490 <memset+0x34>
    a480:	3a3fffc4 	addi	r8,r7,-1
    a484:	31800044 	addi	r6,r6,1
    a488:	38003926 	beq	r7,zero,a570 <memset+0x114>
    a48c:	400f883a 	mov	r7,r8
    a490:	18c00044 	addi	r3,r3,1
    a494:	32400005 	stb	r9,0(r6)
    a498:	1a0000cc 	andi	r8,r3,3
    a49c:	403ff81e 	bne	r8,zero,a480 <__alt_data_end+0xffff1de0>
    a4a0:	010000c4 	movi	r4,3
    a4a4:	21c02d2e 	bgeu	r4,r7,a55c <memset+0x100>
    a4a8:	29003fcc 	andi	r4,r5,255
    a4ac:	200c923a 	slli	r6,r4,8
    a4b0:	3108b03a 	or	r4,r6,r4
    a4b4:	200c943a 	slli	r6,r4,16
    a4b8:	218cb03a 	or	r6,r4,r6
    a4bc:	010003c4 	movi	r4,15
    a4c0:	21c0182e 	bgeu	r4,r7,a524 <memset+0xc8>
    a4c4:	3b3ffc04 	addi	r12,r7,-16
    a4c8:	6018d13a 	srli	r12,r12,4
    a4cc:	1a000104 	addi	r8,r3,4
    a4d0:	1ac00204 	addi	r11,r3,8
    a4d4:	6008913a 	slli	r4,r12,4
    a4d8:	1a800304 	addi	r10,r3,12
    a4dc:	1813883a 	mov	r9,r3
    a4e0:	21000504 	addi	r4,r4,20
    a4e4:	1909883a 	add	r4,r3,r4
    a4e8:	49800015 	stw	r6,0(r9)
    a4ec:	41800015 	stw	r6,0(r8)
    a4f0:	59800015 	stw	r6,0(r11)
    a4f4:	51800015 	stw	r6,0(r10)
    a4f8:	42000404 	addi	r8,r8,16
    a4fc:	4a400404 	addi	r9,r9,16
    a500:	5ac00404 	addi	r11,r11,16
    a504:	52800404 	addi	r10,r10,16
    a508:	413ff71e 	bne	r8,r4,a4e8 <__alt_data_end+0xffff1e48>
    a50c:	63000044 	addi	r12,r12,1
    a510:	6018913a 	slli	r12,r12,4
    a514:	39c003cc 	andi	r7,r7,15
    a518:	010000c4 	movi	r4,3
    a51c:	1b07883a 	add	r3,r3,r12
    a520:	21c00e2e 	bgeu	r4,r7,a55c <memset+0x100>
    a524:	1813883a 	mov	r9,r3
    a528:	3811883a 	mov	r8,r7
    a52c:	010000c4 	movi	r4,3
    a530:	49800015 	stw	r6,0(r9)
    a534:	423fff04 	addi	r8,r8,-4
    a538:	4a400104 	addi	r9,r9,4
    a53c:	223ffc36 	bltu	r4,r8,a530 <__alt_data_end+0xffff1e90>
    a540:	393fff04 	addi	r4,r7,-4
    a544:	2008d0ba 	srli	r4,r4,2
    a548:	39c000cc 	andi	r7,r7,3
    a54c:	21000044 	addi	r4,r4,1
    a550:	2109883a 	add	r4,r4,r4
    a554:	2109883a 	add	r4,r4,r4
    a558:	1907883a 	add	r3,r3,r4
    a55c:	38000526 	beq	r7,zero,a574 <memset+0x118>
    a560:	19cf883a 	add	r7,r3,r7
    a564:	19400005 	stb	r5,0(r3)
    a568:	18c00044 	addi	r3,r3,1
    a56c:	38fffd1e 	bne	r7,r3,a564 <__alt_data_end+0xffff1ec4>
    a570:	f800283a 	ret
    a574:	f800283a 	ret
    a578:	2007883a 	mov	r3,r4
    a57c:	300f883a 	mov	r7,r6
    a580:	003fc706 	br	a4a0 <__alt_data_end+0xffff1e00>

0000a584 <strlen>:
    a584:	208000cc 	andi	r2,r4,3
    a588:	10002026 	beq	r2,zero,a60c <strlen+0x88>
    a58c:	20800007 	ldb	r2,0(r4)
    a590:	10002026 	beq	r2,zero,a614 <strlen+0x90>
    a594:	2005883a 	mov	r2,r4
    a598:	00000206 	br	a5a4 <strlen+0x20>
    a59c:	10c00007 	ldb	r3,0(r2)
    a5a0:	18001826 	beq	r3,zero,a604 <strlen+0x80>
    a5a4:	10800044 	addi	r2,r2,1
    a5a8:	10c000cc 	andi	r3,r2,3
    a5ac:	183ffb1e 	bne	r3,zero,a59c <__alt_data_end+0xffff1efc>
    a5b0:	10c00017 	ldw	r3,0(r2)
    a5b4:	01ffbff4 	movhi	r7,65279
    a5b8:	39ffbfc4 	addi	r7,r7,-257
    a5bc:	00ca303a 	nor	r5,zero,r3
    a5c0:	01a02074 	movhi	r6,32897
    a5c4:	19c7883a 	add	r3,r3,r7
    a5c8:	31a02004 	addi	r6,r6,-32640
    a5cc:	1946703a 	and	r3,r3,r5
    a5d0:	1986703a 	and	r3,r3,r6
    a5d4:	1800091e 	bne	r3,zero,a5fc <strlen+0x78>
    a5d8:	10800104 	addi	r2,r2,4
    a5dc:	10c00017 	ldw	r3,0(r2)
    a5e0:	19cb883a 	add	r5,r3,r7
    a5e4:	00c6303a 	nor	r3,zero,r3
    a5e8:	28c6703a 	and	r3,r5,r3
    a5ec:	1986703a 	and	r3,r3,r6
    a5f0:	183ff926 	beq	r3,zero,a5d8 <__alt_data_end+0xffff1f38>
    a5f4:	00000106 	br	a5fc <strlen+0x78>
    a5f8:	10800044 	addi	r2,r2,1
    a5fc:	10c00007 	ldb	r3,0(r2)
    a600:	183ffd1e 	bne	r3,zero,a5f8 <__alt_data_end+0xffff1f58>
    a604:	1105c83a 	sub	r2,r2,r4
    a608:	f800283a 	ret
    a60c:	2005883a 	mov	r2,r4
    a610:	003fe706 	br	a5b0 <__alt_data_end+0xffff1f10>
    a614:	0005883a 	mov	r2,zero
    a618:	f800283a 	ret

0000a61c <__register_exitproc>:
    a61c:	defffa04 	addi	sp,sp,-24
    a620:	dc000315 	stw	r16,12(sp)
    a624:	04000074 	movhi	r16,1
    a628:	8430cc04 	addi	r16,r16,-15568
    a62c:	80c00017 	ldw	r3,0(r16)
    a630:	dc400415 	stw	r17,16(sp)
    a634:	dfc00515 	stw	ra,20(sp)
    a638:	18805217 	ldw	r2,328(r3)
    a63c:	2023883a 	mov	r17,r4
    a640:	10003726 	beq	r2,zero,a720 <__register_exitproc+0x104>
    a644:	10c00117 	ldw	r3,4(r2)
    a648:	010007c4 	movi	r4,31
    a64c:	20c00e16 	blt	r4,r3,a688 <__register_exitproc+0x6c>
    a650:	1a000044 	addi	r8,r3,1
    a654:	8800221e 	bne	r17,zero,a6e0 <__register_exitproc+0xc4>
    a658:	18c00084 	addi	r3,r3,2
    a65c:	18c7883a 	add	r3,r3,r3
    a660:	18c7883a 	add	r3,r3,r3
    a664:	12000115 	stw	r8,4(r2)
    a668:	10c7883a 	add	r3,r2,r3
    a66c:	19400015 	stw	r5,0(r3)
    a670:	0005883a 	mov	r2,zero
    a674:	dfc00517 	ldw	ra,20(sp)
    a678:	dc400417 	ldw	r17,16(sp)
    a67c:	dc000317 	ldw	r16,12(sp)
    a680:	dec00604 	addi	sp,sp,24
    a684:	f800283a 	ret
    a688:	00800034 	movhi	r2,0
    a68c:	10800004 	addi	r2,r2,0
    a690:	10002626 	beq	r2,zero,a72c <__register_exitproc+0x110>
    a694:	01006404 	movi	r4,400
    a698:	d9400015 	stw	r5,0(sp)
    a69c:	d9800115 	stw	r6,4(sp)
    a6a0:	d9c00215 	stw	r7,8(sp)
    a6a4:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    a6a8:	d9400017 	ldw	r5,0(sp)
    a6ac:	d9800117 	ldw	r6,4(sp)
    a6b0:	d9c00217 	ldw	r7,8(sp)
    a6b4:	10001d26 	beq	r2,zero,a72c <__register_exitproc+0x110>
    a6b8:	81000017 	ldw	r4,0(r16)
    a6bc:	10000115 	stw	zero,4(r2)
    a6c0:	02000044 	movi	r8,1
    a6c4:	22405217 	ldw	r9,328(r4)
    a6c8:	0007883a 	mov	r3,zero
    a6cc:	12400015 	stw	r9,0(r2)
    a6d0:	20805215 	stw	r2,328(r4)
    a6d4:	10006215 	stw	zero,392(r2)
    a6d8:	10006315 	stw	zero,396(r2)
    a6dc:	883fde26 	beq	r17,zero,a658 <__alt_data_end+0xffff1fb8>
    a6e0:	18c9883a 	add	r4,r3,r3
    a6e4:	2109883a 	add	r4,r4,r4
    a6e8:	1109883a 	add	r4,r2,r4
    a6ec:	21802215 	stw	r6,136(r4)
    a6f0:	01800044 	movi	r6,1
    a6f4:	12406217 	ldw	r9,392(r2)
    a6f8:	30cc983a 	sll	r6,r6,r3
    a6fc:	4992b03a 	or	r9,r9,r6
    a700:	12406215 	stw	r9,392(r2)
    a704:	21c04215 	stw	r7,264(r4)
    a708:	01000084 	movi	r4,2
    a70c:	893fd21e 	bne	r17,r4,a658 <__alt_data_end+0xffff1fb8>
    a710:	11006317 	ldw	r4,396(r2)
    a714:	218cb03a 	or	r6,r4,r6
    a718:	11806315 	stw	r6,396(r2)
    a71c:	003fce06 	br	a658 <__alt_data_end+0xffff1fb8>
    a720:	18805304 	addi	r2,r3,332
    a724:	18805215 	stw	r2,328(r3)
    a728:	003fc606 	br	a644 <__alt_data_end+0xffff1fa4>
    a72c:	00bfffc4 	movi	r2,-1
    a730:	003fd006 	br	a674 <__alt_data_end+0xffff1fd4>

0000a734 <__call_exitprocs>:
    a734:	defff504 	addi	sp,sp,-44
    a738:	df000915 	stw	fp,36(sp)
    a73c:	dd400615 	stw	r21,24(sp)
    a740:	dc800315 	stw	r18,12(sp)
    a744:	dfc00a15 	stw	ra,40(sp)
    a748:	ddc00815 	stw	r23,32(sp)
    a74c:	dd800715 	stw	r22,28(sp)
    a750:	dd000515 	stw	r20,20(sp)
    a754:	dcc00415 	stw	r19,16(sp)
    a758:	dc400215 	stw	r17,8(sp)
    a75c:	dc000115 	stw	r16,4(sp)
    a760:	d9000015 	stw	r4,0(sp)
    a764:	2839883a 	mov	fp,r5
    a768:	04800044 	movi	r18,1
    a76c:	057fffc4 	movi	r21,-1
    a770:	00800074 	movhi	r2,1
    a774:	10b0cc04 	addi	r2,r2,-15568
    a778:	12000017 	ldw	r8,0(r2)
    a77c:	45005217 	ldw	r20,328(r8)
    a780:	44c05204 	addi	r19,r8,328
    a784:	a0001c26 	beq	r20,zero,a7f8 <__call_exitprocs+0xc4>
    a788:	a0800117 	ldw	r2,4(r20)
    a78c:	15ffffc4 	addi	r23,r2,-1
    a790:	b8000d16 	blt	r23,zero,a7c8 <__call_exitprocs+0x94>
    a794:	14000044 	addi	r16,r2,1
    a798:	8421883a 	add	r16,r16,r16
    a79c:	8421883a 	add	r16,r16,r16
    a7a0:	84402004 	addi	r17,r16,128
    a7a4:	a463883a 	add	r17,r20,r17
    a7a8:	a421883a 	add	r16,r20,r16
    a7ac:	e0001e26 	beq	fp,zero,a828 <__call_exitprocs+0xf4>
    a7b0:	80804017 	ldw	r2,256(r16)
    a7b4:	e0801c26 	beq	fp,r2,a828 <__call_exitprocs+0xf4>
    a7b8:	bdffffc4 	addi	r23,r23,-1
    a7bc:	843fff04 	addi	r16,r16,-4
    a7c0:	8c7fff04 	addi	r17,r17,-4
    a7c4:	bd7ff91e 	bne	r23,r21,a7ac <__alt_data_end+0xffff210c>
    a7c8:	00800034 	movhi	r2,0
    a7cc:	10800004 	addi	r2,r2,0
    a7d0:	10000926 	beq	r2,zero,a7f8 <__call_exitprocs+0xc4>
    a7d4:	a0800117 	ldw	r2,4(r20)
    a7d8:	1000301e 	bne	r2,zero,a89c <__call_exitprocs+0x168>
    a7dc:	a0800017 	ldw	r2,0(r20)
    a7e0:	10003226 	beq	r2,zero,a8ac <__call_exitprocs+0x178>
    a7e4:	a009883a 	mov	r4,r20
    a7e8:	98800015 	stw	r2,0(r19)
    a7ec:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    a7f0:	9d000017 	ldw	r20,0(r19)
    a7f4:	a03fe41e 	bne	r20,zero,a788 <__alt_data_end+0xffff20e8>
    a7f8:	dfc00a17 	ldw	ra,40(sp)
    a7fc:	df000917 	ldw	fp,36(sp)
    a800:	ddc00817 	ldw	r23,32(sp)
    a804:	dd800717 	ldw	r22,28(sp)
    a808:	dd400617 	ldw	r21,24(sp)
    a80c:	dd000517 	ldw	r20,20(sp)
    a810:	dcc00417 	ldw	r19,16(sp)
    a814:	dc800317 	ldw	r18,12(sp)
    a818:	dc400217 	ldw	r17,8(sp)
    a81c:	dc000117 	ldw	r16,4(sp)
    a820:	dec00b04 	addi	sp,sp,44
    a824:	f800283a 	ret
    a828:	a0800117 	ldw	r2,4(r20)
    a82c:	80c00017 	ldw	r3,0(r16)
    a830:	10bfffc4 	addi	r2,r2,-1
    a834:	15c01426 	beq	r2,r23,a888 <__call_exitprocs+0x154>
    a838:	80000015 	stw	zero,0(r16)
    a83c:	183fde26 	beq	r3,zero,a7b8 <__alt_data_end+0xffff2118>
    a840:	95c8983a 	sll	r4,r18,r23
    a844:	a0806217 	ldw	r2,392(r20)
    a848:	a5800117 	ldw	r22,4(r20)
    a84c:	2084703a 	and	r2,r4,r2
    a850:	10000b26 	beq	r2,zero,a880 <__call_exitprocs+0x14c>
    a854:	a0806317 	ldw	r2,396(r20)
    a858:	2088703a 	and	r4,r4,r2
    a85c:	20000c1e 	bne	r4,zero,a890 <__call_exitprocs+0x15c>
    a860:	89400017 	ldw	r5,0(r17)
    a864:	d9000017 	ldw	r4,0(sp)
    a868:	183ee83a 	callr	r3
    a86c:	a0800117 	ldw	r2,4(r20)
    a870:	15bfbf1e 	bne	r2,r22,a770 <__alt_data_end+0xffff20d0>
    a874:	98800017 	ldw	r2,0(r19)
    a878:	153fcf26 	beq	r2,r20,a7b8 <__alt_data_end+0xffff2118>
    a87c:	003fbc06 	br	a770 <__alt_data_end+0xffff20d0>
    a880:	183ee83a 	callr	r3
    a884:	003ff906 	br	a86c <__alt_data_end+0xffff21cc>
    a888:	a5c00115 	stw	r23,4(r20)
    a88c:	003feb06 	br	a83c <__alt_data_end+0xffff219c>
    a890:	89000017 	ldw	r4,0(r17)
    a894:	183ee83a 	callr	r3
    a898:	003ff406 	br	a86c <__alt_data_end+0xffff21cc>
    a89c:	a0800017 	ldw	r2,0(r20)
    a8a0:	a027883a 	mov	r19,r20
    a8a4:	1029883a 	mov	r20,r2
    a8a8:	003fb606 	br	a784 <__alt_data_end+0xffff20e4>
    a8ac:	0005883a 	mov	r2,zero
    a8b0:	003ffb06 	br	a8a0 <__alt_data_end+0xffff2200>

0000a8b4 <__divsi3>:
    a8b4:	20001b16 	blt	r4,zero,a924 <__divsi3+0x70>
    a8b8:	000f883a 	mov	r7,zero
    a8bc:	28001616 	blt	r5,zero,a918 <__divsi3+0x64>
    a8c0:	200d883a 	mov	r6,r4
    a8c4:	29001a2e 	bgeu	r5,r4,a930 <__divsi3+0x7c>
    a8c8:	00800804 	movi	r2,32
    a8cc:	00c00044 	movi	r3,1
    a8d0:	00000106 	br	a8d8 <__divsi3+0x24>
    a8d4:	10000d26 	beq	r2,zero,a90c <__divsi3+0x58>
    a8d8:	294b883a 	add	r5,r5,r5
    a8dc:	10bfffc4 	addi	r2,r2,-1
    a8e0:	18c7883a 	add	r3,r3,r3
    a8e4:	293ffb36 	bltu	r5,r4,a8d4 <__alt_data_end+0xffff2234>
    a8e8:	0005883a 	mov	r2,zero
    a8ec:	18000726 	beq	r3,zero,a90c <__divsi3+0x58>
    a8f0:	0005883a 	mov	r2,zero
    a8f4:	31400236 	bltu	r6,r5,a900 <__divsi3+0x4c>
    a8f8:	314dc83a 	sub	r6,r6,r5
    a8fc:	10c4b03a 	or	r2,r2,r3
    a900:	1806d07a 	srli	r3,r3,1
    a904:	280ad07a 	srli	r5,r5,1
    a908:	183ffa1e 	bne	r3,zero,a8f4 <__alt_data_end+0xffff2254>
    a90c:	38000126 	beq	r7,zero,a914 <__divsi3+0x60>
    a910:	0085c83a 	sub	r2,zero,r2
    a914:	f800283a 	ret
    a918:	014bc83a 	sub	r5,zero,r5
    a91c:	39c0005c 	xori	r7,r7,1
    a920:	003fe706 	br	a8c0 <__alt_data_end+0xffff2220>
    a924:	0109c83a 	sub	r4,zero,r4
    a928:	01c00044 	movi	r7,1
    a92c:	003fe306 	br	a8bc <__alt_data_end+0xffff221c>
    a930:	00c00044 	movi	r3,1
    a934:	003fee06 	br	a8f0 <__alt_data_end+0xffff2250>

0000a938 <__modsi3>:
    a938:	20001716 	blt	r4,zero,a998 <__modsi3+0x60>
    a93c:	000f883a 	mov	r7,zero
    a940:	2005883a 	mov	r2,r4
    a944:	28001216 	blt	r5,zero,a990 <__modsi3+0x58>
    a948:	2900162e 	bgeu	r5,r4,a9a4 <__modsi3+0x6c>
    a94c:	01800804 	movi	r6,32
    a950:	00c00044 	movi	r3,1
    a954:	00000106 	br	a95c <__modsi3+0x24>
    a958:	30000a26 	beq	r6,zero,a984 <__modsi3+0x4c>
    a95c:	294b883a 	add	r5,r5,r5
    a960:	31bfffc4 	addi	r6,r6,-1
    a964:	18c7883a 	add	r3,r3,r3
    a968:	293ffb36 	bltu	r5,r4,a958 <__alt_data_end+0xffff22b8>
    a96c:	18000526 	beq	r3,zero,a984 <__modsi3+0x4c>
    a970:	1806d07a 	srli	r3,r3,1
    a974:	11400136 	bltu	r2,r5,a97c <__modsi3+0x44>
    a978:	1145c83a 	sub	r2,r2,r5
    a97c:	280ad07a 	srli	r5,r5,1
    a980:	183ffb1e 	bne	r3,zero,a970 <__alt_data_end+0xffff22d0>
    a984:	38000126 	beq	r7,zero,a98c <__modsi3+0x54>
    a988:	0085c83a 	sub	r2,zero,r2
    a98c:	f800283a 	ret
    a990:	014bc83a 	sub	r5,zero,r5
    a994:	003fec06 	br	a948 <__alt_data_end+0xffff22a8>
    a998:	0109c83a 	sub	r4,zero,r4
    a99c:	01c00044 	movi	r7,1
    a9a0:	003fe706 	br	a940 <__alt_data_end+0xffff22a0>
    a9a4:	00c00044 	movi	r3,1
    a9a8:	003ff106 	br	a970 <__alt_data_end+0xffff22d0>

0000a9ac <__udivsi3>:
    a9ac:	200d883a 	mov	r6,r4
    a9b0:	2900152e 	bgeu	r5,r4,aa08 <__udivsi3+0x5c>
    a9b4:	28001416 	blt	r5,zero,aa08 <__udivsi3+0x5c>
    a9b8:	00800804 	movi	r2,32
    a9bc:	00c00044 	movi	r3,1
    a9c0:	00000206 	br	a9cc <__udivsi3+0x20>
    a9c4:	10000e26 	beq	r2,zero,aa00 <__udivsi3+0x54>
    a9c8:	28000516 	blt	r5,zero,a9e0 <__udivsi3+0x34>
    a9cc:	294b883a 	add	r5,r5,r5
    a9d0:	10bfffc4 	addi	r2,r2,-1
    a9d4:	18c7883a 	add	r3,r3,r3
    a9d8:	293ffa36 	bltu	r5,r4,a9c4 <__alt_data_end+0xffff2324>
    a9dc:	18000826 	beq	r3,zero,aa00 <__udivsi3+0x54>
    a9e0:	0005883a 	mov	r2,zero
    a9e4:	31400236 	bltu	r6,r5,a9f0 <__udivsi3+0x44>
    a9e8:	314dc83a 	sub	r6,r6,r5
    a9ec:	10c4b03a 	or	r2,r2,r3
    a9f0:	1806d07a 	srli	r3,r3,1
    a9f4:	280ad07a 	srli	r5,r5,1
    a9f8:	183ffa1e 	bne	r3,zero,a9e4 <__alt_data_end+0xffff2344>
    a9fc:	f800283a 	ret
    aa00:	0005883a 	mov	r2,zero
    aa04:	f800283a 	ret
    aa08:	00c00044 	movi	r3,1
    aa0c:	003ff406 	br	a9e0 <__alt_data_end+0xffff2340>

0000aa10 <__umodsi3>:
    aa10:	2005883a 	mov	r2,r4
    aa14:	2900122e 	bgeu	r5,r4,aa60 <__umodsi3+0x50>
    aa18:	28001116 	blt	r5,zero,aa60 <__umodsi3+0x50>
    aa1c:	01800804 	movi	r6,32
    aa20:	00c00044 	movi	r3,1
    aa24:	00000206 	br	aa30 <__umodsi3+0x20>
    aa28:	30000c26 	beq	r6,zero,aa5c <__umodsi3+0x4c>
    aa2c:	28000516 	blt	r5,zero,aa44 <__umodsi3+0x34>
    aa30:	294b883a 	add	r5,r5,r5
    aa34:	31bfffc4 	addi	r6,r6,-1
    aa38:	18c7883a 	add	r3,r3,r3
    aa3c:	293ffa36 	bltu	r5,r4,aa28 <__alt_data_end+0xffff2388>
    aa40:	18000626 	beq	r3,zero,aa5c <__umodsi3+0x4c>
    aa44:	1806d07a 	srli	r3,r3,1
    aa48:	11400136 	bltu	r2,r5,aa50 <__umodsi3+0x40>
    aa4c:	1145c83a 	sub	r2,r2,r5
    aa50:	280ad07a 	srli	r5,r5,1
    aa54:	183ffb1e 	bne	r3,zero,aa44 <__alt_data_end+0xffff23a4>
    aa58:	f800283a 	ret
    aa5c:	f800283a 	ret
    aa60:	00c00044 	movi	r3,1
    aa64:	003ff706 	br	aa44 <__alt_data_end+0xffff23a4>

0000aa68 <__mulsi3>:
    aa68:	0005883a 	mov	r2,zero
    aa6c:	20000726 	beq	r4,zero,aa8c <__mulsi3+0x24>
    aa70:	20c0004c 	andi	r3,r4,1
    aa74:	2008d07a 	srli	r4,r4,1
    aa78:	18000126 	beq	r3,zero,aa80 <__mulsi3+0x18>
    aa7c:	1145883a 	add	r2,r2,r5
    aa80:	294b883a 	add	r5,r5,r5
    aa84:	203ffa1e 	bne	r4,zero,aa70 <__alt_data_end+0xffff23d0>
    aa88:	f800283a 	ret
    aa8c:	f800283a 	ret

0000aa90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aa90:	defffd04 	addi	sp,sp,-12
    aa94:	df000215 	stw	fp,8(sp)
    aa98:	df000204 	addi	fp,sp,8
    aa9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    aaa0:	d025f445 	stb	zero,-26671(gp)
    aaa4:	e0bfff17 	ldw	r2,-4(fp)
    aaa8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    aaac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aab0:	10000226 	beq	r2,zero,aabc <_exit+0x2c>
    ALT_SIM_FAIL();
    aab4:	002af070 	cmpltui	zero,zero,43969
    aab8:	00000106 	br	aac0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    aabc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    aac0:	003fff06 	br	aac0 <__alt_data_end+0xffff2420>
